name: Messaging Health Gate

on:
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'config/messaging_systems.yaml'
      - 'config/messaging_systems.schema.json'
      - 'src/core/messaging/**'
      - 'scripts/messaging/**'
      - 'tests/test_messaging_*.py'
  push:
    branches: [ main, master, develop ]
    paths:
      - 'config/messaging_systems.yaml'
      - 'config/messaging_systems.schema.json'
      - 'src/core/messaging/**'
      - 'scripts/messaging/**'
      - 'tests/test_messaging_*.py'
  workflow_dispatch:  # Allow manual triggering

jobs:
  messaging-health:
    name: Messaging Systems Health Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better context

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install core dependencies
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # Install messaging-specific dependencies
          pip install jsonschema pyyaml
          # Install test dependencies
          pip install pytest pytest-cov

      - name: Validate registry schema
        run: |
          echo "🔍 Validating messaging systems registry schema..."
          python -m scripts.messaging.validate_registry
        continue-on-error: false

      - name: List all systems
        run: |
          echo "📋 Listing all messaging systems..."
          python -m scripts.messaging.list_systems
        continue-on-error: false

      - name: Run messaging doctor
        id: doctor
        run: |
          echo "🏥 Running messaging doctor diagnostics..."
          python -m scripts.messaging.doctor
        continue-on-error: false

      - name: Check for critical failures
        if: steps.doctor.outcome == 'failure'
        run: |
          echo "❌ Critical messaging systems failed health checks!"
          echo "This indicates that essential messaging infrastructure is broken."
          echo "Please fix the critical system failures before merging."
          exit 1

      - name: Generate documentation
        run: |
          echo "📄 Generating messaging systems documentation..."
          python -m scripts.messaging.generate_docs
        continue-on-error: false

      - name: Run messaging tests
        run: |
          echo "🧪 Running messaging registry tests..."
          python -m pytest tests/test_messaging_registry.py -v --tb=short
        continue-on-error: false

      - name: Run health gate tests
        run: |
          echo "🧪 Running health gate tests..."
          python -m pytest tests/test_messaging_health_gate.py -v --tb=short
        continue-on-error: false

      - name: Upload documentation artifact
        uses: actions/upload-artifact@v4
        with:
          name: messaging-inventory-${{ github.sha }}
          path: docs/messaging_inventory.md
          retention-days: 30

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read the generated documentation
            const docPath = path.join(process.cwd(), 'docs', 'messaging_inventory.md');
            let docContent = '';

            try {
              docContent = fs.readFileSync(docPath, 'utf8');
            } catch (error) {
              console.log('Could not read documentation file:', error.message);
              docContent = 'Documentation generation failed.';
            }

            // Create a summary comment
            const comment = `## 🏥 Messaging Systems Health Check

            ✅ **Registry schema validation**: Passed
            ✅ **System discovery**: Completed
            ✅ **Health diagnostics**: Completed
            ✅ **Documentation generation**: Completed
            ✅ **Test suite**: Passed

            ### 📊 System Status
            ${docContent.split('## 📊 Overview')[1]?.split('## ')[0] || 'Status information not available'}

            <details>
            <summary>📄 Full Documentation</summary>

            \`\`\`markdown
            ${docContent}
            \`\`\`

            </details>

            ---
            *This comment was automatically generated by the Messaging Health Gate workflow.*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Success notification
        if: success()
        run: |
          echo "✅ Messaging health gate passed successfully!"
          echo "All critical systems are healthy and registry is valid."

      - name: Failure notification
        if: failure()
        run: |
          echo "❌ Messaging health gate failed!"
          echo "Please check the logs above for details on what needs to be fixed."
          echo ""
          echo "Common fixes:"
          echo "- Run 'python -m scripts.messaging.doctor' locally to diagnose issues"
          echo "- Run 'python -m scripts.messaging.generate_stubs' to create missing modules"
          echo "- Check that all critical systems are properly implemented"
