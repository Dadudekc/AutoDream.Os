{
  "summary": {
    "files_analyzed": 557,
    "syntax_errors": 11,
    "file_violations": 14,
    "class_violations": 229,
    "function_violations": 106,
    "total_violations": 360
  },
  "issues": [
    {
      "type": "function_loc",
      "path": "test_ctrl_t_onboarding_navigation.py",
      "function_name": "test_ctrl_t_onboarding_navigation",
      "current_loc": 116,
      "limit": 50,
      "excess": 66,
      "severity": "minor",
      "line_number": 29,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from test_ctrl_t_onboarding_navigation",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "test_pyautogui_mode.py",
      "function_name": "test_pyautogui_mode",
      "current_loc": 111,
      "limit": 50,
      "excess": 61,
      "severity": "minor",
      "line_number": 30,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from test_pyautogui_mode",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "syntax_error",
      "path": "agent_devlog_watcher.py",
      "severity": "critical"
    },
    {
      "type": "syntax_error",
      "path": "src\\web\\frontend\\settings.py",
      "severity": "critical"
    },
    {
      "type": "class_loc",
      "path": "src\\web\\vector_database\\middleware.py",
      "class_name": "VectorDatabaseMiddleware",
      "current_loc": 160,
      "limit": 100,
      "excess": 60,
      "severity": "major",
      "line_number": 18,
      "suggestion": {
        "suggested_methods_split": [
          "VectorDatabaseMiddlewareCore - Core methods: error_handler, json_required, validate_request, log_request, add_cors_headers",
          "VectorDatabaseMiddlewareUtils - Utility methods: rate_limit, cache_response, validate_pagination, decorated_function, decorated_function"
        ],
        "properties_to_extract": [
          "start_time",
          "result",
          "execution_time",
          "response",
          "page",
          "per_page",
          "client_ip",
          "current_time",
          "data",
          "error"
        ],
        "method_count": 19,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\web\\vector_database\\utils.py",
      "class_name": "VectorDatabaseUtils",
      "current_loc": 229,
      "limit": 100,
      "excess": 129,
      "severity": "major",
      "line_number": 27,
      "suggestion": {
        "suggested_methods_split": [
          "VectorDatabaseUtilsCore - Core methods: simulate_vector_search, simulate_get_documents, simulate_add_document, simulate_get_document, simulate_update_document",
          "VectorDatabaseUtilsUtils - Utility methods: simulate_delete_document, simulate_get_analytics, simulate_get_collections, simulate_export_data"
        ],
        "properties_to_extract": [
          "mock_results",
          "all_documents",
          "reverse",
          "start",
          "end",
          "documents",
          "total",
          "total_pages",
          "mock_results",
          "all_documents"
        ],
        "method_count": 9,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\web\\vector_database\\utils.py",
      "function_name": "simulate_get_documents",
      "current_loc": 55,
      "limit": 50,
      "excess": 5,
      "severity": "minor",
      "line_number": 79,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from simulate_get_documents",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\agent_vector_integration.py",
      "class_name": "AgentVectorIntegration",
      "current_loc": 238,
      "limit": 100,
      "excess": 138,
      "severity": "major",
      "line_number": 25,
      "suggestion": {
        "suggested_methods_split": [
          "AgentVectorIntegrationCore - Core methods: get_task_context, index_agent_work, index_inbox_messages, get_success_patterns, get_agent_insights",
          "AgentVectorIntegrationUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "similar_tasks",
          "related_messages",
          "devlog_insights",
          "file_path",
          "doc",
          "success",
          "inbox_path",
          "indexed_count",
          "success_results",
          "patterns",
          "work_history",
          "comm_patterns",
          "total_work",
          "high_similarity_work",
          "content",
          "doc_type",
          "doc_type",
          "doc_type"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\agent_vector_integration.py",
      "function_name": "index_agent_work",
      "current_loc": 52,
      "limit": 50,
      "excess": 2,
      "severity": "minor",
      "line_number": 102,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from index_agent_work",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\agent_vector_integration_core.py",
      "class_name": "AgentVectorIntegrationCore",
      "current_loc": 121,
      "limit": 100,
      "excess": 21,
      "severity": "major",
      "line_number": 13,
      "suggestion": {
        "suggested_methods_split": [
          "AgentVectorIntegrationCoreCore - Core methods: get_agent_context, get_task_recommendations, store_agent_knowledge, search_agent_patterns, get_agent_status",
          "AgentVectorIntegrationCoreUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "context",
          "recommendations",
          "knowledge_id",
          "patterns"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\agent_vector_integration_operations.py",
      "class_name": "AgentVectorIntegrationOperations",
      "current_loc": 132,
      "limit": 100,
      "excess": 32,
      "severity": "major",
      "line_number": 18,
      "suggestion": {
        "suggested_methods_split": [
          "AgentVectorIntegrationOperationsCore - Core methods: optimize_agent_workflow, get_swarm_intelligence, analyze_agent_performance, get_learning_recommendations, sync_with_swarm",
          "AgentVectorIntegrationOperationsUtils - Utility methods: get_integration_health"
        ],
        "properties_to_extract": [
          "optimization",
          "intelligence",
          "performance",
          "recommendations"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\services\\architectural_onboarding.py",
      "current_loc": 469,
      "limit": 400,
      "excess": 69,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "architectural_onboarding_core.py - Core classes: ArchitecturalPrinciple, ArchitecturalGuidance",
          "architectural_onboarding_utils.py - Utility functions: __init__, _define_principles, _load_agent_assignments",
          "architectural_onboarding_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 3,
          "functions": 10,
          "imports": 8
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\architectural_onboarding.py",
      "class_name": "ArchitecturalOnboardingManager",
      "current_loc": 414,
      "limit": 100,
      "excess": 314,
      "severity": "major",
      "line_number": 52,
      "suggestion": {
        "suggested_methods_split": [
          "ArchitecturalOnboardingManagerCore - Core methods: get_agent_principle, get_principle_guidance, create_onboarding_message, validate_agent_compliance, get_all_principles",
          "ArchitecturalOnboardingManagerUtils - Utility methods: assign_principle_to_agent, get_agents_by_principle"
        ],
        "properties_to_extract": [
          "default_assignments",
          "config_path",
          "principle",
          "guidance",
          "message",
          "principle",
          "guidance",
          "issues",
          "config_path",
          "config_data",
          "config",
          "principle"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\architectural_onboarding.py",
      "function_name": "_define_principles",
      "current_loc": 265,
      "limit": 50,
      "excess": 215,
      "severity": "minor",
      "line_number": 64,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _define_principles",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\contract_service.py",
      "function_name": "get_contract_definitions",
      "current_loc": 53,
      "limit": 50,
      "excess": 3,
      "severity": "minor",
      "line_number": 39,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from get_contract_definitions",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\message_identity_clarification.py",
      "function_name": "format_message_with_identity_clarification",
      "current_loc": 53,
      "limit": 50,
      "excess": 3,
      "severity": "minor",
      "line_number": 23,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from format_message_with_identity_clarification",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\messaging_agent_coordination.py",
      "class_name": "MessagingAgentCoordination",
      "current_loc": 202,
      "limit": 100,
      "excess": 102,
      "severity": "major",
      "line_number": 22,
      "suggestion": {
        "suggested_methods_split": [
          "MessagingAgentCoordinationCore - Core methods: ",
          "MessagingAgentCoordinationUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "operation_id",
          "agents",
          "exclude_agents",
          "results",
          "coord_message",
          "success",
          "success"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\messaging_agent_coordination.py",
      "function_name": "coordinate_with_agent",
      "current_loc": 133,
      "limit": 50,
      "excess": 83,
      "severity": "minor",
      "line_number": 31,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from coordinate_with_agent",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\messaging_cli.py",
      "function_name": "create_enhanced_parser",
      "current_loc": 66,
      "limit": 50,
      "excess": 16,
      "severity": "minor",
      "line_number": 22,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from create_enhanced_parser",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\messaging_core.py",
      "class_name": "UnifiedMessagingCore",
      "current_loc": 262,
      "limit": 100,
      "excess": 162,
      "severity": "major",
      "line_number": 48,
      "suggestion": {
        "suggested_methods_split": [
          "UnifiedMessagingCoreCore - Core methods: send_message_to_inbox, send_message_via_delivery_service, generate_onboarding_message, send_onboarding_message, send_bulk_onboarding",
          "UnifiedMessagingCoreUtils - Utility methods: send_message, send_to_all_agents, list_agents, show_coordinates, show_message_history"
        ],
        "properties_to_extract": [
          "message_content",
          "message",
          "delivery_success",
          "results",
          "agent_order",
          "success_count",
          "total_count",
          "message",
          "delivery_success",
          "results",
          "agent_order",
          "success_count",
          "total_count",
          "success",
          "success",
          "inbox_path",
          "recipient",
          "inbox_path",
          "filename",
          "filepath",
          "timestamp",
          "timestamp",
          "timestamp"
        ],
        "method_count": 10,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\messaging_core.py",
      "function_name": "send_message_to_inbox",
      "current_loc": 54,
      "limit": 50,
      "excess": 4,
      "severity": "minor",
      "line_number": 93,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from send_message_to_inbox",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\messaging_onboarding.py",
      "class_name": "MessagingOnboarding",
      "current_loc": 131,
      "limit": 100,
      "excess": 31,
      "severity": "major",
      "line_number": 24,
      "suggestion": {
        "suggested_methods_split": [
          "MessagingOnboardingCore - Core methods: generate_onboarding_message, send_onboarding_message, send_bulk_onboarding",
          "MessagingOnboardingUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "role",
          "status_file",
          "agent_info",
          "message_content",
          "message",
          "delivery_success",
          "results",
          "agent_order",
          "success_count",
          "total_count",
          "delivery_success",
          "delivery_success",
          "success",
          "status_data",
          "agent_name"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\services\\simple_onboarding.py",
      "current_loc": 535,
      "limit": 400,
      "excess": 135,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "simple_onboarding_core.py - Core classes: SimpleOnboarding",
          "simple_onboarding_utils.py - Utility functions: __init__, execute, _should_process_agent",
          "simple_onboarding_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 19,
          "imports": 17
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\simple_onboarding.py",
      "class_name": "SimpleOnboarding",
      "current_loc": 488,
      "limit": 100,
      "excess": 388,
      "severity": "major",
      "line_number": 48,
      "suggestion": {
        "suggested_methods_split": [
          "SimpleOnboardingCore - Core methods: execute",
          "SimpleOnboardingUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "coord_map",
          "results",
          "processed_count",
          "success_count",
          "total_count",
          "operation_desc",
          "operation_desc",
          "agent_coords",
          "chat_coords",
          "onboarding_coords",
          "wrap_msg",
          "ob_msg",
          "template",
          "timestamp",
          "timestamp",
          "resp_text",
          "template_path",
          "loader",
          "converted",
          "flow_desc",
          "operations_performed",
          "tone",
          "instruction",
          "tone",
          "instruction",
          "tone",
          "greeting",
          "responsibilities",
          "tone",
          "greeting",
          "responsibilities",
          "result",
          "data",
          "success",
          "success",
          "windows",
          "data"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\simple_onboarding.py",
      "function_name": "_onboard_agent",
      "current_loc": 87,
      "limit": 50,
      "excess": 37,
      "severity": "minor",
      "line_number": 267,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _onboard_agent",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\contract_system\\storage.py",
      "class_name": "ContractStorage",
      "current_loc": 228,
      "limit": 100,
      "excess": 128,
      "severity": "major",
      "line_number": 23,
      "suggestion": {
        "suggested_methods_split": [
          "ContractStorageCore - Core methods: save_contract, load_contract, get_contract, load_all_contracts, get_all_contracts",
          "ContractStorageUtils - Utility methods: load_agent_contracts, get_agent_contracts, get_available_tasks, assign_task, complete_task"
        ],
        "properties_to_extract": [
          "contracts",
          "agent_file",
          "agent_contracts",
          "contracts",
          "contracts_data",
          "agent_file",
          "agent_contracts_data",
          "contracts",
          "agent_contracts",
          "available_tasks",
          "contracts",
          "contracts",
          "agent_contracts",
          "contracts",
          "total_contracts",
          "active_contracts",
          "completed_contracts",
          "total_points",
          "completed_points",
          "completion_rate",
          "current_tasks",
          "contract",
          "contract",
          "contract",
          "contract"
        ],
        "method_count": 11,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\coordination\\bulk_coordinator.py",
      "class_name": "BulkCoordinator",
      "current_loc": 163,
      "limit": 100,
      "excess": 63,
      "severity": "major",
      "line_number": 26,
      "suggestion": {
        "suggested_methods_split": [
          "BulkCoordinatorCore - Core methods: coordinate_bulk_messages, coordinate_messages_by_priority, coordinate_messages_by_type, coordinate_messages_by_sender, get_bulk_coordinator_status",
          "BulkCoordinatorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "results",
          "successful",
          "failed",
          "grouped_messages",
          "execution_time",
          "grouped",
          "priority_groups",
          "results",
          "type_groups",
          "results",
          "sender_groups",
          "results",
          "strategy",
          "coordination_result",
          "strategy",
          "message_type",
          "sender_type",
          "result"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\coordination\\stats_tracker.py",
      "class_name": "StatsTracker",
      "current_loc": 235,
      "limit": 100,
      "excess": 135,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "StatsTrackerCore - Core methods: update_coordination_stats, get_coordination_stats, get_detailed_stats, get_performance_summary, reset_stats",
          "StatsTrackerUtils - Utility methods: get_tracker_status"
        ],
        "properties_to_extract": [
          "total",
          "current_avg",
          "stats",
          "total",
          "current_avg",
          "stats",
          "detailed",
          "cutoff_time",
          "recent_history",
          "total_coordinations",
          "successful",
          "failed",
          "avg_time"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\coordination\\stats_tracker.py",
      "function_name": "_update_detailed_stats",
      "current_loc": 61,
      "limit": 50,
      "excess": 11,
      "severity": "minor",
      "line_number": 88,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _update_detailed_stats",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\coordination\\strategy_coordinator.py",
      "class_name": "StrategyCoordinator",
      "current_loc": 165,
      "limit": 100,
      "excess": 65,
      "severity": "major",
      "line_number": 25,
      "suggestion": {
        "suggested_methods_split": [
          "StrategyCoordinatorCore - Core methods: determine_coordination_strategy, apply_coordination_rules, get_coordination_rules, get_routing_table, update_coordination_rule",
          "StrategyCoordinatorUtils - Utility methods: update_routing_config, get_coordinator_status"
        ],
        "properties_to_extract": [
          "priority_strategy",
          "type_strategy",
          "sender_strategy",
          "rules_applied",
          "routing_config",
          "time_estimates"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\handlers\\command_handler.py",
      "class_name": "CommandHandler",
      "current_loc": 199,
      "limit": 100,
      "excess": 99,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "CommandHandlerCore - Core methods: get_command_statistics",
          "CommandHandlerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "total",
          "success_rate",
          "start_time",
          "execution_time",
          "result",
          "message_data",
          "coordinate_handler",
          "coords_result",
          "agents",
          "results",
          "stats",
          "result",
          "message_data",
          "result",
          "agents",
          "formatted",
          "count",
          "result",
          "result",
          "result",
          "result",
          "result"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\handlers\\command_handler.py",
      "function_name": "process_command",
      "current_loc": 70,
      "limit": 50,
      "excess": 20,
      "severity": "minor",
      "line_number": 31,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from process_command",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\handlers\\contract_handler.py",
      "class_name": "ContractHandler",
      "current_loc": 143,
      "limit": 100,
      "excess": 43,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "ContractHandlerCore - Core methods: handle_contract_commands, get_next_task, check_contract_status, assign_task, complete_task",
          "ContractHandlerUtils - Utility methods: get_agent_tasks, get_contract_metrics, reset_contracts, get_contract_status"
        ],
        "properties_to_extract": [
          "task_id",
          "status",
          "status",
          "contracts_dir",
          "status",
          "all_contracts",
          "task",
          "status",
          "agent_summaries"
        ],
        "method_count": 9,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\handlers\\contract_handler.py",
      "function_name": "handle_contract_commands",
      "current_loc": 54,
      "limit": 50,
      "excess": 4,
      "severity": "minor",
      "line_number": 36,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from handle_contract_commands",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\handlers\\onboarding_handler.py",
      "class_name": "OnboardingHandler",
      "current_loc": 217,
      "limit": 100,
      "excess": 117,
      "severity": "major",
      "line_number": 26,
      "suggestion": {
        "suggested_methods_split": [
          "OnboardingHandlerCore - Core methods: handle_onboarding_commands",
          "OnboardingHandlerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "reg",
          "target_agents",
          "stamp",
          "backup",
          "ui_onboarder",
          "total",
          "ok_count",
          "agents",
          "cycle",
          "cycle",
          "role_map",
          "role",
          "message",
          "sync_ok",
          "agents",
          "spec",
          "role",
          "backup_path",
          "ui_onboarder",
          "sync_ok",
          "path",
          "proc",
          "coords",
          "ok",
          "ok",
          "path"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\handlers\\onboarding_handler.py",
      "function_name": "_handle_hard_onboarding",
      "current_loc": 165,
      "limit": 50,
      "excess": 115,
      "severity": "minor",
      "line_number": 78,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _handle_hard_onboarding",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\messaging_cli_coordinate_management\\coordinate_repository.py",
      "class_name": "CoordinateRepository",
      "current_loc": 119,
      "limit": 100,
      "excess": 19,
      "severity": "major",
      "line_number": 14,
      "suggestion": {
        "suggested_methods_split": [
          "CoordinateRepositoryCore - Core methods: update_agent_coordinates, update_all_agents_coordinates, update_onboarding_coordinates, update_chat_coordinates, update_all_onboarding_coordinates",
          "CoordinateRepositoryUtils - Utility methods: update_all_chat_coordinates, get_chat_input_xy, get_onboarding_input_xy"
        ],
        "properties_to_extract": [
          "data",
          "agent",
          "data",
          "agents",
          "data",
          "data",
          "data",
          "data",
          "data",
          "coords",
          "data",
          "coords"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\messaging_status\\analytics.py",
      "class_name": "StatusAnalytics",
      "current_loc": 185,
      "limit": 100,
      "excess": 85,
      "severity": "major",
      "line_number": 18,
      "suggestion": {
        "suggested_methods_split": [
          "StatusAnalyticsCore - Core methods: add_status_entry, get_success_rate, get_agent_success_rate, get_performance_metrics, get_agent_statistics",
          "StatusAnalyticsUtils - Utility methods: get_error_analysis"
        ],
        "properties_to_extract": [
          "entries",
          "successful",
          "entries",
          "successful",
          "cache_key",
          "entries",
          "entries",
          "agent_stats",
          "entries",
          "error_entries",
          "error_types",
          "common_errors",
          "cutoff_time",
          "entries",
          "hourly_errors",
          "trends",
          "metrics",
          "response_times",
          "total_requests",
          "error_count",
          "metrics",
          "agent_id",
          "error_type",
          "hour_key"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\messaging_status\\reports.py",
      "class_name": "StatusReporter",
      "current_loc": 197,
      "limit": 100,
      "excess": 97,
      "severity": "major",
      "line_number": 24,
      "suggestion": {
        "suggested_methods_split": [
          "StatusReporterCore - Core methods: generate_status_report, generate_agent_report, generate_performance_report, generate_error_report, generate_daily_summary",
          "StatusReporterUtils - Utility methods: generate_weekly_summary"
        ],
        "properties_to_extract": [
          "performance_metrics",
          "agent_stats",
          "error_analysis",
          "agent_stats",
          "agent_data",
          "performance_metrics",
          "performance_rating",
          "error_analysis",
          "today",
          "time_window",
          "week_ago",
          "time_window",
          "recommendations",
          "recommendations",
          "top_error",
          "recent_errors"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\messaging_status\\tracker.py",
      "class_name": "MessagingStatusTracker",
      "current_loc": 177,
      "limit": 100,
      "excess": 77,
      "severity": "major",
      "line_number": 26,
      "suggestion": {
        "suggested_methods_split": [
          "MessagingStatusTrackerCore - Core methods: track_message_sent, track_message_delivered, track_message_failed, track_system_error, track_performance_metric",
          "MessagingStatusTrackerUtils - Utility methods: get_status_summary, get_agent_status, get_performance_metrics, generate_report, get_agent_report"
        ],
        "properties_to_extract": [
          "entry",
          "entry",
          "error_details",
          "entry",
          "error_details",
          "entry",
          "metric_details",
          "entry",
          "performance_metrics",
          "agent_stats",
          "agent_data",
          "cutoff_time",
          "old_entries",
          "count"
        ],
        "method_count": 11,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\protocol\\routers\\route_analyzer.py",
      "class_name": "RouteAnalyzer",
      "current_loc": 171,
      "limit": 100,
      "excess": 71,
      "severity": "major",
      "line_number": 33,
      "suggestion": {
        "suggested_methods_split": [
          "RouteAnalyzerCore - Core methods: analyze_route_options, update_route_performance, get_route_performance_summary, get_route_usage_stats, clear_performance_data",
          "RouteAnalyzerUtils - Utility methods: get_analyzer_status"
        ],
        "properties_to_extract": [
          "route_scores",
          "best_route",
          "route_key",
          "score",
          "base_scores",
          "route_key",
          "route_type",
          "summary",
          "score",
          "latencies",
          "route_opt",
          "usage_count",
          "avg_latency"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\protocol\\routers\\route_analyzer.py",
      "function_name": "_calculate_route_score",
      "current_loc": 55,
      "limit": 50,
      "excess": 5,
      "severity": "minor",
      "line_number": 94,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _calculate_route_score",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\utils\\messaging_validation_utils.py",
      "class_name": "MessagingValidationUtils",
      "current_loc": 260,
      "limit": 100,
      "excess": 160,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "MessagingValidationUtilsCore - Core methods: validate_message_structure, validate_message_config, validate_agent_id, validate_content_length, get_validation_summary",
          "MessagingValidationUtilsUtils - Utility methods: validate_coordinates_async"
        ],
        "properties_to_extract": [
          "errors",
          "warnings",
          "errors",
          "warnings",
          "required_fields",
          "valid_agents",
          "valid_types",
          "valid_priorities",
          "valid_tags",
          "result",
          "loop",
          "result",
          "loop",
          "task",
          "result",
          "result"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\utils\\messaging_validation_utils.py",
      "function_name": "validate_message_structure",
      "current_loc": 52,
      "limit": 50,
      "excess": 2,
      "severity": "minor",
      "line_number": 32,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from validate_message_structure",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\vector_database\\vector_database_engine.py",
      "class_name": "VectorDatabaseEngine",
      "current_loc": 136,
      "limit": 100,
      "excess": 36,
      "severity": "major",
      "line_number": 36,
      "suggestion": {
        "suggested_methods_split": [
          "VectorDatabaseEngineCore - Core methods: create_collection, get_collection, add_document, search_documents, get_document",
          "VectorDatabaseEngineUtils - Utility methods: delete_document, clear_collection, get_stats, get_performance_report, optimize"
        ],
        "properties_to_extract": [
          "collection",
          "collection",
          "collection",
          "rank",
          "collection",
          "collection",
          "collection",
          "removed",
          "msg",
          "new_avg",
          "msg",
          "msg"
        ],
        "method_count": 11,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\vector_messaging\\agent_enhancement_integrator_core.py",
      "class_name": "AgentEnhancementIntegratorCore",
      "current_loc": 177,
      "limit": 100,
      "excess": 77,
      "severity": "major",
      "line_number": 24,
      "suggestion": {
        "suggested_methods_split": [
          "AgentEnhancementIntegratorCoreCore - Core methods: integrate_agent6_enhancements, integrate_agent7_enhancements, integrate_agent8_enhancements",
          "AgentEnhancementIntegratorCoreUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "agent6_patterns",
          "success_count",
          "agent7_patterns",
          "success_count",
          "agent8_patterns",
          "success_count",
          "doc",
          "result"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\vector_messaging\\agent_enhancement_integrator_operations.py",
      "class_name": "AgentEnhancementIntegratorOperations",
      "current_loc": 189,
      "limit": 100,
      "excess": 89,
      "severity": "major",
      "line_number": 24,
      "suggestion": {
        "suggested_methods_split": [
          "AgentEnhancementIntegratorOperationsCore - Core methods: search_enhancement_patterns, get_agent_enhancement_summary, optimize_agent_communication, get_swarm_enhancement_analytics, cleanup_old_patterns",
          "AgentEnhancementIntegratorOperationsUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "search_query",
          "results",
          "search_query",
          "results",
          "categories",
          "summary",
          "recommendations",
          "search_query",
          "results",
          "agent_stats",
          "category_stats",
          "category",
          "agent",
          "category"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\vector_messaging\\agent_enhancement_integrator_operations.py",
      "function_name": "optimize_agent_communication",
      "current_loc": 53,
      "limit": 50,
      "excess": 3,
      "severity": "minor",
      "line_number": 98,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from optimize_agent_communication",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\vector_messaging\\search_query_engine.py",
      "class_name": "SearchQueryEngine",
      "current_loc": 307,
      "limit": 100,
      "excess": 207,
      "severity": "major",
      "line_number": 24,
      "suggestion": {
        "suggested_methods_split": [
          "SearchQueryEngineCore - Core methods: search_messages, search_devlogs, search_all, get_related_messages, search_by_metadata",
          "SearchQueryEngineUtils - Utility methods: get_search_summary, get_search_metrics"
        ],
        "properties_to_extract": [
          "start_time",
          "start_time",
          "start_time",
          "start_time",
          "start_time",
          "search_query",
          "results",
          "search_time",
          "filters",
          "search_query",
          "results",
          "search_time",
          "search_query",
          "results",
          "search_time",
          "original_doc",
          "search_query",
          "results",
          "related_results",
          "search_time",
          "search_query",
          "results",
          "search_time",
          "search_time",
          "search_time",
          "search_time",
          "search_time",
          "search_time"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\vector_messaging\\search_query_engine.py",
      "function_name": "search_messages",
      "current_loc": 53,
      "limit": 50,
      "excess": 3,
      "severity": "minor",
      "line_number": 41,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from search_messages",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\vector_messaging\\search_query_engine.py",
      "function_name": "search_devlogs",
      "current_loc": 61,
      "limit": 50,
      "excess": 11,
      "severity": "minor",
      "line_number": 95,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from search_devlogs",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\vector_messaging\\search_query_engine.py",
      "function_name": "search_all",
      "current_loc": 52,
      "limit": 50,
      "excess": 2,
      "severity": "minor",
      "line_number": 157,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from search_all",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\coordinator_registry.py",
      "class_name": "CoordinatorRegistry",
      "current_loc": 121,
      "limit": 100,
      "excess": 21,
      "severity": "major",
      "line_number": 18,
      "suggestion": {
        "suggested_methods_split": [
          "CoordinatorRegistryCore - Core methods: register_coordinator, get_coordinator, get_all_coordinators, unregister_coordinator, get_coordinator_statuses",
          "CoordinatorRegistryUtils - Utility methods: shutdown_all_coordinators, get_coordinator_count, get_coordinators_by_status, clear_all_coordinators"
        ],
        "properties_to_extract": [
          "statuses",
          "filtered",
          "coordinator",
          "status",
          "coord_status"
        ],
        "method_count": 9,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\documentation_indexing_service.py",
      "class_name": "DocumentationIndexingService",
      "current_loc": 176,
      "limit": 100,
      "excess": 76,
      "severity": "major",
      "line_number": 9,
      "suggestion": {
        "suggested_methods_split": [
          "DocumentationIndexingServiceCore - Core methods: index_project_documentation, index_specific_files, index_directory, reindex_file, get_indexing_status",
          "DocumentationIndexingServiceUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "results",
          "directories_to_index",
          "total_results",
          "key_files",
          "results",
          "stats",
          "dir_path",
          "file_path",
          "path",
          "content",
          "metadata",
          "results",
          "results"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\documentation_indexing_service.py",
      "function_name": "index_project_documentation",
      "current_loc": 53,
      "limit": 50,
      "excess": 3,
      "severity": "minor",
      "line_number": 26,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from index_project_documentation",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\message_queue.py",
      "class_name": "MessageQueue",
      "current_loc": 236,
      "limit": 100,
      "excess": 136,
      "severity": "major",
      "line_number": 29,
      "suggestion": {
        "suggested_methods_split": [
          "MessageQueueCore - Core methods: enqueue, dequeue, mark_delivered, mark_failed, get_statistics",
          "MessageQueueUtils - Utility methods: cleanup_expired"
        ],
        "properties_to_extract": [
          "config_issues",
          "queue_id",
          "now",
          "priority_score",
          "entry",
          "batch_size",
          "entries",
          "entries",
          "heap",
          "entries_to_process",
          "entries",
          "entries",
          "entries",
          "entries",
          "original_count",
          "active_entries",
          "expired_count",
          "data",
          "temp_file",
          "data"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\message_queue.py",
      "function_name": "enqueue",
      "current_loc": 54,
      "limit": 50,
      "excess": 4,
      "severity": "minor",
      "line_number": 57,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from enqueue",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\messaging_optimizer_orchestrator.py",
      "class_name": "MessagingOptimizationOrchestrator",
      "current_loc": 190,
      "limit": 100,
      "excess": 90,
      "severity": "major",
      "line_number": 37,
      "suggestion": {
        "suggested_methods_split": [
          "MessagingOptimizationOrchestratorCore - Core methods: start_optimizer, stop_optimizer, get_optimization_summary",
          "MessagingOptimizationOrchestratorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "uptime",
          "start_time",
          "batch_optimization",
          "async_optimization",
          "retry_optimization",
          "connection_optimization",
          "execution_time",
          "uptime"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\messaging_optimizer_orchestrator.py",
      "function_name": "optimize_messaging",
      "current_loc": 58,
      "limit": 50,
      "excess": 8,
      "severity": "minor",
      "line_number": 117,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from optimize_messaging",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\search_history_service.py",
      "class_name": "SearchHistoryService",
      "current_loc": 154,
      "limit": 100,
      "excess": 54,
      "severity": "major",
      "line_number": 9,
      "suggestion": {
        "suggested_methods_split": [
          "SearchHistoryServiceCore - Core methods: add_search, get_search_suggestions, get_agent_search_history, clear_history, get_statistics",
          "SearchHistoryServiceUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "search_entry",
          "suggestions",
          "common_patterns",
          "agent_history",
          "total_searches",
          "unique_agents",
          "agent_stats",
          "role",
          "domain",
          "query"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\search_history_service.py",
      "function_name": "get_search_suggestions",
      "current_loc": 60,
      "limit": 50,
      "excess": 10,
      "severity": "minor",
      "line_number": 47,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from get_search_suggestions",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\unified_import_system.py",
      "class_name": "UnifiedImportSystem",
      "current_loc": 242,
      "limit": 100,
      "excess": 142,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "UnifiedImportSystemCore - Core methods: os, sys, json, logging, threading",
          "UnifiedImportSystemUtils - Utility methods: time, re, datetime, Path, Any"
        ],
        "properties_to_extract": [],
        "method_count": 45,
        "estimated_classes": 4
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\analytics\\engines\\coordination_analytics_engine.py",
      "class_name": "CoordinationAnalyticsEngine",
      "current_loc": 109,
      "limit": 100,
      "excess": 9,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "CoordinationAnalyticsEngineCore - Core methods: collect_analytics, get_analytics_summary, clear_analytics_history, get_status",
          "CoordinationAnalyticsEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "metrics",
          "insights",
          "result",
          "metrics",
          "insights",
          "total_analytics",
          "recent_analytics"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\analytics\\engines\\metrics_engine.py",
      "class_name": "MetricsEngine",
      "current_loc": 128,
      "limit": 100,
      "excess": 28,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "MetricsEngineCore - Core methods: record_metric, increment_metric, get_metric, get_all_metrics, record_performance",
          "MetricsEngineUtils - Utility methods: record_error, get_performance_summary, get_error_summary, clear_metrics, get_status"
        ],
        "properties_to_extract": [
          "uptime",
          "durations",
          "avg_duration",
          "max_duration",
          "min_duration",
          "error_types"
        ],
        "method_count": 10,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\analytics\\intelligence\\anomaly_detection_engine.py",
      "class_name": "AnomalyDetectionEngine",
      "current_loc": 101,
      "limit": 100,
      "excess": 1,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "AnomalyDetectionEngineCore - Core methods: detect_anomalies, get_anomaly_summary",
          "AnomalyDetectionEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "anomalies",
          "stat_anomalies",
          "perf_anomalies",
          "anomalies",
          "threshold",
          "by_type",
          "by_severity",
          "mean",
          "stdev",
          "anomalies",
          "change",
          "anomaly_type",
          "severity",
          "z_score"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\analytics\\intelligence\\business_intelligence_engine_core.py",
      "class_name": "BusinessIntelligenceEngineCore",
      "current_loc": 163,
      "limit": 100,
      "excess": 63,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "BusinessIntelligenceEngineCoreCore - Core methods: generate_insights, get_insights_history, clear_insights, get_metrics, update_metrics",
          "BusinessIntelligenceEngineCoreUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "insights",
          "numeric_fields",
          "numeric_fields",
          "recommendations",
          "kpis",
          "numeric_fields",
          "insights",
          "recommendations",
          "kpis",
          "insight_result",
          "values",
          "mean_val",
          "median_val",
          "std_val",
          "values",
          "insight",
          "trend",
          "trend_strength",
          "trend",
          "trend_strength"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\analytics\\intelligence\\business_intelligence_engine_operations.py",
      "class_name": "BusinessIntelligenceEngineOperations",
      "current_loc": 194,
      "limit": 100,
      "excess": 94,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "BusinessIntelligenceEngineOperationsCore - Core methods: generate_dashboard_data, export_insights, get_performance_metrics, optimize_performance",
          "BusinessIntelligenceEngineOperationsUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "summary",
          "dates",
          "numeric_fields",
          "key_metrics",
          "numeric_fields",
          "charts",
          "numeric_fields",
          "alerts",
          "numeric_fields",
          "csv_lines",
          "dashboard",
          "values",
          "values",
          "values",
          "chart_data",
          "mean_val",
          "std_val"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\analytics\\intelligence\\predictive_modeling_engine.py",
      "class_name": "PredictiveModelingEngine",
      "current_loc": 144,
      "limit": 100,
      "excess": 44,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "PredictiveModelingEngineCore - Core methods: create_model, train_model, predict, get_model_info, get_all_models",
          "PredictiveModelingEngineUtils - Utility methods: delete_model, get_predictions_summary, get_status"
        ],
        "properties_to_extract": [
          "model",
          "prediction",
          "values",
          "base_prediction",
          "noise",
          "total_predictions",
          "recent_predictions"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\analytics\\intelligence\\pattern_analysis\\anomaly_detector.py",
      "class_name": "AnomalyDetector",
      "current_loc": 152,
      "limit": 100,
      "excess": 52,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "AnomalyDetectorCore - Core methods: detect_anomalies, detect_outliers",
          "AnomalyDetectorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "numeric_values",
          "anomalies",
          "mean_val",
          "stdev_val",
          "anomalies",
          "threshold",
          "sorted_values",
          "n",
          "q1_idx",
          "q3_idx",
          "q1",
          "q3",
          "iqr",
          "lower_bound",
          "upper_bound",
          "outliers",
          "mean_val",
          "stdev_val",
          "outliers",
          "threshold",
          "z_score"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\analytics\\orchestrators\\coordination_analytics_orchestrator.py",
      "class_name": "CoordinationAnalyticsSystem",
      "current_loc": 120,
      "limit": 100,
      "excess": 20,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "CoordinationAnalyticsSystemCore - Core methods: start, stop, process_analytics, get_analytics_report, get_status",
          "CoordinationAnalyticsSystemUtils - Utility methods: reset_stats"
        ],
        "properties_to_extract": [
          "result",
          "recommendations"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\analytics\\processors\\insight_processor.py",
      "class_name": "InsightProcessor",
      "current_loc": 130,
      "limit": 100,
      "excess": 30,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "InsightProcessorCore - Core methods: process_insight, batch_process_insights, get_processing_stats, reset_stats, get_status",
          "InsightProcessorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "total",
          "success_rate",
          "processed_insight",
          "required_fields",
          "confidence",
          "results",
          "result"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\analytics\\processors\\prediction_processor.py",
      "class_name": "PredictionProcessor",
      "current_loc": 125,
      "limit": 100,
      "excess": 25,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "PredictionProcessorCore - Core methods: process_prediction, batch_process_predictions, get_processing_stats, reset_stats, get_status",
          "PredictionProcessorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "total",
          "success_rate",
          "prediction",
          "required_fields",
          "confidence",
          "results",
          "result"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "syntax_error",
      "path": "src\\core\\consolidation\\base.py",
      "severity": "critical"
    },
    {
      "type": "class_loc",
      "path": "src\\core\\consolidation\\utility_consolidation\\utility_consolidation_engine.py",
      "class_name": "UtilityConsolidationEngine",
      "current_loc": 132,
      "limit": 100,
      "excess": 32,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "UtilityConsolidationEngineCore - Core methods: consolidate_utilities, get_consolidation_summary, clear_consolidation_history, get_status",
          "UtilityConsolidationEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "consolidated",
          "duplicates",
          "optimized",
          "result",
          "merged",
          "seen",
          "duplicates",
          "seen",
          "optimized",
          "total_consolidations",
          "recent_consolidation",
          "name",
          "name",
          "optimized_utility"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\consolidation\\utility_consolidation\\utility_consolidation_orchestrator.py",
      "class_name": "UtilityConsolidationOrchestrator",
      "current_loc": 176,
      "limit": 100,
      "excess": 76,
      "severity": "major",
      "line_number": 24,
      "suggestion": {
        "suggested_methods_split": [
          "UtilityConsolidationOrchestratorCore - Core methods: run_consolidation_analysis, generate_consolidation_report, execute_consolidation, save_report, get_opportunities_summary",
          "UtilityConsolidationOrchestratorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "analysis_results",
          "report",
          "report",
          "opportunity",
          "primary",
          "consolidated",
          "file_path",
          "cons_type",
          "detailed_opp",
          "consolidated_content",
          "consolidated_path"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "syntax_error",
      "path": "src\\core\\constants\\fsm.py",
      "severity": "critical"
    },
    {
      "type": "class_loc",
      "path": "src\\core\\coordination\\swarm\\engines\\performance_monitoring_engine.py",
      "class_name": "PerformanceMonitoringEngine",
      "current_loc": 156,
      "limit": 100,
      "excess": 56,
      "severity": "major",
      "line_number": 26,
      "suggestion": {
        "suggested_methods_split": [
          "PerformanceMonitoringEngineCore - Core methods: update_metrics, get_performance_summary, get_efficiency_trend, reset_metrics, get_metrics_export",
          "PerformanceMonitoringEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "efficiency",
          "base_efficiency",
          "efficiency",
          "total_tasks",
          "success_rate",
          "time_efficiency",
          "time_efficiency"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\coordination\\swarm\\engines\\task_coordination_engine.py",
      "class_name": "TaskCoordinationEngine",
      "current_loc": 182,
      "limit": 100,
      "excess": 82,
      "severity": "major",
      "line_number": 29,
      "suggestion": {
        "suggested_methods_split": [
          "TaskCoordinationEngineCore - Core methods: get_task_summary, get_next_task, clear_completed_tasks",
          "TaskCoordinationEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "result",
          "execution_time",
          "queue",
          "queue"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\coordination\\swarm\\orchestrators\\swarm_coordination_orchestrator.py",
      "class_name": "SwarmCoordinationEnhancer",
      "current_loc": 133,
      "limit": 100,
      "excess": 33,
      "severity": "major",
      "line_number": 64,
      "suggestion": {
        "suggested_methods_split": [
          "SwarmCoordinationEnhancerCore - Core methods: start_coordination, stop_coordination, get_coordination_summary, get_performance_metrics, reset_metrics",
          "SwarmCoordinationEnhancerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "uptime",
          "task_summary",
          "performance_summary",
          "result",
          "uptime"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\data_optimization\\data_optimization_engine.py",
      "class_name": "DataOptimizationEngine",
      "current_loc": 134,
      "limit": 100,
      "excess": 34,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "DataOptimizationEngineCore - Core methods: optimize_data, get_optimization_summary, clear_optimization_history, get_status",
          "DataOptimizationEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "optimized",
          "cached",
          "metrics",
          "result",
          "compressed",
          "cache_key",
          "original_size",
          "optimized_size",
          "compression_ratio",
          "total_optimizations",
          "recent_optimization",
          "oldest_key",
          "compressed_item"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\deployment\\deployment_orchestrator_engine.py",
      "class_name": "DeploymentOrchestratorEngine",
      "current_loc": 127,
      "limit": 100,
      "excess": 27,
      "severity": "major",
      "line_number": 26,
      "suggestion": {
        "suggested_methods_split": [
          "DeploymentOrchestratorEngineCore - Core methods: initialize_system, deploy_to_agent, mass_deploy, get_deployment_status, get_metrics",
          "DeploymentOrchestratorEngineUtils - Utility methods: get_agent_domains, update_config, shutdown"
        ],
        "properties_to_extract": [
          "results",
          "success",
          "successful",
          "agent_id",
          "success"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\deployment\\coordinators\\deployment_executor.py",
      "class_name": "DeploymentExecutor",
      "current_loc": 101,
      "limit": 100,
      "excess": 1,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "DeploymentExecutorCore - Core methods: execute_deployment, get_deployment_status, get_deployment_summary, clear_deployment_history, get_status",
          "DeploymentExecutorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "deployment_id",
          "result",
          "result",
          "total_deployments",
          "active_deployments",
          "recent_deployment"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\deployment\\coordinators\\metrics_tracker.py",
      "class_name": "DeploymentMetricsTracker",
      "current_loc": 180,
      "limit": 100,
      "excess": 80,
      "severity": "major",
      "line_number": 25,
      "suggestion": {
        "suggested_methods_split": [
          "DeploymentMetricsTrackerCore - Core methods: update_deployment_metrics, update_agent_status, get_agent_status, get_deployment_metrics, get_metrics_summary",
          "DeploymentMetricsTrackerUtils - Utility methods: get_target_analysis, get_performance_report, reset_metrics, export_metrics"
        ],
        "properties_to_extract": [
          "total_deployments",
          "success_score",
          "efficiency_score",
          "by_type",
          "by_priority",
          "by_status",
          "total_deployments",
          "efficiency_score",
          "recommendations",
          "avg_time_per_deployment",
          "time_efficiency",
          "time_efficiency"
        ],
        "method_count": 9,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\deployment\\coordinators\\target_discovery.py",
      "class_name": "TargetDiscoveryEngine",
      "current_loc": 129,
      "limit": 100,
      "excess": 29,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "TargetDiscoveryEngineCore - Core methods: discover_targets, get_discovery_summary, clear_discovery_history, get_status",
          "TargetDiscoveryEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "targets",
          "prioritized",
          "filtered",
          "result",
          "targets",
          "prioritized",
          "filtered",
          "total_discoveries",
          "recent_discovery",
          "priority"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\deployment\\engines\\deployment_discovery_engine.py",
      "class_name": "DeploymentDiscoveryEngine",
      "current_loc": 164,
      "limit": 100,
      "excess": 64,
      "severity": "major",
      "line_number": 27,
      "suggestion": {
        "suggested_methods_split": [
          "DeploymentDiscoveryEngineCore - Core methods: discover_targets, prioritize_targets, get_discovered_targets, filter_targets",
          "DeploymentDiscoveryEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "targets",
          "targets",
          "targets",
          "filtered",
          "targets",
          "file_targets",
          "system_targets",
          "optimization_targets",
          "integration_patterns",
          "optimization_areas",
          "priority_order",
          "sorted_targets",
          "filtered",
          "filtered",
          "target",
          "target",
          "target"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\deployment\\engines\\deployment_metrics_engine.py",
      "class_name": "DeploymentMetricsEngine",
      "current_loc": 185,
      "limit": 100,
      "excess": 85,
      "severity": "major",
      "line_number": 25,
      "suggestion": {
        "suggested_methods_split": [
          "DeploymentMetricsEngineCore - Core methods: start_deployment_tracking, update_target_completion, finish_deployment_tracking, get_current_metrics, get_metrics_summary",
          "DeploymentMetricsEngineUtils - Utility methods: get_historical_metrics, analyze_performance_trends"
        ],
        "properties_to_extract": [
          "final_metrics",
          "progress_percentage",
          "recent_metrics",
          "avg_success_rate",
          "avg_throughput",
          "avg_execution_time",
          "completed",
          "progress_percentage"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\dry_eliminator\\engines\\code_analysis_engine.py",
      "class_name": "CodeAnalysisEngine",
      "current_loc": 138,
      "limit": 100,
      "excess": 38,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "CodeAnalysisEngineCore - Core methods: analyze_code, get_analysis_summary, clear_analysis_history, get_status",
          "CodeAnalysisEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "patterns",
          "duplicates",
          "metrics",
          "result",
          "patterns",
          "duplicates",
          "metrics",
          "total_analyses",
          "recent_analysis",
          "seen",
          "name"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\dry_eliminator\\engines\\dry_elimination_engine_orchestrator.py",
      "class_name": "DRYEliminationEngineOrchestrator",
      "current_loc": 204,
      "limit": 100,
      "excess": 104,
      "severity": "major",
      "line_number": 41,
      "suggestion": {
        "suggested_methods_split": [
          "DRYEliminationEngineOrchestratorCore - Core methods: run_full_analysis, get_violations_summary, get_elimination_summary, generate_detailed_report, export_results",
          "DRYEliminationEngineOrchestratorUtils - Utility methods: clear_analysis, get_analysis_status"
        ],
        "properties_to_extract": [
          "analysis_results",
          "import_patterns",
          "method_patterns",
          "constant_patterns",
          "duplicate_blocks",
          "violations",
          "elimination_results",
          "summary",
          "metrics_file",
          "report_file",
          "results_file",
          "strategy",
          "result"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\dry_eliminator\\engines\\dry_elimination_engine_orchestrator.py",
      "function_name": "run_full_analysis",
      "current_loc": 91,
      "limit": 50,
      "excess": 41,
      "severity": "minor",
      "line_number": 63,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from run_full_analysis",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\dry_eliminator\\engines\\elimination_strategy_engine.py",
      "class_name": "EliminationStrategyEngine",
      "current_loc": 117,
      "limit": 100,
      "excess": 17,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "EliminationStrategyEngineCore - Core methods: execute_elimination, get_elimination_summary, clear_elimination_history, get_status",
          "EliminationStrategyEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "strategy",
          "result",
          "metrics",
          "elimination_result",
          "result",
          "metrics",
          "total_eliminations",
          "recent_elimination"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\dry_eliminator\\engines\\file_discovery_engine.py",
      "class_name": "FileDiscoveryEngine",
      "current_loc": 168,
      "limit": 100,
      "excess": 68,
      "severity": "major",
      "line_number": 22,
      "suggestion": {
        "suggested_methods_split": [
          "FileDiscoveryEngineCore - Core methods: discover_python_files, get_file_statistics, get_files_by_size, get_files_by_line_count, get_largest_files",
          "FileDiscoveryEngineUtils - Utility methods: get_files_by_extension, get_files_in_directory, refresh_file_list, get_file_metadata, clear_cache"
        ],
        "properties_to_extract": [
          "python_files",
          "total_size",
          "total_lines",
          "filtered_files",
          "filtered_files",
          "file_sizes",
          "filtered_files",
          "filtered_files",
          "target_dir",
          "metadata",
          "file_size",
          "metadata",
          "line_count",
          "metadata",
          "file_size",
          "content"
        ],
        "method_count": 11,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\dry_eliminator\\engines\\metrics_reporting_engine.py",
      "class_name": "MetricsReportingEngine",
      "current_loc": 245,
      "limit": 100,
      "excess": 145,
      "severity": "major",
      "line_number": 28,
      "suggestion": {
        "suggested_methods_split": [
          "MetricsReportingEngineCore - Core methods: start_analysis, end_analysis, update_file_metrics, update_violation_metrics, update_elimination_metrics",
          "MetricsReportingEngineUtils - Utility methods: generate_summary_report, generate_detailed_report, export_metrics_to_file, get_metrics_dict, reset_metrics"
        ],
        "properties_to_extract": [
          "type_counts",
          "successful_results",
          "failed_results",
          "total_lines_removed",
          "modified_files",
          "type_counts",
          "severity_counts",
          "report",
          "type_counts",
          "severity_counts",
          "duration",
          "success_rate",
          "violations_per_file",
          "lines_per_violation",
          "efficiency"
        ],
        "method_count": 10,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\dry_eliminator\\engines\\metrics_reporting_engine.py",
      "function_name": "generate_detailed_report",
      "current_loc": 75,
      "limit": 50,
      "excess": 25,
      "severity": "minor",
      "line_number": 157,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from generate_detailed_report",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\dry_eliminator\\orchestrators\\elimination_coordinator.py",
      "class_name": "EliminationCoordinator",
      "current_loc": 210,
      "limit": 100,
      "excess": 110,
      "severity": "major",
      "line_number": 34,
      "suggestion": {
        "suggested_methods_split": [
          "EliminationCoordinatorCore - Core methods: eliminate_advanced_dry_violations, analyze_project_violations, eliminate_specific_violations, get_coordinator_status, reset_coordinator_state",
          "EliminationCoordinatorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "metrics",
          "engine_summary",
          "metrics",
          "start_time",
          "python_files",
          "violations",
          "elimination_time",
          "summary",
          "python_files",
          "violations",
          "summary",
          "all_violations",
          "target_violations",
          "elimination_results",
          "elimination_results"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\dry_eliminator\\orchestrators\\results_manager.py",
      "class_name": "ResultsManager",
      "current_loc": 234,
      "limit": 100,
      "excess": 134,
      "severity": "major",
      "line_number": 33,
      "suggestion": {
        "suggested_methods_split": [
          "ResultsManagerCore - Core methods: update_results, generate_summary_report, get_results_status, reset_results, export_results",
          "ResultsManagerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "type_mapping",
          "counter_name",
          "successful_results",
          "total_results",
          "total_consolidations",
          "total_removals",
          "total_errors",
          "parts",
          "total_time"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\emergency_intervention\\unified_emergency\\engine.py",
      "class_name": "EmergencyInterventionEngine",
      "current_loc": 167,
      "limit": 100,
      "excess": 67,
      "severity": "major",
      "line_number": 35,
      "suggestion": {
        "suggested_methods_split": [
          "EmergencyInterventionEngineCore - Core methods: register_protocol, register_handler, detect_emergency, respond_to_emergency, get_active_emergencies",
          "EmergencyInterventionEngineUtils - Utility methods: get_metrics, get_status, clear_emergencies, reset_metrics, clear_resources"
        ],
        "properties_to_extract": [
          "emergency",
          "start_time",
          "matching_protocols",
          "protocol",
          "interventions",
          "response_time",
          "response",
          "successful_interventions",
          "resolution_threshold",
          "status"
        ],
        "method_count": 10,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\emergency_intervention\\unified_emergency\\orchestrator.py",
      "class_name": "EmergencyInterventionOrchestrator",
      "current_loc": 217,
      "limit": 100,
      "excess": 117,
      "severity": "major",
      "line_number": 33,
      "suggestion": {
        "suggested_methods_split": [
          "EmergencyInterventionOrchestratorCore - Core methods: detect_emergency, analyze_emergency, execute_intervention, handle_emergency, register_intervention_handler",
          "EmergencyInterventionOrchestratorUtils - Utility methods: get_emergency_status, get_active_emergencies, get_emergency_history, get_system_metrics, get_protocol_summary"
        ],
        "properties_to_extract": [
          "emergency",
          "analysis",
          "response",
          "emergency",
          "analysis",
          "response",
          "action_enum",
          "emergency",
          "metrics",
          "active_emergencies",
          "action_enums",
          "protocol",
          "response"
        ],
        "method_count": 14,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\emergency_intervention\\unified_emergency\\engines\\action_executor.py",
      "class_name": "ActionExecutor",
      "current_loc": 148,
      "limit": 100,
      "excess": 48,
      "severity": "major",
      "line_number": 32,
      "suggestion": {
        "suggested_methods_split": [
          "ActionExecutorCore - Core methods: register_handler, execute_action, execute_multiple_actions, get_available_actions, get_registered_handlers",
          "ActionExecutorUtils - Utility methods: clear_handlers, has_handler"
        ],
        "properties_to_extract": [
          "start_time",
          "execution_time",
          "results",
          "result",
          "handler",
          "result",
          "success",
          "error_message",
          "result",
          "success",
          "error_message",
          "result",
          "success",
          "error_message"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\emergency_intervention\\unified_emergency\\engines\\protocol_manager.py",
      "class_name": "ProtocolManager",
      "current_loc": 173,
      "limit": 100,
      "excess": 73,
      "severity": "major",
      "line_number": 32,
      "suggestion": {
        "suggested_methods_split": [
          "ProtocolManagerCore - Core methods: register_protocol, find_matching_protocols, get_protocol, get_all_protocols, get_protocols_by_type",
          "ProtocolManagerUtils - Utility methods: get_protocols_by_severity, remove_protocol, update_protocol, get_protocol_count, get_protocol_summary"
        ],
        "properties_to_extract": [
          "matching_protocols",
          "severity_levels",
          "summary",
          "validation_result",
          "type_name",
          "severity_name",
          "priority"
        ],
        "method_count": 13,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\emergency_intervention\\unified_emergency\\handlers\\protocol_executor.py",
      "class_name": "ProtocolExecutor",
      "current_loc": 226,
      "limit": 100,
      "excess": 126,
      "severity": "major",
      "line_number": 23,
      "suggestion": {
        "suggested_methods_split": [
          "ProtocolExecutorCore - Core methods: execute_protocol, get_execution_history, get_active_executions, cancel_execution",
          "ProtocolExecutorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "execution_id",
          "execution_record",
          "success_count",
          "total_count",
          "execution_record",
          "action_result"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\emergency_intervention\\unified_emergency\\handlers\\protocol_executor.py",
      "function_name": "execute_protocol",
      "current_loc": 85,
      "limit": 50,
      "excess": 35,
      "severity": "minor",
      "line_number": 31,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from execute_protocol",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\emergency_intervention\\unified_emergency\\handlers\\protocol_initializer.py",
      "class_name": "ProtocolInitializer",
      "current_loc": 200,
      "limit": 100,
      "excess": 100,
      "severity": "major",
      "line_number": 23,
      "suggestion": {
        "suggested_methods_split": [
          "ProtocolInitializerCore - Core methods: initialize_default_protocols, get_initialized_protocol_count, reinitialize_protocols",
          "ProtocolInitializerUtils - Utility methods: "
        ],
        "properties_to_extract": [],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\emergency_intervention\\unified_emergency\\handlers\\protocol_registry.py",
      "class_name": "ProtocolRegistry",
      "current_loc": 155,
      "limit": 100,
      "excess": 55,
      "severity": "major",
      "line_number": 23,
      "suggestion": {
        "suggested_methods_split": [
          "ProtocolRegistryCore - Core methods: register_protocol, get_protocol, list_protocols, remove_protocol, get_protocol_count",
          "ProtocolRegistryUtils - Utility methods: clear_protocols, export_protocols, import_protocols"
        ],
        "properties_to_extract": [
          "severity_levels",
          "protocol_id",
          "protocol_id",
          "compatible_protocols",
          "protocols",
          "protocol_id",
          "imported_count",
          "protocols",
          "protocol"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\emergency_intervention\\unified_emergency\\orchestrators\\emergency_analyzer.py",
      "class_name": "EmergencyAnalyzer",
      "current_loc": 197,
      "limit": 100,
      "excess": 97,
      "severity": "major",
      "line_number": 29,
      "suggestion": {
        "suggested_methods_split": [
          "EmergencyAnalyzerCore - Core methods: analyze_emergency, get_analysis_history, get_analysis_metrics, clear_analysis_history, export_analysis_data",
          "EmergencyAnalyzerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "severity_scores",
          "base_score",
          "type_multipliers",
          "multiplier",
          "risk_score",
          "context",
          "downtime_estimates",
          "recommendations",
          "severity_scores",
          "type_scores",
          "severity_score",
          "type_score",
          "total_analyses",
          "critical_count",
          "high_count",
          "analysis",
          "risk_level",
          "risk_level",
          "risk_level",
          "risk_level"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\emergency_intervention\\unified_emergency\\orchestrators\\emergency_logger.py",
      "class_name": "EmergencyLogger",
      "current_loc": 164,
      "limit": 100,
      "excess": 64,
      "severity": "major",
      "line_number": 18,
      "suggestion": {
        "suggested_methods_split": [
          "EmergencyLoggerCore - Core methods: log_emergency_event, get_emergency_history, get_all_emergency_history, get_system_events, get_health_recommendations",
          "EmergencyLoggerUtils - Utility methods: calculate_system_health, get_emergency_statistics, export_emergency_data, clear_emergency_history, get_logger_status"
        ],
        "properties_to_extract": [
          "event",
          "events",
          "recommendations",
          "health_score",
          "health_status",
          "total_emergencies",
          "total_events",
          "event_types",
          "events",
          "event_type"
        ],
        "method_count": 10,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\emergency_intervention\\unified_emergency\\orchestrators\\emergency_orchestrator.py",
      "class_name": "EmergencyInterventionOrchestrator",
      "current_loc": 217,
      "limit": 100,
      "excess": 117,
      "severity": "major",
      "line_number": 33,
      "suggestion": {
        "suggested_methods_split": [
          "EmergencyInterventionOrchestratorCore - Core methods: detect_emergency, analyze_emergency, execute_intervention, handle_emergency, register_intervention_handler",
          "EmergencyInterventionOrchestratorUtils - Utility methods: get_emergency_status, get_active_emergencies, get_emergency_history, get_system_metrics, get_protocol_summary"
        ],
        "properties_to_extract": [
          "emergency",
          "analysis",
          "response",
          "emergency",
          "analysis",
          "response",
          "action_enum",
          "emergency",
          "metrics",
          "active_emergencies",
          "action_enums",
          "protocol",
          "response"
        ],
        "method_count": 14,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\analysis_core_engine.py",
      "class_name": "AnalysisCoreEngine",
      "current_loc": 157,
      "limit": 100,
      "excess": 57,
      "severity": "major",
      "line_number": 6,
      "suggestion": {
        "suggested_methods_split": [
          "AnalysisCoreEngineCore - Core methods: initialize, execute, analyze, extract_patterns, detect_violations",
          "AnalysisCoreEngineUtils - Utility methods: cleanup, get_status"
        ],
        "properties_to_extract": [
          "operation",
          "content",
          "analysis_type",
          "analysis_result",
          "content",
          "pattern_type",
          "patterns",
          "content",
          "violation_type",
          "violations"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\engines\\base_engine.py",
      "current_loc": 543,
      "limit": 400,
      "excess": 143,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "base_engine_core.py - Core classes: EngineType, EngineState",
          "base_engine_utils.py - Utility functions: __init__, initialize, execute",
          "base_engine_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 3,
          "functions": 15,
          "imports": 21
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\base_engine.py",
      "class_name": "BaseEngine",
      "current_loc": 480,
      "limit": 100,
      "excess": 380,
      "severity": "major",
      "line_number": 64,
      "suggestion": {
        "suggested_methods_split": [
          "BaseEngineCore - Core methods: initialize, execute, cleanup, get_status, get_health_check",
          "BaseEngineUtils - Utility methods: update_configuration, get_metrics, reset_metrics, validate_input, process_result"
        ],
        "properties_to_extract": [
          "uptime_hours",
          "init_context",
          "success",
          "validation_result",
          "result",
          "cleanup_context",
          "success",
          "base_status",
          "engine_status",
          "validation_result",
          "success",
          "validation_result",
          "processed_result"
        ],
        "method_count": 10,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\engines\\base_engine.py",
      "function_name": "initialize",
      "current_loc": 72,
      "limit": 50,
      "excess": 22,
      "severity": "minor",
      "line_number": 115,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from initialize",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\engines\\base_engine.py",
      "function_name": "execute",
      "current_loc": 77,
      "limit": 50,
      "excess": 27,
      "severity": "minor",
      "line_number": 188,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from execute",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\engines\\base_engine.py",
      "function_name": "cleanup",
      "current_loc": 60,
      "limit": 50,
      "excess": 10,
      "severity": "minor",
      "line_number": 275,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from cleanup",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\communication_core_engine.py",
      "class_name": "CommunicationCoreEngine",
      "current_loc": 132,
      "limit": 100,
      "excess": 32,
      "severity": "major",
      "line_number": 6,
      "suggestion": {
        "suggested_methods_split": [
          "CommunicationCoreEngineCore - Core methods: initialize, execute, cleanup, get_status",
          "CommunicationCoreEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "operation",
          "channel_id",
          "message",
          "recipient",
          "message_data",
          "channel_id",
          "message",
          "channels",
          "broadcast_results",
          "last_message",
          "message_data"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\configuration_core_engine.py",
      "class_name": "ConfigurationCoreEngine",
      "current_loc": 136,
      "limit": 100,
      "excess": 36,
      "severity": "major",
      "line_number": 6,
      "suggestion": {
        "suggested_methods_split": [
          "ConfigurationCoreEngineCore - Core methods: initialize, execute, cleanup, get_status",
          "ConfigurationCoreEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "operation",
          "config_id",
          "source",
          "config_id",
          "config_data",
          "destination",
          "save_result",
          "setting_key",
          "config_id",
          "setting_value",
          "config_data",
          "config_data"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\coordination_core_engine.py",
      "class_name": "CoordinationCoreEngine",
      "current_loc": 140,
      "limit": 100,
      "excess": 40,
      "severity": "major",
      "line_number": 6,
      "suggestion": {
        "suggested_methods_split": [
          "CoordinationCoreEngineCore - Core methods: initialize, execute, coordinate, schedule, monitor",
          "CoordinationCoreEngineUtils - Utility methods: cleanup, get_status"
        ],
        "properties_to_extract": [
          "operation",
          "coordination_id",
          "results",
          "schedule_id",
          "tasks",
          "timing",
          "monitor_id",
          "statuses",
          "task_id",
          "task_type",
          "task_result",
          "status"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\data_core_engine.py",
      "class_name": "DataCoreEngine",
      "current_loc": 118,
      "limit": 100,
      "excess": 18,
      "severity": "major",
      "line_number": 6,
      "suggestion": {
        "suggested_methods_split": [
          "DataCoreEngineCore - Core methods: initialize, execute, cleanup, get_status",
          "DataCoreEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "operation",
          "dataset_id",
          "data",
          "dataset_id",
          "query_id",
          "query",
          "dataset_id",
          "result"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\integration_core_engine.py",
      "class_name": "IntegrationCoreEngine",
      "current_loc": 138,
      "limit": 100,
      "excess": 38,
      "severity": "major",
      "line_number": 6,
      "suggestion": {
        "suggested_methods_split": [
          "IntegrationCoreEngineCore - Core methods: initialize, execute, connect, sync, transform",
          "IntegrationCoreEngineUtils - Utility methods: cleanup, get_status"
        ],
        "properties_to_extract": [
          "operation",
          "connection_id",
          "connection_type",
          "endpoint",
          "connection_id",
          "sync_data",
          "sync_result",
          "transform_id",
          "input_data",
          "transform_type",
          "transformed",
          "transformed",
          "transformed"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\ml_core_engine.py",
      "class_name": "MLCoreEngine",
      "current_loc": 123,
      "limit": 100,
      "excess": 23,
      "severity": "major",
      "line_number": 6,
      "suggestion": {
        "suggested_methods_split": [
          "MLCoreEngineCore - Core methods: initialize, execute, train_model, predict, optimize",
          "MLCoreEngineUtils - Utility methods: cleanup, get_status"
        ],
        "properties_to_extract": [
          "operation",
          "model_id",
          "training_data",
          "model_id",
          "features",
          "prediction",
          "model_id",
          "optimization_params"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\monitoring_core_engine.py",
      "class_name": "MonitoringCoreEngine",
      "current_loc": 134,
      "limit": 100,
      "excess": 34,
      "severity": "major",
      "line_number": 6,
      "suggestion": {
        "suggested_methods_split": [
          "MonitoringCoreEngineCore - Core methods: initialize, execute, cleanup, get_status",
          "MonitoringCoreEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "operation",
          "metric_name",
          "metric_value",
          "metric_type",
          "metric_data",
          "component",
          "health_status",
          "alert_id",
          "alert_type",
          "message",
          "severity",
          "alert_data"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\orchestration_core_engine.py",
      "class_name": "OrchestrationCoreEngine",
      "current_loc": 132,
      "limit": 100,
      "excess": 32,
      "severity": "major",
      "line_number": 6,
      "suggestion": {
        "suggested_methods_split": [
          "OrchestrationCoreEngineCore - Core methods: initialize, execute, cleanup, get_status",
          "OrchestrationCoreEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "operation",
          "orchestration_id",
          "operations",
          "orchestration_result",
          "workflow_id",
          "steps",
          "workflow_result",
          "coordination_id",
          "components",
          "coordination_result"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\performance_core_engine.py",
      "class_name": "PerformanceCoreEngine",
      "current_loc": 137,
      "limit": 100,
      "excess": 37,
      "severity": "major",
      "line_number": 6,
      "suggestion": {
        "suggested_methods_split": [
          "PerformanceCoreEngineCore - Core methods: initialize, execute, cleanup, get_status",
          "PerformanceCoreEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "operation",
          "benchmark_id",
          "test_data",
          "benchmark_result",
          "optimization_id",
          "target",
          "optimization_type",
          "optimization_result",
          "profile_id",
          "component",
          "profile_result"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\processing_core_engine.py",
      "class_name": "ProcessingCoreEngine",
      "current_loc": 133,
      "limit": 100,
      "excess": 33,
      "severity": "major",
      "line_number": 6,
      "suggestion": {
        "suggested_methods_split": [
          "ProcessingCoreEngineCore - Core methods: initialize, execute, cleanup, get_status",
          "ProcessingCoreEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "operation",
          "processor_id",
          "data",
          "process_type",
          "process_result",
          "batch_id",
          "items",
          "processor_type",
          "batch_result",
          "job_id",
          "job_type",
          "priority",
          "job"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\security_core_engine.py",
      "class_name": "SecurityCoreEngine",
      "current_loc": 127,
      "limit": 100,
      "excess": 27,
      "severity": "major",
      "line_number": 6,
      "suggestion": {
        "suggested_methods_split": [
          "SecurityCoreEngineCore - Core methods: initialize, execute, cleanup, get_status",
          "SecurityCoreEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "operation",
          "user_id",
          "credentials",
          "auth_result",
          "user_id",
          "action",
          "resource",
          "authz_result",
          "event",
          "user_id",
          "details",
          "audit_entry"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\storage_core_engine.py",
      "class_name": "StorageCoreEngine",
      "current_loc": 126,
      "limit": 100,
      "excess": 26,
      "severity": "major",
      "line_number": 6,
      "suggestion": {
        "suggested_methods_split": [
          "StorageCoreEngineCore - Core methods: initialize, execute, cleanup, get_status",
          "StorageCoreEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "operation",
          "store_id",
          "data",
          "storage_type",
          "store_result",
          "store_id",
          "data",
          "cache_key",
          "data",
          "ttl",
          "cache_entry"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\utility_core_engine.py",
      "class_name": "UtilityCoreEngine",
      "current_loc": 140,
      "limit": 100,
      "excess": 40,
      "severity": "major",
      "line_number": 6,
      "suggestion": {
        "suggested_methods_split": [
          "UtilityCoreEngineCore - Core methods: initialize, execute, process, validate, transform",
          "UtilityCoreEngineUtils - Utility methods: cleanup, get_status"
        ],
        "properties_to_extract": [
          "operation",
          "processor_id",
          "input_data",
          "process_type",
          "validator_id",
          "input_data",
          "validation_rules",
          "validation_result",
          "transformer_id",
          "input_data",
          "transform_type",
          "processed",
          "transformed",
          "processed",
          "transformed",
          "processed",
          "processed",
          "transformed",
          "transformed"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\validation_core_engine.py",
      "class_name": "ValidationCoreEngine",
      "current_loc": 146,
      "limit": 100,
      "excess": 46,
      "severity": "major",
      "line_number": 6,
      "suggestion": {
        "suggested_methods_split": [
          "ValidationCoreEngineCore - Core methods: initialize, execute, cleanup, get_status",
          "ValidationCoreEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "operation",
          "data",
          "rules",
          "validation_result",
          "rule_id",
          "rule_definition",
          "data",
          "standard",
          "compliance_result"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\enhanced_integration\\coordinators\\enhanced_integration_coordinator.py",
      "class_name": "EnhancedIntegrationCoordinator",
      "current_loc": 147,
      "limit": 100,
      "excess": 47,
      "severity": "major",
      "line_number": 48,
      "suggestion": {
        "suggested_methods_split": [
          "EnhancedIntegrationCoordinatorCore - Core methods: start_coordination, stop_coordination, get_integration_summary",
          "EnhancedIntegrationCoordinatorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "results",
          "uptime",
          "task_summary",
          "performance_summary",
          "task",
          "result",
          "uptime"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\enhanced_integration\\engines\\integration_coordination_engine.py",
      "class_name": "IntegrationCoordinationEngine",
      "current_loc": 252,
      "limit": 100,
      "excess": 152,
      "severity": "major",
      "line_number": 29,
      "suggestion": {
        "suggested_methods_split": [
          "IntegrationCoordinationEngineCore - Core methods: get_coordination_status, cancel_task, cleanup",
          "IntegrationCoordinationEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "coroutines",
          "results",
          "successful",
          "successful",
          "total_time",
          "sorted_tasks",
          "high_priority_tasks",
          "normal_tasks",
          "results",
          "success",
          "task",
          "results",
          "start_time",
          "success",
          "end_time",
          "execution_time",
          "high_priority_result",
          "normal_result",
          "results",
          "results",
          "results"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\enhanced_integration\\engines\\integration_optimization_engine.py",
      "class_name": "IntegrationOptimizationEngine",
      "current_loc": 182,
      "limit": 100,
      "excess": 82,
      "severity": "major",
      "line_number": 28,
      "suggestion": {
        "suggested_methods_split": [
          "IntegrationOptimizationEngineCore - Core methods: get_optimization_metrics, clear_optimization_cache, get_active_optimizations, cancel_optimization",
          "IntegrationOptimizationEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "cache_size",
          "success",
          "total_optimizations",
          "active_count",
          "total_time",
          "completed_count",
          "avg_execution_time",
          "task"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\enhanced_integration\\engines\\integration_performance_engine.py",
      "class_name": "IntegrationPerformanceEngine",
      "current_loc": 126,
      "limit": 100,
      "excess": 26,
      "severity": "major",
      "line_number": 26,
      "suggestion": {
        "suggested_methods_split": [
          "IntegrationPerformanceEngineCore - Core methods: start_monitoring, stop_monitoring, update_metrics, generate_performance_report, get_performance_summary",
          "IntegrationPerformanceEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "alpha",
          "total_ops",
          "success_factor",
          "latency_factor",
          "throughput_factor",
          "efficiency",
          "report"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\enhanced_integration\\engines\\integration_task_engine.py",
      "class_name": "IntegrationTaskEngine",
      "current_loc": 118,
      "limit": 100,
      "excess": 18,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "IntegrationTaskEngineCore - Core methods: add_task, get_next_task, get_task_summary",
          "IntegrationTaskEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "execution_time",
          "result",
          "execution_time",
          "result",
          "result",
          "result"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\enhanced_integration\\orchestrators\\coordination_engine_core.py",
      "class_name": "CoordinationEngineCore",
      "current_loc": 184,
      "limit": 100,
      "excess": 84,
      "severity": "major",
      "line_number": 25,
      "suggestion": {
        "suggested_methods_split": [
          "CoordinationEngineCoreCore - Core methods: determine_coordination_strategy, allocate_resources, release_resources, get_resource_status, optimize_coordination",
          "CoordinationEngineCoreUtils - Utility methods: get_coordination_status"
        ],
        "properties_to_extract": [
          "total_allocated",
          "used_cpu",
          "used_memory",
          "resource_status",
          "used_cores",
          "used_memory",
          "used_connections",
          "optimization_reason",
          "optimization_reason",
          "optimization_reason"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\enhanced_integration\\orchestrators\\coordination_engine_operations.py",
      "class_name": "CoordinationEngineOperations",
      "current_loc": 267,
      "limit": 100,
      "excess": 167,
      "severity": "major",
      "line_number": 25,
      "suggestion": {
        "suggested_methods_split": [
          "CoordinationEngineOperationsCore - Core methods: schedule_task, determine_coordination_strategy, allocate_resources, monitor_task_progress, get_task_queue_status",
          "CoordinationEngineOperationsUtils - Utility methods: optimize_task_scheduling, get_performance_metrics, get_resource_status"
        ],
        "properties_to_extract": [
          "strategy",
          "allocation_success",
          "schedule",
          "task_info",
          "allocated_time",
          "scheduled_tasks",
          "running_tasks",
          "completed_tasks",
          "queue_status",
          "total_tasks",
          "now",
          "allocation_times",
          "avg_allocation_time",
          "total_allocated",
          "used_cpu",
          "used_memory",
          "used_cores",
          "used_memory",
          "optimization",
          "optimization",
          "optimization"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\enhanced_integration\\orchestrators\\task_processor.py",
      "class_name": "IntegrationTaskProcessor",
      "current_loc": 199,
      "limit": 100,
      "excess": 99,
      "severity": "major",
      "line_number": 27,
      "suggestion": {
        "suggested_methods_split": [
          "IntegrationTaskProcessorCore - Core methods: submit_integration_task, get_task_queue_size, get_active_tasks_count, get_completed_tasks_count, get_task_statistics",
          "IntegrationTaskProcessorUtils - Utility methods: clear_completed_tasks, get_recent_tasks"
        ],
        "properties_to_extract": [
          "results",
          "start_time",
          "total_tasks",
          "successful_tasks",
          "result",
          "execution_time",
          "task_result",
          "task",
          "result"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\error_handling\\coordination_error_handler.py",
      "class_name": "CoordinationErrorHandler",
      "current_loc": 112,
      "limit": 100,
      "excess": 12,
      "severity": "major",
      "line_number": 128,
      "suggestion": {
        "suggested_methods_split": [
          "CoordinationErrorHandlerCore - Core methods: execute_with_error_handling, register_circuit_breaker, register_retry_mechanism, get_error_report, add_recovery_strategy",
          "CoordinationErrorHandlerUtils - Utility methods: get_component_status, cleanup_stale_data, reset_component, restart_coordination_service, reset_coordination_config"
        ],
        "properties_to_extract": [
          "restart_strategy",
          "config_strategy",
          "config",
          "config"
        ],
        "method_count": 10,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\error_handling\\error_analysis_engine.py",
      "class_name": "ErrorAnalysisEngine",
      "current_loc": 211,
      "limit": 100,
      "excess": 111,
      "severity": "major",
      "line_number": 23,
      "suggestion": {
        "suggested_methods_split": [
          "ErrorAnalysisEngineCore - Core methods: create_error_summary, is_recoverable_error, get_error_severity, analyze_error_patterns, calculate_error_trends",
          "ErrorAnalysisEngineUtils - Utility methods: get_recovery_recommendations, assess_system_health"
        ],
        "properties_to_extract": [
          "error_types",
          "operations",
          "summary",
          "error_counts",
          "patterns",
          "recommendations",
          "total_errors",
          "critical_issues",
          "recent_errors",
          "older_errors",
          "recommendations",
          "severity",
          "total_errors",
          "critical_errors",
          "concerns",
          "error_type",
          "operation",
          "error_type",
          "trend",
          "recommendations",
          "health_score",
          "status",
          "trend",
          "trend",
          "recommendations",
          "health_score",
          "status",
          "recommendations",
          "health_score",
          "status",
          "health_score",
          "status",
          "recommendations",
          "recommendations",
          "recommendations"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\error_handling\\error_handling_orchestrator.py",
      "class_name": "UnifiedErrorHandlingOrchestrator",
      "current_loc": 182,
      "limit": 100,
      "excess": 82,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "UnifiedErrorHandlingOrchestratorCore - Core methods: retry_operation, safe_execute, validate_and_execute, handle_operation_error, handle_file_operation_error",
          "UnifiedErrorHandlingOrchestratorUtils - Utility methods: handle_network_operation_error, handle_database_operation_error, handle_validation_error, handle_configuration_error, handle_agent_operation_error"
        ],
        "properties_to_extract": [
          "config"
        ],
        "method_count": 17,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\error_handling\\retry_safety_engine.py",
      "class_name": "RetrySafetyEngine",
      "current_loc": 212,
      "limit": 100,
      "excess": 112,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "RetrySafetyEngineCore - Core methods: retry_operation, safe_execute, validate_and_execute, execute_with_timeout, circuit_breaker_execute",
          "RetrySafetyEngineUtils - Utility methods: timeout_handler"
        ],
        "properties_to_extract": [
          "effective_logger",
          "last_exception",
          "effective_logger",
          "effective_logger",
          "config",
          "result",
          "effective_logger",
          "effective_logger",
          "last_exception",
          "delay"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\error_handling\\retry_safety_engine.py",
      "function_name": "retry_operation",
      "current_loc": 54,
      "limit": 50,
      "excess": 4,
      "severity": "minor",
      "line_number": 35,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from retry_operation",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\file_locking\\file_locking_engine_operations.py",
      "class_name": "FileLockEngineOperations",
      "current_loc": 113,
      "limit": 100,
      "excess": 13,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "FileLockEngineOperationsCore - Core methods: acquire_lock, release_lock, cleanup_stale_locks",
          "FileLockEngineOperationsUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "start_time",
          "cleaned_count",
          "lock_file",
          "success",
          "lock_file",
          "execution_time",
          "lock_files",
          "success",
          "success",
          "execution_time",
          "execution_time",
          "execution_time",
          "execution_time",
          "lock_file"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\file_locking\\file_locking_manager.py",
      "class_name": "FileLockManager",
      "current_loc": 131,
      "limit": 100,
      "excess": 31,
      "severity": "major",
      "line_number": 26,
      "suggestion": {
        "suggested_methods_split": [
          "FileLockManagerCore - Core methods: create_file_lock, acquire_lock, release_lock, is_locked, cleanup_stale_locks",
          "FileLockManagerUtils - Utility methods: get_active_locks, get_lock_info, force_release_lock, get_metrics, reset_metrics"
        ],
        "properties_to_extract": [
          "lock_result",
          "lock_file",
          "lock_info",
          "lock_file",
          "lock_file",
          "active_locks",
          "metrics",
          "acquire_result",
          "lock_key",
          "lock_info"
        ],
        "method_count": 11,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\file_locking\\file_locking_orchestrator.py",
      "class_name": "FileLockingOrchestrator",
      "current_loc": 107,
      "limit": 100,
      "excess": 7,
      "severity": "major",
      "line_number": 24,
      "suggestion": {
        "suggested_methods_split": [
          "FileLockingOrchestratorCore - Core methods: create_file_lock, acquire_lock, release_lock, is_locked, get_lock_info",
          "FileLockingOrchestratorUtils - Utility methods: force_release_lock, extend_lock, get_active_locks, get_lock_metrics, cleanup_expired_locks"
        ],
        "properties_to_extract": [],
        "method_count": 21,
        "estimated_classes": 2
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\file_locking\\operations\\lock_queries.py",
      "class_name": "LockQueries",
      "current_loc": 113,
      "limit": 100,
      "excess": 13,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "LockQueriesCore - Core methods: get_locks_by_process, get_locks_by_thread, get_locks_by_owner, get_locks_by_type, get_locks_by_duration",
          "LockQueriesUtils - Utility methods: get_locks_by_metadata, get_lock_statistics, find_conflicting_locks, get_lock_health_status"
        ],
        "properties_to_extract": [
          "active_locks",
          "active_locks",
          "active_locks",
          "active_locks",
          "active_locks",
          "filtered_locks",
          "active_locks",
          "active_locks",
          "locks_by_type",
          "locks_by_owner",
          "total_duration",
          "active_locks",
          "conflicting_locks",
          "metrics",
          "duration",
          "lock_type",
          "owner"
        ],
        "method_count": 9,
        "estimated_classes": 1
      }
    },
    {
      "type": "syntax_error",
      "path": "src\\core\\handoff\\defaults.py",
      "severity": "critical"
    },
    {
      "type": "syntax_error",
      "path": "src\\core\\health\\monitoring\\core.py",
      "severity": "critical"
    },
    {
      "type": "class_loc",
      "path": "src\\core\\import_system\\import_core.py",
      "class_name": "ImportSystemCore",
      "current_loc": 132,
      "limit": 100,
      "excess": 32,
      "severity": "major",
      "line_number": 28,
      "suggestion": {
        "suggested_methods_split": [
          "ImportSystemCoreCore - Core methods: os, sys, json, logging, threading",
          "ImportSystemCoreUtils - Utility methods: time, re, datetime, Path, Any"
        ],
        "properties_to_extract": [],
        "method_count": 21,
        "estimated_classes": 2
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\import_system\\import_registry.py",
      "class_name": "ImportRegistry",
      "current_loc": 109,
      "limit": 100,
      "excess": 9,
      "severity": "major",
      "line_number": 18,
      "suggestion": {
        "suggested_methods_split": [
          "ImportRegistryCore - Core methods: register_import, get_import, has_import, remove_import, clear_cache",
          "ImportRegistryUtils - Utility methods: get_cache_stats, mark_failed_import, is_failed_import, clear_failed_imports, get_import_history"
        ],
        "properties_to_extract": [
          "patterns",
          "valid_patterns",
          "current_time",
          "cleaned_count",
          "cleaned_count"
        ],
        "method_count": 13,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\import_system\\import_utilities.py",
      "class_name": "ImportUtilities",
      "current_loc": 106,
      "limit": 100,
      "excess": 6,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "ImportUtilitiesCore - Core methods: get_module_path, is_module_available, get_import_path, resolve_relative_import, get_package_root",
          "ImportUtilitiesUtils - Utility methods: list_module_contents, get_module_docstring, validate_import_syntax, get_import_dependencies, create_import_alias"
        ],
        "properties_to_extract": [
          "module",
          "module",
          "path",
          "base_path",
          "target_path",
          "module",
          "module",
          "module",
          "module",
          "path"
        ],
        "method_count": 11,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\integration\\analytics\\analytics_engine.py",
      "class_name": "VectorIntegrationAnalyticsEngine",
      "current_loc": 154,
      "limit": 100,
      "excess": 54,
      "severity": "major",
      "line_number": 31,
      "suggestion": {
        "suggested_methods_split": [
          "VectorIntegrationAnalyticsEngineCore - Core methods: analyze_performance_data, get_trend_analysis, get_performance_forecast, get_optimization_recommendations, get_analytics_summary",
          "VectorIntegrationAnalyticsEngineUtils - Utility methods: clear_all_caches, get_cached_trends, get_cached_forecasts, get_latest_recommendations, validate_forecast_accuracy"
        ],
        "properties_to_extract": [
          "trends",
          "trends",
          "forecasts",
          "trend_objects",
          "recommendations",
          "analysis_result",
          "trend"
        ],
        "method_count": 12,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\integration\\analytics\\forecast_generator.py",
      "class_name": "ForecastGenerator",
      "current_loc": 209,
      "limit": 100,
      "excess": 109,
      "severity": "major",
      "line_number": 26,
      "suggestion": {
        "suggested_methods_split": [
          "ForecastGeneratorCore - Core methods: generate_forecast, generate_multi_metric_forecast, validate_forecast_accuracy, get_forecast_summary, get_cached_forecasts",
          "ForecastGeneratorUtils - Utility methods: clear_forecast_cache"
        ],
        "properties_to_extract": [
          "recent_window",
          "recent_values",
          "x_values",
          "mean_x",
          "mean_y",
          "numerator",
          "denominator",
          "slope",
          "intercept",
          "forecast_hours",
          "forecast_values",
          "residuals",
          "residual_std",
          "margin_of_error",
          "last_forecast",
          "confidence_interval",
          "ss_res",
          "ss_tot",
          "r_squared",
          "model_accuracy",
          "forecasts",
          "metrics_by_name",
          "predicted_values",
          "min_length",
          "errors",
          "mape",
          "accuracy",
          "summary",
          "accuracies",
          "metric_values",
          "forecast_id",
          "forecast_horizon",
          "forecast",
          "last_value",
          "forecast_values",
          "confidence_interval",
          "model_accuracy",
          "last_value",
          "forecast_values",
          "confidence_interval",
          "model_accuracy",
          "x",
          "predicted_value",
          "forecast",
          "metric_summary",
          "error"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\integration\\analytics\\forecast_generator.py",
      "function_name": "_generate_simple_forecast",
      "current_loc": 67,
      "limit": 50,
      "excess": 17,
      "severity": "minor",
      "line_number": 81,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _generate_simple_forecast",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\integration\\analytics\\recommendation_engine_analysis.py",
      "class_name": "RecommendationEngineAnalysis",
      "current_loc": 130,
      "limit": 100,
      "excess": 30,
      "severity": "major",
      "line_number": 24,
      "suggestion": {
        "suggested_methods_split": [
          "RecommendationEngineAnalysisCore - Core methods: ",
          "RecommendationEngineAnalysisUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "recommendations",
          "recommendations",
          "summaries",
          "metric_summaries",
          "values",
          "avg_value",
          "metric_groups",
          "mean_val",
          "variance",
          "std_dev",
          "cv",
          "metric_recs",
          "rec",
          "rec",
          "rec",
          "name"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\integration\\analytics\\recommendation_engine_system.py",
      "class_name": "RecommendationEngineSystem",
      "current_loc": 172,
      "limit": 100,
      "excess": 72,
      "severity": "major",
      "line_number": 24,
      "suggestion": {
        "suggested_methods_split": [
          "RecommendationEngineSystemCore - Core methods: ",
          "RecommendationEngineSystemUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "recommendations",
          "summaries",
          "metric_summaries",
          "resource_rec",
          "perf_rec",
          "scale_rec",
          "metric_groups",
          "memory_metrics",
          "cpu_metrics",
          "response_metrics",
          "throughput_metrics",
          "name",
          "avg_value",
          "avg_value",
          "avg_value",
          "avg_value"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\integration_coordinators\\unified_integration\\monitor_engine.py",
      "class_name": "IntegrationMonitorEngine",
      "current_loc": 183,
      "limit": 100,
      "excess": 83,
      "severity": "major",
      "line_number": 25,
      "suggestion": {
        "suggested_methods_split": [
          "IntegrationMonitorEngineCore - Core methods: start_monitoring, stop_monitoring, add_callback, remove_callback, get_metrics",
          "IntegrationMonitorEngineUtils - Utility methods: get_all_metrics, get_stats, check_integration_health, update_metrics"
        ],
        "properties_to_extract": [
          "metrics"
        ],
        "method_count": 9,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\integration_coordinators\\unified_integration\\monitor_engine.py",
      "function_name": "check_integration_health",
      "current_loc": 61,
      "limit": 50,
      "excess": 11,
      "severity": "minor",
      "line_number": 82,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from check_integration_health",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\integration_coordinators\\unified_integration\\coordinators\\config_manager.py",
      "class_name": "ConfigManager",
      "current_loc": 159,
      "limit": 100,
      "excess": 59,
      "severity": "major",
      "line_number": 27,
      "suggestion": {
        "suggested_methods_split": [
          "ConfigManagerCore - Core methods: export_configuration, validate_configuration, update_configuration, get_configuration_summary, get_configuration_history",
          "ConfigManagerUtils - Utility methods: reset_configuration, get_manager_status"
        ],
        "properties_to_extract": [
          "export_data",
          "validation_results",
          "required_fields",
          "numeric_fields",
          "update_results",
          "cutoff_time",
          "value",
          "old_value"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\integration_coordinators\\unified_integration\\coordinators\\health_monitor.py",
      "class_name": "HealthMonitor",
      "current_loc": 143,
      "limit": 100,
      "excess": 43,
      "severity": "major",
      "line_number": 27,
      "suggestion": {
        "suggested_methods_split": [
          "HealthMonitorCore - Core methods: get_system_health, add_monitoring_callback, set_alert_threshold, get_alert_thresholds, check_health_thresholds",
          "HealthMonitorUtils - Utility methods: record_health_status, get_health_trends, get_monitor_status"
        ],
        "properties_to_extract": [
          "health_status",
          "performance_summary",
          "recommendations",
          "alerts",
          "cutoff_time",
          "recent_history",
          "health_scores",
          "average_health",
          "trend",
          "value",
          "trend",
          "trend",
          "trend"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\integration_coordinators\\unified_integration\\coordinators\\task_manager.py",
      "class_name": "TaskManager",
      "current_loc": 144,
      "limit": 100,
      "excess": 44,
      "severity": "major",
      "line_number": 28,
      "suggestion": {
        "suggested_methods_split": [
          "TaskManagerCore - Core methods: create_task, execute_task, register_integration_handler, get_task_status, get_active_tasks",
          "TaskManagerUtils - Utility methods: cleanup_completed_tasks, get_manager_status"
        ],
        "properties_to_extract": [
          "task_id",
          "task",
          "start_time",
          "execution_time",
          "loop",
          "task",
          "completed_tasks",
          "handler",
          "result",
          "success",
          "error_message",
          "result",
          "success",
          "error_message"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\integration_coordinators\\unified_integration\\monitors\\alert_manager.py",
      "class_name": "AlertManager",
      "current_loc": 121,
      "limit": 100,
      "excess": 21,
      "severity": "major",
      "line_number": 18,
      "suggestion": {
        "suggested_methods_split": [
          "AlertManagerCore - Core methods: add_callback, remove_callback, check_alerts, trigger_alerts, set_threshold",
          "AlertManagerUtils - Utility methods: get_thresholds, get_alert_status, cleanup"
        ],
        "properties_to_extract": [
          "alerts"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\integration_coordinators\\unified_integration\\monitors\\metrics_collector.py",
      "class_name": "MetricsCollector",
      "current_loc": 121,
      "limit": 100,
      "excess": 21,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "MetricsCollectorCore - Core methods: collect_metrics, update_metrics, get_metrics, get_all_metrics, reset_metrics",
          "MetricsCollectorUtils - Utility methods: cleanup"
        ],
        "properties_to_extract": [
          "current_time",
          "metrics",
          "total_time",
          "metrics",
          "total_requests",
          "current_total"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\integration_coordinators\\unified_integration\\monitors\\metrics_collector.py",
      "function_name": "collect_metrics",
      "current_loc": 54,
      "limit": 50,
      "excess": 4,
      "severity": "minor",
      "line_number": 27,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from collect_metrics",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\integration_coordinators\\unified_integration\\optimizers\\advanced_optimizer.py",
      "class_name": "AdvancedOptimizer",
      "current_loc": 167,
      "limit": 100,
      "excess": 67,
      "severity": "major",
      "line_number": 30,
      "suggestion": {
        "suggested_methods_split": [
          "AdvancedOptimizerCore - Core methods: optimize_integration, get_optimization_recommendations, get_optimizer_status, get_optimization_history",
          "AdvancedOptimizerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "improvements",
          "recommendations",
          "cutoff_time",
          "history",
          "history",
          "history"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\integration_coordinators\\unified_integration\\optimizers\\advanced_optimizer.py",
      "function_name": "optimize_integration",
      "current_loc": 52,
      "limit": 50,
      "excess": 2,
      "severity": "minor",
      "line_number": 42,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from optimize_integration",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\integration_coordinators\\unified_integration\\optimizers\\basic_optimizer.py",
      "class_name": "BasicOptimizer",
      "current_loc": 163,
      "limit": 100,
      "excess": 63,
      "severity": "major",
      "line_number": 29,
      "suggestion": {
        "suggested_methods_split": [
          "BasicOptimizerCore - Core methods: optimize_integration, get_optimization_recommendations, get_optimizer_status, get_optimization_history",
          "BasicOptimizerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "improvements",
          "recommendations",
          "cutoff_time",
          "history",
          "history",
          "history"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\integration_coordinators\\unified_integration\\optimizers\\maximum_optimizer.py",
      "class_name": "MaximumOptimizer",
      "current_loc": 123,
      "limit": 100,
      "excess": 23,
      "severity": "major",
      "line_number": 14,
      "suggestion": {
        "suggested_methods_split": [
          "MaximumOptimizerCore - Core methods: register_optimization_handler, optimize_integration, get_optimization_recommendations, get_optimizer_status",
          "MaximumOptimizerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "improvements",
          "recommendations",
          "custom_improvements"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\integration_coordinators\\unified_integration\\optimizers\\optimizer.py",
      "class_name": "IntegrationOptimizer",
      "current_loc": 115,
      "limit": 100,
      "excess": 15,
      "severity": "major",
      "line_number": 29,
      "suggestion": {
        "suggested_methods_split": [
          "IntegrationOptimizerCore - Core methods: register_optimization_config, register_optimization_handler, optimize_integration, get_optimization_recommendations, get_optimization_status",
          "IntegrationOptimizerUtils - Utility methods: clear_optimization_history"
        ],
        "properties_to_extract": [
          "config",
          "start_time",
          "recommendations",
          "cutoff_time",
          "old_count",
          "execution_time",
          "improvements",
          "execution_time",
          "improvements",
          "improvements",
          "improvements"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\intelligent_context\\intelligent_context_emergency.py",
      "class_name": "IntelligentContextEmergency",
      "current_loc": 110,
      "limit": 100,
      "excess": 10,
      "severity": "major",
      "line_number": 23,
      "suggestion": {
        "suggested_methods_split": [
          "IntelligentContextEmergencyCore - Core methods: get_emergency_context, get_intervention_protocols, create_emergency_protocol, assess_emergency_severity, get_emergency_agents",
          "IntelligentContextEmergencyUtils - Utility methods: calculate_emergency_response_time"
        ],
        "properties_to_extract": [
          "start_time",
          "protocols",
          "risk_factors",
          "agent_count",
          "emergency_agents",
          "base_time",
          "risk_adjustment",
          "available_agents",
          "emergency_context",
          "execution_time",
          "execution_time"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\intelligent_context\\intelligent_context_engine.py",
      "class_name": "IntelligentContextEngine",
      "current_loc": 116,
      "limit": 100,
      "excess": 16,
      "severity": "major",
      "line_number": 36,
      "suggestion": {
        "suggested_methods_split": [
          "IntelligentContextEngineCore - Core methods: update_mission_context, get_mission_context, update_agent_capability, get_agent_capabilities, search_context",
          "IntelligentContextEngineUtils - Utility methods: get_emergency_context, get_intervention_protocols, optimize_agent_assignment, analyze_success_patterns, assess_mission_risks"
        ],
        "properties_to_extract": [],
        "method_count": 12,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\intelligent_context\\intelligent_context_search.py",
      "class_name": "IntelligentContextSearch",
      "current_loc": 116,
      "limit": 100,
      "excess": 16,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "IntelligentContextSearchCore - Core methods: search_context, search_missions, search_agents, search_by_skills, search_by_mission_type",
          "IntelligentContextSearchUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "results",
          "results",
          "results",
          "results",
          "results",
          "execution_time",
          "mission",
          "execution_time"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\intelligent_context\\engines\\agent_assignment_engine.py",
      "class_name": "AgentAssignmentEngine",
      "current_loc": 161,
      "limit": 100,
      "excess": 61,
      "severity": "major",
      "line_number": 38,
      "suggestion": {
        "suggested_methods_split": [
          "AgentAssignmentEngineCore - Core methods: optimize_agent_assignment, get_agent_availability_summary, get_engine_status",
          "AgentAssignmentEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "score",
          "base_time",
          "workload_factor",
          "complexity_factor",
          "experience_factor",
          "confidence",
          "available_count",
          "busy_count",
          "recommendations",
          "execution_time",
          "execution_time",
          "score",
          "specialization",
          "recommendation"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\intelligent_context\\engines\\agent_assignment_engine.py",
      "function_name": "optimize_agent_assignment",
      "current_loc": 54,
      "limit": 50,
      "excess": 4,
      "severity": "minor",
      "line_number": 48,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from optimize_agent_assignment",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\intelligent_context\\engines\\risk_assessment_engine.py",
      "class_name": "RiskAssessmentEngine",
      "current_loc": 126,
      "limit": 100,
      "excess": 26,
      "severity": "major",
      "line_number": 38,
      "suggestion": {
        "suggested_methods_split": [
          "RiskAssessmentEngineCore - Core methods: assess_mission_risks, calculate_risk_score, get_risk_summary, get_engine_status",
          "RiskAssessmentEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "mitigations",
          "risk_factors",
          "base_score",
          "critical_factors",
          "high_factors",
          "complexity_factor",
          "risk_assessment",
          "risk_score",
          "risk_factors",
          "risk_level",
          "mitigation_strategies",
          "risk_assessment",
          "execution_time",
          "execution_time"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\intelligent_context\\optimizers\\agent_optimizer.py",
      "class_name": "AgentOptimizer",
      "current_loc": 187,
      "limit": 100,
      "excess": 87,
      "severity": "major",
      "line_number": 31,
      "suggestion": {
        "suggested_methods_split": [
          "AgentOptimizerCore - Core methods: optimize_agent_assignment, get_agent_recommendations, get_agent_availability, get_agent_performance_summary, get_optimizer_status",
          "AgentOptimizerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "score",
          "base_time",
          "workload_factor",
          "complexity_factor",
          "experience_factor",
          "confidence",
          "result",
          "recommendations",
          "available_count",
          "busy_count",
          "success_rates",
          "workloads",
          "recommendations",
          "execution_time",
          "execution_time",
          "score",
          "specialization",
          "recommendation"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\intelligent_context\\optimizers\\intelligent_context_optimization.py",
      "class_name": "IntelligentContextOptimization",
      "current_loc": 118,
      "limit": 100,
      "excess": 18,
      "severity": "major",
      "line_number": 34,
      "suggestion": {
        "suggested_methods_split": [
          "IntelligentContextOptimizationCore - Core methods: optimize_agent_assignment, assess_mission_risks, generate_success_predictions, get_comprehensive_analysis, get_optimization_status",
          "IntelligentContextOptimizationUtils - Utility methods: get_optimization_metrics, shutdown"
        ],
        "properties_to_extract": [
          "start_time",
          "score",
          "risk_score",
          "agent_analysis",
          "risk_assessment",
          "success_prediction",
          "mission_score",
          "execution_time",
          "avg_agent_score",
          "execution_time"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\intelligent_context\\optimizers\\prediction_optimizer.py",
      "class_name": "PredictionOptimizer",
      "current_loc": 169,
      "limit": 100,
      "excess": 69,
      "severity": "major",
      "line_number": 31,
      "suggestion": {
        "suggested_methods_split": [
          "PredictionOptimizerCore - Core methods: generate_success_predictions, get_prediction_confidence, get_prediction_summary, get_prediction_trends, get_optimizer_status",
          "PredictionOptimizerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "base_probability",
          "risk_adjustment",
          "agent_adjustment",
          "factors",
          "bottlenecks",
          "actions",
          "confidence",
          "prediction",
          "confidence",
          "historical_patterns",
          "success_probability",
          "key_factors",
          "potential_bottlenecks",
          "prediction",
          "execution_time",
          "execution_time"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\intelligent_context\\optimizers\\risk_optimizer.py",
      "class_name": "RiskOptimizer",
      "current_loc": 146,
      "limit": 100,
      "excess": 46,
      "severity": "major",
      "line_number": 31,
      "suggestion": {
        "suggested_methods_split": [
          "RiskOptimizerCore - Core methods: assess_mission_risks, calculate_risk_score, get_risk_summary, get_risk_trends, get_optimizer_status",
          "RiskOptimizerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "critical_factors",
          "high_factors",
          "mitigations",
          "risk_factors",
          "base_score",
          "critical_factors",
          "high_factors",
          "complexity_factor",
          "risk_assessment",
          "risk_score",
          "risk_factors",
          "risk_level",
          "mitigation_strategies",
          "risk_assessment",
          "execution_time",
          "execution_time"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\intelligent_context\\unified_intelligent_context\\engine_search.py",
      "class_name": "IntelligentContextEngineSearch",
      "current_loc": 165,
      "limit": 100,
      "excess": 65,
      "severity": "major",
      "line_number": 27,
      "suggestion": {
        "suggested_methods_split": [
          "IntelligentContextEngineSearchCore - Core methods: ",
          "IntelligentContextEngineSearchUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "results",
          "query_lower",
          "results",
          "query_lower",
          "results",
          "query_lower",
          "results",
          "execution_time",
          "relevance_score",
          "relevance_score",
          "relevance_score",
          "mission_results",
          "capability_results",
          "emergency_results",
          "execution_time"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\intelligent_context\\unified_intelligent_context\\search_operations.py",
      "class_name": "IntelligentContextSearchOperations",
      "current_loc": 171,
      "limit": 100,
      "excess": 71,
      "severity": "major",
      "line_number": 18,
      "suggestion": {
        "suggested_methods_split": [
          "IntelligentContextSearchOperationsCore - Core methods: search_contexts, search_with_pattern, optimize_search_query",
          "IntelligentContextSearchOperationsUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "query",
          "words",
          "filtered_words",
          "processed_query",
          "results",
          "results",
          "processed_query",
          "results",
          "results",
          "pattern",
          "query",
          "query",
          "query",
          "words",
          "unique_words",
          "optimized_query"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\interfaces\\unified_interface\\registry.py",
      "class_name": "InterfaceRegistry",
      "current_loc": 235,
      "limit": 100,
      "excess": 135,
      "severity": "major",
      "line_number": 30,
      "suggestion": {
        "suggested_methods_split": [
          "InterfaceRegistryCore - Core methods: initialize, register_interface, create_instance, get_instance, remove_instance",
          "InterfaceRegistryUtils - Utility methods: get_interface_metadata, get_interface_definition, list_interfaces, list_instances, validate_interface"
        ],
        "properties_to_extract": [
          "interfaces",
          "instances",
          "cutoff_time",
          "expired_instances",
          "oldest_instance",
          "instance_id",
          "interface_instance",
          "interfaces",
          "instances",
          "metadata",
          "definition",
          "errors",
          "warnings",
          "validation_score",
          "result"
        ],
        "method_count": 14,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\interfaces\\unified_interface\\registry.py",
      "function_name": "validate_interface",
      "current_loc": 51,
      "limit": 50,
      "excess": 1,
      "severity": "minor",
      "line_number": 154,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from validate_interface",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\managers\\base_manager.py",
      "current_loc": 481,
      "limit": 400,
      "excess": 81,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "base_manager_core.py - Core classes: ManagerType, ManagerState",
          "base_manager_utils.py - Utility functions: __init__, initialize, execute",
          "base_manager_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 3,
          "functions": 13,
          "imports": 21
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\managers\\base_manager.py",
      "class_name": "BaseManager",
      "current_loc": 422,
      "limit": 100,
      "excess": 322,
      "severity": "major",
      "line_number": 60,
      "suggestion": {
        "suggested_methods_split": [
          "BaseManagerCore - Core methods: initialize, execute, cleanup, get_status, get_health_check",
          "BaseManagerUtils - Utility methods: update_configuration, get_metrics, reset_metrics"
        ],
        "properties_to_extract": [
          "uptime_hours",
          "init_context",
          "success",
          "validation_result",
          "result",
          "cleanup_context",
          "success",
          "base_status",
          "manager_status",
          "validation_result",
          "success"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\base_manager.py",
      "function_name": "initialize",
      "current_loc": 72,
      "limit": 50,
      "excess": 22,
      "severity": "minor",
      "line_number": 111,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from initialize",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\base_manager.py",
      "function_name": "execute",
      "current_loc": 78,
      "limit": 50,
      "excess": 28,
      "severity": "minor",
      "line_number": 184,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from execute",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\base_manager.py",
      "function_name": "cleanup",
      "current_loc": 60,
      "limit": 50,
      "excess": 10,
      "severity": "minor",
      "line_number": 274,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from cleanup",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\managers\\core_configuration_manager.py",
      "current_loc": 427,
      "limit": 400,
      "excess": 27,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "core_configuration_manager_core.py - Core classes: CoreConfigurationManager",
          "core_configuration_manager_utils.py - Utility functions: __init__, initialize, execute",
          "core_configuration_manager_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 14,
          "imports": 12
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\managers\\core_configuration_manager.py",
      "class_name": "CoreConfigurationManager",
      "current_loc": 407,
      "limit": 100,
      "excess": 307,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "CoreConfigurationManagerCore - Core methods: initialize, execute, load_config, save_config, validate_config",
          "CoreConfigurationManagerUtils - Utility methods: cleanup, get_status"
        ],
        "properties_to_extract": [
          "validation_result",
          "file_path",
          "validation_errors",
          "env_file",
          "discord_config",
          "app_config",
          "db_config",
          "config_key",
          "export_path",
          "import_path",
          "config_key",
          "validation_result",
          "config_key",
          "file_path",
          "env_value",
          "config_type",
          "config_data",
          "config_key",
          "config_data",
          "config_data",
          "rules",
          "config_data",
          "config_data",
          "config_data",
          "line",
          "value",
          "expected_type"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\core_configuration_manager.py",
      "function_name": "validate_config",
      "current_loc": 57,
      "limit": 50,
      "excess": 7,
      "severity": "minor",
      "line_number": 160,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from validate_config",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\managers\\core_monitoring_manager.py",
      "current_loc": 570,
      "limit": 400,
      "excess": 170,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "core_monitoring_manager_core.py - Core classes: AlertLevel, MetricType",
          "core_monitoring_manager_utils.py - Utility functions: __init__, initialize, execute",
          "core_monitoring_manager_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 4,
          "functions": 20,
          "imports": 16
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\managers\\core_monitoring_manager.py",
      "class_name": "CoreMonitoringManager",
      "current_loc": 522,
      "limit": 100,
      "excess": 422,
      "severity": "major",
      "line_number": 49,
      "suggestion": {
        "suggested_methods_split": [
          "CoreMonitoringManagerCore - Core methods: initialize, execute, create_alert, record_metric, create_widget",
          "CoreMonitoringManagerUtils - Utility methods: cleanup, get_status, monitor"
        ],
        "properties_to_extract": [
          "active_alerts",
          "acknowledged_alerts",
          "resolved_alerts",
          "thread",
          "alert_id",
          "level",
          "message",
          "source",
          "type_mapping",
          "metric_type_name",
          "metric_type",
          "timestamp",
          "widget_id",
          "widget_type",
          "title",
          "config",
          "widget",
          "level_filter",
          "status_filter",
          "source_filter",
          "filtered_alerts",
          "metric_name_filter",
          "include_history",
          "filtered_metrics",
          "widget_type_filter",
          "enabled_only",
          "filtered_widgets",
          "alert_id",
          "acknowledged_by",
          "alert_id",
          "resolved_by",
          "resolution_notes",
          "current_level",
          "alert_data",
          "alert",
          "metric_data",
          "alert",
          "alert",
          "action",
          "metric_name",
          "metric_value",
          "cutoff_time",
          "cutoff_time",
          "widget_data",
          "to_remove"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\core_monitoring_manager.py",
      "function_name": "record_metric",
      "current_loc": 63,
      "limit": 50,
      "excess": 13,
      "severity": "minor",
      "line_number": 157,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from record_metric",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\managers\\core_onboarding_manager.py",
      "class_name": "CoreOnboardingManager",
      "current_loc": 106,
      "limit": 100,
      "excess": 6,
      "severity": "major",
      "line_number": 28,
      "suggestion": {
        "suggested_methods_split": [
          "CoreOnboardingManagerCore - Core methods: initialize, execute, cleanup, get_status, onboard_agent",
          "CoreOnboardingManagerUtils - Utility methods: start_onboarding, complete_onboarding, get_onboarding_status"
        ],
        "properties_to_extract": [
          "handlers",
          "handler",
          "agent_id",
          "session_id",
          "session",
          "session",
          "session",
          "session",
          "data"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\managers\\core_resource_manager.py",
      "current_loc": 540,
      "limit": 400,
      "excess": 140,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "core_resource_manager_core.py - Core classes: CoreResourceManager",
          "core_resource_manager_utils.py - Utility functions: __init__, initialize, execute",
          "core_resource_manager_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 19,
          "imports": 14
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\managers\\core_resource_manager.py",
      "class_name": "CoreResourceManager",
      "current_loc": 518,
      "limit": 100,
      "excess": 418,
      "severity": "major",
      "line_number": 23,
      "suggestion": {
        "suggested_methods_split": [
          "CoreResourceManagerCore - Core methods: initialize, execute, create_resource, get_resource, update_resource",
          "CoreResourceManagerUtils - Utility methods: delete_resource, cleanup, get_status"
        ],
        "properties_to_extract": [
          "operation",
          "file_path",
          "operation",
          "lock_id",
          "operation",
          "agent_id",
          "file_path",
          "content",
          "dir_path",
          "agent_id",
          "context_data",
          "lock_data",
          "content",
          "acquired",
          "context_data",
          "content",
          "content",
          "lock_data",
          "files",
          "dest",
          "updates",
          "dest"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\core_resource_manager.py",
      "function_name": "_handle_file_operation",
      "current_loc": 58,
      "limit": 50,
      "excess": 8,
      "severity": "minor",
      "line_number": 260,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _handle_file_operation",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\core_resource_manager.py",
      "function_name": "_handle_context_operation",
      "current_loc": 88,
      "limit": 50,
      "excess": 38,
      "severity": "minor",
      "line_number": 364,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _handle_context_operation",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\managers\\adapters\\legacy_manager_adapter.py",
      "class_name": "LegacyManagerAdapter",
      "current_loc": 282,
      "limit": 100,
      "excess": 182,
      "severity": "major",
      "line_number": 22,
      "suggestion": {
        "suggested_methods_split": [
          "LegacyManagerAdapterCore - Core methods: initialize, execute, cleanup, get_status",
          "LegacyManagerAdapterUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "mapped_operation",
          "mapped_payload",
          "status",
          "operation_mapping",
          "mapped",
          "mapped",
          "mapped",
          "mapped",
          "mapped",
          "mapped"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\adapters\\legacy_manager_adapter.py",
      "function_name": "_map_operation",
      "current_loc": 57,
      "limit": 50,
      "excess": 7,
      "severity": "minor",
      "line_number": 55,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _map_operation",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\managers\\execution\\base_execution_manager.py",
      "current_loc": 548,
      "limit": 400,
      "excess": 148,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "base_execution_manager_core.py - Core classes: TaskStatus, ProtocolType",
          "base_execution_manager_utils.py - Utility functions: __init__, initialize, execute",
          "base_execution_manager_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 3,
          "functions": 20,
          "imports": 15
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\managers\\execution\\base_execution_manager.py",
      "class_name": "BaseExecutionManager",
      "current_loc": 509,
      "limit": 100,
      "excess": 409,
      "severity": "major",
      "line_number": 40,
      "suggestion": {
        "suggested_methods_split": [
          "BaseExecutionManagerCore - Core methods: initialize, execute, execute_task, register_protocol, get_execution_status",
          "BaseExecutionManagerUtils - Utility methods: cleanup, get_status, processor"
        ],
        "properties_to_extract": [
          "operation",
          "file_path",
          "operation",
          "data_size",
          "url",
          "method",
          "thread",
          "task",
          "execution_id",
          "execution",
          "thread",
          "protocol",
          "task_id",
          "task_type",
          "priority",
          "data",
          "task",
          "task_id",
          "task",
          "status_filter",
          "task_type_filter",
          "tasks",
          "protocol_type_filter",
          "enabled_only",
          "protocols",
          "execution",
          "task_type",
          "started_at",
          "executions",
          "executions",
          "duration",
          "tasks",
          "tasks",
          "protocols",
          "protocols",
          "result",
          "execution",
          "completed_at",
          "result",
          "failed_at",
          "result",
          "result",
          "task_id",
          "task"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\execution\\base_execution_manager.py",
      "function_name": "execute_task",
      "current_loc": 64,
      "limit": 50,
      "excess": 14,
      "severity": "minor",
      "line_number": 100,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from execute_task",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\managers\\execution\\execution_coordinator.py",
      "class_name": "ExecutionCoordinator",
      "current_loc": 139,
      "limit": 100,
      "excess": 39,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "ExecutionCoordinatorCore - Core methods: initialize, execute, cleanup, get_status, create_task",
          "ExecutionCoordinatorUtils - Utility methods: execute_protocol, get_task_status"
        ],
        "properties_to_extract": [
          "payload",
          "exec_payload",
          "payload",
          "base_success",
          "task_success",
          "protocol_success",
          "success",
          "task_success",
          "protocol_success",
          "base_success",
          "success",
          "base_status",
          "task_status",
          "protocol_status"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\managers\\execution\\protocol_manager.py",
      "class_name": "ProtocolManager",
      "current_loc": 173,
      "limit": 100,
      "excess": 73,
      "severity": "major",
      "line_number": 17,
      "suggestion": {
        "suggested_methods_split": [
          "ProtocolManagerCore - Core methods: execute, get_status",
          "ProtocolManagerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "base_status",
          "protocol_name",
          "protocol",
          "steps",
          "results",
          "all_success",
          "protocol_name",
          "protocol_name",
          "step_result"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\execution\\protocol_manager.py",
      "function_name": "_execute_protocol",
      "current_loc": 63,
      "limit": 50,
      "excess": 13,
      "severity": "minor",
      "line_number": 43,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _execute_protocol",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\managers\\monitoring\\alert_manager.py",
      "class_name": "AlertManager",
      "current_loc": 152,
      "limit": 100,
      "excess": 52,
      "severity": "major",
      "line_number": 17,
      "suggestion": {
        "suggested_methods_split": [
          "AlertManagerCore - Core methods: execute, get_status",
          "AlertManagerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "base_status",
          "alert_ids",
          "acknowledged_count",
          "alert_ids",
          "resolution_notes",
          "resolved_count",
          "total_alerts",
          "active_alerts",
          "resolved_alerts",
          "acknowledged_alerts",
          "level_counts",
          "source_counts",
          "level",
          "source",
          "alert",
          "alert"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\managers\\monitoring\\base_monitoring_manager.py",
      "current_loc": 552,
      "limit": 400,
      "excess": 152,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "base_monitoring_manager_core.py - Core classes: AlertLevel, MetricType",
          "base_monitoring_manager_utils.py - Utility functions: __init__, initialize, execute",
          "base_monitoring_manager_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 4,
          "functions": 20,
          "imports": 16
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\managers\\monitoring\\base_monitoring_manager.py",
      "class_name": "BaseMonitoringManager",
      "current_loc": 505,
      "limit": 100,
      "excess": 405,
      "severity": "major",
      "line_number": 48,
      "suggestion": {
        "suggested_methods_split": [
          "BaseMonitoringManagerCore - Core methods: initialize, execute, create_alert, record_metric, create_widget",
          "BaseMonitoringManagerUtils - Utility methods: cleanup, get_status, monitor"
        ],
        "properties_to_extract": [
          "thread",
          "alert_id",
          "level",
          "source",
          "message",
          "metadata",
          "alert",
          "metric_name",
          "metric_value",
          "metric_type",
          "tags",
          "metric_entry",
          "widget_id",
          "widget_type",
          "title",
          "config",
          "widget",
          "level_filter",
          "status_filter",
          "source_filter",
          "alerts",
          "metric_name",
          "include_history",
          "widget_type_filter",
          "widgets",
          "alert_id",
          "alert_id",
          "resolution_notes",
          "metric_type",
          "widget_type",
          "alerts",
          "alerts",
          "alerts",
          "metrics",
          "metrics",
          "widgets",
          "alert",
          "alert",
          "action",
          "cutoff_time",
          "cutoff_time",
          "to_remove"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\monitoring\\base_monitoring_manager.py",
      "function_name": "record_metric",
      "current_loc": 55,
      "limit": 50,
      "excess": 5,
      "severity": "minor",
      "line_number": 154,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from record_metric",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\managers\\monitoring\\metrics_manager.py",
      "class_name": "MetricsManager",
      "current_loc": 259,
      "limit": 100,
      "excess": 159,
      "severity": "major",
      "line_number": 18,
      "suggestion": {
        "suggested_methods_split": [
          "MetricsManagerCore - Core methods: execute, get_status",
          "MetricsManagerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "base_status",
          "metric_name",
          "aggregation_type",
          "time_window",
          "history",
          "cutoff_time",
          "filtered_history",
          "values",
          "metric_name",
          "trend_window",
          "history",
          "cutoff_time",
          "filtered_history",
          "values",
          "timestamps",
          "first_value",
          "last_value",
          "trend_direction",
          "trend_magnitude",
          "moving_averages",
          "export_format",
          "metric_names",
          "include_history",
          "result",
          "mean",
          "variance",
          "export_data",
          "export_data",
          "export_string",
          "sorted_values",
          "n",
          "result",
          "csv_lines",
          "export_string"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\monitoring\\metrics_manager.py",
      "function_name": "_get_metric_aggregation",
      "current_loc": 92,
      "limit": 50,
      "excess": 42,
      "severity": "minor",
      "line_number": 44,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _get_metric_aggregation",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\monitoring\\metrics_manager.py",
      "function_name": "_get_metric_trends",
      "current_loc": 77,
      "limit": 50,
      "excess": 27,
      "severity": "minor",
      "line_number": 137,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _get_metric_trends",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\monitoring\\metrics_manager.py",
      "function_name": "_export_metrics",
      "current_loc": 52,
      "limit": 50,
      "excess": 2,
      "severity": "minor",
      "line_number": 215,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _export_metrics",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\results\\analysis_results_processor.py",
      "function_name": "_process_analysis_result",
      "current_loc": 56,
      "limit": 50,
      "excess": 6,
      "severity": "minor",
      "line_number": 27,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _process_analysis_result",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\managers\\results\\base_results_manager.py",
      "class_name": "BaseResultsManager",
      "current_loc": 325,
      "limit": 100,
      "excess": 225,
      "severity": "major",
      "line_number": 30,
      "suggestion": {
        "suggested_methods_split": [
          "BaseResultsManagerCore - Core methods: initialize, execute, process_results, cleanup, get_status",
          "BaseResultsManagerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "field",
          "rule_type",
          "expected_value",
          "value",
          "result_data",
          "result_type",
          "validation_rules",
          "callback_key",
          "result_id",
          "result",
          "processed_data",
          "validation_passed",
          "result_id",
          "result_type",
          "status",
          "include_archived",
          "results",
          "result_ids",
          "archive_all",
          "archived_count",
          "processor_type",
          "processor_func",
          "cutoff_date",
          "to_archive",
          "results",
          "results",
          "results",
          "result_ids",
          "created_at",
          "result",
          "result"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\results\\base_results_manager.py",
      "function_name": "process_results",
      "current_loc": 82,
      "limit": 50,
      "excess": 32,
      "severity": "minor",
      "line_number": 77,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from process_results",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\managers\\results\\performance_results_processor.py",
      "class_name": "PerformanceResultsProcessor",
      "current_loc": 116,
      "limit": 100,
      "excess": 16,
      "severity": "major",
      "line_number": 16,
      "suggestion": {
        "suggested_methods_split": [
          "PerformanceResultsProcessorCore - Core methods: ",
          "PerformanceResultsProcessorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "performance_metrics",
          "test_name",
          "duration",
          "performance_score",
          "performance_analysis",
          "score",
          "cpu_usage",
          "memory_usage",
          "response_time",
          "throughput",
          "analysis",
          "cpu_usage",
          "memory_usage",
          "response_time",
          "high_metrics"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\managers\\results\\results_archive_manager.py",
      "class_name": "ResultsArchiveManager",
      "current_loc": 164,
      "limit": 100,
      "excess": 64,
      "severity": "major",
      "line_number": 17,
      "suggestion": {
        "suggested_methods_split": [
          "ResultsArchiveManagerCore - Core methods: execute, get_status",
          "ResultsArchiveManagerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "base_status",
          "days_threshold",
          "force_archive",
          "cutoff_date",
          "to_archive",
          "archived_count",
          "retention_days",
          "cutoff_date",
          "to_remove",
          "compressed_count",
          "result",
          "created_at",
          "archived_at"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\ml_optimizer\\ml_optimizer_orchestrator.py",
      "class_name": "VectorDatabaseMLOptimizer",
      "current_loc": 128,
      "limit": 100,
      "excess": 28,
      "severity": "major",
      "line_number": 32,
      "suggestion": {
        "suggested_methods_split": [
          "VectorDatabaseMLOptimizerCore - Core methods: initialize, add_model, get_model, get_models_by_strategy, predict",
          "VectorDatabaseMLOptimizerUtils - Utility methods: add_learning_pattern, get_learning_pattern, get_learning_patterns_by_type, get_optimizer_status, shutdown"
        ],
        "properties_to_extract": [
          "model",
          "prediction"
        ],
        "method_count": 10,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\ml_optimizer\\engines\\ml_optimization_engine.py",
      "class_name": "MLOptimizationEngine",
      "current_loc": 216,
      "limit": 100,
      "excess": 116,
      "severity": "major",
      "line_number": 29,
      "suggestion": {
        "suggested_methods_split": [
          "MLOptimizationEngineCore - Core methods: start_optimization, stop_optimization, execute_optimization_strategy, get_optimization_metrics, get_optimization_summary",
          "MLOptimizationEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "metrics",
          "optimization_result",
          "optimization_result",
          "optimization_result",
          "optimization_result",
          "total_optimizations",
          "successful_optimizations",
          "result"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\ml_optimizer\\learning\\feature_analysis_engine.py",
      "class_name": "FeatureAnalysisEngine",
      "current_loc": 168,
      "limit": 100,
      "excess": 68,
      "severity": "major",
      "line_number": 18,
      "suggestion": {
        "suggested_methods_split": [
          "FeatureAnalysisEngineCore - Core methods: extract_features, calculate_similarity, analyze_feature_importance, get_analysis_summary, cleanup",
          "FeatureAnalysisEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "features",
          "cache_key",
          "features",
          "features",
          "common_keys",
          "similarities",
          "importance",
          "feature_types",
          "numeric_data",
          "val1",
          "val2",
          "similarity",
          "similarity"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\ml_optimizer\\learning\\model_management_engine.py",
      "class_name": "ModelManagementEngine",
      "current_loc": 225,
      "limit": 100,
      "excess": 125,
      "severity": "major",
      "line_number": 24,
      "suggestion": {
        "suggested_methods_split": [
          "ModelManagementEngineCore - Core methods: create_model_state, get_model_state, update_model_state, save_model_state, load_model_state",
          "ModelManagementEngineUtils - Utility methods: delete_model_state, list_model_states, get_model_metrics, start_training, stop_training"
        ],
        "properties_to_extract": [
          "model_state",
          "cutoff_date",
          "old_models",
          "model_state",
          "model_state",
          "model_state"
        ],
        "method_count": 15,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\ml_optimizer\\learning\\pattern_learning_engine.py",
      "class_name": "PatternLearningEngine",
      "current_loc": 233,
      "limit": 100,
      "excess": 133,
      "severity": "major",
      "line_number": 26,
      "suggestion": {
        "suggested_methods_split": [
          "PatternLearningEngineCore - Core methods: learn_pattern, get_pattern, get_patterns_by_type, update_pattern_accuracy, remove_pattern",
          "PatternLearningEngineUtils - Utility methods: get_pattern_statistics, find_similar_patterns, clear_patterns, export_patterns, import_patterns"
        ],
        "properties_to_extract": [
          "pattern_types",
          "total_frequency",
          "total_accuracy",
          "similar_patterns",
          "feature_str",
          "timestamp",
          "pattern_keys",
          "input_keys",
          "common_keys",
          "total_keys",
          "key_similarity",
          "value_similarities",
          "value_similarity",
          "pattern_type",
          "pattern_val",
          "input_val",
          "pattern_id",
          "pattern",
          "pattern",
          "pattern",
          "similarity",
          "max_val",
          "diff",
          "similarity",
          "pattern"
        ],
        "method_count": 10,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\ml_optimizer\\learning\\unified_ml_learning\\coordinator_core.py",
      "class_name": "MLLearningCoordinatorCore",
      "current_loc": 211,
      "limit": 100,
      "excess": 111,
      "severity": "major",
      "line_number": 30,
      "suggestion": {
        "suggested_methods_split": [
          "MLLearningCoordinatorCoreCore - Core methods: initialize, start_learning_session, stop_learning_session, get_learning_session, get_active_sessions",
          "MLLearningCoordinatorCoreUtils - Utility methods: add_learning_pattern, get_learning_pattern, get_learning_patterns_by_type, add_model_state, get_model_state"
        ],
        "properties_to_extract": [
          "session",
          "session"
        ],
        "method_count": 16,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\ml_optimizer\\learning\\unified_ml_learning\\coordinator_services.py",
      "class_name": "MLLearningCoordinatorServices",
      "current_loc": 222,
      "limit": 100,
      "excess": 122,
      "severity": "major",
      "line_number": 30,
      "suggestion": {
        "suggested_methods_split": [
          "MLLearningCoordinatorServicesCore - Core methods: initialize, analyze_learning_progress, generate_learning_report, optimize_learning_parameters, monitor_learning_health",
          "MLLearningCoordinatorServicesUtils - Utility methods: get_services_status, shutdown"
        ],
        "properties_to_extract": [
          "session",
          "model_states",
          "metrics",
          "total_states",
          "recent_states",
          "avg_accuracy",
          "report_data",
          "session",
          "metrics",
          "recent_metrics",
          "avg_accuracy",
          "avg_loss",
          "optimization_suggestions",
          "active_sessions",
          "total_sessions",
          "healthy_sessions",
          "warning_sessions",
          "critical_sessions",
          "health_score",
          "avg_accuracy",
          "sessions",
          "sessions",
          "session_data",
          "progress"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\ml_optimizer\\learning\\unified_ml_learning\\engine_prediction.py",
      "class_name": "MLLearningEnginePrediction",
      "current_loc": 115,
      "limit": 100,
      "excess": 15,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "MLLearningEnginePredictionCore - Core methods: predict, batch_predict, get_prediction_history, evaluate_prediction_accuracy",
          "MLLearningEnginePredictionUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "model",
          "prediction",
          "predictions",
          "all_predictions",
          "predictions",
          "avg_confidence",
          "accuracy",
          "prediction"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\ml_optimizer\\learning\\unified_ml_learning\\engine_training.py",
      "class_name": "MLLearningEngineTraining",
      "current_loc": 149,
      "limit": 100,
      "excess": 49,
      "severity": "major",
      "line_number": 28,
      "suggestion": {
        "suggested_methods_split": [
          "MLLearningEngineTrainingCore - Core methods: train_model, optimize_model, create_learning_session, start_learning_session, complete_learning_session",
          "MLLearningEngineTrainingUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "model_state",
          "model",
          "metrics",
          "session",
          "session",
          "session"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\models\\message_queue_models.py",
      "class_name": "QueueEntry",
      "current_loc": 101,
      "limit": 100,
      "excess": 1,
      "severity": "major",
      "line_number": 28,
      "suggestion": {
        "suggested_methods_split": [
          "QueueEntryCore - Core methods: to_dict, from_dict",
          "QueueEntryUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "message_data",
          "message"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\pattern_analysis\\pattern_analysis_orchestrator.py",
      "class_name": "PatternAnalysisSystem",
      "current_loc": 106,
      "limit": 100,
      "excess": 6,
      "severity": "major",
      "line_number": 26,
      "suggestion": {
        "suggested_methods_split": [
          "PatternAnalysisSystemCore - Core methods: analyze_mission_patterns, add_pattern, get_pattern, get_metrics, clear_old_patterns",
          "PatternAnalysisSystemUtils - Utility methods: analyze_success_patterns, analyze_risk_patterns, get_pattern_summary, generate_strategic_insights"
        ],
        "properties_to_extract": [
          "original_patterns",
          "success_patterns",
          "result",
          "original_patterns",
          "risk_patterns",
          "result",
          "patterns",
          "pattern_types",
          "analysis_result",
          "pattern_type"
        ],
        "method_count": 9,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\pattern_analysis\\unified_pattern_analysis\\analyzer.py",
      "class_name": "PatternAnalyzer",
      "current_loc": 146,
      "limit": 100,
      "excess": 46,
      "severity": "major",
      "line_number": 146,
      "suggestion": {
        "suggested_methods_split": [
          "PatternAnalyzerCore - Core methods: initialize, analyze_performance_patterns, analyze_coordination_patterns, generate_optimization_recommendations, get_analysis_summary",
          "PatternAnalyzerUtils - Utility methods: shutdown"
        ],
        "properties_to_extract": [
          "metrics",
          "patterns",
          "contexts",
          "patterns",
          "recommendations",
          "performance_patterns",
          "patterns_by_type",
          "contexts",
          "recommendation",
          "pattern",
          "pattern"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\performance\\performance_cli.py",
      "function_name": "main",
      "current_loc": 66,
      "limit": 50,
      "excess": 16,
      "severity": "minor",
      "line_number": 31,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from main",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\performance\\performance_cli.py",
      "function_name": "handle_dashboard_command",
      "current_loc": 63,
      "limit": 50,
      "excess": 13,
      "severity": "minor",
      "line_number": 182,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from handle_dashboard_command",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\performance\\performance_monitoring_system.py",
      "class_name": "PerformanceMonitoringSystem",
      "current_loc": 175,
      "limit": 100,
      "excess": 75,
      "severity": "major",
      "line_number": 61,
      "suggestion": {
        "suggested_methods_split": [
          "PerformanceMonitoringSystemCore - Core methods: start_monitoring, stop_monitoring, collect_metrics, generate_report, get_system_status",
          "PerformanceMonitoringSystemUtils - Utility methods: get_metrics_summary, cleanup"
        ],
        "properties_to_extract": [
          "metrics",
          "current_time",
          "cpu_percent",
          "memory",
          "disk",
          "disk_percent",
          "current_metrics",
          "report_id",
          "summary",
          "report",
          "latest_metrics",
          "summary",
          "cpu_metric",
          "cpu_metrics",
          "memory_metrics"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\performance\\performance_monitoring_system.py",
      "function_name": "collect_metrics",
      "current_loc": 51,
      "limit": 50,
      "excess": 1,
      "severity": "minor",
      "line_number": 99,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from collect_metrics",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\performance\\unified_dashboard\\engine.py",
      "class_name": "DashboardEngine",
      "current_loc": 188,
      "limit": 100,
      "excess": 88,
      "severity": "major",
      "line_number": 31,
      "suggestion": {
        "suggested_methods_split": [
          "DashboardEngineCore - Core methods: add_metric, get_metric, get_metrics_by_type, update_metric, remove_metric",
          "DashboardEngineUtils - Utility methods: get_all_metrics, add_widget, get_widget, get_all_widgets, update_widget"
        ],
        "properties_to_extract": [
          "status"
        ],
        "method_count": 27,
        "estimated_classes": 2
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\performance\\unified_dashboard\\reporter.py",
      "class_name": "DashboardReporter",
      "current_loc": 231,
      "limit": 100,
      "excess": 131,
      "severity": "major",
      "line_number": 28,
      "suggestion": {
        "suggested_methods_split": [
          "DashboardReporterCore - Core methods: initialize, generate_metrics_report, generate_alerts_report, generate_performance_report, export_report",
          "DashboardReporterUtils - Utility methods: get_report_history, cleanup_old_reports, get_reporter_stats, shutdown"
        ],
        "properties_to_extract": [
          "metrics",
          "total_metrics",
          "values",
          "avg_value",
          "max_value",
          "min_value",
          "alerts",
          "total_alerts",
          "critical_alerts",
          "warning_alerts",
          "info_alerts",
          "metrics_report",
          "alerts_report",
          "report",
          "critical_alerts",
          "warning_alerts",
          "reports",
          "cutoff_time",
          "cleaned"
        ],
        "method_count": 9,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\performance\\unified_dashboard\\widget_manager.py",
      "class_name": "WidgetManager",
      "current_loc": 141,
      "limit": 100,
      "excess": 41,
      "severity": "major",
      "line_number": 22,
      "suggestion": {
        "suggested_methods_split": [
          "WidgetManagerCore - Core methods: add_widget, get_widget, get_all_widgets, update_widget, remove_widget",
          "WidgetManagerUtils - Utility methods: add_config, get_config, get_all_configs, update_config, remove_config"
        ],
        "properties_to_extract": [
          "widget",
          "config"
        ],
        "method_count": 14,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\processing\\unified_processing_system.py",
      "class_name": "UnifiedProcessingSystem",
      "current_loc": 127,
      "limit": 100,
      "excess": 27,
      "severity": "major",
      "line_number": 48,
      "suggestion": {
        "suggested_methods_split": [
          "UnifiedProcessingSystemCore - Core methods: process, register_processor, get_performance_metrics, get_processing_history, cleanup",
          "UnifiedProcessingSystemUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "context",
          "file_path",
          "processor",
          "result",
          "processing_time"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\refactoring\\analysis_tools_core.py",
      "class_name": "ArchitectureAnalyzer",
      "current_loc": 175,
      "limit": 100,
      "excess": 75,
      "severity": "major",
      "line_number": 28,
      "suggestion": {
        "suggested_methods_split": [
          "ArchitectureAnalyzerCore - Core methods: analyze_file, find_duplicates, identify_patterns, generate_suggestions",
          "ArchitectureAnalyzerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "duplicates",
          "file_hashes",
          "patterns",
          "suggestions",
          "classes",
          "lines",
          "functions",
          "lines",
          "imports",
          "lines",
          "lines",
          "complexity_indicators",
          "complexity_count",
          "line_count",
          "classes",
          "functions",
          "imports",
          "complexity_score",
          "v2_compliance",
          "suggestion",
          "suggestion",
          "content",
          "lines",
          "class_name",
          "func_name",
          "content",
          "file_hash",
          "content",
          "original",
          "duplicate",
          "pattern",
          "pattern"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\refactoring\\refactor_tools.py",
      "current_loc": 509,
      "limit": 400,
      "excess": 109,
      "severity": "critical",
      "suggestion": {
        "error": "Cannot parse file for suggestions"
      }
    },
    {
      "type": "syntax_error",
      "path": "src\\core\\refactoring\\refactor_tools.py",
      "severity": "critical"
    },
    {
      "type": "class_loc",
      "path": "src\\core\\refactoring\\tools\\consolidation_tools.py",
      "class_name": "ConsolidationTools",
      "current_loc": 108,
      "limit": 100,
      "excess": 8,
      "severity": "major",
      "line_number": 30,
      "suggestion": {
        "suggested_methods_split": [
          "ConsolidationToolsCore - Core methods: create_consolidation_plan, execute_consolidation, analyze_duplicates",
          "ConsolidationToolsUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "duplicates",
          "duplicate_groups",
          "consolidation_targets",
          "consolidation_rules",
          "estimated_savings",
          "dir_path",
          "file_hashes",
          "duplicates",
          "duplicates",
          "total_duplicates",
          "total_groups",
          "path",
          "content",
          "file_hash"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\refactoring\\tools\\extraction_tools.py",
      "class_name": "ExtractionTools",
      "current_loc": 101,
      "limit": 100,
      "excess": 1,
      "severity": "major",
      "line_number": 31,
      "suggestion": {
        "suggested_methods_split": [
          "ExtractionToolsCore - Core methods: create_extraction_plan, execute_extraction",
          "ExtractionToolsUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "base_path",
          "rules",
          "source_path",
          "source_content",
          "tree",
          "target_files",
          "extraction_rules",
          "source_path",
          "source_content",
          "tree",
          "models",
          "utils",
          "core",
          "target_path"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\refactoring\\tools\\optimization_tools.py",
      "class_name": "OptimizationTools",
      "current_loc": 129,
      "limit": 100,
      "excess": 29,
      "severity": "major",
      "line_number": 29,
      "suggestion": {
        "suggested_methods_split": [
          "OptimizationToolsCore - Core methods: create_optimization_plan, execute_optimization",
          "OptimizationToolsUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "targets",
          "lines",
          "rules",
          "improvements",
          "improvements",
          "lines",
          "optimized_content",
          "source_path",
          "source_content",
          "optimization_targets",
          "optimization_rules",
          "performance_improvements",
          "v2_compliance_improvements",
          "source_path",
          "source_content",
          "optimized_content",
          "optimized_content"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\ssot\\unified_ssot\\execution\\task_executor.py",
      "class_name": "TaskExecutor",
      "current_loc": 125,
      "limit": 100,
      "excess": 25,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "TaskExecutorCore - Core methods: ",
          "TaskExecutorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "result",
          "integration_result"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\ssot\\unified_ssot\\validators\\basic_validator.py",
      "class_name": "BasicValidator",
      "current_loc": 113,
      "limit": 100,
      "excess": 13,
      "severity": "major",
      "line_number": 18,
      "suggestion": {
        "suggested_methods_split": [
          "BasicValidatorCore - Core methods: validate_basic_fields, validate_component_metadata, get_validation_score",
          "BasicValidatorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "issues",
          "issues",
          "timestamp_fields",
          "base_score",
          "score",
          "version",
          "value",
          "value"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\ssot\\unified_ssot\\validators\\standard_validator.py",
      "class_name": "StandardValidator",
      "current_loc": 160,
      "limit": 100,
      "excess": 60,
      "severity": "major",
      "line_number": 18,
      "suggestion": {
        "suggested_methods_split": [
          "StandardValidatorCore - Core methods: validate_standard_fields, validate_component_relationships, get_validation_score",
          "StandardValidatorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "issues",
          "issues",
          "issues",
          "required_keys",
          "visited",
          "base_score",
          "score",
          "age",
          "days_since_update",
          "config_issues",
          "settings"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\ssot\\unified_ssot\\validators\\strict_validator.py",
      "class_name": "StrictValidator",
      "current_loc": 211,
      "limit": 100,
      "excess": 111,
      "severity": "major",
      "line_number": 18,
      "suggestion": {
        "suggested_methods_split": [
          "StrictValidatorCore - Core methods: validate_strict_requirements, validate_component_integrity, get_validation_score",
          "StrictValidatorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "issues",
          "issues",
          "issues",
          "issues",
          "issues",
          "issues",
          "security_issues",
          "thresholds",
          "phase_names",
          "required_resources",
          "base_score",
          "score",
          "perf_issues",
          "phase_issues",
          "resource_issues",
          "exec_time",
          "memory",
          "config",
          "sensitive_keys",
          "value",
          "desc"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\utility_system\\managers\\file_manager.py",
      "class_name": "FileManager",
      "current_loc": 110,
      "limit": 100,
      "excess": 10,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "FileManagerCore - Core methods: read_file, write_file, copy_file, move_file, delete_file",
          "FileManagerUtils - Utility methods: file_exists, list_directory, create_directory, get_file_size, get_status"
        ],
        "properties_to_extract": [
          "content"
        ],
        "method_count": 11,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\utils\\agent_matching.py",
      "class_name": "AgentMatchingUtils",
      "current_loc": 131,
      "limit": 100,
      "excess": 31,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "AgentMatchingUtilsCore - Core methods: calculate_agent_match_score, get_agent_type_match_score, rank_agents_by_capability, get_best_agent_for_task",
          "AgentMatchingUtilsUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "required_skills",
          "agent_skills",
          "skill_matches",
          "skill_score",
          "performance_score",
          "match_score",
          "task_type",
          "ranked_agents",
          "ranked_agents",
          "match_score",
          "performance_score"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\utils\\message_queue_utils.py",
      "class_name": "MessageQueueUtils",
      "current_loc": 216,
      "limit": 100,
      "excess": 116,
      "severity": "major",
      "line_number": 13,
      "suggestion": {
        "suggested_methods_split": [
          "MessageQueueUtilsCore - Core methods: calculate_priority_score, calculate_retry_delay, is_entry_ready_for_retry, is_entry_expired, build_priority_heap",
          "MessageQueueUtilsUtils - Utility methods: get_next_entries_for_processing, update_entry_for_retry, mark_entry_delivered, mark_entry_failed, mark_entry_processing"
        ],
        "properties_to_extract": [
          "base_scores",
          "base_score",
          "age_hours",
          "age_penalty",
          "delay",
          "max_age",
          "heap",
          "entries_to_process",
          "total_entries",
          "status_counts",
          "now",
          "ages",
          "age_stats",
          "retry_attempts",
          "retry_stats",
          "active_entries",
          "expired_count",
          "issues",
          "entry",
          "retry_delay"
        ],
        "method_count": 13,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\utils\\message_queue_utils.py",
      "function_name": "calculate_queue_statistics",
      "current_loc": 55,
      "limit": 50,
      "excess": 5,
      "severity": "minor",
      "line_number": 132,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from calculate_queue_statistics",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\validation\\coordination_validator.py",
      "class_name": "CoordinationValidator",
      "current_loc": 269,
      "limit": 100,
      "excess": 169,
      "severity": "major",
      "line_number": 46,
      "suggestion": {
        "suggested_methods_split": [
          "CoordinationValidatorCore - Core methods: validate_message_structure, validate_coordination_system, validate_performance_metrics, validate_security_compliance, run_comprehensive_validation",
          "CoordinationValidatorUtils - Utility methods: get_validation_report"
        ],
        "properties_to_extract": [
          "rules",
          "issues",
          "required_fields",
          "issues",
          "issues",
          "issues",
          "all_issues",
          "errors",
          "warnings",
          "info",
          "total_issues",
          "error_weight",
          "warning_weight",
          "weighted_score",
          "max_possible_score",
          "compliance_score",
          "message_rules_path",
          "quality_rules_path",
          "security_rules_path",
          "valid_types",
          "agent_data",
          "response_time",
          "throughput",
          "auth_data",
          "overall_result",
          "system_issues",
          "system_issues",
          "rules",
          "required_agent_fields",
          "overall_result",
          "overall_result"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\validation\\performance_benchmark\\benchmark_runner_core.py",
      "class_name": "BenchmarkRunnerCore",
      "current_loc": 113,
      "limit": 100,
      "excess": 13,
      "severity": "major",
      "line_number": 27,
      "suggestion": {
        "suggested_methods_split": [
          "BenchmarkRunnerCoreCore - Core methods: add_suite, run_benchmark, run_suite, run_all_suites, get_metrics_summary",
          "BenchmarkRunnerCoreUtils - Utility methods: generate_report, clear_metrics, get_benchmark_history"
        ],
        "properties_to_extract": [
          "start_time",
          "results",
          "total_time",
          "avg_time",
          "min_time",
          "max_time",
          "benchmark_result",
          "results",
          "all_results",
          "config",
          "iteration_start",
          "result",
          "results",
          "result",
          "iteration_time",
          "iteration_time"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\validation\\performance_benchmark\\benchmark_runner_core.py",
      "function_name": "run_benchmark",
      "current_loc": 58,
      "limit": 50,
      "excess": 8,
      "severity": "minor",
      "line_number": 40,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from run_benchmark",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\validation\\performance_benchmark\\benchmark_runner_operations.py",
      "class_name": "BenchmarkRunnerOperations",
      "current_loc": 232,
      "limit": 100,
      "excess": 132,
      "severity": "major",
      "line_number": 27,
      "suggestion": {
        "suggested_methods_split": [
          "BenchmarkRunnerOperationsCore - Core methods: run_parallel_benchmarks, run_benchmark, run_stress_test, compare_benchmarks, export_results",
          "BenchmarkRunnerOperationsUtils - Utility methods: get_performance_trends, run_single_benchmark"
        ],
        "properties_to_extract": [
          "results",
          "threads",
          "start_time",
          "results",
          "total_time",
          "avg_time",
          "min_time",
          "max_time",
          "benchmark_result",
          "config",
          "start_time",
          "results",
          "total_time",
          "avg_time",
          "min_time",
          "max_time",
          "benchmark_result",
          "best_result",
          "worst_result",
          "avg_times",
          "total_avg",
          "comparison",
          "history",
          "function_trends",
          "trends",
          "func",
          "benchmark_type",
          "config",
          "args",
          "kwargs",
          "result",
          "thread",
          "config",
          "iteration_start",
          "iteration_start",
          "func_name",
          "result",
          "iteration_time",
          "iteration_time",
          "first_avg",
          "last_avg",
          "trend_direction",
          "trend_percentage",
          "iteration_time",
          "iteration_time"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\validation\\performance_benchmark\\benchmark_runner_operations.py",
      "function_name": "run_benchmark",
      "current_loc": 58,
      "limit": 50,
      "excess": 8,
      "severity": "minor",
      "line_number": 67,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from run_benchmark",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\analyzer_core.py",
      "class_name": "StrategicOversightAnalyzer",
      "current_loc": 193,
      "limit": 100,
      "excess": 93,
      "severity": "major",
      "line_number": 35,
      "suggestion": {
        "suggested_methods_split": [
          "StrategicOversightAnalyzerCore - Core methods: initialize, analyze_swarm_coordination, analyze_agent_performance, generate_strategic_recommendations, analyze_system_health",
          "StrategicOversightAnalyzerUtils - Utility methods: get_analysis_summary"
        ],
        "properties_to_extract": [
          "insights",
          "coordination_data",
          "metrics",
          "performance_data",
          "recommendations",
          "health_data",
          "insight",
          "metric",
          "recommendation"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\factory_core.py",
      "class_name": "StrategicOversightFactoryCore",
      "current_loc": 133,
      "limit": 100,
      "excess": 33,
      "severity": "major",
      "line_number": 38,
      "suggestion": {
        "suggested_methods_split": [
          "StrategicOversightFactoryCoreCore - Core methods: create_strategic_oversight_report, create_swarm_coordination_insight, create_strategic_recommendation, create_agent_performance_metrics, create_swarm_coordination_status",
          "StrategicOversightFactoryCoreUtils - Utility methods: create_strategic_mission"
        ],
        "properties_to_extract": [],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\factory_extended.py",
      "class_name": "StrategicOversightFactoryExtended",
      "current_loc": 144,
      "limit": 100,
      "excess": 44,
      "severity": "major",
      "line_number": 38,
      "suggestion": {
        "suggested_methods_split": [
          "StrategicOversightFactoryExtendedCore - Core methods: create_vector_database_metrics, create_system_health_metrics, create_comprehensive_report, create_emergency_insight, create_high_priority_recommendation",
          "StrategicOversightFactoryExtendedUtils - Utility methods: create_mission_batch"
        ],
        "properties_to_extract": [
          "missions",
          "mission"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\factory_methods.py",
      "class_name": "StrategicOversightFactory",
      "current_loc": 190,
      "limit": 100,
      "excess": 90,
      "severity": "major",
      "line_number": 43,
      "suggestion": {
        "suggested_methods_split": [
          "StrategicOversightFactoryCore - Core methods: create_oversight_report, create_swarm_insight, create_strategic_recommendation, create_agent_performance_metrics, create_swarm_coordination_status",
          "StrategicOversightFactoryUtils - Utility methods: create_vector_database_metrics, create_system_health_metrics, create_strategic_mission, create_quick_mission, create_emergency_mission"
        ],
        "properties_to_extract": [],
        "method_count": 10,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\analyzers\\prediction_analyzer.py",
      "class_name": "PredictionAnalyzer",
      "current_loc": 159,
      "limit": 100,
      "excess": 59,
      "severity": "major",
      "line_number": 31,
      "suggestion": {
        "suggested_methods_split": [
          "PredictionAnalyzerCore - Core methods: add_historical_data, get_prediction_summary",
          "PredictionAnalyzerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "complexity",
          "successful_tasks",
          "total_tasks",
          "factors",
          "risks",
          "recommendations",
          "confidence_values",
          "total_confidence",
          "base_probability",
          "confidence_level",
          "historical_success_rate",
          "base_probability"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\analyzers\\prediction_analyzer.py",
      "function_name": "predict_task_success",
      "current_loc": 52,
      "limit": 50,
      "excess": 2,
      "severity": "minor",
      "line_number": 39,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from predict_task_success",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\analyzers\\swarm_analyzer.py",
      "class_name": "SwarmCoordinationAnalyzer",
      "current_loc": 135,
      "limit": 100,
      "excess": 35,
      "severity": "major",
      "line_number": 18,
      "suggestion": {
        "suggested_methods_split": [
          "SwarmCoordinationAnalyzerCore - Core methods: ",
          "SwarmCoordinationAnalyzerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "insights",
          "insights",
          "insights",
          "insights",
          "collaboration_insights",
          "mission_insights",
          "performance_insights"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\application\\use_cases\\assign_task_uc.py",
      "class_name": "AssignTaskUseCase",
      "current_loc": 112,
      "limit": 100,
      "excess": 12,
      "severity": "major",
      "line_number": 38,
      "suggestion": {
        "suggested_methods_split": [
          "AssignTaskUseCaseCore - Core methods: execute",
          "AssignTaskUseCaseUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "task",
          "event",
          "agent",
          "available_agents",
          "agent"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\application\\use_cases\\assign_task_uc.py",
      "function_name": "execute",
      "current_loc": 90,
      "limit": 50,
      "excess": 40,
      "severity": "minor",
      "line_number": 60,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from execute",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "src\\application\\use_cases\\complete_task_uc.py",
      "function_name": "execute",
      "current_loc": 78,
      "limit": 50,
      "excess": 28,
      "severity": "minor",
      "line_number": 57,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from execute",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\architecture\\system_integration.py",
      "class_name": "UnifiedSystemIntegration",
      "current_loc": 122,
      "limit": 100,
      "excess": 22,
      "severity": "major",
      "line_number": 56,
      "suggestion": {
        "suggested_methods_split": [
          "UnifiedSystemIntegrationCore - Core methods: register_endpoint, check_endpoint_health, get_integration_status, integrate_systems",
          "UnifiedSystemIntegrationUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "total_endpoints",
          "connected_endpoints",
          "health_percentage",
          "health_results",
          "status",
          "endpoint",
          "endpoint"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\architecture\\unified_architecture_core.py",
      "class_name": "UnifiedArchitectureCore",
      "current_loc": 116,
      "limit": 100,
      "excess": 16,
      "severity": "major",
      "line_number": 57,
      "suggestion": {
        "suggested_methods_split": [
          "UnifiedArchitectureCoreCore - Core methods: register_component, get_component, list_components, update_component_metrics, get_architecture_health",
          "UnifiedArchitectureCoreUtils - Utility methods: consolidate_architecture"
        ],
        "properties_to_extract": [
          "total_components",
          "active_components",
          "health_percentage",
          "health",
          "component",
          "dependencies"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\automation\\ui_onboarding.py",
      "class_name": "UIOnboarder",
      "current_loc": 143,
      "limit": 100,
      "excess": 43,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "UIOnboarderCore - Core methods: perform",
          "UIOnboarderUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "current_pos"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\automation\\ui_onboarding.py",
      "function_name": "perform",
      "current_loc": 72,
      "limit": 50,
      "excess": 22,
      "severity": "minor",
      "line_number": 38,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from perform",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\discord_commander\\agent_communication_engine_core.py",
      "class_name": "AgentCommunicationEngineCore",
      "current_loc": 104,
      "limit": 100,
      "excess": 4,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "AgentCommunicationEngineCoreCore - Core methods: is_valid_agent, get_all_agent_names",
          "AgentCommunicationEngineCoreUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "inbox_path",
          "timestamp",
          "message_filename",
          "message_content",
          "message_file_path",
          "execution_time",
          "execution_time"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\discord_commander\\agent_communication_engine_operations.py",
      "class_name": "AgentCommunicationEngineOperations",
      "current_loc": 117,
      "limit": 100,
      "excess": 17,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "AgentCommunicationEngineOperationsCore - Core methods: get_agent_status_file_path",
          "AgentCommunicationEngineOperationsUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "agents",
          "successful_deliveries",
          "failed_deliveries",
          "status_file",
          "inbox_path",
          "cleaned_count",
          "current_time",
          "max_age_seconds",
          "result",
          "file_path",
          "file_age"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\domain\\entities\\agent.py",
      "class_name": "Agent",
      "current_loc": 108,
      "limit": 100,
      "excess": 8,
      "severity": "major",
      "line_number": 16,
      "suggestion": {
        "suggested_methods_split": [
          "AgentCore - Core methods: current_task_count, can_accept_more_tasks, workload_percentage, has_capability, add_capability",
          "AgentUtils - Utility methods: remove_capability, assign_task, complete_task, deactivate, reactivate"
        ],
        "properties_to_extract": [],
        "method_count": 11,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\domain\\services\\assignment_service.py",
      "class_name": "AssignmentService",
      "current_loc": 117,
      "limit": 100,
      "excess": 17,
      "severity": "major",
      "line_number": 16,
      "suggestion": {
        "suggested_methods_split": [
          "AssignmentServiceCore - Core methods: find_best_agent_for_task, validate_assignment",
          "AssignmentServiceUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "suitable_agents",
          "scored_agents",
          "best_agent",
          "workload_factor",
          "capacity_factor",
          "priority_factor",
          "score",
          "score"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\gaming\\gaming_alert_manager.py",
      "class_name": "GamingAlertManager",
      "current_loc": 333,
      "limit": 100,
      "excess": 233,
      "severity": "major",
      "line_number": 55,
      "suggestion": {
        "suggested_methods_split": [
          "GamingAlertManagerCore - Core methods: create_alert, check_performance_alerts, check_system_health_alerts, acknowledge_alert, resolve_alert",
          "GamingAlertManagerUtils - Utility methods: get_active_alerts, get_alert_summary, clear_resolved_alerts, set_alert_threshold, export_alerts"
        ],
        "properties_to_extract": [
          "alert_id",
          "alert",
          "alerts",
          "fps",
          "memory_usage",
          "cpu_usage",
          "alerts",
          "disk_usage",
          "network_status",
          "alert",
          "alert",
          "active_alerts",
          "total_alerts",
          "active_alerts",
          "resolved_alerts",
          "alerts_by_type",
          "alerts_by_severity",
          "cutoff_time",
          "alerts_to_remove",
          "severity",
          "alert",
          "severity",
          "alert",
          "alert",
          "alert",
          "alert",
          "active_alerts",
          "alert_type",
          "severity",
          "export_data"
        ],
        "method_count": 10,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\gaming\\gaming_alert_manager.py",
      "function_name": "check_performance_alerts",
      "current_loc": 51,
      "limit": 50,
      "excess": 1,
      "severity": "minor",
      "line_number": 135,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from check_performance_alerts",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "syntax_error",
      "path": "src\\gaming\\gaming_integration_core.py",
      "severity": "critical"
    },
    {
      "type": "class_loc",
      "path": "src\\gaming\\performance_validation.py",
      "class_name": "GamingPerformanceValidator",
      "current_loc": 203,
      "limit": 100,
      "excess": 103,
      "severity": "major",
      "line_number": 30,
      "suggestion": {
        "suggested_methods_split": [
          "GamingPerformanceValidatorCore - Core methods: generate_performance_report",
          "GamingPerformanceValidatorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "core",
          "init_time",
          "start_time",
          "session",
          "session_time",
          "start_time",
          "status",
          "status_time",
          "start_time",
          "fps_metrics",
          "fps_time",
          "start_time",
          "memory_metrics",
          "memory_time",
          "start_time",
          "cpu_metrics",
          "cpu_time",
          "start_time",
          "network_metrics",
          "network_time",
          "total_time",
          "test_data",
          "start_time",
          "session_time",
          "start_time",
          "perf_time",
          "start_time",
          "health_time",
          "start_time",
          "interaction_time",
          "total_time",
          "start_time",
          "session_time",
          "start_time",
          "fps_time",
          "start_time",
          "memory_time",
          "results",
          "all_passed",
          "report"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\gaming\\test_runner_cli.py",
      "function_name": "main",
      "current_loc": 142,
      "limit": 50,
      "excess": 92,
      "severity": "minor",
      "line_number": 65,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from main",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\gaming\\test_runner_core.py",
      "class_name": "GamingTestRunnerCore",
      "current_loc": 368,
      "limit": 100,
      "excess": 268,
      "severity": "major",
      "line_number": 26,
      "suggestion": {
        "suggested_methods_split": [
          "GamingTestRunnerCoreCore - Core methods: get_test_results, export_test_results",
          "GamingTestRunnerCoreUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "default_suites",
          "test_data",
          "test_name",
          "test_type",
          "test_result",
          "suite",
          "results",
          "default_tests",
          "total_tests",
          "passed_tests",
          "failed_tests",
          "error_tests",
          "test_func",
          "execution_result",
          "test_result",
          "export_data",
          "result",
          "loop",
          "result"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\gaming\\test_runner_core.py",
      "function_name": "run_test",
      "current_loc": 60,
      "limit": 50,
      "excess": 10,
      "severity": "minor",
      "line_number": 106,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from run_test",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "src\\gaming\\handlers\\gaming_alert_handlers.py",
      "function_name": "handle_performance_alerts",
      "current_loc": 61,
      "limit": 50,
      "excess": 11,
      "severity": "minor",
      "line_number": 13,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from handle_performance_alerts",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\gaming\\integration\\core.py",
      "class_name": "GamingIntegrationCore",
      "current_loc": 123,
      "limit": 100,
      "excess": 23,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "GamingIntegrationCoreCore - Core methods: create_game_session, end_game_session, get_active_sessions, get_system_status, process_event",
          "GamingIntegrationCoreUtils - Utility methods: register_entertainment_system"
        ],
        "properties_to_extract": [
          "GameType",
          "session_id",
          "session",
          "session",
          "event_type",
          "handler",
          "system",
          "game_type",
          "player_id",
          "session",
          "session_id"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\infrastructure\\persistence\\sqlite_agent_repo.py",
      "class_name": "SqliteAgentRepository",
      "current_loc": 248,
      "limit": 100,
      "excess": 148,
      "severity": "major",
      "line_number": 16,
      "suggestion": {
        "suggested_methods_split": [
          "SqliteAgentRepositoryCore - Core methods: get, get_by_capability, get_active, get_available, add",
          "SqliteAgentRepositoryUtils - Utility methods: save, delete, list_all"
        ],
        "properties_to_extract": [
          "conn",
          "capabilities",
          "created_at",
          "last_active_at",
          "row",
          "rows",
          "rows",
          "rows",
          "cursor",
          "rows",
          "agent",
          "capabilities",
          "capabilities"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\infrastructure\\persistence\\sqlite_task_repo.py",
      "class_name": "SqliteTaskRepository",
      "current_loc": 226,
      "limit": 100,
      "excess": 126,
      "severity": "major",
      "line_number": 17,
      "suggestion": {
        "suggested_methods_split": [
          "SqliteTaskRepositoryCore - Core methods: get, get_by_agent, get_pending, add, save",
          "SqliteTaskRepositoryUtils - Utility methods: delete, list_all"
        ],
        "properties_to_extract": [
          "conn",
          "created_at",
          "assigned_at",
          "completed_at",
          "agent_id",
          "row",
          "rows",
          "rows",
          "cursor",
          "rows"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\infrastructure\\browser\\thea_manager_profile.py",
      "current_loc": 873,
      "limit": 400,
      "excess": 473,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "thea_manager_profile_core.py - Core classes: TheaManagerConfig, TheaWorkingBrowser",
          "thea_manager_profile_utils.py - Utility functions: __init__, _collect_full_response, _extract_current_response",
          "thea_manager_profile_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 5,
          "functions": 19,
          "imports": 32
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\infrastructure\\browser\\thea_manager_profile.py",
      "class_name": "TheaWorkingBrowser",
      "current_loc": 245,
      "limit": 100,
      "excess": 145,
      "severity": "major",
      "line_number": 100,
      "suggestion": {
        "suggested_methods_split": [
          "TheaWorkingBrowserCore - Core methods: ",
          "TheaWorkingBrowserUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "last_response_length",
          "stable_count",
          "max_stable_count",
          "response_elements",
          "message_elements",
          "markdown_elements",
          "thinking_indicators",
          "stop_buttons",
          "input_elements",
          "completion_markers",
          "cursor_script",
          "result",
          "current_content",
          "last_content",
          "current_response",
          "text",
          "current_length",
          "text",
          "text",
          "last_response_length",
          "stable_count",
          "last_response_length",
          "stable_count"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\infrastructure\\browser\\thea_manager_profile.py",
      "class_name": "TheaManagerProfile",
      "current_loc": 463,
      "limit": 100,
      "excess": 363,
      "severity": "major",
      "line_number": 411,
      "suggestion": {
        "suggested_methods_split": [
          "TheaManagerProfileCore - Core methods: open, goto, send_and_wait, close, is_ready",
          "TheaManagerProfileUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "wait",
          "fallback_selectors",
          "fallback_selectors",
          "wait",
          "analysis_keywords",
          "error_msg",
          "error_str",
          "current_url",
          "success",
          "input_box",
          "enhanced_prompt",
          "response_text",
          "browser",
          "response",
          "wait",
          "fallback_selectors",
          "wait",
          "send_button",
          "enhanced",
          "error_msg",
          "response_element",
          "text",
          "conversation_elements",
          "element",
          "send_button",
          "placeholder",
          "elements",
          "text",
          "text"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\infrastructure\\browser\\thea_manager_profile.py",
      "function_name": "_collect_full_response",
      "current_loc": 64,
      "limit": 50,
      "excess": 14,
      "severity": "minor",
      "line_number": 117,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _collect_full_response",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "src\\infrastructure\\browser\\thea_manager_profile.py",
      "function_name": "_extract_current_response",
      "current_loc": 53,
      "limit": 50,
      "excess": 3,
      "severity": "minor",
      "line_number": 182,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _extract_current_response",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "src\\infrastructure\\browser\\thea_manager_profile.py",
      "function_name": "_is_response_complete",
      "current_loc": 58,
      "limit": 50,
      "excess": 8,
      "severity": "minor",
      "line_number": 236,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _is_response_complete",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "src\\infrastructure\\browser\\thea_manager_profile.py",
      "function_name": "send_and_wait",
      "current_loc": 72,
      "limit": 50,
      "excess": 22,
      "severity": "minor",
      "line_number": 480,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from send_and_wait",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "src\\infrastructure\\browser\\thea_manager_profile.py",
      "function_name": "_extract_response",
      "current_loc": 83,
      "limit": 50,
      "excess": 33,
      "severity": "minor",
      "line_number": 583,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _extract_response",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "src\\infrastructure\\browser\\thea_manager_profile.py",
      "function_name": "_ensure_authenticated",
      "current_loc": 51,
      "limit": 50,
      "excess": 1,
      "severity": "minor",
      "line_number": 823,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _ensure_authenticated",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "src\\quality\\proof_ledger.py",
      "function_name": "run_tdd_proof",
      "current_loc": 66,
      "limit": 50,
      "excess": 16,
      "severity": "minor",
      "line_number": 15,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from run_tdd_proof",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\core\\dependency_injection.py",
      "class_name": "TradingDependencyContainer",
      "current_loc": 208,
      "limit": 100,
      "excess": 108,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "TradingDependencyContainerCore - Core methods: register_factory, register_instance, resolve, has_service, clear_scope",
          "TradingDependencyContainerUtils - Utility methods: get_registered_services"
        ],
        "properties_to_extract": [
          "services",
          "sig",
          "params",
          "instance",
          "instance",
          "factory",
          "instance"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\trading_robot\\core\\dependency_injection.py",
      "function_name": "resolve",
      "current_loc": 57,
      "limit": 50,
      "excess": 7,
      "severity": "minor",
      "line_number": 108,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from resolve",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\repositories\\trading_repository.py",
      "class_name": "TradingRepository",
      "current_loc": 173,
      "limit": 100,
      "excess": 73,
      "severity": "major",
      "line_number": 30,
      "suggestion": {
        "suggested_methods_split": [
          "TradingRepositoryCore - Core methods: ",
          "TradingRepositoryUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "trade_count",
          "position_count",
          "portfolio_count",
          "trade_cleared",
          "position_cleared",
          "portfolio_cleared",
          "success"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\repositories\\implementations\\in_memory_trading_repository.py",
      "class_name": "InMemoryTradingRepository",
      "current_loc": 287,
      "limit": 100,
      "excess": 187,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "InMemoryTradingRepositoryCore - Core methods: ",
          "InMemoryTradingRepositoryUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "trade",
          "symbol_trades",
          "result",
          "status_trades",
          "result",
          "all_trades",
          "result",
          "position",
          "positions"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\repositories\\implementations\\trading_repository_impl.py",
      "class_name": "TradingRepositoryImpl",
      "current_loc": 269,
      "limit": 100,
      "excess": 169,
      "severity": "major",
      "line_number": 23,
      "suggestion": {
        "suggested_methods_split": [
          "TradingRepositoryImplCore - Core methods: ",
          "TradingRepositoryImplUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "trade",
          "trades",
          "result",
          "trades",
          "result",
          "trades",
          "result",
          "trades",
          "result",
          "count",
          "count"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\repositories\\interfaces\\position_repository_interface.py",
      "class_name": "PositionRepositoryInterface",
      "current_loc": 138,
      "limit": 100,
      "excess": 38,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "PositionRepositoryInterfaceCore - Core methods: ",
          "PositionRepositoryInterfaceUtils - Utility methods: "
        ],
        "properties_to_extract": [],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\repositories\\interfaces\\trading_repository_interface.py",
      "class_name": "TradingRepositoryInterface",
      "current_loc": 127,
      "limit": 100,
      "excess": 27,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "TradingRepositoryInterfaceCore - Core methods: ",
          "TradingRepositoryInterfaceUtils - Utility methods: "
        ],
        "properties_to_extract": [],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\repositories\\models\\portfolio.py",
      "class_name": "Portfolio",
      "current_loc": 165,
      "limit": 100,
      "excess": 65,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "PortfolioCore - Core methods: add_position, remove_position, get_position, has_position, get_total_market_value",
          "PortfolioUtils - Utility methods: get_total_cost_basis, get_total_unrealized_pnl, get_total_unrealized_pnl_percentage, get_portfolio_value, get_position_count"
        ],
        "properties_to_extract": [
          "cost_basis",
          "positions"
        ],
        "method_count": 19,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\repositories\\models\\position.py",
      "class_name": "Position",
      "current_loc": 123,
      "limit": 100,
      "excess": 23,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "PositionCore - Core methods: get_market_value, get_cost_basis, get_unrealized_pnl, get_unrealized_pnl_percentage, is_long",
          "PositionUtils - Utility methods: is_short, is_flat, is_profitable, update_price, add_quantity"
        ],
        "properties_to_extract": [
          "cost_basis",
          "total_quantity",
          "total_cost"
        ],
        "method_count": 12,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\services\\trading_service.py",
      "class_name": "TradingService",
      "current_loc": 264,
      "limit": 100,
      "excess": 164,
      "severity": "major",
      "line_number": 26,
      "suggestion": {
        "suggested_methods_split": [
          "TradingServiceCore - Core methods: ",
          "TradingServiceUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "trade_id",
          "trade",
          "success",
          "positions",
          "position",
          "positions",
          "total_pnl",
          "total_value",
          "result",
          "trade",
          "success",
          "symbol",
          "current_position",
          "trades",
          "trades",
          "total_quantity",
          "total_cost",
          "new_avg_price",
          "updated_position",
          "updated_position",
          "new_quantity",
          "pnl",
          "updated_position",
          "pnl"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\trading_robot\\services\\trading_service.py",
      "function_name": "execute_trade",
      "current_loc": 57,
      "limit": 50,
      "excess": 7,
      "severity": "minor",
      "line_number": 34,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from execute_trade",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "src\\trading_robot\\services\\trading_service.py",
      "function_name": "_update_position_from_trade",
      "current_loc": 70,
      "limit": 50,
      "excess": 20,
      "severity": "minor",
      "line_number": 220,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _update_position_from_trade",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\services\\analytics\\market_trend_engine.py",
      "class_name": "MarketTrendEngine",
      "current_loc": 182,
      "limit": 100,
      "excess": 82,
      "severity": "major",
      "line_number": 22,
      "suggestion": {
        "suggested_methods_split": [
          "MarketTrendEngineCore - Core methods: analyze_market_trend, get_trend_summary",
          "MarketTrendEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "trades_sorted",
          "price_changes",
          "avg_change",
          "volatility",
          "strength",
          "trade_count_factor",
          "trades_sorted",
          "price_changes",
          "volatility",
          "consistency_factor",
          "confidence",
          "trades_sorted",
          "recent_trades",
          "price_changes",
          "avg_change",
          "bullish_count",
          "bearish_count",
          "sideways_count",
          "avg_strength",
          "avg_confidence",
          "avg_predicted_change",
          "total_trends",
          "confidence",
          "predicted_change",
          "prev_price",
          "curr_price",
          "direction",
          "consistency_factor",
          "prev_price",
          "curr_price",
          "prev_price",
          "curr_price",
          "overall_sentiment",
          "change",
          "direction",
          "direction",
          "change",
          "change",
          "overall_sentiment",
          "overall_sentiment"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\services\\analytics\\performance_metrics_engine.py",
      "class_name": "PerformanceMetricsEngine",
      "current_loc": 226,
      "limit": 100,
      "excess": 126,
      "severity": "major",
      "line_number": 22,
      "suggestion": {
        "suggested_methods_split": [
          "PerformanceMetricsEngineCore - Core methods: calculate_performance_metrics",
          "PerformanceMetricsEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "total_cost",
          "total_revenue",
          "returns",
          "avg_return",
          "volatility",
          "risk_free_rate",
          "trades_sorted",
          "peak",
          "max_drawdown",
          "prices",
          "max_drawdown",
          "symbol_trades",
          "winning_trades",
          "total_trades",
          "symbol_trades",
          "profits",
          "losses",
          "total_profits",
          "total_losses",
          "durations",
          "symbol_trades",
          "symbol_trades",
          "returns",
          "symbol_trades",
          "total_return",
          "sharpe_ratio",
          "max_drawdown",
          "win_rate",
          "profit_factor",
          "avg_duration",
          "drawdown",
          "max_drawdown",
          "peak",
          "drawdown",
          "max_drawdown",
          "buy_times",
          "sell_times",
          "peak",
          "buy_trades",
          "sell_trades",
          "buy_trades",
          "sell_trades",
          "duration",
          "avg_buy_price",
          "avg_sell_price",
          "total_buy",
          "total_sell",
          "pnl",
          "prev_price",
          "curr_price",
          "daily_return"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\services\\analytics\\risk_analysis_engine.py",
      "class_name": "RiskAnalysisEngine",
      "current_loc": 155,
      "limit": 100,
      "excess": 55,
      "severity": "major",
      "line_number": 22,
      "suggestion": {
        "suggested_methods_split": [
          "RiskAnalysisEngineCore - Core methods: calculate_risk_metrics",
          "RiskAnalysisEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "symbol_returns",
          "returns",
          "returns_sorted",
          "index",
          "returns_sorted",
          "index",
          "tail_returns",
          "variance",
          "risk_multipliers",
          "returns",
          "volatility",
          "var_95",
          "expected_shortfall",
          "beta",
          "risk_level",
          "max_position_size",
          "prev_price",
          "curr_price",
          "daily_return"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\services\\analytics\\trading_bi_orchestrator.py",
      "class_name": "TradingBiAnalyticsOrchestrator",
      "current_loc": 166,
      "limit": 100,
      "excess": 66,
      "severity": "major",
      "line_number": 39,
      "suggestion": {
        "suggested_methods_split": [
          "TradingBiAnalyticsOrchestratorCore - Core methods: get_engine_status",
          "TradingBiAnalyticsOrchestratorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "position",
          "unrealized_pnl",
          "position_value",
          "pnl_percentage",
          "positions",
          "total_pnl",
          "total_value",
          "total_cost",
          "pnl_percentage",
          "trades",
          "trades",
          "trades",
          "performance_metrics",
          "risk_metrics",
          "trends",
          "trend_summary",
          "trend"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\strategies\\backtest\\data_management_engine.py",
      "class_name": "DataManagementEngine",
      "current_loc": 196,
      "limit": 100,
      "excess": 96,
      "severity": "major",
      "line_number": 55,
      "suggestion": {
        "suggested_methods_split": [
          "DataManagementEngineCore - Core methods: load_data, validate_data, get_data_summary, get_data_slice, get_latest_data",
          "DataManagementEngineUtils - Utility methods: clear_cache, is_data_loaded, get_data_info"
        ],
        "properties_to_extract": [
          "cache_file",
          "required_columns",
          "df",
          "df",
          "required_columns",
          "ticker",
          "df",
          "df",
          "df"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\strategies\\backtest\\position_management_engine.py",
      "class_name": "PositionManagementEngine",
      "current_loc": 222,
      "limit": 100,
      "excess": 122,
      "severity": "major",
      "line_number": 50,
      "suggestion": {
        "suggested_methods_split": [
          "PositionManagementEngineCore - Core methods: initialize, calculate_position_size, open_position, close_position, check_stop_loss",
          "PositionManagementEngineUtils - Utility methods: check_take_profit, get_open_position, get_trade_history, get_closed_trades, get_open_trades"
        ],
        "properties_to_extract": [
          "closed_trades",
          "winning_trades",
          "peak",
          "max_dd",
          "current_capital",
          "closed_trades",
          "risk_amount",
          "price_diff",
          "position_size",
          "quantity",
          "trade",
          "trade",
          "trade",
          "should_close",
          "trade",
          "should_close",
          "should_close",
          "should_close",
          "drawdown",
          "max_dd",
          "should_close",
          "should_close",
          "peak"
        ],
        "method_count": 16,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\strategies\\backtest\\signal_detection_engine.py",
      "class_name": "SignalDetectionEngine",
      "current_loc": 262,
      "limit": 100,
      "excess": 162,
      "severity": "major",
      "line_number": 41,
      "suggestion": {
        "suggested_methods_split": [
          "SignalDetectionEngineCore - Core methods: check_entry_signals, check_exit_signals, calculate_stop_distance, calculate_target_price, calculate_stop_price",
          "SignalDetectionEngineUtils - Utility methods: validate_signal_conditions, get_signal_strength, update_bar_index, record_exit, reset_cooldown"
        ],
        "properties_to_extract": [
          "cooldown_ok",
          "long_signal",
          "short_signal",
          "bars_since_exit",
          "cooldown_remaining",
          "long_sig",
          "short_sig",
          "current_price",
          "atr_value",
          "stop_distance",
          "conditions",
          "long_score",
          "short_score",
          "trend_strength",
          "price_strength",
          "rsi_strength",
          "session_strength",
          "vol_strength",
          "strength",
          "trend_strength",
          "price_strength",
          "rsi_strength",
          "session_strength",
          "vol_strength",
          "strength"
        ],
        "method_count": 11,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\trading_robot\\strategies\\backtest\\signal_detection_engine.py",
      "function_name": "validate_signal_conditions",
      "current_loc": 56,
      "limit": 50,
      "excess": 6,
      "severity": "minor",
      "line_number": 168,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from validate_signal_conditions",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "src\\trading_robot\\strategies\\backtest\\signal_detection_engine.py",
      "function_name": "get_signal_strength",
      "current_loc": 51,
      "limit": 50,
      "excess": 1,
      "severity": "minor",
      "line_number": 225,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from get_signal_strength",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\strategies\\backtest\\technical_indicators_engine.py",
      "class_name": "TechnicalIndicatorsEngine",
      "current_loc": 257,
      "limit": 100,
      "excess": 157,
      "severity": "major",
      "line_number": 34,
      "suggestion": {
        "suggested_methods_split": [
          "TechnicalIndicatorsEngineCore - Core methods: calculate_all_indicators, calculate_custom_indicator, get_indicator_values, get_indicator_summary, validate_indicators",
          "TechnicalIndicatorsEngineUtils - Utility methods: get_trend_strength, calculate_rsi, calculate_atr"
        ],
        "properties_to_extract": [
          "df",
          "df",
          "df",
          "df",
          "df",
          "df",
          "df",
          "df",
          "bb_std",
          "lowest_low",
          "highest_high",
          "indicator_columns",
          "summary",
          "required_indicators",
          "row",
          "ma_separation",
          "delta",
          "gain",
          "loss",
          "rs",
          "tr1",
          "tr2",
          "tr3",
          "tr",
          "rsi_values",
          "atr_values",
          "trend_direction",
          "trend_strength",
          "trend_direction",
          "trend_strength",
          "trend_direction",
          "trend_strength"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\strategies\\backtest\\tsla_atr_backtest_orchestrator.py",
      "class_name": "TSLAATRBacktestOrchestrator",
      "current_loc": 218,
      "limit": 100,
      "excess": 118,
      "severity": "major",
      "line_number": 46,
      "suggestion": {
        "suggested_methods_split": [
          "TSLAATRBacktestOrchestratorCore - Core methods: run_backtest, get_backtest_summary, get_trade_log, get_equity_curve, generate_performance_report",
          "TSLAATRBacktestOrchestratorUtils - Utility methods: export_results, reset_backtest, update_config"
        ],
        "properties_to_extract": [
          "indicator_config",
          "signal_config",
          "position_config",
          "analytics_config",
          "results",
          "exit_reason",
          "stop_dist",
          "target_dist",
          "stop_dist",
          "target_dist"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\trading_robot\\strategies\\backtest\\tsla_atr_backtest_orchestrator.py",
      "function_name": "run_backtest",
      "current_loc": 115,
      "limit": 50,
      "excess": 65,
      "severity": "minor",
      "line_number": 97,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from run_backtest",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "file_loc",
      "path": "src\\utils\\config_consolidator.py",
      "current_loc": 426,
      "limit": 400,
      "excess": 26,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "config_consolidator_core.py - Core classes: ConfigPattern, ConfigurationConsolidator",
          "config_consolidator_utils.py - Utility functions: run_configuration_consolidation, __init__, scan_configuration_patterns",
          "config_consolidator_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 2,
          "functions": 13,
          "imports": 14
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\utils\\config_consolidator.py",
      "class_name": "ConfigurationConsolidator",
      "current_loc": 355,
      "limit": 100,
      "excess": 255,
      "severity": "major",
      "line_number": 38,
      "suggestion": {
        "suggested_methods_split": [
          "ConfigurationConsolidatorCore - Core methods: scan_configuration_patterns, consolidate_patterns, generate_consolidation_report",
          "ConfigurationConsolidatorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "patterns_by_type",
          "skip_patterns",
          "patterns",
          "patterns",
          "patterns",
          "config_patterns",
          "patterns",
          "patterns",
          "settings_keywords",
          "config_indicators",
          "key_lower",
          "consolidation_results",
          "patterns_by_file",
          "report_lines",
          "pattern_types",
          "all_config",
          "file_patterns",
          "env_patterns",
          "hardcoded_patterns",
          "const_patterns",
          "settings_patterns",
          "config_info",
          "source",
          "content",
          "lines",
          "match",
          "matches",
          "match",
          "content",
          "lines",
          "import_section_end",
          "import_line",
          "content",
          "key",
          "key",
          "value",
          "key",
          "value_str",
          "match",
          "old_pattern",
          "new_pattern",
          "content",
          "value",
          "key",
          "value_str",
          "import_section_end",
          "value"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\utils\\config_consolidator.py",
      "function_name": "consolidate_patterns",
      "current_loc": 51,
      "limit": 50,
      "excess": 1,
      "severity": "minor",
      "line_number": 249,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from consolidate_patterns",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "src\\utils\\config_consolidator.py",
      "function_name": "generate_consolidation_report",
      "current_loc": 52,
      "limit": 50,
      "excess": 2,
      "severity": "minor",
      "line_number": 341,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from generate_consolidation_report",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "src\\utils\\file_utils.py",
      "class_name": "FileUtils",
      "current_loc": 243,
      "limit": 100,
      "excess": 143,
      "severity": "major",
      "line_number": 16,
      "suggestion": {
        "suggested_methods_split": [
          "FileUtilsCore - Core methods: ensure_directory, read_json, write_json, read_yaml, write_yaml",
          "FileUtilsUtils - Utility methods: file_exists, is_file_readable, is_file_writable, get_file_size, get_file_modified_time"
        ],
        "properties_to_extract": [
          "result",
          "timestamp",
          "path",
          "total",
          "directory",
          "backup_path",
          "backup_path",
          "path_obj",
          "size"
        ],
        "method_count": 20,
        "estimated_classes": 2
      }
    },
    {
      "type": "syntax_error",
      "path": "src\\utils\\logger.py",
      "severity": "critical"
    },
    {
      "type": "class_loc",
      "path": "src\\utils\\backup.py",
      "class_name": "BackupManager",
      "current_loc": 110,
      "limit": 100,
      "excess": 10,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "BackupManagerCore - Core methods: create_backup, list_backups, restore_backup, cleanup_old_backups",
          "BackupManagerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "timestamp",
          "backup_dir",
          "backup",
          "backups",
          "deleted_count",
          "agent_dir",
          "dest_path"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\audit_cleanup.py",
      "function_name": "main",
      "current_loc": 152,
      "limit": 50,
      "excess": 102,
      "severity": "minor",
      "line_number": 167,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from main",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "file_loc",
      "path": "tools\\projectscanner.py",
      "current_loc": 816,
      "limit": 400,
      "excess": 416,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "projectscanner_core.py - Core classes: LanguageAnalyzer, BotWorker",
          "projectscanner_utils.py - Utility functions: main, __init__, _init_tree_sitter_language",
          "projectscanner_types.py - Type definitions and imports"
        ],
        "estimated_splits": 3,
        "complexity_factors": {
          "classes": 6,
          "functions": 36,
          "imports": 19
        }
      }
    },
    {
      "type": "class_loc",
      "path": "tools\\projectscanner.py",
      "class_name": "LanguageAnalyzer",
      "current_loc": 242,
      "limit": 100,
      "excess": 142,
      "severity": "major",
      "line_number": 36,
      "suggestion": {
        "suggested_methods_split": [
          "LanguageAnalyzerCore - Core methods: analyze_file, get_node_text",
          "LanguageAnalyzerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "grammar_paths",
          "grammar_path",
          "suffix",
          "tree",
          "functions",
          "classes",
          "routes",
          "complexity",
          "tree",
          "functions",
          "classes",
          "complexity",
          "tree",
          "root",
          "functions",
          "classes",
          "routes",
          "complexity",
          "lang_lib",
          "parser",
          "fn_name_node",
          "name_node",
          "docstring",
          "method_names",
          "base_classes",
          "struct_name_node",
          "name_node",
          "func_attr",
          "impl_type_node",
          "cls_name",
          "path_arg",
          "methods",
          "impl_name",
          "arg0",
          "base_parts",
          "attr_node",
          "name_node",
          "value_node",
          "callee_node",
          "args_node",
          "path_arg",
          "extracted_methods",
          "attr_node",
          "method_node",
          "callee_text",
          "parts",
          "methods",
          "path_str",
          "first_arg",
          "path_str"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "tools\\projectscanner.py",
      "class_name": "ReportGenerator",
      "current_loc": 154,
      "limit": 100,
      "excess": 54,
      "severity": "major",
      "line_number": 437,
      "suggestion": {
        "suggested_methods_split": [
          "ReportGeneratorCore - Core methods: load_existing_report, save_report, generate_init_files, load_existing_chatgpt_context, export_chatgpt_context",
          "ReportGeneratorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "report_path",
          "test_report_path",
          "existing",
          "existing_tests",
          "test_files",
          "non_test_files",
          "merged",
          "merged_tests",
          "package_modules",
          "package_path",
          "init_file",
          "lines",
          "content",
          "context_path",
          "context_path",
          "existing_context",
          "payload",
          "merged_context",
          "t",
          "context_dict",
          "rendered",
          "file_path",
          "package_dir",
          "module_name",
          "template_content"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "tools\\projectscanner.py",
      "class_name": "ProjectScanner",
      "current_loc": 177,
      "limit": 100,
      "excess": 77,
      "severity": "major",
      "line_number": 596,
      "suggestion": {
        "suggested_methods_split": [
          "ProjectScannerCore - Core methods: load_cache, save_cache, scan_project, generate_init_files, export_chatgpt_context",
          "ProjectScannerUtils - Utility methods: categorize_agents"
        ],
        "properties_to_extract": [
          "cache_path",
          "cache_path",
          "file_extensions",
          "valid_files",
          "total_files",
          "processed_count",
          "previous_files",
          "current_files",
          "moved_files",
          "missing_files",
          "num_workers",
          "manager",
          "score",
          "levels",
          "doc",
          "methods",
          "root_path",
          "old_hash",
          "file_path",
          "new_file",
          "percent"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\projectscanner.py",
      "function_name": "_analyze_python",
      "current_loc": 70,
      "limit": 50,
      "excess": 20,
      "severity": "minor",
      "line_number": 101,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _analyze_python",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\projectscanner.py",
      "function_name": "_analyze_javascript",
      "current_loc": 64,
      "limit": 50,
      "excess": 14,
      "severity": "minor",
      "line_number": 214,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _analyze_javascript",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\projectscanner.py",
      "function_name": "should_exclude",
      "current_loc": 64,
      "limit": 50,
      "excess": 14,
      "severity": "minor",
      "line_number": 350,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from should_exclude",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\projectscanner.py",
      "function_name": "export_chatgpt_context",
      "current_loc": 54,
      "limit": 50,
      "excess": 4,
      "severity": "minor",
      "line_number": 537,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from export_chatgpt_context",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\projectscanner.py",
      "function_name": "scan_project",
      "current_loc": 85,
      "limit": 50,
      "excess": 35,
      "severity": "minor",
      "line_number": 640,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from scan_project",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "file_loc",
      "path": "tools\\analysis_cli.py",
      "current_loc": 404,
      "limit": 400,
      "excess": 4,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "analysis_cli_core.py - Core classes: ",
          "analysis_cli_utils.py - Utility functions: should_exclude_file, count_lines, analyze_python_file",
          "analysis_cli_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 0,
          "functions": 7,
          "imports": 11
        }
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\analysis_cli.py",
      "function_name": "analyze_python_file",
      "current_loc": 135,
      "limit": 50,
      "excess": 85,
      "severity": "minor",
      "line_number": 79,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from analyze_python_file",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\analysis_cli.py",
      "function_name": "analyze_project",
      "current_loc": 60,
      "limit": 50,
      "excess": 10,
      "severity": "minor",
      "line_number": 216,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from analyze_project",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\analysis_cli.py",
      "function_name": "format_violations_text",
      "current_loc": 56,
      "limit": 50,
      "excess": 6,
      "severity": "minor",
      "line_number": 300,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from format_violations_text",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\auto_remediate_loc.py",
      "function_name": "generate_refactor_plan",
      "current_loc": 73,
      "limit": 50,
      "excess": 23,
      "severity": "minor",
      "line_number": 205,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from generate_refactor_plan",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\auto_remediate_loc.py",
      "function_name": "generate_text_report",
      "current_loc": 62,
      "limit": 50,
      "excess": 12,
      "severity": "minor",
      "line_number": 280,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from generate_text_report",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\codemods\\migrate_managers.py",
      "function_name": "main",
      "current_loc": 82,
      "limit": 50,
      "excess": 32,
      "severity": "minor",
      "line_number": 57,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from main",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "syntax_error",
      "path": "tools\\codemods\\replace_prints_with_logger.py",
      "severity": "critical"
    },
    {
      "type": "class_loc",
      "path": "agent_workspaces\\Agent-7\\agent7_vector_database_integration.py",
      "class_name": "Agent7VectorDatabaseIntegration",
      "current_loc": 217,
      "limit": 100,
      "excess": 117,
      "severity": "major",
      "line_number": 55,
      "suggestion": {
        "suggested_methods_split": [
          "Agent7VectorDatabaseIntegrationCore - Core methods: index_agent7_status, index_agent7_capabilities, search_agent7_context, get_integration_status",
          "Agent7VectorDatabaseIntegrationUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "status_file",
          "capabilities",
          "capabilities_doc",
          "status_doc",
          "success",
          "achievements",
          "next_actions",
          "success",
          "results",
          "agent7_results",
          "status_data",
          "achievements_doc",
          "success",
          "actions_doc",
          "success"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "agent_workspaces\\Agent-7\\agent7_vector_database_integration.py",
      "function_name": "index_agent7_status",
      "current_loc": 100,
      "limit": 50,
      "excess": 50,
      "severity": "minor",
      "line_number": 71,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from index_agent7_status",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "agent_workspaces\\Agent-7\\agent7_vector_database_integration.py",
      "function_name": "index_agent7_capabilities",
      "current_loc": 67,
      "limit": 50,
      "excess": 17,
      "severity": "minor",
      "line_number": 172,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from index_agent7_capabilities",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "scripts\\activate_vector_database_integration.py",
      "function_name": "activate_vector_database_integration",
      "current_loc": 143,
      "limit": 50,
      "excess": 93,
      "severity": "minor",
      "line_number": 22,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from activate_vector_database_integration",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "syntax_error",
      "path": "scripts\\agent_onboarding.py",
      "severity": "critical"
    },
    {
      "type": "class_loc",
      "path": "scripts\\cleanup_v2_compliance.py",
      "class_name": "V2ComplianceChecker",
      "current_loc": 228,
      "limit": 100,
      "excess": 128,
      "severity": "major",
      "line_number": 22,
      "suggestion": {
        "suggested_methods_split": [
          "V2ComplianceCheckerCore - Core methods: analyze_file_sizes, analyze_code_structure, generate_report, save_report",
          "V2ComplianceCheckerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "large_files",
          "src_dir",
          "structure_issues",
          "src_dir",
          "large_files",
          "structure_issues",
          "report",
          "compliance_score",
          "deductions",
          "compliance_score",
          "deduction",
          "deduction",
          "deduction",
          "file_info",
          "severity_icon",
          "lines",
          "line_count",
          "init_file",
          "contents",
          "has_py_files"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "scripts\\cleanup_v2_compliance.py",
      "function_name": "generate_report",
      "current_loc": 119,
      "limit": 50,
      "excess": 69,
      "severity": "minor",
      "line_number": 124,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from generate_report",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "scripts\\enforce_python_standards.py",
      "class_name": "PythonStandardEnforcer",
      "current_loc": 240,
      "limit": 100,
      "excess": 140,
      "severity": "major",
      "line_number": 39,
      "suggestion": {
        "suggested_methods_split": [
          "PythonStandardEnforcerCore - Core methods: enforce_standards",
          "PythonStandardEnforcerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "python_files",
          "python_files",
          "root",
          "lines",
          "start_line",
          "end_line",
          "loc",
          "lines",
          "line",
          "violation_counts",
          "content",
          "tree",
          "class_loc",
          "violation_type",
          "severity_icon",
          "func_loc"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "scripts\\enforce_python_standards.py",
      "function_name": "_report_results",
      "current_loc": 54,
      "limit": 50,
      "excess": 4,
      "severity": "minor",
      "line_number": 225,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _report_results",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "scripts\\fix_and_ingest_vector_database.py",
      "function_name": "fix_encoding_and_reingest",
      "current_loc": 73,
      "limit": 50,
      "excess": 23,
      "severity": "minor",
      "line_number": 18,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from fix_encoding_and_reingest",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "class_loc",
      "path": "scripts\\index_v2_refactoring.py",
      "class_name": "V2RefactoringIndexer",
      "current_loc": 349,
      "limit": 100,
      "excess": 249,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "V2RefactoringIndexerCore - Core methods: index_refactoring_work",
          "V2RefactoringIndexerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "indexed_count",
          "total_files",
          "pattern_description",
          "pattern_doc",
          "success",
          "doc_id",
          "document",
          "content",
          "progress"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "scripts\\index_v2_refactoring.py",
      "function_name": "__init__",
      "current_loc": 186,
      "limit": 50,
      "excess": 136,
      "severity": "minor",
      "line_number": 22,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from __init__",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "scripts\\index_v2_refactoring.py",
      "function_name": "_index_revolutionary_pattern",
      "current_loc": 78,
      "limit": 50,
      "excess": 28,
      "severity": "minor",
      "line_number": 290,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _index_revolutionary_pattern",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "scripts\\v2_release_summary.py",
      "function_name": "main",
      "current_loc": 88,
      "limit": 50,
      "excess": 38,
      "severity": "minor",
      "line_number": 13,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from main",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "scripts\\execution\\bulk_pyautogui_test.py",
      "function_name": "run_bulk_pyautogui_test",
      "current_loc": 108,
      "limit": 50,
      "excess": 58,
      "severity": "minor",
      "line_number": 32,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from run_bulk_pyautogui_test",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    },
    {
      "type": "function_loc",
      "path": "scripts\\utilities\\setup_discord_bot.py",
      "function_name": "setup_environment",
      "current_loc": 109,
      "limit": 50,
      "excess": 59,
      "severity": "minor",
      "line_number": 58,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from setup_environment",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ]
      }
    }
  ],
  "generated_at": "D:\\Agent_Cellphone_V2_Repository",
  "config": {
    "max_file_loc": 400,
    "max_class_loc": 100,
    "max_function_loc": 50
  }
}
