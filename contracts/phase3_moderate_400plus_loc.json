{
  "phase": "Phase 3 - Moderate Violations (400+ LOC)",
  "description": "Moderate priority refactoring contracts for files exceeding 400 lines",
  "total_files": 137,
  "estimated_effort": "1-2 days per file",
  "priority": "MODERATE",
  "standards": {
    "target_loc": "400 LOC (standard), 600 LOC (GUI)",
    "focus": "SRP compliance, modular architecture, production-ready code"
  },
  "contracts": [
    {
      "contract_id": "MODERATE-001",
      "file_path": "src/ai_ml/dev_workflow.py",
      "current_lines": 722,
      "target_lines": 400,
      "priority": "MODERATE",
      "estimated_effort": "2 days",
      "assigned_to": "UNASSIGNED",
      "status": "AVAILABLE",
      "refactoring_goals": [
        "Separate workflow management, AI processing, and coordination concerns",
        "Create focused modules for different AI workflow components",
        "Maintain comprehensive functionality while improving maintainability"
      ],
      "workflow": [
        "1. Analyze file structure and identify distinct workflow responsibilities",
        "2. Create dev_workflow_manager.py (≤200 LOC)",
        "3. Create dev_workflow_ai_processor.py (≤200 LOC)",
        "4. Create dev_workflow_coordinator.py (≤150 LOC)",
        "5. Create dev_workflow_config.py (≤100 LOC)",
        "6. Refactor main file to orchestrate modules (≤150 LOC)",
        "7. Update imports and dependencies",
        "8. Test workflow functionality to ensure it works correctly",
        "9. Delete original monolithic file",
        "10. Update V2 compliance progress tracker"
      ],
      "deliverables": [
        "dev_workflow_manager.py",
        "dev_workflow_ai_processor.py",
        "dev_workflow_coordinator.py",
        "dev_workflow_config.py",
        "dev_workflow.py (orchestrator)",
        "Updated compliance tracker"
      ]
    },
    {
      "contract_id": "MODERATE-002",
      "file_path": "tests/v2_standards_checker.py",
      "current_lines": 708,
      "target_lines": 400",
      "priority": "MODERATE",
      "estimated_effort": "2 days",
      "assigned_to": "UNASSIGNED",
      "status": "AVAILABLE",
      "refactoring_goals": [
        "Separate standards checking, validation, and reporting concerns",
        "Create focused modules for different standards checking components",
        "Maintain comprehensive functionality while improving maintainability"
      ],
      "workflow": [
        "1. Analyze file structure and identify distinct checking responsibilities",
        "2. Create v2_standards_checker_core.py (≤200 LOC)",
        "3. Create v2_standards_validator.py (≤200 LOC)",
        "4. Create v2_standards_reporter.py (≤150 LOC)",
        "5. Create v2_standards_config.py (≤100 LOC)",
        "6. Refactor main file to orchestrate modules (≤150 LOC)",
        "7. Update imports and dependencies",
        "8. Test standards checking functionality to ensure it works correctly",
        "9. Delete original monolithic file",
        "10. Update V2 compliance progress tracker"
      ],
      "deliverables": [
        "v2_standards_checker_core.py",
        "v2_standards_validator.py",
        "v2_standards_reporter.py",
        "v2_standards_config.py",
        "v2_standards_checker.py (orchestrator)",
        "Updated compliance tracker"
      ]
    },
    {
      "contract_id": "MODERATE-003",
      "file_path": "src/ai_ml/ml_robot_maker.py",
      "current_lines": 704,
      "target_lines": 400",
      "priority": "MODERATE",
      "estimated_effort": "2 days",
      "assigned_to": "UNASSIGNED",
      "status": "AVAILABLE",
      "refactoring_goals": [
        "Separate robot creation, ML processing, and configuration concerns",
        "Create focused modules for different ML robot components",
        "Maintain comprehensive functionality while improving maintainability"
      ],
      "workflow": [
        "1. Analyze file structure and identify distinct robot responsibilities",
        "2. Create ml_robot_creator.py (≤200 LOC)",
        "3. Create ml_robot_processor.py (≤200 LOC)",
        "4. Create ml_robot_config.py (≤150 LOC)",
        "5. Create ml_robot_validator.py (≤100 LOC)",
        "6. Refactor main file to orchestrate modules (≤150 LOC)",
        "7. Update imports and dependencies",
        "8. Test robot creation functionality to ensure it works correctly",
        "9. Delete original monolithic file",
        "10. Update V2 compliance progress tracker"
      ],
      "deliverables": [
        "ml_robot_creator.py",
        "ml_robot_processor.py",
        "ml_robot_config.py",
        "ml_robot_validator.py",
        "ml_robot_maker.py (orchestrator)",
        "Updated compliance tracker"
      ]
    },
    {
      "contract_id": "MODERATE-004",
      "file_path": "tests/test_performance_integration.py",
      "current_lines": 697,
      "target_lines": 400",
      "priority": "MODERATE",
      "estimated_effort": "2 days",
      "assigned_to": "UNASSIGNED",
      "status": "AVAILABLE",
      "refactoring_goals": [
        "Separate performance testing, integration testing, and validation concerns",
        "Create focused test modules for different performance integration components",
        "Maintain comprehensive test coverage while improving maintainability"
      ],
      "workflow": [
        "1. Analyze file structure and identify distinct test responsibilities",
        "2. Create test_performance_integration_setup.py (≤150 LOC)",
        "3. Create test_performance_integration_execution.py (≤150 LOC)",
        "4. Create test_performance_integration_validation.py (≤150 LOC)",
        "5. Create test_performance_integration_cleanup.py (≤100 LOC)",
        "6. Refactor main test file to orchestrate modules (≤150 LOC)",
        "7. Update imports and dependencies",
        "8. Run all tests to ensure functionality preserved",
        "9. Delete original monolithic file",
        "10. Update V2 compliance progress tracker"
      ],
      "deliverables": [
        "test_performance_integration_setup.py",
        "test_performance_integration_execution.py",
        "test_performance_integration_validation.py",
        "test_performance_integration_cleanup.py",
        "test_performance_integration.py (orchestrator)",
        "Updated compliance tracker"
      ]
    },
    {
      "contract_id": "MODERATE-005",
      "file_path": "src/web/frontend/frontend_router.py",
      "current_lines": 693,
      "target_lines": 600",
      "priority": "MODERATE",
      "estimated_effort": "2 days",
      "assigned_to": "UNASSIGNED",
      "status": "AVAILABLE",
      "refactoring_goals": [
        "Separate routing logic, middleware handling, and request processing concerns",
        "Create focused modules for different frontend routing components",
        "Maintain comprehensive functionality while improving maintainability"
      ],
      "workflow": [
        "1. Analyze file structure and identify distinct routing responsibilities",
        "2. Create frontend_router_core.py (≤200 LOC)",
        "3. Create frontend_router_middleware.py (≤200 LOC)",
        "4. Create frontend_router_handlers.py (≤150 LOC)",
        "5. Create frontend_router_config.py (≤100 LOC)",
        "6. Refactor main file to orchestrate modules (≤200 LOC)",
        "7. Update imports and dependencies",
        "8. Test routing functionality to ensure it works correctly",
        "9. Delete original monolithic file",
        "10. Update V2 compliance progress tracker"
      ],
      "deliverables": [
        "frontend_router_core.py",
        "frontend_router_middleware.py",
        "frontend_router_handlers.py",
        "frontend_router_config.py",
        "frontend_router.py (orchestrator)",
        "Updated compliance tracker"
      ]
    },
    {
      "contract_id": "MODERATE-006",
      "file_path": "src/core/persistent_data_storage.py",
      "current_lines": 686,
      "target_lines": 400",
      "priority": "MODERATE",
      "estimated_effort": "2 days",
      "assigned_to": "UNASSIGNED",
      "status": "AVAILABLE",
      "refactoring_goals": [
        "Separate storage management, data persistence, and configuration concerns",
        "Create focused modules for different storage components",
        "Maintain comprehensive functionality while improving maintainability"
      ],
      "workflow": [
        "1. Analyze file structure and identify distinct storage responsibilities",
        "2. Create persistent_storage_manager.py (≤200 LOC)",
        "3. Create persistent_storage_persistence.py (≤200 LOC)",
        "4. Create persistent_storage_config.py (≤150 LOC)",
        "5. Create persistent_storage_validator.py (≤100 LOC)",
        "6. Refactor main file to orchestrate modules (≤150 LOC)",
        "7. Update imports and dependencies",
        "8. Test storage functionality to ensure it works correctly",
        "9. Delete original monolithic file",
        "10. Update V2 compliance progress tracker"
      ],
      "deliverables": [
        "persistent_storage_manager.py",
        "persistent_storage_persistence.py",
        "persistent_storage_config.py",
        "persistent_storage_validator.py",
        "persistent_data_storage.py (orchestrator)",
        "Updated compliance tracker"
      ]
    },
    {
      "contract_id": "MODERATE-007",
      "file_path": "src/services_v2/auth/auth_integration_tester.py",
      "current_lines": 685,
      "target_lines": 400",
      "priority": "MODERATE",
      "estimated_effort": "2 days",
      "assigned_to": "UNASSIGNED",
      "status": "AVAILABLE",
      "refactoring_goals": [
        "Separate integration testing, auth validation, and reporting concerns",
        "Create focused modules for different auth integration testing components",
        "Maintain comprehensive functionality while improving maintainability"
      ],
      "workflow": [
        "1. Analyze file structure and identify distinct testing responsibilities",
        "2. Create auth_integration_tester_core.py (≤200 LOC)",
        "3. Create auth_integration_tester_validation.py (≤200 LOC)",
        "4. Create auth_integration_tester_reporting.py (≤150 LOC)",
        "5. Create auth_integration_tester_config.py (≤100 LOC)",
        "6. Refactor main file to orchestrate modules (≤150 LOC)",
        "7. Update imports and dependencies",
        "8. Test integration testing functionality to ensure it works correctly",
        "9. Delete original monolithic file",
        "10. Update V2 compliance progress tracker"
      ],
      "deliverables": [
        "auth_integration_tester_core.py",
        "auth_integration_tester_validation.py",
        "auth_integration_tester_reporting.py",
        "auth_integration_tester_config.py",
        "auth_integration_tester.py (orchestrator)",
        "Updated compliance tracker"
      ]
    },
    {
      "contract_id": "MODERATE-008",
      "file_path": "src/services/metrics_collector.py",
      "current_lines": 685,
      "target_lines": 400",
      "priority": "MODERATE",
      "estimated_effort": "2 days",
      "assigned_to": "UNASSIGNED",
      "status": "AVAILABLE",
      "refactoring_goals": [
        "Separate metrics collection, processing, and storage concerns",
        "Create focused modules for different metrics collection components",
        "Maintain comprehensive functionality while improving maintainability"
      ],
      "workflow": [
        "1. Analyze file structure and identify distinct metrics responsibilities",
        "2. Create metrics_collector_core.py (≤200 LOC)",
        "3. Create metrics_collector_processor.py (≤200 LOC)",
        "4. Create metrics_collector_storage.py (≤150 LOC)",
        "5. Create metrics_collector_config.py (≤100 LOC)",
        "6. Refactor main file to orchestrate modules (≤150 LOC)",
        "7. Update imports and dependencies",
        "8. Test metrics collection functionality to ensure it works correctly",
        "9. Delete original monolithic file",
        "10. Update V2 compliance progress tracker"
      ],
      "deliverables": [
        "metrics_collector_core.py",
        "metrics_collector_processor.py",
        "metrics_collector_storage.py",
        "metrics_collector_config.py",
        "metrics_collector.py (orchestrator)",
        "Updated compliance tracker"
      ]
    },
    {
      "contract_id": "MODERATE-009",
      "file_path": "src/core/config_manager.py",
      "current_lines": 682,
      "target_lines": 400",
      "priority": "MODERATE",
      "estimated_effort": "2 days",
      "assigned_to": "UNASSIGNED",
      "status": "AVAILABLE",
      "refactoring_goals": [
        "Separate configuration management, validation, and loading concerns",
        "Create focused modules for different configuration management components",
        "Maintain comprehensive functionality while improving maintainability"
      ],
      "workflow": [
        "1. Analyze file structure and identify distinct configuration responsibilities",
        "2. Create config_manager_core.py (≤200 LOC)",
        "3. Create config_manager_validator.py (≤200 LOC)",
        "4. Create config_manager_loader.py (≤150 LOC)",
        "5. Create config_manager_config.py (≤100 LOC)",
        "6. Refactor main file to orchestrate modules (≤150 LOC)",
        "7. Update imports and dependencies",
        "8. Test configuration management functionality to ensure it works correctly",
        "9. Delete original monolithic file",
        "10. Update V2 compliance progress tracker"
      ],
      "deliverables": [
        "config_manager_core.py",
        "config_manager_validator.py",
        "config_manager_loader.py",
        "config_manager_config.py",
        "config_manager.py (orchestrator)",
        "Updated compliance tracker"
      ]
    },
    {
      "contract_id": "MODERATE-010",
      "file_path": "src/services/performance_alerting.py",
      "current_lines": 681,
      "target_lines": 400",
      "priority": "MODERATE",
      "estimated_effort": "2 days",
      "assigned_to": "UNASSIGNED",
      "status": "AVAILABLE",
      "refactoring_goals": [
        "Separate performance monitoring, alert generation, and notification concerns",
        "Create focused modules for different performance alerting components",
        "Maintain comprehensive functionality while improving maintainability"
      ],
      "workflow": [
        "1. Analyze file structure and identify distinct alerting responsibilities",
        "2. Create performance_alerting_monitor.py (≤200 LOC)",
        "3. Create performance_alerting_generator.py (≤200 LOC)",
        "4. Create performance_alerting_notifier.py (≤150 LOC)",
        "5. Create performance_alerting_config.py (≤100 LOC)",
        "6. Refactor main file to orchestrate modules (≤150 LOC)",
        "7. Update imports and dependencies",
        "8. Test performance alerting functionality to ensure it works correctly",
        "9. Delete original monolithic file",
        "10. Update V2 compliance progress tracker"
      ],
      "deliverables": [
        "performance_alerting_monitor.py",
        "performance_alerting_generator.py",
        "performance_alerting_notifier.py",
        "performance_alerting_config.py",
        "performance_alerting.py (orchestrator)",
        "Updated compliance tracker"
      ]
    }
  ],
  "completion_criteria": [
    "All files reduced to ≤400 LOC (standard) or ≤600 LOC (GUI)",
    "SRP compliance achieved",
    "All tests pass",
    "Original monolithic files deleted",
    "Compliance tracker updated",
    "Modular architecture established"
  ],
  "success_metrics": {
    "target_compliance": "100% for Phase 3",
    "lines_reduced": "Target: 50%+ reduction",
    "modules_created": "4-5 focused modules per file",
    "maintainability": "High (≤400 LOC per module)"
  }
}
