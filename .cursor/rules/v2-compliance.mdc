---
description: V2 Compliance Standards and Guardrails
globs:
  - "src/**"
  - "**/*.py"
  - "**/*.ts"
alwaysApply: true
---

## **🎯 V2 COMPLIANCE PRINCIPLES**
### **Core Standards**:
- Follow **existing architecture** before proposing new patterns
- Maintain **single source of truth (SSOT)** across configurations
- Use object-oriented code for complex domain logic
- Keep functions small and cohesive
- Enforce **LOC limits** for files, classes, and functions

### **Modular Design**:
- Prefer **dependency injection** for shared utilities
- Avoid **circular dependencies** across modules
- Enforce **clear boundaries** between modules
- Use **repository pattern** for data access

## **🧪 TESTING REQUIREMENTS**
### **Unit Testing**:
- All new features require **unit tests**
- Use **Jest** with clear test names (describe/it)
- Mock external APIs and database calls
- Keep coverage above **85%**

### **Test Structure**:
```javascript
describe('Component Under Test', () => {
  it('should handle success case', () => {
    // Test implementation
  });

  it('should handle error case', () => {
    // Test implementation
  });
});
```

## **🏗️ ARCHITECTURE COMPLIANCE**
### **Layer Separation**:
- **Presentation Layer**: UI components and controllers
- **Business Logic Layer**: Services and use cases
- **Data Access Layer**: Repositories and data models
- **Infrastructure Layer**: External services and utilities

### **Dependency Rules**:
- Services can depend on repositories and utilities
- Controllers can depend on services
- Utilities cannot depend on services or controllers
- No circular dependencies allowed

## **📏 CODE QUALITY STANDARDS**
### **Function Size Limits**:
- Functions: **Maximum 30 lines**
- Classes: **Maximum 200 lines**
- Files: **Maximum 300 lines**
- Refactor when limits exceeded

### **Complexity Limits**:
- Cyclomatic complexity: **Maximum 10**
- Nesting depth: **Maximum 3 levels**
- Parameter count: **Maximum 5 parameters**

## **🔧 DEVELOPMENT WORKFLOW**
### **Pre-commit Checks**:
- **Linting**: Must pass without errors
- **Testing**: All tests must pass
- **Formatting**: Code must be properly formatted
- **Coverage**: Must maintain >85% coverage

### **Code Review Requirements**:
- All changes require **code review**
- PRs must pass **CI checks**
- Large features split into **smaller PRs**
- Documentation updated for **new features**

## **📊 METRICS & MONITORING**
### **Quality Metrics**:
- **Test Coverage**: >85%
- **Code Complexity**: <10 cyclomatic
- **Technical Debt**: Regularly assessed
- **Performance Benchmarks**: Established and monitored

### **Process Metrics**:
- **Cycle Time**: Feature delivery time
- **Defect Rate**: Bugs per release
- **Review Time**: PR review duration
- **Deployment Frequency**: Release cadence

## **🚀 CONTINUOUS IMPROVEMENT**
### **Regular Assessments**:
- **Code quality reviews** monthly
- **Architecture reviews** quarterly
- **Performance audits** bi-annually
- **Security assessments** annually

### **Refactoring Requirements**:
- **Technical debt** addressed in each sprint
- **Performance bottlenecks** optimized
- **Code duplication** eliminated
- **Outdated patterns** modernized
