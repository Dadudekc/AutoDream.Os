[tool:pytest]
# Test discovery and execution
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Test execution options - CONSOLIDATED: All options in single addopts section
# PARALLEL TESTING OPTIMIZATION: Added pytest-xdist support for parallel execution
addopts =
    -v                          # Verbose output
    --strict-markers            # Strict marker validation
    --disable-warnings          # Suppress warnings
    --tb=short                 # Short traceback format
    --durations=10             # Show 10 slowest tests
    --maxfail=5                # Stop after 5 failures
    --timeout=300              # Default timeout 5 minutes
    --cov=src                  # Measure coverage of src directory
    --cov=tests                # Measure coverage of tests directory
    --cov-report=term-missing  # Show missing lines in terminal
    --cov-report=html          # Generate HTML coverage report
    --cov-report=xml           # Generate XML coverage report
    --cov-report=json          # Generate JSON coverage report
    --cov-fail-under=80        # Fail if coverage below 80%
    --cov-config=.coveragerc   # Use custom coverage config
    
    # PARALLEL TESTING OPTIMIZATION - NEW: pytest-xdist parallel execution
    -n auto                    # Auto-detect CPU cores for parallel execution
    --dist=loadscope          # Distribute tests by scope for better parallelization
    --max-worker-restart=3     # Restart workers up to 3 times on failure
    --worker-restart-delay=1   # 1 second delay between worker restarts
    
    # PERFORMANCE OPTIMIZATION - NEW: Enhanced test execution efficiency
    --cache-clear              # Clear cache before each run for fresh results
    --reuse-db                 # Reuse database connections for faster setup
    --create-db                # Create database if it doesn't exist
    
    # TEST DISCOVERY OPTIMIZATION - NEW: Faster test collection
    --import-mode=importlib    # Use importlib for faster test discovery
    --ignore=setup.py          # Ignore setup.py during test discovery
    --ignore=conftest.py       # Ignore conftest.py during test discovery

# PARALLEL TESTING CONFIGURATION - NEW: Optimized parallel execution settings
[tool:pytest.ini_options]
# Worker process configuration
addopts = 
    -n auto                    # Auto-detect optimal number of workers
    --dist=loadscope          # Load-balanced test distribution
    --max-worker-restart=3     # Maximum worker restarts
    --worker-restart-delay=1   # Delay between restarts

# Performance optimization settings
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Parallel execution markers
markers =
    # PARALLEL TESTING MARKERS - NEW: Markers for parallel execution optimization
    parallel_safe: marks tests as safe for parallel execution
    parallel_unsafe: marks tests that must run sequentially
    worker_safe: marks tests that can run in worker processes
    worker_unsafe: marks tests that must run in main process
    
    # Test types
    unit: marks tests as unit tests
    integration: marks tests as integration tests
    smoke: marks tests as smoke tests
    performance: marks tests as performance tests
    security: marks tests as security tests
    api: marks tests as API tests

    # Test characteristics
    slow: marks tests as slow (deselect with '-m "not slow"')
    fast: marks tests as fast
    critical: marks tests as critical (must pass)
    optional: marks tests as optional

    # Component categories
    core: marks tests for core components
    services: marks tests for service components
    launchers: marks tests for launcher components
    utils: marks tests for utility components
    web: marks tests for web interface components
    behavior: marks tests for behavior trees
    decision: marks tests for decision engines
    coordination: marks tests for multi-agent coordination
    learning: marks tests for learning components

    # Special markers
    v2_standards: marks tests for V2 coding standards compliance
    cli: marks tests for CLI interface validation
    oop: marks tests for OOP design validation

    # Quality Assurance markers - ADDED: New markers for quality testing
    quality: marks tests for quality assurance validation
    compliance: marks tests for compliance checking
    standards: marks tests for coding standards validation
    srp: marks tests for Single Responsibility Principle validation
    oop_design: marks tests for object-oriented design validation

    # Security and Network markers - ADDED: Missing markers causing warnings
    network: marks tests for network functionality
    threat: marks tests for threat detection
    vulnerability: marks tests for vulnerability assessment
    access_control: marks tests for access control validation
    compliance_audit: marks tests for compliance and audit

    # Service and Health markers - ADDED: Missing markers causing warnings
    service: marks tests for service components
    health: marks tests for health monitoring
    launcher: marks tests for launcher components
    utility: marks tests for utility components

# PARALLEL TESTING PERFORMANCE SETTINGS - NEW: Optimized for speed
[tool:pytest.ini_options.parallel]
# Worker process optimization
max_workers = "auto"           # Auto-detect optimal worker count
worker_timeout = 300           # 5 minute worker timeout
worker_restart_delay = 1       # 1 second restart delay
max_worker_restart = 3         # Maximum 3 worker restarts

# Test distribution strategy
dist = "loadscope"            # Load-balanced scope distribution
load_scope_threshold = 3      # Minimum tests per worker

# Performance monitoring
durations = 10                # Show 10 slowest tests
durations_min = 0.1           # Minimum duration to report (100ms)

# Filter warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning
    ignore::FutureWarning

# Test collection
collect_ignore =
    .git
    __pycache__
    .pytest_cache
    venv*
    node_modules
    dist
    build

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Test timeout configuration
timeout = 300
timeout_method = thread

# Quality Assurance Configuration - ADDED: New quality-focused settings
# Minimum test coverage threshold
minversion = 7.0.0
