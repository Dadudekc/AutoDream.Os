#!/usr/bin/env python3
"""
Source Directory Report Generator
Extracted from analyze_src_directories.py for V2 compliance.
"""

import json
from pathlib import Path
from typing import Dict, Any, List


def generate_summary_report(analysis_results: Dict[str, Any], directory_structures: Dict[str, Any], 
                            directories_to_analyze: List[str]) -> str:
    """Generate detailed summary report."""
    summary_report = f"""# 📊 **SRC DIRECTORIES COMPREHENSIVE ANALYSIS REPORT**

**Generated by:** Agent-2 (Architecture & Design Specialist)  
**Analysis Date:** {Path().cwd()}  
**Analysis Type:** Comprehensive Source Directory Analysis  
**Directories Analyzed:** {', '.join(directories_to_analyze)}

---

## 📈 **ANALYSIS SUMMARY**

### **Files Analyzed:**
- **Total Files:** {analysis_results["summary"]["total_files"]}
- **Total Lines:** {analysis_results["summary"]["total_lines"]:,}
- **Total Functions:** {analysis_results["summary"]["total_functions"]}
- **Total Classes:** {analysis_results["summary"]["total_classes"]}
- **Total Imports:** {analysis_results["summary"]["total_imports"]}

### **File Type Distribution:**
"""
    
    for file_type, count in analysis_results["summary"]["file_types"].items():
        percentage = (count / analysis_results["summary"]["total_files"]) * 100
        summary_report += f"- **{file_type}:** {count} files ({percentage:.1f}%)\n"
    
    summary_report += """
### **Average Complexity by File Type:**
"""
    
    for file_type, avg_complexity in analysis_results["summary"]["avg_complexity_by_type"].items():
        summary_report += f"- **{file_type}:** {avg_complexity:.2f}\n"
    
    summary_report += """
---

## 🏗️ **DIRECTORY STRUCTURE ANALYSIS**

### **Directory Breakdown:**
"""
    
    for directory, structure in directory_structures.items():
        summary_report += f"""
#### **{directory}/**
- **Total Files:** {structure["total_files"]}
- **Total Directories:** {structure["total_dirs"]}
- **File Distribution:** {dict(structure["structure"]['.']["files"]) if '.' in structure["structure"] else 'N/A'}
"""
    
    total_files = analysis_results["summary"]["total_files"]
    summary_report += f"""
---

## 🔧 **TECHNICAL METRICS**

### **Code Quality Indicators:**
- **Average Lines per File:** {analysis_results["summary"]["total_lines"] / max(total_files, 1):.1f}
- **Average Functions per File:** {analysis_results["summary"]["total_functions"] / max(total_files, 1):.1f}
- **Average Classes per File:** {analysis_results["summary"]["total_classes"] / max(total_files, 1):.1f}
- **Average Imports per File:** {analysis_results["summary"]["total_imports"] / max(total_files, 1):.1f}

### **Complexity Analysis:**
- **Most Complex File Type:** {max(analysis_results["summary"]["avg_complexity_by_type"].items(), key=lambda x: x[1])[0] if analysis_results["summary"]["avg_complexity_by_type"] else 'N/A'}
- **Least Complex File Type:** {min(analysis_results["summary"]["avg_complexity_by_type"].items(), key=lambda x: x[1])[0] if analysis_results["summary"]["avg_complexity_by_type"] else 'N/A'}

---

## 📁 **GENERATED FILES**

### **Analysis Artifacts:**
- **`src_directories_project_analysis.json`:** Detailed technical analysis
- **`src_directories_chatgpt_context.json`:** ChatGPT-ready context
- **`SRC_DIRECTORIES_ANALYSIS_SUMMARY.md`:** This summary report

---

## 🎯 **CONSOLIDATION INSIGHTS**

This analysis provides the foundation for our **Option 2 (Balanced Consolidation)** strategy, identifying:
1. **File Distribution Patterns:** Understanding code organization
2. **Complexity Hotspots:** Areas requiring attention
3. **Import Dependencies:** Module relationship mapping
4. **Consolidation Opportunities:** Files that can be merged

---

**🐝 WE ARE SWARM - Comprehensive source directory analysis complete!**
"""
    
    return summary_report


def save_analysis_results(analysis_results: Dict[str, Any], directory_structures: Dict[str, Any],
                          directories_to_analyze: List[str]) -> None:
    """Save all analysis results to files."""
    import os
    
    # Generate project analysis
    project_analysis = {
        "analysis_timestamp": str(Path().cwd()),
        "directories_analyzed": directories_to_analyze,
        "directory_structures": directory_structures,
        "file_analysis": analysis_results["directories"],
        "summary": analysis_results["summary"],
        "imports_analysis": analysis_results["imports_analysis"]
    }
    
    # Save project analysis
    with open('src_directories_project_analysis.json', 'w', encoding='utf-8') as f:
        json.dump(project_analysis, f, indent=2)
    
    # Generate ChatGPT context
    chatgpt_context = {
        "project_root": os.getcwd(),
        "analysis_type": "src_directories_comprehensive",
        "directories_analyzed": directories_to_analyze,
        "num_files_analyzed": analysis_results["summary"]["total_files"],
        "analysis_details": analysis_results["directories"],
        "summary": analysis_results["summary"],
        "directory_structures": directory_structures,
        "imports_analysis": analysis_results["imports_analysis"]
    }
    
    # Save ChatGPT context
    with open('src_directories_chatgpt_context.json', 'w', encoding='utf-8') as f:
        json.dump(chatgpt_context, f, indent=2)
    
    # Generate and save summary report
    summary_report = generate_summary_report(analysis_results, directory_structures, directories_to_analyze)
    with open('SRC_DIRECTORIES_ANALYSIS_SUMMARY.md', 'w', encoding='utf-8') as f:
        f.write(summary_report)


def print_analysis_summary(analysis_results: Dict[str, Any]) -> None:
    """Print analysis summary to console."""
    print(f"\n✅ Analysis complete!")
    print(f"📊 Files analyzed: {analysis_results['summary']['total_files']}")
    print(f"📝 Total lines: {analysis_results['summary']['total_lines']:,}")
    print(f"🔧 Total functions: {analysis_results['summary']['total_functions']}")
    print(f"🏗️ Total classes: {analysis_results['summary']['total_classes']}")
    print(f"📦 Total imports: {analysis_results['summary']['total_imports']}")
    print(f"📁 Generated files:")
    print(f"   - src_directories_project_analysis.json")
    print(f"   - src_directories_chatgpt_context.json")
    print(f"   - SRC_DIRECTORIES_ANALYSIS_SUMMARY.md")

