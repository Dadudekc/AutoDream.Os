"""
Agent-specific instruction generator for the integrated onboarding coordination system.

This module provides agent-specific instructions and prompts based on agent roles,
states, and contract status.
"""

from typing import Optional
from datetime import datetime
from ..fsm.agent_state import AgentState
from ..contracts.agent_contract import AgentContract


class AgentInstructions:
    """Generates agent-specific instructions based on role, state, and contracts."""
    
    def __init__(self):
        self.agent_roles = {
            "Agent-1": "Integration & Core Systems Specialist",
            "Agent-2": "Architecture & Design Specialist", 
            "Agent-3": "Testing & Quality Assurance Specialist",
            "Agent-4": "Captain & Project Quality Manager",
            "Agent-5": "Business Intelligence Specialist",
            "Agent-6": "Coordination & Communication Specialist",
            "Agent-7": "Web Development Specialist",
            "Agent-8": "Operations & Support Specialist"
        }
    
    def get_agent_specific_instructions(self, agent_id: str, state: AgentState, 
                                      contract: Optional[AgentContract], 
                                      is_onboarded: bool) -> str:
        """Get agent-specific instructions based on role, state, and contract."""
        if agent_id == "Agent-1":
            return self._get_agent1_instructions(state, contract, is_onboarded)
        elif agent_id == "Agent-2":
            return self._get_agent2_instructions(state, contract, is_onboarded)
        elif agent_id == "Agent-3":
            return self._get_agent3_instructions(state, contract, is_onboarded)
        elif agent_id == "Agent-4":
            return self._get_agent4_instructions(state, contract, is_onboarded)
        elif agent_id == "Agent-5":
            return self._get_agent5_instructions(state, contract, is_onboarded)
        elif agent_id == "Agent-6":
            return self._get_agent6_instructions(state, contract, is_onboarded)
        elif agent_id == "Agent-7":
            return self._get_agent7_instructions(state, contract, is_onboarded)
        elif agent_id == "Agent-8":
            return self._get_agent8_instructions(state, contract, is_onboarded)
        else:
            return self._get_generic_instructions(agent_id, state, contract, is_onboarded)
    
    def _get_agent1_instructions(self, state: AgentState, contract: Optional[AgentContract], 
                                is_onboarded: bool) -> str:
        """Agent-1 specific instructions."""
        if not is_onboarded:
            return """ðŸŽ¯ INTEGRATION SPECIALIST - ONBOARDING REQUIRED:
â€¢ Complete onboarding process first
â€¢ Initialize integration and core systems workspace
â€¢ Review core system integration modules
â€¢ Establish communication with Captain Agent-4

ðŸ“‹ ONBOARDING ACTIONS:
1. Initialize workspace: agent_workspaces/Agent-1/
2. Update status file with role information
3. Message Captain: "Onboarding: Agent-1 ready for assignment"
4. Complete SSOT compliance training
"""
        else:
            return """ðŸŽ¯ INTEGRATION SPECIALIST - GENERAL:
â€¢ Focus on core system integration and API coordination
â€¢ Review integration modules, API endpoints, and core services
â€¢ Optimize system integration and data flow coordination
â€¢ Coordinate with Agent-2 on architectural patterns
"""
    
    def _get_agent2_instructions(self, state: AgentState, contract: Optional[AgentContract], 
                                is_onboarded: bool) -> str:
        """Agent-2 specific instructions."""
        if not is_onboarded:
            return """ðŸŽ¯ ARCHITECTURE SPECIALIST - ONBOARDING REQUIRED:
â€¢ Complete onboarding process first
â€¢ Initialize architectural design workspace
â€¢ Review large files requiring modularization
â€¢ Establish communication with Captain Agent-4

ðŸ“‹ ONBOARDING ACTIONS:
1. Initialize workspace: agent_workspaces/Agent-2/
2. Update status file with role information
3. Message Captain: "Onboarding: Agent-2 ready for assignment"
4. Complete SSOT compliance training
"""
        else:
            return """ðŸŽ¯ ARCHITECTURE SPECIALIST - GENERAL:
â€¢ Focus on architectural design and code structure
â€¢ Review large files, design patterns, and modularization opportunities
â€¢ Optimize code architecture and design patterns
â€¢ Coordinate with Agent-1 on integration architecture
"""
    
    def _get_agent3_instructions(self, state: AgentState, contract: Optional[AgentContract], 
                                is_onboarded: bool) -> str:
        """Agent-3 specific instructions."""
        if not is_onboarded:
            return """ðŸŽ¯ TESTING SPECIALIST - ONBOARDING REQUIRED:
â€¢ Complete onboarding process first
â€¢ Initialize testing and quality assurance workspace
â€¢ Review testing frameworks and quality metrics
â€¢ Establish communication with Captain Agent-4

ðŸ“‹ ONBOARDING ACTIONS:
1. Initialize workspace: agent_workspaces/Agent-3/
2. Update status file with role information
3. Message Captain: "Onboarding: Agent-3 ready for assignment"
4. Complete SSOT compliance training
"""
        else:
            return """ðŸŽ¯ TESTING SPECIALIST - GENERAL:
â€¢ Focus on testing, quality assurance, and code coverage
â€¢ Review testing frameworks, quality metrics, and validation systems
â€¢ Optimize testing coverage and quality assurance processes
â€¢ Coordinate with all agents on quality standards
"""
    
    def _get_agent4_instructions(self, state: AgentState, contract: Optional[AgentContract], 
                                is_onboarded: bool) -> str:
        """Agent-4 specific instructions."""
        if not is_onboarded:
            return """ðŸŽ¯ CAPTAIN - ONBOARDING REQUIRED:
â€¢ Complete onboarding process first
â€¢ Initialize Captain coordination workspace
â€¢ Review agent status monitoring systems
â€¢ Establish quality oversight across all agents

ðŸ“‹ ONBOARDING ACTIONS:
1. Initialize workspace: agent_workspaces/Agent-4/
2. Update status file with Captain role information
3. Review agent status monitoring systems
4. Complete SSOT compliance training
"""
        elif state == AgentState.IDLE:
            return """ðŸŽ¯ CAPTAIN - IDLE STATE:
â€¢ Monitor overall project quality and progress
â€¢ Review contract proposals from other agents
â€¢ Assign tasks and track completion
â€¢ Make strategic decisions about project direction

ðŸ“‹ IMMEDIATE ACTIONS:
1. Review agent contract proposals
2. Monitor V2 compliance across all agents
3. Assign new tasks based on project priorities
4. Coordinate strategic project decisions
"""
        else:
            return """ðŸŽ¯ CAPTAIN - GENERAL:
â€¢ CAPTAIN: Coordinate overall project quality and progress
â€¢ Monitor V2 compliance across all agents
â€¢ Assign tasks and track completion
â€¢ Make strategic decisions about project direction
"""
    
    def _get_agent5_instructions(self, state: AgentState, contract: Optional[AgentContract], 
                                is_onboarded: bool) -> str:
        """Agent-5 specific instructions."""
        if not is_onboarded:
            return """ðŸŽ¯ BUSINESS INTELLIGENCE SPECIALIST - ONBOARDING REQUIRED:
â€¢ Complete onboarding process first
â€¢ Initialize business intelligence workspace
â€¢ Review analytics and reporting modules
â€¢ Establish communication with Captain Agent-4

ðŸ“‹ ONBOARDING ACTIONS:
1. Initialize workspace: agent_workspaces/Agent-5/
2. Update status file with role information
3. Message Captain: "Onboarding: Agent-5 ready for assignment"
4. Complete SSOT compliance training
"""
        else:
            return """ðŸŽ¯ BUSINESS INTELLIGENCE SPECIALIST - GENERAL:
â€¢ Focus on business intelligence and data analysis
â€¢ Review analytics, reporting, and data processing modules
â€¢ Optimize data flows and business logic
â€¢ Coordinate with Agent-6 on communication strategies
"""
    
    def _get_agent6_instructions(self, state: AgentState, contract: Optional[AgentContract], 
                                is_onboarded: bool) -> str:
        """Agent-6 specific instructions."""
        if not is_onboarded:
            return """ðŸŽ¯ COORDINATION SPECIALIST - ONBOARDING REQUIRED:
â€¢ Complete onboarding process first
â€¢ Initialize coordination and communication workspace
â€¢ Review messaging protocols and workflows
â€¢ Establish communication with Captain Agent-4

ðŸ“‹ ONBOARDING ACTIONS:
1. Initialize workspace: agent_workspaces/Agent-6/
2. Update status file with role information
3. Message Captain: "Onboarding: Agent-6 ready for assignment"
4. Complete SSOT compliance training
"""
        else:
            return """ðŸŽ¯ COORDINATION SPECIALIST - GENERAL:
â€¢ Lead coordination and communication protocols
â€¢ Manage agent messaging and workflow coordination
â€¢ Review communication systems and protocols
â€¢ Facilitate inter-agent coordination and task distribution
"""
    
    def _get_agent7_instructions(self, state: AgentState, contract: Optional[AgentContract], 
                                is_onboarded: bool) -> str:
        """Agent-7 specific instructions."""
        if not is_onboarded:
            return """ðŸŽ¯ WEB DEVELOPMENT SPECIALIST - ONBOARDING REQUIRED:
â€¢ Complete onboarding process first
â€¢ Initialize web development workspace
â€¢ Review UI components and frontend architecture
â€¢ Establish communication with Captain Agent-4

ðŸ“‹ ONBOARDING ACTIONS:
1. Initialize workspace: agent_workspaces/Agent-7/
2. Update status file with role information
3. Message Captain: "Onboarding: Agent-7 ready for assignment"
4. Complete SSOT compliance training
"""
        else:
            return """ðŸŽ¯ WEB DEVELOPMENT SPECIALIST - GENERAL:
â€¢ Focus on web development and frontend systems
â€¢ Review UI components, web services, and frontend architecture
â€¢ Optimize web performance and user experience
â€¢ Coordinate with Agent-8 on deployment and operations
"""
    
    def _get_agent8_instructions(self, state: AgentState, contract: Optional[AgentContract], 
                                is_onboarded: bool) -> str:
        """Agent-8 specific instructions."""
        if not is_onboarded:
            return """ðŸŽ¯ OPERATIONS SPECIALIST - ONBOARDING REQUIRED:
â€¢ Complete onboarding process first
â€¢ Initialize operations and support workspace
â€¢ Review coordination tools and operational scripts
â€¢ Establish communication with Captain Agent-4

ðŸ“‹ ONBOARDING ACTIONS:
1. Initialize workspace: agent_workspaces/Agent-8/
2. Update status file with role information
3. Message Captain: "Onboarding: Agent-8 ready for assignment"
4. Complete SSOT compliance training
"""
        else:
            return """ðŸŽ¯ OPERATIONS SPECIALIST - GENERAL:
â€¢ Focus on operations, support, and tool development
â€¢ Develop and maintain coordination tools
â€¢ Review operational scripts and support systems
â€¢ Coordinate with all agents on tool usage and workflows
"""
    
    def _get_generic_instructions(self, agent_id: str, state: AgentState, 
                                 contract: Optional[AgentContract], is_onboarded: bool) -> str:
        """Generic instructions for unknown agents."""
        role = self.agent_roles.get(agent_id, "Swarm Agent")
        
        if not is_onboarded:
            return f"""ðŸŽ¯ {role.upper()} - ONBOARDING REQUIRED:
â€¢ Complete onboarding process first
â€¢ Initialize workspace and status tracking
â€¢ Establish communication with Captain Agent-4

ðŸ“‹ ONBOARDING ACTIONS:
1. Initialize workspace: agent_workspaces/{agent_id}/
2. Update status file with role information
3. Message Captain: "Onboarding: {agent_id} ready for assignment"
4. Complete SSOT compliance training
"""
        else:
            return f"""ðŸŽ¯ {role.upper()} - GENERAL:
â€¢ Focus on your specialized role and responsibilities
â€¢ Coordinate with other agents as needed
â€¢ Maintain V2 compliance standards
â€¢ Report progress to Captain Agent-4
"""