{
  "phase": "Phase 3 - Moderate Violations (400+ LOC) - Batch 2",
  "description": "Second batch of moderate priority refactoring contracts for files exceeding 400 lines",
  "total_files": 10,
  "estimated_effort": "1-2 days per file",
  "priority": "MODERATE",
  "standards": {
    "target_loc": "400 LOC (standard), 600 LOC (GUI)",
    "focus": "SRP compliance, modular architecture, production-ready code"
  },
  "contracts": [
    {
      "contract_id": "MODERATE-011",
      "file_path": "src/core/health/monitoring/core.py",
      "current_lines": 681,
      "target_lines": 400",
      "priority": "MODERATE",
      "estimated_effort": "2 days",
      "assigned_to": "UNASSIGNED",
      "status": "AVAILABLE",
      "refactoring_goals": [
        "Separate health monitoring, metrics collection, and alerting concerns",
        "Create focused modules for different health monitoring components",
        "Maintain comprehensive functionality while improving maintainability"
      ],
      "workflow": [
        "1. Analyze file structure and identify distinct monitoring responsibilities",
        "2. Create health_monitoring_core.py (≤200 LOC)",
        "3. Create health_monitoring_metrics.py (≤200 LOC)",
        "4. Create health_monitoring_alerts.py (≤150 LOC)",
        "5. Create health_monitoring_config.py (≤100 LOC)",
        "6. Refactor main file to orchestrate modules (≤150 LOC)",
        "7. Update imports and dependencies",
        "8. Test monitoring functionality to ensure it works correctly",
        "9. Delete original monolithic file",
        "10. Update V2 compliance progress tracker"
      ],
      "deliverables": [
        "health_monitoring_core.py",
        "health_monitoring_metrics.py",
        "health_monitoring_alerts.py",
        "health_monitoring_config.py",
        "core.py (orchestrator)",
        "Updated compliance tracker"
      ]
    },
    {
      "contract_id": "MODERATE-012",
      "file_path": "scripts/launchers/launch_performance_monitoring.py",
      "current_lines": 681,
      "target_lines": 400",
      "priority": "MODERATE",
      "estimated_effort": "2 days",
      "assigned_to": "UNASSIGNED",
      "status": "AVAILABLE",
      "refactoring_goals": [
        "Separate launch logic, configuration, and monitoring setup concerns",
        "Create focused modules for different launch components",
        "Maintain comprehensive functionality while improving maintainability"
      ],
      "workflow": [
        "1. Analyze file structure and identify distinct launch responsibilities",
        "2. Create launch_performance_core.py (≤200 LOC)",
        "3. Create launch_performance_config.py (≤200 LOC)",
        "4. Create launch_performance_setup.py (≤150 LOC)",
        "5. Create launch_performance_validator.py (≤100 LOC)",
        "6. Refactor main file to orchestrate modules (≤150 LOC)",
        "7. Update imports and dependencies",
        "8. Test launch functionality to ensure it works correctly",
        "9. Delete original monolithic file",
        "10. Update V2 compliance progress tracker"
      ],
      "deliverables": [
        "launch_performance_core.py",
        "launch_performance_config.py",
        "launch_performance_setup.py",
        "launch_performance_validator.py",
        "launch_performance_monitoring.py (orchestrator)",
        "Updated compliance tracker"
      ]
    },
    {
      "contract_id": "MODERATE-013",
      "file_path": "src/core/health/monitoring_new/core.py",
      "current_lines": 680,
      "target_lines": 400",
      "priority": "MODERATE",
      "estimated_effort": "2 days",
      "assigned_to": "UNASSIGNED",
      "status": "AVAILABLE",
      "refactoring_goals": [
        "Separate new health monitoring, data collection, and analysis concerns",
        "Create focused modules for different new health monitoring components",
        "Maintain comprehensive functionality while improving maintainability"
      ],
      "workflow": [
        "1. Analyze file structure and identify distinct monitoring responsibilities",
        "2. Create health_monitoring_new_core.py (≤200 LOC)",
        "3. Create health_monitoring_new_collector.py (≤200 LOC)",
        "4. Create health_monitoring_new_analyzer.py (≤150 LOC)",
        "5. Create health_monitoring_new_config.py (≤100 LOC)",
        "6. Refactor main file to orchestrate modules (≤150 LOC)",
        "7. Update imports and dependencies",
        "8. Test monitoring functionality to ensure it works correctly",
        "9. Delete original monolithic file",
        "10. Update V2 compliance progress tracker"
      ],
      "deliverables": [
        "health_monitoring_new_core.py",
        "health_monitoring_new_collector.py",
        "health_monitoring_new_analyzer.py",
        "health_monitoring_new_config.py",
        "core.py (orchestrator)",
        "Updated compliance tracker"
      ]
    },
    {
      "contract_id": "MODERATE-014",
      "file_path": "tests/test_fsm_cursor_integration.py",
      "current_lines": 677,
      "target_lines": 400",
      "priority": "MODERATE",
      "estimated_effort": "2 days",
      "assigned_to": "UNASSIGNED",
      "status": "AVAILABLE",
      "refactoring_goals": [
        "Separate FSM testing, cursor integration testing, and validation concerns",
        "Create focused test modules for different FSM cursor integration components",
        "Maintain comprehensive test coverage while improving maintainability"
      ],
      "workflow": [
        "1. Analyze file structure and identify distinct test responsibilities",
        "2. Create test_fsm_cursor_setup.py (≤150 LOC)",
        "3. Create test_fsm_cursor_execution.py (≤150 LOC)",
        "4. Create test_fsm_cursor_validation.py (≤150 LOC)",
        "5. Create test_fsm_cursor_cleanup.py (≤100 LOC)",
        "6. Refactor main test file to orchestrate modules (≤150 LOC)",
        "7. Update imports and dependencies",
        "8. Run all tests to ensure functionality preserved",
        "9. Delete original monolithic file",
        "10. Update V2 compliance progress tracker"
      ],
      "deliverables": [
        "test_fsm_cursor_setup.py",
        "test_fsm_cursor_execution.py",
        "test_fsm_cursor_validation.py",
        "test_fsm_cursor_cleanup.py",
        "test_fsm_cursor_integration.py (orchestrator)",
        "Updated compliance tracker"
      ]
    },
    {
      "contract_id": "MODERATE-015",
      "file_path": "src/core/task_management/task_scheduler.py",
      "current_lines": 672,
      "target_lines": 400",
      "priority": "MODERATE",
      "estimated_effort": "2 days",
      "assigned_to": "UNASSIGNED",
      "status": "AVAILABLE",
      "refactoring_goals": [
        "Separate task scheduling, management, and coordination concerns",
        "Create focused modules for different task management components",
        "Maintain comprehensive functionality while improving maintainability"
      ],
      "workflow": [
        "1. Analyze file structure and identify distinct scheduling responsibilities",
        "2. Create task_scheduler_core.py (≤200 LOC)",
        "3. Create task_scheduler_manager.py (≤200 LOC)",
        "4. Create task_scheduler_coordinator.py (≤150 LOC)",
        "5. Create task_scheduler_config.py (≤100 LOC)",
        "6. Refactor main file to orchestrate modules (≤150 LOC)",
        "7. Update imports and dependencies",
        "8. Test scheduling functionality to ensure it works correctly",
        "9. Delete original monolithic file",
        "10. Update V2 compliance progress tracker"
      ],
      "deliverables": [
        "task_scheduler_core.py",
        "task_scheduler_manager.py",
        "task_scheduler_coordinator.py",
        "task_scheduler_config.py",
        "task_scheduler.py (orchestrator)",
        "Updated compliance tracker"
      ]
    },
    {
      "contract_id": "MODERATE-016",
      "file_path": "src/core/v2_onboarding_sequence.py",
      "current_lines": 661,
      "target_lines": 400",
      "priority": "MODERATE",
      "estimated_effort": "2 days",
      "assigned_to": "UNASSIGNED",
      "status": "AVAILABLE",
      "refactoring_goals": [
        "Separate onboarding sequence, validation, and coordination concerns",
        "Create focused modules for different onboarding sequence components",
        "Maintain comprehensive functionality while improving maintainability"
      ],
      "workflow": [
        "1. Analyze file structure and identify distinct onboarding responsibilities",
        "2. Create v2_onboarding_sequence_core.py (≤200 LOC)",
        "3. Create v2_onboarding_sequence_validator.py (≤200 LOC)",
        "4. Create v2_onboarding_sequence_coordinator.py (≤150 LOC)",
        "5. Create v2_onboarding_sequence_config.py (≤100 LOC)",
        "6. Refactor main file to orchestrate modules (≤150 LOC)",
        "7. Update imports and dependencies",
        "8. Test onboarding functionality to ensure it works correctly",
        "9. Delete original monolithic file",
        "10. Update V2 compliance progress tracker"
      ],
      "deliverables": [
        "v2_onboarding_sequence_core.py",
        "v2_onboarding_sequence_validator.py",
        "v2_onboarding_sequence_coordinator.py",
        "v2_onboarding_sequence_config.py",
        "v2_onboarding_sequence.py (orchestrator)",
        "Updated compliance tracker"
      ]
    },
    {
      "contract_id": "MODERATE-017",
      "file_path": "src/core/status_manager.py",
      "current_lines": 656,
      "target_lines": 400",
      "priority": "MODERATE",
      "estimated_effort": "2 days",
      "assigned_to": "UNASSIGNED",
      "status": "AVAILABLE",
      "refactoring_goals": [
        "Separate status management, tracking, and reporting concerns",
        "Create focused modules for different status management components",
        "Maintain comprehensive functionality while improving maintainability"
      ],
      "workflow": [
        "1. Analyze file structure and identify distinct status responsibilities",
        "2. Create status_manager_core.py (≤200 LOC)",
        "3. Create status_manager_tracker.py (≤200 LOC)",
        "4. Create status_manager_reporter.py (≤150 LOC)",
        "5. Create status_manager_config.py (≤100 LOC)",
        "6. Refactor main file to orchestrate modules (≤150 LOC)",
        "7. Update imports and dependencies",
        "8. Test status management functionality to ensure it works correctly",
        "9. Delete original monolithic file",
        "10. Update V2 compliance progress tracker"
      ],
      "deliverables": [
        "status_manager_core.py",
        "status_manager_tracker.py",
        "status_manager_reporter.py",
        "status_manager_config.py",
        "status_manager.py (orchestrator)",
        "Updated compliance tracker"
      ]
    },
    {
      "contract_id": "MODERATE-018",
      "file_path": "src/web/automation/automation_orchestrator.py",
      "current_lines": 652,
      "target_lines": 400",
      "priority": "MODERATE",
      "estimated_effort": "2 days",
      "assigned_to": "UNASSIGNED",
      "status": "AVAILABLE",
      "refactoring_goals": [
        "Separate automation orchestration, execution, and monitoring concerns",
        "Create focused modules for different automation orchestration components",
        "Maintain comprehensive functionality while improving maintainability"
      ],
      "workflow": [
        "1. Analyze file structure and identify distinct automation responsibilities",
        "2. Create automation_orchestrator_core.py (≤200 LOC)",
        "3. Create automation_orchestrator_executor.py (≤200 LOC)",
        "4. Create automation_orchestrator_monitor.py (≤150 LOC)",
        "5. Create automation_orchestrator_config.py (≤100 LOC)",
        "6. Refactor main file to orchestrate modules (≤150 LOC)",
        "7. Update imports and dependencies",
        "8. Test automation functionality to ensure it works correctly",
        "9. Delete original monolithic file",
        "10. Update V2 compliance progress tracker"
      ],
      "deliverables": [
        "automation_orchestrator_core.py",
        "automation_orchestrator_executor.py",
        "automation_orchestrator_monitor.py",
        "automation_orchestrator_config.py",
        "automation_orchestrator.py (orchestrator)",
        "Updated compliance tracker"
      ]
    },
    {
      "contract_id": "MODERATE-019",
      "file_path": "gaming_systems/ai_agent_framework.py",
      "current_lines": 652,
      "target_lines": 400",
      "priority": "MODERATE",
      "estimated_effort": "2 days",
      "assigned_to": "UNASSIGNED",
      "status": "AVAILABLE",
      "refactoring_goals": [
        "Separate AI agent framework, gaming logic, and coordination concerns",
        "Create focused modules for different AI agent framework components",
        "Maintain comprehensive functionality while improving maintainability"
      ],
      "workflow": [
        "1. Analyze file structure and identify distinct framework responsibilities",
        "2. Create ai_agent_framework_core.py (≤200 LOC)",
        "3. Create ai_agent_framework_gaming.py (≤200 LOC)",
        "4. Create ai_agent_framework_coordinator.py (≤150 LOC)",
        "5. Create ai_agent_framework_config.py (≤100 LOC)",
        "6. Refactor main file to orchestrate modules (≤150 LOC)",
        "7. Update imports and dependencies",
        "8. Test framework functionality to ensure it works correctly",
        "9. Delete original monolithic file",
        "10. Update V2 compliance progress tracker"
      ],
      "deliverables": [
        "ai_agent_framework_core.py",
        "ai_agent_framework_gaming.py",
        "ai_agent_framework_coordinator.py",
        "ai_agent_framework_config.py",
        "ai_agent_framework.py (orchestrator)",
        "Updated compliance tracker"
      ]
    },
    {
      "contract_id": "MODERATE-020",
      "file_path": "src/core/performance_validation_system_refactored.py",
      "current_lines": 647,
      "target_lines": 400",
      "priority": "MODERATE",
      "estimated_effort": "2 days",
      "assigned_to": "UNASSIGNED",
      "status": "AVAILABLE",
      "refactoring_goals": [
        "Separate performance validation, testing, and reporting concerns",
        "Create focused modules for different performance validation components",
        "Maintain comprehensive functionality while improving maintainability"
      ],
      "workflow": [
        "1. Analyze file structure and identify distinct validation responsibilities",
        "2. Create performance_validation_core.py (≤200 LOC)",
        "3. Create performance_validation_tester.py (≤200 LOC)",
        "4. Create performance_validation_reporter.py (≤150 LOC)",
        "5. Create performance_validation_config.py (≤100 LOC)",
        "6. Refactor main file to orchestrate modules (≤150 LOC)",
        "7. Update imports and dependencies",
        "8. Test validation functionality to ensure it works correctly",
        "9. Delete original monolithic file",
        "10. Update V2 compliance progress tracker"
      ],
      "deliverables": [
        "performance_validation_core.py",
        "performance_validation_tester.py",
        "performance_validation_reporter.py",
        "performance_validation_config.py",
        "performance_validation_system_refactored.py (orchestrator)",
        "Updated compliance tracker"
      ]
    }
  ],
  "completion_criteria": [
    "All files reduced to ≤400 LOC (standard) or ≤600 LOC (GUI)",
    "SRP compliance achieved",
    "All tests pass",
    "Original monolithic files deleted",
    "Compliance tracker updated",
    "Modular architecture established"
  ],
  "success_metrics": {
    "target_compliance": "100% for Phase 3 Batch 2",
    "lines_reduced": "Target: 50%+ reduction",
    "modules_created": "4-5 focused modules per file",
    "maintainability": "High (≤400 LOC per module)"
  }
}
