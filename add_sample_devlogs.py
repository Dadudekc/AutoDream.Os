#!/usr/bin/env python3
"""
Add Sample Devlogs for Testing
==============================

This script adds sample devlog data to the vector database for testing the
analytics system. It creates realistic devlog entries for each agent.
"""

import sys
import asyncio
import os
from datetime import datetime, timedelta
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from services.vector_database.vector_database_integration import VectorDatabaseIntegration

async def add_sample_devlogs():
    """Add sample devlog data to the database."""
    print("🤖 Adding sample devlog data...")

    # Initialize database
    db_path = Path("data") / "vector_database.db"
    db_path.parent.mkdir(exist_ok=True)

    db = VectorDatabaseIntegration(str(db_path))

    # Sample devlog data
    sample_devlogs = [
        {
            "agent_id": "Agent-1",
            "action": "Infrastructure setup completed",
            "status": "completed",
            "details": "Successfully set up cloud infrastructure with monitoring and logging"
        },
        {
            "agent_id": "Agent-2",
            "action": "Architecture review completed",
            "status": "completed",
            "details": "Reviewed and approved system architecture design patterns"
        },
        {
            "agent_id": "Agent-3",
            "action": "Database optimization completed",
            "status": "completed",
            "details": "Optimized database queries and implemented connection pooling"
        },
        {
            "agent_id": "Agent-4",
            "action": "Quality assurance testing completed",
            "status": "completed",
            "details": "Conducted comprehensive testing and validation of all components"
        },
        {
            "agent_id": "Agent-5",
            "action": "Business intelligence analysis completed",
            "status": "completed",
            "details": "Analyzed performance metrics and generated business insights"
        },
        {
            "agent_id": "Agent-6",
            "action": "System integration completed",
            "status": "completed",
            "details": "Successfully integrated all system components and APIs"
        },
        {
            "agent_id": "Agent-7",
            "action": "Frontend development completed",
            "status": "completed",
            "details": "Built responsive web interface with modern UI components"
        },
        {
            "agent_id": "Agent-8",
            "action": "Documentation completed",
            "status": "completed",
            "details": "Created comprehensive documentation and user guides"
        },
        {
            "agent_id": "Agent-1",
            "action": "Security audit completed",
            "status": "completed",
            "details": "Performed security assessment and implemented fixes"
        },
        {
            "agent_id": "Agent-2",
            "action": "Performance optimization completed",
            "status": "completed",
            "details": "Optimized system performance and reduced response times"
        },
        {
            "agent_id": "Agent-3",
            "action": "Backup system implemented",
            "status": "completed",
            "details": "Set up automated backup and disaster recovery procedures"
        },
        {
            "agent_id": "Agent-4",
            "action": "Code review completed",
            "status": "completed",
            "details": "Reviewed codebase and ensured V2 compliance standards"
        }
    ]

    # Add devlogs with timestamps spread over the last few days
    base_time = datetime.now()
    added_count = 0

    for i, devlog_data in enumerate(sample_devlogs):
        # Create timestamp for each devlog (spread over last 3 days)
        timestamp_offset = timedelta(hours=i % 72)  # 72 hours = 3 days
        devlog_time = base_time - timestamp_offset

        # Format devlog content
        content = f"""# Devlog Entry

**Agent:** {devlog_data['agent_id']}
**Action:** {devlog_data['action']}
**Status:** {devlog_data['status']}
**Timestamp:** {devlog_time.isoformat()}

**Details:**
{devlog_data['details']}

---
*Generated by Agent Devlog System*
"""

        # Add to vector database
        vector_id = await db.integrate_agent_status(
            agent_id=devlog_data['agent_id'],
            status_data={
                'agent_id': devlog_data['agent_id'],
                'action': devlog_data['action'],
                'status': devlog_data['status'],
                'details': devlog_data['details'],
                'timestamp': devlog_time.isoformat(),
                'type': 'devlog'
            }
        )

        if vector_id:
            added_count += 1
            print(f"  ✅ Added devlog: {devlog_data['agent_id']} - {devlog_data['action']}")
        else:
            print(f"  ❌ Failed to add devlog: {devlog_data['agent_id']}")

    print(f"\n🎉 Successfully added {added_count} sample devlogs!")
    print("📊 You can now view analytics at: http://localhost:8002/api/devlogs/analytics")
    print("🌐 Or open the dashboard at: http://localhost:3000")

    return added_count

if __name__ == "__main__":
    try:
        asyncio.run(add_sample_devlogs())
    except Exception as e:
        print(f"❌ Error adding sample devlogs: {e}")
        sys.exit(1)
