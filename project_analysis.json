{
    "fix_manager_results.py": {
        "language": ".py",
        "functions": [
            "fix_file"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "run_unified.py": {
        "language": ".py",
        "functions": [
            "run_advanced_analysis",
            "run_advanced_elimination",
            "run_comprehensive",
            "run_focused",
            "run_mass",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "debug_imports.py": {
        "language": ".py",
        "functions": [
            "test_imports"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\agent_registry.py": {
        "language": ".py",
        "functions": [
            "_load_coordinates"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "simple_overnight_monitor.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard-alerts.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\agent-coordination-manager.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard-data-operations.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard-communication.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard-helpers.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard-data-manager.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard-legacy.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard-loading-manager.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard-main.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard-error-handler.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard-initializer.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard-charts.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard-module-coordinator.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard-core.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard-navigation.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard-original-backup.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard-config-manager.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard-v2.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard-view-overview.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard-view-performance.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard-view-renderer.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard-views.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\messaging-architecture-validator.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\system-integration-core.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard-time.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard-socket-manager.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\architecture\\dependency-injection-framework.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\architecture\\di-container-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\unified-frontend-utilities.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard-state-manager.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\architecture\\architecture-pattern-coordinator.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\architecture\\di-decorators-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard-utils.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\architecture\\di-framework-orchestrator.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard-ui-helpers.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\architecture\\pattern-coordination-methods.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\core\\dependency-analyzer.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\architecture\\web-service-registry-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\core\\agent-8-ssot-integration.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\core\\unified-logging-system.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "verification_plan.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "run_all_verifications",
            "_run_unit_tests",
            "_test_coordinator_registry",
            "_test_coordinator_status_parser",
            "_test_message_queue",
            "_test_queue_persistence",
            "_test_queue_statistics",
            "_test_interfaces",
            "_run_integration_tests",
            "_test_messaging_integration",
            "_test_coordinator_integration",
            "_run_end_to_end_tests",
            "_test_complete_messaging_workflow",
            "_test_agent_onboarding_workflow",
            "_run_performance_tests",
            "_test_queue_performance",
            "_test_message_throughput",
            "_run_compliance_tests",
            "_test_solid_compliance",
            "_test_v2_standards",
            "_generate_report",
            "mock_callback",
            "__init__",
            "info",
            "warning",
            "error",
            "__init__",
            "get_status",
            "get_status",
            "info",
            "warning",
            "error"
        ],
        "classes": {
            "VerificationSuite": {
                "methods": [
                    "__init__",
                    "run_all_verifications",
                    "_run_unit_tests",
                    "_test_coordinator_registry",
                    "_test_coordinator_status_parser",
                    "_test_message_queue",
                    "_test_queue_persistence",
                    "_test_queue_statistics",
                    "_test_interfaces",
                    "_run_integration_tests",
                    "_test_messaging_integration",
                    "_test_coordinator_integration",
                    "_run_end_to_end_tests",
                    "_test_complete_messaging_workflow",
                    "_test_agent_onboarding_workflow",
                    "_run_performance_tests",
                    "_test_queue_performance",
                    "_test_message_throughput",
                    "_run_compliance_tests",
                    "_test_solid_compliance",
                    "_test_v2_standards",
                    "_generate_report"
                ],
                "docstring": "Comprehensive verification suite for SOLID architecture.",
                "base_classes": []
            },
            "MockLogger": {
                "methods": [
                    "info",
                    "warning",
                    "error"
                ],
                "docstring": null,
                "base_classes": []
            },
            "MockCoordinator": {
                "methods": [
                    "get_status"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 60
    },
    "src\\web\\static\\js\\dashboard\\css-class-management-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard\\dom-utils-orchestrator.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\core\\unified-configuration-system.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard\\element-visibility-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\commandresult.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "CommandResult": {
                "methods": [],
                "docstring": "Represents the result of a command execution.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\framework_new\\components.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard\\element-creation-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard\\style-utils.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard\\date-utils.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\swarmstatus.py": {
        "language": ".py",
        "functions": [
            "__post_init__"
        ],
        "classes": {
            "SwarmStatus": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Represents the current swarm status.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\web\\static\\js\\core\\dependency-container.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard\\formatters.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard\\element-selection-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\framework_new\\modal.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\framework_new\\layout.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\performance\\performance-optimization-report.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\performance\\bundle-optimizer.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\portal\\utils.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\performance\\frontend-performance-monitor.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\repositories\\deployment-repository.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\framework_new\\ui-components.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\repositories\\dashboard-repository.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\business-validation-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\component-validation-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\deployment-analysis-methods.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\business-insights-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\coordination-core-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\dashboard-init-service.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\coordination-reporting-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\metrics-aggregation-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\performance-analysis-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\performance-configuration-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\performance-recommendation-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\framework_new\\forms.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\deployment-validation-service.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\dashboard-data-service.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\framework_new\\config.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\phase-action-methods.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\dashboard-service-v2.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\agent-coordination-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\rule-evaluation-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\deployment-phase-service.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\deployment-coordination-service.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\report-generation-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\scenario-validation-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\trend-analysis-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\utility-function-service.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\utility-string-service.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\utilities\\logging-utils.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\utility-validation-service.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\utilities\\function-utils.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\deployment-metrics-service.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\utilities\\math-utils.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\utilities\\data-utils.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\utilities\\string-utils.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\dashboard\\dom-utils.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\chart-navigation-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\chart-state-callbacks-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\chart-state-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\socket-event-handlers.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\chart-renderer.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\order-processing-modules.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\chart-state-core-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\services\\report-history-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\app-management-modules.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\chart-data-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\chart-controls-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\chart-drawing-modules.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\chart-state-validation-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\trading-robot-main.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\chart-calculation-modules.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\trading-websocket-manager.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\unified-logging-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\trading-chart-manager.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\trading-order-manager.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\order-form-modules.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\websocket-error-callbacks.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\websocket-order-portfolio-callbacks.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\portfolio-management-modules.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\websocket-callback-manager-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\websocket-connection-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\chart-events.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\websocket-subscription-optimized.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\websocket-subscription-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\utilities\\dom-utils.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\utilities\\logging-utils.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\utilities\\string-utils.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\utilities\\time-utils.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\utilities\\unified-utilities.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\validation\\data-validation-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\validation\\field-validation-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\chart-validation\\logger.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\validation\\form-validation-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\vector-database\\__init__.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\websocket-market-data-callbacks.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\vector-database\\analytics.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\utilities\\__init__.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\vector-database\\manager.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\validation\\unified-validation-system.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\trading-dashboard.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\websocket-connection-callbacks.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\vector-database\\ui-common.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\chart-validation\\__init__.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\trading-portfolio-manager.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\websocket-message-handler-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\chart-validation\\module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\frontend\\settings.py": {
        "language": ".py",
        "functions": [
            "get_settings"
        ],
        "classes": {
            "FrontendSettings": {
                "methods": [],
                "docstring": "Configuration values for the frontend layer.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 1
    },
    "src\\web\\vector_database\\error_handler_middleware.py": {
        "language": ".py",
        "functions": [
            "error_handler",
            "decorated_function"
        ],
        "classes": {
            "ErrorHandlerMiddleware": {
                "methods": [
                    "error_handler"
                ],
                "docstring": "Error handling middleware decorators.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 3
    },
    "src\\web\\vector_database\\utils.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "simulate_vector_search",
            "simulate_get_documents",
            "simulate_add_document",
            "simulate_get_document",
            "simulate_update_document",
            "simulate_delete_document",
            "simulate_get_analytics",
            "simulate_get_collections",
            "simulate_export_data"
        ],
        "classes": {
            "VectorDatabaseUtils": {
                "methods": [
                    "__init__",
                    "simulate_vector_search",
                    "simulate_get_documents",
                    "simulate_add_document",
                    "simulate_get_document",
                    "simulate_update_document",
                    "simulate_delete_document",
                    "simulate_get_analytics",
                    "simulate_get_collections",
                    "simulate_export_data"
                ],
                "docstring": "Main utility orchestrator for vector database operations.\n\nV2 Compliance: < 100 lines, facade pattern, single responsibility.\nThis class orchestrates all utility components.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\web\\vector_database\\middleware.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_instance",
            "error_handler_decorator",
            "json_required_decorator",
            "validate_request_decorator",
            "log_request_decorator",
            "cors_headers_decorator",
            "rate_limit_decorator",
            "cache_response_decorator",
            "validate_pagination_decorator",
            "add_cors_headers",
            "error_handler",
            "json_required"
        ],
        "classes": {
            "VectorDatabaseMiddleware": {
                "methods": [
                    "__init__",
                    "_get_instance",
                    "error_handler_decorator",
                    "json_required_decorator",
                    "validate_request_decorator",
                    "log_request_decorator",
                    "cors_headers_decorator",
                    "rate_limit_decorator",
                    "cache_response_decorator",
                    "validate_pagination_decorator",
                    "add_cors_headers",
                    "error_handler",
                    "json_required"
                ],
                "docstring": "Main middleware orchestrator for vector database operations.\n\nV2 Compliance: < 100 lines, facade pattern, single responsibility.\nThis class orchestrates all middleware components.\n\nProvides both instance methods and class-level shortcuts for decorator usage.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 26
    },
    "src\\web\\static\\js\\utilities\\array-utils.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\vector-database\\core.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\vector_database\\request_handler_middleware.py": {
        "language": ".py",
        "functions": [
            "json_required",
            "log_request",
            "rate_limit",
            "decorated_function",
            "decorated_function",
            "decorator",
            "decorated_function"
        ],
        "classes": {
            "RequestHandlerMiddleware": {
                "methods": [
                    "json_required",
                    "log_request",
                    "rate_limit"
                ],
                "docstring": "Request processing middleware decorators.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\web\\static\\js\\vector-database\\search.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\agent_vector_integration.py": {
        "language": ".py",
        "functions": [
            "create_agent_vector_integration",
            "__init__",
            "get_task_context",
            "index_agent_work",
            "index_inbox_messages",
            "get_agent_recommendations",
            "get_agent_status",
            "get_integration_stats",
            "optimize_workflow"
        ],
        "classes": {
            "AgentVectorIntegration": {
                "methods": [
                    "__init__",
                    "get_task_context",
                    "index_agent_work",
                    "index_inbox_messages",
                    "get_agent_recommendations",
                    "get_agent_status",
                    "get_integration_stats",
                    "optimize_workflow"
                ],
                "docstring": "Main orchestrator for agent vector database integration.\n\nV2 Compliance: < 100 lines, facade pattern, single responsibility.\nThis class orchestrates all integration components.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "src\\web\\static\\js\\vector-database\\ui.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\trading-robot\\chart-validation\\rules.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\vector_database\\document_utils.py": {
        "language": ".py",
        "functions": [
            "simulate_get_documents",
            "simulate_add_document",
            "simulate_get_document",
            "simulate_update_document",
            "simulate_delete_document"
        ],
        "classes": {
            "DocumentUtils": {
                "methods": [
                    "simulate_get_documents",
                    "simulate_add_document",
                    "simulate_get_document",
                    "simulate_update_document",
                    "simulate_delete_document"
                ],
                "docstring": "Utility functions for document operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\web\\vector_database\\routes.py": {
        "language": ".py",
        "functions": [
            "index",
            "search",
            "get_documents",
            "add_document",
            "get_document",
            "update_document",
            "delete_document",
            "get_analytics",
            "get_collections",
            "export_data"
        ],
        "classes": {},
        "routes": [
            {
                "function": "index",
                "method": "ROUTE",
                "path": "/"
            },
            {
                "function": "search",
                "method": "POST",
                "path": "/search"
            },
            {
                "function": "get_documents",
                "method": "GET",
                "path": "/documents"
            },
            {
                "function": "add_document",
                "method": "POST",
                "path": "/documents"
            },
            {
                "function": "get_document",
                "method": "GET",
                "path": "/documents/<document_id>"
            },
            {
                "function": "update_document",
                "method": "PUT",
                "path": "/documents/<document_id>"
            },
            {
                "function": "delete_document",
                "method": "DELETE",
                "path": "/documents/<document_id>"
            },
            {
                "function": "get_analytics",
                "method": "GET",
                "path": "/analytics"
            },
            {
                "function": "get_collections",
                "method": "GET",
                "path": "/collections"
            },
            {
                "function": "export_data",
                "method": "POST",
                "path": "/export"
            }
        ],
        "complexity": 10
    },
    "src\\services\\agent_vector_integration_operations.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "optimize_agent_workflow",
            "get_swarm_intelligence",
            "analyze_agent_performance",
            "get_learning_recommendations",
            "sync_with_swarm",
            "get_integration_health"
        ],
        "classes": {
            "AgentVectorIntegrationOperations": {
                "methods": [
                    "__init__",
                    "optimize_agent_workflow",
                    "get_swarm_intelligence",
                    "analyze_agent_performance",
                    "get_learning_recommendations",
                    "sync_with_swarm",
                    "get_integration_health"
                ],
                "docstring": "Main orchestrator for extended agent vector integration operations.\n\nV2 Compliance: < 100 lines, facade pattern, single responsibility.\nThis class orchestrates all extended operation components.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\web\\vector_database\\response_handler_middleware.py": {
        "language": ".py",
        "functions": [
            "add_cors_headers",
            "cache_response",
            "decorated_function",
            "decorator",
            "decorated_function"
        ],
        "classes": {
            "ResponseHandlerMiddleware": {
                "methods": [
                    "add_cors_headers",
                    "cache_response"
                ],
                "docstring": "Response processing middleware decorators.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 7
    },
    "src\\web\\vector_database\\validation_middleware.py": {
        "language": ".py",
        "functions": [
            "validate_request",
            "validate_pagination",
            "decorator",
            "decorated_function",
            "decorated_function"
        ],
        "classes": {
            "ValidationMiddleware": {
                "methods": [
                    "validate_request",
                    "validate_pagination"
                ],
                "docstring": "Validation middleware decorators.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 7
    },
    "src\\web\\static\\js\\vector-database\\ui-optimized.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\config.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\messaging_agent_coordination.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "MessagingAgentCoordination": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Handles cross-agent coordination and swarm communication.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\web\\vector_database\\search_utils.py": {
        "language": ".py",
        "functions": [
            "simulate_vector_search"
        ],
        "classes": {
            "SearchUtils": {
                "methods": [
                    "simulate_vector_search"
                ],
                "docstring": "Utility functions for search operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\services\\agent_vector_utils.py": {
        "language": ".py",
        "functions": [
            "format_search_result",
            "generate_recommendations"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\services\\contract_service.py": {
        "language": ".py",
        "functions": [
            "save_contract",
            "load_contract",
            "list_contracts",
            "get_contract_definitions",
            "check_agent_status",
            "display_contract_assignment",
            "__init__",
            "get_contract",
            "display_contract_assignment",
            "check_agent_status",
            "save_contract",
            "load_contract",
            "list_all_contracts"
        ],
        "classes": {
            "IContractStorage": {
                "methods": [
                    "save_contract",
                    "load_contract",
                    "list_contracts"
                ],
                "docstring": "Interface for contract storage operations.",
                "base_classes": [
                    "Protocol"
                ]
            },
            "ContractDefinitions": {
                "methods": [
                    "get_contract_definitions"
                ],
                "docstring": "Responsible for contract definitions only.",
                "base_classes": []
            },
            "AgentStatusChecker": {
                "methods": [
                    "check_agent_status"
                ],
                "docstring": "Responsible for checking agent status only.",
                "base_classes": []
            },
            "ContractDisplay": {
                "methods": [
                    "display_contract_assignment"
                ],
                "docstring": "Responsible for displaying contract information only.",
                "base_classes": []
            },
            "ContractService": {
                "methods": [
                    "__init__",
                    "get_contract",
                    "display_contract_assignment",
                    "check_agent_status",
                    "save_contract",
                    "load_contract",
                    "list_all_contracts"
                ],
                "docstring": "SOLID-compliant contract service with dependency injection.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "src\\services\\constants.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\vector_database\\collection_utils.py": {
        "language": ".py",
        "functions": [
            "simulate_get_collections",
            "simulate_export_data"
        ],
        "classes": {
            "CollectionUtils": {
                "methods": [
                    "simulate_get_collections",
                    "simulate_export_data"
                ],
                "docstring": "Utility functions for collection operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\web\\vector_database\\analytics_utils.py": {
        "language": ".py",
        "functions": [
            "simulate_get_analytics"
        ],
        "classes": {
            "AnalyticsUtils": {
                "methods": [
                    "simulate_get_analytics"
                ],
                "docstring": "Utility functions for analytics operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\services\\messaging_onboarding.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_onboarding_message",
            "_get_agent_role_from_status",
            "send_onboarding_message",
            "send_bulk_onboarding"
        ],
        "classes": {
            "MessagingOnboarding": {
                "methods": [
                    "__init__",
                    "generate_onboarding_message",
                    "_get_agent_role_from_status",
                    "send_onboarding_message",
                    "send_bulk_onboarding"
                ],
                "docstring": "Handles onboarding message generation and delivery.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\services\\cursor_db.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_connect",
            "get_task",
            "task_exists"
        ],
        "classes": {
            "CursorTask": {
                "methods": [],
                "docstring": "Record representing an agent task stored in the Cursor database.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CursorTaskRepository": {
                "methods": [
                    "__init__",
                    "_connect",
                    "get_task",
                    "task_exists"
                ],
                "docstring": "Repository providing read access to Cursor task records.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\services\\message_identity_clarification.py": {
        "language": ".py",
        "functions": [
            "format_message_with_identity_clarification",
            "__init__",
            "format_message_with_identity_clarification"
        ],
        "classes": {
            "MessageIdentityClarification": {
                "methods": [
                    "__init__",
                    "format_message_with_identity_clarification"
                ],
                "docstring": "Handles message formatting with agent identity clarification.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 5
    },
    "src\\services\\simple_onboarding.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute",
            "_should_process_agent",
            "_get_operation_description",
            "_get_dry_run_flow_description",
            "_execute_wrapup",
            "_execute_onboarding",
            "_load_coordinates",
            "_reset_agent_statuses",
            "_onboard_agent",
            "_ensure_tab",
            "_click_xy",
            "_type_clipboard",
            "_validate_coordinates",
            "_validate_message_format",
            "_wrap_up_msg",
            "_onboarding_msg",
            "_get_wrapup_template",
            "_now_iso"
        ],
        "classes": {
            "SimpleOnboarding": {
                "methods": [
                    "__init__",
                    "execute",
                    "_should_process_agent",
                    "_get_operation_description",
                    "_get_dry_run_flow_description",
                    "_execute_wrapup",
                    "_execute_onboarding",
                    "_load_coordinates",
                    "_reset_agent_statuses",
                    "_onboard_agent",
                    "_ensure_tab",
                    "_click_xy",
                    "_type_clipboard",
                    "_validate_coordinates",
                    "_validate_message_format",
                    "_wrap_up_msg",
                    "_onboarding_msg",
                    "_get_wrapup_template",
                    "_now_iso"
                ],
                "docstring": "Default UI onboarding flow for agents.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 38
    },
    "src\\services\\agent_vector_integration_core.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_create_vector_integration",
            "get_agent_context",
            "get_task_recommendations",
            "store_agent_knowledge",
            "search_agent_patterns",
            "get_agent_status"
        ],
        "classes": {
            "AgentVectorIntegrationCore": {
                "methods": [
                    "__init__",
                    "_create_vector_integration",
                    "get_agent_context",
                    "get_task_recommendations",
                    "store_agent_knowledge",
                    "search_agent_patterns",
                    "get_agent_status"
                ],
                "docstring": "Core vector database integration for agent workflows.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\services\\unified_messaging_service.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__"
        ],
        "classes": {
            "UnifiedMessagingService": {
                "methods": [
                    "__init__"
                ],
                "docstring": "V2-compliant unified messaging service using modularized components.",
                "base_classes": [
                    "UnifiedMessagingCore"
                ]
            }
        },
        "routes": [],
        "complexity": 3
    },
    "src\\services\\role_command_handler.py": {
        "language": ".py",
        "functions": [
            "can_handle",
            "handle"
        ],
        "classes": {
            "RoleCommandHandler": {
                "methods": [
                    "can_handle",
                    "handle"
                ],
                "docstring": "Handles role-related operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\services\\overnight_command_handler.py": {
        "language": ".py",
        "functions": [
            "can_handle",
            "handle"
        ],
        "classes": {
            "OvernightCommandHandler": {
                "methods": [
                    "can_handle",
                    "handle"
                ],
                "docstring": "Handles overnight autonomous operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\services\\onboarding_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_onboarding_message",
            "_generate_initial_onboarding_message",
            "_generate_welcome_back_message",
            "get_service_status"
        ],
        "classes": {
            "OnboardingService": {
                "methods": [
                    "__init__",
                    "generate_onboarding_message",
                    "_generate_initial_onboarding_message",
                    "_generate_welcome_back_message",
                    "get_service_status"
                ],
                "docstring": "Concrete implementation of IOnboardingService protocol.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\services\\unified_messaging_imports.py": {
        "language": ".py",
        "functions": [
            "get_timestamp",
            "get_unified_utility",
            "get_messaging_logger",
            "load_coordinates_from_json",
            "get_current_timestamp",
            "read_json"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "src\\services\\messaging_pyautogui.py": {
        "language": ".py",
        "functions": [
            "load_coordinates_from_json",
            "get_agent_coordinates",
            "validate_coordinates_before_delivery",
            "deliver_message_pyautogui",
            "format_message_for_delivery",
            "deliver_bulk_messages_pyautogui",
            "cleanup_pyautogui_resources",
            "__init__",
            "send_message",
            "send_message_via_pyautogui"
        ],
        "classes": {
            "PyAutoGUIMessagingDelivery": {
                "methods": [
                    "__init__",
                    "send_message",
                    "send_message_via_pyautogui"
                ],
                "docstring": "Simple wrapper class for PyAutoGUI messaging functions.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 13
    },
    "src\\services\\agent_registry.py": {
        "language": ".py",
        "functions": [
            "format_agent_list",
            "list_agents",
            "get_agent_info"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\services\\onboarding_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "onboard_agent",
            "get_onboarding_status",
            "list_onboarded_agents",
            "_get_role_capabilities"
        ],
        "classes": {
            "OnboardingHandler": {
                "methods": [
                    "__init__",
                    "onboard_agent",
                    "get_onboarding_status",
                    "list_onboarded_agents",
                    "_get_role_capabilities"
                ],
                "docstring": "Handler for agent onboarding operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\services\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\messaging_handlers_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_agent_coordinates",
            "show_coordinates",
            "send_onboarding_message",
            "send_bulk_onboarding",
            "validate_coordinates",
            "_generate_onboarding_message"
        ],
        "classes": {
            "MessagingHandlersEngine": {
                "methods": [
                    "__init__",
                    "get_agent_coordinates",
                    "show_coordinates",
                    "send_onboarding_message",
                    "send_bulk_onboarding",
                    "validate_coordinates",
                    "_generate_onboarding_message"
                ],
                "docstring": "Engine for managing messaging handlers and operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\services\\task_context_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_task_context",
            "_search_similar_tasks",
            "_search_related_messages",
            "_search_devlog_insights",
            "_get_fallback_context"
        ],
        "classes": {
            "TaskContextManager": {
                "methods": [
                    "__init__",
                    "get_task_context",
                    "_search_similar_tasks",
                    "_search_related_messages",
                    "_search_devlog_insights",
                    "_get_fallback_context"
                ],
                "docstring": "Manages task context and search operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\services\\recommendation_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_agent_recommendations",
            "optimize_workflow",
            "_search_similar_contexts",
            "_generate_recommendations_from_contexts",
            "_get_fallback_recommendations",
            "_analyze_workflow_patterns",
            "_generate_workflow_optimizations",
            "_get_fallback_optimization"
        ],
        "classes": {
            "RecommendationEngine": {
                "methods": [
                    "__init__",
                    "get_agent_recommendations",
                    "optimize_workflow",
                    "_search_similar_contexts",
                    "_generate_recommendations_from_contexts",
                    "_get_fallback_recommendations",
                    "_analyze_workflow_patterns",
                    "_generate_workflow_optimizations",
                    "_get_fallback_optimization"
                ],
                "docstring": "Handles recommendation and insight generation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\services\\embedding_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "encode",
            "_encode_sentence_transformers",
            "_encode_openai",
            "get_embedding_result"
        ],
        "classes": {
            "EmbeddingService": {
                "methods": [
                    "__init__",
                    "encode",
                    "_encode_sentence_transformers",
                    "_encode_openai",
                    "get_embedding_result"
                ],
                "docstring": "Service for generating text embeddings.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\services\\messaging_cli.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "execute"
        ],
        "classes": {
            "MessagingCLI": {
                "methods": [
                    "__init__",
                    "execute"
                ],
                "docstring": "Command-line interface for messaging operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 5
    },
    "src\\services\\swarm_intelligence_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_config",
            "get_swarm_intelligence",
            "sync_with_swarm",
            "_search_collective_knowledge",
            "_find_coordination_opportunities",
            "_analyze_swarm_patterns",
            "_calculate_confidence",
            "_get_contributing_agents",
            "_share_knowledge_with_swarm",
            "_update_from_swarm_knowledge",
            "_is_relevant_to_agent",
            "_get_fallback_intelligence"
        ],
        "classes": {
            "SwarmIntelligenceManager": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "get_swarm_intelligence",
                    "sync_with_swarm",
                    "_search_collective_knowledge",
                    "_find_coordination_opportunities",
                    "_analyze_swarm_patterns",
                    "_calculate_confidence",
                    "_get_contributing_agents",
                    "_share_knowledge_with_swarm",
                    "_update_from_swarm_knowledge",
                    "_is_relevant_to_agent",
                    "_get_fallback_intelligence"
                ],
                "docstring": "Handles swarm intelligence operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "src\\services\\coordinator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_status",
            "get_name",
            "shutdown"
        ],
        "classes": {
            "Coordinator": {
                "methods": [
                    "__init__",
                    "get_status",
                    "get_name",
                    "shutdown"
                ],
                "docstring": "Basic coordinator implementation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\services\\architectural_principles.py": {
        "language": ".py",
        "functions": [
            "get_all_principles",
            "get_principle"
        ],
        "classes": {
            "PrincipleDefinitions": {
                "methods": [
                    "get_all_principles",
                    "get_principle"
                ],
                "docstring": "Centralized definitions for all architectural principles.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\services\\architectural_onboarding.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_agent_principle",
            "get_principle_guidance",
            "assign_principle",
            "get_all_assignments",
            "create_onboarding_message",
            "validate_agent_compliance",
            "get_all_principles",
            "assign_principle_to_agent",
            "get_agents_by_principle"
        ],
        "classes": {
            "ArchitecturalOnboardingManager": {
                "methods": [
                    "__init__",
                    "get_agent_principle",
                    "get_principle_guidance",
                    "assign_principle",
                    "get_all_assignments",
                    "create_onboarding_message",
                    "validate_agent_compliance",
                    "get_all_principles",
                    "assign_principle_to_agent",
                    "get_agents_by_principle"
                ],
                "docstring": "Manages architectural onboarding for agents following SOLID principles.\n\nThis system ensures that each agent is onboarded with specific architectural\nresponsibilities and validation rules to maintain professional code quality.\n\nUses dependency injection and delegates to specialized components.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\services\\agent_status_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_agent_status",
            "get_integration_stats",
            "_get_recent_work_count",
            "_get_pending_tasks_count",
            "_get_last_activity",
            "_get_total_documents",
            "_get_agent_documents"
        ],
        "classes": {
            "AgentStatusManager": {
                "methods": [
                    "__init__",
                    "get_agent_status",
                    "get_integration_stats",
                    "_get_recent_work_count",
                    "_get_pending_tasks_count",
                    "_get_last_activity",
                    "_get_total_documents",
                    "_get_agent_documents"
                ],
                "docstring": "Handles agent status and utility functions.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\services\\workflow_optimizer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_config",
            "optimize_agent_workflow",
            "_analyze_workflow_patterns",
            "_identify_bottlenecks",
            "_find_optimization_opportunities",
            "_generate_optimization_recommendations",
            "_calculate_optimization_score",
            "_get_fallback_optimization"
        ],
        "classes": {
            "WorkflowOptimizer": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "optimize_agent_workflow",
                    "_analyze_workflow_patterns",
                    "_identify_bottlenecks",
                    "_find_optimization_opportunities",
                    "_generate_optimization_recommendations",
                    "_calculate_optimization_score",
                    "_get_fallback_optimization"
                ],
                "docstring": "Handles workflow optimization operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\services\\compliance_validator.py": {
        "language": ".py",
        "functions": [
            "validate_agent_compliance",
            "_validate_single_responsibility",
            "_validate_dry_principle",
            "_validate_kiss_principle",
            "_validate_open_closed",
            "_generate_recommendations",
            "_get_current_timestamp"
        ],
        "classes": {
            "ComplianceValidator": {
                "methods": [
                    "validate_agent_compliance",
                    "_validate_single_responsibility",
                    "_validate_dry_principle",
                    "_validate_kiss_principle",
                    "_validate_open_closed",
                    "_generate_recommendations",
                    "_get_current_timestamp"
                ],
                "docstring": "Validates architectural compliance for agents.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\services\\contract_system\\manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_system_status",
            "get_agent_status",
            "get_next_task",
            "add_task_to_contract"
        ],
        "classes": {
            "ContractManager": {
                "methods": [
                    "__init__",
                    "get_system_status",
                    "get_agent_status",
                    "get_next_task",
                    "add_task_to_contract"
                ],
                "docstring": "Manages contract operations and task assignments.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\services\\architectural_models.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "ArchitecturalPrinciple": {
                "methods": [],
                "docstring": "Core architectural principles for professional development.",
                "base_classes": [
                    "Enum"
                ]
            },
            "ArchitecturalGuidance": {
                "methods": [],
                "docstring": "Structured guidance for each architectural principle.",
                "base_classes": []
            },
            "AgentAssignment": {
                "methods": [],
                "docstring": "Assignment of architectural principle to an agent.",
                "base_classes": []
            },
            "ComplianceValidationResult": {
                "methods": [],
                "docstring": "Result of compliance validation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\services\\messaging_cli_handlers.py": {
        "language": ".py",
        "functions": [
            "send_message_pyautogui",
            "send_message_to_onboarding_coords",
            "handle_message",
            "handle_survey",
            "handle_consolidation",
            "handle_coordinates",
            "handle_start_agents",
            "handle_save",
            "handle_leaderboard",
            "send_to_agent",
            "broadcast_to_all",
            "coordinate_survey",
            "coordinate_consolidation"
        ],
        "classes": {
            "MessageCoordinator": {
                "methods": [
                    "send_to_agent",
                    "broadcast_to_all",
                    "coordinate_survey",
                    "coordinate_consolidation"
                ],
                "docstring": "Unified message coordination system.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 17
    },
    "src\\services\\learning_recommender.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_config",
            "get_learning_recommendations",
            "_analyze_work_patterns",
            "_identify_skill_gaps",
            "_generate_learning_recommendations",
            "_get_fallback_recommendations"
        ],
        "classes": {
            "LearningRecommender": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "get_learning_recommendations",
                    "_analyze_work_patterns",
                    "_identify_skill_gaps",
                    "_generate_learning_recommendations",
                    "_get_fallback_recommendations"
                ],
                "docstring": "Handles learning recommendation operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\services\\work_indexer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "index_agent_work",
            "index_inbox_messages"
        ],
        "classes": {
            "WorkIndexer": {
                "methods": [
                    "__init__",
                    "index_agent_work",
                    "index_inbox_messages"
                ],
                "docstring": "Handles agent work indexing operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\services\\onboarding_message_generator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_onboarding_message",
            "create_welcome_message",
            "create_principle_summary_message"
        ],
        "classes": {
            "OnboardingMessageGenerator": {
                "methods": [
                    "__init__",
                    "create_onboarding_message",
                    "create_welcome_message",
                    "create_principle_summary_message"
                ],
                "docstring": "Generates customized onboarding messages for agents.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\services\\contract_system\\storage.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "save_contract",
            "load_contract",
            "get_contract",
            "load_all_contracts",
            "get_all_contracts",
            "load_agent_contracts",
            "get_agent_contracts",
            "get_available_tasks",
            "assign_task",
            "complete_task",
            "get_agent_summary",
            "_read_json",
            "_write_json"
        ],
        "classes": {
            "ContractStorage": {
                "methods": [
                    "__init__",
                    "save_contract",
                    "load_contract",
                    "get_contract",
                    "load_all_contracts",
                    "get_all_contracts",
                    "load_agent_contracts",
                    "get_agent_contracts",
                    "get_available_tasks",
                    "assign_task",
                    "complete_task",
                    "get_agent_summary",
                    "_read_json",
                    "_write_json"
                ],
                "docstring": "Handles contract data persistence.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "src\\services\\handlers\\command_handler.py": {
        "language": ".py",
        "functions": [
            "can_handle",
            "__init__",
            "get_command_statistics",
            "format_agent_list",
            "registry_list_agents"
        ],
        "classes": {
            "CommandHandler": {
                "methods": [
                    "can_handle",
                    "__init__",
                    "get_command_statistics"
                ],
                "docstring": "Handler for CLI command processing and response handling.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\services\\contract_system\\models.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "to_dict",
            "from_dict",
            "update_status",
            "assign_to",
            "__init__",
            "to_dict",
            "from_dict",
            "update_status",
            "assign_to",
            "add_task"
        ],
        "classes": {
            "ContractStatus": {
                "methods": [],
                "docstring": "Contract status enumeration.",
                "base_classes": [
                    "Enum"
                ]
            },
            "ContractPriority": {
                "methods": [],
                "docstring": "Contract priority enumeration.",
                "base_classes": [
                    "Enum"
                ]
            },
            "TaskStatus": {
                "methods": [],
                "docstring": "Task status enumeration.",
                "base_classes": [
                    "Enum"
                ]
            },
            "Task": {
                "methods": [
                    "__init__",
                    "to_dict",
                    "from_dict",
                    "update_status",
                    "assign_to"
                ],
                "docstring": "Task data model.",
                "base_classes": []
            },
            "Contract": {
                "methods": [
                    "__init__",
                    "to_dict",
                    "from_dict",
                    "update_status",
                    "assign_to",
                    "add_task"
                ],
                "docstring": "Contract data model.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\services\\messaging_core.py": {
        "language": ".py",
        "functions": [
            "get_messaging_logger",
            "send_message",
            "generate_onboarding_message",
            "__init__",
            "_load_configuration",
            "send_message_to_inbox",
            "send_message_via_delivery_service",
            "send_message_via_pyautogui",
            "generate_onboarding_message",
            "send_onboarding_message",
            "send_bulk_onboarding",
            "send_message",
            "send_to_all_agents",
            "list_agents",
            "show_coordinates",
            "show_message_history"
        ],
        "classes": {
            "IMessageDelivery": {
                "methods": [
                    "send_message"
                ],
                "docstring": "Interface for message delivery mechanisms.",
                "base_classes": [
                    "Protocol"
                ]
            },
            "IOnboardingService": {
                "methods": [
                    "generate_onboarding_message"
                ],
                "docstring": "Interface for onboarding operations.",
                "base_classes": [
                    "Protocol"
                ]
            },
            "UnifiedMessagingCore": {
                "methods": [
                    "__init__",
                    "_load_configuration",
                    "send_message_to_inbox",
                    "send_message_via_delivery_service",
                    "send_message_via_pyautogui",
                    "generate_onboarding_message",
                    "send_onboarding_message",
                    "send_bulk_onboarding",
                    "send_message",
                    "send_to_all_agents",
                    "list_agents",
                    "show_coordinates",
                    "show_message_history"
                ],
                "docstring": "Core unified messaging service functionality - SOLID Compliant.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 31
    },
    "src\\services\\agent_assignment_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_assignments",
            "get_agent_principle",
            "assign_principle",
            "_save_assignments",
            "get_all_assignments",
            "get_agents_by_principle"
        ],
        "classes": {
            "AgentAssignmentManager": {
                "methods": [
                    "__init__",
                    "_load_assignments",
                    "get_agent_principle",
                    "assign_principle",
                    "_save_assignments",
                    "get_all_assignments",
                    "get_agents_by_principle"
                ],
                "docstring": "Manages agent-to-principle assignments with persistence.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\services\\messaging_cli_config.py": {
        "language": ".py",
        "functions": [
            "load_config_with_precedence",
            "get_default_config"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\services\\coordination\\strategy_coordinator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_initialize_coordination_rules",
            "_initialize_routing_table",
            "determine_coordination_strategy",
            "apply_coordination_rules",
            "_estimate_delivery_time",
            "get_coordination_rules",
            "get_routing_table",
            "update_coordination_rule",
            "update_routing_config",
            "get_coordinator_status"
        ],
        "classes": {
            "StrategyCoordinator": {
                "methods": [
                    "__init__",
                    "_initialize_coordination_rules",
                    "_initialize_routing_table",
                    "determine_coordination_strategy",
                    "apply_coordination_rules",
                    "_estimate_delivery_time",
                    "get_coordination_rules",
                    "get_routing_table",
                    "update_coordination_rule",
                    "update_routing_config",
                    "get_coordinator_status"
                ],
                "docstring": "Handles coordination strategy determination and application.\n\nManages strategy selection, rule application, and coordination execution.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\services\\coordination\\bulk_coordinator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "coordinate_bulk_messages",
            "_coordinate_single_message",
            "_group_messages_by_strategy",
            "coordinate_messages_by_priority",
            "coordinate_messages_by_type",
            "coordinate_messages_by_sender",
            "get_bulk_coordinator_status"
        ],
        "classes": {
            "BulkCoordinator": {
                "methods": [
                    "__init__",
                    "coordinate_bulk_messages",
                    "_coordinate_single_message",
                    "_group_messages_by_strategy",
                    "coordinate_messages_by_priority",
                    "coordinate_messages_by_type",
                    "coordinate_messages_by_sender",
                    "get_bulk_coordinator_status"
                ],
                "docstring": "Handles bulk message coordination and grouping.\n\nManages bulk message processing, grouping by strategy, and batch coordination.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\services\\handlers\\contract_handler.py": {
        "language": ".py",
        "functions": [
            "can_handle",
            "handle",
            "__init__",
            "handle_contract_commands",
            "get_next_task",
            "check_contract_status",
            "assign_task",
            "complete_task",
            "get_agent_tasks",
            "get_contract_metrics",
            "reset_contracts",
            "get_contract_status",
            "_initialize_default_tasks"
        ],
        "classes": {
            "ContractHandler": {
                "methods": [
                    "can_handle",
                    "handle",
                    "__init__",
                    "handle_contract_commands",
                    "get_next_task",
                    "check_contract_status",
                    "assign_task",
                    "complete_task",
                    "get_agent_tasks",
                    "get_contract_metrics",
                    "reset_contracts",
                    "get_contract_status",
                    "_initialize_default_tasks"
                ],
                "docstring": "Handles contract-related commands for messaging CLI.\n\nManages contract operations like task assignment and status checking.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "src\\services\\messaging_handlers_models.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "RecipientType": {
                "methods": [],
                "docstring": "Recipient type enumeration.",
                "base_classes": [
                    "Enum"
                ]
            },
            "SenderType": {
                "methods": [],
                "docstring": "Sender type enumeration.",
                "base_classes": [
                    "Enum"
                ]
            },
            "UnifiedMessagePriority": {
                "methods": [],
                "docstring": "Message priority enumeration.",
                "base_classes": [
                    "Enum"
                ]
            },
            "UnifiedMessageTag": {
                "methods": [],
                "docstring": "Message tag enumeration.",
                "base_classes": [
                    "Enum"
                ]
            },
            "UnifiedMessageType": {
                "methods": [],
                "docstring": "Message type enumeration.",
                "base_classes": [
                    "Enum"
                ]
            },
            "CoordinateConfig": {
                "methods": [],
                "docstring": "Coordinate configuration data structure.",
                "base_classes": []
            },
            "CLICommand": {
                "methods": [],
                "docstring": "CLI command data structure.",
                "base_classes": []
            },
            "CommandResult": {
                "methods": [],
                "docstring": "Command execution result.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\services\\coordination\\stats_tracker.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "update_coordination_stats",
            "_update_detailed_stats",
            "_update_category_stats",
            "get_coordination_stats",
            "get_detailed_stats",
            "get_performance_summary",
            "reset_stats",
            "get_tracker_status"
        ],
        "classes": {
            "StatsTracker": {
                "methods": [
                    "__init__",
                    "update_coordination_stats",
                    "_update_detailed_stats",
                    "_update_category_stats",
                    "get_coordination_stats",
                    "get_detailed_stats",
                    "get_performance_summary",
                    "reset_stats",
                    "get_tracker_status"
                ],
                "docstring": "Handles coordination statistics tracking and reporting.\n\nManages statistics collection, calculation, and reporting for coordination\noperations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\services\\handlers\\onboarding_handler.py": {
        "language": ".py",
        "functions": [
            "can_handle",
            "handle",
            "__init__",
            "handle_onboarding_commands",
            "_derive_role_map",
            "_handle_hard_onboarding"
        ],
        "classes": {
            "OnboardingHandler": {
                "methods": [
                    "can_handle",
                    "handle",
                    "__init__",
                    "handle_onboarding_commands",
                    "_derive_role_map",
                    "_handle_hard_onboarding"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\services\\handlers\\coordinate_handler.py": {
        "language": ".py",
        "functions": [
            "can_handle",
            "handle",
            "__init__",
            "print_coordinates_table",
            "get_agent_coordinates",
            "validate_coordinates",
            "clear_cache",
            "read_json",
            "write_json"
        ],
        "classes": {
            "CoordinateHandler": {
                "methods": [
                    "can_handle",
                    "handle",
                    "__init__",
                    "print_coordinates_table",
                    "get_agent_coordinates",
                    "validate_coordinates",
                    "clear_cache"
                ],
                "docstring": "Handler for agent coordinate management and validation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\services\\status_embedding_indexer.py": {
        "language": ".py",
        "functions": [
            "refresh_status_embedding"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\services\\messaging_status\\analytics.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_status_entry",
            "get_success_rate",
            "get_agent_success_rate",
            "get_performance_metrics",
            "get_agent_statistics",
            "get_error_analysis",
            "_filter_by_time_window",
            "_filter_by_agent_and_time",
            "_calculate_error_trends"
        ],
        "classes": {
            "StatusAnalytics": {
                "methods": [
                    "__init__",
                    "add_status_entry",
                    "get_success_rate",
                    "get_agent_success_rate",
                    "get_performance_metrics",
                    "get_agent_statistics",
                    "get_error_analysis",
                    "_filter_by_time_window",
                    "_filter_by_agent_and_time",
                    "_calculate_error_trends"
                ],
                "docstring": "Analytics engine for messaging status data.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\services\\messaging_cli_coordinate_management\\coordinate_setter.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_onboarding_coordinates",
            "set_chat_coordinates",
            "update_coordinates_from_file"
        ],
        "classes": {
            "CoordinateSetter": {
                "methods": [
                    "__init__",
                    "set_onboarding_coordinates",
                    "set_chat_coordinates",
                    "update_coordinates_from_file"
                ],
                "docstring": "High level coordinate setting utilities.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\services\\messaging_cli_coordinate_management\\manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_onboarding_coordinates",
            "set_chat_coordinates",
            "update_coordinates_from_file",
            "interactive_coordinate_capture",
            "capture_onboarding_only",
            "capture_chat_only",
            "update_agent_coordinates",
            "update_all_agents_coordinates",
            "update_onboarding_coordinates",
            "update_chat_coordinates",
            "update_all_onboarding_coordinates",
            "update_all_chat_coordinates",
            "get_chat_input_xy",
            "get_onboarding_input_xy"
        ],
        "classes": {
            "MessagingCLICoordinateManagement": {
                "methods": [
                    "__init__",
                    "set_onboarding_coordinates",
                    "set_chat_coordinates",
                    "update_coordinates_from_file",
                    "interactive_coordinate_capture",
                    "capture_onboarding_only",
                    "capture_chat_only",
                    "update_agent_coordinates",
                    "update_all_agents_coordinates",
                    "update_onboarding_coordinates",
                    "update_chat_coordinates",
                    "update_all_onboarding_coordinates",
                    "update_all_chat_coordinates",
                    "get_chat_input_xy",
                    "get_onboarding_input_xy"
                ],
                "docstring": "High-level API for managing messaging CLI coordinates.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 30
    },
    "src\\services\\models\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\protocol\\messaging_protocol_batch_manager.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\protocol\\messaging_protocol_models.py": {
        "language": ".py",
        "functions": [
            "create_protocol_configuration",
            "create_message_batch",
            "create_protocol_metrics",
            "create_routing_rule",
            "create_protocol_status",
            "__post_init__",
            "__post_init__",
            "size",
            "is_processed",
            "__post_init__",
            "success_rate",
            "__post_init__",
            "__post_init__",
            "is_healthy"
        ],
        "classes": {
            "ProtocolStrategy": {
                "methods": [],
                "docstring": "Simple protocol optimization strategies.",
                "base_classes": [
                    "Enum"
                ]
            },
            "MessagePriority": {
                "methods": [],
                "docstring": "Simple message priority levels.",
                "base_classes": [
                    "Enum"
                ]
            },
            "ProtocolStatus": {
                "methods": [
                    "__post_init__",
                    "is_healthy"
                ],
                "docstring": "Simple protocol status.",
                "base_classes": []
            },
            "ProtocolConfiguration": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Simple protocol configuration.",
                "base_classes": []
            },
            "MessageBatch": {
                "methods": [
                    "__post_init__",
                    "size",
                    "is_processed"
                ],
                "docstring": "Simple message batch model.",
                "base_classes": []
            },
            "ProtocolMetrics": {
                "methods": [
                    "__post_init__",
                    "success_rate"
                ],
                "docstring": "Simple protocol metrics.",
                "base_classes": []
            },
            "RoutingRule": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Simple routing rule.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 23
    },
    "src\\services\\messaging_status\\reports.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_status_report",
            "generate_agent_report",
            "generate_performance_report",
            "generate_error_report",
            "generate_daily_summary",
            "generate_weekly_summary",
            "_calculate_performance_rating",
            "_generate_performance_recommendations",
            "_generate_error_recommendations"
        ],
        "classes": {
            "StatusReporter": {
                "methods": [
                    "__init__",
                    "generate_status_report",
                    "generate_agent_report",
                    "generate_performance_report",
                    "generate_error_report",
                    "generate_daily_summary",
                    "generate_weekly_summary",
                    "_calculate_performance_rating",
                    "_generate_performance_recommendations",
                    "_generate_error_recommendations"
                ],
                "docstring": "Reporting engine for messaging status data.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\services\\models\\messaging_models.py": {
        "language": ".py",
        "functions": [
            "__post_init__"
        ],
        "classes": {
            "DeliveryMethod": {
                "methods": [],
                "docstring": "Delivery methods for messages.",
                "base_classes": [
                    "Enum"
                ]
            },
            "UnifiedMessageType": {
                "methods": [],
                "docstring": "Message types for unified messaging.",
                "base_classes": [
                    "Enum"
                ]
            },
            "UnifiedMessagePriority": {
                "methods": [],
                "docstring": "Message priorities for unified messaging.",
                "base_classes": [
                    "Enum"
                ]
            },
            "UnifiedMessageTag": {
                "methods": [],
                "docstring": "Message tags for unified messaging.",
                "base_classes": [
                    "Enum"
                ]
            },
            "UnifiedMessageStatus": {
                "methods": [],
                "docstring": "Message status for unified messaging.",
                "base_classes": [
                    "Enum"
                ]
            },
            "RecipientType": {
                "methods": [],
                "docstring": "Recipient types for unified messaging.",
                "base_classes": [
                    "Enum"
                ]
            },
            "SenderType": {
                "methods": [],
                "docstring": "Sender types for unified messaging.",
                "base_classes": [
                    "Enum"
                ]
            },
            "UnifiedMessage": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Unified message model.",
                "base_classes": []
            },
            "MessageDeliveryResult": {
                "methods": [],
                "docstring": "Result of message delivery attempt.",
                "base_classes": []
            },
            "BulkDeliveryResult": {
                "methods": [],
                "docstring": "Result of bulk message delivery.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\services\\models\\vector_models.py": {
        "language": ".py",
        "functions": [
            "from_dict",
            "to_dict"
        ],
        "classes": {
            "EmbeddingModel": {
                "methods": [],
                "docstring": "Supported embedding models.",
                "base_classes": [
                    "Enum"
                ]
            },
            "DocumentType": {
                "methods": [],
                "docstring": "Document types for vector database.",
                "base_classes": [
                    "Enum"
                ]
            },
            "SearchType": {
                "methods": [],
                "docstring": "Search types for vector database.",
                "base_classes": [
                    "Enum"
                ]
            },
            "VectorDocument": {
                "methods": [
                    "from_dict",
                    "to_dict"
                ],
                "docstring": "Vector document representation.",
                "base_classes": []
            },
            "EmbeddingResult": {
                "methods": [],
                "docstring": "Result of embedding operation.",
                "base_classes": []
            },
            "SearchQuery": {
                "methods": [],
                "docstring": "Search query for vector database.",
                "base_classes": []
            },
            "SearchResult": {
                "methods": [],
                "docstring": "Result of vector database search.",
                "base_classes": []
            },
            "SimilaritySearchResult": {
                "methods": [],
                "docstring": "Result of similarity search.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\services\\messaging_cli_coordinate_management\\coordinate_capture.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "interactive_coordinate_capture",
            "capture_onboarding_only",
            "capture_chat_only",
            "on_move",
            "on_click",
            "on_move",
            "on_move"
        ],
        "classes": {
            "CoordinateCapture": {
                "methods": [
                    "__init__",
                    "interactive_coordinate_capture",
                    "capture_onboarding_only",
                    "capture_chat_only"
                ],
                "docstring": "Capture screen coordinates for agents using pynput.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\services\\messaging_cli_coordinate_management\\utilities.py": {
        "language": ".py",
        "functions": [
            "load_coords_file"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\services\\quality\\config.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\messaging_cli_coordinate_management\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\performance_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_config",
            "analyze_agent_performance",
            "get_integration_health",
            "_calculate_task_completion_rate",
            "_calculate_coordination_effectiveness",
            "_calculate_knowledge_utilization",
            "_generate_performance_recommendations",
            "_check_recent_activity",
            "_check_swarm_sync_status",
            "_get_fallback_performance"
        ],
        "classes": {
            "PerformanceAnalyzer": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "analyze_agent_performance",
                    "get_integration_health",
                    "_calculate_task_completion_rate",
                    "_calculate_coordination_effectiveness",
                    "_calculate_knowledge_utilization",
                    "_generate_performance_recommendations",
                    "_check_recent_activity",
                    "_check_swarm_sync_status",
                    "_get_fallback_performance"
                ],
                "docstring": "Handles performance analysis operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\services\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\messaging_cli_coordinate_management\\validators.py": {
        "language": ".py",
        "functions": [
            "parse_coord_string"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\services\\handlers\\utility_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "check_status",
            "list_agents",
            "get_coordinates",
            "get_history"
        ],
        "classes": {
            "UtilityHandler": {
                "methods": [
                    "__init__",
                    "check_status",
                    "list_agents",
                    "get_coordinates",
                    "get_history"
                ],
                "docstring": "Handles utility commands for messaging system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\services\\protocol\\routers\\route_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_route_options",
            "_select_fastest_route",
            "_calculate_route_score",
            "_generate_route_key",
            "update_route_performance",
            "get_route_performance_summary",
            "get_route_usage_stats",
            "clear_performance_data",
            "get_analyzer_status"
        ],
        "classes": {
            "RouteAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_route_options",
                    "_select_fastest_route",
                    "_calculate_route_score",
                    "_generate_route_key",
                    "update_route_performance",
                    "get_route_performance_summary",
                    "get_route_usage_stats",
                    "clear_performance_data",
                    "get_analyzer_status"
                ],
                "docstring": "Analyzes route options and calculates scores.\n\nHandles route analysis, scoring, and selection logic for message routing decisions.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\services\\messaging_cli_coordinate_management\\coordinate_repository.py": {
        "language": ".py",
        "functions": [
            "_load_coords",
            "_save_coords",
            "update_agent_coordinates",
            "update_all_agents_coordinates",
            "update_onboarding_coordinates",
            "update_chat_coordinates",
            "update_all_onboarding_coordinates",
            "update_all_chat_coordinates",
            "get_chat_input_xy",
            "get_onboarding_input_xy"
        ],
        "classes": {
            "CoordinateRepository": {
                "methods": [
                    "_load_coords",
                    "_save_coords",
                    "update_agent_coordinates",
                    "update_all_agents_coordinates",
                    "update_onboarding_coordinates",
                    "update_chat_coordinates",
                    "update_all_onboarding_coordinates",
                    "update_all_chat_coordinates",
                    "get_chat_input_xy",
                    "get_onboarding_input_xy"
                ],
                "docstring": "Read and write agent coordinates from a JSON file.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\services\\utils\\agent_registry.py": {
        "language": ".py",
        "functions": [
            "list_agents"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\services\\messaging_status\\tracker.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "track_message_sent",
            "track_message_delivered",
            "track_message_failed",
            "track_system_error",
            "track_performance_metric",
            "get_status_summary",
            "get_agent_status",
            "get_performance_metrics",
            "generate_report",
            "get_agent_report",
            "clear_old_data"
        ],
        "classes": {
            "MessagingStatusTracker": {
                "methods": [
                    "__init__",
                    "track_message_sent",
                    "track_message_delivered",
                    "track_message_failed",
                    "track_system_error",
                    "track_performance_metric",
                    "get_status_summary",
                    "get_agent_status",
                    "get_performance_metrics",
                    "generate_report",
                    "get_agent_report",
                    "clear_old_data"
                ],
                "docstring": "Main status tracking engine for messaging system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "src\\services\\utils\\vector_config_utils.py": {
        "language": ".py",
        "functions": [
            "load_simple_config"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\services\\vector_database\\status_indexer.py": {
        "language": ".py",
        "functions": [
            "load_status",
            "index_all_statuses"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\services\\vector_database\\__init__.py": {
        "language": ".py",
        "functions": [
            "get_vector_database_service",
            "search_vector_database",
            "add_document_to_vector_db"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\services\\vector_database\\vector_database_orchestrator.py": {
        "language": ".py",
        "functions": [
            "get_vector_database_service",
            "add_document_to_vector_db",
            "search_vector_database",
            "get_vector_database_stats",
            "__init__",
            "add_document",
            "search_documents",
            "get_document",
            "delete_document",
            "create_collection",
            "get_stats",
            "get_status"
        ],
        "classes": {
            "VectorDatabaseService": {
                "methods": [
                    "__init__",
                    "add_document",
                    "search_documents",
                    "get_document",
                    "delete_document",
                    "create_collection",
                    "get_stats",
                    "get_status"
                ],
                "docstring": "Service interface for vector database operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\services\\vector_messaging\\simple_indexing.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "index_document",
            "search_documents",
            "get_document",
            "get_index_stats"
        ],
        "classes": {
            "SimpleDocumentIndexer": {
                "methods": [
                    "__init__",
                    "index_document",
                    "search_documents",
                    "get_document",
                    "get_index_stats"
                ],
                "docstring": "Simple document indexing utilities.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\services\\vector_database\\vector_database_models.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "to_dict"
        ],
        "classes": {
            "DocumentType": {
                "methods": [],
                "docstring": "Types of documents stored in vector database.",
                "base_classes": [
                    "Enum"
                ]
            },
            "VectorDocument": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Represents a document stored in the vector database.",
                "base_classes": []
            },
            "CollectionConfig": {
                "methods": [],
                "docstring": "Configuration for a document collection.",
                "base_classes": []
            },
            "VectorDatabaseConfig": {
                "methods": [],
                "docstring": "Configuration for vector database engine.",
                "base_classes": []
            },
            "SearchQuery": {
                "methods": [],
                "docstring": "Represents a search query against the vector database.",
                "base_classes": []
            },
            "SearchResult": {
                "methods": [],
                "docstring": "Result of a vector database search.",
                "base_classes": []
            },
            "VectorDatabaseResult": {
                "methods": [],
                "docstring": "Result of a vector database operation.",
                "base_classes": []
            },
            "VectorDatabaseStats": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Statistics for vector database operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\services\\vector_database\\vector_database_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_collection",
            "get_collection",
            "add_document",
            "search_documents",
            "get_document",
            "delete_document",
            "clear_collection",
            "get_stats",
            "get_performance_report",
            "optimize",
            "get_status"
        ],
        "classes": {
            "_Collection": {
                "methods": [],
                "docstring": "Internal representation of a document collection.",
                "base_classes": []
            },
            "VectorDatabaseEngine": {
                "methods": [
                    "__init__",
                    "create_collection",
                    "get_collection",
                    "add_document",
                    "search_documents",
                    "get_document",
                    "delete_document",
                    "clear_collection",
                    "get_stats",
                    "get_performance_report",
                    "optimize",
                    "get_status"
                ],
                "docstring": "In-memory engine for vector database operations.\n\nThis module is the authoritative implementation and should be treated as SSOT.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "src\\services\\vector_messaging\\agent_enhancement_integrator_core.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "integrate_agent6_enhancements",
            "integrate_agent7_enhancements",
            "integrate_agent8_enhancements",
            "_vectorize_pattern",
            "_get_agent6_patterns",
            "_get_agent7_patterns",
            "_get_agent8_patterns"
        ],
        "classes": {
            "AgentEnhancementIntegratorCore": {
                "methods": [
                    "__init__",
                    "integrate_agent6_enhancements",
                    "integrate_agent7_enhancements",
                    "integrate_agent8_enhancements",
                    "_vectorize_pattern",
                    "_get_agent6_patterns",
                    "_get_agent7_patterns",
                    "_get_agent8_patterns"
                ],
                "docstring": "Core integration functionality for agent enhancement patterns.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\services\\vector_messaging\\agent_enhancement_integrator.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\vector_messaging\\search_query_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "search_messages",
            "search_devlogs",
            "search_all",
            "get_related_messages",
            "search_by_metadata",
            "get_search_summary",
            "get_search_metrics"
        ],
        "classes": {
            "SearchQueryEngine": {
                "methods": [
                    "__init__",
                    "search_messages",
                    "search_devlogs",
                    "search_all",
                    "get_related_messages",
                    "search_by_metadata",
                    "get_search_summary",
                    "get_search_metrics"
                ],
                "docstring": "Engine for performing search operations on vector database.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\agent_registry.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "list_agents",
            "_status_path",
            "_onboard_path",
            "reset_statuses",
            "clear_onboarding_flags",
            "force_onboard",
            "verify_onboarded",
            "synchronize",
            "save_last_onboarding_message",
            "get_onboarding_coords"
        ],
        "classes": {
            "AgentRegistry": {
                "methods": [
                    "__init__",
                    "list_agents",
                    "_status_path",
                    "_onboard_path",
                    "reset_statuses",
                    "clear_onboarding_flags",
                    "force_onboard",
                    "verify_onboarded",
                    "synchronize",
                    "save_last_onboarding_message",
                    "get_onboarding_coords"
                ],
                "docstring": null,
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\services\\vector_messaging\\agent_enhancement_integrator_operations.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "search_enhancement_patterns",
            "get_agent_enhancement_summary",
            "optimize_agent_communication",
            "get_swarm_enhancement_analytics",
            "cleanup_old_patterns"
        ],
        "classes": {
            "AgentEnhancementIntegratorOperations": {
                "methods": [
                    "__init__",
                    "search_enhancement_patterns",
                    "get_agent_enhancement_summary",
                    "optimize_agent_communication",
                    "get_swarm_enhancement_analytics",
                    "cleanup_old_patterns"
                ],
                "docstring": "Extended operations for agent enhancement pattern integration.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\services\\overnight_autonomous_system\\__init__.py": {
        "language": ".py",
        "functions": [
            "start_overnight_cycle",
            "__init__",
            "start_operations",
            "stop_operations",
            "get_status",
            "_run_operations",
            "_perform_maintenance_tasks",
            "_check_system_health",
            "_process_pending_operations"
        ],
        "classes": {
            "OvernightAutonomousSystem": {
                "methods": [
                    "__init__",
                    "start_operations",
                    "stop_operations",
                    "get_status",
                    "_run_operations",
                    "_perform_maintenance_tasks",
                    "_check_system_health",
                    "_process_pending_operations"
                ],
                "docstring": "Autonomous system for overnight operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "src\\agent_registry\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\agent_documentation_service.py": {
        "language": ".py",
        "functions": [
            "create_agent_documentation_service",
            "__init__",
            "set_agent_context",
            "search_documentation",
            "get_agent_relevant_docs",
            "get_documentation_summary",
            "get_search_suggestions"
        ],
        "classes": {
            "AgentDocumentationService": {
                "methods": [
                    "__init__",
                    "set_agent_context",
                    "search_documentation",
                    "get_agent_relevant_docs",
                    "get_documentation_summary",
                    "get_search_suggestions"
                ],
                "docstring": "Simple documentation service for AI agents.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 13
    },
    "src\\services\\utils\\messaging_validation_utils.py": {
        "language": ".py",
        "functions": [
            "validate_message_structure",
            "validate_message_config",
            "validate_agent_id",
            "validate_content_length",
            "_is_valid_message_type",
            "_is_valid_priority",
            "_is_valid_tag",
            "get_validation_summary",
            "validate_coordinates_async"
        ],
        "classes": {
            "MessagingValidationUtils": {
                "methods": [
                    "validate_message_structure",
                    "validate_message_config",
                    "validate_agent_id",
                    "validate_content_length",
                    "_is_valid_message_type",
                    "_is_valid_priority",
                    "_is_valid_tag",
                    "get_validation_summary",
                    "validate_coordinates_async"
                ],
                "docstring": "Shared messaging validation utilities to eliminate DRY violations.\n\nProvides common validation functionality for:\n- Message structure validation\n- Configuration validation\n- Content validation\n- Agent ID validation",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\core\\agent_docs_integration.py": {
        "language": ".py",
        "functions": [
            "create_agent_docs",
            "__init__",
            "_initialize",
            "search_docs",
            "get_doc",
            "get_agent_context",
            "get_status"
        ],
        "classes": {
            "AgentDocs": {
                "methods": [
                    "__init__",
                    "_initialize",
                    "search_docs",
                    "get_doc",
                    "get_agent_context",
                    "get_status"
                ],
                "docstring": "Simple interface for AI agents to access documentation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 13
    },
    "src\\services\\messaging_cli_utils\\__init__.py": {
        "language": ".py",
        "functions": [
            "load_config",
            "save_config",
            "validate_message_content",
            "format_agent_list",
            "parse_coordinate_string",
            "read_json"
        ],
        "classes": {
            "MessagingCLIUtils": {
                "methods": [
                    "load_config",
                    "save_config",
                    "validate_message_content",
                    "format_agent_list",
                    "parse_coordinate_string",
                    "read_json"
                ],
                "docstring": "Utility functions for messaging CLI.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\core\\metrics.py": {
        "language": ".py",
        "functions": [
            "gather_run_metrics",
            "__init__",
            "record",
            "get",
            "all",
            "total_operations",
            "successful_operations",
            "failed_operations",
            "record_success",
            "record_failure",
            "__init__",
            "increment",
            "get"
        ],
        "classes": {
            "Metric": {
                "methods": [],
                "docstring": "Representation of a single metric value.",
                "base_classes": []
            },
            "MetricsCollector": {
                "methods": [
                    "__init__",
                    "record",
                    "get",
                    "all",
                    "total_operations",
                    "successful_operations",
                    "failed_operations",
                    "record_success",
                    "record_failure"
                ],
                "docstring": "Store and retrieve metric values in-memory.",
                "base_classes": []
            },
            "CounterMetrics": {
                "methods": [
                    "__init__",
                    "increment",
                    "get"
                ],
                "docstring": "Lightweight counter-based metrics manager.",
                "base_classes": []
            },
            "OptimizationRunMetrics": {
                "methods": [],
                "docstring": "Metrics captured for a single optimization run.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 25
    },
    "src\\services\\utility_command_handler\\__init__.py": {
        "language": ".py",
        "functions": [
            "get_coordinates",
            "update_coordinates",
            "__init__",
            "get_coordinates",
            "update_coordinates",
            "__init__",
            "can_handle",
            "handle",
            "handle_utility_commands",
            "handle_coordinates_command",
            "handle_check_status_command",
            "handle_list_agents_command",
            "handle_history_command",
            "handle_check_responses_command",
            "handle_command"
        ],
        "classes": {
            "ICoordinateManager": {
                "methods": [
                    "get_coordinates",
                    "update_coordinates"
                ],
                "docstring": "Interface for coordinate management.",
                "base_classes": [
                    "Protocol"
                ]
            },
            "CoordinateManager": {
                "methods": [
                    "__init__",
                    "get_coordinates",
                    "update_coordinates"
                ],
                "docstring": "Coordinate manager implementation.",
                "base_classes": []
            },
            "UtilityCommandHandler": {
                "methods": [
                    "__init__",
                    "can_handle",
                    "handle",
                    "handle_utility_commands",
                    "handle_coordinates_command",
                    "handle_check_status_command",
                    "handle_list_agents_command",
                    "handle_history_command",
                    "handle_check_responses_command",
                    "handle_command"
                ],
                "docstring": "Handles utility commands.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 30
    },
    "src\\core\\documentation_search_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "search",
            "get_relevant_docs"
        ],
        "classes": {
            "DocumentationSearchService": {
                "methods": [
                    "__init__",
                    "search",
                    "get_relevant_docs"
                ],
                "docstring": "Service for searching documentation with semantic similarity.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\core\\unified_logging_system_engine.py": {
        "language": ".py",
        "functions": [
            "operation_start",
            "operation_complete",
            "operation_failed",
            "data_processed",
            "validation_passed",
            "validation_failed",
            "__init__",
            "_setup_logger",
            "log",
            "debug",
            "info",
            "warning",
            "error",
            "critical"
        ],
        "classes": {
            "LoggingTemplates": {
                "methods": [
                    "operation_start",
                    "operation_complete",
                    "operation_failed",
                    "data_processed",
                    "validation_passed",
                    "validation_failed"
                ],
                "docstring": "Unified logging message templates.",
                "base_classes": []
            },
            "UnifiedLoggingEngine": {
                "methods": [
                    "__init__",
                    "_setup_logger",
                    "log",
                    "debug",
                    "info",
                    "warning",
                    "error",
                    "critical"
                ],
                "docstring": "Core engine for unified logging operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "src\\core\\unified_logging_system_models.py": {
        "language": ".py",
        "functions": [
            "__post_init__"
        ],
        "classes": {
            "LogLevel": {
                "methods": [],
                "docstring": "Standardized log levels.",
                "base_classes": [
                    "Enum"
                ]
            },
            "LogEntry": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Log entry data structure.",
                "base_classes": []
            },
            "LoggingConfig": {
                "methods": [],
                "docstring": "Logging configuration.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\core\\vector_database.py": {
        "language": ".py",
        "functions": [
            "get_connection",
            "upsert_agent_status",
            "fetch_agent_status"
        ],
        "classes": {
            "CollectionConfig": {
                "methods": [],
                "docstring": "Configuration for vector database collections.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "VectorDocument": {
                "methods": [],
                "docstring": "Document for vector database operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "DocumentType": {
                "methods": [],
                "docstring": "Document types for vector database.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "EmbeddingModel": {
                "methods": [],
                "docstring": "Embedding model types.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SearchQuery": {
                "methods": [],
                "docstring": "Query for vector search operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SearchType": {
                "methods": [],
                "docstring": "Search types for vector operations.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SearchResult": {
                "methods": [],
                "docstring": "Result from vector search operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "VectorDatabaseStats": {
                "methods": [],
                "docstring": "Statistics for vector database operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 3
    },
    "src\\core\\messaging_integration_optimizer_orchestrator.py": {
        "language": ".py",
        "functions": [
            "get_messaging_integration_optimizer",
            "__init__",
            "start_optimizer",
            "stop_optimizer",
            "get_optimization_summary",
            "is_active",
            "config",
            "current_metrics"
        ],
        "classes": {
            "MessagingIntegrationOptimizer": {
                "methods": [
                    "__init__",
                    "start_optimizer",
                    "stop_optimizer",
                    "get_optimization_summary",
                    "is_active",
                    "config",
                    "current_metrics"
                ],
                "docstring": "Streamlined messaging integration optimizer for V2 compliance.\n\nProvides comprehensive messaging optimization capabilities while maintaining all\noriginal functionality through efficient modular design.\n\nThis class serves as a backward-compatible wrapper around the new modular\narchitecture for seamless integration.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "src\\core\\coordinator_models.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "update_metadata",
            "is_active",
            "to_dict",
            "to_dict",
            "to_dict",
            "__post_init__",
            "get",
            "update",
            "validate"
        ],
        "classes": {
            "CoordinationStatus": {
                "methods": [],
                "docstring": "Coordination status enumeration.",
                "base_classes": [
                    "Enum"
                ]
            },
            "TargetType": {
                "methods": [],
                "docstring": "Coordination target type enumeration.",
                "base_classes": [
                    "Enum"
                ]
            },
            "Priority": {
                "methods": [],
                "docstring": "Priority level enumeration.",
                "base_classes": [
                    "Enum"
                ]
            },
            "CoordinationTarget": {
                "methods": [
                    "__post_init__",
                    "update_metadata",
                    "is_active",
                    "to_dict"
                ],
                "docstring": "Represents a coordination target with enhanced metadata.",
                "base_classes": []
            },
            "CoordinationResult": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Result of a coordination operation.",
                "base_classes": []
            },
            "CoordinatorStatus": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Comprehensive coordinator status information.",
                "base_classes": []
            },
            "CoordinatorConfig": {
                "methods": [
                    "__post_init__",
                    "get",
                    "update",
                    "validate"
                ],
                "docstring": "Coordinator configuration with validation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\core\\coordinator_registry.py": {
        "language": ".py",
        "functions": [
            "get_coordinator_registry",
            "__init__",
            "register_coordinator",
            "get_coordinator",
            "get_all_coordinators",
            "unregister_coordinator",
            "get_coordinator_statuses",
            "shutdown_all_coordinators",
            "get_coordinator_count"
        ],
        "classes": {
            "CoordinatorRegistry": {
                "methods": [
                    "__init__",
                    "register_coordinator",
                    "get_coordinator",
                    "get_all_coordinators",
                    "unregister_coordinator",
                    "get_coordinator_statuses",
                    "shutdown_all_coordinators",
                    "get_coordinator_count"
                ],
                "docstring": "Concrete implementation of coordinator registry.",
                "base_classes": [
                    "ICoordinatorRegistry"
                ]
            }
        },
        "routes": [],
        "complexity": 17
    },
    "src\\core\\coordinator_interfaces.py": {
        "language": ".py",
        "functions": [
            "info",
            "warning",
            "error",
            "name",
            "get_status",
            "shutdown",
            "register_coordinator",
            "get_coordinator",
            "get_all_coordinators",
            "unregister_coordinator",
            "get_coordinator_statuses",
            "shutdown_all_coordinators",
            "get_coordinator_count",
            "parse_status",
            "can_parse_status"
        ],
        "classes": {
            "ICoordinatorLogger": {
                "methods": [
                    "info",
                    "warning",
                    "error"
                ],
                "docstring": "Interface for coordinator logging operations.",
                "base_classes": [
                    "Protocol"
                ]
            },
            "ICoordinator": {
                "methods": [
                    "name",
                    "get_status",
                    "shutdown"
                ],
                "docstring": "Interface for coordinator instances.",
                "base_classes": [
                    "Protocol"
                ]
            },
            "ICoordinatorRegistry": {
                "methods": [
                    "register_coordinator",
                    "get_coordinator",
                    "get_all_coordinators",
                    "unregister_coordinator",
                    "get_coordinator_statuses",
                    "shutdown_all_coordinators",
                    "get_coordinator_count"
                ],
                "docstring": "Abstract interface for coordinator registry operations.",
                "base_classes": [
                    "ABC"
                ]
            },
            "ICoordinatorStatusParser": {
                "methods": [
                    "parse_status",
                    "can_parse_status"
                ],
                "docstring": "Interface for parsing coordinator status.",
                "base_classes": [
                    "Protocol"
                ]
            }
        },
        "routes": [],
        "complexity": 30
    },
    "src\\core\\coordinate_loader.py": {
        "language": ".py",
        "functions": [
            "_load_coordinates",
            "get_coordinate_loader",
            "__init__",
            "get_all_agents",
            "is_agent_active",
            "get_chat_coordinates",
            "get_onboarding_coordinates",
            "get_agent_description",
            "get_agent_info"
        ],
        "classes": {
            "CoordinateLoader": {
                "methods": [
                    "__init__",
                    "get_all_agents",
                    "is_agent_active",
                    "get_chat_coordinates",
                    "get_onboarding_coordinates",
                    "get_agent_description",
                    "get_agent_info"
                ],
                "docstring": "Mock coordinate loader for testing.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\documentation_indexing_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "index_project_documentation",
            "index_specific_files",
            "index_directory",
            "reindex_file",
            "get_indexing_status"
        ],
        "classes": {
            "DocumentationIndexingService": {
                "methods": [
                    "__init__",
                    "index_project_documentation",
                    "index_specific_files",
                    "index_directory",
                    "reindex_file",
                    "get_indexing_status"
                ],
                "docstring": "Service for indexing project documentation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\core\\messaging_optimizer_models.py": {
        "language": ".py",
        "functions": [
            "validate",
            "to_dict"
        ],
        "classes": {
            "DeliveryStrategy": {
                "methods": [],
                "docstring": "Delivery strategies for messaging.",
                "base_classes": [
                    "Enum"
                ]
            },
            "OptimizationMode": {
                "methods": [],
                "docstring": "Optimization modes.",
                "base_classes": [
                    "Enum"
                ]
            },
            "MessagingConfig": {
                "methods": [
                    "validate"
                ],
                "docstring": "Configuration for messaging optimization.",
                "base_classes": []
            },
            "MessagingMetrics": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Metrics for messaging performance.",
                "base_classes": []
            },
            "OptimizationResult": {
                "methods": [],
                "docstring": "Result of an optimization operation.",
                "base_classes": []
            },
            "SystemInfo": {
                "methods": [],
                "docstring": "System information for optimization summary.",
                "base_classes": []
            },
            "ConfigurationInfo": {
                "methods": [],
                "docstring": "Configuration information for optimization summary.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\core\\search_history_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_search",
            "get_search_suggestions",
            "get_agent_search_history",
            "clear_history",
            "get_statistics"
        ],
        "classes": {
            "SearchHistoryService": {
                "methods": [
                    "__init__",
                    "add_search",
                    "get_search_suggestions",
                    "get_agent_search_history",
                    "clear_history",
                    "get_statistics"
                ],
                "docstring": "Service for managing search history and providing query suggestions.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\core\\message_queue.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "enqueue",
            "_calculate_priority_score",
            "dequeue",
            "mark_delivered",
            "mark_failed",
            "get_statistics",
            "cleanup_expired",
            "get_health_status",
            "__init__",
            "stop_processing",
            "_enqueue_operation",
            "_dequeue_operation",
            "_mark_delivered_operation",
            "_mark_failed_operation",
            "_get_statistics_operation",
            "_cleanup_operation",
            "_get_health_operation"
        ],
        "classes": {
            "QueueConfig": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Configuration for message queue.",
                "base_classes": []
            },
            "MessageQueue": {
                "methods": [
                    "__init__",
                    "enqueue",
                    "_calculate_priority_score",
                    "dequeue",
                    "mark_delivered",
                    "mark_failed",
                    "get_statistics",
                    "cleanup_expired",
                    "get_health_status"
                ],
                "docstring": "SOLID-compliant message queue with dependency injection.\n\nProvides reliable message queuing with automatic retry and cleanup.\nFollows Single Responsibility Principle with separate persistence layer.",
                "base_classes": [
                    "IMessageQueue"
                ]
            },
            "AsyncQueueProcessor": {
                "methods": [
                    "__init__",
                    "stop_processing"
                ],
                "docstring": "SOLID-compliant asynchronous queue processor.\n\nProcesses queued messages with retry logic and error handling.\nFollows Single Responsibility Principle with focused processing logic.",
                "base_classes": [
                    "IQueueProcessor"
                ]
            }
        },
        "routes": [],
        "complexity": 31
    },
    "src\\core\\unified_import_system.py": {
        "language": ".py",
        "functions": [
            "get_unified_import_system",
            "__init__"
        ],
        "classes": {
            "UnifiedImportSystem": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Unified import system using mixin composition pattern.\n\nProvides centralized access to all common imports and utilities.\nUses multiple inheritance from focused mixins to reduce complexity.\n\nMixins:\n- CoreImportsMixin: os, sys, json, logging, threading, time, re, datetime, Path\n- TypingImportsMixin: Any, Dict, List, Optional, Union, Callable, Tuple\n- SpecialImportsMixin: dataclass, field, Enum, ABC, abstractmethod\n- ImportUtilitiesMixin: Module introspection and validation\n- ImportRegistryMixin: Import caching and history\n\nV2 Compliance: Mixin composition reduces complexity from 93 to <20",
                "base_classes": [
                    "CoreImportsMixin",
                    "TypingImportsMixin",
                    "SpecialImportsMixin",
                    "ImportUtilitiesMixin",
                    "ImportRegistryMixin"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 3
    },
    "src\\core\\messaging_optimizer_orchestrator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_optimizer",
            "stop_optimizer",
            "get_optimization_summary"
        ],
        "classes": {
            "MessagingOptimizationOrchestrator": {
                "methods": [
                    "__init__",
                    "start_optimizer",
                    "stop_optimizer",
                    "get_optimization_summary"
                ],
                "docstring": "Orchestrates messaging integration optimization operations.\n\nCoordinates all optimization engines and provides unified interface.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\analytics\\engines\\caching_engine.py": {
        "language": ".py",
        "functions": [
            "create_caching_engine",
            "__init__",
            "get",
            "set",
            "_update_access",
            "_evict_lru",
            "delete",
            "clear",
            "get_stats",
            "get_status"
        ],
        "classes": {
            "CachingEngine": {
                "methods": [
                    "__init__",
                    "get",
                    "set",
                    "_update_access",
                    "_evict_lru",
                    "delete",
                    "clear",
                    "get_stats",
                    "get_status"
                ],
                "docstring": "Simple caching engine with memory leak prevention.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 19
    },
    "src\\core\\message_queue_persistence.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_entries",
            "save_entries",
            "atomic_operation",
            "__init__",
            "to_dict",
            "from_dict"
        ],
        "classes": {
            "FileQueuePersistence": {
                "methods": [
                    "__init__",
                    "load_entries",
                    "save_entries",
                    "atomic_operation"
                ],
                "docstring": "Handles file-based queue persistence operations.",
                "base_classes": [
                    "IQueuePersistence"
                ]
            },
            "QueueEntry": {
                "methods": [
                    "__init__",
                    "to_dict",
                    "from_dict"
                ],
                "docstring": "Queue entry data structure.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\core\\analytics\\engines\\batch_analytics_engine.py": {
        "language": ".py",
        "functions": [
            "create_batch_analytics_engine",
            "__init__",
            "process_batch",
            "_process_items",
            "_calculate_metrics",
            "get_stats",
            "clear_stats",
            "get_status"
        ],
        "classes": {
            "BatchAnalyticsEngine": {
                "methods": [
                    "__init__",
                    "process_batch",
                    "_process_items",
                    "_calculate_metrics",
                    "get_stats",
                    "clear_stats",
                    "get_status"
                ],
                "docstring": "Simple batch analytics processing engine.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "src\\core\\analytics\\engines\\realtime_analytics_engine.py": {
        "language": ".py",
        "functions": [
            "create_realtime_analytics_engine",
            "__init__",
            "add_data",
            "get_queue_size",
            "get_stats",
            "reset_stats",
            "get_status"
        ],
        "classes": {
            "RealtimeAnalyticsEngine": {
                "methods": [
                    "__init__",
                    "add_data",
                    "get_queue_size",
                    "get_stats",
                    "reset_stats",
                    "get_status"
                ],
                "docstring": "Simple real-time analytics processing engine.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 13
    },
    "src\\core\\analytics\\engines\\metrics_engine.py": {
        "language": ".py",
        "functions": [
            "create_metrics_engine",
            "__init__",
            "record_metric",
            "increment_metric",
            "get_metric",
            "get_all_metrics",
            "record_performance",
            "record_error",
            "get_performance_summary",
            "get_error_summary",
            "clear_metrics",
            "get_status"
        ],
        "classes": {
            "MetricsEngine": {
                "methods": [
                    "__init__",
                    "record_metric",
                    "increment_metric",
                    "get_metric",
                    "get_all_metrics",
                    "record_performance",
                    "record_error",
                    "get_performance_summary",
                    "get_error_summary",
                    "clear_metrics",
                    "get_status"
                ],
                "docstring": "Simple metrics collection and monitoring engine.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 23
    },
    "src\\core\\analytics\\intelligence\\business_intelligence_engine_core.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_insights",
            "_analyze_data",
            "_get_numeric_fields",
            "_analyze_field",
            "_generate_recommendations",
            "_calculate_kpis",
            "get_insights_history",
            "clear_insights",
            "get_metrics",
            "update_metrics"
        ],
        "classes": {
            "BusinessIntelligenceEngineCore": {
                "methods": [
                    "__init__",
                    "generate_insights",
                    "_analyze_data",
                    "_get_numeric_fields",
                    "_analyze_field",
                    "_generate_recommendations",
                    "_calculate_kpis",
                    "get_insights_history",
                    "clear_insights",
                    "get_metrics",
                    "update_metrics"
                ],
                "docstring": "Core business intelligence engine functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\core\\unified_data_processing_system.py": {
        "language": ".py",
        "functions": [
            "read_json",
            "write_json",
            "ensure_directory",
            "resolve_path",
            "write_file"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "src\\core\\message_queue_interfaces.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\messaging_optimizer_engines.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "update_performance_metrics",
            "get_metrics_history"
        ],
        "classes": {
            "BatchProcessor": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Handles message batching operations.",
                "base_classes": []
            },
            "AsyncDeliveryEngine": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Handles async delivery optimization.",
                "base_classes": []
            },
            "RetryEngine": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Handles retry mechanism optimization.",
                "base_classes": []
            },
            "ConnectionPoolEngine": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Handles connection pool optimization.",
                "base_classes": []
            },
            "MetricsEngine": {
                "methods": [
                    "__init__",
                    "update_performance_metrics",
                    "get_metrics_history"
                ],
                "docstring": "Handles performance metrics calculation and updates.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\core\\coordinator_status_parser.py": {
        "language": ".py",
        "functions": [
            "parse_status",
            "can_parse_status",
            "__init__",
            "get_coordinators_by_status",
            "_matches_status"
        ],
        "classes": {
            "CoordinatorStatusParser": {
                "methods": [
                    "parse_status",
                    "can_parse_status"
                ],
                "docstring": "Parses coordinator status information.",
                "base_classes": [
                    "ICoordinatorStatusParser"
                ]
            },
            "CoordinatorStatusFilter": {
                "methods": [
                    "__init__",
                    "get_coordinators_by_status",
                    "_matches_status"
                ],
                "docstring": "Filters coordinators by status.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\analytics\\intelligence\\pattern_analysis\\anomaly_detector.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "detect_anomalies",
            "_detect_statistical_anomalies",
            "detect_outliers",
            "_detect_outliers_iqr",
            "_detect_outliers_zscore"
        ],
        "classes": {
            "AnomalyDetector": {
                "methods": [
                    "__init__",
                    "detect_anomalies",
                    "_detect_statistical_anomalies",
                    "detect_outliers",
                    "_detect_outliers_iqr",
                    "_detect_outliers_zscore"
                ],
                "docstring": "Anomaly detection functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\core\\analytics\\intelligence\\business_intelligence_engine.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "BusinessIntelligenceEngine": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Unified business intelligence engine with core and operations functionality.",
                "base_classes": [
                    "BusinessIntelligenceEngineCore",
                    "BusinessIntelligenceEngineOperations"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\core\\analytics\\intelligence\\pattern_analysis\\pattern_extractor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "extract_patterns",
            "_extract_frequency_patterns",
            "_extract_value_patterns",
            "_extract_temporal_patterns"
        ],
        "classes": {
            "PatternExtractor": {
                "methods": [
                    "__init__",
                    "extract_patterns",
                    "_extract_frequency_patterns",
                    "_extract_value_patterns",
                    "_extract_temporal_patterns"
                ],
                "docstring": "Pattern extraction functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\analytics\\orchestrators\\coordination_analytics_orchestrator.py": {
        "language": ".py",
        "functions": [
            "create_coordination_analytics_system",
            "__init__",
            "start",
            "stop",
            "process_analytics",
            "_generate_recommendations",
            "get_analytics_report",
            "get_status",
            "reset_stats"
        ],
        "classes": {
            "CoordinationAnalyticsSystem": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "process_analytics",
                    "_generate_recommendations",
                    "get_analytics_report",
                    "get_status",
                    "reset_stats"
                ],
                "docstring": "Simple coordination analytics orchestrator.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "src\\core\\analytics\\prediction\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\analytics\\prediction\\base_analyzer.py": {
        "language": ".py",
        "functions": [
            "normalize_probability",
            "confidence_label",
            "confidence_level"
        ],
        "classes": {
            "BasePredictionAnalyzer": {
                "methods": [
                    "normalize_probability",
                    "confidence_label",
                    "confidence_level"
                ],
                "docstring": "Shared utilities for prediction analyzers (SSOT).",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\core\\analytics\\models\\coordination_analytics_models.py": {
        "language": ".py",
        "functions": [
            "to_dict",
            "get_summary",
            "to_dict",
            "validate"
        ],
        "classes": {
            "AnalyticsMetric": {
                "methods": [],
                "docstring": "Analytics metric types.",
                "base_classes": [
                    "Enum"
                ]
            },
            "OptimizationRecommendation": {
                "methods": [],
                "docstring": "Optimization recommendation types.",
                "base_classes": [
                    "Enum"
                ]
            },
            "CoordinationAnalyticsData": {
                "methods": [
                    "to_dict",
                    "get_summary"
                ],
                "docstring": "Coordination analytics data structure.",
                "base_classes": []
            },
            "AnalyticsReport": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Analytics report structure.",
                "base_classes": []
            },
            "AnalyticsConfig": {
                "methods": [
                    "validate"
                ],
                "docstring": "Analytics configuration.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\analytics\\processors\\prediction_processor.py": {
        "language": ".py",
        "functions": [
            "create_prediction_processor",
            "__init__",
            "process_prediction",
            "_validate_prediction",
            "batch_process_predictions",
            "get_processing_stats",
            "reset_stats",
            "get_status"
        ],
        "classes": {
            "PredictionProcessor": {
                "methods": [
                    "__init__",
                    "process_prediction",
                    "_validate_prediction",
                    "batch_process_predictions",
                    "get_processing_stats",
                    "reset_stats",
                    "get_status"
                ],
                "docstring": "Simple prediction processor.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "src\\core\\analytics\\processors\\insight_processor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "process_insight",
            "_validate_insight",
            "batch_process_insights",
            "get_processing_stats",
            "reset_stats",
            "get_status"
        ],
        "classes": {
            "InsightProcessor": {
                "methods": [
                    "__init__",
                    "process_insight",
                    "_validate_insight",
                    "batch_process_insights",
                    "get_processing_stats",
                    "reset_stats",
                    "get_status"
                ],
                "docstring": "Simple analytics insight processor.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\core\\analytics\\intelligence\\pattern_analysis_engine.py": {
        "language": ".py",
        "functions": [
            "create_pattern_analysis_engine",
            "__init__",
            "analyze_patterns",
            "get_analysis_summary",
            "clear_analysis_history",
            "get_status",
            "extract_patterns",
            "analyze_trends",
            "detect_anomalies",
            "detect_outliers"
        ],
        "classes": {
            "PatternAnalysisEngine": {
                "methods": [
                    "__init__",
                    "analyze_patterns",
                    "get_analysis_summary",
                    "clear_analysis_history",
                    "get_status",
                    "extract_patterns",
                    "analyze_trends",
                    "detect_anomalies",
                    "detect_outliers"
                ],
                "docstring": "Simple pattern analysis engine - V2 compliant.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 19
    },
    "src\\core\\analytics\\processors\\prediction\\prediction_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_prediction",
            "_calculate_quality_score",
            "_generate_recommendations"
        ],
        "classes": {
            "PredictionAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_prediction",
                    "_calculate_quality_score",
                    "_generate_recommendations"
                ],
                "docstring": "Simple prediction analyzer using SSOT utilities.",
                "base_classes": [
                    "BasePredictionAnalyzer"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\analytics\\processors\\prediction\\prediction_calculator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "calculate_predicted_value",
            "calculate_confidence",
            "create_prediction_result"
        ],
        "classes": {
            "PredictionCalculator": {
                "methods": [
                    "__init__",
                    "calculate_predicted_value",
                    "calculate_confidence",
                    "create_prediction_result"
                ],
                "docstring": "Simple prediction calculator.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\analytics\\intelligence\\predictive_modeling_engine.py": {
        "language": ".py",
        "functions": [
            "create_predictive_modeling_engine",
            "__init__",
            "create_model",
            "train_model",
            "predict",
            "_simulate_prediction",
            "get_model_info",
            "get_all_models",
            "delete_model",
            "get_predictions_summary",
            "get_status"
        ],
        "classes": {
            "PredictiveModelingEngine": {
                "methods": [
                    "__init__",
                    "create_model",
                    "train_model",
                    "predict",
                    "_simulate_prediction",
                    "get_model_info",
                    "get_all_models",
                    "delete_model",
                    "get_predictions_summary",
                    "get_status"
                ],
                "docstring": "Simple predictive modeling engine.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 21
    },
    "src\\core\\analytics\\processors\\prediction\\prediction_validator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "validate_input_data",
            "validate_prediction_result"
        ],
        "classes": {
            "PredictionValidator": {
                "methods": [
                    "__init__",
                    "validate_input_data",
                    "validate_prediction_result"
                ],
                "docstring": "Simple prediction validator.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\core\\base\\executor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute",
            "_process",
            "_default_process_logic",
            "cleanup",
            "_default_process_logic",
            "_default_process_logic",
            "_default_process_logic"
        ],
        "classes": {
            "BaseExecutor": {
                "methods": [
                    "__init__",
                    "execute",
                    "_process",
                    "_default_process_logic",
                    "cleanup"
                ],
                "docstring": "Unified base class that eliminates duplicate logic patterns.\n\nThis class consolidates the common execute/process/cleanup pattern\nfound across multiple files in the codebase.\n\nCONSOLIDATED: Now uses UnifiedProcessingSystem to eliminate duplicate _process methods.",
                "base_classes": [
                    "ABC"
                ]
            },
            "DevlogExecutor": {
                "methods": [
                    "_default_process_logic"
                ],
                "docstring": "Devlog-specific implementation using unified processing system.",
                "base_classes": [
                    "BaseExecutor"
                ]
            },
            "CliExecutor": {
                "methods": [
                    "_default_process_logic"
                ],
                "docstring": "CLI-specific implementation using unified processing system.",
                "base_classes": [
                    "BaseExecutor"
                ]
            },
            "UtilsExecutor": {
                "methods": [
                    "_default_process_logic"
                ],
                "docstring": "Utils-specific implementation using unified processing system.",
                "base_classes": [
                    "BaseExecutor"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\baseline\\constants.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\common\\base_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "get_status",
            "clear_resources",
            "shutdown"
        ],
        "classes": {
            "BaseEngine": {
                "methods": [
                    "__init__",
                    "initialize",
                    "get_status",
                    "clear_resources",
                    "shutdown"
                ],
                "docstring": "Provide shared engine lifecycle management.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\consolidation\\utility_consolidation\\utility_consolidation_models.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "ConsolidationType": {
                "methods": [],
                "docstring": "Types of utility consolidation.",
                "base_classes": [
                    "Enum"
                ]
            },
            "UtilityFunction": {
                "methods": [],
                "docstring": "Utility function metadata.",
                "base_classes": []
            },
            "ConsolidationOpportunity": {
                "methods": [],
                "docstring": "Consolidation opportunity identified.",
                "base_classes": []
            },
            "ConsolidationResult": {
                "methods": [],
                "docstring": "Result of consolidation operation.",
                "base_classes": []
            },
            "ConsolidationConfig": {
                "methods": [],
                "docstring": "Configuration for consolidation operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\core\\consolidation\\utility_consolidation\\utility_consolidation_engine.py": {
        "language": ".py",
        "functions": [
            "create_utility_consolidation_engine",
            "__init__",
            "consolidate_utilities",
            "_merge_utilities",
            "_find_duplicates",
            "_optimize_utilities",
            "get_consolidation_summary",
            "clear_consolidation_history",
            "get_status"
        ],
        "classes": {
            "UtilityConsolidationEngine": {
                "methods": [
                    "__init__",
                    "consolidate_utilities",
                    "_merge_utilities",
                    "_find_duplicates",
                    "_optimize_utilities",
                    "get_consolidation_summary",
                    "clear_consolidation_history",
                    "get_status"
                ],
                "docstring": "Simple utility consolidation engine.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "src\\core\\consolidation\\utility_consolidation\\utility_consolidation_orchestrator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run_consolidation_analysis",
            "generate_consolidation_report",
            "execute_consolidation",
            "_create_consolidated_function",
            "_write_consolidated_file",
            "_update_references",
            "save_report",
            "get_opportunities_summary"
        ],
        "classes": {
            "UtilityConsolidationOrchestrator": {
                "methods": [
                    "__init__",
                    "run_consolidation_analysis",
                    "generate_consolidation_report",
                    "execute_consolidation",
                    "_create_consolidated_function",
                    "_write_consolidated_file",
                    "_update_references",
                    "save_report",
                    "get_opportunities_summary"
                ],
                "docstring": "Main orchestrator for utility consolidation operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\core\\constants\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\constants\\decision.py": {
        "language": ".py",
        "functions": [
            "validate_decision_constants",
            "get_decision_config_summary"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\core\\baseline\\metrics.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\constants\\fsm_enums.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "TransitionType": {
                "methods": [],
                "docstring": "Types of FSM transitions.",
                "base_classes": [
                    "Enum"
                ]
            },
            "StateStatus": {
                "methods": [],
                "docstring": "FSM state status values.",
                "base_classes": [
                    "Enum"
                ]
            },
            "TransitionStatus": {
                "methods": [],
                "docstring": "FSM transition status values.",
                "base_classes": [
                    "Enum"
                ]
            },
            "FSMErrorType": {
                "methods": [],
                "docstring": "FSM error types.",
                "base_classes": [
                    "Enum"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\core\\constants\\fsm_constants.py": {
        "language": ".py",
        "functions": [
            "get_config"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\core\\constants\\manager.py": {
        "language": ".py",
        "functions": [
            "_load_messaging_config",
            "get_completion_signal"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\core\\constants\\paths.py": {
        "language": ".py",
        "functions": [
            "get_agent_workspace",
            "get_agent_inbox",
            "get_agent_status_file",
            "ensure_path_exists"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "src\\core\\constants\\fsm\\configuration_models.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "is_valid",
            "get_summary"
        ],
        "classes": {
            "FSMConfiguration": {
                "methods": [
                    "__post_init__",
                    "is_valid",
                    "get_summary"
                ],
                "docstring": "FSM configuration with V2 compliance.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\core\\constants\\fsm\\state_models.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "is_valid",
            "get_summary"
        ],
        "classes": {
            "StateDefinition": {
                "methods": [
                    "__post_init__",
                    "is_valid",
                    "get_summary"
                ],
                "docstring": "FSM state definition with V2 compliance.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\core\\constants\\fsm\\transition_models.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "is_valid",
            "get_summary"
        ],
        "classes": {
            "TransitionDefinition": {
                "methods": [
                    "__post_init__",
                    "is_valid",
                    "get_summary"
                ],
                "docstring": "FSM transition definition with V2 compliance.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\core\\coordination\\agent_strategies.py": {
        "language": ".py",
        "functions": [
            "get_agent_metrics",
            "get_vector_insights",
            "get_agent_metrics",
            "get_vector_insights",
            "get_agent_metrics",
            "get_vector_insights",
            "get_agent_metrics",
            "get_vector_insights",
            "create_strategy",
            "get_all_strategies"
        ],
        "classes": {
            "AgentType": {
                "methods": [],
                "docstring": "Enumeration of supported agent types.",
                "base_classes": [
                    "Enum"
                ]
            },
            "AgentCoordinatorStrategy": {
                "methods": [
                    "get_agent_metrics",
                    "get_vector_insights"
                ],
                "docstring": "Abstract base class for agent coordinator strategies.",
                "base_classes": [
                    "ABC"
                ]
            },
            "Agent1CoordinatorStrategy": {
                "methods": [
                    "get_agent_metrics",
                    "get_vector_insights"
                ],
                "docstring": "V2 Compliant strategy for Agent-1 coordination (Integration & Core Systems).",
                "base_classes": [
                    "AgentCoordinatorStrategy"
                ]
            },
            "Agent6CoordinatorStrategy": {
                "methods": [
                    "get_agent_metrics",
                    "get_vector_insights"
                ],
                "docstring": "V2 Compliant strategy for Agent-6 coordination (Gaming & Entertainment).",
                "base_classes": [
                    "AgentCoordinatorStrategy"
                ]
            },
            "Agent7CoordinatorStrategy": {
                "methods": [
                    "get_agent_metrics",
                    "get_vector_insights"
                ],
                "docstring": "V2 Compliant strategy for Agent-7 coordination (Web Development).",
                "base_classes": [
                    "AgentCoordinatorStrategy"
                ]
            },
            "AgentStrategyFactory": {
                "methods": [
                    "create_strategy",
                    "get_all_strategies"
                ],
                "docstring": "Factory for creating agent coordinator strategies.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\core\\coordination\\swarm\\coordination_models.py": {
        "language": ".py",
        "functions": [
            "create_coordination_task",
            "create_coordination_result",
            "create_agent_coordination_status",
            "create_coordination_metrics",
            "__post_init__",
            "__post_init__",
            "__post_init__",
            "__post_init__",
            "success_rate"
        ],
        "classes": {
            "CoordinationStrategy": {
                "methods": [],
                "docstring": "Simple coordination strategy types.",
                "base_classes": [
                    "Enum"
                ]
            },
            "TaskPriority": {
                "methods": [],
                "docstring": "Simple task priority levels.",
                "base_classes": [
                    "Enum"
                ]
            },
            "TaskStatus": {
                "methods": [],
                "docstring": "Simple task status states.",
                "base_classes": [
                    "Enum"
                ]
            },
            "CoordinationTask": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Simple coordination task model.",
                "base_classes": []
            },
            "CoordinationResult": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Simple coordination result model.",
                "base_classes": []
            },
            "AgentCoordinationStatus": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Simple agent coordination status model.",
                "base_classes": []
            },
            "CoordinationMetrics": {
                "methods": [
                    "__post_init__",
                    "success_rate"
                ],
                "docstring": "Simple coordination metrics model.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\core\\constants\\fsm_utilities.py": {
        "language": ".py",
        "functions": [
            "validate_fsm_constants",
            "create_custom_state",
            "create_custom_transition",
            "get_fsm_config_summary"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "src\\core\\coordination\\swarm\\orchestrators\\swarm_coordination_orchestrator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_coordination",
            "stop_coordination",
            "_create_error_result",
            "get_coordination_summary",
            "get_performance_metrics",
            "reset_metrics",
            "optimize_coordination",
            "find_best_agent",
            "calculate_efficiency",
            "get_insights"
        ],
        "classes": {
            "SwarmCoordinationEnhancer": {
                "methods": [
                    "__init__",
                    "start_coordination",
                    "stop_coordination",
                    "_create_error_result",
                    "get_coordination_summary",
                    "get_performance_metrics",
                    "reset_metrics"
                ],
                "docstring": "Main orchestrator for swarm coordination enhancement system.\n\nProvides unified interface to all coordination capabilities while maintaining V2\ncompliance through modular architecture.",
                "base_classes": []
            },
            "CoordinationUtils": {
                "methods": [
                    "optimize_coordination"
                ],
                "docstring": null,
                "base_classes": []
            },
            "AgentMatchingUtils": {
                "methods": [
                    "find_best_agent"
                ],
                "docstring": null,
                "base_classes": []
            },
            "PerformanceMetricsUtils": {
                "methods": [
                    "calculate_efficiency"
                ],
                "docstring": null,
                "base_classes": []
            },
            "VectorInsightsUtils": {
                "methods": [
                    "get_insights"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\core\\data_optimization\\data_optimization_engine.py": {
        "language": ".py",
        "functions": [
            "create_data_optimization_engine",
            "__init__",
            "optimize_data",
            "_compress_data",
            "_cache_data",
            "_calculate_metrics",
            "get_optimization_summary",
            "clear_optimization_history",
            "get_status"
        ],
        "classes": {
            "DataOptimizationEngine": {
                "methods": [
                    "__init__",
                    "optimize_data",
                    "_compress_data",
                    "_cache_data",
                    "_calculate_metrics",
                    "get_optimization_summary",
                    "clear_optimization_history",
                    "get_status"
                ],
                "docstring": "Simple data optimization engine.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "src\\core\\coordination\\swarm\\engines\\task_coordination_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_create_error_result",
            "get_task_summary",
            "get_next_task",
            "clear_completed_tasks"
        ],
        "classes": {
            "TaskCoordinationEngine": {
                "methods": [
                    "__init__",
                    "_create_error_result",
                    "get_task_summary",
                    "get_next_task",
                    "clear_completed_tasks"
                ],
                "docstring": "Engine for task coordination and execution.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\constants\\fsm_models.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\data_optimization\\data_optimization_models.py": {
        "language": ".py",
        "functions": [
            "to_dict",
            "reset",
            "is_expired"
        ],
        "classes": {
            "ProcessingStrategy": {
                "methods": [],
                "docstring": "Data processing strategies.",
                "base_classes": [
                    "Enum"
                ]
            },
            "OptimizationLevel": {
                "methods": [],
                "docstring": "Optimization levels.",
                "base_classes": [
                    "Enum"
                ]
            },
            "ProcessingMetrics": {
                "methods": [
                    "to_dict",
                    "reset"
                ],
                "docstring": "Processing performance metrics.",
                "base_classes": []
            },
            "OptimizationConfig": {
                "methods": [],
                "docstring": "Configuration for data processing optimization.",
                "base_classes": []
            },
            "OptimizationResult": {
                "methods": [],
                "docstring": "Result of optimization operation.",
                "base_classes": []
            },
            "CacheEntry": {
                "methods": [
                    "is_expired"
                ],
                "docstring": "Cache entry for optimization results.",
                "base_classes": []
            },
            "PerformanceProfile": {
                "methods": [],
                "docstring": "Performance profile for optimization decisions.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\core\\coordination\\swarm\\engines\\performance_monitoring_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "update_metrics",
            "_calculate_efficiency",
            "get_performance_summary",
            "get_efficiency_trend",
            "reset_metrics",
            "get_metrics_export"
        ],
        "classes": {
            "PerformanceMonitoringEngine": {
                "methods": [
                    "__init__",
                    "update_metrics",
                    "_calculate_efficiency",
                    "get_performance_summary",
                    "get_efficiency_trend",
                    "reset_metrics",
                    "get_metrics_export"
                ],
                "docstring": "Engine for performance monitoring and metrics collection.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\core\\data_optimization\\data_optimization_orchestrator.py": {
        "language": ".py",
        "functions": [
            "get_data_processing_optimizer",
            "get_optimization_metrics",
            "clear_optimization_cache",
            "reset_optimization_metrics",
            "__init__",
            "get_optimization_summary",
            "clear_cache",
            "reset_metrics",
            "cleanup"
        ],
        "classes": {
            "DataProcessingOptimizer": {
                "methods": [
                    "__init__",
                    "get_optimization_summary",
                    "clear_cache",
                    "reset_metrics",
                    "cleanup"
                ],
                "docstring": "Main orchestrator for data processing optimization operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\core\\data_processing\\data_processing_models.py": {
        "language": ".py",
        "functions": [
            "__post_init__"
        ],
        "classes": {
            "ProcessingType": {
                "methods": [],
                "docstring": "Types of data processing operations.",
                "base_classes": [
                    "Enum"
                ]
            },
            "ProcessingStatus": {
                "methods": [],
                "docstring": "Status of processing operations.",
                "base_classes": [
                    "Enum"
                ]
            },
            "ProcessingConfig": {
                "methods": [],
                "docstring": "Configuration for data processing operations.",
                "base_classes": []
            },
            "ProcessingResult": {
                "methods": [],
                "docstring": "Result of data processing operation.",
                "base_classes": []
            },
            "DataValidationResult": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Result of data validation operation.",
                "base_classes": []
            },
            "FileProcessingInfo": {
                "methods": [],
                "docstring": "Information about file processing operation.",
                "base_classes": []
            },
            "DatabaseConnectionInfo": {
                "methods": [],
                "docstring": "Information about database connection.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\core\\decision\\constants.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\data_processing\\data_processing_orchestrator.py": {
        "language": ".py",
        "functions": [
            "get_unified_data_processing",
            "read_csv",
            "write_csv",
            "read_json",
            "write_json",
            "connect_sqlite",
            "execute_query",
            "make_request",
            "validate_data_structure",
            "clean_data",
            "__init__",
            "read_csv",
            "write_csv",
            "read_json",
            "write_json",
            "connect_sqlite",
            "execute_query",
            "make_request",
            "validate_data_structure",
            "clean_data",
            "get_processing_info"
        ],
        "classes": {
            "UnifiedDataProcessingSystem": {
                "methods": [
                    "__init__",
                    "read_csv",
                    "write_csv",
                    "read_json",
                    "write_json",
                    "connect_sqlite",
                    "execute_query",
                    "make_request",
                    "validate_data_structure",
                    "clean_data",
                    "get_processing_info"
                ],
                "docstring": "Main orchestrator for data processing operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 32
    },
    "src\\core\\deployment\\coordinators\\target_discovery.py": {
        "language": ".py",
        "functions": [
            "create_target_discovery_engine",
            "__init__",
            "discover_targets",
            "_find_targets",
            "_prioritize_targets",
            "_filter_targets",
            "get_discovery_summary",
            "clear_discovery_history",
            "get_status"
        ],
        "classes": {
            "TargetDiscoveryEngine": {
                "methods": [
                    "__init__",
                    "discover_targets",
                    "_find_targets",
                    "_prioritize_targets",
                    "_filter_targets",
                    "get_discovery_summary",
                    "clear_discovery_history",
                    "get_status"
                ],
                "docstring": "Simple target discovery engine.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "src\\core\\deployment\\deployment_orchestrator_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize_system",
            "deploy_to_agent",
            "mass_deploy",
            "get_deployment_status",
            "get_metrics",
            "get_agent_domains",
            "update_config",
            "shutdown",
            "_setup_agent_domains",
            "_validate_target"
        ],
        "classes": {
            "DeploymentOrchestratorEngine": {
                "methods": [
                    "__init__",
                    "initialize_system",
                    "deploy_to_agent",
                    "mass_deploy",
                    "get_deployment_status",
                    "get_metrics",
                    "get_agent_domains",
                    "update_config",
                    "shutdown",
                    "_setup_agent_domains",
                    "_validate_target"
                ],
                "docstring": "Core engine for deployment orchestrator operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\core\\deployment\\engines\\deployment_discovery_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "discover_targets",
            "_discover_file_targets",
            "_discover_system_targets",
            "_discover_optimization_targets",
            "prioritize_targets",
            "get_discovered_targets",
            "filter_targets"
        ],
        "classes": {
            "DeploymentDiscoveryEngine": {
                "methods": [
                    "__init__",
                    "discover_targets",
                    "_discover_file_targets",
                    "_discover_system_targets",
                    "_discover_optimization_targets",
                    "prioritize_targets",
                    "get_discovered_targets",
                    "filter_targets"
                ],
                "docstring": "Discovers and prioritizes deployment targets.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\deployment\\engines\\deployment_execution_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute_deployment",
            "_execute_pattern",
            "_execute_file_operation",
            "_execute_system_integration",
            "_execute_optimization",
            "get_active_deployments",
            "cancel_deployment"
        ],
        "classes": {
            "DeploymentExecutionEngine": {
                "methods": [
                    "__init__",
                    "execute_deployment",
                    "_execute_pattern",
                    "_execute_file_operation",
                    "_execute_system_integration",
                    "_execute_optimization",
                    "get_active_deployments",
                    "cancel_deployment"
                ],
                "docstring": "Handles the execution of deployment tasks.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\deployment\\coordinators\\deployment_executor.py": {
        "language": ".py",
        "functions": [
            "create_deployment_executor",
            "__init__",
            "execute_deployment",
            "_generate_deployment_id",
            "_process_deployment",
            "get_deployment_status",
            "get_deployment_summary",
            "clear_deployment_history",
            "get_status"
        ],
        "classes": {
            "DeploymentExecutor": {
                "methods": [
                    "__init__",
                    "execute_deployment",
                    "_generate_deployment_id",
                    "_process_deployment",
                    "get_deployment_status",
                    "get_deployment_summary",
                    "clear_deployment_history",
                    "get_status"
                ],
                "docstring": "Simple deployment executor.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "src\\core\\analytics\\intelligence\\anomaly_detection_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "detect_anomalies",
            "_detect_statistical_anomalies",
            "_detect_performance_anomalies",
            "get_anomaly_summary"
        ],
        "classes": {
            "AnomalyDetectionEngine": {
                "methods": [
                    "__init__",
                    "detect_anomalies",
                    "_detect_statistical_anomalies",
                    "_detect_performance_anomalies",
                    "get_anomaly_summary"
                ],
                "docstring": "Simple anomaly detection engine.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\deployment\\models\\factory_functions.py": {
        "language": ".py",
        "functions": [
            "create_default_config",
            "create_deployment_target",
            "create_deployment_status",
            "create_deployment_metrics",
            "create_deployment_target_from_pattern",
            "create_batch_deployment_targets",
            "create_deployment_status_for_agent",
            "create_custom_config",
            "get_agent_domain",
            "get_priority_for_pattern",
            "get_all_agent_domains",
            "get_all_pattern_priorities"
        ],
        "classes": {},
        "routes": [],
        "complexity": 12
    },
    "src\\core\\deployment\\engines\\deployment_metrics_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_deployment_tracking",
            "update_target_completion",
            "finish_deployment_tracking",
            "get_current_metrics",
            "get_metrics_summary",
            "get_historical_metrics",
            "analyze_performance_trends"
        ],
        "classes": {
            "DeploymentMetricsEngine": {
                "methods": [
                    "__init__",
                    "start_deployment_tracking",
                    "update_target_completion",
                    "finish_deployment_tracking",
                    "get_current_metrics",
                    "get_metrics_summary",
                    "get_historical_metrics",
                    "analyze_performance_trends"
                ],
                "docstring": "Tracks and analyzes deployment metrics.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\agent_context_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_agent_context",
            "get_agent_context",
            "update_agent_context",
            "remove_agent_context",
            "list_agents",
            "agent_contexts",
            "get_context_summary"
        ],
        "classes": {
            "AgentContextManager": {
                "methods": [
                    "__init__",
                    "set_agent_context",
                    "get_agent_context",
                    "update_agent_context",
                    "remove_agent_context",
                    "list_agents",
                    "agent_contexts",
                    "get_context_summary"
                ],
                "docstring": "Manages agent context and state information.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\deployment\\coordinators\\metrics_tracker.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "update_deployment_metrics",
            "update_agent_status",
            "get_agent_status",
            "get_deployment_metrics",
            "get_metrics_summary",
            "_calculate_efficiency_score",
            "get_target_analysis",
            "get_performance_report",
            "reset_metrics",
            "export_metrics"
        ],
        "classes": {
            "DeploymentMetricsTracker": {
                "methods": [
                    "__init__",
                    "update_deployment_metrics",
                    "update_agent_status",
                    "get_agent_status",
                    "get_deployment_metrics",
                    "get_metrics_summary",
                    "_calculate_efficiency_score",
                    "get_target_analysis",
                    "get_performance_report",
                    "reset_metrics",
                    "export_metrics"
                ],
                "docstring": "Tracker for deployment metrics and status reporting.\n\nManages metrics collection, status tracking, and reporting.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\core\\dry_eliminator\\dry_elimination_engine.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\dry_eliminator\\dry_eliminator_orchestrator.py": {
        "language": ".py",
        "functions": [
            "get_advanced_dry_eliminator",
            "eliminate_advanced_dry_violations",
            "main",
            "__init__",
            "eliminate_advanced_dry_violations",
            "analyze_project_violations",
            "eliminate_specific_violations",
            "get_system_status",
            "reset_elimination_state",
            "get_performance_report",
            "export_results",
            "__init__",
            "run_elimination"
        ],
        "classes": {
            "AdvancedDRYEliminator": {
                "methods": [
                    "__init__",
                    "eliminate_advanced_dry_violations",
                    "analyze_project_violations",
                    "eliminate_specific_violations",
                    "get_system_status",
                    "reset_elimination_state",
                    "get_performance_report",
                    "export_results"
                ],
                "docstring": "Main orchestrator for advanced DRY violation elimination system.\n\nProvides unified interface to all DRY elimination capabilities while maintaining V2\ncompliance through modular architecture.",
                "base_classes": []
            },
            "UnifiedEntryPoint": {
                "methods": [
                    "__init__",
                    "run_elimination"
                ],
                "docstring": "Unified entry point for backward compatibility.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 23
    },
    "src\\core\\analytics\\engines\\coordination_analytics_engine.py": {
        "language": ".py",
        "functions": [
            "create_coordination_analytics_engine",
            "__init__",
            "collect_analytics",
            "_extract_metrics",
            "_generate_insights",
            "get_analytics_summary",
            "clear_analytics_history",
            "get_status"
        ],
        "classes": {
            "CoordinationAnalyticsEngine": {
                "methods": [
                    "__init__",
                    "collect_analytics",
                    "_extract_metrics",
                    "_generate_insights",
                    "get_analytics_summary",
                    "clear_analytics_history",
                    "get_status"
                ],
                "docstring": "Simple coordination analytics engine.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "src\\core\\dry_eliminator\\engines\\file_discovery_engine.py": {
        "language": ".py",
        "functions": [
            "create_file_discovery_engine",
            "__init__",
            "discover_python_files",
            "_should_exclude_file",
            "_analyze_file_metadata",
            "get_file_statistics",
            "get_files_by_size",
            "get_files_by_line_count",
            "get_largest_files",
            "get_files_by_extension",
            "get_files_in_directory",
            "refresh_file_list",
            "get_file_metadata",
            "clear_cache",
            "validate_file"
        ],
        "classes": {
            "FileDiscoveryEngine": {
                "methods": [
                    "__init__",
                    "discover_python_files",
                    "_should_exclude_file",
                    "_analyze_file_metadata",
                    "get_file_statistics",
                    "get_files_by_size",
                    "get_files_by_line_count",
                    "get_largest_files",
                    "get_files_by_extension",
                    "get_files_in_directory",
                    "refresh_file_list",
                    "get_file_metadata",
                    "clear_cache",
                    "validate_file"
                ],
                "docstring": "File discovery engine for DRY elimination system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 29
    },
    "src\\core\\analytics\\coordinators\\processing_coordinator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register_processor",
            "get_processing_stats",
            "reset_stats"
        ],
        "classes": {
            "ProcessingCoordinator": {
                "methods": [
                    "__init__",
                    "register_processor",
                    "get_processing_stats",
                    "reset_stats"
                ],
                "docstring": "Simple processing coordinator.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\dry_eliminator\\engines\\metrics_reporting_engine.py": {
        "language": ".py",
        "functions": [
            "create_metrics_reporting_engine",
            "__init__",
            "start_analysis",
            "end_analysis",
            "update_file_metrics",
            "update_violation_metrics",
            "update_elimination_metrics",
            "generate_summary_report",
            "_get_violations_by_type",
            "_get_violations_by_severity",
            "generate_detailed_report",
            "export_metrics_to_file",
            "get_metrics_dict",
            "reset_metrics"
        ],
        "classes": {
            "MetricsReportingEngine": {
                "methods": [
                    "__init__",
                    "start_analysis",
                    "end_analysis",
                    "update_file_metrics",
                    "update_violation_metrics",
                    "update_elimination_metrics",
                    "generate_summary_report",
                    "_get_violations_by_type",
                    "_get_violations_by_severity",
                    "generate_detailed_report",
                    "export_metrics_to_file",
                    "get_metrics_dict",
                    "reset_metrics"
                ],
                "docstring": "Metrics and reporting engine for DRY elimination system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 27
    },
    "src\\core\\dry_eliminator\\dry_eliminator_models.py": {
        "language": ".py",
        "functions": [
            "create_dry_violation",
            "create_dry_analysis_result",
            "create_dry_configuration",
            "create_dry_metrics"
        ],
        "classes": {
            "DRYViolationType": {
                "methods": [],
                "docstring": "Types of DRY violations.",
                "base_classes": [
                    "Enum"
                ]
            },
            "EliminationStrategy": {
                "methods": [],
                "docstring": "Elimination strategies.",
                "base_classes": [
                    "Enum"
                ]
            },
            "ViolationSeverity": {
                "methods": [],
                "docstring": "Violation severity levels.",
                "base_classes": [
                    "Enum"
                ]
            },
            "DRYViolation": {
                "methods": [],
                "docstring": "Simple DRY violation data structure.",
                "base_classes": []
            },
            "DRYAnalysisResult": {
                "methods": [],
                "docstring": "Simple DRY analysis result.",
                "base_classes": []
            },
            "DRYConfiguration": {
                "methods": [],
                "docstring": "Simple DRY configuration.",
                "base_classes": []
            },
            "DRYMetrics": {
                "methods": [],
                "docstring": "Simple DRY metrics.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\core\\dry_eliminator\\engines\\dry_elimination_engine_orchestrator.py": {
        "language": ".py",
        "functions": [
            "create_dry_elimination_engine_orchestrator",
            "__init__",
            "run_full_analysis",
            "_determine_elimination_strategy",
            "get_violations_summary",
            "get_elimination_summary",
            "generate_detailed_report",
            "export_results",
            "clear_analysis",
            "get_analysis_status"
        ],
        "classes": {
            "DRYEliminationEngineOrchestrator": {
                "methods": [
                    "__init__",
                    "run_full_analysis",
                    "_determine_elimination_strategy",
                    "get_violations_summary",
                    "get_elimination_summary",
                    "generate_detailed_report",
                    "export_results",
                    "clear_analysis",
                    "get_analysis_status"
                ],
                "docstring": "Main orchestrator for DRY elimination system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 19
    },
    "src\\core\\unified_config.py": {
        "language": ".py",
        "functions": [
            "get_timeout_config",
            "get_agent_config",
            "get_threshold_config",
            "get_browser_config",
            "get_test_config",
            "get_file_pattern_config",
            "get_report_config",
            "load_config_from_env",
            "validate_unified_config",
            "__init__",
            "timeouts",
            "agents",
            "file_patterns",
            "thresholds",
            "browser",
            "tests",
            "reports",
            "validate",
            "get_config_summary"
        ],
        "classes": {
            "UnifiedConfig": {
                "methods": [
                    "__init__",
                    "timeouts",
                    "agents",
                    "file_patterns",
                    "thresholds",
                    "browser",
                    "tests",
                    "reports",
                    "validate",
                    "get_config_summary"
                ],
                "docstring": "Backward compatibility wrapper for unified configuration.\n\nThis class delegates to UnifiedConfigManager from config_ssot.py.\nMaintained for code that expects UnifiedConfig dataclass pattern.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 29
    },
    "src\\core\\analytics\\coordinators\\analytics_coordinator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register_engine",
            "register_callback",
            "get_status"
        ],
        "classes": {
            "AnalyticsCoordinator": {
                "methods": [
                    "__init__",
                    "register_engine",
                    "register_callback",
                    "get_status"
                ],
                "docstring": "Simple analytics coordinator.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\dry_eliminator\\orchestrators\\elimination_coordinator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "eliminate_advanced_dry_violations",
            "analyze_project_violations",
            "eliminate_specific_violations",
            "_update_results_from_elimination",
            "_generate_elimination_summary",
            "get_coordinator_status",
            "reset_coordinator_state"
        ],
        "classes": {
            "EliminationCoordinator": {
                "methods": [
                    "__init__",
                    "eliminate_advanced_dry_violations",
                    "analyze_project_violations",
                    "eliminate_specific_violations",
                    "_update_results_from_elimination",
                    "_generate_elimination_summary",
                    "get_coordinator_status",
                    "reset_coordinator_state"
                ],
                "docstring": "Coordinates DRY violation elimination operations.\n\nHandles the core elimination workflow and coordination between different elimination\ncomponents.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\message_queue_statistics.py": {
        "language": ".py",
        "functions": [
            "calculate_statistics",
            "_get_empty_statistics",
            "_get_priority_bucket",
            "_get_retry_bucket",
            "_format_age_statistics",
            "_format_duration",
            "__init__",
            "assess_health",
            "_check_queue_size_health",
            "_check_processing_health",
            "_check_age_health",
            "_check_failure_health"
        ],
        "classes": {
            "QueueStatisticsCalculator": {
                "methods": [
                    "calculate_statistics",
                    "_get_empty_statistics",
                    "_get_priority_bucket",
                    "_get_retry_bucket",
                    "_format_age_statistics",
                    "_format_duration"
                ],
                "docstring": "Calculates comprehensive queue statistics.",
                "base_classes": []
            },
            "QueueHealthMonitor": {
                "methods": [
                    "__init__",
                    "assess_health",
                    "_check_queue_size_health",
                    "_check_processing_health",
                    "_check_age_health",
                    "_check_failure_health"
                ],
                "docstring": "Monitors queue health and provides recommendations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "src\\core\\emergency_intervention\\unified_emergency\\engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register_protocol",
            "register_handler",
            "detect_emergency",
            "respond_to_emergency",
            "_create_no_protocol_response",
            "_update_emergency_status",
            "get_active_emergencies",
            "get_metrics",
            "get_status",
            "clear_emergencies",
            "reset_metrics",
            "clear_resources"
        ],
        "classes": {
            "EmergencyInterventionEngine": {
                "methods": [
                    "__init__",
                    "register_protocol",
                    "register_handler",
                    "detect_emergency",
                    "respond_to_emergency",
                    "_create_no_protocol_response",
                    "_update_emergency_status",
                    "get_active_emergencies",
                    "get_metrics",
                    "get_status",
                    "clear_emergencies",
                    "reset_metrics",
                    "clear_resources"
                ],
                "docstring": "Main engine for emergency intervention operations.\n\nCoordinates action execution, protocol management,\nand emergency response processing.",
                "base_classes": [
                    "BaseEngine"
                ]
            }
        },
        "routes": [],
        "complexity": 26
    },
    "src\\core\\analytics\\intelligence\\business_intelligence_engine_operations.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_dashboard_data",
            "_generate_summary",
            "_get_date_range",
            "_get_key_metrics",
            "_get_numeric_fields",
            "_generate_chart_data",
            "_generate_alerts",
            "export_insights",
            "_export_csv",
            "get_performance_metrics",
            "optimize_performance"
        ],
        "classes": {
            "BusinessIntelligenceEngineOperations": {
                "methods": [
                    "__init__",
                    "generate_dashboard_data",
                    "_generate_summary",
                    "_get_date_range",
                    "_get_key_metrics",
                    "_get_numeric_fields",
                    "_generate_chart_data",
                    "_generate_alerts",
                    "export_insights",
                    "_export_csv",
                    "get_performance_metrics",
                    "optimize_performance"
                ],
                "docstring": "Extended operations for business intelligence.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "src\\core\\dry_eliminator\\engines\\code_analysis_engine.py": {
        "language": ".py",
        "functions": [
            "create_code_analysis_engine",
            "__init__",
            "analyze_code",
            "_extract_patterns",
            "_find_duplicates",
            "_calculate_metrics",
            "get_analysis_summary",
            "clear_analysis_history",
            "get_status"
        ],
        "classes": {
            "CodeAnalysisEngine": {
                "methods": [
                    "__init__",
                    "analyze_code",
                    "_extract_patterns",
                    "_find_duplicates",
                    "_calculate_metrics",
                    "get_analysis_summary",
                    "clear_analysis_history",
                    "get_status"
                ],
                "docstring": "Simple code analysis engine.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "src\\core\\dry_eliminator\\engines\\elimination_strategy_engine.py": {
        "language": ".py",
        "functions": [
            "create_elimination_strategy_engine",
            "__init__",
            "execute_elimination",
            "_select_strategy",
            "_apply_strategy",
            "_calculate_elimination_metrics",
            "get_elimination_summary",
            "clear_elimination_history",
            "get_status"
        ],
        "classes": {
            "EliminationStrategyEngine": {
                "methods": [
                    "__init__",
                    "execute_elimination",
                    "_select_strategy",
                    "_apply_strategy",
                    "_calculate_elimination_metrics",
                    "get_elimination_summary",
                    "clear_elimination_history",
                    "get_status"
                ],
                "docstring": "Simple elimination strategy engine.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "src\\core\\emergency_intervention\\unified_emergency\\models_enums.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "EmergencySeverity": {
                "methods": [],
                "docstring": "Emergency severity levels.",
                "base_classes": [
                    "Enum"
                ]
            },
            "EmergencyType": {
                "methods": [],
                "docstring": "Types of emergencies.",
                "base_classes": [
                    "Enum"
                ]
            },
            "EmergencyStatus": {
                "methods": [],
                "docstring": "Emergency status states.",
                "base_classes": [
                    "Enum"
                ]
            },
            "InterventionAction": {
                "methods": [],
                "docstring": "Types of intervention actions.",
                "base_classes": [
                    "Enum"
                ]
            },
            "InterventionPriority": {
                "methods": [],
                "docstring": "Intervention priority levels.",
                "base_classes": [
                    "Enum"
                ]
            },
            "AlertLevel": {
                "methods": [],
                "docstring": "Alert severity levels.",
                "base_classes": [
                    "Enum"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\core\\emergency_intervention\\unified_emergency\\orchestrators\\emergency_logger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "log_emergency_event",
            "get_emergency_history",
            "get_all_emergency_history",
            "get_system_events",
            "get_health_recommendations",
            "calculate_system_health",
            "get_emergency_statistics",
            "export_emergency_data",
            "clear_emergency_history",
            "get_logger_status"
        ],
        "classes": {
            "EmergencyLogger": {
                "methods": [
                    "__init__",
                    "log_emergency_event",
                    "get_emergency_history",
                    "get_all_emergency_history",
                    "get_system_events",
                    "get_health_recommendations",
                    "calculate_system_health",
                    "get_emergency_statistics",
                    "export_emergency_data",
                    "clear_emergency_history",
                    "get_logger_status"
                ],
                "docstring": "Logs emergency events and maintains history.\n\nHandles emergency event logging, history management, and system health monitoring.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\core\\emergency_intervention\\unified_emergency\\models_metrics.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "EmergencyMetrics": {
                "methods": [],
                "docstring": "Emergency response metrics.",
                "base_classes": []
            },
            "EmergencyConfig": {
                "methods": [],
                "docstring": "Emergency intervention configuration.",
                "base_classes": []
            },
            "EmergencyAlert": {
                "methods": [],
                "docstring": "Emergency alert data structure.",
                "base_classes": []
            },
            "EmergencyLog": {
                "methods": [],
                "docstring": "Emergency log entry.",
                "base_classes": []
            },
            "EmergencyReport": {
                "methods": [],
                "docstring": "Emergency incident report.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\core\\emergency_intervention\\unified_emergency\\engines\\action_executor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register_handler",
            "execute_action",
            "_default_action_handler",
            "_restart_service",
            "_scale_resources",
            "_isolate_system",
            "_rollback_changes",
            "_notify_admin",
            "_execute_script",
            "execute_multiple_actions",
            "get_available_actions",
            "get_registered_handlers",
            "clear_handlers",
            "has_handler"
        ],
        "classes": {
            "ActionExecutor": {
                "methods": [
                    "__init__",
                    "register_handler",
                    "execute_action",
                    "_default_action_handler",
                    "_restart_service",
                    "_scale_resources",
                    "_isolate_system",
                    "_rollback_changes",
                    "_notify_admin",
                    "_execute_script",
                    "execute_multiple_actions",
                    "get_available_actions",
                    "get_registered_handlers",
                    "clear_handlers",
                    "has_handler"
                ],
                "docstring": "Executes emergency intervention actions.\n\nHandles action execution, default implementations, and result processing.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 30
    },
    "src\\core\\emergency_intervention\\unified_emergency\\orchestrators\\emergency_orchestrator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_register_default_protocols",
            "detect_emergency",
            "analyze_emergency",
            "execute_intervention",
            "handle_emergency",
            "register_intervention_handler",
            "get_emergency_status",
            "get_active_emergencies",
            "get_emergency_history",
            "get_system_metrics",
            "get_protocol_summary",
            "get_system_health",
            "create_custom_protocol",
            "get_orchestrator_status",
            "shutdown"
        ],
        "classes": {
            "EmergencyInterventionOrchestrator": {
                "methods": [
                    "__init__",
                    "_register_default_protocols",
                    "detect_emergency",
                    "analyze_emergency",
                    "execute_intervention",
                    "handle_emergency",
                    "register_intervention_handler",
                    "get_emergency_status",
                    "get_active_emergencies",
                    "get_emergency_history",
                    "get_system_metrics",
                    "get_protocol_summary",
                    "get_system_health",
                    "create_custom_protocol",
                    "get_orchestrator_status",
                    "shutdown"
                ],
                "docstring": "Main orchestrator for emergency intervention operations.\n\nCoordinates emergency detection, analysis, intervention, and logging across all\nemergency components.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 32
    },
    "src\\core\\emergency_intervention\\unified_emergency\\orchestrators\\emergency_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_emergency",
            "_assess_risk",
            "_analyze_impact",
            "_assess_business_impact",
            "_estimate_downtime",
            "_generate_recommendations",
            "_calculate_priority_score",
            "get_analysis_history",
            "get_analysis_metrics",
            "clear_analysis_history",
            "export_analysis_data"
        ],
        "classes": {
            "EmergencyAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_emergency",
                    "_assess_risk",
                    "_analyze_impact",
                    "_assess_business_impact",
                    "_estimate_downtime",
                    "_generate_recommendations",
                    "_calculate_priority_score",
                    "get_analysis_history",
                    "get_analysis_metrics",
                    "clear_analysis_history",
                    "export_analysis_data"
                ],
                "docstring": "Analyzes emergency incidents and provides recommendations.\n\nHandles emergency analysis, risk assessment, and health monitoring.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "src\\core\\dry_eliminator\\dry_eliminator_enums.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "DRYViolationType": {
                "methods": [],
                "docstring": "Types of DRY violations.",
                "base_classes": [
                    "Enum"
                ]
            },
            "EliminationStrategy": {
                "methods": [],
                "docstring": "DRY elimination strategies.",
                "base_classes": [
                    "Enum"
                ]
            },
            "DRYScanMode": {
                "methods": [],
                "docstring": "DRY scanning modes.",
                "base_classes": [
                    "Enum"
                ]
            },
            "ViolationSeverity": {
                "methods": [],
                "docstring": "Severity levels for DRY violations.",
                "base_classes": [
                    "Enum"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\core\\engines\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\emergency_intervention\\unified_emergency\\orchestrator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_register_default_protocols",
            "detect_emergency",
            "analyze_emergency",
            "execute_intervention",
            "handle_emergency",
            "register_intervention_handler",
            "get_emergency_status",
            "get_active_emergencies",
            "get_emergency_history",
            "get_system_metrics",
            "get_protocol_summary",
            "get_system_health",
            "create_custom_protocol",
            "get_orchestrator_status",
            "shutdown"
        ],
        "classes": {
            "EmergencyInterventionOrchestrator": {
                "methods": [
                    "__init__",
                    "_register_default_protocols",
                    "detect_emergency",
                    "analyze_emergency",
                    "execute_intervention",
                    "handle_emergency",
                    "register_intervention_handler",
                    "get_emergency_status",
                    "get_active_emergencies",
                    "get_emergency_history",
                    "get_system_metrics",
                    "get_protocol_summary",
                    "get_system_health",
                    "create_custom_protocol",
                    "get_orchestrator_status",
                    "shutdown"
                ],
                "docstring": "Main orchestrator for emergency intervention operations.\n\nCoordinates emergency detection, analysis, intervention, and logging across all\nemergency components.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 32
    },
    "src\\core\\engines\\analysis_core_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "analyze",
            "extract_patterns",
            "detect_violations",
            "cleanup",
            "get_status"
        ],
        "classes": {
            "AnalysisCoreEngine": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "analyze",
                    "extract_patterns",
                    "detect_violations",
                    "cleanup",
                    "get_status"
                ],
                "docstring": "Core analysis engine - consolidates all analysis operations.",
                "base_classes": [
                    "AnalysisEngine"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\dry_eliminator\\orchestrators\\results_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "update_results",
            "_increment_result_counter",
            "_update_performance_metrics",
            "generate_summary_report",
            "_generate_summary_text",
            "get_results_status",
            "reset_results",
            "export_results"
        ],
        "classes": {
            "ResultsManager": {
                "methods": [
                    "__init__",
                    "update_results",
                    "_increment_result_counter",
                    "_update_performance_metrics",
                    "generate_summary_report",
                    "_generate_summary_text",
                    "get_results_status",
                    "reset_results",
                    "export_results"
                ],
                "docstring": "Manages DRY elimination results and reporting.\n\nHandles result tracking, reporting, and status management for DRY elimination\noperations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\core\\engines\\contracts.py": {
        "language": ".py",
        "functions": [
            "initialize",
            "execute",
            "cleanup",
            "get_status",
            "train_model",
            "predict",
            "optimize",
            "analyze",
            "extract_patterns",
            "detect_violations",
            "connect",
            "sync",
            "transform",
            "coordinate",
            "schedule",
            "monitor",
            "process",
            "validate",
            "transform"
        ],
        "classes": {
            "EngineContext": {
                "methods": [],
                "docstring": "SSOT: shared context object for all engines (DIP).",
                "base_classes": []
            },
            "EngineResult": {
                "methods": [],
                "docstring": "Standard result format for all engines.",
                "base_classes": []
            },
            "Engine": {
                "methods": [
                    "initialize",
                    "execute",
                    "cleanup",
                    "get_status"
                ],
                "docstring": "Base engine protocol - all engines must implement this.",
                "base_classes": [
                    "Protocol"
                ]
            },
            "MLEngine": {
                "methods": [
                    "train_model",
                    "predict",
                    "optimize"
                ],
                "docstring": "ML operations engine protocol.",
                "base_classes": [
                    "Engine"
                ]
            },
            "AnalysisEngine": {
                "methods": [
                    "analyze",
                    "extract_patterns",
                    "detect_violations"
                ],
                "docstring": "Analysis operations engine protocol.",
                "base_classes": [
                    "Engine"
                ]
            },
            "IntegrationEngine": {
                "methods": [
                    "connect",
                    "sync",
                    "transform"
                ],
                "docstring": "Integration operations engine protocol.",
                "base_classes": [
                    "Engine"
                ]
            },
            "CoordinationEngine": {
                "methods": [
                    "coordinate",
                    "schedule",
                    "monitor"
                ],
                "docstring": "Coordination operations engine protocol.",
                "base_classes": [
                    "Engine"
                ]
            },
            "UtilityEngine": {
                "methods": [
                    "process",
                    "validate",
                    "transform"
                ],
                "docstring": "Utility operations engine protocol.",
                "base_classes": [
                    "Engine"
                ]
            }
        },
        "routes": [],
        "complexity": 38
    },
    "src\\core\\engines\\ml_core_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "train_model",
            "predict",
            "optimize",
            "cleanup",
            "get_status"
        ],
        "classes": {
            "MLCoreEngine": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "train_model",
                    "predict",
                    "optimize",
                    "cleanup",
                    "get_status"
                ],
                "docstring": "Core ML engine - consolidates all ML operations.",
                "base_classes": [
                    "MLEngine"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\engines\\communication_core_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "_send_message",
            "_receive_message",
            "_broadcast_message",
            "cleanup",
            "get_status"
        ],
        "classes": {
            "CommunicationCoreEngine": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "_send_message",
                    "_receive_message",
                    "_broadcast_message",
                    "cleanup",
                    "get_status"
                ],
                "docstring": "Core communication engine - consolidates all communication operations.",
                "base_classes": [
                    "Engine"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\engines\\base_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "_execute_operation",
            "cleanup",
            "get_status",
            "get_health_check",
            "update_configuration",
            "get_metrics",
            "_calculate_ops_per_hour",
            "_calculate_uptime",
            "reset_metrics",
            "validate_input",
            "process_result",
            "__repr__"
        ],
        "classes": {
            "EngineType": {
                "methods": [],
                "docstring": "Engine type enumeration for specialization.",
                "base_classes": [
                    "Enum"
                ]
            },
            "EngineState": {
                "methods": [],
                "docstring": "Engine lifecycle states.",
                "base_classes": [
                    "Enum"
                ]
            },
            "BaseEngine": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "_execute_operation",
                    "cleanup",
                    "get_status",
                    "get_health_check",
                    "update_configuration",
                    "get_metrics",
                    "_calculate_ops_per_hour",
                    "_calculate_uptime",
                    "reset_metrics",
                    "validate_input",
                    "process_result",
                    "__repr__"
                ],
                "docstring": "Unified base class for all engines - SSOT implementation.\n\nConsolidates common functionality using Phase 1 shared utilities:\n- StatusManager: Centralized status reporting\n- ErrorHandler: Centralized error handling\n- LoggingManager: Centralized logging\n- ResultManager: Standardized result objects\n- ValidationManager: Unified validation\n- ConfigurationManager: Centralized configuration\n- InitializationManager: Standardized initialization\n- CleanupManager: Standardized cleanup",
                "base_classes": [
                    "Engine",
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 30
    },
    "src\\core\\engines\\monitoring_core_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "_collect_metrics",
            "_check_health",
            "_create_alert",
            "cleanup",
            "get_status"
        ],
        "classes": {
            "MonitoringCoreEngine": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "_collect_metrics",
                    "_check_health",
                    "_create_alert",
                    "cleanup",
                    "get_status"
                ],
                "docstring": "Core monitoring engine - consolidates all monitoring operations.",
                "base_classes": [
                    "Engine"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\engines\\performance_core_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "_benchmark",
            "_optimize",
            "_profile",
            "cleanup",
            "get_status"
        ],
        "classes": {
            "PerformanceCoreEngine": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "_benchmark",
                    "_optimize",
                    "_profile",
                    "cleanup",
                    "get_status"
                ],
                "docstring": "Core performance engine - consolidates all performance operations.",
                "base_classes": [
                    "Engine"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\engines\\data_core_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "_store_data",
            "_retrieve_data",
            "_query_data",
            "cleanup",
            "get_status"
        ],
        "classes": {
            "DataCoreEngine": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "_store_data",
                    "_retrieve_data",
                    "_query_data",
                    "cleanup",
                    "get_status"
                ],
                "docstring": "Core data engine - consolidates all data operations.",
                "base_classes": [
                    "Engine"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\engines\\orchestration_core_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "_orchestrate",
            "_execute_workflow",
            "_coordinate",
            "cleanup",
            "get_status"
        ],
        "classes": {
            "OrchestrationCoreEngine": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "_orchestrate",
                    "_execute_workflow",
                    "_coordinate",
                    "cleanup",
                    "get_status"
                ],
                "docstring": "Core orchestration engine - consolidates all orchestration operations.",
                "base_classes": [
                    "Engine"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\emergency_intervention\\unified_emergency\\protocols.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\emergency_intervention\\unified_emergency\\handlers\\protocol_executor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute_protocol",
            "_execute_action",
            "_restart_service",
            "_scale_resources",
            "_notify_admin",
            "_isolate_system",
            "_backup_restore",
            "_log_incident",
            "_escalate_to_human",
            "_clear_cache",
            "_optimize_queries",
            "get_execution_history",
            "get_active_executions",
            "cancel_execution"
        ],
        "classes": {
            "ProtocolExecutor": {
                "methods": [
                    "__init__",
                    "execute_protocol",
                    "_execute_action",
                    "_restart_service",
                    "_scale_resources",
                    "_notify_admin",
                    "_isolate_system",
                    "_backup_restore",
                    "_log_incident",
                    "_escalate_to_human",
                    "_clear_cache",
                    "_optimize_queries",
                    "get_execution_history",
                    "get_active_executions",
                    "cancel_execution"
                ],
                "docstring": "Executes emergency intervention protocols.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 30
    },
    "src\\core\\engines\\processing_core_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "_process",
            "_batch_process",
            "_queue_job",
            "cleanup",
            "get_status"
        ],
        "classes": {
            "ProcessingCoreEngine": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "_process",
                    "_batch_process",
                    "_queue_job",
                    "cleanup",
                    "get_status"
                ],
                "docstring": "Core processing engine - consolidates all processing operations.",
                "base_classes": [
                    "Engine"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\engines\\coordination_core_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "coordinate",
            "schedule",
            "monitor",
            "cleanup",
            "get_status"
        ],
        "classes": {
            "CoordinationCoreEngine": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "coordinate",
                    "schedule",
                    "monitor",
                    "cleanup",
                    "get_status"
                ],
                "docstring": "Core coordination engine - consolidates all coordination operations.",
                "base_classes": [
                    "CoordinationEngine"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\emergency_intervention\\unified_emergency\\handlers\\protocol_registry.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register_protocol",
            "get_protocol",
            "_severity_meets_threshold",
            "list_protocols",
            "remove_protocol",
            "get_protocol_count",
            "clear_protocols",
            "export_protocols",
            "import_protocols"
        ],
        "classes": {
            "ProtocolRegistry": {
                "methods": [
                    "__init__",
                    "register_protocol",
                    "get_protocol",
                    "_severity_meets_threshold",
                    "list_protocols",
                    "remove_protocol",
                    "get_protocol_count",
                    "clear_protocols",
                    "export_protocols",
                    "import_protocols"
                ],
                "docstring": "Manages registration and retrieval of emergency protocols.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\core\\emergency_intervention\\unified_emergency\\handlers\\protocol_initializer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize_default_protocols",
            "_initialize_system_failure_protocols",
            "_initialize_security_protocols",
            "_initialize_performance_protocols",
            "_initialize_data_protocols",
            "_initialize_network_protocols",
            "_initialize_resource_protocols",
            "get_initialized_protocol_count",
            "reinitialize_protocols"
        ],
        "classes": {
            "ProtocolInitializer": {
                "methods": [
                    "__init__",
                    "initialize_default_protocols",
                    "_initialize_system_failure_protocols",
                    "_initialize_security_protocols",
                    "_initialize_performance_protocols",
                    "_initialize_data_protocols",
                    "_initialize_network_protocols",
                    "_initialize_resource_protocols",
                    "get_initialized_protocol_count",
                    "reinitialize_protocols"
                ],
                "docstring": "Initializes default emergency protocols.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\core\\emergency_intervention\\unified_emergency\\engines\\protocol_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register_protocol",
            "find_matching_protocols",
            "_severity_matches",
            "get_protocol",
            "get_all_protocols",
            "get_protocols_by_type",
            "get_protocols_by_severity",
            "remove_protocol",
            "update_protocol",
            "get_protocol_count",
            "get_protocol_summary",
            "validate_protocol",
            "clear_protocols",
            "export_protocols"
        ],
        "classes": {
            "ProtocolManager": {
                "methods": [
                    "__init__",
                    "register_protocol",
                    "find_matching_protocols",
                    "_severity_matches",
                    "get_protocol",
                    "get_all_protocols",
                    "get_protocols_by_type",
                    "get_protocols_by_severity",
                    "remove_protocol",
                    "update_protocol",
                    "get_protocol_count",
                    "get_protocol_summary",
                    "validate_protocol",
                    "clear_protocols",
                    "export_protocols"
                ],
                "docstring": "Manages emergency intervention protocols.\n\nHandles protocol registration, matching, and execution for emergency intervention\noperations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 30
    },
    "src\\core\\engines\\configuration_core_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "_load_config",
            "_save_config",
            "_get_setting",
            "cleanup",
            "get_status"
        ],
        "classes": {
            "ConfigurationCoreEngine": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "_load_config",
                    "_save_config",
                    "_get_setting",
                    "cleanup",
                    "get_status"
                ],
                "docstring": "Core configuration engine - consolidates all configuration operations.",
                "base_classes": [
                    "Engine"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\engines\\security_core_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "_authenticate",
            "_authorize",
            "_audit",
            "cleanup",
            "get_status"
        ],
        "classes": {
            "SecurityCoreEngine": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "_authenticate",
                    "_authorize",
                    "_audit",
                    "cleanup",
                    "get_status"
                ],
                "docstring": "Core security engine - consolidates all security operations.",
                "base_classes": [
                    "Engine"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\engines\\integration_core_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "connect",
            "sync",
            "transform",
            "cleanup",
            "get_status"
        ],
        "classes": {
            "IntegrationCoreEngine": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "connect",
                    "sync",
                    "transform",
                    "cleanup",
                    "get_status"
                ],
                "docstring": "Core integration engine - consolidates all integration operations.",
                "base_classes": [
                    "IntegrationEngine"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\engines\\storage_core_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "_store",
            "_retrieve",
            "_cache",
            "cleanup",
            "get_status"
        ],
        "classes": {
            "StorageCoreEngine": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "_store",
                    "_retrieve",
                    "_cache",
                    "cleanup",
                    "get_status"
                ],
                "docstring": "Core storage engine - consolidates all storage operations.",
                "base_classes": [
                    "Engine"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\engines\\utility_core_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "process",
            "validate",
            "transform",
            "cleanup",
            "get_status"
        ],
        "classes": {
            "UtilityCoreEngine": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "process",
                    "validate",
                    "transform",
                    "cleanup",
                    "get_status"
                ],
                "docstring": "Core utility engine - consolidates all utility operations.",
                "base_classes": [
                    "UtilityEngine"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\engines\\validation_core_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "_validate_data",
            "_add_rule",
            "_check_compliance",
            "cleanup",
            "get_status"
        ],
        "classes": {
            "ValidationCoreEngine": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "_validate_data",
                    "_add_rule",
                    "_check_compliance",
                    "cleanup",
                    "get_status"
                ],
                "docstring": "Core validation engine - consolidates all validation operations.",
                "base_classes": [
                    "Engine"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\engines\\registry.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_initialize_engines",
            "get_engine",
            "get_engine_types",
            "initialize_all",
            "cleanup_all",
            "get_all_status"
        ],
        "classes": {
            "EngineRegistry": {
                "methods": [
                    "__init__",
                    "_initialize_engines",
                    "get_engine",
                    "get_engine_types",
                    "initialize_all",
                    "cleanup_all",
                    "get_all_status"
                ],
                "docstring": "Registry for all core engines - SSOT for engine management.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\core\\enhanced_integration\\engines\\integration_optimization_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_optimization_metrics",
            "clear_optimization_cache",
            "get_active_optimizations",
            "cancel_optimization"
        ],
        "classes": {
            "IntegrationOptimizationEngine": {
                "methods": [
                    "__init__",
                    "get_optimization_metrics",
                    "clear_optimization_cache",
                    "get_active_optimizations",
                    "cancel_optimization"
                ],
                "docstring": "Handles optimization operations for enhanced integrations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\enhanced_integration\\coordinators\\enhanced_integration_coordinator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_coordination",
            "stop_coordination",
            "get_integration_summary",
            "validate_required_fields",
            "__init__",
            "optimize_performance"
        ],
        "classes": {
            "EnhancedIntegrationCoordinator": {
                "methods": [
                    "__init__",
                    "start_coordination",
                    "stop_coordination",
                    "get_integration_summary"
                ],
                "docstring": "Main orchestrator for enhanced integration coordination system.\n\nProvides unified interface to all integration capabilities while maintaining V2\ncompliance through modular architecture.",
                "base_classes": []
            },
            "EnhancedVectorDatabaseIntegration": {
                "methods": [
                    "__init__",
                    "optimize_performance"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 13
    },
    "src\\core\\enhanced_integration\\engines\\integration_task_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_task",
            "get_next_task",
            "get_task_summary"
        ],
        "classes": {
            "IntegrationTaskEngine": {
                "methods": [
                    "__init__",
                    "add_task",
                    "get_next_task",
                    "get_task_summary"
                ],
                "docstring": "Engine for managing and executing integration tasks.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\enhanced_integration\\orchestrators\\coordination_engine_refactored.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "CoordinationEngine": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Unified coordination engine with core and operations functionality.",
                "base_classes": [
                    "CoordinationEngineCore",
                    "CoordinationEngineOperations"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\core\\enhanced_integration\\engines\\integration_performance_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_monitoring",
            "stop_monitoring",
            "update_metrics",
            "_calculate_efficiency_score",
            "_monitoring_loop",
            "generate_performance_report",
            "get_performance_summary"
        ],
        "classes": {
            "IntegrationPerformanceEngine": {
                "methods": [
                    "__init__",
                    "start_monitoring",
                    "stop_monitoring",
                    "update_metrics",
                    "_calculate_efficiency_score",
                    "_monitoring_loop",
                    "generate_performance_report",
                    "get_performance_summary"
                ],
                "docstring": "Engine for monitoring and reporting integration performance.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\enhanced_integration\\orchestrators\\task_processor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "submit_integration_task",
            "get_task_queue_size",
            "get_active_tasks_count",
            "get_completed_tasks_count",
            "get_task_statistics",
            "clear_completed_tasks",
            "get_recent_tasks"
        ],
        "classes": {
            "IntegrationTaskProcessor": {
                "methods": [
                    "__init__",
                    "submit_integration_task",
                    "get_task_queue_size",
                    "get_active_tasks_count",
                    "get_completed_tasks_count",
                    "get_task_statistics",
                    "clear_completed_tasks",
                    "get_recent_tasks"
                ],
                "docstring": "Processor for integration tasks with queue management.\n\nHandles task submission, processing, and result collection.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\error_handling\\error_analysis_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_error_summary",
            "is_recoverable_error",
            "get_error_severity",
            "analyze_error_patterns",
            "calculate_error_trends",
            "get_recovery_recommendations",
            "assess_system_health"
        ],
        "classes": {
            "ErrorAnalysisEngine": {
                "methods": [
                    "__init__",
                    "create_error_summary",
                    "is_recoverable_error",
                    "get_error_severity",
                    "analyze_error_patterns",
                    "calculate_error_trends",
                    "get_recovery_recommendations",
                    "assess_system_health"
                ],
                "docstring": "Engine for error analysis and assessment.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\enhanced_integration\\orchestrators\\coordination_engine.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\enhanced_integration\\orchestrators\\coordination_engine_operations.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "schedule_task",
            "determine_coordination_strategy",
            "allocate_resources",
            "_check_resource_availability",
            "monitor_task_progress",
            "get_task_queue_status",
            "optimize_task_scheduling",
            "get_performance_metrics",
            "get_resource_status"
        ],
        "classes": {
            "CoordinationEngineOperations": {
                "methods": [
                    "__init__",
                    "schedule_task",
                    "determine_coordination_strategy",
                    "allocate_resources",
                    "_check_resource_availability",
                    "monitor_task_progress",
                    "get_task_queue_status",
                    "optimize_task_scheduling",
                    "get_performance_metrics",
                    "get_resource_status"
                ],
                "docstring": "Extended operations for coordination engine.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\core\\enhanced_integration\\orchestrators\\coordination_engine_core.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "determine_coordination_strategy",
            "allocate_resources",
            "_check_resource_availability",
            "release_resources",
            "get_resource_status",
            "optimize_coordination",
            "get_coordination_status"
        ],
        "classes": {
            "CoordinationEngineCore": {
                "methods": [
                    "__init__",
                    "determine_coordination_strategy",
                    "allocate_resources",
                    "_check_resource_availability",
                    "release_resources",
                    "get_resource_status",
                    "optimize_coordination",
                    "get_coordination_status"
                ],
                "docstring": "Core coordination engine functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\error_handling\\error_handling_orchestrator.py": {
        "language": ".py",
        "functions": [
            "get_error_handling_orchestrator",
            "__init__",
            "retry_operation",
            "safe_execute",
            "validate_and_execute",
            "handle_operation_error",
            "handle_file_operation_error",
            "handle_network_operation_error",
            "handle_database_operation_error",
            "handle_validation_error",
            "handle_configuration_error",
            "handle_agent_operation_error",
            "handle_coordination_error",
            "create_error_summary",
            "is_recoverable_error",
            "get_error_severity",
            "analyze_error_patterns",
            "get_recovery_recommendations",
            "assess_system_health"
        ],
        "classes": {
            "UnifiedErrorHandlingOrchestrator": {
                "methods": [
                    "__init__",
                    "retry_operation",
                    "safe_execute",
                    "validate_and_execute",
                    "handle_operation_error",
                    "handle_file_operation_error",
                    "handle_network_operation_error",
                    "handle_database_operation_error",
                    "handle_validation_error",
                    "handle_configuration_error",
                    "handle_agent_operation_error",
                    "handle_coordination_error",
                    "create_error_summary",
                    "is_recoverable_error",
                    "get_error_severity",
                    "analyze_error_patterns",
                    "get_recovery_recommendations",
                    "assess_system_health"
                ],
                "docstring": "Unified Error Handling Orchestrator - V2 Compliant\n\nOrchestrates all error handling functionality:\n- Retry operations and safety mechanisms\n- Specialized error handlers for different contexts\n- Error analysis and severity assessment\n- Recovery recommendations and system health monitoring",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 37
    },
    "src\\core\\enhanced_integration\\engines\\integration_coordination_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_coordination_status",
            "cancel_task",
            "cleanup"
        ],
        "classes": {
            "IntegrationCoordinationEngine": {
                "methods": [
                    "__init__",
                    "get_coordination_status",
                    "cancel_task",
                    "cleanup"
                ],
                "docstring": "Handles coordination of multiple integration tasks.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\error_handling\\coordination_error_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute_with_error_handling",
            "register_circuit_breaker",
            "register_retry_mechanism",
            "add_recovery_strategy",
            "get_error_report",
            "get_component_status",
            "reset_component"
        ],
        "classes": {
            "CoordinationErrorHandlerCore": {
                "methods": [
                    "__init__",
                    "execute_with_error_handling",
                    "register_circuit_breaker",
                    "register_retry_mechanism",
                    "add_recovery_strategy",
                    "get_error_report",
                    "get_component_status",
                    "reset_component"
                ],
                "docstring": "Intelligent error handler for coordination and communication systems.\n\nProvides comprehensive error management with:\n- Retry mechanisms with exponential backoff\n- Circuit breakers for fault tolerance\n- Intelligent recovery strategies\n- Error pattern analysis and prediction\n- Learning from error history\n\nRefactored for autonomous systems with modular V2-compliant architecture.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\error_handling\\error_recovery.py": {
        "language": ".py",
        "functions": [
            "with_error_recovery",
            "__init__",
            "can_recover",
            "execute_recovery",
            "__init__",
            "can_recover",
            "execute_recovery",
            "__init__",
            "can_recover",
            "execute_recovery",
            "__init__",
            "can_recover",
            "execute_recovery",
            "__init__",
            "add_strategy",
            "attempt_recovery",
            "get_recovery_statistics",
            "decorator",
            "wrapper"
        ],
        "classes": {
            "RecoveryStrategy": {
                "methods": [
                    "__init__",
                    "can_recover",
                    "execute_recovery"
                ],
                "docstring": "Base class for error recovery strategies.",
                "base_classes": []
            },
            "ServiceRestartStrategy": {
                "methods": [
                    "__init__",
                    "can_recover",
                    "execute_recovery"
                ],
                "docstring": "Strategy for restarting failed services.",
                "base_classes": [
                    "RecoveryStrategy"
                ]
            },
            "ConfigurationResetStrategy": {
                "methods": [
                    "__init__",
                    "can_recover",
                    "execute_recovery"
                ],
                "docstring": "Strategy for resetting configuration to defaults.",
                "base_classes": [
                    "RecoveryStrategy"
                ]
            },
            "ResourceCleanupStrategy": {
                "methods": [
                    "__init__",
                    "can_recover",
                    "execute_recovery"
                ],
                "docstring": "Strategy for cleaning up stuck resources.",
                "base_classes": [
                    "RecoveryStrategy"
                ]
            },
            "ErrorRecoveryManager": {
                "methods": [
                    "__init__",
                    "add_strategy",
                    "attempt_recovery",
                    "get_recovery_statistics"
                ],
                "docstring": "Manages error recovery strategies.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 35
    },
    "src\\core\\error_handling\\error_handling_models.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\error_handling\\error_reporting_core.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_error",
            "get_summary",
            "get_detailed_report",
            "clear_errors",
            "get_error_count",
            "get_errors_by_severity"
        ],
        "classes": {
            "ErrorReport": {
                "methods": [
                    "__init__",
                    "add_error",
                    "get_summary",
                    "get_detailed_report",
                    "clear_errors",
                    "get_error_count",
                    "get_errors_by_severity"
                ],
                "docstring": "Represents a comprehensive error report.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\core\\error_handling\\error_models_enums.py": {
        "language": ".py",
        "functions": [
            "__str__",
            "__lt__",
            "__le__",
            "__str__",
            "__str__",
            "__str__",
            "__str__",
            "__str__"
        ],
        "classes": {
            "ErrorSeverity": {
                "methods": [
                    "__str__",
                    "__lt__",
                    "__le__"
                ],
                "docstring": "Error severity levels with V2 compliance.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CircuitState": {
                "methods": [
                    "__str__"
                ],
                "docstring": "Circuit breaker states with V2 compliance.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ErrorType": {
                "methods": [
                    "__str__"
                ],
                "docstring": "Error types with V2 compliance.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RetryStrategy": {
                "methods": [
                    "__str__"
                ],
                "docstring": "Retry strategies with V2 compliance.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ErrorCategory": {
                "methods": [
                    "__str__"
                ],
                "docstring": "Error category types for specialized handling.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ErrorRecoverability": {
                "methods": [
                    "__str__"
                ],
                "docstring": "Error recoverability classification.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\error_handling\\error_reporting_reporter.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_report",
            "get_report",
            "get_all_reports",
            "add_error_to_report",
            "get_global_summary",
            "clear_all_reports",
            "get_errors_by_component",
            "get_error_statistics"
        ],
        "classes": {
            "ErrorReporter": {
                "methods": [
                    "__init__",
                    "create_report",
                    "get_report",
                    "get_all_reports",
                    "add_error_to_report",
                    "get_global_summary",
                    "clear_all_reports",
                    "get_errors_by_component",
                    "get_error_statistics"
                ],
                "docstring": "Centralized error reporting system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\core\\error_handling\\retry_mechanisms.py": {
        "language": ".py",
        "functions": [
            "retry_on_exception",
            "with_exponential_backoff",
            "__init__",
            "execute_with_retry",
            "decorator",
            "wrapper",
            "execute"
        ],
        "classes": {
            "RetryMechanism": {
                "methods": [
                    "__init__",
                    "execute_with_retry"
                ],
                "docstring": "Retry mechanism with exponential backoff and jitter.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 9
    },
    "src\\core\\error_handling\\specialized_handlers.py": {
        "language": ".py",
        "functions": [
            "create_specialized_error_handlers",
            "__init__",
            "handle_error",
            "handle_file_error",
            "handle_network_error",
            "handle_database_error",
            "handle_validation_error",
            "handle_agent_error",
            "get_error_summary",
            "cleanup"
        ],
        "classes": {
            "SpecializedErrorHandlers": {
                "methods": [
                    "__init__",
                    "handle_error",
                    "handle_file_error",
                    "handle_network_error",
                    "handle_database_error",
                    "handle_validation_error",
                    "handle_agent_error",
                    "get_error_summary",
                    "cleanup"
                ],
                "docstring": "KISS Simplified Error Handlers.\n\nRemoved overengineering - focuses on essential error handling only.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 19
    },
    "src\\core\\file_locking\\file_locking_orchestrator.py": {
        "language": ".py",
        "functions": [
            "get_file_lock_manager",
            "__init__",
            "create_file_lock",
            "acquire_lock",
            "release_lock",
            "is_locked",
            "get_lock_info",
            "force_release_lock",
            "extend_lock",
            "get_active_locks",
            "get_lock_metrics",
            "cleanup_expired_locks",
            "batch_acquire_locks",
            "batch_release_locks",
            "get_locks_by_process",
            "get_locks_by_thread",
            "get_locks_by_owner",
            "get_locks_by_type",
            "get_locks_by_duration",
            "get_locks_by_metadata",
            "get_lock_statistics",
            "find_conflicting_locks",
            "get_lock_health_status",
            "__init__",
            "__enter__",
            "__exit__"
        ],
        "classes": {
            "FileLockingOrchestrator": {
                "methods": [
                    "__init__",
                    "create_file_lock",
                    "acquire_lock",
                    "release_lock",
                    "is_locked",
                    "get_lock_info",
                    "force_release_lock",
                    "extend_lock",
                    "get_active_locks",
                    "get_lock_metrics",
                    "cleanup_expired_locks",
                    "batch_acquire_locks",
                    "batch_release_locks",
                    "get_locks_by_process",
                    "get_locks_by_thread",
                    "get_locks_by_owner",
                    "get_locks_by_type",
                    "get_locks_by_duration",
                    "get_locks_by_metadata",
                    "get_lock_statistics",
                    "find_conflicting_locks",
                    "get_lock_health_status"
                ],
                "docstring": "Main orchestrator for file locking operations - V2 compliant.",
                "base_classes": []
            },
            "FileLockContext": {
                "methods": [
                    "__init__",
                    "__enter__",
                    "__exit__"
                ],
                "docstring": "Context manager for file locking.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 51
    },
    "src\\core\\file_locking\\file_locking_engine_operations.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "acquire_lock",
            "release_lock",
            "cleanup_stale_locks"
        ],
        "classes": {
            "FileLockEngineOperations": {
                "methods": [
                    "__init__",
                    "acquire_lock",
                    "release_lock",
                    "cleanup_stale_locks"
                ],
                "docstring": "Core operations for file locking engine.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\file_locking\\file_locking_engine_platform.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_acquire_windows_lock",
            "_acquire_unix_lock",
            "_is_lock_stale",
            "_remove_stale_lock"
        ],
        "classes": {
            "FileLockEnginePlatform": {
                "methods": [
                    "__init__",
                    "_acquire_windows_lock",
                    "_acquire_unix_lock",
                    "_is_lock_stale",
                    "_remove_stale_lock"
                ],
                "docstring": "Platform-specific operations for file locking engine.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\file_locking\\file_locking_models.py": {
        "language": ".py",
        "functions": [
            "is_stale",
            "to_dict",
            "to_dict",
            "to_dict",
            "update_averages"
        ],
        "classes": {
            "LockStatus": {
                "methods": [],
                "docstring": "Status of file lock operations.",
                "base_classes": [
                    "Enum"
                ]
            },
            "LockConfig": {
                "methods": [],
                "docstring": "Configuration for file locking operations.",
                "base_classes": []
            },
            "LockInfo": {
                "methods": [
                    "is_stale",
                    "to_dict"
                ],
                "docstring": "Information about an active file lock.",
                "base_classes": []
            },
            "LockResult": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Result of file lock operation.",
                "base_classes": []
            },
            "LockMetrics": {
                "methods": [
                    "to_dict",
                    "update_averages"
                ],
                "docstring": "Metrics for file locking operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\file_locking\\operations\\lock_queries.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_locks_by_process",
            "get_locks_by_thread",
            "get_locks_by_owner",
            "get_locks_by_type",
            "get_locks_by_duration",
            "get_locks_by_metadata",
            "get_lock_statistics",
            "find_conflicting_locks",
            "get_lock_health_status"
        ],
        "classes": {
            "LockQueries": {
                "methods": [
                    "__init__",
                    "get_locks_by_process",
                    "get_locks_by_thread",
                    "get_locks_by_owner",
                    "get_locks_by_type",
                    "get_locks_by_duration",
                    "get_locks_by_metadata",
                    "get_lock_statistics",
                    "find_conflicting_locks",
                    "get_lock_health_status"
                ],
                "docstring": "File locking query functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\core\\fsm\\definitions.py": {
        "language": ".py",
        "functions": [
            "get_default_definitions"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\core\\file_locking\\file_locking_engine_base.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_platform_specific",
            "create_lock",
            "is_locked",
            "get_metrics",
            "_update_metrics"
        ],
        "classes": {
            "FileLockEngineBase": {
                "methods": [
                    "__init__",
                    "_setup_platform_specific",
                    "create_lock",
                    "is_locked",
                    "get_metrics",
                    "_update_metrics"
                ],
                "docstring": "Base engine for file locking operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\core\\error_handling\\error_models_core.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "__post_init__",
            "__post_init__"
        ],
        "classes": {
            "ErrorContext": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Error context with V2 compliance.",
                "base_classes": []
            },
            "CircuitBreakerConfig": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Circuit breaker configuration with V2 compliance.",
                "base_classes": []
            },
            "RetryConfig": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Retry configuration with V2 compliance.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\core\\file_locking\\file_locking_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_file_lock",
            "acquire_lock",
            "release_lock",
            "is_locked",
            "cleanup_stale_locks",
            "get_active_locks",
            "get_lock_info",
            "force_release_lock",
            "get_metrics",
            "reset_metrics",
            "get_lock_summary"
        ],
        "classes": {
            "FileLockManager": {
                "methods": [
                    "__init__",
                    "create_file_lock",
                    "acquire_lock",
                    "release_lock",
                    "is_locked",
                    "cleanup_stale_locks",
                    "get_active_locks",
                    "get_lock_info",
                    "force_release_lock",
                    "get_metrics",
                    "reset_metrics",
                    "get_lock_summary"
                ],
                "docstring": "High-level file locking manager.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "src\\core\\fsm\\constants.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\file_locking\\operations\\lock_operations.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_file_lock",
            "acquire_lock",
            "release_lock",
            "is_locked",
            "get_lock_info",
            "force_release_lock",
            "extend_lock",
            "get_active_locks",
            "get_lock_metrics",
            "cleanup_expired_locks",
            "batch_acquire_locks",
            "batch_release_locks"
        ],
        "classes": {
            "LockOperations": {
                "methods": [
                    "__init__",
                    "create_file_lock",
                    "acquire_lock",
                    "release_lock",
                    "is_locked",
                    "get_lock_info",
                    "force_release_lock",
                    "extend_lock",
                    "get_active_locks",
                    "get_lock_metrics",
                    "cleanup_expired_locks",
                    "batch_acquire_locks",
                    "batch_release_locks"
                ],
                "docstring": "Core file locking operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "src\\core\\error_handling\\circuit_breaker.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "call",
            "_should_attempt_reset",
            "_on_success",
            "_on_failure"
        ],
        "classes": {
            "CircuitBreaker": {
                "methods": [
                    "__init__",
                    "call",
                    "_should_attempt_reset",
                    "_on_success",
                    "_on_failure"
                ],
                "docstring": "Circuit breaker pattern for preventing cascading failures.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\error_handling\\circuit_breaker\\core.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "_should_attempt_reset",
            "_record_success",
            "_record_failure",
            "get_status"
        ],
        "classes": {
            "CircuitState": {
                "methods": [],
                "docstring": "Circuit breaker states.",
                "base_classes": [
                    "Enum"
                ]
            },
            "CircuitBreakerConfig": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Configuration for circuit breaker.",
                "base_classes": []
            },
            "CircuitBreakerCore": {
                "methods": [
                    "__init__",
                    "_should_attempt_reset",
                    "_record_success",
                    "_record_failure",
                    "get_status"
                ],
                "docstring": "Core circuit breaker functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\core\\error_handling\\error_reporting_utilities.py": {
        "language": ".py",
        "functions": [
            "get_error_reporter",
            "report_error",
            "get_error_report",
            "clear_error_reports",
            "get_error_statistics",
            "create_component_report"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "src\\core\\error_handling\\metrics\\error_reports.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "add_error_data",
            "add_recommendation",
            "get_average_resolution_time",
            "get_summary"
        ],
        "classes": {
            "ErrorReport": {
                "methods": [
                    "__post_init__",
                    "add_error_data",
                    "add_recommendation",
                    "get_average_resolution_time",
                    "get_summary"
                ],
                "docstring": "Error report with V2 compliance.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\fsm\\models\\__init__.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "add_transition",
            "can_transition",
            "transition",
            "__init__",
            "add_entry_action",
            "add_exit_action",
            "execute_entry_actions",
            "execute_exit_actions",
            "__init__",
            "get_current_state",
            "trigger_event",
            "is_completed",
            "get_metadata"
        ],
        "classes": {
            "FSMState": {
                "methods": [],
                "docstring": "FSM state definitions.",
                "base_classes": [
                    "Enum"
                ]
            },
            "FSMEvent": {
                "methods": [],
                "docstring": "FSM event definitions.",
                "base_classes": [
                    "Enum"
                ]
            },
            "StateStatus": {
                "methods": [],
                "docstring": "State status definitions.",
                "base_classes": [
                    "Enum"
                ]
            },
            "TransitionDefinition": {
                "methods": [],
                "docstring": "Transition definition for FSM.",
                "base_classes": []
            },
            "TransitionType": {
                "methods": [],
                "docstring": "Transition type definitions.",
                "base_classes": [
                    "Enum"
                ]
            },
            "WorkflowPriority": {
                "methods": [],
                "docstring": "Workflow priority definitions.",
                "base_classes": [
                    "Enum"
                ]
            },
            "FSMTransition": {
                "methods": [
                    "__init__"
                ],
                "docstring": "FSM transition definition.",
                "base_classes": []
            },
            "FSMModel": {
                "methods": [
                    "__init__",
                    "add_transition",
                    "can_transition",
                    "transition"
                ],
                "docstring": "Finite State Machine model.",
                "base_classes": []
            },
            "StateDefinition": {
                "methods": [
                    "__init__",
                    "add_entry_action",
                    "add_exit_action",
                    "execute_entry_actions",
                    "execute_exit_actions"
                ],
                "docstring": "Definition of an FSM state.",
                "base_classes": []
            },
            "WorkflowInstance": {
                "methods": [
                    "__init__",
                    "get_current_state",
                    "trigger_event",
                    "is_completed",
                    "get_metadata"
                ],
                "docstring": "Workflow instance for FSM operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 30
    },
    "src\\core\\import_system\\import_core.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "os",
            "sys",
            "json",
            "logging",
            "threading",
            "time",
            "re",
            "datetime",
            "Path",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Union",
            "Callable",
            "Tuple",
            "dataclass",
            "field",
            "Enum",
            "ABC",
            "abstractmethod"
        ],
        "classes": {
            "ImportSystemCore": {
                "methods": [
                    "__init__",
                    "os",
                    "sys",
                    "json",
                    "logging",
                    "threading",
                    "time",
                    "re",
                    "datetime",
                    "Path",
                    "Any",
                    "Dict",
                    "List",
                    "Optional",
                    "Union",
                    "Callable",
                    "Tuple",
                    "dataclass",
                    "field",
                    "Enum",
                    "ABC",
                    "abstractmethod"
                ],
                "docstring": "Core import system functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 44
    },
    "src\\core\\error_handling\\retry_safety_engine.py": {
        "language": ".py",
        "functions": [
            "retry_operation",
            "safe_execute",
            "__init__",
            "_get_logger",
            "retry_operation",
            "safe_execute",
            "validate_and_execute",
            "execute_with_timeout",
            "circuit_breaker_execute",
            "timeout_handler"
        ],
        "classes": {
            "RetrySafetyEngine": {
                "methods": [
                    "__init__",
                    "_get_logger",
                    "retry_operation",
                    "safe_execute",
                    "validate_and_execute",
                    "execute_with_timeout",
                    "circuit_breaker_execute"
                ],
                "docstring": "Engine for retry operations and safe execution.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "src\\core\\error_handling\\metrics\\error_alerts.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "acknowledge",
            "add_recipient",
            "remove_recipient",
            "is_high_priority",
            "get_summary"
        ],
        "classes": {
            "ErrorAlert": {
                "methods": [
                    "__post_init__",
                    "acknowledge",
                    "add_recipient",
                    "remove_recipient",
                    "is_high_priority",
                    "get_summary"
                ],
                "docstring": "Error alert with V2 compliance.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\core\\error_handling\\metrics\\error_metrics.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "add_error",
            "calculate_success_rate",
            "get_summary"
        ],
        "classes": {
            "ErrorMetrics": {
                "methods": [
                    "__post_init__",
                    "add_error",
                    "calculate_success_rate",
                    "get_summary"
                ],
                "docstring": "Error metrics with V2 compliance.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\integration\\analytics\\analytics_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_performance_data",
            "get_trend_analysis",
            "get_performance_forecast",
            "get_optimization_recommendations",
            "get_analytics_summary",
            "clear_all_caches",
            "get_cached_trends",
            "get_cached_forecasts",
            "get_latest_recommendations",
            "validate_forecast_accuracy",
            "get_recommendations_by_priority",
            "get_recommendations_by_category"
        ],
        "classes": {
            "VectorIntegrationAnalyticsEngine": {
                "methods": [
                    "__init__",
                    "analyze_performance_data",
                    "get_trend_analysis",
                    "get_performance_forecast",
                    "get_optimization_recommendations",
                    "get_analytics_summary",
                    "clear_all_caches",
                    "get_cached_trends",
                    "get_cached_forecasts",
                    "get_latest_recommendations",
                    "validate_forecast_accuracy",
                    "get_recommendations_by_priority",
                    "get_recommendations_by_category"
                ],
                "docstring": "Main analytics engine for vector integration analysis.\n\nCoordinates trend analysis, forecasting, and recommendation generation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "src\\core\\integration\\models\\data_models.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "is_critical",
            "is_resolved",
            "__post_init__",
            "is_significant",
            "__post_init__",
            "is_expired",
            "__post_init__",
            "__post_init__",
            "is_valid"
        ],
        "classes": {
            "PerformanceAlert": {
                "methods": [
                    "__post_init__",
                    "is_critical",
                    "is_resolved"
                ],
                "docstring": "Performance alert data structure.",
                "base_classes": []
            },
            "TrendAnalysis": {
                "methods": [
                    "__post_init__",
                    "is_significant"
                ],
                "docstring": "Trend analysis data structure.",
                "base_classes": []
            },
            "PerformanceForecast": {
                "methods": [
                    "__post_init__",
                    "is_expired"
                ],
                "docstring": "Performance forecast data structure.",
                "base_classes": []
            },
            "OptimizationRecommendation": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Optimization recommendation.",
                "base_classes": []
            },
            "PerformanceMetrics": {
                "methods": [
                    "__post_init__",
                    "is_valid"
                ],
                "docstring": "Performance metrics data structure.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\core\\import_system\\import_registry.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register_import",
            "get_import",
            "has_import",
            "remove_import",
            "clear_cache",
            "get_cache_stats",
            "mark_failed_import",
            "is_failed_import",
            "clear_failed_imports",
            "get_import_history",
            "cleanup_old_imports",
            "get_import_patterns",
            "validate_import_pattern"
        ],
        "classes": {
            "ImportRegistry": {
                "methods": [
                    "__init__",
                    "register_import",
                    "get_import",
                    "has_import",
                    "remove_import",
                    "clear_cache",
                    "get_cache_stats",
                    "mark_failed_import",
                    "is_failed_import",
                    "clear_failed_imports",
                    "get_import_history",
                    "cleanup_old_imports",
                    "get_import_patterns",
                    "validate_import_pattern"
                ],
                "docstring": "Registry for managing import patterns and caching.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "src\\core\\import_system\\import_utilities.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_module_path",
            "is_module_available",
            "get_import_path",
            "resolve_relative_import",
            "get_package_root",
            "list_module_contents",
            "get_module_docstring",
            "validate_import_syntax",
            "get_import_dependencies",
            "create_import_alias",
            "create_from_import"
        ],
        "classes": {
            "ImportUtilities": {
                "methods": [
                    "__init__",
                    "get_module_path",
                    "is_module_available",
                    "get_import_path",
                    "resolve_relative_import",
                    "get_package_root",
                    "list_module_contents",
                    "get_module_docstring",
                    "validate_import_syntax",
                    "get_import_dependencies",
                    "create_import_alias",
                    "create_from_import"
                ],
                "docstring": "Utility functions for import system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "src\\core\\integration\\analytics\\forecast_generator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_forecast",
            "_generate_simple_forecast",
            "generate_multi_metric_forecast",
            "validate_forecast_accuracy",
            "get_forecast_summary",
            "get_cached_forecasts",
            "clear_forecast_cache"
        ],
        "classes": {
            "ForecastGenerator": {
                "methods": [
                    "__init__",
                    "generate_forecast",
                    "_generate_simple_forecast",
                    "generate_multi_metric_forecast",
                    "validate_forecast_accuracy",
                    "get_forecast_summary",
                    "get_cached_forecasts",
                    "clear_forecast_cache"
                ],
                "docstring": "Generator for performance forecasting and prediction.\n\nProvides forecasting capabilities using various statistical methods.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\integration\\analytics\\recommendation_engine_analysis.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_generate_metric_recommendations",
            "_analyze_metric_for_recommendations",
            "_calculate_metric_summaries",
            "_is_highly_volatile"
        ],
        "classes": {
            "RecommendationEngineAnalysis": {
                "methods": [
                    "__init__",
                    "_generate_metric_recommendations",
                    "_analyze_metric_for_recommendations",
                    "_calculate_metric_summaries",
                    "_is_highly_volatile"
                ],
                "docstring": "Analysis functionality for recommendation engine.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\integration\\analytics\\recommendation_engine_system.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_generate_system_recommendations",
            "_calculate_metric_summaries",
            "_check_resource_optimization",
            "_check_performance_optimization",
            "_check_scalability_optimization",
            "_create_metric_recommendation"
        ],
        "classes": {
            "RecommendationEngineSystem": {
                "methods": [
                    "__init__",
                    "_generate_system_recommendations",
                    "_calculate_metric_summaries",
                    "_check_resource_optimization",
                    "_check_performance_optimization",
                    "_check_scalability_optimization",
                    "_create_metric_recommendation"
                ],
                "docstring": "System-wide recommendation functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\core\\integration\\analytics\\recommendation_engine_base.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_latest_recommendations",
            "get_recommendations_by_priority",
            "get_recommendations_by_category",
            "clear_recommendation_cache",
            "add_recommendation",
            "get_recommendation_count",
            "get_recommendation_summary"
        ],
        "classes": {
            "RecommendationEngineBase": {
                "methods": [
                    "__init__",
                    "get_latest_recommendations",
                    "get_recommendations_by_priority",
                    "get_recommendations_by_category",
                    "clear_recommendation_cache",
                    "add_recommendation",
                    "get_recommendation_count",
                    "get_recommendation_summary"
                ],
                "docstring": "Base engine for optimization recommendation generation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\integration_coordinators\\unified_integration\\monitor.py": {
        "language": ".py",
        "functions": [
            "create_integration_monitor",
            "__init__",
            "start_monitoring",
            "stop_monitoring",
            "add_callback",
            "remove_callback",
            "record_request",
            "get_metrics",
            "get_all_metrics",
            "is_monitoring_active",
            "get_monitoring_status",
            "cleanup"
        ],
        "classes": {
            "IntegrationMonitor": {
                "methods": [
                    "__init__",
                    "start_monitoring",
                    "stop_monitoring",
                    "add_callback",
                    "remove_callback",
                    "record_request",
                    "get_metrics",
                    "get_all_metrics",
                    "is_monitoring_active",
                    "get_monitoring_status",
                    "cleanup"
                ],
                "docstring": "V2 Compliant Integration Monitor.\n\nUses specialized components to provide monitoring capabilities while maintaining\nclean, focused architecture.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 23
    },
    "src\\core\\integration_coordinators\\unified_integration\\models_config.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "__post_init__",
            "__post_init__",
            "__post_init__"
        ],
        "classes": {
            "IntegrationConfig": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Integration configuration.",
                "base_classes": []
            },
            "IntegrationTask": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Integration task definition.",
                "base_classes": []
            },
            "IntegrationRequest": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Integration request data.",
                "base_classes": []
            },
            "IntegrationResponse": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Integration response data.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\integration_coordinators\\unified_integration\\models\\factory.py": {
        "language": ".py",
        "functions": [
            "create_integration_metrics",
            "create_optimization_config",
            "create_integration_config",
            "create_integration_task"
        ],
        "classes": {
            "IntegrationModels": {
                "methods": [
                    "create_integration_metrics",
                    "create_optimization_config",
                    "create_integration_config",
                    "create_integration_task"
                ],
                "docstring": "Factory class for creating integration models.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\integration_coordinators\\unified_integration\\optimizer.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\integration_coordinators\\vector_database_coordinator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_unified_performance_report",
            "get_optimization_recommendations",
            "optimize_integration",
            "get_integration_status"
        ],
        "classes": {
            "VectorDatabaseCoordinator": {
                "methods": [
                    "__init__",
                    "get_unified_performance_report",
                    "get_optimization_recommendations",
                    "optimize_integration",
                    "get_integration_status"
                ],
                "docstring": "Coordinates vector database integration optimization.",
                "base_classes": [
                    "IIntegrationCoordinator"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\integration_coordinators\\unified_integration\\coordinators\\task_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_task",
            "execute_task",
            "register_integration_handler",
            "get_task_status",
            "get_active_tasks",
            "cleanup_completed_tasks",
            "_default_handler",
            "get_manager_status"
        ],
        "classes": {
            "TaskManager": {
                "methods": [
                    "__init__",
                    "create_task",
                    "execute_task",
                    "register_integration_handler",
                    "get_task_status",
                    "get_active_tasks",
                    "cleanup_completed_tasks",
                    "_default_handler",
                    "get_manager_status"
                ],
                "docstring": "Handles integration task management.\n\nManages task creation, execution, status tracking, and cleanup operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\core\\integration_coordinators\\messaging_coordinator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_unified_performance_report",
            "get_optimization_recommendations",
            "optimize_integration",
            "get_integration_status"
        ],
        "classes": {
            "MessagingCoordinator": {
                "methods": [
                    "__init__",
                    "get_unified_performance_report",
                    "get_optimization_recommendations",
                    "optimize_integration",
                    "get_integration_status"
                ],
                "docstring": "Coordinates messaging integration optimization.",
                "base_classes": [
                    "IIntegrationCoordinator"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\integration_coordinators\\unified_integration\\monitors\\alert_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_callback",
            "remove_callback",
            "check_alerts",
            "trigger_alerts",
            "set_threshold",
            "get_thresholds",
            "get_alert_status",
            "cleanup"
        ],
        "classes": {
            "AlertManager": {
                "methods": [
                    "__init__",
                    "add_callback",
                    "remove_callback",
                    "check_alerts",
                    "trigger_alerts",
                    "set_threshold",
                    "get_thresholds",
                    "get_alert_status",
                    "cleanup"
                ],
                "docstring": "Manages monitoring alerts and notifications.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\core\\integration_coordinators\\unified_integration\\monitor_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_monitoring",
            "stop_monitoring",
            "add_callback",
            "remove_callback",
            "get_metrics",
            "get_all_metrics",
            "get_stats",
            "check_integration_health",
            "update_metrics",
            "_monitoring_loop",
            "_perform_monitoring_cycle",
            "_trigger_alert",
            "_handle_monitoring_error",
            "_handle_callback_error"
        ],
        "classes": {
            "IntegrationMonitorEngine": {
                "methods": [
                    "__init__",
                    "start_monitoring",
                    "stop_monitoring",
                    "add_callback",
                    "remove_callback",
                    "get_metrics",
                    "get_all_metrics",
                    "get_stats",
                    "check_integration_health",
                    "update_metrics",
                    "_monitoring_loop",
                    "_perform_monitoring_cycle",
                    "_trigger_alert",
                    "_handle_monitoring_error",
                    "_handle_callback_error"
                ],
                "docstring": "Core engine for integration monitoring operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 30
    },
    "src\\core\\integration_coordinators\\unified_integration\\monitor_models.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "__post_init__"
        ],
        "classes": {
            "MonitoringConfig": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Configuration for integration monitoring.",
                "base_classes": []
            },
            "MonitoringAlert": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Monitoring alert data structure.",
                "base_classes": []
            },
            "MonitoringStats": {
                "methods": [],
                "docstring": "Monitoring statistics.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\core\\integration_coordinators\\unified_integration\\coordinators\\health_monitor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_system_health",
            "_get_health_status_text",
            "_get_health_recommendations",
            "add_monitoring_callback",
            "set_alert_threshold",
            "get_alert_thresholds",
            "check_health_thresholds",
            "record_health_status",
            "get_health_trends",
            "get_monitor_status"
        ],
        "classes": {
            "HealthMonitor": {
                "methods": [
                    "__init__",
                    "get_system_health",
                    "_get_health_status_text",
                    "_get_health_recommendations",
                    "add_monitoring_callback",
                    "set_alert_threshold",
                    "get_alert_thresholds",
                    "check_health_thresholds",
                    "record_health_status",
                    "get_health_trends",
                    "get_monitor_status"
                ],
                "docstring": "Handles system health monitoring and recommendations.\n\nManages health status tracking, recommendations, and system health analysis.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\core\\integration_coordinators\\unified_integration\\monitors\\metrics_collector.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "collect_metrics",
            "update_metrics",
            "get_metrics",
            "get_all_metrics",
            "reset_metrics",
            "cleanup"
        ],
        "classes": {
            "MetricsCollector": {
                "methods": [
                    "__init__",
                    "collect_metrics",
                    "update_metrics",
                    "get_metrics",
                    "get_all_metrics",
                    "reset_metrics",
                    "cleanup"
                ],
                "docstring": "Collects and processes integration metrics.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\core\\integration_coordinators\\unified_integration\\coordinators\\config_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "export_configuration",
            "validate_configuration",
            "update_configuration",
            "get_configuration_summary",
            "get_configuration_history",
            "reset_configuration",
            "get_manager_status"
        ],
        "classes": {
            "ConfigManager": {
                "methods": [
                    "__init__",
                    "export_configuration",
                    "validate_configuration",
                    "update_configuration",
                    "get_configuration_summary",
                    "get_configuration_history",
                    "reset_configuration",
                    "get_manager_status"
                ],
                "docstring": "Handles configuration management and export.\n\nManages configuration settings, export functionality, and configuration validation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\integration_coordinators\\unified_integration\\optimizers\\advanced_optimizer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "optimize_integration",
            "get_optimization_recommendations",
            "get_optimizer_status",
            "_record_optimization",
            "get_optimization_history"
        ],
        "classes": {
            "AdvancedOptimizer": {
                "methods": [
                    "__init__",
                    "optimize_integration",
                    "get_optimization_recommendations",
                    "get_optimizer_status",
                    "_record_optimization",
                    "get_optimization_history"
                ],
                "docstring": "Handles advanced optimization strategies.\n\nManages advanced optimization techniques like connection pooling, request batching,\nand load balancing.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\core\\integration_coordinators\\unified_integration\\optimizers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\integration_coordinators\\unified_integration\\monitors\\monitoring_thread.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_monitoring",
            "stop_monitoring",
            "_monitoring_loop",
            "is_monitoring_active",
            "get_monitoring_status",
            "set_monitoring_interval",
            "cleanup"
        ],
        "classes": {
            "MonitoringThread": {
                "methods": [
                    "__init__",
                    "start_monitoring",
                    "stop_monitoring",
                    "_monitoring_loop",
                    "is_monitoring_active",
                    "get_monitoring_status",
                    "set_monitoring_interval",
                    "cleanup"
                ],
                "docstring": "Manages monitoring thread operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\integration_coordinators\\unified_integration\\optimizers\\basic_optimizer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "optimize_integration",
            "get_optimization_recommendations",
            "get_optimizer_status",
            "_record_optimization",
            "get_optimization_history"
        ],
        "classes": {
            "BasicOptimizer": {
                "methods": [
                    "__init__",
                    "optimize_integration",
                    "get_optimization_recommendations",
                    "get_optimizer_status",
                    "_record_optimization",
                    "get_optimization_history"
                ],
                "docstring": "Handles basic optimization strategies.\n\nManages basic optimization techniques like caching, concurrency control, and simple\nperformance improvements.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\core\\integration_coordinators\\unified_integration\\optimizers\\base_optimization_history.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_record_optimization",
            "get_optimization_history"
        ],
        "classes": {
            "BaseOptimizationHistory": {
                "methods": [
                    "__init__",
                    "_record_optimization",
                    "get_optimization_history"
                ],
                "docstring": "Provides shared optimization history functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\core\\integration_coordinators\\unified_integration\\optimizers\\maximum_optimizer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register_optimization_handler",
            "optimize_integration",
            "get_optimization_recommendations",
            "get_optimizer_status",
            "_record_optimization"
        ],
        "classes": {
            "MaximumOptimizer": {
                "methods": [
                    "__init__",
                    "register_optimization_handler",
                    "optimize_integration",
                    "get_optimization_recommendations",
                    "get_optimizer_status",
                    "_record_optimization"
                ],
                "docstring": "Handles maximum optimization strategies and custom optimizations.",
                "base_classes": [
                    "BaseOptimizationHistory"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\core\\integration_coordinators\\unified_integration\\optimizers\\optimizer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register_optimization_config",
            "register_optimization_handler",
            "optimize_integration",
            "get_optimization_recommendations",
            "get_optimization_status",
            "clear_optimization_history"
        ],
        "classes": {
            "IntegrationOptimizer": {
                "methods": [
                    "__init__",
                    "register_optimization_config",
                    "register_optimization_handler",
                    "optimize_integration",
                    "get_optimization_recommendations",
                    "get_optimization_status",
                    "clear_optimization_history"
                ],
                "docstring": "Main optimizer for integration coordination.\n\nCoordinates basic, advanced, and maximum optimization\nstrategies for integration performance.",
                "base_classes": [
                    "BaseOptimizationHistory"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\core\\integration_utilities\\integration_interfaces.py": {
        "language": ".py",
        "functions": [
            "get_performance_report",
            "optimize",
            "get_status",
            "get_unified_performance_report",
            "get_optimization_recommendations",
            "optimize_integration",
            "get_integration_status",
            "start_monitoring",
            "stop_monitoring",
            "collect_metrics",
            "analyze_performance"
        ],
        "classes": {
            "IIntegrationEngine": {
                "methods": [
                    "get_performance_report",
                    "optimize",
                    "get_status"
                ],
                "docstring": "Interface for integration engines.",
                "base_classes": [
                    "ABC"
                ]
            },
            "IIntegrationCoordinator": {
                "methods": [
                    "get_unified_performance_report",
                    "get_optimization_recommendations",
                    "optimize_integration",
                    "get_integration_status"
                ],
                "docstring": "Interface for integration coordinators.",
                "base_classes": [
                    "ABC"
                ]
            },
            "IPerformanceMonitor": {
                "methods": [
                    "start_monitoring",
                    "stop_monitoring",
                    "collect_metrics",
                    "analyze_performance"
                ],
                "docstring": "Interface for performance monitoring.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\core\\intelligent_context\\intelligent_context_orchestrator.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\integration_engines\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\integration_engines\\messaging_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_performance_report",
            "optimize",
            "get_status",
            "update_performance_data"
        ],
        "classes": {
            "MessagingEngine": {
                "methods": [
                    "__init__",
                    "get_performance_report",
                    "optimize",
                    "get_status",
                    "update_performance_data"
                ],
                "docstring": "Engine for messaging integration optimization.",
                "base_classes": [
                    "IIntegrationEngine"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\integration_engines\\data_processing_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_performance_report",
            "optimize",
            "get_status",
            "update_performance_data"
        ],
        "classes": {
            "DataProcessingEngine": {
                "methods": [
                    "__init__",
                    "get_performance_report",
                    "optimize",
                    "get_status",
                    "update_performance_data"
                ],
                "docstring": "Engine for data processing integration optimization.",
                "base_classes": [
                    "IIntegrationEngine"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\intelligent_context\\intelligent_context_optimization_models.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "OptimizationResult": {
                "methods": [],
                "docstring": "Result of optimization operation.",
                "base_classes": []
            },
            "AgentScore": {
                "methods": [],
                "docstring": "Agent scoring data.",
                "base_classes": []
            },
            "MissionAnalysis": {
                "methods": [],
                "docstring": "Mission analysis data.",
                "base_classes": []
            },
            "RiskMitigation": {
                "methods": [],
                "docstring": "Risk mitigation strategy.",
                "base_classes": []
            },
            "SuccessFactor": {
                "methods": [],
                "docstring": "Success factor analysis.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\core\\intelligent_context\\intelligent_context_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "update_mission_context",
            "get_mission_context",
            "update_agent_capability",
            "get_agent_capabilities",
            "search_context",
            "get_emergency_context",
            "get_intervention_protocols",
            "optimize_agent_assignment",
            "analyze_success_patterns",
            "assess_mission_risks",
            "generate_success_predictions",
            "get_metrics",
            "_update_metrics"
        ],
        "classes": {
            "IntelligentContextEngine": {
                "methods": [
                    "__init__",
                    "update_mission_context",
                    "get_mission_context",
                    "update_agent_capability",
                    "get_agent_capabilities",
                    "search_context",
                    "get_emergency_context",
                    "get_intervention_protocols",
                    "optimize_agent_assignment",
                    "analyze_success_patterns",
                    "assess_mission_risks",
                    "generate_success_predictions",
                    "get_metrics",
                    "_update_metrics"
                ],
                "docstring": "Core engine for intelligent context retrieval operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "src\\core\\intelligent_context\\engines\\risk_assessment_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "assess_mission_risks",
            "_determine_risk_level",
            "_generate_risk_mitigations",
            "calculate_risk_score",
            "get_risk_summary",
            "get_engine_status"
        ],
        "classes": {
            "RiskAssessmentEngine": {
                "methods": [
                    "__init__",
                    "assess_mission_risks",
                    "_determine_risk_level",
                    "_generate_risk_mitigations",
                    "calculate_risk_score",
                    "get_risk_summary",
                    "get_engine_status"
                ],
                "docstring": "Handles risk assessment and mitigation logic.\n\nManages risk analysis, mitigation generation, and risk level determination.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\core\\intelligent_context\\intelligent_context_search.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "search_context",
            "search_missions",
            "search_agents",
            "search_by_skills",
            "search_by_mission_type"
        ],
        "classes": {
            "IntelligentContextSearch": {
                "methods": [
                    "__init__",
                    "search_context",
                    "search_missions",
                    "search_agents",
                    "search_by_skills",
                    "search_by_mission_type"
                ],
                "docstring": "Search operations for intelligent context retrieval.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\core\\intelligent_context\\core\\context_core.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "update_mission_context",
            "get_mission_context",
            "get_agent_capabilities",
            "search_context",
            "get_emergency_context",
            "get_intervention_protocols",
            "optimize_agent_assignment",
            "analyze_success_patterns",
            "assess_mission_risks",
            "generate_success_predictions",
            "get_context_metrics"
        ],
        "classes": {
            "ContextCore": {
                "methods": [
                    "__init__",
                    "update_mission_context",
                    "get_mission_context",
                    "get_agent_capabilities",
                    "search_context",
                    "get_emergency_context",
                    "get_intervention_protocols",
                    "optimize_agent_assignment",
                    "analyze_success_patterns",
                    "assess_mission_risks",
                    "generate_success_predictions",
                    "get_context_metrics"
                ],
                "docstring": "Core intelligent context functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "src\\core\\intelligent_context\\engines\\agent_assignment_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "optimize_agent_assignment",
            "_calculate_agent_score",
            "_calculate_specialization_match",
            "_estimate_completion_time",
            "_calculate_confidence_level",
            "get_agent_availability_summary",
            "get_engine_status"
        ],
        "classes": {
            "AgentAssignmentEngine": {
                "methods": [
                    "__init__",
                    "optimize_agent_assignment",
                    "_calculate_agent_score",
                    "_calculate_specialization_match",
                    "_estimate_completion_time",
                    "_calculate_confidence_level",
                    "get_agent_availability_summary",
                    "get_engine_status"
                ],
                "docstring": "Handles agent assignment optimization logic.\n\nManages agent scoring, recommendation generation, and assignment optimization.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\intelligent_context\\intelligent_context_emergency.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_emergency_context",
            "get_intervention_protocols",
            "_get_intervention_protocols",
            "create_emergency_protocol",
            "assess_emergency_severity",
            "get_emergency_agents",
            "calculate_emergency_response_time"
        ],
        "classes": {
            "IntelligentContextEmergency": {
                "methods": [
                    "__init__",
                    "get_emergency_context",
                    "get_intervention_protocols",
                    "_get_intervention_protocols",
                    "create_emergency_protocol",
                    "assess_emergency_severity",
                    "get_emergency_agents",
                    "calculate_emergency_response_time"
                ],
                "docstring": "Emergency operations for intelligent context retrieval.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\intelligent_context\\unified_intelligent_context\\search_operations.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "search_contexts",
            "_preprocess_query",
            "_perform_search",
            "_create_mock_results",
            "search_with_pattern",
            "optimize_search_query"
        ],
        "classes": {
            "IntelligentContextSearchOperations": {
                "methods": [
                    "__init__",
                    "search_contexts",
                    "_preprocess_query",
                    "_perform_search",
                    "_create_mock_results",
                    "search_with_pattern",
                    "optimize_search_query"
                ],
                "docstring": "Search operations for intelligent context search.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\core\\intelligent_context\\optimizers\\agent_optimizer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "optimize_agent_assignment",
            "_calculate_agent_score",
            "_calculate_specialization_match",
            "_estimate_completion_time",
            "_calculate_confidence_level",
            "get_agent_recommendations",
            "get_agent_availability",
            "get_agent_performance_summary",
            "get_optimizer_status"
        ],
        "classes": {
            "AgentOptimizer": {
                "methods": [
                    "__init__",
                    "optimize_agent_assignment",
                    "_calculate_agent_score",
                    "_calculate_specialization_match",
                    "_estimate_completion_time",
                    "_calculate_confidence_level",
                    "get_agent_recommendations",
                    "get_agent_availability",
                    "get_agent_performance_summary",
                    "get_optimizer_status"
                ],
                "docstring": "Optimizes agent assignment and recommendations.\n\nHandles agent scoring, specialization matching, and recommendation generation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\core\\interfaces\\unified_interface\\registry.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "register_interface",
            "create_instance",
            "get_instance",
            "remove_instance",
            "get_interface_metadata",
            "get_interface_definition",
            "list_interfaces",
            "list_instances",
            "validate_interface",
            "get_validation_result",
            "cleanup_expired_instances",
            "get_registry_stats",
            "_remove_oldest_instance",
            "shutdown"
        ],
        "classes": {
            "InterfaceRegistry": {
                "methods": [
                    "__init__",
                    "initialize",
                    "register_interface",
                    "create_instance",
                    "get_instance",
                    "remove_instance",
                    "get_interface_metadata",
                    "get_interface_definition",
                    "list_interfaces",
                    "list_instances",
                    "validate_interface",
                    "get_validation_result",
                    "cleanup_expired_instances",
                    "get_registry_stats",
                    "_remove_oldest_instance",
                    "shutdown"
                ],
                "docstring": "Simplified interface registry for V2 compliance system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 32
    },
    "src\\core\\managers\\configuration_source_manager.py": {
        "language": ".py",
        "functions": [
            "load_from_file",
            "save_to_file",
            "load_from_env"
        ],
        "classes": {
            "ConfigurationSourceManager": {
                "methods": [
                    "load_from_file",
                    "save_to_file",
                    "load_from_env"
                ],
                "docstring": "Handles IO for configuration data.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\core\\managers\\base_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "_execute_operation",
            "cleanup",
            "get_status",
            "get_health_check",
            "update_configuration",
            "get_metrics",
            "reset_metrics",
            "__repr__"
        ],
        "classes": {
            "BaseManager": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "_execute_operation",
                    "cleanup",
                    "get_status",
                    "get_health_check",
                    "update_configuration",
                    "get_metrics",
                    "reset_metrics",
                    "__repr__"
                ],
                "docstring": "Unified base class for all managers - SSOT implementation.\nConsolidates common functionality using shared utilities and helpers.",
                "base_classes": [
                    "Manager",
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\core\\intelligent_context\\intelligent_context_models.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\intelligent_context\\optimizers\\risk_optimizer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "assess_mission_risks",
            "_determine_risk_level",
            "_generate_risk_mitigations",
            "calculate_risk_score",
            "get_risk_summary",
            "get_risk_trends",
            "get_optimizer_status"
        ],
        "classes": {
            "RiskOptimizer": {
                "methods": [
                    "__init__",
                    "assess_mission_risks",
                    "_determine_risk_level",
                    "_generate_risk_mitigations",
                    "calculate_risk_score",
                    "get_risk_summary",
                    "get_risk_trends",
                    "get_optimizer_status"
                ],
                "docstring": "Optimizes risk assessment and mitigation strategies.\n\nHandles risk analysis, mitigation generation, and risk level determination.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\intelligent_context\\optimizers\\intelligent_context_optimization.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "optimize_agent_assignment",
            "assess_mission_risks",
            "generate_success_predictions",
            "get_comprehensive_analysis",
            "_calculate_mission_score",
            "get_optimization_status",
            "get_optimization_metrics",
            "shutdown"
        ],
        "classes": {
            "IntelligentContextOptimization": {
                "methods": [
                    "__init__",
                    "optimize_agent_assignment",
                    "assess_mission_risks",
                    "generate_success_predictions",
                    "get_comprehensive_analysis",
                    "_calculate_mission_score",
                    "get_optimization_status",
                    "get_optimization_metrics",
                    "shutdown"
                ],
                "docstring": "Main optimizer for intelligent context operations.\n\nCoordinates agent optimization, risk assessment, and success prediction for mission\nplanning.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\core\\managers\\configuration_store.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_config",
            "get_config",
            "delete_config",
            "get_all_configs",
            "clear"
        ],
        "classes": {
            "ConfigurationStore": {
                "methods": [
                    "__init__",
                    "set_config",
                    "get_config",
                    "delete_config",
                    "get_all_configs",
                    "clear"
                ],
                "docstring": "Provides SSOT for configuration data.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\core\\managers\\constants.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\managers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\intelligent_context\\optimizers\\prediction_optimizer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_success_predictions",
            "_find_similar_missions",
            "_calculate_success_probability",
            "_identify_key_success_factors",
            "_identify_bottlenecks",
            "_generate_recommended_actions",
            "get_prediction_confidence",
            "get_prediction_summary",
            "get_prediction_trends",
            "get_optimizer_status"
        ],
        "classes": {
            "PredictionOptimizer": {
                "methods": [
                    "__init__",
                    "generate_success_predictions",
                    "_find_similar_missions",
                    "_calculate_success_probability",
                    "_identify_key_success_factors",
                    "_identify_bottlenecks",
                    "_generate_recommended_actions",
                    "get_prediction_confidence",
                    "get_prediction_summary",
                    "get_prediction_trends",
                    "get_optimizer_status"
                ],
                "docstring": "Optimizes success predictions and recommendations.\n\nHandles success prediction generation, factor analysis, and recommendation creation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\core\\intelligent_context\\unified_intelligent_context\\search_base.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_search_history",
            "clear_search_history",
            "add_search_pattern",
            "get_search_patterns",
            "_record_search",
            "get_search_statistics"
        ],
        "classes": {
            "IntelligentContextSearchBase": {
                "methods": [
                    "__init__",
                    "get_search_history",
                    "clear_search_history",
                    "add_search_pattern",
                    "get_search_patterns",
                    "_record_search",
                    "get_search_statistics"
                ],
                "docstring": "Base intelligent context search engine.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\core\\intelligent_context\\unified_intelligent_context\\engine_search.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "IntelligentContextEngineSearch": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Search functionality for intelligent context engine.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\core\\intelligent_context\\unified_intelligent_context\\engine_base.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_metrics",
            "_update_metrics",
            "clear_all_contexts",
            "add_mission_context",
            "add_agent_capability",
            "add_emergency_context",
            "add_intervention_protocol",
            "add_risk_assessment",
            "add_success_prediction"
        ],
        "classes": {
            "IntelligentContextEngineBase": {
                "methods": [
                    "__init__",
                    "get_metrics",
                    "_update_metrics",
                    "clear_all_contexts",
                    "add_mission_context",
                    "add_agent_capability",
                    "add_emergency_context",
                    "add_intervention_protocol",
                    "add_risk_assessment",
                    "add_success_prediction"
                ],
                "docstring": "Base intelligent context engine.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\core\\managers\\core_service_coordinator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "cleanup",
            "get_status"
        ],
        "classes": {
            "CoreServiceCoordinator": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "cleanup",
                    "get_status"
                ],
                "docstring": "Routes service operations to specialized managers.",
                "base_classes": [
                    "Manager"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\managers\\core_monitoring_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "create_alert",
            "record_metric",
            "create_widget",
            "cleanup",
            "get_status",
            "_start_background_monitoring",
            "monitor"
        ],
        "classes": {
            "CoreMonitoringManager": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "create_alert",
                    "record_metric",
                    "create_widget",
                    "cleanup",
                    "get_status",
                    "_start_background_monitoring"
                ],
                "docstring": "Core monitoring manager - consolidates alerts, metrics, and widgets.",
                "base_classes": [
                    "MonitoringManager"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 19
    },
    "src\\core\\managers\\registry.py": {
        "language": ".py",
        "functions": [
            "get_manager_registry",
            "create_manager_registry",
            "__init__",
            "register_manager_type",
            "create_manager",
            "get_manager",
            "get_all_managers",
            "execute_operation",
            "cleanup_all",
            "get_status",
            "initialize_default_managers"
        ],
        "classes": {
            "ManagerRegistry": {
                "methods": [
                    "__init__",
                    "register_manager_type",
                    "create_manager",
                    "get_manager",
                    "get_all_managers",
                    "execute_operation",
                    "cleanup_all",
                    "get_status",
                    "initialize_default_managers"
                ],
                "docstring": "DIP registry: high-level depends on abstraction, not concretion.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\core\\managers\\core_execution_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "execute_task",
            "register_protocol",
            "get_execution_status",
            "cleanup",
            "get_status",
            "create_task",
            "execute_protocol",
            "get_task_status"
        ],
        "classes": {
            "CoreExecutionManager": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "execute_task",
                    "register_protocol",
                    "get_execution_status",
                    "cleanup",
                    "get_status",
                    "create_task",
                    "execute_protocol",
                    "get_task_status"
                ],
                "docstring": "Core execution manager using specialized components for V2 compliance.",
                "base_classes": [
                    "ExecutionManager"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\core\\managers\\core_onboarding_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "cleanup",
            "get_status",
            "onboard_agent",
            "start_onboarding",
            "complete_onboarding",
            "get_onboarding_status"
        ],
        "classes": {
            "OnboardingSession": {
                "methods": [],
                "docstring": "Represents a single onboarding session.",
                "base_classes": []
            },
            "CoreOnboardingManager": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "cleanup",
                    "get_status",
                    "onboard_agent",
                    "start_onboarding",
                    "complete_onboarding",
                    "get_onboarding_status"
                ],
                "docstring": "Focuses solely on onboarding related operations.",
                "base_classes": [
                    "Manager"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\core\\managers\\contracts.py": {
        "language": ".py",
        "functions": [
            "initialize",
            "execute",
            "cleanup",
            "get_status",
            "create_resource",
            "get_resource",
            "update_resource",
            "delete_resource",
            "load_config",
            "save_config",
            "validate_config",
            "execute_task",
            "register_protocol",
            "get_execution_status",
            "create_alert",
            "record_metric",
            "create_widget",
            "onboard_agent",
            "recover_from_error",
            "process_results"
        ],
        "classes": {
            "ManagerContext": {
                "methods": [],
                "docstring": "SSOT: shared context object for all managers (DIP).",
                "base_classes": []
            },
            "ManagerResult": {
                "methods": [],
                "docstring": "Standard result object for all manager operations.",
                "base_classes": []
            },
            "Manager": {
                "methods": [
                    "initialize",
                    "execute",
                    "cleanup",
                    "get_status"
                ],
                "docstring": "Base manager protocol - stable contract (LSP).",
                "base_classes": [
                    "Protocol"
                ]
            },
            "ResourceManager": {
                "methods": [
                    "create_resource",
                    "get_resource",
                    "update_resource",
                    "delete_resource"
                ],
                "docstring": "Resource management protocol - files, locks, contexts.",
                "base_classes": [
                    "Manager",
                    "Protocol"
                ]
            },
            "ConfigurationManager": {
                "methods": [
                    "load_config",
                    "save_config",
                    "validate_config"
                ],
                "docstring": "Configuration management protocol - all config operations.",
                "base_classes": [
                    "Manager",
                    "Protocol"
                ]
            },
            "ExecutionManager": {
                "methods": [
                    "execute_task",
                    "register_protocol",
                    "get_execution_status"
                ],
                "docstring": "Execution management protocol - tasks, protocols, execution.",
                "base_classes": [
                    "Manager",
                    "Protocol"
                ]
            },
            "MonitoringManager": {
                "methods": [
                    "create_alert",
                    "record_metric",
                    "create_widget"
                ],
                "docstring": "Monitoring management protocol - alerts, metrics, widgets.",
                "base_classes": [
                    "Manager",
                    "Protocol"
                ]
            },
            "ServiceManager": {
                "methods": [
                    "onboard_agent",
                    "recover_from_error",
                    "process_results"
                ],
                "docstring": "Service management protocol - onboarding, recovery, results.",
                "base_classes": [
                    "Manager",
                    "Protocol"
                ]
            }
        },
        "routes": [],
        "complexity": 40
    },
    "src\\core\\managers\\core_configuration_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "load_config",
            "save_config",
            "validate_config",
            "cleanup",
            "get_status",
            "_load_environment_vars",
            "_load_default_configs",
            "_setup_validation_rules",
            "_get_all_configs",
            "_export_config",
            "_import_config"
        ],
        "classes": {
            "CoreConfigurationManager": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "load_config",
                    "save_config",
                    "validate_config",
                    "cleanup",
                    "get_status",
                    "_load_environment_vars",
                    "_load_default_configs",
                    "_setup_validation_rules",
                    "_get_all_configs",
                    "_export_config",
                    "_import_config"
                ],
                "docstring": "Core configuration manager - consolidates all config operations.",
                "base_classes": [
                    "ConfigurationManager"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 28
    },
    "src\\core\\managers\\core_service_manager.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "CoreServiceManager": {
                "methods": [],
                "docstring": "Maintains historical import path for service manager.",
                "base_classes": [
                    "CoreServiceCoordinator"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\core\\managers\\core_recovery_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "cleanup",
            "get_status",
            "register_recovery_strategy",
            "recover_from_error",
            "get_recovery_strategies"
        ],
        "classes": {
            "CoreRecoveryManager": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "cleanup",
                    "get_status",
                    "register_recovery_strategy",
                    "recover_from_error",
                    "get_recovery_strategies"
                ],
                "docstring": "Provides recovery mechanisms for service operations.",
                "base_classes": [
                    "Manager"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\managers\\core_resource_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "create_resource",
            "get_resource",
            "update_resource",
            "delete_resource",
            "cleanup",
            "get_status"
        ],
        "classes": {
            "CoreResourceManager": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "create_resource",
                    "get_resource",
                    "update_resource",
                    "delete_resource",
                    "cleanup",
                    "get_status"
                ],
                "docstring": "Core resource manager - consolidates file, lock, and context operations.",
                "base_classes": [
                    "ResourceManager"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\core\\managers\\adapters\\legacy_manager_adapter.py": {
        "language": ".py",
        "functions": [
            "create_legacy_manager_adapter",
            "__init__",
            "initialize",
            "execute",
            "cleanup",
            "get_status",
            "_map_operation",
            "_map_payload",
            "_map_file_payload",
            "_map_context_payload",
            "_map_config_payload",
            "_map_execution_payload",
            "_map_monitoring_payload",
            "_map_service_payload"
        ],
        "classes": {
            "LegacyManagerAdapter": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "cleanup",
                    "get_status",
                    "_map_operation",
                    "_map_payload",
                    "_map_file_payload",
                    "_map_context_payload",
                    "_map_config_payload",
                    "_map_execution_payload",
                    "_map_monitoring_payload",
                    "_map_service_payload"
                ],
                "docstring": "Adapter for legacy managers to use new core managers.",
                "base_classes": [
                    "Manager"
                ]
            }
        },
        "routes": [],
        "complexity": 27
    },
    "src\\core\\managers\\monitoring\\metrics_manager.py": {
        "language": ".py",
        "functions": [
            "execute",
            "_get_metric_aggregation",
            "_get_metric_trends",
            "_export_metrics",
            "get_status"
        ],
        "classes": {
            "MetricsManager": {
                "methods": [
                    "execute",
                    "_get_metric_aggregation",
                    "_get_metric_trends",
                    "_export_metrics",
                    "get_status"
                ],
                "docstring": "Manages metrics operations.",
                "base_classes": [
                    "BaseMonitoringManager"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\managers\\results\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\managers\\adapters\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\managers\\unified_configuration_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "cleanup",
            "get_status",
            "_load_config",
            "_save_config",
            "_get_all_configs"
        ],
        "classes": {
            "UnifiedConfigurationManager": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "cleanup",
                    "get_status",
                    "_load_config",
                    "_save_config",
                    "_get_all_configs"
                ],
                "docstring": "Aggregates configuration loading, validation and storage.",
                "base_classes": [
                    "BaseManager"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\managers\\execution\\execution_coordinator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "cleanup",
            "get_status",
            "_sync_managers",
            "create_task",
            "execute_protocol",
            "get_task_status"
        ],
        "classes": {
            "ExecutionCoordinator": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "cleanup",
                    "get_status",
                    "_sync_managers",
                    "create_task",
                    "execute_protocol",
                    "get_task_status"
                ],
                "docstring": "Coordinates execution operations between task and protocol managers.",
                "base_classes": [
                    "BaseExecutionManager"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\core\\managers\\results\\integration_results_processor.py": {
        "language": ".py",
        "functions": [
            "_process_result_by_type",
            "_process_integration_result",
            "_process_api_integration",
            "_process_database_integration",
            "_process_file_integration"
        ],
        "classes": {
            "IntegrationResultsProcessor": {
                "methods": [
                    "_process_result_by_type",
                    "_process_integration_result",
                    "_process_api_integration",
                    "_process_database_integration",
                    "_process_file_integration"
                ],
                "docstring": "Processes integration-specific results.",
                "base_classes": [
                    "BaseResultsManager"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\managers\\results\\performance_results_processor.py": {
        "language": ".py",
        "functions": [
            "_process_result_by_type",
            "_process_performance_result",
            "_calculate_performance_score",
            "_analyze_performance_trends"
        ],
        "classes": {
            "PerformanceResultsProcessor": {
                "methods": [
                    "_process_result_by_type",
                    "_process_performance_result",
                    "_calculate_performance_score",
                    "_analyze_performance_trends"
                ],
                "docstring": "Processes performance-specific results.",
                "base_classes": [
                    "BaseResultsManager"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\managers\\results\\results_archive_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute",
            "_archive_old_results_operation",
            "_cleanup_archives_operation",
            "_compress_archives_operation",
            "_archive_single_result",
            "_compress_single_archive",
            "get_status"
        ],
        "classes": {
            "ResultsArchiveManager": {
                "methods": [
                    "__init__",
                    "execute",
                    "_archive_old_results_operation",
                    "_cleanup_archives_operation",
                    "_compress_archives_operation",
                    "_archive_single_result",
                    "_compress_single_archive",
                    "get_status"
                ],
                "docstring": "Manages results archiving and cleanup.",
                "base_classes": [
                    "BaseResultsManager"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\managers\\execution\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\managers\\core_results_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "cleanup",
            "get_status",
            "process_results",
            "get_results"
        ],
        "classes": {
            "CoreResultsManager": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "cleanup",
                    "get_status",
                    "process_results",
                    "get_results"
                ],
                "docstring": "Handles result processing operations.",
                "base_classes": [
                    "Manager"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\core\\managers\\results\\validation_results_processor.py": {
        "language": ".py",
        "functions": [
            "_process_result_by_type",
            "_process_validation_result"
        ],
        "classes": {
            "ValidationResultsProcessor": {
                "methods": [
                    "_process_result_by_type",
                    "_process_validation_result"
                ],
                "docstring": "Processes validation-specific results.",
                "base_classes": [
                    "BaseResultsManager"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\core\\managers\\results\\analysis_results_processor.py": {
        "language": ".py",
        "functions": [
            "_process_result_by_type",
            "_process_analysis_result"
        ],
        "classes": {
            "AnalysisResultsProcessor": {
                "methods": [
                    "_process_result_by_type",
                    "_process_analysis_result"
                ],
                "docstring": "Processes analysis-specific results.",
                "base_classes": [
                    "BaseResultsManager"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\core\\managers\\execution\\task_manager.py": {
        "language": ".py",
        "functions": [
            "execute",
            "_get_task_status",
            "get_status"
        ],
        "classes": {
            "TaskManager": {
                "methods": [
                    "execute",
                    "_get_task_status",
                    "get_status"
                ],
                "docstring": "Manages task execution operations.",
                "base_classes": [
                    "BaseExecutionManager"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\core\\managers\\execution\\protocol_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register_default_protocols",
            "register_protocol",
            "get_protocol",
            "list_protocols"
        ],
        "classes": {
            "ProtocolType": {
                "methods": [],
                "docstring": "Protocol types.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ProtocolManager": {
                "methods": [
                    "__init__",
                    "register_default_protocols",
                    "register_protocol",
                    "get_protocol",
                    "list_protocols"
                ],
                "docstring": "Manages execution protocols.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\managers\\execution\\base_execution_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "execute_task",
            "register_protocol",
            "get_execution_status",
            "_list_protocols",
            "_start_task_processor"
        ],
        "classes": {
            "BaseExecutionManager": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "execute_task",
                    "register_protocol",
                    "get_execution_status",
                    "_list_protocols",
                    "_start_task_processor"
                ],
                "docstring": "Base execution manager with common functionality.",
                "base_classes": [
                    "ExecutionManager"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\managers\\monitoring\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\managers\\monitoring\\alert_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_alert",
            "acknowledge_alert",
            "resolve_alert",
            "get_alerts",
            "_check_alert_rules",
            "_escalate_alert",
            "_notify_alert",
            "_auto_resolve_alert",
            "setup_default_alert_rules"
        ],
        "classes": {
            "AlertLevel": {
                "methods": [],
                "docstring": "Alert severity levels.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AlertManager": {
                "methods": [
                    "__init__",
                    "create_alert",
                    "acknowledge_alert",
                    "resolve_alert",
                    "get_alerts",
                    "_check_alert_rules",
                    "_escalate_alert",
                    "_notify_alert",
                    "_auto_resolve_alert",
                    "setup_default_alert_rules"
                ],
                "docstring": "Manages alerts and alert rules.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\core\\managers\\monitoring\\base_monitoring_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "create_alert",
            "record_metric",
            "create_widget",
            "cleanup",
            "get_status",
            "_get_alerts",
            "_get_metrics",
            "_get_widgets",
            "_acknowledge_alert",
            "_resolve_alert"
        ],
        "classes": {
            "BaseMonitoringManager": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "create_alert",
                    "record_metric",
                    "create_widget",
                    "cleanup",
                    "get_status",
                    "_get_alerts",
                    "_get_metrics",
                    "_get_widgets",
                    "_acknowledge_alert",
                    "_resolve_alert"
                ],
                "docstring": "Base monitoring manager with common functionality.",
                "base_classes": [
                    "MonitoringManager"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 26
    },
    "src\\core\\ml_optimizer\\learning\\feature_analysis_engine.py": {
        "language": ".py",
        "functions": [
            "create_feature_analysis_engine",
            "__init__",
            "extract_features",
            "_extract_basic_features",
            "_extract_statistical_features",
            "calculate_similarity",
            "analyze_feature_importance",
            "get_analysis_summary",
            "cleanup"
        ],
        "classes": {
            "FeatureAnalysisEngine": {
                "methods": [
                    "__init__",
                    "extract_features",
                    "_extract_basic_features",
                    "_extract_statistical_features",
                    "calculate_similarity",
                    "analyze_feature_importance",
                    "get_analysis_summary",
                    "cleanup"
                ],
                "docstring": "KISS Simplified Feature Analysis Engine.\n\nRemoved overengineering - focuses on essential feature analysis only.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "src\\core\\ml_optimizer\\ml_optimizer_models.py": {
        "language": ".py",
        "functions": [
            "create_ml_model",
            "create_ml_prediction",
            "create_learning_pattern",
            "create_model_state",
            "create_optimization_metrics",
            "create_ml_configuration",
            "__post_init__",
            "__post_init__",
            "__post_init__",
            "success_rate",
            "__post_init__",
            "__post_init__",
            "__post_init__",
            "__post_init__",
            "__post_init__",
            "__post_init__"
        ],
        "classes": {
            "MLStrategy": {
                "methods": [],
                "docstring": "Simple ML optimization strategies.",
                "base_classes": [
                    "Enum"
                ]
            },
            "LearningPhase": {
                "methods": [],
                "docstring": "Simple learning phases.",
                "base_classes": [
                    "Enum"
                ]
            },
            "OptimizationStatus": {
                "methods": [],
                "docstring": "Simple optimization status.",
                "base_classes": [
                    "Enum"
                ]
            },
            "MLModel": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Simple ML model representation.",
                "base_classes": []
            },
            "LearningPattern": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Learning pattern data.",
                "base_classes": []
            },
            "OptimizationMetrics": {
                "methods": [
                    "__post_init__",
                    "success_rate"
                ],
                "docstring": "Simple optimization metrics.",
                "base_classes": []
            },
            "MLConfiguration": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Simple ML configuration.",
                "base_classes": []
            },
            "MLOptimizationConfig": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "ML optimization configuration.",
                "base_classes": []
            },
            "MLPrediction": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "ML prediction result.",
                "base_classes": []
            },
            "ModelState": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Model state data.",
                "base_classes": []
            },
            "MLOptimizationMetrics": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "ML optimization metrics.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 25
    },
    "src\\core\\ml_optimizer\\ml_optimizer_orchestrator.py": {
        "language": ".py",
        "functions": [
            "create_vector_database_ml_optimizer",
            "get_vector_database_ml_optimizer",
            "__init__",
            "initialize",
            "add_model",
            "get_model",
            "get_models_by_strategy",
            "predict",
            "add_learning_pattern",
            "get_learning_pattern",
            "get_learning_patterns_by_type",
            "get_optimizer_status",
            "shutdown"
        ],
        "classes": {
            "VectorDatabaseMLOptimizer": {
                "methods": [
                    "__init__",
                    "initialize",
                    "add_model",
                    "get_model",
                    "get_models_by_strategy",
                    "predict",
                    "add_learning_pattern",
                    "get_learning_pattern",
                    "get_learning_patterns_by_type",
                    "get_optimizer_status",
                    "shutdown"
                ],
                "docstring": "Main orchestrator for vector database ML optimization.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "src\\core\\ml_optimizer\\learning\\unified_ml_learning\\coordinator_services.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "analyze_learning_progress",
            "generate_learning_report",
            "optimize_learning_parameters",
            "monitor_learning_health",
            "get_services_status",
            "shutdown"
        ],
        "classes": {
            "MLLearningCoordinatorServices": {
                "methods": [
                    "__init__",
                    "initialize",
                    "analyze_learning_progress",
                    "generate_learning_report",
                    "optimize_learning_parameters",
                    "monitor_learning_health",
                    "get_services_status",
                    "shutdown"
                ],
                "docstring": "Service functionality for ML learning coordination operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\ml_optimizer\\learning\\ml_learning_engine_orchestrator.py": {
        "language": ".py",
        "functions": [
            "create_ml_learning_engine_orchestrator"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\core\\managers\\results\\base_results_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "execute",
            "process_results",
            "cleanup",
            "get_status",
            "_get_results",
            "_archive_results",
            "_register_result_processor"
        ],
        "classes": {
            "BaseResultsManager": {
                "methods": [
                    "__init__",
                    "initialize",
                    "execute",
                    "process_results",
                    "cleanup",
                    "get_status",
                    "_get_results",
                    "_archive_results",
                    "_register_result_processor"
                ],
                "docstring": "Base results manager with common functionality.",
                "base_classes": [
                    "Manager"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\core\\ml_optimizer\\learning\\unified_ml_learning\\engine_training.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "train_model",
            "optimize_model",
            "create_learning_session",
            "start_learning_session",
            "complete_learning_session"
        ],
        "classes": {
            "MLLearningEngineTraining": {
                "methods": [
                    "__init__",
                    "train_model",
                    "optimize_model",
                    "create_learning_session",
                    "start_learning_session",
                    "complete_learning_session"
                ],
                "docstring": "ML model training and optimization engine.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\core\\ml_optimizer\\learning\\unified_ml_learning\\engine_prediction.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "predict",
            "batch_predict",
            "get_prediction_history",
            "evaluate_prediction_accuracy",
            "_simulate_prediction"
        ],
        "classes": {
            "MLLearningEnginePrediction": {
                "methods": [
                    "__init__",
                    "predict",
                    "batch_predict",
                    "get_prediction_history",
                    "evaluate_prediction_accuracy",
                    "_simulate_prediction"
                ],
                "docstring": "ML prediction and inference engine.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\core\\managers\\results\\general_results_processor.py": {
        "language": ".py",
        "functions": [
            "_process_result_by_type",
            "_process_general_result",
            "_analyze_dict_data",
            "_analyze_list_data"
        ],
        "classes": {
            "GeneralResultsProcessor": {
                "methods": [
                    "_process_result_by_type",
                    "_process_general_result",
                    "_analyze_dict_data",
                    "_analyze_list_data"
                ],
                "docstring": "Processes general results for unknown types.",
                "base_classes": [
                    "BaseResultsManager"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\orchestration\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\ml_optimizer\\engines\\ml_optimization_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_optimization",
            "stop_optimization",
            "execute_optimization_strategy",
            "_execute_predictive_caching",
            "_execute_adaptive_tuning",
            "_execute_pattern_learning",
            "_execute_performance_optimization",
            "_optimization_loop",
            "get_optimization_metrics",
            "get_optimization_summary"
        ],
        "classes": {
            "MLOptimizationEngine": {
                "methods": [
                    "__init__",
                    "start_optimization",
                    "stop_optimization",
                    "execute_optimization_strategy",
                    "_execute_predictive_caching",
                    "_execute_adaptive_tuning",
                    "_execute_pattern_learning",
                    "_execute_performance_optimization",
                    "_optimization_loop",
                    "get_optimization_metrics",
                    "get_optimization_summary"
                ],
                "docstring": "Engine for ML optimization strategies and execution.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\core\\orchestration\\contracts.py": {
        "language": ".py",
        "functions": [
            "name",
            "run",
            "plan",
            "execute",
            "report"
        ],
        "classes": {
            "OrchestrationContext": {
                "methods": [],
                "docstring": "SSOT: shared context object injected everywhere (DIP).",
                "base_classes": []
            },
            "OrchestrationResult": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "Step": {
                "methods": [
                    "name",
                    "run"
                ],
                "docstring": "Unit of orchestration work.",
                "base_classes": [
                    "Protocol"
                ]
            },
            "Orchestrator": {
                "methods": [
                    "plan",
                    "execute",
                    "report"
                ],
                "docstring": "Stable contract (LSP).",
                "base_classes": [
                    "Protocol"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\ml_optimizer\\learning\\model_management_engine.py": {
        "language": ".py",
        "functions": [
            "get_model_management_engine",
            "__init__",
            "create_model_state",
            "get_model_state",
            "update_model_state",
            "save_model_state",
            "load_model_state",
            "delete_model_state",
            "list_model_states",
            "get_model_metrics",
            "start_training",
            "stop_training",
            "is_model_training",
            "get_training_status",
            "cleanup_old_models",
            "get_engine_status",
            "shutdown"
        ],
        "classes": {
            "ModelManagementEngine": {
                "methods": [
                    "__init__",
                    "create_model_state",
                    "get_model_state",
                    "update_model_state",
                    "save_model_state",
                    "load_model_state",
                    "delete_model_state",
                    "list_model_states",
                    "get_model_metrics",
                    "start_training",
                    "stop_training",
                    "is_model_training",
                    "get_training_status",
                    "cleanup_old_models",
                    "get_engine_status",
                    "shutdown"
                ],
                "docstring": "Simplified model management engine for ML optimization.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 33
    },
    "src\\core\\orchestration\\registry.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register",
            "build"
        ],
        "classes": {
            "StepRegistry": {
                "methods": [
                    "__init__",
                    "register",
                    "build"
                ],
                "docstring": "DIP registry: high-level depends on abstraction, not concretion.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\core\\ml_optimizer\\learning\\pattern_learning_engine.py": {
        "language": ".py",
        "functions": [
            "create_pattern_learning_engine",
            "__init__",
            "learn_pattern",
            "get_pattern",
            "get_patterns_by_type",
            "update_pattern_accuracy",
            "remove_pattern",
            "get_pattern_statistics",
            "find_similar_patterns",
            "_generate_pattern_id",
            "_calculate_feature_similarity",
            "clear_patterns",
            "export_patterns",
            "import_patterns"
        ],
        "classes": {
            "PatternLearningEngine": {
                "methods": [
                    "__init__",
                    "learn_pattern",
                    "get_pattern",
                    "get_patterns_by_type",
                    "update_pattern_accuracy",
                    "remove_pattern",
                    "get_pattern_statistics",
                    "find_similar_patterns",
                    "_generate_pattern_id",
                    "_calculate_feature_similarity",
                    "clear_patterns",
                    "export_patterns",
                    "import_patterns"
                ],
                "docstring": "Pattern learning engine for ML optimization.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 27
    },
    "src\\core\\orchestration\\integration_orchestrator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "plan",
            "execute",
            "report"
        ],
        "classes": {
            "IntegrationOrchestrator": {
                "methods": [
                    "__init__",
                    "plan",
                    "execute",
                    "report"
                ],
                "docstring": "Integration-scope: external APIs, adapters, retries (kept simple = KISS).",
                "base_classes": [
                    "Orchestrator"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\orchestration\\adapters\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\performance\\performance_cli.py": {
        "language": ".py",
        "functions": [
            "main",
            "handle_monitor_command",
            "handle_optimize_command",
            "handle_dashboard_command"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "src\\core\\pattern_analysis\\pattern_analysis_models.py": {
        "language": ".py",
        "functions": [
            "to_dict"
        ],
        "classes": {
            "PatternType": {
                "methods": [],
                "docstring": "Types of mission patterns.",
                "base_classes": [
                    "Enum"
                ]
            },
            "RecommendationType": {
                "methods": [],
                "docstring": "Types of strategic recommendations.",
                "base_classes": [
                    "Enum"
                ]
            },
            "ImpactLevel": {
                "methods": [],
                "docstring": "Impact levels for recommendations.",
                "base_classes": [
                    "Enum"
                ]
            },
            "MissionPattern": {
                "methods": [],
                "docstring": "Mission pattern structure for analysis.",
                "base_classes": []
            },
            "PatternCorrelation": {
                "methods": [],
                "docstring": "Pattern correlation structure.",
                "base_classes": []
            },
            "MissionContext": {
                "methods": [],
                "docstring": "Mission context for pattern analysis.",
                "base_classes": []
            },
            "StrategicRecommendation": {
                "methods": [],
                "docstring": "Strategic recommendation structure.",
                "base_classes": []
            },
            "PatternAnalysisResult": {
                "methods": [],
                "docstring": "Result of pattern analysis operation.",
                "base_classes": []
            },
            "PatternMetrics": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Metrics for pattern analysis performance.",
                "base_classes": []
            },
            "PatternAnalysisConfig": {
                "methods": [],
                "docstring": "Configuration for pattern analysis operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\core\\orchestration\\core_orchestrator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "plan",
            "execute",
            "report"
        ],
        "classes": {
            "CoreOrchestrator": {
                "methods": [
                    "__init__",
                    "plan",
                    "execute",
                    "report"
                ],
                "docstring": "Single SRP: execute a pipeline of Steps with events + metrics.",
                "base_classes": [
                    "Orchestrator"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\ml_optimizer\\ml_optimizer_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_initialize_strategies",
            "get_optimization_metrics",
            "add_strategy",
            "get_available_strategies",
            "get_system_status"
        ],
        "classes": {
            "MLOptimizerEngine": {
                "methods": [
                    "__init__",
                    "_initialize_strategies",
                    "get_optimization_metrics",
                    "add_strategy",
                    "get_available_strategies",
                    "get_system_status"
                ],
                "docstring": "Core engine for ML optimization operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\core\\ml_optimizer\\learning\\unified_ml_learning\\coordinator_core.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "start_learning_session",
            "stop_learning_session",
            "get_learning_session",
            "get_active_sessions",
            "add_learning_pattern",
            "get_learning_pattern",
            "get_learning_patterns_by_type",
            "add_model_state",
            "get_model_state",
            "get_model_states_by_session",
            "add_optimization_metrics",
            "get_optimization_metrics",
            "get_optimization_metrics_by_session",
            "get_core_status",
            "shutdown"
        ],
        "classes": {
            "MLLearningCoordinatorCore": {
                "methods": [
                    "__init__",
                    "initialize",
                    "start_learning_session",
                    "stop_learning_session",
                    "get_learning_session",
                    "get_active_sessions",
                    "add_learning_pattern",
                    "get_learning_pattern",
                    "get_learning_patterns_by_type",
                    "add_model_state",
                    "get_model_state",
                    "get_model_states_by_session",
                    "add_optimization_metrics",
                    "get_optimization_metrics",
                    "get_optimization_metrics_by_session",
                    "get_core_status",
                    "shutdown"
                ],
                "docstring": "Core ML learning coordination logic.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 34
    },
    "src\\core\\pattern_analysis\\unified_pattern_analysis\\analyzer.py": {
        "language": ".py",
        "functions": [
            "_create_pattern",
            "detect_performance_patterns",
            "detect_coordination_patterns",
            "detect_anomaly_patterns",
            "__init__",
            "initialize",
            "analyze_performance_patterns",
            "analyze_coordination_patterns",
            "generate_optimization_recommendations",
            "get_analysis_summary",
            "shutdown"
        ],
        "classes": {
            "PatternAnalysis": {
                "methods": [],
                "docstring": "Simple pattern analysis result used across modules.",
                "base_classes": []
            },
            "PatternAnalyzer": {
                "methods": [
                    "__init__",
                    "initialize",
                    "analyze_performance_patterns",
                    "analyze_coordination_patterns",
                    "generate_optimization_recommendations",
                    "get_analysis_summary",
                    "shutdown"
                ],
                "docstring": "Pattern analysis functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\core\\orchestration\\adapters\\legacy_adapter.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "plan",
            "execute",
            "report"
        ],
        "classes": {
            "LegacyOrchestratorAdapter": {
                "methods": [
                    "__init__",
                    "plan",
                    "execute",
                    "report"
                ],
                "docstring": "Wrap a legacy Orchestrator interface to the new CoreOrchestrator without breaking\ncallers.",
                "base_classes": [
                    "Orchestrator"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\performance\\coordination_performance_monitor.py": {
        "language": ".py",
        "functions": [
            "get_performance_monitor",
            "__init__",
            "_start_background_monitoring",
            "_record_system_health",
            "record_operation_start",
            "record_operation_completion",
            "get_performance_report",
            "get_system_health",
            "stop_monitoring",
            "monitor_loop"
        ],
        "classes": {
            "CoordinationPerformanceMonitor": {
                "methods": [
                    "__init__",
                    "_start_background_monitoring",
                    "_record_system_health",
                    "record_operation_start",
                    "record_operation_completion",
                    "get_performance_report",
                    "get_system_health",
                    "stop_monitoring"
                ],
                "docstring": "Main performance monitoring system for coordination and communication.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\core\\performance\\performance_collector.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "record_metric",
            "record_timer",
            "record_counter",
            "get_metrics",
            "get_latest_metric"
        ],
        "classes": {
            "PerformanceCollector": {
                "methods": [
                    "__init__",
                    "record_metric",
                    "record_timer",
                    "record_counter",
                    "get_metrics",
                    "get_latest_metric"
                ],
                "docstring": "Collects and stores performance metrics.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\core\\performance\\performance_decorators.py": {
        "language": ".py",
        "functions": [
            "monitor_performance",
            "decorator",
            "wrapper"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\core\\performance\\performance_dashboard.py": {
        "language": ".py",
        "functions": [
            "get_performance_dashboard"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\core\\processing\\unified_processing_system.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_register_default_processors",
            "process",
            "_process_data",
            "_process_file",
            "_process_message",
            "_process_event",
            "_process_task",
            "_process_validation",
            "_process_cleanup",
            "register_processor",
            "get_performance_metrics",
            "get_processing_history",
            "cleanup",
            "_process_data",
            "_transform_dict_data",
            "_transform_list_data",
            "_process_file",
            "_process_message"
        ],
        "classes": {
            "ProcessingType": {
                "methods": [],
                "docstring": "Enumeration of processing types for unified handling.",
                "base_classes": [
                    "Enum"
                ]
            },
            "ProcessingContext": {
                "methods": [],
                "docstring": "Context object for processing operations.",
                "base_classes": []
            },
            "UnifiedProcessingSystem": {
                "methods": [
                    "__init__",
                    "_register_default_processors",
                    "process",
                    "_process_data",
                    "_process_file",
                    "_process_message",
                    "_process_event",
                    "_process_task",
                    "_process_validation",
                    "_process_cleanup",
                    "register_processor",
                    "get_performance_metrics",
                    "get_processing_history",
                    "cleanup"
                ],
                "docstring": "Unified processing system that consolidates all processing patterns.\n\nThis eliminates duplicate processing logic found across:\n- src/core/base/executor.py (4 duplicate _process methods)\n- consolidation_core.py (processing logic patterns)\n- gaming integration handlers\n- test runner handlers",
                "base_classes": [
                    "ABC"
                ]
            },
            "DataProcessingSystem": {
                "methods": [
                    "_process_data",
                    "_transform_dict_data",
                    "_transform_list_data"
                ],
                "docstring": "Specialized data processing system.",
                "base_classes": [
                    "UnifiedProcessingSystem"
                ]
            },
            "FileProcessingSystem": {
                "methods": [
                    "_process_file"
                ],
                "docstring": "Specialized file processing system.",
                "base_classes": [
                    "UnifiedProcessingSystem"
                ]
            },
            "MessageProcessingSystem": {
                "methods": [
                    "_process_message"
                ],
                "docstring": "Specialized message processing system.",
                "base_classes": [
                    "UnifiedProcessingSystem"
                ]
            }
        },
        "routes": [],
        "complexity": 38
    },
    "src\\core\\refactoring\\analysis_tools.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\refactoring\\analysis_tools_core.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_file",
            "find_duplicates",
            "identify_patterns",
            "generate_suggestions",
            "_extract_classes",
            "_extract_functions",
            "_extract_imports",
            "_calculate_complexity"
        ],
        "classes": {
            "ArchitectureAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_file",
                    "find_duplicates",
                    "identify_patterns",
                    "generate_suggestions",
                    "_extract_classes",
                    "_extract_functions",
                    "_extract_imports",
                    "_calculate_complexity"
                ],
                "docstring": "Simplified architecture analyzer - KISS principle applied.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\core\\performance\\unified_dashboard\\engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_metric",
            "get_metric",
            "get_metrics_by_type",
            "update_metric",
            "remove_metric",
            "get_all_metrics",
            "add_widget",
            "get_widget",
            "get_all_widgets",
            "update_widget",
            "remove_widget",
            "add_config",
            "get_config",
            "get_all_configs",
            "update_config",
            "remove_config",
            "add_alert",
            "get_alert",
            "get_all_alerts",
            "remove_alert",
            "add_report",
            "get_report",
            "get_all_reports",
            "remove_report",
            "get_status",
            "get_summary",
            "clear_resources"
        ],
        "classes": {
            "DashboardEngine": {
                "methods": [
                    "__init__",
                    "add_metric",
                    "get_metric",
                    "get_metrics_by_type",
                    "update_metric",
                    "remove_metric",
                    "get_all_metrics",
                    "add_widget",
                    "get_widget",
                    "get_all_widgets",
                    "update_widget",
                    "remove_widget",
                    "add_config",
                    "get_config",
                    "get_all_configs",
                    "update_config",
                    "remove_config",
                    "add_alert",
                    "get_alert",
                    "get_all_alerts",
                    "remove_alert",
                    "add_report",
                    "get_report",
                    "get_all_reports",
                    "remove_report",
                    "get_status",
                    "get_summary",
                    "clear_resources"
                ],
                "docstring": "Simplified core dashboard engine - V2 compliant.",
                "base_classes": [
                    "BaseEngine"
                ]
            }
        },
        "routes": [],
        "complexity": 56
    },
    "src\\core\\performance\\unified_dashboard\\metric_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_metric",
            "get_metric",
            "get_metrics_by_type",
            "update_metric",
            "remove_metric",
            "get_all_metrics",
            "get_metrics_count",
            "clear_metrics",
            "get_metrics_summary"
        ],
        "classes": {
            "MetricManager": {
                "methods": [
                    "__init__",
                    "add_metric",
                    "get_metric",
                    "get_metrics_by_type",
                    "update_metric",
                    "remove_metric",
                    "get_all_metrics",
                    "get_metrics_count",
                    "clear_metrics",
                    "get_metrics_summary"
                ],
                "docstring": "Metric management functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\core\\refactoring\\duplicate_analysis.py": {
        "language": ".py",
        "functions": [
            "find_duplicate_files",
            "_normalize_content"
        ],
        "classes": {
            "DuplicateFile": {
                "methods": [],
                "docstring": "Represents duplicate file information.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\core\\processing\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\refactoring\\file_analysis.py": {
        "language": ".py",
        "functions": [
            "analyze_file_for_extraction",
            "_calculate_complexity"
        ],
        "classes": {
            "FileAnalysis": {
                "methods": [],
                "docstring": "Analysis results for a single file.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\core\\performance\\unified_dashboard\\reporter.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "generate_metrics_report",
            "generate_alerts_report",
            "generate_performance_report",
            "_calculate_system_health",
            "export_report",
            "get_report_history",
            "cleanup_old_reports",
            "get_reporter_stats",
            "shutdown"
        ],
        "classes": {
            "DashboardReporter": {
                "methods": [
                    "__init__",
                    "initialize",
                    "generate_metrics_report",
                    "generate_alerts_report",
                    "generate_performance_report",
                    "_calculate_system_health",
                    "export_report",
                    "get_report_history",
                    "cleanup_old_reports",
                    "get_reporter_stats",
                    "shutdown"
                ],
                "docstring": "Simplified dashboard reporting functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\core\\refactoring\\toolkit.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\refactoring\\metrics\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\refactoring\\metrics\\definitions.py": {
        "language": ".py",
        "functions": [
            "update_metrics",
            "__init__",
            "update_metrics",
            "get_metrics",
            "reset_metrics"
        ],
        "classes": {
            "RefactoringMetrics": {
                "methods": [],
                "docstring": "Refactoring performance metrics.",
                "base_classes": []
            },
            "MetricsManager": {
                "methods": [
                    "__init__",
                    "update_metrics",
                    "get_metrics",
                    "reset_metrics"
                ],
                "docstring": "Manages refactoring metrics collection and reporting.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 9
    },
    "src\\core\\refactoring\\config.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\refactoring\\analysis_tools_models.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "ArchitecturePattern": {
                "methods": [],
                "docstring": "Represents an identified architecture pattern - simplified.",
                "base_classes": []
            },
            "FileAnalysis": {
                "methods": [],
                "docstring": "Analysis results for a single file - simplified.",
                "base_classes": []
            },
            "DuplicateFile": {
                "methods": [],
                "docstring": "Represents duplicate file information - simplified.",
                "base_classes": []
            },
            "RefactoringSuggestion": {
                "methods": [],
                "docstring": "Represents a refactoring suggestion - simplified.",
                "base_classes": []
            },
            "AnalysisReport": {
                "methods": [],
                "docstring": "Complete analysis report - simplified.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\core\\refactoring\\tools\\optimization_tools.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_optimization_plan",
            "execute_optimization",
            "_identify_optimization_targets",
            "_generate_optimization_rules",
            "_identify_performance_improvements",
            "_identify_v2_compliance_improvements",
            "_apply_optimizations"
        ],
        "classes": {
            "OptimizationPlan": {
                "methods": [],
                "docstring": "Plan for optimizing code structure.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "OptimizationTools": {
                "methods": [
                    "__init__",
                    "create_optimization_plan",
                    "execute_optimization",
                    "_identify_optimization_targets",
                    "_generate_optimization_rules",
                    "_identify_performance_improvements",
                    "_identify_v2_compliance_improvements",
                    "_apply_optimizations"
                ],
                "docstring": "Optimization tools for refactoring.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\performance\\metrics\\config.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\ssot\\ssot_models.py": {
        "language": ".py",
        "functions": [
            "to_dict",
            "to_dict",
            "to_dict",
            "to_dict",
            "__init__",
            "record_component_registration",
            "record_task_creation",
            "record_task_completion",
            "record_report_generation",
            "to_dict"
        ],
        "classes": {
            "SSOTComponentType": {
                "methods": [],
                "docstring": "SSOT component types - consolidated from multiple files.",
                "base_classes": [
                    "Enum"
                ]
            },
            "SSOTExecutionPhase": {
                "methods": [],
                "docstring": "SSOT execution phases - consolidated from multiple files.",
                "base_classes": [
                    "Enum"
                ]
            },
            "SSOTValidationLevel": {
                "methods": [],
                "docstring": "SSOT validation levels - consolidated from multiple files.",
                "base_classes": [
                    "Enum"
                ]
            },
            "SSOTComponent": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "SSOT component representation.\n\nDRY COMPLIANCE: Single component model for all SSOT operations.",
                "base_classes": []
            },
            "SSOTIntegrationResult": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Result of SSOT integration operation.\n\nDRY COMPLIANCE: Single result model for all SSOT operations.",
                "base_classes": []
            },
            "SSOTExecutionTask": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "SSOT execution task.\n\nDRY COMPLIANCE: Single task model for all SSOT execution operations.",
                "base_classes": []
            },
            "SSOTValidationReport": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "SSOT validation report.\n\nDRY COMPLIANCE: Single validation report for all SSOT validation operations.",
                "base_classes": []
            },
            "SSOTMetrics": {
                "methods": [
                    "__init__",
                    "record_component_registration",
                    "record_task_creation",
                    "record_task_completion",
                    "record_report_generation",
                    "to_dict"
                ],
                "docstring": "Metrics tracking for SSOT operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\core\\refactoring\\tools\\extraction_tools.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_extraction_plan",
            "execute_extraction",
            "_determine_target_files",
            "_generate_extraction_rules",
            "_extract_models",
            "_extract_utils",
            "_extract_core"
        ],
        "classes": {
            "ExtractionPlan": {
                "methods": [],
                "docstring": "Plan for extracting code from a file.",
                "base_classes": []
            },
            "ExtractionTools": {
                "methods": [
                    "__init__",
                    "create_extraction_plan",
                    "execute_extraction",
                    "_determine_target_files",
                    "_generate_extraction_rules",
                    "_extract_models",
                    "_extract_utils",
                    "_extract_core"
                ],
                "docstring": "Extraction tools for refactoring.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\refactoring\\tools\\consolidation_tools.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_consolidation_plan",
            "execute_consolidation",
            "_find_duplicate_files",
            "analyze_duplicates",
            "consolidate_directory",
            "_generate_consolidated_content"
        ],
        "classes": {
            "ConsolidationPlan": {
                "methods": [],
                "docstring": "Plan for consolidating duplicate code.",
                "base_classes": []
            },
            "ConsolidationTools": {
                "methods": [
                    "__init__",
                    "create_consolidation_plan",
                    "execute_consolidation",
                    "_find_duplicate_files",
                    "analyze_duplicates",
                    "consolidate_directory",
                    "_generate_consolidated_content"
                ],
                "docstring": "Consolidation tools for refactoring.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\core\\ssot\\unified_ssot\\execution\\execution_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_execution_result",
            "get_execution_history",
            "get_performance_metrics",
            "get_execution_summary",
            "clear_history",
            "get_recent_executions"
        ],
        "classes": {
            "ExecutionManager": {
                "methods": [
                    "__init__",
                    "add_execution_result",
                    "get_execution_history",
                    "get_performance_metrics",
                    "get_execution_summary",
                    "clear_history",
                    "get_recent_executions"
                ],
                "docstring": "SSOT execution management functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\core\\models\\message_queue_models.py": {
        "language": ".py",
        "functions": [
            "__lt__",
            "to_dict",
            "from_dict"
        ],
        "classes": {
            "QueueStatus": {
                "methods": [],
                "docstring": "Queue entry status values.",
                "base_classes": [
                    "Enum"
                ]
            },
            "QueueEntry": {
                "methods": [
                    "__lt__",
                    "to_dict",
                    "from_dict"
                ],
                "docstring": "Message queue entry with metadata.",
                "base_classes": []
            },
            "QueueConfig": {
                "methods": [],
                "docstring": "Configuration for message queue operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\core\\ssot\\unified_ssot\\validators\\standard_validator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "validate_standard_fields",
            "validate_component_relationships",
            "_validate_configuration",
            "_has_circular_reference",
            "get_validation_score"
        ],
        "classes": {
            "StandardValidator": {
                "methods": [
                    "__init__",
                    "validate_standard_fields",
                    "validate_component_relationships",
                    "_validate_configuration",
                    "_has_circular_reference",
                    "get_validation_score"
                ],
                "docstring": "Handles standard SSOT component validation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\core\\utils\\agent_matching.py": {
        "language": ".py",
        "functions": [
            "calculate_agent_match_score",
            "get_agent_type_match_score",
            "rank_agents_by_capability",
            "get_best_agent_for_task"
        ],
        "classes": {
            "AgentCapability": {
                "methods": [],
                "docstring": "Standard agent capability structure.",
                "base_classes": []
            },
            "AgentMatchingUtils": {
                "methods": [
                    "calculate_agent_match_score",
                    "get_agent_type_match_score",
                    "rank_agents_by_capability",
                    "get_best_agent_for_task"
                ],
                "docstring": "Agent matching utilities for capability-based selection.\n\nProvides functionality for:\n- Agent capability scoring\n- Task-agent matching\n- Performance-based selection",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\utils\\coordination_utils.py": {
        "language": ".py",
        "functions": [
            "get_coordination_summary",
            "validate_coordination_data"
        ],
        "classes": {
            "CoordinationUtils": {
                "methods": [
                    "get_coordination_summary",
                    "validate_coordination_data"
                ],
                "docstring": "Main coordination utilities class that aggregates focused utility modules.\n\nThis class serves as a unified interface to all coordination utilities, providing\nbackward compatibility while maintaining modular architecture.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\core\\ssot\\unified_ssot\\execution\\task_executor.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "TaskExecutor": {
                "methods": [
                    "__init__"
                ],
                "docstring": "SSOT task execution functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\core\\utility_system\\managers\\file_manager.py": {
        "language": ".py",
        "functions": [
            "create_file_manager",
            "get_file_manager",
            "__init__",
            "read_file",
            "write_file",
            "copy_file",
            "move_file",
            "delete_file",
            "file_exists",
            "list_directory",
            "create_directory",
            "get_file_size",
            "_record_operation",
            "get_status",
            "cleanup"
        ],
        "classes": {
            "FileManager": {
                "methods": [
                    "__init__",
                    "read_file",
                    "write_file",
                    "copy_file",
                    "move_file",
                    "delete_file",
                    "file_exists",
                    "list_directory",
                    "create_directory",
                    "get_file_size",
                    "_record_operation",
                    "get_status",
                    "cleanup"
                ],
                "docstring": "KISS Simplified File Manager.\n\nRestored after deletion - focuses on essential file operations only.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "src\\core\\ssot\\unified_ssot\\validators\\basic_validator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "validate_basic_fields",
            "validate_component_metadata",
            "get_validation_score"
        ],
        "classes": {
            "BasicValidator": {
                "methods": [
                    "__init__",
                    "validate_basic_fields",
                    "validate_component_metadata",
                    "get_validation_score"
                ],
                "docstring": "Handles basic SSOT component validation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\utils\\message_queue_utils.py": {
        "language": ".py",
        "functions": [
            "calculate_priority_score",
            "calculate_retry_delay",
            "is_entry_ready_for_retry",
            "is_entry_expired",
            "build_priority_heap",
            "get_next_entries_for_processing",
            "update_entry_for_retry",
            "mark_entry_delivered",
            "mark_entry_failed",
            "mark_entry_processing",
            "calculate_queue_statistics",
            "cleanup_expired_entries",
            "validate_queue_config"
        ],
        "classes": {
            "MessageQueueUtils": {
                "methods": [
                    "calculate_priority_score",
                    "calculate_retry_delay",
                    "is_entry_ready_for_retry",
                    "is_entry_expired",
                    "build_priority_heap",
                    "get_next_entries_for_processing",
                    "update_entry_for_retry",
                    "mark_entry_delivered",
                    "mark_entry_failed",
                    "mark_entry_processing",
                    "calculate_queue_statistics",
                    "cleanup_expired_entries",
                    "validate_queue_config"
                ],
                "docstring": "Utility functions for message queue operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "src\\core\\performance\\metrics\\types.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\ssot\\unified_ssot\\validators\\strict_validator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "validate_strict_requirements",
            "validate_component_integrity",
            "_validate_performance_metrics",
            "_validate_security_requirements",
            "_validate_execution_phases",
            "_validate_resource_requirements",
            "get_validation_score"
        ],
        "classes": {
            "StrictValidator": {
                "methods": [
                    "__init__",
                    "validate_strict_requirements",
                    "validate_component_integrity",
                    "_validate_performance_metrics",
                    "_validate_security_requirements",
                    "_validate_execution_phases",
                    "_validate_resource_requirements",
                    "get_validation_score"
                ],
                "docstring": "Handles strict SSOT component validation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\performance\\performance_monitoring_system.py": {
        "language": ".py",
        "functions": [
            "create_performance_monitoring_system",
            "get_performance_monitor",
            "to_dict",
            "to_dict",
            "__init__",
            "start_monitoring",
            "stop_monitoring",
            "collect_metrics",
            "generate_report",
            "get_system_status",
            "get_metrics_summary",
            "cleanup"
        ],
        "classes": {
            "PerformanceMetric": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Simple performance metric.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "PerformanceReport": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Simple performance report.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "PerformanceMonitoringSystem": {
                "methods": [
                    "__init__",
                    "start_monitoring",
                    "stop_monitoring",
                    "collect_metrics",
                    "generate_report",
                    "get_system_status",
                    "get_metrics_summary",
                    "cleanup"
                ],
                "docstring": "KISS Simplified Performance Monitoring System with memory leak prevention.\n\nRemoved overengineering - focuses on essential monitoring only.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\core\\refactoring\\pattern_detection.py": {
        "language": ".py",
        "functions": [
            "analyze_architecture_patterns",
            "_detect_mvc_patterns",
            "_detect_repository_patterns",
            "_detect_factory_patterns",
            "_detect_observer_patterns",
            "_detect_singleton_patterns"
        ],
        "classes": {
            "ArchitecturePattern": {
                "methods": [],
                "docstring": "Represents an identified architecture pattern.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\core\\performance\\unified_dashboard\\widget_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_widget",
            "get_widget",
            "get_all_widgets",
            "update_widget",
            "remove_widget",
            "add_config",
            "get_config",
            "get_all_configs",
            "update_config",
            "remove_config",
            "get_widgets_count",
            "get_configs_count",
            "clear_all",
            "get_summary"
        ],
        "classes": {
            "WidgetManager": {
                "methods": [
                    "__init__",
                    "add_widget",
                    "get_widget",
                    "get_all_widgets",
                    "update_widget",
                    "remove_widget",
                    "add_config",
                    "get_config",
                    "get_all_configs",
                    "update_config",
                    "remove_config",
                    "get_widgets_count",
                    "get_configs_count",
                    "clear_all",
                    "get_summary"
                ],
                "docstring": "Widget management functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 30
    },
    "src\\core\\orchestration\\service_orchestrator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "plan",
            "execute",
            "report"
        ],
        "classes": {
            "ServiceOrchestrator": {
                "methods": [
                    "__init__",
                    "plan",
                    "execute",
                    "report"
                ],
                "docstring": "Service-scope orchestration: IO, messaging, analytics service flows.",
                "base_classes": [
                    "Orchestrator"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\pattern_analysis\\pattern_analysis_orchestrator.py": {
        "language": ".py",
        "functions": [
            "get_pattern_analysis_system",
            "analyze_mission_patterns",
            "add_mission_pattern",
            "get_pattern_analysis_metrics",
            "__init__",
            "analyze_mission_patterns",
            "add_pattern",
            "get_pattern",
            "get_metrics",
            "clear_old_patterns",
            "analyze_success_patterns",
            "analyze_risk_patterns",
            "get_pattern_summary",
            "generate_strategic_insights"
        ],
        "classes": {
            "PatternAnalysisSystem": {
                "methods": [
                    "__init__",
                    "analyze_mission_patterns",
                    "add_pattern",
                    "get_pattern",
                    "get_metrics",
                    "clear_old_patterns",
                    "analyze_success_patterns",
                    "analyze_risk_patterns",
                    "get_pattern_summary",
                    "generate_strategic_insights"
                ],
                "docstring": "Main orchestrator for pattern analysis operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "src\\core\\validation\\unified_validation_system.py": {
        "language": ".py",
        "functions": [
            "get_unified_validator"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\core\\utils\\simple_utils.py": {
        "language": ".py",
        "functions": [
            "read_file",
            "write_file",
            "list_files",
            "get_timestamp",
            "format_string",
            "is_valid_path",
            "create_directory",
            "delete_file",
            "get_file_size",
            "copy_file"
        ],
        "classes": {},
        "routes": [],
        "complexity": 10
    },
    "src\\core\\validation\\unified_validation_orchestrator.py": {
        "language": ".py",
        "functions": [
            "get_unified_validator",
            "__init__",
            "validate_hasattr",
            "validate_type",
            "validate_not_none",
            "validate_not_empty",
            "validate_range",
            "validate_regex",
            "validate_custom"
        ],
        "classes": {
            "UnifiedValidationOrchestrator": {
                "methods": [
                    "__init__",
                    "validate_hasattr",
                    "validate_type",
                    "validate_not_none",
                    "validate_not_empty",
                    "validate_range",
                    "validate_regex",
                    "validate_custom"
                ],
                "docstring": "Unified validation orchestrator.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "src\\core\\validation\\performance_benchmark\\benchmark_runner_operations.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run_parallel_benchmarks",
            "run_benchmark",
            "run_stress_test",
            "compare_benchmarks",
            "export_results",
            "get_performance_trends",
            "run_single_benchmark"
        ],
        "classes": {
            "BenchmarkRunnerOperations": {
                "methods": [
                    "__init__",
                    "run_parallel_benchmarks",
                    "run_benchmark",
                    "run_stress_test",
                    "compare_benchmarks",
                    "export_results",
                    "get_performance_trends"
                ],
                "docstring": "Extended operations for benchmark execution.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\engine_core_recommendations.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_recommendation",
            "get_recommendation",
            "get_recommendations"
        ],
        "classes": {
            "StrategicOversightEngineCoreRecommendations": {
                "methods": [
                    "__init__",
                    "add_recommendation",
                    "get_recommendation",
                    "get_recommendations"
                ],
                "docstring": "Recommendation management for strategic oversight engine.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\ssot\\unified_ssot\\enums.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "SSOTExecutionPhase": {
                "methods": [],
                "docstring": "SSOT execution phases.",
                "base_classes": [
                    "Enum"
                ]
            },
            "SSOTValidationLevel": {
                "methods": [],
                "docstring": "SSOT validation levels.",
                "base_classes": [
                    "Enum"
                ]
            },
            "SSOTComponentType": {
                "methods": [],
                "docstring": "SSOT component types.",
                "base_classes": [
                    "Enum"
                ]
            },
            "SSOTStatus": {
                "methods": [],
                "docstring": "SSOT status states.",
                "base_classes": [
                    "Enum"
                ]
            },
            "SSOTPriority": {
                "methods": [],
                "docstring": "SSOT priority levels.",
                "base_classes": [
                    "Enum"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\engine_core_metrics.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_agent_metrics",
            "get_agent_metrics",
            "get_all_agent_metrics",
            "add_coordination_status",
            "get_coordination_status",
            "get_latest_coordination_status"
        ],
        "classes": {
            "StrategicOversightEngineCoreMetrics": {
                "methods": [
                    "__init__",
                    "add_agent_metrics",
                    "get_agent_metrics",
                    "get_all_agent_metrics",
                    "add_coordination_status",
                    "get_coordination_status",
                    "get_latest_coordination_status"
                ],
                "docstring": "Metrics management for strategic oversight engine.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\engine_core_missions.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_mission",
            "get_mission",
            "get_missions"
        ],
        "classes": {
            "StrategicOversightEngineCoreMissions": {
                "methods": [
                    "__init__",
                    "add_mission",
                    "get_mission",
                    "get_missions"
                ],
                "docstring": "Mission management for strategic oversight engine.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\extended_models.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "__post_init__",
            "__post_init__",
            "__post_init__",
            "__post_init__",
            "__post_init__",
            "__post_init__",
            "__post_init__"
        ],
        "classes": {
            "AgentCapabilities": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Agent capabilities data.",
                "base_classes": []
            },
            "PatternAnalysis": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Pattern analysis data.",
                "base_classes": []
            },
            "SuccessPrediction": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Success prediction data.",
                "base_classes": []
            },
            "RiskAssessment": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Risk assessment data.",
                "base_classes": []
            },
            "InterventionHistory": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Intervention history data.",
                "base_classes": []
            },
            "EmergencyAlert": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Emergency alert data.",
                "base_classes": []
            },
            "PerformanceTrend": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Performance trend data.",
                "base_classes": []
            },
            "CoordinationPattern": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Coordination pattern data.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\engine_core_reports.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_report",
            "get_report",
            "get_reports"
        ],
        "classes": {
            "StrategicOversightEngineCoreReports": {
                "methods": [
                    "__init__",
                    "add_report",
                    "get_report",
                    "get_reports"
                ],
                "docstring": "Report management for strategic oversight engine.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\validation\\performance_benchmark\\benchmark_runner_core.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_suite",
            "run_benchmark",
            "run_suite",
            "run_all_suites",
            "get_metrics_summary",
            "generate_report",
            "clear_metrics",
            "get_benchmark_history"
        ],
        "classes": {
            "BenchmarkRunnerCore": {
                "methods": [
                    "__init__",
                    "add_suite",
                    "run_benchmark",
                    "run_suite",
                    "run_all_suites",
                    "get_metrics_summary",
                    "generate_report",
                    "clear_metrics",
                    "get_benchmark_history"
                ],
                "docstring": "Core benchmark execution engine.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\factory_extended.py": {
        "language": ".py",
        "functions": [
            "create_vector_database_metrics",
            "create_system_health_metrics",
            "create_comprehensive_report",
            "create_emergency_insight",
            "create_high_priority_recommendation",
            "create_mission_batch"
        ],
        "classes": {
            "StrategicOversightFactoryExtended": {
                "methods": [
                    "create_vector_database_metrics",
                    "create_system_health_metrics",
                    "create_comprehensive_report",
                    "create_emergency_insight",
                    "create_high_priority_recommendation",
                    "create_mission_batch"
                ],
                "docstring": "Extended factory methods for strategic oversight models.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\core\\vector_strategic_oversight\\simple_oversight.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_report",
            "get_reports",
            "analyze_performance",
            "generate_insights"
        ],
        "classes": {
            "SimpleStrategicOversight": {
                "methods": [
                    "__init__",
                    "create_report",
                    "get_reports",
                    "analyze_performance",
                    "generate_insights"
                ],
                "docstring": "Simple strategic oversight utilities.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\analyzer_core.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "analyze_swarm_coordination",
            "analyze_agent_performance",
            "generate_strategic_recommendations",
            "analyze_system_health",
            "get_analysis_summary"
        ],
        "classes": {
            "StrategicOversightAnalyzer": {
                "methods": [
                    "__init__",
                    "initialize",
                    "analyze_swarm_coordination",
                    "analyze_agent_performance",
                    "generate_strategic_recommendations",
                    "analyze_system_health",
                    "get_analysis_summary"
                ],
                "docstring": "Strategic oversight analysis functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\factory_methods.py": {
        "language": ".py",
        "functions": [
            "get_strategic_oversight_factory",
            "create_oversight_report",
            "create_swarm_insight",
            "create_strategic_recommendation",
            "create_agent_performance_metrics",
            "create_swarm_coordination_status",
            "create_strategic_mission",
            "create_vector_database_metrics",
            "create_system_health_metrics",
            "__init__",
            "create_oversight_report",
            "create_swarm_insight",
            "create_strategic_recommendation",
            "create_agent_performance_metrics",
            "create_swarm_coordination_status",
            "create_vector_database_metrics",
            "create_system_health_metrics",
            "create_strategic_mission",
            "create_quick_mission",
            "create_emergency_mission"
        ],
        "classes": {
            "StrategicOversightFactory": {
                "methods": [
                    "__init__",
                    "create_oversight_report",
                    "create_swarm_insight",
                    "create_strategic_recommendation",
                    "create_agent_performance_metrics",
                    "create_swarm_coordination_status",
                    "create_vector_database_metrics",
                    "create_system_health_metrics",
                    "create_strategic_mission",
                    "create_quick_mission",
                    "create_emergency_mission"
                ],
                "docstring": "Factory class for creating strategic oversight data models - V2 compliant.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 31
    },
    "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\analyzers\\pattern_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "cache_pattern",
            "get_cached_pattern",
            "clear_pattern_cache",
            "get_analysis_metrics",
            "update_analysis_metrics"
        ],
        "classes": {
            "PatternAnalyzer": {
                "methods": [
                    "__init__",
                    "cache_pattern",
                    "get_cached_pattern",
                    "clear_pattern_cache",
                    "get_analysis_metrics",
                    "update_analysis_metrics"
                ],
                "docstring": "Analyzes patterns in data for strategic insights.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\core\\workflow\\definitions\\initialization.py": {
        "language": ".py",
        "functions": [
            "get_workflows"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\factories\\metrics_factory.py": {
        "language": ".py",
        "functions": [
            "create_agent_performance_metrics",
            "create_swarm_coordination_status",
            "create_vector_database_metrics",
            "create_system_health_metrics"
        ],
        "classes": {
            "MetricsFactory": {
                "methods": [
                    "create_agent_performance_metrics",
                    "create_swarm_coordination_status",
                    "create_vector_database_metrics",
                    "create_system_health_metrics"
                ],
                "docstring": "Factory class for creating strategic oversight metrics.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\unified_entry_point_system\\__init__.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\application\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\workflow\\definitions\\dispatcher.py": {
        "language": ".py",
        "functions": [
            "load_workflow_definitions"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\application\\use_cases\\complete_task_uc.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute"
        ],
        "classes": {
            "CompleteTaskRequest": {
                "methods": [],
                "docstring": "Request DTO for task completion.",
                "base_classes": []
            },
            "CompleteTaskResponse": {
                "methods": [],
                "docstring": "Response DTO for task completion.",
                "base_classes": []
            },
            "CompleteTaskUseCase": {
                "methods": [
                    "__init__",
                    "execute"
                ],
                "docstring": "Use case for completing tasks.\n\nThis use case handles the business logic of marking tasks as complete\nand updating the relevant entities.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\engine_core_base.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "get_engine_stats",
            "cleanup_old_data",
            "shutdown"
        ],
        "classes": {
            "StrategicOversightEngineCoreBase": {
                "methods": [
                    "__init__",
                    "initialize",
                    "get_engine_stats",
                    "cleanup_old_data",
                    "shutdown"
                ],
                "docstring": "Base strategic oversight engine functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\analyzers\\prediction_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_calculate_base_probability",
            "_calculate_historical_success_rate",
            "_identify_key_factors",
            "_identify_risk_factors",
            "_generate_recommendations",
            "add_historical_data",
            "get_prediction_summary",
            "_calculate_average_confidence"
        ],
        "classes": {
            "SuccessPrediction": {
                "methods": [],
                "docstring": "Success prediction result.",
                "base_classes": []
            },
            "PredictionAnalyzer": {
                "methods": [
                    "__init__",
                    "_calculate_base_probability",
                    "_calculate_historical_success_rate",
                    "_identify_key_factors",
                    "_identify_risk_factors",
                    "_generate_recommendations",
                    "add_historical_data",
                    "get_prediction_summary",
                    "_calculate_average_confidence"
                ],
                "docstring": "Analyzes and predicts task success probabilities using SSOT utilities.",
                "base_classes": [
                    "BasePredictionAnalyzer"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\analyzer_orchestrator.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\factory_core.py": {
        "language": ".py",
        "functions": [
            "create_strategic_oversight_report",
            "create_swarm_coordination_insight",
            "create_strategic_recommendation",
            "create_agent_performance_metrics",
            "create_swarm_coordination_status",
            "create_strategic_mission"
        ],
        "classes": {
            "StrategicOversightFactoryCore": {
                "methods": [
                    "create_strategic_oversight_report",
                    "create_swarm_coordination_insight",
                    "create_strategic_recommendation",
                    "create_agent_performance_metrics",
                    "create_swarm_coordination_status",
                    "create_strategic_mission"
                ],
                "docstring": "Core factory methods for strategic oversight models.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\agents\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\validation\\coordination_validator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_validation_rules",
            "validate_message_structure",
            "validate_coordination_system",
            "validate_performance_metrics",
            "validate_security_compliance",
            "run_comprehensive_validation",
            "_calculate_compliance_score",
            "get_validation_report"
        ],
        "classes": {
            "ValidationSeverity": {
                "methods": [],
                "docstring": "Validation severity levels.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ValidationResult": {
                "methods": [],
                "docstring": "Validation result types.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ValidationIssue": {
                "methods": [],
                "docstring": "Individual validation issue.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CoordinationValidator": {
                "methods": [
                    "__init__",
                    "_load_validation_rules",
                    "validate_message_structure",
                    "validate_coordination_system",
                    "validate_performance_metrics",
                    "validate_security_compliance",
                    "run_comprehensive_validation",
                    "_calculate_compliance_score",
                    "get_validation_report"
                ],
                "docstring": "Comprehensive validation engine for coordination systems.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\architecture\\design_patterns.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_initialize_patterns",
            "get_pattern",
            "list_patterns",
            "get_pattern_by_type",
            "apply_pattern",
            "get_pattern_recommendations"
        ],
        "classes": {
            "PatternType": {
                "methods": [],
                "docstring": "Design pattern type enumeration.",
                "base_classes": [
                    "Enum"
                ]
            },
            "DesignPattern": {
                "methods": [],
                "docstring": "Design pattern data structure.",
                "base_classes": []
            },
            "UnifiedDesignPatterns": {
                "methods": [
                    "__init__",
                    "_initialize_patterns",
                    "get_pattern",
                    "list_patterns",
                    "get_pattern_by_type",
                    "apply_pattern",
                    "get_pattern_recommendations"
                ],
                "docstring": "Unified Design Patterns - Essential patterns only.\n\nConsolidates all design patterns into a single, simple module\nfollowing KISS principles.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\analyzers\\swarm_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "SwarmCoordinationAnalyzer": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Analyzes swarm coordination patterns and agent collaboration.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\application\\use_cases\\assign_task_uc.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute"
        ],
        "classes": {
            "AssignTaskRequest": {
                "methods": [],
                "docstring": "Request DTO for task assignment.",
                "base_classes": []
            },
            "AssignTaskResponse": {
                "methods": [],
                "docstring": "Response DTO for task assignment.",
                "base_classes": []
            },
            "AssignTaskUseCase": {
                "methods": [
                    "__init__",
                    "execute"
                ],
                "docstring": "Use case for assigning tasks to agents.\n\nThis use case orchestrates the domain objects to fulfill\nthe business requirement of task assignment.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\discord\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\automation\\ui_onboarding.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "perform",
            "_validate_coordinates",
            "_validate_message_format"
        ],
        "classes": {
            "UIUnavailableError": {
                "methods": [],
                "docstring": "Raised when UI automation is not available.",
                "base_classes": [
                    "Exception"
                ]
            },
            "UIOnboarder": {
                "methods": [
                    "__init__",
                    "perform",
                    "_validate_coordinates",
                    "_validate_message_format"
                ],
                "docstring": "Handles UI-based onboarding automation using PyAutoGUI.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\config\\ssot.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\discord_commander\\agent_communication_engine_core.py": {
        "language": ".py",
        "functions": [
            "_create_inbox_message_content",
            "is_valid_agent",
            "get_all_agent_names"
        ],
        "classes": {
            "AgentCommunicationEngineCore": {
                "methods": [
                    "_create_inbox_message_content",
                    "is_valid_agent",
                    "get_all_agent_names"
                ],
                "docstring": "Core agent communication operations for Discord commander",
                "base_classes": [
                    "AgentCommunicationEngineBase"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\domain\\entities\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\discord_commander\\agent_communication_engine_base.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_unified_utility"
        ],
        "classes": {
            "AgentCommunicationEngineBase": {
                "methods": [
                    "__init__",
                    "_get_unified_utility"
                ],
                "docstring": "Provides shared utilities for communication engine variants.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\domain\\entities\\task.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "is_assigned",
            "is_completed",
            "is_pending",
            "assign_to",
            "unassign",
            "complete",
            "can_be_assigned_to"
        ],
        "classes": {
            "Task": {
                "methods": [
                    "__post_init__",
                    "is_assigned",
                    "is_completed",
                    "is_pending",
                    "assign_to",
                    "unassign",
                    "complete",
                    "can_be_assigned_to"
                ],
                "docstring": "Task entity representing work to be done by agents.\n\nBusiness Rules:\n- Tasks must have a unique identifier\n- Tasks can only be assigned to one agent at a time\n- Completed tasks cannot be reassigned\n- Tasks track their lifecycle (created, assigned, completed)",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\discord\\integration\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\factories\\mission_factory.py": {
        "language": ".py",
        "functions": [
            "create_strategic_mission",
            "create_quick_mission",
            "create_emergency_mission"
        ],
        "classes": {
            "MissionFactory": {
                "methods": [
                    "create_strategic_mission",
                    "create_quick_mission",
                    "create_emergency_mission"
                ],
                "docstring": "Factory class for creating strategic missions.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\discord_commander\\agent_communication_engine_operations.py": {
        "language": ".py",
        "functions": [
            "get_agent_status_file_path"
        ],
        "classes": {
            "AgentCommunicationEngineOperations": {
                "methods": [
                    "get_agent_status_file_path"
                ],
                "docstring": "Extended agent communication operations for Discord commander",
                "base_classes": [
                    "AgentCommunicationEngineBase"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\engine_core_insights.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_insight",
            "get_insight",
            "get_insights"
        ],
        "classes": {
            "StrategicOversightEngineCoreInsights": {
                "methods": [
                    "__init__",
                    "add_insight",
                    "get_insight",
                    "get_insights"
                ],
                "docstring": "Insight management for strategic oversight engine.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\domain\\ports\\agent_repository.py": {
        "language": ".py",
        "functions": [
            "get",
            "get_by_capability",
            "get_active",
            "get_available",
            "add",
            "save",
            "delete",
            "list_all"
        ],
        "classes": {
            "AgentRepository": {
                "methods": [
                    "get",
                    "get_by_capability",
                    "get_active",
                    "get_available",
                    "add",
                    "save",
                    "delete",
                    "list_all"
                ],
                "docstring": "Port for agent persistence operations.\n\nThis protocol defines the interface that any agent repository\nimplementation must provide.",
                "base_classes": [
                    "Protocol"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\domain\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\architecture\\system_integration.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "register_endpoint",
            "check_endpoint_health",
            "get_integration_status",
            "integrate_systems"
        ],
        "classes": {
            "IntegrationType": {
                "methods": [],
                "docstring": "Integration type enumeration.",
                "base_classes": [
                    "Enum"
                ]
            },
            "IntegrationStatus": {
                "methods": [],
                "docstring": "Integration status enumeration.",
                "base_classes": [
                    "Enum"
                ]
            },
            "IntegrationEndpoint": {
                "methods": [],
                "docstring": "Integration endpoint data structure.",
                "base_classes": []
            },
            "UnifiedSystemIntegration": {
                "methods": [
                    "__init__",
                    "register_endpoint",
                    "check_endpoint_health",
                    "get_integration_status",
                    "integrate_systems"
                ],
                "docstring": "Unified System Integration - Simple integration management.\n\nConsolidates all integration patterns into a single, simple,\nand maintainable design following KISS principles.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 11
    },
    "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\factories\\report_factory.py": {
        "language": ".py",
        "functions": [
            "create_oversight_report",
            "create_swarm_insight",
            "create_strategic_recommendation"
        ],
        "classes": {
            "ReportFactory": {
                "methods": [
                    "create_oversight_report",
                    "create_swarm_insight",
                    "create_strategic_recommendation"
                ],
                "docstring": "Factory class for creating strategic oversight reports.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\domain\\ports\\clock.py": {
        "language": ".py",
        "functions": [
            "now",
            "utcnow",
            "from_timestamp",
            "to_timestamp"
        ],
        "classes": {
            "Clock": {
                "methods": [
                    "now",
                    "utcnow",
                    "from_timestamp",
                    "to_timestamp"
                ],
                "docstring": "Port for time operations.\n\nThis protocol allows the domain to work with time in a testable way.\nImplementations can provide real time or controlled/fixed time for testing.",
                "base_classes": [
                    "Protocol"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\domain\\domain_events.py": {
        "language": ".py",
        "functions": [
            "event_type",
            "to_dict",
            "to_dict",
            "to_dict",
            "to_dict",
            "to_dict",
            "to_dict"
        ],
        "classes": {
            "DomainEvent": {
                "methods": [
                    "event_type",
                    "to_dict"
                ],
                "docstring": "Base class for all domain events.\n\nDomain events are immutable and contain all necessary information\nabout what happened in the domain.",
                "base_classes": []
            },
            "TaskCreated": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Event raised when a new task is created.",
                "base_classes": [
                    "DomainEvent"
                ]
            },
            "TaskAssigned": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Event raised when a task is assigned to an agent.",
                "base_classes": [
                    "DomainEvent"
                ]
            },
            "TaskCompleted": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Event raised when a task is completed.",
                "base_classes": [
                    "DomainEvent"
                ]
            },
            "AgentActivated": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Event raised when an agent becomes active.",
                "base_classes": [
                    "DomainEvent"
                ]
            },
            "AgentDeactivated": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Event raised when an agent becomes inactive.",
                "base_classes": [
                    "DomainEvent"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\discord_commander\\agent_communication_engine_refactored.py": {
        "language": ".py",
        "functions": [
            "create_agent_communication_engine",
            "__init__"
        ],
        "classes": {
            "AgentCommunicationEngine": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Unified agent communication engine with core and operations functionality.",
                "base_classes": [
                    "AgentCommunicationEngineCore",
                    "AgentCommunicationEngineOperations"
                ]
            }
        },
        "routes": [],
        "complexity": 3
    },
    "src\\domain\\entities\\agent.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "current_task_count",
            "can_accept_more_tasks",
            "workload_percentage",
            "has_capability",
            "add_capability",
            "remove_capability",
            "assign_task",
            "complete_task",
            "deactivate",
            "reactivate",
            "update_activity"
        ],
        "classes": {
            "Agent": {
                "methods": [
                    "__post_init__",
                    "current_task_count",
                    "can_accept_more_tasks",
                    "workload_percentage",
                    "has_capability",
                    "add_capability",
                    "remove_capability",
                    "assign_task",
                    "complete_task",
                    "deactivate",
                    "reactivate",
                    "update_activity"
                ],
                "docstring": "Agent entity representing an autonomous agent in the system.\n\nBusiness Rules:\n- Agents must have unique identifiers\n- Agents have capabilities and roles\n- Agents can be active/inactive\n- Agents track their current task assignments",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "src\\domain\\services\\assignment_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "find_best_agent_for_task",
            "validate_assignment",
            "_can_agent_handle_task",
            "_calculate_agent_score"
        ],
        "classes": {
            "AssignmentService": {
                "methods": [
                    "__init__",
                    "find_best_agent_for_task",
                    "validate_assignment",
                    "_can_agent_handle_task",
                    "_calculate_agent_score"
                ],
                "docstring": "Domain service for task assignment logic.\n\nThis service contains business rules for assigning tasks to agents\nthat involve multiple entities and complex logic.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\domain\\ports\\message_bus.py": {
        "language": ".py",
        "functions": [
            "publish",
            "subscribe",
            "broadcast",
            "send_direct"
        ],
        "classes": {
            "MessageBus": {
                "methods": [
                    "publish",
                    "subscribe",
                    "broadcast",
                    "send_direct"
                ],
                "docstring": "Port for message publishing and event handling.\n\nThis protocol enables loose coupling between domain objects\nand external messaging infrastructure.",
                "base_classes": [
                    "Protocol"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\domain\\ports\\browser.py": {
        "language": ".py",
        "functions": [
            "open",
            "goto",
            "send_and_wait",
            "close",
            "is_ready"
        ],
        "classes": {
            "PageReply": {
                "methods": [],
                "docstring": "Standardized response from browser interactions.",
                "base_classes": []
            },
            "Browser": {
                "methods": [
                    "open",
                    "goto",
                    "send_and_wait",
                    "close",
                    "is_ready"
                ],
                "docstring": "Abstract browser interface for domain layer.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\domain\\services\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\domain\\value_objects\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\architecture\\unified_architecture_core.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "register_component",
            "get_component",
            "list_components",
            "update_component_metrics",
            "get_architecture_health",
            "consolidate_architecture"
        ],
        "classes": {
            "ArchitectureType": {
                "methods": [],
                "docstring": "Architecture type enumeration.",
                "base_classes": [
                    "Enum"
                ]
            },
            "ComponentStatus": {
                "methods": [],
                "docstring": "Component status enumeration.",
                "base_classes": [
                    "Enum"
                ]
            },
            "ArchitectureComponent": {
                "methods": [],
                "docstring": "Unified architecture component data structure.",
                "base_classes": []
            },
            "UnifiedArchitectureCore": {
                "methods": [
                    "__init__",
                    "register_component",
                    "get_component",
                    "list_components",
                    "update_component_metrics",
                    "get_architecture_health",
                    "consolidate_architecture"
                ],
                "docstring": "Unified Architecture Core - Single source of truth for all architecture.\n\nConsolidates fragmented architecture systems into a single, simple,\nand maintainable design following KISS principles.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "src\\domain\\value_objects\\ids.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "__str__",
            "__post_init__",
            "__str__",
            "__post_init__",
            "__str__",
            "__post_init__",
            "__str__"
        ],
        "classes": {
            "TaskIdentifier": {
                "methods": [
                    "__post_init__",
                    "__str__"
                ],
                "docstring": "Value object for task identification.",
                "base_classes": []
            },
            "AgentIdentifier": {
                "methods": [
                    "__post_init__",
                    "__str__"
                ],
                "docstring": "Value object for agent identification.",
                "base_classes": []
            },
            "MessageIdentifier": {
                "methods": [
                    "__post_init__",
                    "__str__"
                ],
                "docstring": "Value object for message identification.",
                "base_classes": []
            },
            "FSMStateIdentifier": {
                "methods": [
                    "__post_init__",
                    "__str__"
                ],
                "docstring": "Value object for FSM state identification.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\domain\\ports\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\domain\\ports\\logger.py": {
        "language": ".py",
        "functions": [
            "debug",
            "info",
            "warning",
            "error",
            "critical",
            "log"
        ],
        "classes": {
            "LogLevel": {
                "methods": [],
                "docstring": "Log levels for different types of messages.",
                "base_classes": [
                    "Enum"
                ]
            },
            "Logger": {
                "methods": [
                    "debug",
                    "info",
                    "warning",
                    "error",
                    "critical",
                    "log"
                ],
                "docstring": "Port for logging operations.\n\nThis protocol allows domain objects to log events and debug information\nwithout depending on specific logging implementations.",
                "base_classes": [
                    "Protocol"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\domain\\ports\\task_repository.py": {
        "language": ".py",
        "functions": [
            "get",
            "get_by_agent",
            "get_pending",
            "add",
            "save",
            "delete",
            "list_all"
        ],
        "classes": {
            "TaskRepository": {
                "methods": [
                    "get",
                    "get_by_agent",
                    "get_pending",
                    "add",
                    "save",
                    "delete",
                    "list_all"
                ],
                "docstring": "Port for task persistence operations.\n\nThis protocol defines the interface that any task repository\nimplementation must provide. The domain layer depends only on this\nabstraction, not on concrete implementations.",
                "base_classes": [
                    "Protocol"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\gaming\\handlers\\gaming_alert_handlers.py": {
        "language": ".py",
        "functions": [
            "handle_performance_alerts",
            "handle_system_health_alerts",
            "handle_alert_acknowledgment",
            "handle_alert_resolution"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "src\\gaming\\models\\gaming_alert_models.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "AlertSeverity": {
                "methods": [],
                "docstring": "Alert severity levels for gaming systems.",
                "base_classes": [
                    "Enum"
                ]
            },
            "AlertType": {
                "methods": [],
                "docstring": "Types of alerts for gaming and entertainment systems.",
                "base_classes": [
                    "Enum"
                ]
            },
            "GamingAlert": {
                "methods": [],
                "docstring": "Represents a gaming system alert.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\gaming\\integration\\models.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "IntegrationStatus": {
                "methods": [],
                "docstring": "Status of gaming system integration.",
                "base_classes": [
                    "Enum"
                ]
            },
            "GameType": {
                "methods": [],
                "docstring": "Types of games supported by the system.",
                "base_classes": [
                    "Enum"
                ]
            },
            "GameSession": {
                "methods": [],
                "docstring": "Represents an active gaming session.",
                "base_classes": []
            },
            "EntertainmentSystem": {
                "methods": [],
                "docstring": "Represents an entertainment system component.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\gaming\\integration\\core.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_initialize",
            "_setup_handlers",
            "create_game_session",
            "end_game_session",
            "get_active_sessions",
            "get_system_status",
            "_handle_session_management",
            "_handle_system_health",
            "process_event",
            "register_entertainment_system"
        ],
        "classes": {
            "GamingIntegrationCore": {
                "methods": [
                    "__init__",
                    "_initialize",
                    "_setup_handlers",
                    "create_game_session",
                    "end_game_session",
                    "get_active_sessions",
                    "get_system_status",
                    "_handle_session_management",
                    "_handle_system_health",
                    "process_event",
                    "register_entertainment_system"
                ],
                "docstring": "Simplified gaming integration core used by tests and services.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\gaming\\models\\gaming_models.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "IntegrationStatus": {
                "methods": [],
                "docstring": "Status of gaming system integration.",
                "base_classes": [
                    "Enum"
                ]
            },
            "GameType": {
                "methods": [],
                "docstring": "Types of games supported by the system.",
                "base_classes": [
                    "Enum"
                ]
            },
            "GameSession": {
                "methods": [],
                "docstring": "Represents an active gaming session.",
                "base_classes": []
            },
            "EntertainmentSystem": {
                "methods": [],
                "docstring": "Represents an entertainment system component.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\gaming\\utils\\gaming_handlers.py": {
        "language": ".py",
        "functions": [
            "handle_session_management",
            "handle_performance_monitoring",
            "handle_system_health",
            "handle_user_interaction"
        ],
        "classes": {
            "GamingEventHandlers": {
                "methods": [
                    "handle_session_management",
                    "handle_performance_monitoring",
                    "handle_system_health",
                    "handle_user_interaction"
                ],
                "docstring": "Event handling utilities for gaming systems.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\gaming\\utils\\gaming_alert_utils.py": {
        "language": ".py",
        "functions": [
            "create_alert_id",
            "validate_alert_metadata",
            "format_alert_message",
            "calculate_alert_priority"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "src\\infrastructure\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\infrastructure\\logging\\std_logger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_map_log_level",
            "debug",
            "info",
            "warning",
            "error",
            "critical",
            "log"
        ],
        "classes": {
            "StdLogger": {
                "methods": [
                    "__init__",
                    "_map_log_level",
                    "debug",
                    "info",
                    "warning",
                    "error",
                    "critical",
                    "log"
                ],
                "docstring": "Standard library logger implementation.\n\nThis adapter provides logging functionality using Python's built-in logging module.",
                "base_classes": [
                    "Logger"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\infrastructure\\persistence\\sqlite_agent_repo.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_db",
            "_get_connection",
            "get",
            "get_by_capability",
            "get_active",
            "get_available",
            "add",
            "save",
            "delete",
            "list_all",
            "_row_to_agent",
            "_agent_to_row"
        ],
        "classes": {
            "SqliteAgentRepository": {
                "methods": [
                    "__init__",
                    "_init_db",
                    "_get_connection",
                    "get",
                    "get_by_capability",
                    "get_active",
                    "get_available",
                    "add",
                    "save",
                    "delete",
                    "list_all",
                    "_row_to_agent",
                    "_agent_to_row"
                ],
                "docstring": "SQLite implementation of the AgentRepository port.\n\nThis adapter provides persistence for agents using SQLite database.",
                "base_classes": [
                    "AgentRepository"
                ]
            }
        },
        "routes": [],
        "complexity": 26
    },
    "src\\infrastructure\\time\\system_clock.py": {
        "language": ".py",
        "functions": [
            "now",
            "utcnow",
            "from_timestamp",
            "to_timestamp",
            "__init__",
            "_get_timezone",
            "now",
            "utcnow",
            "from_timestamp",
            "to_timestamp",
            "__init__",
            "format_time",
            "format_date",
            "format_datetime",
            "parse_time",
            "parse_date",
            "parse_datetime",
            "__init__",
            "add_days",
            "add_hours",
            "add_minutes",
            "time_diff_seconds",
            "time_diff_minutes",
            "time_diff_hours",
            "time_diff_days",
            "is_expired",
            "get_age_seconds"
        ],
        "classes": {
            "TimeConfig": {
                "methods": [],
                "docstring": "Configuration for time operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ClockInterface": {
                "methods": [
                    "now",
                    "utcnow",
                    "from_timestamp",
                    "to_timestamp"
                ],
                "docstring": "Abstract interface for time operations.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SystemClock": {
                "methods": [
                    "__init__",
                    "_get_timezone",
                    "now",
                    "utcnow",
                    "from_timestamp",
                    "to_timestamp"
                ],
                "docstring": "System clock implementation with timezone support.",
                "base_classes": [
                    "ClockInterface"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TimeFormatter": {
                "methods": [
                    "__init__",
                    "format_time",
                    "format_date",
                    "format_datetime",
                    "parse_time",
                    "parse_date",
                    "parse_datetime"
                ],
                "docstring": "Utility class for time formatting operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TimeCalculator": {
                "methods": [
                    "__init__",
                    "add_days",
                    "add_hours",
                    "add_minutes",
                    "time_diff_seconds",
                    "time_diff_minutes",
                    "time_diff_hours",
                    "time_diff_days",
                    "is_expired",
                    "get_age_seconds"
                ],
                "docstring": "Utility class for time calculation operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 54
    },
    "src\\gaming\\utils\\gaming_monitors.py": {
        "language": ".py",
        "functions": [
            "monitor_fps",
            "monitor_memory",
            "monitor_cpu",
            "monitor_network"
        ],
        "classes": {
            "GamingPerformanceMonitors": {
                "methods": [
                    "monitor_fps",
                    "monitor_memory",
                    "monitor_cpu",
                    "monitor_network"
                ],
                "docstring": "Performance monitoring utilities for gaming systems.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\infrastructure\\persistence\\sqlite_task_repo.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_db",
            "_get_connection",
            "get",
            "get_by_agent",
            "get_pending",
            "add",
            "save",
            "delete",
            "list_all",
            "find_by_fingerprint",
            "create_from_message",
            "_row_to_task",
            "_task_to_row"
        ],
        "classes": {
            "SqliteTaskRepository": {
                "methods": [
                    "__init__",
                    "_init_db",
                    "_get_connection",
                    "get",
                    "get_by_agent",
                    "get_pending",
                    "add",
                    "save",
                    "delete",
                    "list_all",
                    "find_by_fingerprint",
                    "create_from_message",
                    "_row_to_task",
                    "_task_to_row"
                ],
                "docstring": "SQLite implementation of the TaskRepository port.\n\nThis adapter provides persistence for tasks using SQLite database.\nIt implements the TaskRepository protocol defined in the domain layer.",
                "base_classes": [
                    "TaskRepository"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 28
    },
    "src\\gaming\\gaming_alert_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_initialize_resources",
            "_load_alert_history",
            "_setup_monitoring",
            "create_alert",
            "check_performance_alerts",
            "check_system_health_alerts",
            "acknowledge_alert",
            "resolve_alert",
            "get_active_alerts",
            "get_alert_summary",
            "clear_resolved_alerts",
            "set_alert_threshold",
            "export_alerts"
        ],
        "classes": {
            "AlertSeverity": {
                "methods": [],
                "docstring": "Alert severity levels for gaming systems.",
                "base_classes": [
                    "Enum"
                ]
            },
            "AlertType": {
                "methods": [],
                "docstring": "Types of alerts for gaming and entertainment systems.",
                "base_classes": [
                    "Enum"
                ]
            },
            "GamingAlert": {
                "methods": [],
                "docstring": "Represents a gaming system alert.",
                "base_classes": []
            },
            "GamingAlertManager": {
                "methods": [
                    "__init__",
                    "_initialize_resources",
                    "_load_alert_history",
                    "_setup_monitoring",
                    "create_alert",
                    "check_performance_alerts",
                    "check_system_health_alerts",
                    "acknowledge_alert",
                    "resolve_alert",
                    "get_active_alerts",
                    "get_alert_summary",
                    "clear_resolved_alerts",
                    "set_alert_threshold",
                    "export_alerts"
                ],
                "docstring": "Manages alerts for gaming and entertainment systems.\n\nProvides comprehensive alert handling including creation, acknowledgment,\nresolution, and monitoring capabilities.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "src\\infrastructure\\browser\\thea_manager_profile.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\infrastructure\\browser\\thea_login_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "ensure_authenticated",
            "_is_authenticated"
        ],
        "classes": {
            "TheaLoginConfig": {
                "methods": [],
                "docstring": "Configuration for Thea login.",
                "base_classes": []
            },
            "TheaLoginHandler": {
                "methods": [
                    "__init__",
                    "ensure_authenticated",
                    "_is_authenticated"
                ],
                "docstring": "Basic login handler stub.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\gaming\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\infrastructure\\browser\\chrome_undetected.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "open",
            "goto",
            "close"
        ],
        "classes": {
            "ChromeUndetected": {
                "methods": [
                    "__init__",
                    "open",
                    "goto",
                    "close"
                ],
                "docstring": "Basic Chrome browser adapter.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\infrastructure\\browser\\thea_modules\\response_collector.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "collect_full_response",
            "_extract_current_response",
            "_is_response_complete",
            "poll_for_completion",
            "wait_for_response_start",
            "get_response_metadata",
            "__init__",
            "start_monitoring",
            "get_progress",
            "should_continue"
        ],
        "classes": {
            "TheaResponseCollector": {
                "methods": [
                    "__init__",
                    "collect_full_response",
                    "_extract_current_response",
                    "_is_response_complete",
                    "poll_for_completion",
                    "wait_for_response_start",
                    "get_response_metadata"
                ],
                "docstring": "Advanced response collector with DOM polling and cursor detection.\n\nProvides sophisticated response extraction by monitoring DOM changes,\ndetecting cursor position changes, and handling dynamic content loading.",
                "base_classes": []
            },
            "TheaResponseMonitor": {
                "methods": [
                    "__init__",
                    "start_monitoring",
                    "get_progress",
                    "should_continue"
                ],
                "docstring": "Monitors response collection progress and provides status updates.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\infrastructure\\browser\\thea_modules\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\infrastructure\\browser\\thea_cookie_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "save_cookies",
            "load_cookies",
            "has_valid_session",
            "get_session_info"
        ],
        "classes": {
            "TheaCookieConfig": {
                "methods": [],
                "docstring": "Configuration for Thea cookie management.",
                "base_classes": []
            },
            "TheaCookieManager": {
                "methods": [
                    "__init__",
                    "save_cookies",
                    "load_cookies",
                    "has_valid_session",
                    "get_session_info"
                ],
                "docstring": "Basic cookie manager stub.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\managers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\reporting\\config.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "ReportFormat": {
                "methods": [],
                "docstring": "Supported report output formats.",
                "base_classes": [
                    "str",
                    "Enum"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\infrastructure\\browser\\thea_session_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start",
            "stop",
            "create_session",
            "can_make_request",
            "record_request",
            "wait_for_rate_limit_reset",
            "handle_rate_limit_error",
            "get_session_info",
            "get_rate_limit_status"
        ],
        "classes": {
            "RateLimitConfig": {
                "methods": [],
                "docstring": "Configuration for rate limiting.",
                "base_classes": []
            },
            "TheaSessionManager": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "create_session",
                    "can_make_request",
                    "record_request",
                    "wait_for_rate_limit_reset",
                    "handle_rate_limit_error",
                    "get_session_info",
                    "get_rate_limit_status"
                ],
                "docstring": "Basic session manager stub.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\shared\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\trading_robot\\core\\dependency_injection.py": {
        "language": ".py",
        "functions": [
            "get_trading_container",
            "reset_trading_container",
            "get_trading_repository",
            "get_trading_service",
            "__init__",
            "_register_defaults",
            "register_factory",
            "register_instance",
            "resolve",
            "_create_from_factory",
            "has_service",
            "clear_scope",
            "get_registered_services"
        ],
        "classes": {
            "DependencyInjectionError": {
                "methods": [],
                "docstring": "Custom exception for dependency injection errors.",
                "base_classes": [
                    "Exception"
                ]
            },
            "TradingDependencyContainer": {
                "methods": [
                    "__init__",
                    "_register_defaults",
                    "register_factory",
                    "register_instance",
                    "resolve",
                    "_create_from_factory",
                    "has_service",
                    "clear_scope",
                    "get_registered_services"
                ],
                "docstring": "Dependency injection container for trading robot components.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\shared\\result.py": {
        "language": ".py",
        "functions": [
            "success",
            "failure",
            "try_catch",
            "is_success",
            "is_failure",
            "map",
            "bind",
            "get_or_else",
            "or_else",
            "is_success",
            "is_failure",
            "map",
            "bind",
            "get_or_else",
            "or_else",
            "wrapper"
        ],
        "classes": {
            "Success": {
                "methods": [
                    "is_success",
                    "is_failure",
                    "map",
                    "bind",
                    "get_or_else",
                    "or_else"
                ],
                "docstring": "Represents a successful operation with a value.",
                "base_classes": [
                    null
                ]
            },
            "Failure": {
                "methods": [
                    "is_success",
                    "is_failure",
                    "map",
                    "bind",
                    "get_or_else",
                    "or_else"
                ],
                "docstring": "Represents a failed operation with an error.",
                "base_classes": [
                    null
                ]
            }
        },
        "routes": [],
        "complexity": 28
    },
    "src\\gaming\\performance_validation.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_performance_report"
        ],
        "classes": {
            "PerformanceMetrics": {
                "methods": [],
                "docstring": "Performance metrics for validation.",
                "base_classes": []
            },
            "GamingPerformanceValidator": {
                "methods": [
                    "__init__",
                    "generate_performance_report"
                ],
                "docstring": "Performance validator for gaming infrastructure components.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\infrastructure\\browser\\thea_modules\\content_scraper.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "__init__",
            "scrape_content",
            "_clean_content",
            "_extract_metadata",
            "_calculate_quality_score",
            "_load_content_patterns",
            "validate_content",
            "__init__",
            "process_batch",
            "filter_high_quality",
            "generate_summary"
        ],
        "classes": {
            "ScrapedContent": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Represents scraped content from Thea Manager.",
                "base_classes": []
            },
            "TheaContentScraper": {
                "methods": [
                    "__init__",
                    "scrape_content",
                    "_clean_content",
                    "_extract_metadata",
                    "_calculate_quality_score",
                    "_load_content_patterns",
                    "validate_content"
                ],
                "docstring": "Handles content scraping and processing for Thea Manager.",
                "base_classes": []
            },
            "TheaContentProcessor": {
                "methods": [
                    "__init__",
                    "process_batch",
                    "filter_high_quality",
                    "generate_summary"
                ],
                "docstring": "Processes and analyzes scraped content.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "src\\infrastructure\\browser\\thea_modules\\browser_ops.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "navigate_to_conversation",
            "send_message",
            "wait_for_response_ready",
            "_find_input_element",
            "_find_send_button",
            "_is_input_available",
            "_verify_page_loaded",
            "get_page_status",
            "__init__",
            "find_element_with_retry",
            "find_elements_with_retry",
            "wait_for_element"
        ],
        "classes": {
            "TheaBrowserOperations": {
                "methods": [
                    "__init__",
                    "navigate_to_conversation",
                    "send_message",
                    "wait_for_response_ready",
                    "_find_input_element",
                    "_find_send_button",
                    "_is_input_available",
                    "_verify_page_loaded",
                    "get_page_status"
                ],
                "docstring": "Handles basic browser operations for Thea Manager.",
                "base_classes": []
            },
            "TheaElementFinder": {
                "methods": [
                    "__init__",
                    "find_element_with_retry",
                    "find_elements_with_retry",
                    "wait_for_element"
                ],
                "docstring": "Utility class for finding elements with retry logic.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "src\\gaming\\integration\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\quality\\proof_ledger.py": {
        "language": ".py",
        "functions": [
            "_git_head",
            "run_tdd_proof"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\infrastructure\\browser\\thea_modules\\profile.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "send_message_and_wait",
            "get_status",
            "scrape_current_content",
            "validate_setup",
            "cleanup",
            "_setup_browser_components",
            "__repr__"
        ],
        "classes": {
            "TheaManagerProfile": {
                "methods": [
                    "__init__",
                    "initialize",
                    "send_message_and_wait",
                    "get_status",
                    "scrape_current_content",
                    "validate_setup",
                    "cleanup",
                    "_setup_browser_components",
                    "__repr__"
                ],
                "docstring": "Main profile class for Thea Manager browser interactions.\n\nThis class orchestrates all Thea Manager functionality including:\n- Configuration management\n- Browser operations\n- Response collection with advanced DOM polling\n- Content scraping and processing\n- Session management and error handling",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\trading_robot\\repositories\\implementations\\in_memory_trading_repository.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "InMemoryTradingRepository": {
                "methods": [
                    "__init__"
                ],
                "docstring": "In-memory trading repository with V2 compliance.\n\nOrchestrates query and write operations through modular components.",
                "base_classes": [
                    "TradingRepositoryInterface"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\infrastructure\\browser\\thea_modules\\config.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "get_config",
            "update_config",
            "get_selectors",
            "get_fallback_selectors",
            "get_timeouts",
            "get_project_patterns",
            "validate_config"
        ],
        "classes": {
            "TheaManagerConfig": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Configuration for Thea Manager interactions.",
                "base_classes": []
            },
            "TheaConfigManager": {
                "methods": [
                    "__init__",
                    "get_config",
                    "update_config",
                    "get_selectors",
                    "get_fallback_selectors",
                    "get_timeouts",
                    "get_project_patterns",
                    "validate_config"
                ],
                "docstring": "Manages Thea Manager configuration settings.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\trading_robot\\repositories\\interfaces\\position_repository_interface.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "PositionRepositoryInterface": {
                "methods": [],
                "docstring": "Abstract interface for position data access with V2 compliance.\n\nV2 COMPLIANCE: Repository pattern with async operations and comprehensive error handling.\nDESIGN PATTERN: Repository pattern providing clean data access abstraction.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\trading_robot\\repositories\\interfaces\\trading_repository_interface.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "TradingRepositoryInterface": {
                "methods": [],
                "docstring": "Abstract interface for trading data access with V2 compliance.\n\nV2 COMPLIANCE: Repository pattern with async operations and comprehensive error handling.\nDESIGN PATTERN: Repository pattern providing clean data access abstraction.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\trading_robot\\repositories\\interfaces\\portfolio_repository_interface.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "PortfolioRepositoryInterface": {
                "methods": [],
                "docstring": "Abstract interface for portfolio data access with V2 compliance.\n\nV2 COMPLIANCE: Repository pattern with async operations and comprehensive error handling.\nDESIGN PATTERN: Repository pattern providing clean data access abstraction.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\templates\\onboarding_roles.py": {
        "language": ".py",
        "functions": [
            "build_role_message"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\trading_robot\\repositories\\implementations\\trading_repository_impl.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "TradingRepositoryImpl": {
                "methods": [
                    "__init__"
                ],
                "docstring": "In-memory trading repository with V2 compliance.\n\nOrchestrates query and write operations through modular components.",
                "base_classes": [
                    "TradingRepositoryInterface"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\trading_robot\\services\\analytics\\performance_metrics_engine.py": {
        "language": ".py",
        "functions": [
            "create_performance_metrics_engine",
            "__init__",
            "calculate_performance_metrics",
            "_calculate_total_return",
            "_calculate_sharpe_ratio",
            "_calculate_max_drawdown",
            "_calculate_peak_to_trough_drawdown",
            "_calculate_rolling_drawdown",
            "_calculate_win_rate",
            "_calculate_profit_factor",
            "_calculate_avg_trade_duration",
            "_calculate_returns_series",
            "_group_trades_by_symbol",
            "_create_default_performance_metrics"
        ],
        "classes": {
            "PerformanceMetricsEngine": {
                "methods": [
                    "__init__",
                    "calculate_performance_metrics",
                    "_calculate_total_return",
                    "_calculate_sharpe_ratio",
                    "_calculate_max_drawdown",
                    "_calculate_peak_to_trough_drawdown",
                    "_calculate_rolling_drawdown",
                    "_calculate_win_rate",
                    "_calculate_profit_factor",
                    "_calculate_avg_trade_duration",
                    "_calculate_returns_series",
                    "_group_trades_by_symbol",
                    "_create_default_performance_metrics"
                ],
                "docstring": "Performance metrics engine for trading portfolio analysis.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 27
    },
    "src\\trading_robot\\repositories\\trading_repository.py": {
        "language": ".py",
        "functions": [
            "get_trading_repository",
            "__init__"
        ],
        "classes": {
            "TradingRepository": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Main trading repository that coordinates all trading data access.\n\nProvides unified interface for trade, position, and portfolio operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 3
    },
    "src\\trading_robot\\repositories\\models\\portfolio.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "add_position",
            "remove_position",
            "get_position",
            "has_position",
            "get_total_market_value",
            "get_total_cost_basis",
            "get_total_unrealized_pnl",
            "get_total_unrealized_pnl_percentage",
            "get_portfolio_value",
            "get_position_count",
            "get_long_positions",
            "get_short_positions",
            "get_flat_positions",
            "get_profitable_positions",
            "get_losing_positions",
            "update_position_prices",
            "_update_total_value",
            "get_portfolio_summary",
            "to_dict",
            "from_dict",
            "__str__",
            "__repr__"
        ],
        "classes": {
            "Portfolio": {
                "methods": [
                    "__post_init__",
                    "add_position",
                    "remove_position",
                    "get_position",
                    "has_position",
                    "get_total_market_value",
                    "get_total_cost_basis",
                    "get_total_unrealized_pnl",
                    "get_total_unrealized_pnl_percentage",
                    "get_portfolio_value",
                    "get_position_count",
                    "get_long_positions",
                    "get_short_positions",
                    "get_flat_positions",
                    "get_profitable_positions",
                    "get_losing_positions",
                    "update_position_prices",
                    "_update_total_value",
                    "get_portfolio_summary",
                    "to_dict",
                    "from_dict",
                    "__str__",
                    "__repr__"
                ],
                "docstring": "Portfolio data structure with V2 compliance validation.\n\nV2 COMPLIANCE: Type-safe data structure with validation and metadata.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 46
    },
    "src\\trading_robot\\repositories\\models\\position.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "get_market_value",
            "get_cost_basis",
            "get_unrealized_pnl",
            "get_unrealized_pnl_percentage",
            "is_long",
            "is_short",
            "is_flat",
            "is_profitable",
            "update_price",
            "add_quantity",
            "to_dict",
            "from_dict",
            "__str__",
            "__repr__"
        ],
        "classes": {
            "Position": {
                "methods": [
                    "__post_init__",
                    "get_market_value",
                    "get_cost_basis",
                    "get_unrealized_pnl",
                    "get_unrealized_pnl_percentage",
                    "is_long",
                    "is_short",
                    "is_flat",
                    "is_profitable",
                    "update_price",
                    "add_quantity",
                    "to_dict",
                    "from_dict",
                    "__str__",
                    "__repr__"
                ],
                "docstring": "Position data structure with V2 compliance validation.\n\nV2 COMPLIANCE: Type-safe data structure with validation and metadata.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 30
    },
    "src\\trading_robot\\repositories\\models\\trade.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "get_value",
            "is_buy",
            "is_sell",
            "is_executed",
            "is_pending",
            "is_cancelled",
            "to_dict",
            "from_dict",
            "__str__",
            "__repr__"
        ],
        "classes": {
            "Trade": {
                "methods": [
                    "__post_init__",
                    "get_value",
                    "is_buy",
                    "is_sell",
                    "is_executed",
                    "is_pending",
                    "is_cancelled",
                    "to_dict",
                    "from_dict",
                    "__str__",
                    "__repr__"
                ],
                "docstring": "Trade data structure with V2 compliance validation.\n\nV2 COMPLIANCE: Type-safe data structure with validation and metadata.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\trading_robot\\services\\analytics\\market_trend_engine.py": {
        "language": ".py",
        "functions": [
            "create_market_trend_engine",
            "__init__",
            "analyze_market_trend",
            "_calculate_trend_direction",
            "_calculate_trend_confidence",
            "_calculate_predicted_change",
            "_create_default_trend",
            "get_trend_summary"
        ],
        "classes": {
            "MarketTrendEngine": {
                "methods": [
                    "__init__",
                    "analyze_market_trend",
                    "_calculate_trend_direction",
                    "_calculate_trend_confidence",
                    "_calculate_predicted_change",
                    "_create_default_trend",
                    "get_trend_summary"
                ],
                "docstring": "Market trend analysis engine for trading market analysis.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "src\\trading_robot\\services\\analytics\\trading_bi_models.py": {
        "language": ".py",
        "functions": [
            "__post_init__"
        ],
        "classes": {
            "RiskLevel": {
                "methods": [],
                "docstring": "Risk assessment levels for trading positions.",
                "base_classes": [
                    "Enum"
                ]
            },
            "PerformanceMetrics": {
                "methods": [],
                "docstring": "Performance metrics data structure for trading analysis.",
                "base_classes": []
            },
            "RiskMetrics": {
                "methods": [],
                "docstring": "Risk assessment metrics for portfolio analysis.",
                "base_classes": []
            },
            "MarketTrend": {
                "methods": [],
                "docstring": "Market trend analysis data structure.",
                "base_classes": []
            },
            "PnLResult": {
                "methods": [],
                "docstring": "P&L calculation result structure.",
                "base_classes": []
            },
            "TrendAnalysisConfig": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Configuration for trend analysis.",
                "base_classes": []
            },
            "RiskAssessmentConfig": {
                "methods": [],
                "docstring": "Configuration for risk assessment.",
                "base_classes": []
            },
            "PerformanceConfig": {
                "methods": [],
                "docstring": "Configuration for performance metrics calculation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\trading_robot\\services\\analytics\\trading_bi_orchestrator.py": {
        "language": ".py",
        "functions": [
            "create_trading_bi_analytics_orchestrator",
            "__init__",
            "get_engine_status"
        ],
        "classes": {
            "TradingBiAnalyticsOrchestrator": {
                "methods": [
                    "__init__",
                    "get_engine_status"
                ],
                "docstring": "Main orchestrator for trading BI analytics system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 5
    },
    "src\\trading_robot\\services\\trading_bi_analytics.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\utils\\config_core.py": {
        "language": ".py",
        "functions": [
            "get_config",
            "set_config",
            "__init__",
            "get",
            "set"
        ],
        "classes": {
            "ConfigEnvironment": {
                "methods": [],
                "docstring": "Configuration environment types.",
                "base_classes": [
                    "str",
                    "Enum"
                ]
            },
            "ConfigSource": {
                "methods": [],
                "docstring": "Configuration source types.",
                "base_classes": [
                    "str",
                    "Enum"
                ]
            },
            "ConfigValue": {
                "methods": [],
                "docstring": "Configuration value with metadata.",
                "base_classes": []
            },
            "ConfigManager": {
                "methods": [
                    "__init__",
                    "get",
                    "set"
                ],
                "docstring": "Centralized configuration manager.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\trading_robot\\services\\trading_service.py": {
        "language": ".py",
        "functions": [
            "create_trading_service",
            "__init__",
            "_validate_trade_inputs"
        ],
        "classes": {
            "TradingService": {
                "methods": [
                    "__init__",
                    "_validate_trade_inputs"
                ],
                "docstring": "Service layer for trading business logic.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 5
    },
    "src\\utils\\confirm.py": {
        "language": ".py",
        "functions": [
            "confirm"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\utils\\backup.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_backup",
            "list_backups",
            "restore_backup",
            "cleanup_old_backups"
        ],
        "classes": {
            "BackupManager": {
                "methods": [
                    "__init__",
                    "create_backup",
                    "list_backups",
                    "restore_backup",
                    "cleanup_old_backups"
                ],
                "docstring": "Simple backup manager for agent state and configuration.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\utils\\unified_utilities.py": {
        "language": ".py",
        "functions": [
            "get_unified_utility",
            "get_logger",
            "get_project_root",
            "get_config_path",
            "ensure_directory",
            "__init__",
            "join_paths",
            "get_project_root",
            "get_config_path",
            "ensure_directory"
        ],
        "classes": {
            "UnifiedUtility": {
                "methods": [
                    "__init__",
                    "join_paths",
                    "get_project_root",
                    "get_config_path",
                    "ensure_directory"
                ],
                "docstring": "Unified utility class providing common functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "src\\utils\\file_utils.py": {
        "language": ".py",
        "functions": [
            "ensure_directory",
            "read_json",
            "write_json",
            "read_yaml",
            "write_yaml",
            "file_exists",
            "is_file_readable",
            "is_file_writable",
            "get_file_size",
            "get_file_modified_time",
            "get_file_hash",
            "get_file_extension",
            "is_json_file",
            "list_files",
            "get_directory_size",
            "copy_file",
            "create_backup",
            "restore_from_backup",
            "safe_delete_file",
            "validate_file_path"
        ],
        "classes": {
            "FileUtils": {
                "methods": [
                    "ensure_directory",
                    "read_json",
                    "write_json",
                    "read_yaml",
                    "write_yaml",
                    "file_exists",
                    "is_file_readable",
                    "is_file_writable",
                    "get_file_size",
                    "get_file_modified_time",
                    "get_file_hash",
                    "get_file_extension",
                    "is_json_file",
                    "list_files",
                    "get_directory_size",
                    "copy_file",
                    "create_backup",
                    "restore_from_backup",
                    "safe_delete_file",
                    "validate_file_path"
                ],
                "docstring": "Unified file utility operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 40
    },
    "src\\utils\\config_core\\fsm_config.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get",
            "set"
        ],
        "classes": {
            "FSMConfig": {
                "methods": [
                    "__init__",
                    "get",
                    "set"
                ],
                "docstring": "FSM configuration compatibility class.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\trading_robot\\repositories\\models\\trading_models.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "is_completed",
            "calculate_value",
            "__post_init__",
            "update_pnl",
            "get_pnl_percentage",
            "is_long",
            "is_short"
        ],
        "classes": {
            "Trade": {
                "methods": [
                    "__post_init__",
                    "is_completed",
                    "calculate_value"
                ],
                "docstring": "Trade data structure with V2 compliance validation.\n\nV2 COMPLIANCE: Type-safe data structure with validation and metadata.",
                "base_classes": []
            },
            "Position": {
                "methods": [
                    "__post_init__",
                    "update_pnl",
                    "get_pnl_percentage",
                    "is_long",
                    "is_short"
                ],
                "docstring": "Position data structure with V2 compliance validation.\n\nV2 COMPLIANCE: Type-safe data structure with validation and performance metrics.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\trading_robot\\services\\analytics\\risk_analysis_engine.py": {
        "language": ".py",
        "functions": [
            "create_risk_analysis_engine",
            "__init__",
            "calculate_risk_metrics",
            "_calculate_returns_series",
            "_calculate_volatility",
            "_calculate_value_at_risk",
            "_calculate_expected_shortfall",
            "_calculate_beta_coefficient",
            "_assess_risk_level",
            "_calculate_max_position_size",
            "_create_default_risk_metrics"
        ],
        "classes": {
            "RiskAnalysisEngine": {
                "methods": [
                    "__init__",
                    "calculate_risk_metrics",
                    "_calculate_returns_series",
                    "_calculate_volatility",
                    "_calculate_value_at_risk",
                    "_calculate_expected_shortfall",
                    "_calculate_beta_coefficient",
                    "_assess_risk_level",
                    "_calculate_max_position_size",
                    "_create_default_risk_metrics"
                ],
                "docstring": "Risk analysis engine for trading portfolio risk assessment.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 21
    },
    "src\\utils\\logger.py": {
        "language": ".py",
        "functions": [
            "get_messaging_logger",
            "get_contract_logger",
            "get_core_logger",
            "get_logger",
            "format",
            "__init__",
            "_setup_file_handler",
            "debug",
            "info",
            "warning",
            "error",
            "critical",
            "_log"
        ],
        "classes": {
            "StructuredFormatter": {
                "methods": [
                    "format"
                ],
                "docstring": "Custom formatter for structured JSON logging.",
                "base_classes": [
                    "logging.Formatter"
                ]
            },
            "V2Logger": {
                "methods": [
                    "__init__",
                    "_setup_file_handler",
                    "debug",
                    "info",
                    "warning",
                    "error",
                    "critical",
                    "_log"
                ],
                "docstring": "V2 compliant logger with enhanced capabilities.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\utils\\config_consolidator.py": {
        "language": ".py",
        "functions": [
            "run_configuration_consolidation",
            "__init__",
            "scan_configuration_patterns",
            "consolidate_patterns",
            "generate_consolidation_report"
        ],
        "classes": {
            "UnifiedConfigurationConsolidator": {
                "methods": [
                    "__init__",
                    "scan_configuration_patterns",
                    "consolidate_patterns",
                    "generate_consolidation_report"
                ],
                "docstring": "Unified configuration consolidator combining all config utilities.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 9
    },
    "tools\\captain_snapshot.py": {
        "language": ".py",
        "functions": [
            "load_agents_index",
            "calculate_staleness",
            "get_status_priority",
            "format_agent_row",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "tools\\agent_checkin.py": {
        "language": ".py",
        "functions": [
            "_iso_now",
            "ensure_dirs",
            "load_json_arg",
            "validate_minimum",
            "append_jsonl",
            "atomic_write",
            "update_index",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 8
    },
    "tools\\audit_cleanup.py": {
        "language": ".py",
        "functions": [
            "load_config",
            "load_ignores",
            "path_ignored_by_patterns",
            "is_ignored_dir",
            "sha256_file",
            "list_files",
            "ext_of",
            "match_any",
            "git_available",
            "git_head_stats",
            "percent",
            "main",
            "top_exts"
        ],
        "classes": {},
        "routes": [],
        "complexity": 13
    },
    "tools\\check_snapshot_up_to_date.py": {
        "language": ".py",
        "functions": [
            "git_diff_has_changes",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tools\\generate_utils_catalog.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\codemods\\migrate_orchestrators.py": {
        "language": ".py",
        "functions": [
            "load_map",
            "transform",
            "iter_py",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "tools\\codemods\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\run_project_scan.py": {
        "language": ".py",
        "functions": [
            "run"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tools\\auto_remediate_loc.py": {
        "language": ".py",
        "functions": [
            "should_exclude",
            "count_lines",
            "analyze_file_loc",
            "analyze_class_loc",
            "analyze_function_loc",
            "generate_file_split_suggestion",
            "generate_class_split_suggestion",
            "generate_function_split_suggestion",
            "generate_refactor_plan",
            "generate_text_report",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 11
    },
    "tools\\analysis_cli.py": {
        "language": ".py",
        "functions": [
            "should_exclude_file",
            "count_lines",
            "analyze_python_file",
            "analyze_project",
            "ci_gate_check",
            "format_violations_text",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "examples\\quickstart_demo\\dashboard_demo.py": {
        "language": ".py",
        "functions": [
            "get_agent_status",
            "display_dashboard"
        ],
        "classes": {
            "AgentStatus": {
                "methods": [],
                "docstring": "Represents the possible statuses of an agent.",
                "base_classes": [
                    "Enum"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "scripts\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\codemods\\replace_prints_with_logger.py": {
        "language": ".py",
        "functions": [
            "should_skip_file",
            "transform_file",
            "main",
            "visit_Call"
        ],
        "classes": {
            "PrintTransformer": {
                "methods": [
                    "visit_Call"
                ],
                "docstring": null,
                "base_classes": [
                    "ast.NodeTransformer"
                ]
            }
        },
        "routes": [],
        "complexity": 5
    },
    "agent_workspaces\\Agent-1\\mission_continuation.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tools\\codemods\\migrate_managers.py": {
        "language": ".py",
        "functions": [
            "load_map",
            "transform",
            "iter_python_files",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "agent_workspaces\\Agent-7\\agent7_vector_database_integration.py": {
        "language": ".py",
        "functions": [
            "integrate_agent7_vector_database",
            "__init__",
            "index_agent7_status",
            "index_agent7_capabilities",
            "search_agent7_context",
            "get_integration_status",
            "__init__",
            "add_document",
            "search",
            "__init__"
        ],
        "classes": {
            "Agent7VectorDatabaseIntegration": {
                "methods": [
                    "__init__",
                    "index_agent7_status",
                    "index_agent7_capabilities",
                    "search_agent7_context",
                    "get_integration_status"
                ],
                "docstring": "Integrates Agent-7's comprehensive status and capabilities into vector database\nfor intelligent swarm coordination and strategic oversight.",
                "base_classes": []
            },
            "VectorDatabaseService": {
                "methods": [
                    "__init__",
                    "add_document",
                    "search"
                ],
                "docstring": null,
                "base_classes": []
            },
            "VectorDocument": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "DocumentType": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 19
    },
    "examples\\quickstart_demo\\workflow_demo.py": {
        "language": ".py",
        "functions": [
            "run_demo",
            "greet"
        ],
        "classes": {
            "Agent": {
                "methods": [
                    "greet"
                ],
                "docstring": "Simple agent representation used for demonstration purposes.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 3
    },
    "scripts\\agent_documentation_cli.py": {
        "language": ".py",
        "functions": [
            "format_search_results",
            "__init__",
            "initialize",
            "set_agent",
            "search",
            "get_relevant_docs",
            "get_summary",
            "get_suggestions",
            "export_knowledge"
        ],
        "classes": {
            "AgentDocumentationCLI": {
                "methods": [
                    "__init__",
                    "initialize",
                    "set_agent",
                    "search",
                    "get_relevant_docs",
                    "get_summary",
                    "get_suggestions",
                    "export_knowledge"
                ],
                "docstring": "CLI for agent documentation access.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "scripts\\cleanup_v2_compliance.py": {
        "language": ".py",
        "functions": [
            "create_argument_parser",
            "main",
            "__init__",
            "analyze_file_sizes",
            "analyze_code_structure",
            "generate_report",
            "save_report"
        ],
        "classes": {
            "V2ComplianceChecker": {
                "methods": [
                    "__init__",
                    "analyze_file_sizes",
                    "analyze_code_structure",
                    "generate_report",
                    "save_report"
                ],
                "docstring": "V2 compliance checker for code quality standards.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "scripts\\index_v2_refactoring.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "index_refactoring_work",
            "_index_single_file",
            "_index_revolutionary_pattern"
        ],
        "classes": {
            "V2RefactoringIndexer": {
                "methods": [
                    "__init__",
                    "index_refactoring_work",
                    "_index_single_file",
                    "_index_revolutionary_pattern"
                ],
                "docstring": "Indexer for V2 compliance refactoring work.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "scripts\\status_embedding_refresh.py": {
        "language": ".py",
        "functions": [
            "refresh_all_status_embeddings"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "scripts\\capture_coordinates.py": {
        "language": ".py",
        "functions": [
            "load_coordinates",
            "save_coordinates",
            "show_current_coordinates",
            "capture_coordinate",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "scripts\\terminal_completion_monitor.py": {
        "language": ".py",
        "functions": [
            "parse_args",
            "main",
            "to_json",
            "__init__",
            "_emit",
            "poll",
            "watch"
        ],
        "classes": {
            "CompletionEvent": {
                "methods": [
                    "to_json"
                ],
                "docstring": "Structured event emitted when a completion signal is detected.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TerminalCompletionMonitor": {
                "methods": [
                    "__init__",
                    "_emit",
                    "poll",
                    "watch"
                ],
                "docstring": "Tail log files and emit events when completion signals appear.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "scripts\\enforce_python_standards.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "enforce_standards",
            "_find_python_files",
            "_check_file",
            "_analyze_ast",
            "_get_node_loc",
            "_check_coding_violations",
            "_report_results"
        ],
        "classes": {
            "Violation": {
                "methods": [],
                "docstring": "Represents a coding standard violation.",
                "base_classes": []
            },
            "PythonStandardEnforcer": {
                "methods": [
                    "__init__",
                    "enforce_standards",
                    "_find_python_files",
                    "_check_file",
                    "_analyze_ast",
                    "_get_node_loc",
                    "_check_coding_violations",
                    "_report_results"
                ],
                "docstring": "Enforces Dream.OS Python coding standards.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "scripts\\v2_release_summary.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "scripts\\activate_vector_database_integration.py": {
        "language": ".py",
        "functions": [
            "activate_vector_database_integration"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "scripts\\fix_and_ingest_vector_database.py": {
        "language": ".py",
        "functions": [
            "fix_encoding_and_reingest",
            "find_documentation_files",
            "read_file_safely",
            "generate_document_id",
            "determine_document_type",
            "test_search_functionality"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "scripts\\simple_coordinate_capture.py": {
        "language": ".py",
        "functions": [
            "load_coordinates",
            "save_coordinates",
            "show_current_coordinates",
            "parse_coordinate_input",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "scripts\\validate_workspace_coords.py": {
        "language": ".py",
        "functions": [
            "load_ssot_agents",
            "list_workspace_agents",
            "find_coordinate_entries",
            "validate_workspaces"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "scripts\\execution\\execute_ssot_integration.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "scripts\\utilities\\find_large_files.py": {
        "language": ".py",
        "functions": [
            "find_large_python_files"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "scripts\\execution\\run_admin_commander.py": {
        "language": ".py",
        "functions": [
            "load_env_file"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "scripts\\execution\\run_discord_bot.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "scripts\\utilities\\setup_discord_bot.py": {
        "language": ".py",
        "functions": [
            "install_package",
            "check_package",
            "setup_environment",
            "create_env_template"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "agent_devlog_watcher.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\coordinate_agent_registry.py": {
        "language": ".py",
        "functions": [
            "_load_coordinates"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\frontend\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\vector_database\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\messaging_agent_registry.py": {
        "language": ".py",
        "functions": [
            "format_agent_list",
            "list_agents",
            "get_agent_info"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\services\\contract_system\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\coordination\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\handlers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\messaging_status\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\quality\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\utils\\agent_utils_registry.py": {
        "language": ".py",
        "functions": [
            "list_agents"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\services\\protocol\\routers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\protocol\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\vector_messaging\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\analytics\\coordinators\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\analytics\\engines\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\workspace_agent_registry.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "list_agents",
            "_status_path",
            "_onboard_path",
            "reset_statuses",
            "clear_onboarding_flags",
            "force_onboard",
            "verify_onboarded",
            "synchronize",
            "save_last_onboarding_message",
            "get_onboarding_coords"
        ],
        "classes": {
            "AgentRegistry": {
                "methods": [
                    "__init__",
                    "list_agents",
                    "_status_path",
                    "_onboard_path",
                    "reset_statuses",
                    "clear_onboarding_flags",
                    "force_onboard",
                    "verify_onboarded",
                    "synchronize",
                    "save_last_onboarding_message",
                    "get_onboarding_coords"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\core\\analytics\\intelligence\\pattern_analysis\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\analytics\\processors\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\base\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\analytics\\processors\\prediction\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\baseline\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\common\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\analytics\\models\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\consolidation\\utility_consolidation\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\analytics\\intelligence\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\analytics\\orchestrators\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\constants\\fsm\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\constants\\fsm.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\coordination\\swarm\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\coordination\\swarm\\engines\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\coordination\\swarm\\orchestrators\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\data_optimization\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\decision\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\data_processing\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\coordination\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\deployment\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\deployment\\engines\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\deployment\\models\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\dry_eliminator\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\deployment\\coordinators\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\emergency_intervention\\unified_emergency\\engines\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\dry_eliminator\\engines\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\dry_eliminator\\orchestrators\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\emergency_intervention\\unified_emergency\\handlers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\emergency_intervention\\unified_emergency\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\emergency_intervention\\unified_emergency\\orchestrators\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\enhanced_integration\\engines\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\enhanced_integration\\coordinators\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\enhanced_integration\\orchestrators\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\error_handling\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\error_handling\\circuit_breaker\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\error_handling\\metrics\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\file_locking\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\file_locking\\operations\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\health\\monitoring\\core.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\fsm\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\handoff\\defaults.py": {
        "language": ".py",
        "functions": [
            "get_default_procedures"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\core\\integration\\models\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\integration\\analytics\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\import_system\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\integration_coordinators\\unified_integration\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\integration_coordinators\\unified_integration\\coordinators\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\integration_coordinators\\unified_integration\\models\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\integration_coordinators\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\integration_coordinators\\unified_integration\\monitors\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\integration_utilities\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\intelligent_context\\engines\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\intelligent_context\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\intelligent_context\\optimizers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\interfaces\\unified_interface\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\intelligent_context\\core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\intelligent_context\\unified_intelligent_context\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\ml_optimizer\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\ml_optimizer\\engines\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\ml_optimizer\\learning\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\ml_optimizer\\learning\\unified_ml_learning\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\models\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\pattern_analysis\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\pattern_analysis\\unified_pattern_analysis\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\performance\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\performance\\unified_dashboard\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\performance\\metrics\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\refactoring\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\refactoring\\tools\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\ssot\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\ssot\\unified_ssot\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\ssot\\unified_ssot\\validators\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\ssot\\unified_ssot\\execution\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\utility_system\\managers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\validation\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\validation\\performance_benchmark\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\vector_strategic_oversight\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\application\\use_cases\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\workflow\\definitions\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\architecture\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\automation\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\config\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\discord_commander\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\analyzers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\gaming\\handlers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\factories\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\gaming\\models\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\gaming\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\infrastructure\\logging\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\infrastructure\\persistence\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\infrastructure\\time\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\infrastructure\\browser\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\quality\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\trading_robot\\core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\trading_robot\\repositories\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\templates\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\trading_robot\\repositories\\implementations\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\trading_robot\\repositories\\interfaces\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\reporting\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\trading_robot\\services\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\trading_robot\\services\\analytics\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\trading_robot\\strategies\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\utils\\config_core\\__init__.py": {
        "language": ".py",
        "functions": [
            "get_config"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\trading_robot\\repositories\\models\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_workspaces\\Agent-7\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_workspaces\\Agent-1\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "examples\\quickstart_demo\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "scripts\\execution\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "scripts\\utilities\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\gaming\\gaming_integration_core.py": {
        "language": ".py",
        "functions": [
            "create_gaming_integration_core",
            "create_session",
            "get_session",
            "end_session",
            "get_active_sessions",
            "register_system",
            "get_system",
            "get_all_systems",
            "handle_event",
            "__init__",
            "to_dict",
            "__init__",
            "to_dict",
            "__init__",
            "create_session",
            "get_session",
            "end_session",
            "get_active_sessions",
            "__init__",
            "register_system",
            "get_system",
            "get_all_systems",
            "__init__",
            "handle_event",
            "_handle_create_session",
            "_handle_end_session",
            "_handle_get_session",
            "__init__",
            "_initialize_integration",
            "_setup_default_handlers",
            "_connect_to_systems",
            "create_game_session",
            "get_game_session",
            "end_game_session",
            "get_active_sessions",
            "register_entertainment_system",
            "get_entertainment_system",
            "get_all_entertainment_systems",
            "register_event_handler",
            "handle_event",
            "get_status",
            "is_connected",
            "get_core_health"
        ],
        "classes": {
            "IGameSessionManager": {
                "methods": [
                    "create_session",
                    "get_session",
                    "end_session",
                    "get_active_sessions"
                ],
                "docstring": "Interface for game session management (ISP: Segregated interface).",
                "base_classes": [
                    "Protocol"
                ]
            },
            "IEntertainmentSystemManager": {
                "methods": [
                    "register_system",
                    "get_system",
                    "get_all_systems"
                ],
                "docstring": "Interface for entertainment system management (ISP: Segregated interface).",
                "base_classes": [
                    "Protocol"
                ]
            },
            "IIntegrationHandler": {
                "methods": [
                    "handle_event"
                ],
                "docstring": "Interface for integration event handlers (ISP: Segregated interface).",
                "base_classes": [
                    "Protocol"
                ]
            },
            "IntegrationStatus": {
                "methods": [],
                "docstring": "Integration status states.",
                "base_classes": [
                    "Enum"
                ]
            },
            "GameType": {
                "methods": [],
                "docstring": "Game types.",
                "base_classes": [
                    "Enum"
                ]
            },
            "GameSession": {
                "methods": [
                    "__init__",
                    "to_dict"
                ],
                "docstring": "Simplified game session - Single Responsibility: Data container.",
                "base_classes": []
            },
            "EntertainmentSystem": {
                "methods": [
                    "__init__",
                    "to_dict"
                ],
                "docstring": "Simplified entertainment system - Single Responsibility: Data container.",
                "base_classes": []
            },
            "GameSessionManager": {
                "methods": [
                    "__init__",
                    "create_session",
                    "get_session",
                    "end_session",
                    "get_active_sessions"
                ],
                "docstring": "Game session manager - Single Responsibility: Session management.",
                "base_classes": []
            },
            "EntertainmentSystemManager": {
                "methods": [
                    "__init__",
                    "register_system",
                    "get_system",
                    "get_all_systems"
                ],
                "docstring": "Entertainment system manager - Single Responsibility: System management.",
                "base_classes": []
            },
            "IntegrationEventHandler": {
                "methods": [
                    "__init__",
                    "handle_event",
                    "_handle_create_session",
                    "_handle_end_session",
                    "_handle_get_session"
                ],
                "docstring": "Integration event handler - Single Responsibility: Event processing.",
                "base_classes": []
            },
            "GamingIntegrationCore": {
                "methods": [
                    "__init__",
                    "_initialize_integration",
                    "_setup_default_handlers",
                    "_connect_to_systems",
                    "create_game_session",
                    "get_game_session",
                    "end_game_session",
                    "get_active_sessions",
                    "register_entertainment_system",
                    "get_entertainment_system",
                    "get_all_entertainment_systems",
                    "register_event_handler",
                    "handle_event",
                    "get_status",
                    "is_connected",
                    "get_core_health"
                ],
                "docstring": "Gaming integration core - SOLID Compliant: Uses composition and interfaces.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 85
    },
    "src\\utils\\config_scanners.py": {
        "language": ".py",
        "functions": [
            "is_likely_config_value",
            "is_config_constant",
            "create_default_scanners",
            "scan_file",
            "scan_file",
            "scan_file",
            "scan_file",
            "scan_file"
        ],
        "classes": {
            "ConfigurationScanner": {
                "methods": [
                    "scan_file"
                ],
                "docstring": "Abstract base class for configuration scanners.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "EnvironmentVariableScanner": {
                "methods": [
                    "scan_file"
                ],
                "docstring": "Scans for environment variable usage patterns.",
                "base_classes": [
                    "ConfigurationScanner"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "HardcodedValueScanner": {
                "methods": [
                    "scan_file"
                ],
                "docstring": "Scans for hardcoded configuration values.",
                "base_classes": [
                    "ConfigurationScanner"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ConfigConstantScanner": {
                "methods": [
                    "scan_file"
                ],
                "docstring": "Scans for configuration constant definitions.",
                "base_classes": [
                    "ConfigurationScanner"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SettingsPatternScanner": {
                "methods": [
                    "scan_file"
                ],
                "docstring": "Scans for settings-related patterns.",
                "base_classes": [
                    "ConfigurationScanner"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 13
    },
    "src\\core\\env_loader.py": {
        "language": ".py",
        "functions": [
            "load_environment_config",
            "get_env_summary",
            "__init__",
            "load_env_file",
            "get_env_var",
            "validate_critical_settings",
            "load_unified_config_from_env",
            "get_environment_summary"
        ],
        "classes": {
            "EnvironmentLoader": {
                "methods": [
                    "__init__",
                    "load_env_file",
                    "get_env_var",
                    "validate_critical_settings",
                    "load_unified_config_from_env",
                    "get_environment_summary"
                ],
                "docstring": "Loads and validates environment variables for unified configuration.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\utils\\pattern_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_patterns",
            "analyze_patterns",
            "get_statistics",
            "get_patterns_by_file",
            "get_unique_keys",
            "generate_report"
        ],
        "classes": {
            "PatternAnalyzer": {
                "methods": [
                    "__init__",
                    "add_patterns",
                    "analyze_patterns",
                    "get_statistics",
                    "get_patterns_by_file",
                    "get_unique_keys",
                    "generate_report"
                ],
                "docstring": "Analyzes configuration patterns and provides insights.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\utils\\file_scanner.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_skip_patterns",
            "should_skip_file",
            "scan_file",
            "scan_directory"
        ],
        "classes": {
            "FileScanner": {
                "methods": [
                    "__init__",
                    "_get_skip_patterns",
                    "should_skip_file",
                    "scan_file",
                    "scan_directory"
                ],
                "docstring": "Handles file scanning operations for configuration patterns.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "swarm_workspace_broadcast.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "respond_to_agent6.py": {
        "language": ".py",
        "functions": [
            "deliver_response_to_agent6"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "assignment_confirmation.py": {
        "language": ".py",
        "functions": [
            "load_coordinates",
            "send_assignment_confirmation"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "implementation_leadership_confirmation.py": {
        "language": ".py",
        "functions": [
            "load_coordinates",
            "send_leadership_confirmation_response"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "thea_undetected_helper.py": {
        "language": ".py",
        "functions": [
            "create_undetected_driver",
            "create_standard_driver",
            "check_undetected_available",
            "get_installation_instructions"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "simple_agent_onboarding.py": {
        "language": ".py",
        "functions": [
            "get_agent_specialties",
            "load_agent_coordinates",
            "send_pyautogui_message",
            "get_agent_onboarding_message",
            "onboard_single_agent",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "cycle_1_dependency_progress.py": {
        "language": ".py",
        "functions": [
            "load_coordinates",
            "load_dependency_summary",
            "send_dependency_progress_update"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "cleanup_obsolete_files.py": {
        "language": ".py",
        "functions": [
            "cleanup",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "consolidate_messaging.py": {
        "language": ".py",
        "functions": [
            "consolidate_messaging",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "agent1_coordination.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "analyze_messaging_files.py": {
        "language": ".py",
        "functions": [
            "analyze_python_file",
            "analyze_js_file",
            "analyze_md_file",
            "analyze_yaml_file",
            "analyze_file",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "agent1_response.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "analyze_src_directories.py": {
        "language": ".py",
        "functions": [
            "analyze_python_file",
            "analyze_js_file",
            "analyze_md_file",
            "analyze_yaml_file",
            "analyze_file",
            "get_directory_structure",
            "analyze_directories",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 8
    },
    "cleanup_stub_files.py": {
        "language": ".py",
        "functions": [
            "count_lines",
            "is_empty_or_stub",
            "create_archive_structure",
            "archive_file",
            "cleanup_empty_directories",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "cycle_1_backup_partial.py": {
        "language": ".py",
        "functions": [
            "copy_file_safely",
            "copy_tree_safely",
            "create_partial_backup"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "fix_src_imports.py": {
        "language": ".py",
        "functions": [
            "fix_src_imports"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "onboard_survey_agents.py": {
        "language": ".py",
        "functions": [
            "onboard_survey_agent",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "response_detector.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "wait_until_complete",
            "extract_response_text",
            "_wait_for_first_tokens",
            "_probe",
            "_click_continue"
        ],
        "classes": {
            "ResponseWaitResult": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "Enum"
                ]
            },
            "TurnInfo": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "ResponseDetector": {
                "methods": [
                    "__init__",
                    "wait_until_complete",
                    "extract_response_text",
                    "_wait_for_first_tokens",
                    "_probe",
                    "_click_continue"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "validate_consolidation.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "validate_file_count",
            "validate_core_directories",
            "validate_imports",
            "validate_functionality",
            "check_for_over_engineering_patterns",
            "generate_report",
            "run_validation"
        ],
        "classes": {
            "ConsolidationValidator": {
                "methods": [
                    "__init__",
                    "validate_file_count",
                    "validate_core_directories",
                    "validate_imports",
                    "validate_functionality",
                    "check_for_over_engineering_patterns",
                    "generate_report",
                    "run_validation"
                ],
                "docstring": "Validates consolidation results.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "setup_thea_cookies.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "initialize_driver",
            "wait_for_manual_login",
            "_debug_page_state",
            "save_cookies_after_login",
            "verify_setup",
            "run_setup",
            "cleanup"
        ],
        "classes": {
            "TheaCookieSetup": {
                "methods": [
                    "__init__",
                    "initialize_driver",
                    "wait_for_manual_login",
                    "_debug_page_state",
                    "save_cookies_after_login",
                    "verify_setup",
                    "run_setup",
                    "cleanup"
                ],
                "docstring": "Interactive setup for Thea authentication cookies.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "simple_thea_communication.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "initialize_driver",
            "ensure_login",
            "send_message",
            "wait_for_response",
            "save_response",
            "communicate",
            "cleanup"
        ],
        "classes": {
            "SimpleTheaCommunication": {
                "methods": [
                    "__init__",
                    "initialize_driver",
                    "ensure_login",
                    "send_message",
                    "wait_for_response",
                    "save_response",
                    "communicate",
                    "cleanup"
                ],
                "docstring": "Simple send/receive communication with Thea.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "pyautogui_training_broadcast.py": {
        "language": ".py",
        "functions": [
            "send_pyautogui_training"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "thea_login_handler.py": {
        "language": ".py",
        "functions": [
            "create_thea_login_handler",
            "check_thea_login_status",
            "__init__",
            "save_cookies",
            "load_cookies",
            "has_valid_cookies",
            "clear_cookies",
            "__init__",
            "ensure_login",
            "_is_logged_in",
            "_automated_login",
            "_manual_login",
            "_is_on_thea_page",
            "_navigate_to_thea",
            "force_logout"
        ],
        "classes": {
            "TheaCookieManager": {
                "methods": [
                    "__init__",
                    "save_cookies",
                    "load_cookies",
                    "has_valid_cookies",
                    "clear_cookies"
                ],
                "docstring": "Manages cookie persistence for Thea sessions.",
                "base_classes": []
            },
            "TheaLoginHandler": {
                "methods": [
                    "__init__",
                    "ensure_login",
                    "_is_logged_in",
                    "_automated_login",
                    "_manual_login",
                    "_is_on_thea_page",
                    "_navigate_to_thea",
                    "force_logout"
                ],
                "docstring": "Handles Thea/ChatGPT login with automated detection and cookie persistence.\n\nAdapted from DreamVault's authentication system for Thea communication.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "thea_automation.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "communicate",
            "_ensure_ready",
            "_send_and_process",
            "_initialize_managers",
            "cleanup",
            "__enter__",
            "__exit__"
        ],
        "classes": {
            "TheaConfig": {
                "methods": [],
                "docstring": "Configuration for Thea automation.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TheaAutomation": {
                "methods": [
                    "__init__",
                    "communicate",
                    "_ensure_ready",
                    "_send_and_process",
                    "_initialize_managers",
                    "cleanup",
                    "__enter__",
                    "__exit__"
                ],
                "docstring": "Unified Thea automation facade.\n\nCoordinates cookie management, browser control, and messaging.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 17
    },
    "scan_technical_debt.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "scan",
            "_get_files_to_scan",
            "_scan_file",
            "generate_report",
            "generate_summary"
        ],
        "classes": {
            "TechnicalDebtScanner": {
                "methods": [
                    "__init__",
                    "scan",
                    "_get_files_to_scan",
                    "_scan_file",
                    "generate_report",
                    "generate_summary"
                ],
                "docstring": "Scans codebase for technical debt markers.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 13
    },
    "agent_workspaces\\database_specialist\\automated_migration_scripts.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "comprehensive_project_analyzer.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "generate_chunk_reports"
        ],
        "classes": {
            "ProjectAnalyzer": {
                "methods": [
                    "__init__",
                    "generate_chunk_reports"
                ],
                "docstring": "Comprehensive project analyzer - thin facade to modular components.\n\nOrchestrates file analysis, project structure discovery, and\nconsolidation report generation.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 5
    },
    "agent_workspaces\\database_specialist\\scalability_strategies.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "design_scaling_strategies",
            "implement_partitioning_strategies"
        ],
        "classes": {
            "ScalabilityStrategies": {
                "methods": [
                    "__init__",
                    "design_scaling_strategies",
                    "implement_partitioning_strategies"
                ],
                "docstring": "Scaling strategies and partitioning functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "agent_workspaces\\database_specialist\\migration_executor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute_all_migrations",
            "_generate_execution_summary",
            "validate_migration_results"
        ],
        "classes": {
            "MigrationExecutor": {
                "methods": [
                    "__init__",
                    "execute_all_migrations",
                    "_generate_execution_summary",
                    "validate_migration_results"
                ],
                "docstring": "Migration execution and validation functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "agent_workspaces\\database_specialist\\caching_strategy_system.py": {
        "language": ".py",
        "functions": [
            "load_config",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "agent_workspaces\\database_specialist\\migration_core.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_database_connection",
            "close_database_connection",
            "create_backup",
            "validate_database_integrity",
            "execute_migration_script",
            "get_migration_results"
        ],
        "classes": {
            "MigrationCore": {
                "methods": [
                    "__init__",
                    "create_database_connection",
                    "close_database_connection",
                    "create_backup",
                    "validate_database_integrity",
                    "execute_migration_script",
                    "get_migration_results"
                ],
                "docstring": "Core migration functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "agent_workspaces\\database_specialist\\migration_scripts.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_define_migration_scripts",
            "get_migration_script",
            "get_all_migration_scripts",
            "create_performance_indexes_script",
            "create_useful_views_script",
            "get_migration_script_names"
        ],
        "classes": {
            "MigrationScripts": {
                "methods": [
                    "__init__",
                    "_define_migration_scripts",
                    "get_migration_script",
                    "get_all_migration_scripts",
                    "create_performance_indexes_script",
                    "create_useful_views_script",
                    "get_migration_script_names"
                ],
                "docstring": "Migration script definitions and execution functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "agent_workspaces\\database_specialist\\v2_compliance_improvement_plan.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_identify_compliance_issues",
            "_create_improvement_strategy",
            "generate_improvement_report"
        ],
        "classes": {
            "V2ComplianceImprovementPlan": {
                "methods": [
                    "__init__",
                    "_identify_compliance_issues",
                    "_create_improvement_strategy",
                    "generate_improvement_report"
                ],
                "docstring": "Main class for V2 compliance improvement planning.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 9
    },
    "agent_workspaces\\database_specialist\\caching\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_workspaces\\database_specialist\\scalability_core.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_current_capacity",
            "identify_scalability_bottlenecks",
            "_simulate_database_size",
            "generate_scalability_summary"
        ],
        "classes": {
            "ScalingType": {
                "methods": [],
                "docstring": "Scaling type definitions.",
                "base_classes": [
                    "Enum"
                ]
            },
            "PartitionStrategy": {
                "methods": [],
                "docstring": "Partition strategy types.",
                "base_classes": [
                    "Enum"
                ]
            },
            "ScalabilityMetrics": {
                "methods": [],
                "docstring": "Scalability metrics data structure.",
                "base_classes": []
            },
            "ScalabilityCore": {
                "methods": [
                    "__init__",
                    "analyze_current_capacity",
                    "identify_scalability_bottlenecks",
                    "_simulate_database_size",
                    "generate_scalability_summary"
                ],
                "docstring": "Core scalability analysis functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "agent_workspaces\\database_specialist\\query_optimization_system.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "run_comprehensive_optimization",
            "_analyze_existing_queries",
            "_analyze_index_usage",
            "_identify_slow_queries",
            "_generate_optimization_recommendations",
            "_apply_optimizations",
            "_validate_performance_improvements",
            "_generate_optimization_summary"
        ],
        "classes": {
            "QueryOptimizationSystem": {
                "methods": [
                    "__init__",
                    "run_comprehensive_optimization",
                    "_analyze_existing_queries",
                    "_analyze_index_usage",
                    "_identify_slow_queries",
                    "_generate_optimization_recommendations",
                    "_apply_optimizations",
                    "_validate_performance_improvements",
                    "_generate_optimization_summary"
                ],
                "docstring": "Main class for query optimization and performance tuning.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 19
    },
    "agent_workspaces\\database_specialist\\caching\\core\\caching_system.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_default_config",
            "_check_redis_availability",
            "implement_comprehensive_caching",
            "_initialize_cache_systems",
            "_validate_caching_effectiveness",
            "get_from_cache",
            "set_in_cache",
            "_evict_entries"
        ],
        "classes": {
            "CachingStrategySystem": {
                "methods": [
                    "__init__",
                    "_get_default_config",
                    "_check_redis_availability",
                    "implement_comprehensive_caching",
                    "_initialize_cache_systems",
                    "_validate_caching_effectiveness",
                    "get_from_cache",
                    "set_in_cache",
                    "_evict_entries"
                ],
                "docstring": "Main class for comprehensive caching strategy implementation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "agent_workspaces\\database_specialist\\caching\\models\\cache_models.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "CacheStrategy": {
                "methods": [],
                "docstring": "Cache strategy types.",
                "base_classes": [
                    "Enum"
                ]
            },
            "CacheEntry": {
                "methods": [],
                "docstring": "Cache entry data structure.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "agent_workspaces\\database_specialist\\caching\\strategies\\cache_strategies.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "implement_cache_patterns",
            "_implement_write_through",
            "_implement_write_back",
            "_implement_cache_aside",
            "_implement_read_through",
            "_implement_refresh_ahead",
            "setup_cache_invalidation",
            "_setup_time_based_invalidation",
            "_setup_event_based_invalidation",
            "_setup_dependency_based_invalidation",
            "_setup_manual_invalidation"
        ],
        "classes": {
            "CacheStrategyManager": {
                "methods": [
                    "__init__",
                    "implement_cache_patterns",
                    "_implement_write_through",
                    "_implement_write_back",
                    "_implement_cache_aside",
                    "_implement_read_through",
                    "_implement_refresh_ahead",
                    "setup_cache_invalidation",
                    "_setup_time_based_invalidation",
                    "_setup_event_based_invalidation",
                    "_setup_dependency_based_invalidation",
                    "_setup_manual_invalidation"
                ],
                "docstring": "Manages different cache strategies and patterns.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "agent_workspaces\\Agent-3\\quality_first_communication_protocol.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_initialize_checkpoints",
            "validate_message_quality",
            "_detect_repetitive_content",
            "_validate_message_format",
            "enforce_quality_gates",
            "generate_quality_report"
        ],
        "classes": {
            "QualityCheckpoint": {
                "methods": [],
                "docstring": "Simple data class for quality validation checkpoints",
                "base_classes": []
            },
            "QualityFirstProtocol": {
                "methods": [
                    "__init__",
                    "_initialize_checkpoints",
                    "validate_message_quality",
                    "_detect_repetitive_content",
                    "_validate_message_format",
                    "enforce_quality_gates",
                    "generate_quality_report"
                ],
                "docstring": "Quality-First Communication Protocol implementation\n\nEnforces mandatory quality validation checkpoints in agent communication\nprotocols with automated compliance verification.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "tools\\duplication_analyzer.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "scan_codebase",
            "analyze_duplicates",
            "generate_report"
        ],
        "classes": {
            "DuplicationAnalyzer": {
                "methods": [
                    "__init__",
                    "scan_codebase",
                    "analyze_duplicates",
                    "generate_report"
                ],
                "docstring": "Main orchestrator for duplication analysis.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 9
    },
    "tools\\functionality_verification.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "generate_functionality_signature",
            "save_baseline",
            "load_baseline",
            "compare_with_baseline",
            "run_agent_specific_verification",
            "generate_verification_report"
        ],
        "classes": {
            "FunctionalityVerifier": {
                "methods": [
                    "__init__",
                    "generate_functionality_signature",
                    "save_baseline",
                    "load_baseline",
                    "compare_with_baseline",
                    "run_agent_specific_verification",
                    "generate_verification_report"
                ],
                "docstring": "Comprehensive functionality verification system.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 15
    },
    "tools\\cleanup_documentation.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "run",
            "scan_documentation_files",
            "apply_criteria",
            "_is_agent_chatter",
            "apply_preserve_allowlist",
            "scan_references",
            "_glob_files",
            "_is_referenced",
            "apply_deduplication",
            "_normalize_topic",
            "_select_preferred_file",
            "generate_report",
            "execute_archive",
            "_flatten_candidates",
            "_write_list"
        ],
        "classes": {
            "DocumentationCleanup": {
                "methods": [
                    "__init__",
                    "run",
                    "scan_documentation_files",
                    "apply_criteria",
                    "_is_agent_chatter",
                    "apply_preserve_allowlist",
                    "scan_references",
                    "_glob_files",
                    "_is_referenced",
                    "apply_deduplication",
                    "_normalize_topic",
                    "_select_preferred_file",
                    "generate_report",
                    "execute_archive",
                    "_flatten_candidates",
                    "_write_list"
                ],
                "docstring": "Archive-first documentation cleanup with safety guards.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 33
    },
    "tools\\analyze_init_files.py": {
        "language": ".py",
        "functions": [
            "analyze_init_files",
            "print_analysis",
            "generate_consolidation_plan",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "tools\\consolidation_runner.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "analyze_structure",
            "create_plan",
            "execute_plan",
            "list_plans",
            "_create_backup",
            "_consolidate_files"
        ],
        "classes": {
            "ConsolidationPlan": {
                "methods": [],
                "docstring": "Plan for consolidation operations.",
                "base_classes": []
            },
            "ConsolidationRunner": {
                "methods": [
                    "__init__",
                    "analyze_structure",
                    "create_plan",
                    "execute_plan",
                    "list_plans",
                    "_create_backup",
                    "_consolidate_files"
                ],
                "docstring": "Unified consolidation runner.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "tools\\v2_compliance_checker.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "scan_file",
            "_check_ast_compliance",
            "_get_node_line_count",
            "scan_directory",
            "_should_skip_file",
            "format_report"
        ],
        "classes": {
            "V2ComplianceChecker": {
                "methods": [
                    "__init__",
                    "scan_file",
                    "_check_ast_compliance",
                    "_get_node_line_count",
                    "scan_directory",
                    "_should_skip_file",
                    "format_report"
                ],
                "docstring": "Automated V2 compliance checker.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "tools\\refactoring_suggestion_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "suggest_refactoring",
            "_group_entities_by_category",
            "_generate_module_suggestions",
            "_estimate_main_file_size",
            "_generate_import_changes",
            "_calculate_confidence",
            "_generate_reasoning",
            "__init__",
            "analyze_and_suggest",
            "analyze_directory",
            "_should_skip_file"
        ],
        "classes": {
            "RefactoringSuggestionEngine": {
                "methods": [
                    "__init__",
                    "suggest_refactoring",
                    "_group_entities_by_category",
                    "_generate_module_suggestions",
                    "_estimate_main_file_size",
                    "_generate_import_changes",
                    "_calculate_confidence",
                    "_generate_reasoning"
                ],
                "docstring": "Generates intelligent refactoring suggestions.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RefactoringSuggestionService": {
                "methods": [
                    "__init__",
                    "analyze_and_suggest",
                    "analyze_directory",
                    "_should_skip_file"
                ],
                "docstring": "Main service for refactoring suggestions.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 24
    },
    "mcp_servers\\messaging_server.py": {
        "language": ".py",
        "functions": [
            "send_agent_message",
            "broadcast_message",
            "get_agent_coordinates",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "scripts\\setup_enhanced_discord.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "run_setup",
            "check_prerequisites",
            "create_configuration",
            "setup_coordination",
            "create_helper_scripts",
            "show_final_instructions"
        ],
        "classes": {
            "EnhancedDiscordSetup": {
                "methods": [
                    "__init__",
                    "run_setup",
                    "check_prerequisites",
                    "create_configuration",
                    "setup_coordination",
                    "create_helper_scripts",
                    "show_final_instructions"
                ],
                "docstring": "Setup class for enhanced Discord integration.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "trading_robot\\main.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "signal_handler"
        ],
        "classes": {
            "TradingRobot": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Main Trading Robot Application",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 3
    },
    "trading_robot\\core\\alpaca_client.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "connect",
            "is_connected",
            "get_account_info",
            "get_positions",
            "get_orders",
            "get_historical_data",
            "submit_market_order",
            "submit_limit_order",
            "cancel_order",
            "get_market_clock"
        ],
        "classes": {
            "AlpacaClient": {
                "methods": [
                    "__init__",
                    "connect",
                    "is_connected",
                    "get_account_info",
                    "get_positions",
                    "get_orders",
                    "get_historical_data",
                    "submit_market_order",
                    "submit_limit_order",
                    "cancel_order",
                    "get_market_clock"
                ],
                "docstring": "Wrapper for Alpaca API interactions",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "trading_robot\\config\\settings.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "TradingConfig": {
                "methods": [],
                "docstring": "Trading Robot Configuration",
                "base_classes": [
                    "BaseSettings"
                ]
            },
            "Config": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "trading_robot\\execution\\live_executor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_symbol",
            "remove_symbol",
            "get_trading_symbols",
            "get_executor_status"
        ],
        "classes": {
            "LiveExecutor": {
                "methods": [
                    "__init__",
                    "add_symbol",
                    "remove_symbol",
                    "get_trading_symbols",
                    "get_executor_status"
                ],
                "docstring": "Live trading execution engine",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "trading_robot\\core\\risk_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "validate_trade",
            "calculate_position_size",
            "_calculate_max_position_size",
            "update_portfolio_value",
            "_check_emergency_stop",
            "_trigger_emergency_stop",
            "record_trade",
            "get_portfolio_risk_metrics",
            "check_market_hours",
            "calculate_stop_loss_price",
            "calculate_take_profit_price",
            "reset_daily_counters",
            "get_risk_report",
            "__init__",
            "start_monitoring",
            "stop_monitoring",
            "check_risk_limits",
            "log_alerts"
        ],
        "classes": {
            "RiskManager": {
                "methods": [
                    "__init__",
                    "validate_trade",
                    "calculate_position_size",
                    "_calculate_max_position_size",
                    "update_portfolio_value",
                    "_check_emergency_stop",
                    "_trigger_emergency_stop",
                    "record_trade",
                    "get_portfolio_risk_metrics",
                    "check_market_hours",
                    "calculate_stop_loss_price",
                    "calculate_take_profit_price",
                    "reset_daily_counters",
                    "get_risk_report"
                ],
                "docstring": "Comprehensive risk management system",
                "base_classes": []
            },
            "RiskMonitor": {
                "methods": [
                    "__init__",
                    "start_monitoring",
                    "stop_monitoring",
                    "check_risk_limits",
                    "log_alerts"
                ],
                "docstring": "Real-time risk monitoring system",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 38
    },
    "trading_robot\\core\\trading_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "is_market_open",
            "can_trade_symbol"
        ],
        "classes": {
            "TradingEngine": {
                "methods": [
                    "__init__",
                    "is_market_open",
                    "can_trade_symbol"
                ],
                "docstring": "Core trading engine managing Alpaca API interactions",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "trading_robot\\strategies\\base_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze",
            "calculate_position_size",
            "validate_data",
            "get_indicator_value",
            "__init__",
            "add_strategy",
            "remove_strategy",
            "get_strategies",
            "analyze_symbol",
            "get_consensus_signal"
        ],
        "classes": {
            "BaseStrategy": {
                "methods": [
                    "__init__",
                    "analyze",
                    "calculate_position_size",
                    "validate_data",
                    "get_indicator_value"
                ],
                "docstring": "Abstract base class for trading strategies.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "SignalAgent"
            },
            "StrategyManager": {
                "methods": [
                    "__init__",
                    "add_strategy",
                    "remove_strategy",
                    "get_strategies",
                    "analyze_symbol",
                    "get_consensus_signal"
                ],
                "docstring": "Manages multiple trading strategies.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 22
    },
    "trading_robot\\strategies\\indicators.py": {
        "language": ".py",
        "functions": [
            "sma",
            "ema",
            "rsi",
            "macd",
            "bollinger_bands",
            "stochastic_oscillator",
            "atr",
            "williams_r",
            "cci",
            "momentum",
            "roc",
            "obv",
            "ad",
            "vwap",
            "fibonacci_retracements",
            "pivot_points",
            "detect_trend",
            "volatility",
            "sharpe_ratio"
        ],
        "classes": {
            "TechnicalIndicators": {
                "methods": [
                    "sma",
                    "ema",
                    "rsi",
                    "macd",
                    "bollinger_bands",
                    "stochastic_oscillator",
                    "atr",
                    "williams_r",
                    "cci",
                    "momentum",
                    "roc",
                    "obv",
                    "ad",
                    "vwap",
                    "fibonacci_retracements",
                    "pivot_points",
                    "detect_trend",
                    "volatility",
                    "sharpe_ratio"
                ],
                "docstring": "Technical analysis indicators for trading strategies",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 38
    },
    "trading_robot\\web\\dashboard.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "TradingDashboard": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Web dashboard for trading robot monitoring.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\core\\config_core.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\messaging_core.py": {
        "language": ".py",
        "functions": [
            "get_messaging_core",
            "send_message",
            "send_message_object",
            "broadcast_message",
            "generate_onboarding_message",
            "show_message_history",
            "list_agents",
            "get_messaging_logger",
            "validate_messaging_system",
            "initialize_messaging_system",
            "__init__",
            "_initialize_subsystems",
            "send_message",
            "send_message_object",
            "send_message_to_inbox",
            "show_message_history",
            "generate_onboarding_message",
            "broadcast_message",
            "list_agents"
        ],
        "classes": {
            "UnifiedMessagingCore": {
                "methods": [
                    "__init__",
                    "_initialize_subsystems",
                    "send_message",
                    "send_message_object",
                    "send_message_to_inbox",
                    "show_message_history",
                    "generate_onboarding_message",
                    "broadcast_message",
                    "list_agents"
                ],
                "docstring": "SINGLE SOURCE OF TRUTH for all messaging functionality.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 28
    },
    "src\\core\\shared_utilities.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\unified_logging_system.py": {
        "language": ".py",
        "functions": [
            "get_logger",
            "configure_logging",
            "get_logging_system",
            "__init__",
            "configure",
            "_get_handlers",
            "get_logger"
        ],
        "classes": {
            "UnifiedLoggingSystem": {
                "methods": [
                    "__init__",
                    "configure",
                    "_get_handlers",
                    "get_logger"
                ],
                "docstring": "Unified logging system for the project.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 11
    },
    "src\\core\\vector_integration_analytics.py": {
        "language": ".py",
        "functions": [
            "create_vector_integration_analytics",
            "__init__",
            "track_integration",
            "get_integration_stats",
            "analyze_performance_trends",
            "generate_report"
        ],
        "classes": {
            "VectorIntegrationAnalytics": {
                "methods": [
                    "__init__",
                    "track_integration",
                    "get_integration_stats",
                    "analyze_performance_trends",
                    "generate_report"
                ],
                "docstring": "Analytics for vector database integrations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 11
    },
    "src\\core\\config_validation.py": {
        "language": ".py",
        "functions": [
            "validate_unified_config",
            "_validate_timeouts",
            "_validate_agents",
            "_validate_browser",
            "_validate_thresholds",
            "_validate_file_patterns",
            "_validate_tests",
            "_validate_reports"
        ],
        "classes": {},
        "routes": [],
        "complexity": 8
    },
    "src\\core\\messaging_pyautogui.py": {
        "language": ".py",
        "functions": [
            "get_message_queue",
            "send_message_pyautogui",
            "send_message_to_onboarding_coords",
            "__init__",
            "start",
            "stop",
            "enqueue_message",
            "_process_queue",
            "__init__",
            "_load_validation_rules",
            "validate_coordinates",
            "send_message",
            "send_message_queued"
        ],
        "classes": {
            "MessageQueue": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "enqueue_message",
                    "_process_queue"
                ],
                "docstring": "Thread-safe message queue for ordered delivery.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "PyAutoGUIMessagingDelivery": {
                "methods": [
                    "__init__",
                    "_load_validation_rules",
                    "validate_coordinates",
                    "send_message",
                    "send_message_queued"
                ],
                "docstring": "Delivers messages via PyAutoGUI to agent chat coordinates.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 23
    },
    "src\\core\\analytics\\framework\\analytics_engine_core.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute"
        ],
        "classes": {
            "AnalyticsEngineCore": {
                "methods": [
                    "__init__",
                    "execute"
                ],
                "docstring": "Orchestrates the overall analytics workflow.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\core\\analytics\\framework\\metrics_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "compute",
            "_compute_dict_metrics",
            "_compute_list_metrics",
            "_compute_list_of_dicts_metrics",
            "_get_numeric_fields",
            "_compute_stats",
            "_analyze_key_types",
            "_add_to_history",
            "export",
            "_export_json",
            "_export_csv",
            "_flatten_dict",
            "get_history",
            "clear_history",
            "compute_kpis"
        ],
        "classes": {
            "MetricsEngine": {
                "methods": [
                    "__init__",
                    "compute",
                    "_compute_dict_metrics",
                    "_compute_list_metrics",
                    "_compute_list_of_dicts_metrics",
                    "_get_numeric_fields",
                    "_compute_stats",
                    "_analyze_key_types",
                    "_add_to_history",
                    "export",
                    "_export_json",
                    "_export_csv",
                    "_flatten_dict",
                    "get_history",
                    "clear_history",
                    "compute_kpis"
                ],
                "docstring": "Computes KPIs and exports metrics data.\n\nProvides statistical analysis, KPI calculation, and metrics export\nin multiple formats (JSON, CSV).",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 32
    },
    "src\\core\\analytics\\framework\\analytics_coordinator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "coordinate"
        ],
        "classes": {
            "AnalyticsCoordinator": {
                "methods": [
                    "__init__",
                    "coordinate"
                ],
                "docstring": "Coordinates data flow between analytics modules.\n\nManages integration and data routing between:\n- Processors\n- Intelligence engines\n- Metrics engines\n- Pattern analyzers",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\core\\analytics\\framework\\analytics_intelligence.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run_models",
            "detect_anomalies_zscore",
            "detect_outliers_iqr",
            "analyze_trends",
            "_calculate_moving_average",
            "_detect_trend_direction",
            "_calculate_volatility",
            "_analyze_dict_list",
            "classify_simple"
        ],
        "classes": {
            "AnalyticsIntelligence": {
                "methods": [
                    "__init__",
                    "run_models",
                    "detect_anomalies_zscore",
                    "detect_outliers_iqr",
                    "analyze_trends",
                    "_calculate_moving_average",
                    "_detect_trend_direction",
                    "_calculate_volatility",
                    "_analyze_dict_list",
                    "classify_simple"
                ],
                "docstring": "Handles ML tasks like classification and anomaly detection.\n\nProvides lightweight intelligence using statistical methods:\n- Z-score based anomaly detection\n- IQR (Interquartile Range) outlier detection\n- Moving average trend analysis\n- Basic clustering using distance metrics",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\core\\analytics\\framework\\caching_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "cache",
            "retrieve",
            "clear",
            "get_stats"
        ],
        "classes": {
            "CachingEngine": {
                "methods": [
                    "__init__",
                    "cache",
                    "retrieve",
                    "clear",
                    "get_stats"
                ],
                "docstring": "Caches intermediate analytics results for performance.\n\nProvides simple in-memory caching with:\n- TTL support\n- Size limits\n- Cache statistics",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\analytics\\framework\\realtime_analytics_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "stream",
            "process_point",
            "_calculate_window_stats",
            "_check_threshold_alert",
            "get_window_state",
            "get_alerts",
            "clear_alerts",
            "calculate_moving_metrics",
            "detect_spike"
        ],
        "classes": {
            "RealTimeAnalyticsEngine": {
                "methods": [
                    "__init__",
                    "stream",
                    "process_point",
                    "_calculate_window_stats",
                    "_check_threshold_alert",
                    "get_window_state",
                    "get_alerts",
                    "clear_alerts",
                    "calculate_moving_metrics",
                    "detect_spike"
                ],
                "docstring": "Handles real-time analytics and alert generation.\n\nProvides streaming analytics:\n- Sliding window aggregation\n- Real-time alerting\n- Threshold monitoring\n- Stream statistics",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\core\\analytics\\framework\\predictive_modeling_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "forecast",
            "_convert_to_numeric",
            "forecast_moving_average",
            "forecast_exponential_smoothing",
            "forecast_linear_trend",
            "detect_seasonality",
            "calculate_forecast_accuracy"
        ],
        "classes": {
            "PredictiveModelingEngine": {
                "methods": [
                    "__init__",
                    "forecast",
                    "_convert_to_numeric",
                    "forecast_moving_average",
                    "forecast_exponential_smoothing",
                    "forecast_linear_trend",
                    "detect_seasonality",
                    "calculate_forecast_accuracy"
                ],
                "docstring": "Implements time-series and forecasting models.\n\nCoordinates forecasting methods, ensemble calculations,\nand seasonal pattern detection without external dependencies.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\analytics\\framework\\analytics_processor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "process",
            "_process_list",
            "_process_dict",
            "normalize",
            "aggregate",
            "enrich"
        ],
        "classes": {
            "AnalyticsProcessor": {
                "methods": [
                    "__init__",
                    "process",
                    "_process_list",
                    "_process_dict",
                    "normalize",
                    "aggregate",
                    "enrich"
                ],
                "docstring": "Processes and enriches raw data for analytics.\n\nProvides data transformation capabilities:\n- Cleaning (null handling, deduplication)\n- Normalization (scaling, standardization)\n- Enrichment (derived features)\n- Format conversion",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "DataAgent"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\core\\consolidation\\base.py": {
        "language": ".py",
        "functions": [
            "consolidate_directories",
            "_consolidate_directory",
            "_get_consolidated_path",
            "_should_consolidate_file",
            "_consolidate_file"
        ],
        "classes": {
            "ConsolidationBase": {
                "methods": [
                    "consolidate_directories",
                    "_consolidate_directory",
                    "_get_consolidated_path",
                    "_should_consolidate_file",
                    "_consolidate_file"
                ],
                "docstring": "Reusable helpers for consolidation workflows.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\analytics\\framework\\pattern_analysis_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "detect",
            "analyze_frequency",
            "detect_sequences",
            "_detect_numeric_patterns",
            "_check_periodicity",
            "_analyze_dict_patterns",
            "_detect_key_patterns",
            "calculate_correlation",
            "_interpret_correlation"
        ],
        "classes": {
            "PatternAnalysisEngine": {
                "methods": [
                    "__init__",
                    "detect",
                    "analyze_frequency",
                    "detect_sequences",
                    "_detect_numeric_patterns",
                    "_check_periodicity",
                    "_analyze_dict_patterns",
                    "_detect_key_patterns",
                    "calculate_correlation",
                    "_interpret_correlation"
                ],
                "docstring": "Detects statistical patterns like trends and outliers.\n\nProvides pattern detection methods:\n- Frequency analysis\n- Correlation detection\n- Sequential pattern mining\n- Repeating pattern identification",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\core\\engines\\engine_state.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "transition_to",
            "can_transition_to",
            "get_valid_transitions",
            "is_stable_state",
            "is_error_state",
            "record_error",
            "reset_error_state",
            "_record_state_change",
            "get_state_summary"
        ],
        "classes": {
            "EngineState": {
                "methods": [],
                "docstring": "Engine lifecycle states.",
                "base_classes": [
                    "Enum"
                ]
            },
            "EngineStateManager": {
                "methods": [
                    "__init__",
                    "transition_to",
                    "can_transition_to",
                    "get_valid_transitions",
                    "is_stable_state",
                    "is_error_state",
                    "record_error",
                    "reset_error_state",
                    "_record_state_change",
                    "get_state_summary"
                ],
                "docstring": "Manages engine state transitions and validation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\core\\engines\\engine_lifecycle.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize_engine",
            "shutdown_engine",
            "update_last_operation",
            "get_lifecycle_status"
        ],
        "classes": {
            "EngineLifecycleManager": {
                "methods": [
                    "__init__",
                    "initialize_engine",
                    "shutdown_engine",
                    "update_last_operation",
                    "get_lifecycle_status"
                ],
                "docstring": "Manages engine lifecycle operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\engines\\engine_monitoring.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "record_operation",
            "_update_resource_usage",
            "get_metrics_summary",
            "__init__",
            "perform_health_check",
            "get_health_history",
            "is_healthy"
        ],
        "classes": {
            "EngineMetrics": {
                "methods": [
                    "__init__",
                    "record_operation",
                    "_update_resource_usage",
                    "get_metrics_summary"
                ],
                "docstring": "Tracks engine performance metrics.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "EngineHealthMonitor": {
                "methods": [
                    "__init__",
                    "perform_health_check",
                    "get_health_history",
                    "is_healthy"
                ],
                "docstring": "Monitors engine health and provides diagnostics.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\managers\\resource_file_operations.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "handle_operation",
            "_read_operation",
            "_write_operation",
            "_copy_operation",
            "_move_operation",
            "_delete_operation",
            "create_file",
            "create_directory",
            "read_file",
            "write_file"
        ],
        "classes": {
            "FileOperations": {
                "methods": [
                    "__init__",
                    "handle_operation",
                    "_read_operation",
                    "_write_operation",
                    "_copy_operation",
                    "_move_operation",
                    "_delete_operation",
                    "create_file",
                    "create_directory",
                    "read_file",
                    "write_file"
                ],
                "docstring": "Handles file operations for resource manager.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\core\\managers\\resource_lock_operations.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "handle_operation",
            "_acquire_lock",
            "_release_lock",
            "load_locks",
            "save_locks",
            "clear_locks",
            "get_lock_count"
        ],
        "classes": {
            "LockOperations": {
                "methods": [
                    "__init__",
                    "handle_operation",
                    "_acquire_lock",
                    "_release_lock",
                    "load_locks",
                    "save_locks",
                    "clear_locks",
                    "get_lock_count"
                ],
                "docstring": "Handles lock operations for resource manager.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\managers\\resource_context_operations.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "handle_operation",
            "_set_context",
            "_get_context",
            "_update_context",
            "_delete_context",
            "create_context",
            "get_context_if_exists",
            "update_context_direct",
            "delete_context_if_exists",
            "clear_contexts",
            "get_context_count",
            "get_context_ids"
        ],
        "classes": {
            "ContextOperations": {
                "methods": [
                    "__init__",
                    "handle_operation",
                    "_set_context",
                    "_get_context",
                    "_update_context",
                    "_delete_context",
                    "create_context",
                    "get_context_if_exists",
                    "update_context_direct",
                    "delete_context_if_exists",
                    "clear_contexts",
                    "get_context_count",
                    "get_context_ids"
                ],
                "docstring": "Handles context operations for resource manager.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 26
    },
    "src\\core\\orchestration\\base_orchestrator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_register_components",
            "_load_default_config",
            "initialize",
            "cleanup",
            "register_component",
            "get_component",
            "has_component",
            "get_status",
            "get_health",
            "on",
            "off",
            "emit",
            "safe_execute",
            "_sanitize_config",
            "__enter__",
            "__exit__",
            "__repr__"
        ],
        "classes": {
            "BaseOrchestrator": {
                "methods": [
                    "__init__",
                    "_register_components",
                    "_load_default_config",
                    "initialize",
                    "cleanup",
                    "register_component",
                    "get_component",
                    "has_component",
                    "get_status",
                    "get_health",
                    "on",
                    "off",
                    "emit",
                    "safe_execute",
                    "_sanitize_config",
                    "__enter__",
                    "__exit__",
                    "__repr__"
                ],
                "docstring": "Base class for all orchestrators in the V2 system.\n\nProvides common infrastructure for:\n- Lifecycle management (init \u2192 register \u2192 coordinate \u2192 cleanup)\n- Component registration and management\n- Status reporting and health checks\n- Error handling and logging\n- Event coordination\n\nSubclasses must implement:\n- _register_components(): Setup component relationships\n- _load_default_config(): Provide default configuration\n\nExample:\n    class MyOrchestrator(BaseOrchestrator):\n        def __init__(self, config=None):\n            super().__init__(\"my_orchestrator\", config)\n            self.engine = MyEngine(self.config)\n            self.analyzer = MyAnalyzer(self.config)\n\n        def _register_components(self):\n            self.register_component(\"engine\", self.engine)\n            self.register_component(\"analyzer\", self.analyzer)\n\n        def _load_default_config(self):\n            return {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n\n        def process_workflow(self, data):\n            validated = self.engine.validate(data)\n            analyzed = self.analyzer.analyze(validated)\n            return analyzed",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 36
    },
    "src\\core\\refactoring\\extraction_helpers.py": {
        "language": ".py",
        "functions": [
            "extract_models",
            "extract_utils",
            "extract_core"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\core\\refactoring\\extraction_tools.py": {
        "language": ".py",
        "functions": [
            "create_extraction_plan",
            "execute_extraction",
            "_analyze_file_for_extraction"
        ],
        "classes": {
            "ExtractionPlan": {
                "methods": [],
                "docstring": "Plan for extracting code from a file.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "FileAnalysis": {
                "methods": [],
                "docstring": "Analysis results for a file.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ExtractionTools": {
                "methods": [
                    "create_extraction_plan",
                    "execute_extraction",
                    "_analyze_file_for_extraction"
                ],
                "docstring": "Tools for code extraction operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\core\\refactoring\\refactor_tools.py": {
        "language": ".py",
        "functions": [
            "get_refactor_tools",
            "create_extraction_plan",
            "execute_extraction",
            "create_consolidation_plan",
            "execute_consolidation",
            "find_duplicate_files",
            "create_optimization_plan",
            "execute_optimization",
            "__init__",
            "create_extraction_plan",
            "execute_extraction",
            "create_consolidation_plan",
            "execute_consolidation",
            "find_duplicate_files",
            "analyze_duplicates",
            "create_optimization_plan",
            "execute_optimization",
            "get_tool_status",
            "analyze_file",
            "refactor_file"
        ],
        "classes": {
            "RefactorTools": {
                "methods": [
                    "__init__",
                    "create_extraction_plan",
                    "execute_extraction",
                    "create_consolidation_plan",
                    "execute_consolidation",
                    "find_duplicate_files",
                    "analyze_duplicates",
                    "create_optimization_plan",
                    "execute_optimization",
                    "get_tool_status",
                    "analyze_file",
                    "refactor_file"
                ],
                "docstring": "V2-compliant refactoring tools - modular architecture.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 32
    },
    "src\\core\\refactoring\\optimization_helpers.py": {
        "language": ".py",
        "functions": [
            "apply_optimization_rules",
            "remove_unused_imports",
            "optimize_class_structure"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\core\\validation\\validation_coordinator.py": {
        "language": ".py",
        "functions": [
            "get_validation_coordinator",
            "__init__",
            "register_engine",
            "validate",
            "get_available_engines"
        ],
        "classes": {
            "ValidationCoordinator": {
                "methods": [
                    "__init__",
                    "register_engine",
                    "validate",
                    "get_available_engines"
                ],
                "docstring": "Coordinates different validation engines.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 9
    },
    "src\\services\\consolidated_onboarding_service.py": {
        "language": ".py",
        "functions": [
            "get_phase_2_status",
            "get_agent_assignments",
            "get_targets",
            "is_phase_2_active"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "src\\services\\vector_integration_unified.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\vector_database_service_unified.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\vector_models_and_embedding_unified.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\messaging_discord.py": {
        "language": ".py",
        "functions": [
            "send_discord_message"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\services\\unified_onboarding_service.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\onboarding_service_unified.py": {
        "language": ".py",
        "functions": [
            "get_onboarding_service",
            "__init__",
            "generate_onboarding_message",
            "_generate_friendly_message",
            "_generate_professional_message",
            "_generate_technical_message",
            "onboard_agent",
            "_send_wrapup_message",
            "_send_onboarding_message",
            "onboard_all_agents",
            "get_agent_status",
            "update_agent_status",
            "get_onboarding_status"
        ],
        "classes": {
            "UnifiedOnboardingService": {
                "methods": [
                    "__init__",
                    "generate_onboarding_message",
                    "_generate_friendly_message",
                    "_generate_professional_message",
                    "_generate_technical_message",
                    "onboard_agent",
                    "_send_wrapup_message",
                    "_send_onboarding_message",
                    "onboard_all_agents",
                    "get_agent_status",
                    "update_agent_status",
                    "get_onboarding_status"
                ],
                "docstring": "Unified onboarding service for all agent onboarding operations.\n\nCombines functionality from:\n- OnboardingService (main service interface)\n- SimpleOnboarding (UI-based onboarding with PyAutoGUI)\n- ArchitecturalOnboardingManager (architectural principles)\n\nV2 Compliance: Single service class < 400 lines",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 25
    },
    "src\\services\\messaging_handlers.py": {
        "language": ".py",
        "functions": [
            "handle_message",
            "handle_broadcast"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\services\\messaging\\policy_loader.py": {
        "language": ".py",
        "functions": [
            "load_template_policy",
            "_merge_policy",
            "resolve_template_by_roles",
            "resolve_template_by_channel",
            "get"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "src\\services\\chatgpt\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\chatgpt\\navigator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_active_page",
            "get_navigation_info",
            "get_unified_config",
            "get_logger"
        ],
        "classes": {
            "ChatGPTNavigator": {
                "methods": [
                    "__init__",
                    "get_active_page",
                    "get_navigation_info"
                ],
                "docstring": "ChatGPT browser navigation helper.\n\nProvides navigation capabilities for ChatGPT conversations\nwith integration to V2's browser infrastructure.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "UnifiedBrowserService": {
                "methods": [],
                "docstring": null,
                "base_classes": [],
                "maturity": "Prototype",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\services\\chatgpt\\cli.py": {
        "language": ".py",
        "functions": [
            "create_chatgpt_parser",
            "list_conversations",
            "show_conversation",
            "show_info",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "src\\services\\chatgpt\\extractor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "save_conversation",
            "load_conversation",
            "list_conversations",
            "cleanup_old_conversations",
            "get_extraction_info",
            "get_unified_config",
            "get_logger"
        ],
        "classes": {
            "ConversationExtractor": {
                "methods": [
                    "__init__",
                    "save_conversation",
                    "load_conversation",
                    "list_conversations",
                    "cleanup_old_conversations",
                    "get_extraction_info"
                ],
                "docstring": "ChatGPT conversation extraction and management facade.\n\nCoordinates between MessageParser and ConversationStorage to provide:\n- Extracting conversation history\n- Parsing message structure\n- Saving conversations to files\n- Managing conversation metadata",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "DataAgent"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\services\\chatgpt\\session.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "clear_session",
            "get_session_info",
            "is_session_valid",
            "get_unified_config",
            "get_logger"
        ],
        "classes": {
            "BrowserSessionManager": {
                "methods": [
                    "__init__",
                    "clear_session",
                    "get_session_info",
                    "is_session_valid"
                ],
                "docstring": "Browser session management for ChatGPT.\n\nProvides session persistence, cookie management, and authentication\nhandling for ChatGPT browser automation.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\models\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\infrastructure\\unified_browser_service.py": {
        "language": ".py",
        "functions": [
            "create_browser_service",
            "__init__",
            "start_browser",
            "stop_browser",
            "create_session",
            "navigate_to_conversation",
            "send_message",
            "wait_for_response",
            "save_cookies",
            "load_cookies",
            "can_make_request",
            "record_request",
            "get_session_info",
            "get_rate_limit_status",
            "get_page_status",
            "is_browser_running",
            "has_valid_session",
            "get_browser_info"
        ],
        "classes": {
            "UnifiedBrowserService": {
                "methods": [
                    "__init__",
                    "start_browser",
                    "stop_browser",
                    "create_session",
                    "navigate_to_conversation",
                    "send_message",
                    "wait_for_response",
                    "save_cookies",
                    "load_cookies",
                    "can_make_request",
                    "record_request",
                    "get_session_info",
                    "get_rate_limit_status",
                    "get_page_status",
                    "is_browser_running",
                    "has_valid_session",
                    "get_browser_info"
                ],
                "docstring": "Main unified browser service interface.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 35
    },
    "src\\infrastructure\\unified_logging_time.py": {
        "language": ".py",
        "functions": [
            "create_logging_time_service",
            "__init__",
            "get_logger",
            "debug",
            "info",
            "warning",
            "error",
            "critical",
            "now",
            "utcnow",
            "from_timestamp",
            "to_timestamp",
            "format_time",
            "format_date",
            "format_datetime",
            "parse_datetime",
            "add_days",
            "add_hours",
            "time_diff_seconds",
            "time_diff_minutes",
            "is_expired",
            "get_age_seconds",
            "get_log_stats",
            "reset_log_stats",
            "get_service_info"
        ],
        "classes": {
            "UnifiedLoggingTimeService": {
                "methods": [
                    "__init__",
                    "get_logger",
                    "debug",
                    "info",
                    "warning",
                    "error",
                    "critical",
                    "now",
                    "utcnow",
                    "from_timestamp",
                    "to_timestamp",
                    "format_time",
                    "format_date",
                    "format_datetime",
                    "parse_datetime",
                    "add_days",
                    "add_hours",
                    "time_diff_seconds",
                    "time_diff_minutes",
                    "is_expired",
                    "get_age_seconds",
                    "get_log_stats",
                    "reset_log_stats",
                    "get_service_info"
                ],
                "docstring": "Main unified logging and time service interface.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 49
    },
    "src\\infrastructure\\unified_persistence.py": {
        "language": ".py",
        "functions": [
            "create_persistence_service",
            "__init__",
            "save_agent",
            "get_agent",
            "delete_agent",
            "list_agents",
            "get_active_agents",
            "get_available_agents",
            "get_agents_by_capability",
            "save_task",
            "get_task",
            "delete_task",
            "list_tasks",
            "get_tasks_by_agent",
            "get_pending_tasks",
            "get_database_stats",
            "optimize_database",
            "backup_database"
        ],
        "classes": {
            "UnifiedPersistenceService": {
                "methods": [
                    "__init__",
                    "save_agent",
                    "get_agent",
                    "delete_agent",
                    "list_agents",
                    "get_active_agents",
                    "get_available_agents",
                    "get_agents_by_capability",
                    "save_task",
                    "get_task",
                    "delete_task",
                    "list_tasks",
                    "get_tasks_by_agent",
                    "get_pending_tasks",
                    "get_database_stats",
                    "optimize_database",
                    "backup_database"
                ],
                "docstring": "Main unified persistence service interface.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 35
    },
    "src\\infrastructure\\browser\\browser_models.py": {
        "language": ".py",
        "functions": [
            "__post_init__"
        ],
        "classes": {
            "BrowserConfig": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Configuration for browser operations with enhanced config integration.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TheaConfig": {
                "methods": [],
                "docstring": "Configuration for Thea Manager interactions with enhanced config integration.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SessionInfo": {
                "methods": [],
                "docstring": "Session information.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RateLimitStatus": {
                "methods": [],
                "docstring": "Rate limit status information.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\infrastructure\\browser\\browser_adapter.py": {
        "language": ".py",
        "functions": [
            "start",
            "stop",
            "navigate",
            "get_current_url",
            "get_title",
            "find_element",
            "find_elements",
            "execute_script",
            "is_running",
            "get_cookies",
            "add_cookies",
            "__init__",
            "start",
            "stop",
            "navigate",
            "get_current_url",
            "get_title",
            "find_element",
            "find_elements",
            "execute_script",
            "is_running",
            "get_cookies",
            "add_cookies"
        ],
        "classes": {
            "BrowserAdapter": {
                "methods": [
                    "start",
                    "stop",
                    "navigate",
                    "get_current_url",
                    "get_title",
                    "find_element",
                    "find_elements",
                    "execute_script",
                    "is_running",
                    "get_cookies",
                    "add_cookies"
                ],
                "docstring": "Abstract base class for browser adapters.",
                "base_classes": [
                    "ABC"
                ]
            },
            "ChromeBrowserAdapter": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "navigate",
                    "get_current_url",
                    "get_title",
                    "find_element",
                    "find_elements",
                    "execute_script",
                    "is_running",
                    "get_cookies",
                    "add_cookies"
                ],
                "docstring": "Chrome browser adapter implementation.",
                "base_classes": [
                    "BrowserAdapter"
                ]
            }
        },
        "routes": [],
        "complexity": 46
    },
    "src\\infrastructure\\browser\\session_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_session",
            "can_make_request",
            "record_request",
            "wait_for_rate_limit_reset",
            "get_session_info",
            "get_rate_limit_status"
        ],
        "classes": {
            "SessionManager": {
                "methods": [
                    "__init__",
                    "create_session",
                    "can_make_request",
                    "record_request",
                    "wait_for_rate_limit_reset",
                    "get_session_info",
                    "get_rate_limit_status"
                ],
                "docstring": "Manages browser sessions and rate limiting.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\infrastructure\\browser\\cookie_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "save_cookies",
            "load_cookies",
            "has_valid_session",
            "_persist_cookies",
            "_load_persisted_cookies"
        ],
        "classes": {
            "CookieManager": {
                "methods": [
                    "__init__",
                    "save_cookies",
                    "load_cookies",
                    "has_valid_session",
                    "_persist_cookies",
                    "_load_persisted_cookies"
                ],
                "docstring": "Manages browser cookies for sessions.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\infrastructure\\browser\\browser_operations.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "navigate_to_conversation",
            "send_message",
            "wait_for_response_ready",
            "_is_input_available",
            "_verify_page_loaded",
            "get_page_status"
        ],
        "classes": {
            "BrowserOperations": {
                "methods": [
                    "__init__",
                    "navigate_to_conversation",
                    "send_message",
                    "wait_for_response_ready",
                    "_is_input_available",
                    "_verify_page_loaded",
                    "get_page_status"
                ],
                "docstring": "Handles browser operations and interactions.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\infrastructure\\browser\\unified\\driver_manager.py": {
        "language": ".py",
        "functions": [
            "__new__",
            "__init__",
            "_download_driver_if_needed",
            "_setup_chrome_options",
            "get_driver",
            "close_driver",
            "__enter__",
            "__exit__"
        ],
        "classes": {
            "UnifiedDriverManager": {
                "methods": [
                    "__new__",
                    "__init__",
                    "_download_driver_if_needed",
                    "_setup_chrome_options",
                    "get_driver",
                    "close_driver",
                    "__enter__",
                    "__exit__"
                ],
                "docstring": "Singleton class for managing an undetected Chrome WebDriver instance.\n\nFeatures:\n  - Persistent profile support (or temporary profiles in headless mode)\n  - Cookie saving and loading for session persistence\n  - Mobile emulation and headless mode support\n  - Context management for automatic cleanup\n  - Ability to update driver options dynamically",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\infrastructure\\browser\\unified\\legacy_driver.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__getattr__",
            "__enter__",
            "__exit__"
        ],
        "classes": {
            "DriverManager": {
                "methods": [
                    "__init__",
                    "__getattr__",
                    "__enter__",
                    "__exit__"
                ],
                "docstring": "Backward compatibility wrapper for UnifiedDriverManager.\n\nDEPRECATED: This class is provided for backward compatibility only.\nUse UnifiedDriverManager directly for new code.\n\nArgs:\n    driver_options: Dictionary of driver options",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\infrastructure\\browser\\unified\\config.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get",
            "to_dict"
        ],
        "classes": {
            "BrowserConfig": {
                "methods": [
                    "__init__",
                    "get",
                    "to_dict"
                ],
                "docstring": "Browser configuration for unified driver management.\n\nProvides configuration for:\n- Chrome driver paths\n- Mobile emulation profiles\n- Cookie persistence\n- Performance settings",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\infrastructure\\persistence\\persistence_models.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "__post_init__"
        ],
        "classes": {
            "PersistenceConfig": {
                "methods": [],
                "docstring": "Configuration for persistence operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "Agent": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Agent entity.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "Task": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Task entity.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\infrastructure\\persistence\\base_repository.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get",
            "save",
            "delete",
            "list_all"
        ],
        "classes": {
            "BaseRepository": {
                "methods": [
                    "__init__",
                    "get",
                    "save",
                    "delete",
                    "list_all"
                ],
                "docstring": "Abstract base class for repositories.",
                "base_classes": [
                    "ABC",
                    null
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\infrastructure\\persistence\\database_connection.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_connection",
            "execute_query",
            "execute_update",
            "create_tables"
        ],
        "classes": {
            "DatabaseConnection": {
                "methods": [
                    "__init__",
                    "get_connection",
                    "execute_query",
                    "execute_update",
                    "create_tables"
                ],
                "docstring": "Manages database connections with proper cleanup and configuration.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\infrastructure\\persistence\\persistence_statistics.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_database_stats"
        ],
        "classes": {
            "PersistenceStatistics": {
                "methods": [
                    "__init__",
                    "get_database_stats"
                ],
                "docstring": "Provides statistics about the persistence layer.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\infrastructure\\persistence\\agent_repository.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_ensure_schema",
            "get",
            "get_by_capability",
            "get_active",
            "get_available",
            "save",
            "delete",
            "list_all",
            "_row_to_agent",
            "_agent_to_row"
        ],
        "classes": {
            "AgentRepository": {
                "methods": [
                    "__init__",
                    "_ensure_schema",
                    "get",
                    "get_by_capability",
                    "get_active",
                    "get_available",
                    "save",
                    "delete",
                    "list_all",
                    "_row_to_agent",
                    "_agent_to_row"
                ],
                "docstring": "Repository for Agent entities.",
                "base_classes": [
                    null
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\infrastructure\\browser_backup\\thea_session_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start",
            "stop",
            "create_session",
            "can_make_request",
            "record_request",
            "wait_for_rate_limit_reset",
            "handle_rate_limit_error",
            "get_session_info",
            "get_rate_limit_status"
        ],
        "classes": {
            "RateLimitConfig": {
                "methods": [],
                "docstring": "Configuration for rate limiting.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TheaSessionManager": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "create_session",
                    "can_make_request",
                    "record_request",
                    "wait_for_rate_limit_reset",
                    "handle_rate_limit_error",
                    "get_session_info",
                    "get_rate_limit_status"
                ],
                "docstring": "Basic session manager stub.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\infrastructure\\persistence\\task_repository.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_ensure_schema",
            "get",
            "get_by_agent",
            "get_pending",
            "save",
            "delete",
            "list_all",
            "_row_to_task",
            "_task_to_row"
        ],
        "classes": {
            "TaskRepository": {
                "methods": [
                    "__init__",
                    "_ensure_schema",
                    "get",
                    "get_by_agent",
                    "get_pending",
                    "save",
                    "delete",
                    "list_all",
                    "_row_to_task",
                    "_task_to_row"
                ],
                "docstring": "Repository for Task entities.",
                "base_classes": [
                    null
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\infrastructure\\browser_backup\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\infrastructure\\browser_backup\\thea_login_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "ensure_authenticated",
            "_is_authenticated"
        ],
        "classes": {
            "TheaLoginConfig": {
                "methods": [],
                "docstring": "Configuration for Thea login.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TheaLoginHandler": {
                "methods": [
                    "__init__",
                    "ensure_authenticated",
                    "_is_authenticated"
                ],
                "docstring": "Basic login handler stub.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\infrastructure\\browser_backup\\thea_manager_profile.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\infrastructure\\browser_backup\\thea_cookie_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "save_cookies",
            "load_cookies",
            "has_valid_session",
            "get_session_info"
        ],
        "classes": {
            "TheaCookieConfig": {
                "methods": [],
                "docstring": "Configuration for Thea cookie management.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TheaCookieManager": {
                "methods": [
                    "__init__",
                    "save_cookies",
                    "load_cookies",
                    "has_valid_session",
                    "get_session_info"
                ],
                "docstring": "Basic cookie manager stub.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\infrastructure\\browser_backup\\cookie_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "save_cookies",
            "load_cookies",
            "has_valid_session",
            "_persist_cookies",
            "_load_persisted_cookies"
        ],
        "classes": {
            "CookieManager": {
                "methods": [
                    "__init__",
                    "save_cookies",
                    "load_cookies",
                    "has_valid_session",
                    "_persist_cookies",
                    "_load_persisted_cookies"
                ],
                "docstring": "Manages browser cookies for sessions.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\infrastructure\\browser_backup\\browser_adapter.py": {
        "language": ".py",
        "functions": [
            "start",
            "stop",
            "navigate",
            "get_current_url",
            "get_title",
            "find_element",
            "find_elements",
            "execute_script",
            "is_running",
            "get_cookies",
            "add_cookies",
            "__init__",
            "start",
            "stop",
            "navigate",
            "get_current_url",
            "get_title",
            "find_element",
            "find_elements",
            "execute_script",
            "is_running",
            "get_cookies",
            "add_cookies"
        ],
        "classes": {
            "BrowserAdapter": {
                "methods": [
                    "start",
                    "stop",
                    "navigate",
                    "get_current_url",
                    "get_title",
                    "find_element",
                    "find_elements",
                    "execute_script",
                    "is_running",
                    "get_cookies",
                    "add_cookies"
                ],
                "docstring": "Abstract base class for browser adapters.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ChromeBrowserAdapter": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "navigate",
                    "get_current_url",
                    "get_title",
                    "find_element",
                    "find_elements",
                    "execute_script",
                    "is_running",
                    "get_cookies",
                    "add_cookies"
                ],
                "docstring": "Chrome browser adapter implementation.",
                "base_classes": [
                    "BrowserAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 46
    },
    "src\\infrastructure\\browser_backup\\chrome_undetected.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "open",
            "goto",
            "close"
        ],
        "classes": {
            "ChromeUndetected": {
                "methods": [
                    "__init__",
                    "open",
                    "goto",
                    "close"
                ],
                "docstring": "Basic Chrome browser adapter.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\infrastructure\\browser_backup\\browser_models.py": {
        "language": ".py",
        "functions": [
            "__post_init__"
        ],
        "classes": {
            "BrowserConfig": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Configuration for browser operations with enhanced config integration.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TheaConfig": {
                "methods": [],
                "docstring": "Configuration for Thea Manager interactions with enhanced config integration.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SessionInfo": {
                "methods": [],
                "docstring": "Session information.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RateLimitStatus": {
                "methods": [],
                "docstring": "Rate limit status information.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\infrastructure\\browser_backup\\session_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_session",
            "can_make_request",
            "record_request",
            "wait_for_rate_limit_reset",
            "get_session_info",
            "get_rate_limit_status"
        ],
        "classes": {
            "SessionManager": {
                "methods": [
                    "__init__",
                    "create_session",
                    "can_make_request",
                    "record_request",
                    "wait_for_rate_limit_reset",
                    "get_session_info",
                    "get_rate_limit_status"
                ],
                "docstring": "Manages browser sessions and rate limiting.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\infrastructure\\browser_backup\\browser_operations.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "navigate_to_conversation",
            "send_message",
            "wait_for_response_ready",
            "_is_input_available",
            "_verify_page_loaded",
            "get_page_status"
        ],
        "classes": {
            "BrowserOperations": {
                "methods": [
                    "__init__",
                    "navigate_to_conversation",
                    "send_message",
                    "wait_for_response_ready",
                    "_is_input_available",
                    "_verify_page_loaded",
                    "get_page_status"
                ],
                "docstring": "Handles browser operations and interactions.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\infrastructure\\browser_backup\\thea_modules\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\infrastructure\\browser_backup\\thea_modules\\browser_ops.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "navigate_to_conversation",
            "send_message",
            "wait_for_response_ready",
            "_find_input_element",
            "_find_send_button",
            "_is_input_available",
            "_verify_page_loaded",
            "get_page_status",
            "__init__",
            "find_element_with_retry",
            "find_elements_with_retry",
            "wait_for_element"
        ],
        "classes": {
            "TheaBrowserOperations": {
                "methods": [
                    "__init__",
                    "navigate_to_conversation",
                    "send_message",
                    "wait_for_response_ready",
                    "_find_input_element",
                    "_find_send_button",
                    "_is_input_available",
                    "_verify_page_loaded",
                    "get_page_status"
                ],
                "docstring": "Handles basic browser operations for Thea Manager.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TheaElementFinder": {
                "methods": [
                    "__init__",
                    "find_element_with_retry",
                    "find_elements_with_retry",
                    "wait_for_element"
                ],
                "docstring": "Utility class for finding elements with retry logic.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 26
    },
    "src\\infrastructure\\browser_backup\\thea_modules\\content_scraper.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "__init__",
            "scrape_content",
            "_clean_content",
            "_extract_metadata",
            "_calculate_quality_score",
            "_load_content_patterns",
            "validate_content",
            "__init__",
            "process_batch",
            "filter_high_quality",
            "generate_summary"
        ],
        "classes": {
            "ScrapedContent": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Represents scraped content from Thea Manager.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TheaContentScraper": {
                "methods": [
                    "__init__",
                    "scrape_content",
                    "_clean_content",
                    "_extract_metadata",
                    "_calculate_quality_score",
                    "_load_content_patterns",
                    "validate_content"
                ],
                "docstring": "Handles content scraping and processing for Thea Manager.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TheaContentProcessor": {
                "methods": [
                    "__init__",
                    "process_batch",
                    "filter_high_quality",
                    "generate_summary"
                ],
                "docstring": "Processes and analyzes scraped content.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 24
    },
    "src\\infrastructure\\browser_backup\\thea_modules\\response_collector.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "collect_full_response",
            "_extract_current_response",
            "_is_response_complete",
            "poll_for_completion",
            "wait_for_response_start",
            "get_response_metadata",
            "__init__",
            "start_monitoring",
            "get_progress",
            "should_continue"
        ],
        "classes": {
            "TheaResponseCollector": {
                "methods": [
                    "__init__",
                    "collect_full_response",
                    "_extract_current_response",
                    "_is_response_complete",
                    "poll_for_completion",
                    "wait_for_response_start",
                    "get_response_metadata"
                ],
                "docstring": "Advanced response collector with DOM polling and cursor detection.\n\nProvides sophisticated response extraction by monitoring DOM changes,\ndetecting cursor position changes, and handling dynamic content loading.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TheaResponseMonitor": {
                "methods": [
                    "__init__",
                    "start_monitoring",
                    "get_progress",
                    "should_continue"
                ],
                "docstring": "Monitors response collection progress and provides status updates.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\infrastructure\\browser_backup\\thea_modules\\profile.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "send_message_and_wait",
            "get_status",
            "scrape_current_content",
            "validate_setup",
            "cleanup",
            "_setup_browser_components",
            "__repr__"
        ],
        "classes": {
            "TheaManagerProfile": {
                "methods": [
                    "__init__",
                    "initialize",
                    "send_message_and_wait",
                    "get_status",
                    "scrape_current_content",
                    "validate_setup",
                    "cleanup",
                    "_setup_browser_components",
                    "__repr__"
                ],
                "docstring": "Main profile class for Thea Manager browser interactions.\n\nThis class orchestrates all Thea Manager functionality including:\n- Configuration management\n- Browser operations\n- Response collection with advanced DOM polling\n- Content scraping and processing\n- Session management and error handling",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\discord_commander\\discord_models.py": {
        "language": ".py",
        "functions": [
            "create_command_result",
            "__post_init__",
            "__post_init__",
            "validate",
            "to_dict"
        ],
        "classes": {
            "CommandResult": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Result of a Discord commander command execution.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "DiscordMessage": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Discord message structure.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AgentCommand": {
                "methods": [
                    "validate"
                ],
                "docstring": "Agent command structure.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CommunicationStats": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Communication statistics.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 9
    },
    "src\\discord_commander\\discord_service.py": {
        "language": ".py",
        "functions": [
            "get_discord_service",
            "__init__",
            "_load_webhook_url",
            "_find_new_devlogs",
            "_parse_devlog_filename",
            "_extract_devlog_summary",
            "send_devlog_notification",
            "send_agent_status_notification",
            "send_swarm_coordination_notification",
            "_create_devlog_embed",
            "_create_agent_status_embed",
            "_create_coordination_embed",
            "test_webhook_connection",
            "stop_monitoring"
        ],
        "classes": {
            "DiscordService": {
                "methods": [
                    "__init__",
                    "_load_webhook_url",
                    "_find_new_devlogs",
                    "_parse_devlog_filename",
                    "_extract_devlog_summary",
                    "send_devlog_notification",
                    "send_agent_status_notification",
                    "send_swarm_coordination_notification",
                    "_create_devlog_embed",
                    "_create_agent_status_embed",
                    "_create_coordination_embed",
                    "test_webhook_connection",
                    "stop_monitoring"
                ],
                "docstring": "Unified Discord service for DevLog monitoring, webhooks, and agent communication.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 27
    },
    "src\\discord_commander\\discord_agent_communication.py": {
        "language": ".py",
        "functions": [
            "create_agent_communication_engine",
            "__init__",
            "_setup_logger",
            "_get_unified_utility",
            "_create_inbox_message_content",
            "get_agent_status_file_path",
            "is_valid_agent",
            "get_all_agent_names",
            "validate_agent_name",
            "format_timestamp",
            "create_message_metadata",
            "get_unified_utility"
        ],
        "classes": {
            "AgentCommunicationEngine": {
                "methods": [
                    "__init__",
                    "_setup_logger",
                    "_get_unified_utility",
                    "_create_inbox_message_content",
                    "get_agent_status_file_path",
                    "is_valid_agent",
                    "get_all_agent_names",
                    "validate_agent_name",
                    "format_timestamp",
                    "create_message_metadata"
                ],
                "docstring": "Unified agent communication engine for Discord commander.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "_Utility": {
                "methods": [],
                "docstring": null,
                "base_classes": [],
                "maturity": "Kiddie Script",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\utils\\unified_config_utils.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\utils\\unified_file_utils.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "file_exists",
            "get_file_size",
            "get_file_hash",
            "read_json",
            "write_json",
            "read_yaml",
            "write_yaml",
            "list_files",
            "get_directory_size",
            "create_backup",
            "copy_file",
            "validate_file"
        ],
        "classes": {
            "UnifiedFileUtils": {
                "methods": [
                    "__init__",
                    "file_exists",
                    "get_file_size",
                    "get_file_hash",
                    "read_json",
                    "write_json",
                    "read_yaml",
                    "write_yaml",
                    "list_files",
                    "get_directory_size",
                    "create_backup",
                    "copy_file",
                    "validate_file"
                ],
                "docstring": "Main unified file utilities interface.\n\nProvides a single entry point for all file operations by wrapping\nspecialized operation classes. This allows for easy access to all\nfile-related functionality through a single object.\n\nExample:\n    >>> utils = UnifiedFileUtils()\n    >>> utils.file_exists('path/to/file.json')\n    True\n    >>> data = utils.read_json('path/to/file.json')\n    >>> utils.create_backup('path/to/file.json')\n    'path/to/file.json.backup'",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 26
    },
    "src\\web\\static\\js\\services-orchestrator.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\performance\\bundle-analyzer.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\performance\\dom-performance-analyzer.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\performance\\recommendation-engine.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\performance\\performance-optimization-orchestrator.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\workflows\\models.py": {
        "language": ".py",
        "functions": [
            "is_ready",
            "can_retry",
            "increment_retry",
            "to_dict",
            "from_dict",
            "to_dict",
            "pending_steps",
            "completion_percentage",
            "execution_time",
            "cycles_per_minute",
            "increment_cycle",
            "update_step",
            "to_dict",
            "from_config"
        ],
        "classes": {
            "WorkflowState": {
                "methods": [],
                "docstring": "Workflow execution states following V2 cycle-based tracking.",
                "base_classes": [
                    "Enum"
                ]
            },
            "ResponseType": {
                "methods": [],
                "docstring": "Expected response types for workflow steps.",
                "base_classes": [
                    "Enum"
                ]
            },
            "CoordinationStrategy": {
                "methods": [],
                "docstring": "Coordination strategies for multi-agent workflows.",
                "base_classes": [
                    "Enum"
                ]
            },
            "WorkflowStep": {
                "methods": [
                    "is_ready",
                    "can_retry",
                    "increment_retry",
                    "to_dict"
                ],
                "docstring": "Individual step in a workflow.\n\nRepresents a single unit of work that can be executed by an agent.\nIncludes dependency management, completion criteria, and retry logic.",
                "base_classes": []
            },
            "AIResponse": {
                "methods": [
                    "from_dict",
                    "to_dict"
                ],
                "docstring": "Captured AI response from agent communication system.\n\nRepresents a response received from an agent during workflow execution.\nIncludes metadata for analysis and workflow progression.",
                "base_classes": []
            },
            "WorkflowProgress": {
                "methods": [
                    "pending_steps",
                    "completion_percentage",
                    "execution_time",
                    "cycles_per_minute",
                    "increment_cycle",
                    "update_step",
                    "to_dict"
                ],
                "docstring": "Workflow execution progress tracking.\n\nProvides comprehensive status information about workflow execution\nfollowing V2's cycle-based tracking requirements.",
                "base_classes": []
            },
            "WorkflowConfiguration": {
                "methods": [
                    "from_config"
                ],
                "docstring": "Workflow configuration settings.\n\nCentralizes configuration management for workflow execution\nfollowing V2's unified configuration approach.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "src\\workflows\\engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_step",
            "_find_next_step",
            "get_progress",
            "save_state",
            "pause",
            "resume",
            "stop",
            "_send_devlog_summary",
            "send_message_to_agent",
            "get_coordinate_loader",
            "get_unified_config",
            "get_logger"
        ],
        "classes": {
            "WorkflowEngine": {
                "methods": [
                    "__init__",
                    "add_step",
                    "_find_next_step",
                    "get_progress",
                    "save_state",
                    "pause",
                    "resume",
                    "stop",
                    "_send_devlog_summary"
                ],
                "docstring": "Main workflow orchestration engine.\n\nExecutes multi-agent workflows using V2's messaging infrastructure.\nProvides cycle-based tracking, state persistence, and error recovery.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\workflows\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\workflows\\strategies.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "can_execute_step",
            "__init__",
            "can_execute_step",
            "__init__",
            "can_execute_step",
            "__init__",
            "can_execute_step"
        ],
        "classes": {
            "WorkflowStrategy": {
                "methods": [
                    "__init__",
                    "can_execute_step"
                ],
                "docstring": "Abstract base class for workflow coordination strategies.\n\nDefines the interface for different approaches to coordinating\nmulti-agent workflow execution.",
                "base_classes": [
                    "ABC"
                ]
            },
            "ParallelStrategy": {
                "methods": [
                    "__init__",
                    "can_execute_step"
                ],
                "docstring": "Parallel execution strategy.\n\nExecutes all available steps simultaneously when their\ndependencies are satisfied. Maximizes concurrency.",
                "base_classes": [
                    "WorkflowStrategy"
                ]
            },
            "SequentialStrategy": {
                "methods": [
                    "__init__",
                    "can_execute_step"
                ],
                "docstring": "Sequential execution strategy.\n\nExecutes steps one at a time in dependency order.\nEnsures proper sequencing but may be slower.",
                "base_classes": [
                    "WorkflowStrategy"
                ]
            },
            "DecisionTreeStrategy": {
                "methods": [
                    "__init__",
                    "can_execute_step"
                ],
                "docstring": "Decision tree execution strategy.\n\nExecutes decision points first, then branches based on\nthe decision results. Supports conditional workflow paths.",
                "base_classes": [
                    "WorkflowStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\workflows\\cli.py": {
        "language": ".py",
        "functions": [
            "create_workflow_parser",
            "list_workflows",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\workflows\\autonomous_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "can_execute_step"
        ],
        "classes": {
            "AutonomousStrategy": {
                "methods": [
                    "__init__",
                    "can_execute_step"
                ],
                "docstring": "Autonomous execution strategy.\n\nExecutes steps with adaptive behavior based on responses.\nSupports goal-oriented iteration and self-correction.",
                "base_classes": [
                    "WorkflowStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\workflows\\steps.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_step",
            "get_steps",
            "create_conversation_loop",
            "create_multi_agent_orchestration",
            "create_decision_tree",
            "create_autonomous_loop"
        ],
        "classes": {
            "WorkflowStepBuilder": {
                "methods": [
                    "__init__",
                    "create_step",
                    "get_steps"
                ],
                "docstring": "Base builder for workflow steps.\n\nProvides common functionality for creating workflow steps\nwith proper dependency management and configuration.",
                "base_classes": []
            },
            "ConversationLoopBuilder": {
                "methods": [
                    "create_conversation_loop"
                ],
                "docstring": "Builder for conversation loop workflows.\n\nCreates a series of steps for agents to have structured conversations\nwith dependency management between rounds.",
                "base_classes": [
                    "WorkflowStepBuilder"
                ]
            },
            "MultiAgentOrchestrationBuilder": {
                "methods": [
                    "create_multi_agent_orchestration"
                ],
                "docstring": "Builder for multi-agent orchestration workflows.\n\nCreates workflows where multiple agents work together\nusing different coordination strategies.",
                "base_classes": [
                    "WorkflowStepBuilder"
                ]
            },
            "DecisionTreeBuilder": {
                "methods": [
                    "create_decision_tree"
                ],
                "docstring": "Builder for decision tree workflows.\n\nCreates workflows with decision points and branching logic\nbased on AI responses.",
                "base_classes": [
                    "WorkflowStepBuilder"
                ]
            },
            "AutonomousLoopBuilder": {
                "methods": [
                    "create_autonomous_loop"
                ],
                "docstring": "Builder for autonomous workflow loops.\n\nCreates workflows that adapt and iterate based on AI responses\nwith goal-oriented progression.",
                "base_classes": [
                    "WorkflowStepBuilder"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\vision\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\vision\\capture.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "capture_screen",
            "capture_agent_region",
            "continuous_capture",
            "stop_monitoring",
            "save_image",
            "_convert_format",
            "_capture_fallback_region",
            "get_capture_info"
        ],
        "classes": {
            "ScreenCapture": {
                "methods": [
                    "__init__",
                    "capture_screen",
                    "capture_agent_region",
                    "continuous_capture",
                    "stop_monitoring",
                    "save_image",
                    "_convert_format",
                    "_capture_fallback_region",
                    "get_capture_info"
                ],
                "docstring": "Screen capture with coordinate integration.\n\nCapabilities:\n- Full screen and region-based capture\n- Agent-specific region capture via coordinates\n- Continuous monitoring mode\n- Image format conversion",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\vision\\analysis.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "detect_ui_elements",
            "analyze_screen_content",
            "detect_changes",
            "_get_image_statistics",
            "_analyze_layout",
            "get_analysis_info",
            "get_unified_config",
            "get_logger"
        ],
        "classes": {
            "VisualAnalyzer": {
                "methods": [
                    "__init__",
                    "detect_ui_elements",
                    "analyze_screen_content",
                    "detect_changes",
                    "_get_image_statistics",
                    "_analyze_layout",
                    "get_analysis_info"
                ],
                "docstring": "Visual analysis orchestrator for UI elements and screen content.\n\nCoordinates specialized analyzer modules:\n- UIDetector: UI element detection\n- EdgeAnalyzer: Edge detection and analysis\n- ColorAnalyzer: Color distribution analysis\n- ChangeDetector: Visual change detection\n\nProvides backward-compatible interface with original VisualAnalyzer.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\vision\\ocr.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "extract_text",
            "extract_text_with_regions",
            "preprocess_image",
            "_check_tesseract",
            "_extract_regions",
            "get_extractor_info"
        ],
        "classes": {
            "TextExtractor": {
                "methods": [
                    "__init__",
                    "extract_text",
                    "extract_text_with_regions",
                    "preprocess_image",
                    "_check_tesseract",
                    "_extract_regions",
                    "get_extractor_info"
                ],
                "docstring": "OCR text extraction with preprocessing.\n\nCapabilities:\n- Image preprocessing for better accuracy\n- Confidence thresholding\n- Text region detection\n- Multiple language support",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\vision\\integration.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "capture_and_analyze",
            "start_monitoring",
            "stop_monitoring",
            "detect_changes",
            "_capture_image",
            "_get_capture_method",
            "_error_result",
            "save_vision_data",
            "cleanup_old_data",
            "get_vision_capabilities",
            "get_coordinate_loader",
            "get_unified_config",
            "get_logger",
            "capture_func",
            "analysis_func"
        ],
        "classes": {
            "VisionSystem": {
                "methods": [
                    "__init__",
                    "capture_and_analyze",
                    "start_monitoring",
                    "stop_monitoring",
                    "detect_changes",
                    "_capture_image",
                    "_get_capture_method",
                    "_error_result",
                    "save_vision_data",
                    "cleanup_old_data",
                    "get_vision_capabilities"
                ],
                "docstring": "Main vision system integration orchestrator.\n\nCoordinates specialized vision components:\n- ScreenCapture: Screen and region capture\n- TextExtractor: OCR capabilities\n- VisualAnalyzer: Visual analysis and UI detection\n- VisionPersistence: Data storage and history\n- VisionMonitoring: Continuous monitoring\n\nProvides unified interface for vision capabilities.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 27
    },
    "src\\gui\\components\\status_panel.py": {
        "language": ".py",
        "functions": [
            "get_logger",
            "__init__",
            "_init_ui",
            "_setup_panel_styling",
            "_create_main_layout",
            "_add_log_display",
            "_add_control_buttons",
            "add_log_message",
            "clear_log",
            "save_log",
            "_scroll_to_bottom",
            "_trim_log",
            "set_max_lines",
            "get_log_content",
            "__init__"
        ],
        "classes": {
            "StatusPanel": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_setup_panel_styling",
                    "_create_main_layout",
                    "_add_log_display",
                    "_add_control_buttons",
                    "add_log_message",
                    "clear_log",
                    "save_log",
                    "_scroll_to_bottom",
                    "_trim_log",
                    "set_max_lines",
                    "get_log_content"
                ],
                "docstring": "Status and log display panel.\n\nProvides:\n- Log message display with formatting\n- Auto-scroll functionality\n- Log clearing\n- Log export to file\n- Timestamp formatting",
                "base_classes": [
                    "QFrame"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AgentCard": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Fallback agent card (PyQt5 not available).",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 29
    },
    "src\\gui\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\vision\\cli.py": {
        "language": ".py",
        "functions": [
            "create_vision_parser",
            "capture_screen",
            "extract_text_from_image",
            "start_monitoring",
            "analyze_image",
            "show_info",
            "main",
            "monitoring_callback"
        ],
        "classes": {},
        "routes": [],
        "complexity": 8
    },
    "src\\gui\\app.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_init_ui",
            "_setup_status_updates",
            "_update_agent_statuses",
            "log_message",
            "closeEvent",
            "__init__"
        ],
        "classes": {
            "DreamOSGUI": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Fallback GUI (PyQt5 not available).",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 9
    },
    "src\\gui\\controllers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\gui\\components\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\gui\\controllers\\base.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "select_all_agents",
            "clear_selection",
            "toggle_agent_selection",
            "execute_selected_agents_action",
            "broadcast_action",
            "_default_agent_action",
            "_default_broadcast_action",
            "_create_action_message",
            "_update_agent_selection",
            "log_message",
            "setup_status_updates",
            "ping_selected_agents",
            "get_status_selected_agents",
            "resume_selected_agents",
            "pause_selected_agents",
            "clear_log",
            "save_log",
            "send_message_to_agent"
        ],
        "classes": {
            "BaseGUIController": {
                "methods": [
                    "__init__",
                    "select_all_agents",
                    "clear_selection",
                    "toggle_agent_selection",
                    "execute_selected_agents_action",
                    "broadcast_action",
                    "_default_agent_action",
                    "_default_broadcast_action",
                    "_create_action_message",
                    "_update_agent_selection",
                    "log_message",
                    "setup_status_updates",
                    "ping_selected_agents",
                    "get_status_selected_agents",
                    "resume_selected_agents",
                    "pause_selected_agents",
                    "clear_log",
                    "save_log"
                ],
                "docstring": "Base controller for GUI applications.\n\nProvides common functionality for:\n- Agent selection management\n- Command execution framework\n- PyAutoGUI integration\n- Logging and status updates",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 37
    },
    "src\\gui\\components\\agent_card.py": {
        "language": ".py",
        "functions": [
            "get_logger",
            "__init__",
            "_init_ui",
            "_setup_card_styling",
            "_create_layout",
            "_add_ui_elements",
            "_on_selection_changed",
            "set_selected",
            "update_status",
            "update_activity",
            "get_agent_info",
            "__init__",
            "update_status",
            "set_selected"
        ],
        "classes": {
            "AgentCard": {
                "methods": [
                    "__init__",
                    "update_status",
                    "set_selected"
                ],
                "docstring": "Fallback agent card (PyQt5 not available).",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 17
    },
    "src\\gui\\styles\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\orchestrators\\overnight\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\orchestrators\\overnight\\orchestrator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_orchestrator_status",
            "send_message_to_agent",
            "get_unified_config",
            "get_logger"
        ],
        "classes": {
            "OvernightOrchestrator": {
                "methods": [
                    "__init__",
                    "get_orchestrator_status"
                ],
                "docstring": "Main orchestrator for overnight autonomous operations.\n\nExtends V2's core orchestration with:\n- 24/7 autonomous execution\n- Cycle-based scheduling (V2 requirement)\n- Agent task distribution\n- Workflow integration\n- Recovery and monitoring",
                "base_classes": [
                    "CoreOrchestrator"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CoreOrchestrator": {
                "methods": [],
                "docstring": null,
                "base_classes": [],
                "maturity": "Prototype",
                "agent_type": "Utility"
            },
            "WorkflowEngine": {
                "methods": [],
                "docstring": null,
                "base_classes": [],
                "maturity": "Prototype",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 7
    },
    "src\\orchestrators\\overnight\\scheduler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_task",
            "mark_task_completed",
            "mark_task_failed",
            "get_scheduler_status",
            "get_unified_config",
            "get_logger"
        ],
        "classes": {
            "TaskScheduler": {
                "methods": [
                    "__init__",
                    "add_task",
                    "mark_task_completed",
                    "mark_task_failed",
                    "get_scheduler_status"
                ],
                "docstring": "Cycle-based task scheduler facade for overnight operations.\n\nCoordinates between queue management, task tracking, and execution scheduling.\nProvides:\n- Priority-based task queuing\n- Load balancing across agents\n- Dependency management\n- Retry logic\n- Cycle-based scheduling (V2 requirement)",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\orchestrators\\overnight\\monitor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_monitoring",
            "stop_monitoring",
            "update_cycle",
            "update_tasks",
            "mark_task_completed",
            "mark_task_failed",
            "get_performance_metrics",
            "get_agent_status",
            "generate_status_report",
            "get_monitor_info",
            "get_unified_config",
            "get_logger"
        ],
        "classes": {
            "ProgressMonitor": {
                "methods": [
                    "__init__",
                    "start_monitoring",
                    "stop_monitoring",
                    "update_cycle",
                    "update_tasks",
                    "mark_task_completed",
                    "mark_task_failed",
                    "get_performance_metrics",
                    "get_agent_status",
                    "generate_status_report",
                    "get_monitor_info"
                ],
                "docstring": "Progress monitoring for overnight operations.\n\nProvides:\n- Agent activity tracking\n- Stall detection\n- Health status monitoring\n- Performance metrics\n- Status reporting",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 24
    },
    "src\\orchestrators\\overnight\\recovery.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_recovery_status",
            "get_unified_config",
            "get_logger"
        ],
        "classes": {
            "RecoverySystem": {
                "methods": [
                    "__init__",
                    "get_recovery_status"
                ],
                "docstring": "Recovery system for overnight operations.\n\nProvides:\n- Automatic task recovery\n- Agent rescue capabilities\n- Error escalation\n- System restoration\n- Failure analysis",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\discord_commander_backup\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\discord_commander_backup\\agent_communication_engine_base.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_logger",
            "_get_unified_utility",
            "validate_agent_name",
            "format_timestamp",
            "create_message_metadata"
        ],
        "classes": {
            "AgentCommunicationEngineBase": {
                "methods": [
                    "__init__",
                    "_setup_logger",
                    "_get_unified_utility",
                    "validate_agent_name",
                    "format_timestamp",
                    "create_message_metadata"
                ],
                "docstring": "Base class for agent communication operations",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\orchestrators\\overnight\\cli.py": {
        "language": ".py",
        "functions": [
            "create_overnight_parser",
            "show_status",
            "manage_tasks",
            "show_recovery_status",
            "show_info",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "src\\discord_commander_backup\\discord_commander_models.py": {
        "language": ".py",
        "functions": [
            "create_command_result",
            "__post_init__",
            "__post_init__",
            "validate",
            "to_dict"
        ],
        "classes": {
            "CommandResult": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Result of a Discord commander command execution.",
                "base_classes": []
            },
            "DiscordMessage": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Discord message structure.",
                "base_classes": []
            },
            "AgentCommand": {
                "methods": [
                    "validate"
                ],
                "docstring": "Agent command structure.",
                "base_classes": []
            },
            "CommunicationStats": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Communication statistics.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 9
    },
    "src\\discord_commander_backup\\agent_communication_engine_refactored.py": {
        "language": ".py",
        "functions": [
            "create_agent_communication_engine",
            "__init__"
        ],
        "classes": {
            "AgentCommunicationEngine": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Unified agent communication engine with core and operations functionality.",
                "base_classes": [
                    "AgentCommunicationEngineCore",
                    "AgentCommunicationEngineOperations"
                ]
            }
        },
        "routes": [],
        "complexity": 3
    },
    "src\\discord_commander_backup\\agent_communication_engine_operations.py": {
        "language": ".py",
        "functions": [
            "get_agent_status_file_path"
        ],
        "classes": {
            "AgentCommunicationEngineOperations": {
                "methods": [
                    "get_agent_status_file_path"
                ],
                "docstring": "Extended agent communication operations for Discord commander",
                "base_classes": [
                    "AgentCommunicationEngineBase"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\discord_commander_backup\\agent_communication_engine_core.py": {
        "language": ".py",
        "functions": [
            "_create_inbox_message_content",
            "is_valid_agent",
            "get_all_agent_names"
        ],
        "classes": {
            "AgentCommunicationEngineCore": {
                "methods": [
                    "_create_inbox_message_content",
                    "is_valid_agent",
                    "get_all_agent_names"
                ],
                "docstring": "Core agent communication operations for Discord commander",
                "base_classes": [
                    "AgentCommunicationEngineBase"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\discord_commander_backup\\discord_commander.py": {
        "language": ".py",
        "functions": [
            "get_discord_commander",
            "__init__",
            "_find_new_devlogs",
            "_parse_devlog_filename",
            "_extract_devlog_summary",
            "stop_monitoring"
        ],
        "classes": {
            "DiscordCommander": {
                "methods": [
                    "__init__",
                    "_find_new_devlogs",
                    "_parse_devlog_filename",
                    "_extract_devlog_summary",
                    "stop_monitoring"
                ],
                "docstring": "Main Discord commander for V2_SWARM DevLog integration.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 11
    },
    "src\\discord_commander_backup\\enhanced_discord_integration.py": {
        "language": ".py",
        "functions": [
            "get_enhanced_discord_commander",
            "__init__",
            "configure_channel_webhook",
            "get_channel_info"
        ],
        "classes": {
            "EnhancedDiscordCommander": {
                "methods": [
                    "__init__",
                    "configure_channel_webhook",
                    "get_channel_info"
                ],
                "docstring": "Enhanced Discord commander with individual agent channels.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 7
    },
    "src\\discord_commander_backup\\discord_models.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "AgentChannel": {
                "methods": [],
                "docstring": "Enumeration of agent channels.",
                "base_classes": [
                    "Enum"
                ]
            },
            "DiscordChannelConfig": {
                "methods": [],
                "docstring": "Configuration for a Discord channel.",
                "base_classes": []
            },
            "DiscordMessage": {
                "methods": [],
                "docstring": "Discord message structure.",
                "base_classes": []
            },
            "AgentNotification": {
                "methods": [],
                "docstring": "Agent notification structure.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\discord_commander_backup\\discord_webhook_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_channel_config",
            "_create_default_channels",
            "_save_channel_config",
            "set_channel_webhook",
            "get_channel_config",
            "send_to_channel",
            "test_channel_webhook",
            "get_all_channels",
            "get_agent_channel"
        ],
        "classes": {
            "EnhancedDiscordWebhookManager": {
                "methods": [
                    "__init__",
                    "_load_channel_config",
                    "_create_default_channels",
                    "_save_channel_config",
                    "set_channel_webhook",
                    "get_channel_config",
                    "send_to_channel",
                    "test_channel_webhook",
                    "get_all_channels",
                    "get_agent_channel"
                ],
                "docstring": "Enhanced webhook manager with multi-channel support.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\discord_commander_backup\\discord_channel_coordinator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_agent_notification_embed"
        ],
        "classes": {
            "AgentChannelCoordinator": {
                "methods": [
                    "__init__",
                    "create_agent_notification_embed"
                ],
                "docstring": "Coordinates agent-specific channel communications.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\discord_commander_backup\\discord_webhook_integration.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_webhook_url",
            "send_devlog_notification",
            "send_agent_status_notification",
            "send_swarm_coordination_notification",
            "_create_devlog_embed",
            "_create_agent_status_embed",
            "_create_coordination_embed",
            "test_webhook_connection"
        ],
        "classes": {
            "DiscordWebhookIntegration": {
                "methods": [
                    "__init__",
                    "_load_webhook_url",
                    "send_devlog_notification",
                    "send_agent_status_notification",
                    "send_swarm_coordination_notification",
                    "_create_devlog_embed",
                    "_create_agent_status_embed",
                    "_create_coordination_embed",
                    "test_webhook_connection"
                ],
                "docstring": "Discord webhook integration for DevLog notifications.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\discord_commander_backup\\discord_devlog_monitor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_find_new_devlogs",
            "_parse_devlog_filename",
            "_extract_devlog_summary",
            "stop_monitoring"
        ],
        "classes": {
            "EnhancedDevLogMonitor": {
                "methods": [
                    "__init__",
                    "_find_new_devlogs",
                    "_parse_devlog_filename",
                    "_extract_devlog_summary",
                    "stop_monitoring"
                ],
                "docstring": "Enhanced DevLog monitor with agent-specific notifications.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "scripts\\setup_chat_mate.py": {
        "language": ".py",
        "functions": [
            "install_dependencies",
            "create_runtime_directories",
            "test_chat_mate_import",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "tools\\complexity_analyzer.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\infrastructure\\browser\\thea_browser_service.py": {
        "language": ".py",
        "functions": [
            "create_thea_browser_service",
            "__init__",
            "initialize",
            "navigate_to",
            "ensure_thea_authenticated",
            "_is_thea_authenticated",
            "execute_script",
            "find_element",
            "find_elements",
            "take_screenshot",
            "get_page_source",
            "refresh",
            "back",
            "forward",
            "get_current_url",
            "get_title",
            "close",
            "__enter__",
            "__exit__"
        ],
        "classes": {
            "TheaBrowserService": {
                "methods": [
                    "__init__",
                    "initialize",
                    "navigate_to",
                    "ensure_thea_authenticated",
                    "_is_thea_authenticated",
                    "execute_script",
                    "find_element",
                    "find_elements",
                    "take_screenshot",
                    "get_page_source",
                    "refresh",
                    "back",
                    "forward",
                    "get_current_url",
                    "get_title",
                    "close",
                    "__enter__",
                    "__exit__"
                ],
                "docstring": "Unified browser service for Thea Manager automation.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 37
    },
    "src\\infrastructure\\browser\\thea_content_operations.py": {
        "language": ".py",
        "functions": [
            "create_thea_content_operations",
            "__init__",
            "collect_response",
            "_extract_response_text",
            "_is_response_complete",
            "scrape_content",
            "_clean_content",
            "_extract_metadata",
            "_calculate_quality",
            "send_message",
            "_find_input_element",
            "_find_send_button",
            "navigate_to_conversation",
            "verify_page_loaded",
            "get_page_text",
            "wait_with_exponential_backoff"
        ],
        "classes": {
            "ScrapedContent": {
                "methods": [],
                "docstring": "Represents scraped content from Thea Manager.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TheaContentOperations": {
                "methods": [
                    "__init__",
                    "collect_response",
                    "_extract_response_text",
                    "_is_response_complete",
                    "scrape_content",
                    "_clean_content",
                    "_extract_metadata",
                    "_calculate_quality",
                    "send_message",
                    "_find_input_element",
                    "_find_send_button",
                    "navigate_to_conversation",
                    "verify_page_loaded",
                    "get_page_text",
                    "wait_with_exponential_backoff"
                ],
                "docstring": "Unified content operations for Thea Manager automation.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 31
    },
    "src\\infrastructure\\browser\\thea_session_management.py": {
        "language": ".py",
        "functions": [
            "create_thea_session_management",
            "__init__",
            "save_cookies",
            "load_cookies",
            "has_valid_session",
            "get_session_info_from_cookies",
            "_persist_cookies",
            "_load_persisted_cookies",
            "create_session",
            "get_session_info",
            "end_session",
            "can_make_request",
            "record_request",
            "wait_for_rate_limit_reset",
            "handle_rate_limit_error",
            "get_rate_limit_status",
            "cleanup_old_sessions"
        ],
        "classes": {
            "TheaSessionManagement": {
                "methods": [
                    "__init__",
                    "save_cookies",
                    "load_cookies",
                    "has_valid_session",
                    "get_session_info_from_cookies",
                    "_persist_cookies",
                    "_load_persisted_cookies",
                    "create_session",
                    "get_session_info",
                    "end_session",
                    "can_make_request",
                    "record_request",
                    "wait_for_rate_limit_reset",
                    "handle_rate_limit_error",
                    "get_rate_limit_status",
                    "cleanup_old_sessions"
                ],
                "docstring": "Unified session, cookie, and rate limit management.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 33
    },
    "src\\infrastructure\\browser\\unified\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "demo_thea_live.py": {
        "language": ".py",
        "functions": [
            "demo_thea_automation"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "demo_thea_interactive.py": {
        "language": ".py",
        "functions": [
            "interactive_demo"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "demo_thea_simple.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "demo_working_thea.py": {
        "language": ".py",
        "functions": [
            "demo_working"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "run_discord_messaging.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "temp_violation_scanner.py": {
        "language": ".py",
        "functions": [
            "scan_violations"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "thea_automation_browser.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_browser",
            "is_logged_in",
            "ensure_login",
            "_handle_manual_login",
            "cleanup",
            "get_driver"
        ],
        "classes": {
            "TheaBrowserManager": {
                "methods": [
                    "__init__",
                    "start_browser",
                    "is_logged_in",
                    "ensure_login",
                    "_handle_manual_login",
                    "cleanup",
                    "get_driver"
                ],
                "docstring": "Manages browser lifecycle and login verification.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "thea_automation_deprecated.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "save_cookies",
            "load_cookies",
            "has_valid_cookies",
            "start_browser",
            "is_logged_in",
            "ensure_login",
            "send_message",
            "wait_for_response",
            "save_conversation",
            "communicate",
            "cleanup",
            "__enter__",
            "__exit__"
        ],
        "classes": {
            "TheaConfig": {
                "methods": [],
                "docstring": "Configuration for Thea automation.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TheaAutomation": {
                "methods": [
                    "__init__",
                    "save_cookies",
                    "load_cookies",
                    "has_valid_cookies",
                    "start_browser",
                    "is_logged_in",
                    "ensure_login",
                    "send_message",
                    "wait_for_response",
                    "save_conversation",
                    "communicate",
                    "cleanup",
                    "__enter__",
                    "__exit__"
                ],
                "docstring": "Unified Thea automation system.\n\nHandles everything: cookies, login, messaging, and response capture.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 29
    },
    "thea_authentication_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "ensure_login",
            "_automated_login",
            "_handle_2fa",
            "_manual_login",
            "force_logout"
        ],
        "classes": {
            "TheaAuthenticationHandler": {
                "methods": [
                    "__init__",
                    "ensure_login",
                    "_automated_login",
                    "_handle_2fa",
                    "_manual_login",
                    "force_logout"
                ],
                "docstring": "Handles automated and manual login for Thea/ChatGPT.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "thea_cookie_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "save_cookies",
            "load_cookies",
            "has_valid_cookies",
            "clear_cookies"
        ],
        "classes": {
            "TheaCookieManager": {
                "methods": [
                    "__init__",
                    "save_cookies",
                    "load_cookies",
                    "has_valid_cookies",
                    "clear_cookies"
                ],
                "docstring": "Manages cookie persistence for Thea sessions.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "thea_login_detector.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "is_logged_in",
            "_check_url_patterns",
            "_check_logout_button",
            "_check_user_menu",
            "_check_new_chat_button",
            "_check_login_buttons"
        ],
        "classes": {
            "TheaLoginDetector": {
                "methods": [
                    "__init__",
                    "is_logged_in",
                    "_check_url_patterns",
                    "_check_logout_button",
                    "_check_user_menu",
                    "_check_new_chat_button",
                    "_check_login_buttons"
                ],
                "docstring": "Detects login status on Thea/ChatGPT pages.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "thea_login_handler_refactored.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "ensure_login",
            "force_logout",
            "_is_logged_in"
        ],
        "classes": {
            "TheaLoginHandler": {
                "methods": [
                    "__init__",
                    "ensure_login",
                    "force_logout",
                    "_is_logged_in"
                ],
                "docstring": "Unified Thea login handler facade (V2 compliant).\n\nDelegates to:\n- TheaCookieManager (cookie persistence)\n- TheaLoginDetector (login status detection)\n- TheaAuthenticationHandler (authentication operations)",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "thea_automation_cookie_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "save_cookies",
            "load_cookies",
            "has_valid_cookies",
            "_filter_auth_cookies",
            "_load_cookies_into_driver",
            "_filter_valid_cookies"
        ],
        "classes": {
            "TheaCookieManager": {
                "methods": [
                    "__init__",
                    "save_cookies",
                    "load_cookies",
                    "has_valid_cookies",
                    "_filter_auth_cookies",
                    "_load_cookies_into_driver",
                    "_filter_valid_cookies"
                ],
                "docstring": "Manages cookie persistence for Thea automation.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "thea_automation_messaging.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "send_message",
            "wait_for_response",
            "_process_response_result",
            "save_conversation"
        ],
        "classes": {
            "TheaMessagingManager": {
                "methods": [
                    "__init__",
                    "send_message",
                    "wait_for_response",
                    "_process_response_result",
                    "save_conversation"
                ],
                "docstring": "Manages message sending and response capture for Thea automation.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "tools\\compliance_dashboard.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "generate_dashboard"
        ],
        "classes": {
            "ComplianceDashboard": {
                "methods": [
                    "__init__",
                    "generate_dashboard"
                ],
                "docstring": "Generates compliance dashboards.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 5
    },
    "tools\\complexity_analyzer_formatters.py": {
        "language": ".py",
        "functions": [
            "format_report",
            "generate_summary_report"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tools\\projectscanner.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tools\\autonomous_leaderboard.py": {
        "language": ".py",
        "functions": [
            "show_leaderboard",
            "award_achievement_cli",
            "show_agent_details",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "tools\\dashboard_data_aggregator.py": {
        "language": ".py",
        "functions": [
            "aggregate_data",
            "identify_top_violators",
            "calculate_overall_score"
        ],
        "classes": {
            "DashboardData": {
                "methods": [],
                "docstring": "Data for dashboard generation.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "DashboardDataAggregator": {
                "methods": [
                    "aggregate_data",
                    "identify_top_violators",
                    "calculate_overall_score"
                ],
                "docstring": "Aggregates data from all quality tools.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "tools\\complexity_analyzer_cli.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tools\\compliance_history_tracker.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "record_snapshot",
            "get_recent_snapshots",
            "get_all_snapshots",
            "get_trend_data",
            "get_week_comparison",
            "generate_trend_report",
            "format_trend_report"
        ],
        "classes": {
            "ComplianceHistoryTracker": {
                "methods": [
                    "__init__",
                    "record_snapshot",
                    "get_recent_snapshots",
                    "get_all_snapshots",
                    "get_trend_data",
                    "get_week_comparison",
                    "generate_trend_report",
                    "format_trend_report"
                ],
                "docstring": "Tracks compliance history and trends.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 17
    },
    "tools\\refactoring_models.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "CodeEntity": {
                "methods": [],
                "docstring": "Represents a code entity (class, function, etc.).",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ModuleSuggestion": {
                "methods": [],
                "docstring": "Suggested module extraction.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RefactoringSuggestion": {
                "methods": [],
                "docstring": "Complete refactoring suggestion for a file.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 0
    },
    "tools\\complexity_analyzer_core.py": {
        "language": ".py",
        "functions": [
            "has_violations",
            "__init__",
            "visit_If",
            "visit_While",
            "visit_For",
            "visit_ExceptHandler",
            "visit_With",
            "visit_BoolOp",
            "visit_comprehension",
            "__init__",
            "visit_If",
            "visit_While",
            "visit_For",
            "visit_ExceptHandler",
            "visit_BoolOp",
            "visit_Continue",
            "visit_Break",
            "__init__",
            "analyze_file",
            "_analyze_function",
            "_check_violations",
            "_get_severity",
            "_get_cyclomatic_suggestion",
            "_get_cognitive_suggestion",
            "_get_nesting_suggestion",
            "__init__",
            "analyze_file",
            "analyze_directory",
            "_should_skip_file",
            "generate_summary_report"
        ],
        "classes": {
            "ComplexityMetrics": {
                "methods": [],
                "docstring": "Complexity metrics for a code entity.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ComplexityViolation": {
                "methods": [],
                "docstring": "Represents a complexity violation.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ComplexityReport": {
                "methods": [
                    "has_violations"
                ],
                "docstring": "Complexity analysis report.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CyclomaticComplexityVisitor": {
                "methods": [
                    "__init__",
                    "visit_If",
                    "visit_While",
                    "visit_For",
                    "visit_ExceptHandler",
                    "visit_With",
                    "visit_BoolOp",
                    "visit_comprehension"
                ],
                "docstring": "AST visitor to calculate cyclomatic complexity.",
                "base_classes": [
                    "ast.NodeVisitor"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CognitiveComplexityVisitor": {
                "methods": [
                    "__init__",
                    "visit_If",
                    "visit_While",
                    "visit_For",
                    "visit_ExceptHandler",
                    "visit_BoolOp",
                    "visit_Continue",
                    "visit_Break"
                ],
                "docstring": "AST visitor to calculate cognitive complexity.",
                "base_classes": [
                    "ast.NodeVisitor"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ComplexityAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_file",
                    "_analyze_function",
                    "_check_violations",
                    "_get_severity",
                    "_get_cyclomatic_suggestion",
                    "_get_cognitive_suggestion",
                    "_get_nesting_suggestion"
                ],
                "docstring": "Analyzes code complexity using AST.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ComplexityAnalysisService": {
                "methods": [
                    "__init__",
                    "analyze_file",
                    "analyze_directory",
                    "_should_skip_file",
                    "generate_summary_report"
                ],
                "docstring": "Service for complexity analysis operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 60
    },
    "tools\\v2_checker_formatters.py": {
        "language": ".py",
        "functions": [
            "get_file_suggestions",
            "get_complexity_analysis",
            "format_report"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "tools\\projectscanner_language_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_tree_sitter_language",
            "analyze_file",
            "_analyze_python",
            "_analyze_rust",
            "_analyze_javascript",
            "_traverse",
            "get_node_text",
            "_traverse"
        ],
        "classes": {
            "LanguageAnalyzer": {
                "methods": [
                    "__init__",
                    "_init_tree_sitter_language",
                    "analyze_file",
                    "_analyze_python",
                    "_analyze_rust",
                    "_analyze_javascript"
                ],
                "docstring": "Handles language-specific code analysis for different programming languages.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 15
    },
    "tools\\projectscanner_core.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_cache",
            "save_cache",
            "scan_project",
            "_process_file",
            "generate_init_files",
            "export_chatgpt_context",
            "generate_modular_reports",
            "categorize_agents",
            "_maturity_level",
            "_agent_type"
        ],
        "classes": {
            "ProjectScanner": {
                "methods": [
                    "__init__",
                    "load_cache",
                    "save_cache",
                    "scan_project",
                    "_process_file",
                    "generate_init_files",
                    "export_chatgpt_context",
                    "generate_modular_reports",
                    "categorize_agents",
                    "_maturity_level",
                    "_agent_type"
                ],
                "docstring": "A universal project scanner that:\n  - Identifies Python, Rust, JS, TS files.\n  - Extracts functions, classes, routes, complexity.\n  - Caches file hashes to skip unchanged files.\n  - Detects moved files by matching file hashes.\n  - Merges new analysis into existing project_analysis.json (preserving old entries).\n  - Exports a merged ChatGPT context if requested (preserving old context data).\n  - Processes files asynchronously with BotWorker threads.\n  - Auto-generates __init__.py files for Python packages.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 22
    },
    "tools\\refactoring_ast_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_file",
            "_extract_entities",
            "_extract_class",
            "_extract_function",
            "_extract_import",
            "_extract_class_methods",
            "_categorize_method",
            "_categorize_class",
            "_categorize_function"
        ],
        "classes": {
            "ASTAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_file",
                    "_extract_entities",
                    "_extract_class",
                    "_extract_function",
                    "_extract_import",
                    "_extract_class_methods",
                    "_categorize_method",
                    "_categorize_class",
                    "_categorize_function"
                ],
                "docstring": "AST analyzer for code structure analysis.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 20
    },
    "tools\\refactoring_cli.py": {
        "language": ".py",
        "functions": [
            "format_suggestion",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tools\\v2_checker_models.py": {
        "language": ".py",
        "functions": [
            "has_violations",
            "critical_violations",
            "major_violations",
            "minor_violations"
        ],
        "classes": {
            "ComplianceViolation": {
                "methods": [],
                "docstring": "Represents a V2 compliance violation.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ComplianceReport": {
                "methods": [
                    "has_violations",
                    "critical_violations",
                    "major_violations",
                    "minor_violations"
                ],
                "docstring": "V2 compliance scan report.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "tools\\projectscanner_modular_reports.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_modular_reports",
            "_generate_agent_analysis",
            "_generate_module_analysis",
            "_generate_file_type_analysis",
            "_generate_complexity_analysis",
            "_generate_dependency_analysis",
            "_generate_architecture_overview"
        ],
        "classes": {
            "ModularReportGenerator": {
                "methods": [
                    "__init__",
                    "generate_modular_reports",
                    "_generate_agent_analysis",
                    "_generate_module_analysis",
                    "_generate_file_type_analysis",
                    "_generate_complexity_analysis",
                    "_generate_dependency_analysis",
                    "_generate_architecture_overview"
                ],
                "docstring": "Creates modular, agent-digestible analysis files instead of one massive JSON.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "tools\\projectscanner_legacy_reports.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_existing_report",
            "save_report",
            "generate_init_files",
            "load_existing_chatgpt_context",
            "export_chatgpt_context"
        ],
        "classes": {
            "ReportGenerator": {
                "methods": [
                    "__init__",
                    "load_existing_report",
                    "save_report",
                    "generate_init_files",
                    "load_existing_chatgpt_context",
                    "export_chatgpt_context"
                ],
                "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "tools\\dashboard_styles.py": {
        "language": ".py",
        "functions": [
            "get_css"
        ],
        "classes": {
            "DashboardStyles": {
                "methods": [
                    "get_css"
                ],
                "docstring": "Generates CSS styles for compliance dashboards.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "tools\\cleanup_documentation_deduplicator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "apply_deduplication",
            "_normalize_topic",
            "_select_preferred_file"
        ],
        "classes": {
            "DocumentationDeduplicator": {
                "methods": [
                    "__init__",
                    "apply_deduplication",
                    "_normalize_topic",
                    "_select_preferred_file"
                ],
                "docstring": "Handles deduplication of documentation files.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "tools\\dashboard_html_generator_refactored.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_html",
            "generate_header",
            "generate_score_card",
            "generate_metrics_grid",
            "generate_violations_section",
            "generate_complexity_section",
            "generate_top_violators",
            "generate_suggestions",
            "generate_footer",
            "generate_violators_rows",
            "generate_suggestions_rows",
            "get_score_class",
            "get_priority_badge",
            "generate_week_comparison",
            "generate_historical_trends",
            "get_change_indicator"
        ],
        "classes": {
            "DashboardHTMLGenerator": {
                "methods": [
                    "__init__",
                    "generate_html",
                    "generate_header",
                    "generate_score_card",
                    "generate_metrics_grid",
                    "generate_violations_section",
                    "generate_complexity_section",
                    "generate_top_violators",
                    "generate_suggestions",
                    "generate_footer",
                    "generate_violators_rows",
                    "generate_suggestions_rows",
                    "get_score_class",
                    "get_priority_badge",
                    "generate_week_comparison",
                    "generate_historical_trends"
                ],
                "docstring": "Generates HTML for compliance dashboards.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 33
    },
    "tools\\dashboard_charts.py": {
        "language": ".py",
        "functions": [
            "generate_chart_scripts"
        ],
        "classes": {
            "DashboardCharts": {
                "methods": [
                    "generate_chart_scripts"
                ],
                "docstring": "Generates JavaScript for interactive Chart.js visualizations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "tools\\cleanup_documentation_reference_scanner.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "scan_references",
            "_glob_files",
            "_is_referenced"
        ],
        "classes": {
            "ReferenceScanner": {
                "methods": [
                    "__init__",
                    "scan_references",
                    "_glob_files",
                    "_is_referenced"
                ],
                "docstring": "Scans for references to documentation files in code and canonical docs.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "tools\\v2_checker_cli.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tools\\cleanup_documentation_refactored.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "run",
            "scan_documentation_files",
            "apply_criteria",
            "_is_agent_chatter",
            "apply_preserve_allowlist",
            "generate_report",
            "execute_archive",
            "_flatten_candidates",
            "_write_list"
        ],
        "classes": {
            "DocumentationCleanup": {
                "methods": [
                    "__init__",
                    "run",
                    "scan_documentation_files",
                    "apply_criteria",
                    "_is_agent_chatter",
                    "apply_preserve_allowlist",
                    "generate_report",
                    "execute_archive",
                    "_flatten_candidates",
                    "_write_list"
                ],
                "docstring": "Archive-first documentation cleanup with safety guards.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "ActionAgent"
            }
        },
        "routes": [],
        "complexity": 21
    },
    "tools\\toolbelt_registry.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_build_flag_map",
            "get_tool_for_flag",
            "get_tool_by_name",
            "list_tools",
            "get_all_flags"
        ],
        "classes": {
            "ToolRegistry": {
                "methods": [
                    "__init__",
                    "_build_flag_map",
                    "get_tool_for_flag",
                    "get_tool_by_name",
                    "list_tools",
                    "get_all_flags"
                ],
                "docstring": "Tool registry for CLI Toolbelt.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "tools\\duplication_scanner.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "scan_codebase",
            "_should_include_file",
            "_get_function_hash",
            "_get_class_hash",
            "_get_node_content",
            "_clean_code_content"
        ],
        "classes": {
            "DuplicationScanner": {
                "methods": [
                    "__init__",
                    "scan_codebase",
                    "_should_include_file",
                    "_get_function_hash",
                    "_get_class_hash",
                    "_get_node_content",
                    "_clean_code_content"
                ],
                "docstring": "Scans codebase for potential duplications using AST hashing.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "tools\\duplication_analysis.py": {
        "language": ".py",
        "functions": [
            "analyze_duplicates",
            "_categorize_function_duplicates",
            "_categorize_class_duplicates",
            "_get_file_domain",
            "_are_contents_identical",
            "_are_contents_similar",
            "_calculate_similarity"
        ],
        "classes": {
            "DuplicationAnalysis": {
                "methods": [
                    "analyze_duplicates",
                    "_categorize_function_duplicates",
                    "_categorize_class_duplicates",
                    "_get_file_domain",
                    "_are_contents_identical",
                    "_are_contents_similar",
                    "_calculate_similarity"
                ],
                "docstring": "Analyzes and categorizes duplications.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "tools\\toolbelt_help.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_help",
            "show_tool_help"
        ],
        "classes": {
            "HelpGenerator": {
                "methods": [
                    "__init__",
                    "generate_help",
                    "show_tool_help"
                ],
                "docstring": "Help system generator for CLI Toolbelt.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "tools\\compliance_history_models.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "ComplianceSnapshot": {
                "methods": [],
                "docstring": "Snapshot of compliance metrics at a point in time.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TrendReport": {
                "methods": [],
                "docstring": "Trend analysis report.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 0
    },
    "tools\\duplication_reporter.py": {
        "language": ".py",
        "functions": [
            "generate_report"
        ],
        "classes": {
            "DuplicationReporter": {
                "methods": [
                    "generate_report"
                ],
                "docstring": "Generates reports from duplication analysis.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "tools\\functionality_signature.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_signature",
            "_should_include_file",
            "extract_functions",
            "extract_classes",
            "extract_imports"
        ],
        "classes": {
            "SignatureGenerator": {
                "methods": [
                    "__init__",
                    "generate_signature",
                    "_should_include_file",
                    "extract_functions",
                    "extract_classes",
                    "extract_imports"
                ],
                "docstring": "Generates functionality signatures from codebase.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "tools\\toolbelt_runner.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute_tool"
        ],
        "classes": {
            "ToolRunner": {
                "methods": [
                    "__init__",
                    "execute_tool"
                ],
                "docstring": "Tool execution engine for CLI Toolbelt.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "tools\\soft_onboard_cli.py": {
        "language": ".py",
        "functions": [
            "main",
            "execute_single_step"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tools\\functionality_comparison.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "save_baseline",
            "load_baseline",
            "compare_with_baseline"
        ],
        "classes": {
            "FunctionalityComparison": {
                "methods": [
                    "__init__",
                    "save_baseline",
                    "load_baseline",
                    "compare_with_baseline"
                ],
                "docstring": "Compares functionality signatures.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "tools\\functionality_reports.py": {
        "language": ".py",
        "functions": [
            "generate_report"
        ],
        "classes": {
            "FunctionalityReports": {
                "methods": [
                    "generate_report"
                ],
                "docstring": "Generates verification reports.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "tools\\duplication_planner.py": {
        "language": ".py",
        "functions": [
            "generate_consolidation_plan",
            "_choose_target_file",
            "_get_file_domain"
        ],
        "classes": {
            "DuplicationPlanner": {
                "methods": [
                    "generate_consolidation_plan",
                    "_choose_target_file",
                    "_get_file_domain"
                ],
                "docstring": "Generates consolidation plans for duplications.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "tools_v2\\tool_registry.py": {
        "language": ".py",
        "functions": [
            "get_tool_registry",
            "__init__",
            "resolve",
            "list_tools",
            "list_by_category",
            "export_lock"
        ],
        "classes": {
            "ToolRegistry": {
                "methods": [
                    "__init__",
                    "resolve",
                    "list_tools",
                    "list_by_category",
                    "export_lock"
                ],
                "docstring": "Central registry for tool resolution and caching.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 11
    },
    "tools_v2\\adapters\\error_types.py": {
        "language": ".py",
        "functions": [
            "format_toolbelt_error",
            "__init__",
            "__init__",
            "__init__",
            "__init__"
        ],
        "classes": {
            "ToolbeltError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Base exception for toolbelt operations.",
                "base_classes": [
                    "Exception"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ToolNotFoundError": {
                "methods": [],
                "docstring": "Raised when requested tool is not found in registry.",
                "base_classes": [
                    "ToolbeltError"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ToolValidationError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Raised when tool parameter validation fails.",
                "base_classes": [
                    "ToolbeltError"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ToolExecutionError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Raised when tool execution fails.",
                "base_classes": [
                    "ToolbeltError"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ToolDependencyError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Raised when tool dependencies are missing.",
                "base_classes": [
                    "ToolbeltError"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ToolConfigurationError": {
                "methods": [],
                "docstring": "Raised when tool configuration is invalid.",
                "base_classes": [
                    "ToolbeltError"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 9
    },
    "tools_v2\\adapters\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\compliance_history_reports.py": {
        "language": ".py",
        "functions": [
            "get_trend_data",
            "get_week_comparison",
            "generate_trend_report",
            "_generate_recommendations",
            "format_trend_report"
        ],
        "classes": {
            "ComplianceReports": {
                "methods": [
                    "get_trend_data",
                    "get_week_comparison",
                    "generate_trend_report",
                    "_generate_recommendations",
                    "format_trend_report"
                ],
                "docstring": "Generates trend reports and analysis.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "tools\\compliance_history_database.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_ensure_database",
            "save_snapshot",
            "get_recent_snapshots",
            "get_all_snapshots",
            "_row_to_snapshot"
        ],
        "classes": {
            "ComplianceDatabase": {
                "methods": [
                    "__init__",
                    "_ensure_database",
                    "save_snapshot",
                    "get_recent_snapshots",
                    "get_all_snapshots",
                    "_row_to_snapshot"
                ],
                "docstring": "Handles database operations for compliance history.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "tools\\toolbelt.py": {
        "language": ".py",
        "functions": [
            "create_parser",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tools_v2\\categories\\messaging_tools.py": {
        "language": ".py",
        "functions": [
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute"
        ],
        "classes": {
            "SendMessageTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Send message to specific agent.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "BroadcastTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Broadcast message to all agents.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "InboxCheckTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Check agent inbox with optional semantic search.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 18
    },
    "tools_v2\\categories\\agent_ops_tools.py": {
        "language": ".py",
        "functions": [
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute"
        ],
        "classes": {
            "AgentStatusTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Get comprehensive agent status.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ClaimTaskTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Claim next available task from queue.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "tools_v2\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools_v2\\categories\\v2_tools.py": {
        "language": ".py",
        "functions": [
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute"
        ],
        "classes": {
            "V2CheckTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Check V2 compliance violations.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "V2ReportTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Generate V2 compliance report.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "tools_v2\\categories\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\__main__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools_v2\\categories\\vector_tools.py": {
        "language": ".py",
        "functions": [
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute"
        ],
        "classes": {
            "TaskContextTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Get intelligent task context from vector DB.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "VectorSearchTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Semantic search across vector database.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "IndexWorkTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Index completed work to vector database.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 18
    },
    "tools_v2\\categories\\docs_tools.py": {
        "language": ".py",
        "functions": [
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute"
        ],
        "classes": {
            "DocsSearchTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Search project documentation semantically.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "DocsExportTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Export agent knowledge base.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "tools_v2\\categories\\onboarding_tools.py": {
        "language": ".py",
        "functions": [
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute"
        ],
        "classes": {
            "SoftOnboardTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Soft onboarding (3-step cleanup + onboard).",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "HardOnboardTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Hard onboarding (complete reset with confirmation).",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "tools_v2\\toolbelt_core.py": {
        "language": ".py",
        "functions": [
            "get_toolbelt_core",
            "__init__",
            "run",
            "list_tools",
            "list_categories",
            "get_tool_help",
            "get_execution_history",
            "clear_history",
            "_record_execution"
        ],
        "classes": {
            "ToolbeltCore": {
                "methods": [
                    "__init__",
                    "run",
                    "list_tools",
                    "list_categories",
                    "get_tool_help",
                    "get_execution_history",
                    "clear_history",
                    "_record_execution"
                ],
                "docstring": "Core orchestrator for agent toolbelt operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "ActionAgent"
            }
        },
        "routes": [],
        "complexity": 17
    },
    "scripts\\agent_onboarding.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "get_available_agent_id",
            "create_agent_workspace",
            "send_captain_acknowledgment",
            "run_contract_assignment",
            "display_onboarding_summary",
            "run_onboarding"
        ],
        "classes": {
            "AgentOnboarding": {
                "methods": [
                    "__init__",
                    "get_available_agent_id",
                    "create_agent_workspace",
                    "send_captain_acknowledgment",
                    "run_contract_assignment",
                    "display_onboarding_summary",
                    "run_onboarding"
                ],
                "docstring": "Automated onboarding system for new agents.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 15
    },
    "tools_v2\\adapters\\base_adapter.py": {
        "language": ".py",
        "functions": [
            "validate_params",
            "to_dict",
            "get_spec",
            "validate",
            "execute",
            "get_help"
        ],
        "classes": {
            "ToolSpec": {
                "methods": [
                    "validate_params"
                ],
                "docstring": "Specification for a tool.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ToolResult": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Result from tool execution.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "IToolAdapter": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute",
                    "get_help"
                ],
                "docstring": "Abstract base class for tool adapters.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "tools_v2\\categories\\health_tools.py": {
        "language": ".py",
        "functions": [
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute"
        ],
        "classes": {
            "HealthPingTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Check project health status.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SnapshotTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Create or update captain snapshot.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "tools_v2\\categories\\compliance_tools.py": {
        "language": ".py",
        "functions": [
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute"
        ],
        "classes": {
            "ComplianceHistoryTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "View compliance history and trends.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "PolicyCheckTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Check policy compliance.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "scripts\\setup_dream_os_dreamvault.py": {
        "language": ".py",
        "functions": [
            "install_dependencies",
            "create_runtime_directories",
            "test_imports",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "tools\\agent_toolbelt.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_create_parser",
            "_add_vector_parser",
            "_add_messaging_parser",
            "_add_analysis_parser",
            "_add_v2_parser",
            "_add_agent_parser",
            "_add_consolidation_parser",
            "_add_refactor_parser",
            "_add_compliance_parser",
            "execute"
        ],
        "classes": {
            "AgentToolbeltCLI": {
                "methods": [
                    "__init__",
                    "_create_parser",
                    "_add_vector_parser",
                    "_add_messaging_parser",
                    "_add_analysis_parser",
                    "_add_v2_parser",
                    "_add_agent_parser",
                    "_add_consolidation_parser",
                    "_add_refactor_parser",
                    "_add_compliance_parser",
                    "execute"
                ],
                "docstring": "CLI interface for Agent Toolbelt V2.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 23
    },
    "tools_v2\\categories\\analysis_tools.py": {
        "language": ".py",
        "functions": [
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute"
        ],
        "classes": {
            "ProjectScanTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Run comprehensive project scan.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ComplexityTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Analyze code complexity.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "DuplicationTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Find duplicate code.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 18
    },
    "trading_robot\\strategies\\strategy_implementations.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze",
            "__init__",
            "analyze"
        ],
        "classes": {
            "TrendFollowingStrategy": {
                "methods": [
                    "__init__",
                    "analyze"
                ],
                "docstring": "Trend following strategy using moving averages.",
                "base_classes": [
                    "BaseStrategy"
                ],
                "maturity": "Core Asset",
                "agent_type": "SignalAgent"
            },
            "MeanReversionStrategy": {
                "methods": [
                    "__init__",
                    "analyze"
                ],
                "docstring": "Mean reversion strategy using Bollinger Bands.",
                "base_classes": [
                    "BaseStrategy"
                ],
                "maturity": "Core Asset",
                "agent_type": "SignalAgent"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "trading_robot\\strategies\\risk_management.py": {
        "language": ".py",
        "functions": [
            "calculate_position_size",
            "get_consensus_signal"
        ],
        "classes": {
            "RiskManagement": {
                "methods": [
                    "calculate_position_size",
                    "get_consensus_signal"
                ],
                "docstring": "Risk management utilities for trading strategies.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "scripts\\setup_gpt_automation.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "trading_robot\\web\\dashboard_routes.py": {
        "language": ".py",
        "functions": [
            "setup_dashboard_routes"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\core\\messaging_inbox_rotation.py": {
        "language": ".py",
        "functions": [
            "get_rotation_manager",
            "__init__",
            "should_rotate",
            "rotate_inbox",
            "check_and_rotate",
            "rotate_all_inboxes",
            "cleanup_old_archives"
        ],
        "classes": {
            "InboxRotationManager": {
                "methods": [
                    "__init__",
                    "should_rotate",
                    "rotate_inbox",
                    "check_and_rotate",
                    "rotate_all_inboxes",
                    "cleanup_old_archives"
                ],
                "docstring": "Manages inbox file rotation to prevent unbounded growth.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 13
    },
    "src\\core\\messaging_models_core.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "DeliveryMethod": {
                "methods": [],
                "docstring": "Delivery methods for messages.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "UnifiedMessageType": {
                "methods": [],
                "docstring": "Message types for unified messaging.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "UnifiedMessagePriority": {
                "methods": [],
                "docstring": "Message priorities for unified messaging.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "UnifiedMessageTag": {
                "methods": [],
                "docstring": "Message tags for unified messaging.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RecipientType": {
                "methods": [],
                "docstring": "Recipient types for unified messaging.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SenderType": {
                "methods": [],
                "docstring": "Sender types for unified messaging.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "UnifiedMessage": {
                "methods": [],
                "docstring": "Core message structure for unified messaging.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 0
    },
    "trading_robot\\strategies\\signal_processing.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "Signal": {
                "methods": [],
                "docstring": "Trading signals.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "StrategyResult": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Result of strategy analysis.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\core\\config_browser.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\config_thresholds.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\message_formatters.py": {
        "language": ".py",
        "functions": [
            "format_message_full",
            "format_message_compact",
            "format_message_minimal",
            "format_message"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "src\\core\\error_handling\\recovery_strategies.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "can_recover",
            "execute_recovery",
            "__init__",
            "can_recover",
            "execute_recovery",
            "__init__",
            "can_recover",
            "execute_recovery",
            "__init__",
            "can_recover",
            "execute_recovery"
        ],
        "classes": {
            "RecoveryStrategy": {
                "methods": [
                    "__init__",
                    "can_recover",
                    "execute_recovery"
                ],
                "docstring": "Base class for error recovery strategies.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ServiceRestartStrategy": {
                "methods": [
                    "__init__",
                    "can_recover",
                    "execute_recovery"
                ],
                "docstring": "Strategy for restarting failed services.",
                "base_classes": [
                    "RecoveryStrategy"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ConfigurationResetStrategy": {
                "methods": [
                    "__init__",
                    "can_recover",
                    "execute_recovery"
                ],
                "docstring": "Strategy for resetting configuration to defaults.",
                "base_classes": [
                    "RecoveryStrategy"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ResourceCleanupStrategy": {
                "methods": [
                    "__init__",
                    "can_recover",
                    "execute_recovery"
                ],
                "docstring": "Strategy for cleaning up stuck resources.",
                "base_classes": [
                    "RecoveryStrategy"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 24
    },
    "src\\core\\error_handling\\error_handling_system.py": {
        "language": ".py",
        "functions": [
            "with_error_recovery",
            "get_error_handling_orchestrator",
            "__init__",
            "add_strategy",
            "attempt_recovery",
            "get_recovery_statistics",
            "__init__",
            "register_retry_mechanism",
            "register_circuit_breaker",
            "execute_with_comprehensive_error_handling",
            "get_system_health_report",
            "get_component_status",
            "cleanup_stale_data",
            "reset_component",
            "decorator",
            "wrapped_operation",
            "wrapper",
            "circuit_protected_operation"
        ],
        "classes": {
            "ErrorRecoveryManager": {
                "methods": [
                    "__init__",
                    "add_strategy",
                    "attempt_recovery",
                    "get_recovery_statistics"
                ],
                "docstring": "Manages error recovery strategies.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "UnifiedErrorHandlingOrchestrator": {
                "methods": [
                    "__init__",
                    "register_retry_mechanism",
                    "register_circuit_breaker",
                    "execute_with_comprehensive_error_handling",
                    "get_system_health_report",
                    "get_component_status",
                    "cleanup_stale_data",
                    "reset_component"
                ],
                "docstring": "Unified Error Handling Orchestrator - V2 Compliant\n\nOrchestrates all error handling functionality:\n- Retry operations with exponential backoff\n- Circuit breaker fault tolerance\n- Recovery strategies and automatic remediation\n- Comprehensive error tracking and reporting",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 30
    },
    "src\\core\\error_handling\\archive_c055\\coordination_error_handler.py": {
        "language": ".py",
        "functions": [
            "handle_errors",
            "handle_coordination_errors",
            "handle_errors",
            "__init__",
            "execute",
            "__init__",
            "register_retry_mechanism",
            "get_system_health_report",
            "get_component_status",
            "cleanup_stale_data",
            "__init__",
            "add_strategy",
            "__init__",
            "execute_with_retry",
            "__init__",
            "call",
            "_should_attempt_reset",
            "_on_success",
            "_on_failure",
            "wrapper",
            "__init__",
            "_register_coordination_strategies",
            "execute_with_error_handling",
            "register_circuit_breaker",
            "register_retry_mechanism",
            "get_error_report",
            "add_recovery_strategy",
            "get_component_status",
            "cleanup_stale_data",
            "reset_component",
            "decorator",
            "restart_coordination_service",
            "reset_coordination_config",
            "wrapper",
            "operation"
        ],
        "classes": {
            "RecoveryStrategy": {
                "methods": [
                    "__init__",
                    "execute"
                ],
                "docstring": "Base class for recovery strategies.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ErrorHandlingOrchestrator": {
                "methods": [
                    "__init__",
                    "register_retry_mechanism",
                    "get_system_health_report",
                    "get_component_status",
                    "cleanup_stale_data"
                ],
                "docstring": "Stub implementation for error handling orchestrator.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RecoveryManager": {
                "methods": [
                    "__init__",
                    "add_strategy"
                ],
                "docstring": "Stub implementation for recovery manager.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CircuitState": {
                "methods": [],
                "docstring": "Circuit breaker states.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RetryHandler": {
                "methods": [
                    "__init__",
                    "execute_with_retry"
                ],
                "docstring": "Retry handler for failed operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CircuitBreaker": {
                "methods": [
                    "__init__",
                    "call",
                    "_should_attempt_reset",
                    "_on_success",
                    "_on_failure"
                ],
                "docstring": "Circuit breaker for fault tolerance.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CoordinationErrorHandler": {
                "methods": [
                    "__init__",
                    "_register_coordination_strategies",
                    "execute_with_error_handling",
                    "register_circuit_breaker",
                    "register_retry_mechanism",
                    "get_error_report",
                    "add_recovery_strategy",
                    "get_component_status",
                    "cleanup_stale_data",
                    "reset_component"
                ],
                "docstring": "Main error handler for coordination and communication systems.\n\nThis class now serves as a lightweight facade over the modular error handling\nsystem, achieving V2 compliance through component orchestration.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 61
    },
    "src\\core\\error_handling\\error_handling_core.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\managers\\base_manager_helpers.py": {
        "language": ".py",
        "functions": [
            "sync_properties",
            "get_comprehensive_status",
            "update_config"
        ],
        "classes": {
            "ManagerPropertySync": {
                "methods": [
                    "sync_properties"
                ],
                "docstring": "Helper for syncing backward compatibility properties.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ManagerStatusHelper": {
                "methods": [
                    "get_comprehensive_status"
                ],
                "docstring": "Helper for manager status and health operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ManagerConfigHelper": {
                "methods": [
                    "update_config"
                ],
                "docstring": "Helper for configuration management operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\core\\managers\\manager_metrics.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "record_operation_start",
            "record_success",
            "record_error",
            "set_initialized_at",
            "get_metrics",
            "get_metrics_for_status",
            "reset",
            "_calculate_success_rate",
            "_calculate_error_rate",
            "_calculate_ops_per_hour",
            "_calculate_uptime"
        ],
        "classes": {
            "ManagerMetricsTracker": {
                "methods": [
                    "__init__",
                    "record_operation_start",
                    "record_success",
                    "record_error",
                    "set_initialized_at",
                    "get_metrics",
                    "get_metrics_for_status",
                    "reset",
                    "_calculate_success_rate",
                    "_calculate_error_rate",
                    "_calculate_ops_per_hour",
                    "_calculate_uptime"
                ],
                "docstring": "Tracks manager operation metrics and performance.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 24
    },
    "src\\core\\managers\\manager_operations.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute_with_validation"
        ],
        "classes": {
            "ManagerOperationsHelper": {
                "methods": [
                    "__init__",
                    "execute_with_validation"
                ],
                "docstring": "Handles operation execution with validation and error handling.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\core\\managers\\manager_state.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_state",
            "mark_initialized",
            "mark_operation",
            "mark_ready",
            "mark_error",
            "get_status_dict",
            "__repr__"
        ],
        "classes": {
            "ManagerType": {
                "methods": [],
                "docstring": "Manager type enumeration for specialization.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ManagerState": {
                "methods": [],
                "docstring": "Manager lifecycle states.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ManagerStateTracker": {
                "methods": [
                    "__init__",
                    "set_state",
                    "mark_initialized",
                    "mark_operation",
                    "mark_ready",
                    "mark_error",
                    "get_status_dict",
                    "__repr__"
                ],
                "docstring": "Tracks manager state and identity.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\managers\\manager_lifecycle.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "cleanup"
        ],
        "classes": {
            "ManagerLifecycleHelper": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup"
                ],
                "docstring": "Helps with manager initialization and cleanup using Phase 1 utilities.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\core\\managers\\config_defaults.py": {
        "language": ".py",
        "functions": [
            "get_default_discord_config",
            "get_default_app_config",
            "get_default_db_config",
            "get_validation_rules"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "src\\core\\managers\\execution\\execution_operations.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_task",
            "cancel_task",
            "list_tasks"
        ],
        "classes": {
            "TaskStatus": {
                "methods": [],
                "docstring": "Task execution status.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ExecutionOperations": {
                "methods": [
                    "__init__",
                    "create_task",
                    "cancel_task",
                    "list_tasks"
                ],
                "docstring": "Handles execution CRUD operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\managers\\resource_crud_operations.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_resource",
            "get_resource",
            "update_resource",
            "delete_resource"
        ],
        "classes": {
            "ResourceCRUDOperations": {
                "methods": [
                    "__init__",
                    "create_resource",
                    "get_resource",
                    "update_resource",
                    "delete_resource"
                ],
                "docstring": "Handles CRUD operations for resources.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\managers\\execution\\task_executor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute_file_task",
            "execute_data_task",
            "execute_api_task",
            "execute_task_thread",
            "get_execution_duration"
        ],
        "classes": {
            "TaskExecutor": {
                "methods": [
                    "__init__",
                    "execute_file_task",
                    "execute_data_task",
                    "execute_api_task",
                    "execute_task_thread",
                    "get_execution_duration"
                ],
                "docstring": "Handles task execution operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\core\\managers\\execution\\execution_runner.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute_task",
            "get_execution_status"
        ],
        "classes": {
            "ExecutionRunner": {
                "methods": [
                    "__init__",
                    "execute_task",
                    "get_execution_status"
                ],
                "docstring": "Handles task execution and thread management.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\core\\managers\\monitoring\\metric_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "record_metric",
            "get_metrics"
        ],
        "classes": {
            "MetricType": {
                "methods": [],
                "docstring": "Metric types.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MetricManager": {
                "methods": [
                    "__init__",
                    "record_metric",
                    "get_metrics"
                ],
                "docstring": "Manages metrics and metric history.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\core\\managers\\monitoring\\monitoring_lifecycle.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "cleanup",
            "_setup_default_alert_rules",
            "_start_background_monitoring",
            "_stop_background_monitoring",
            "_background_monitor",
            "_cleanup_old_alerts",
            "_cleanup_old_metrics"
        ],
        "classes": {
            "MonitoringLifecycle": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "_setup_default_alert_rules",
                    "_start_background_monitoring",
                    "_stop_background_monitoring",
                    "_background_monitor",
                    "_cleanup_old_alerts",
                    "_cleanup_old_metrics"
                ],
                "docstring": "Manages monitoring lifecycle operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\core\\managers\\monitoring\\monitoring_state.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_alert",
            "get_alert",
            "update_alert",
            "get_all_alerts",
            "remove_alert",
            "add_metric",
            "get_metric",
            "get_all_metrics",
            "get_metric_history",
            "add_widget",
            "get_widget",
            "get_all_widgets",
            "set_alert_rules",
            "get_alert_rules",
            "clear_all",
            "get_status"
        ],
        "classes": {
            "MonitoringState": {
                "methods": [
                    "__init__",
                    "add_alert",
                    "get_alert",
                    "update_alert",
                    "get_all_alerts",
                    "remove_alert",
                    "add_metric",
                    "get_metric",
                    "get_all_metrics",
                    "get_metric_history",
                    "add_widget",
                    "get_widget",
                    "get_all_widgets",
                    "set_alert_rules",
                    "get_alert_rules",
                    "clear_all",
                    "get_status"
                ],
                "docstring": "Manages monitoring state and data structures.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 34
    },
    "src\\core\\managers\\monitoring\\monitoring_rules.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "check_alert_rules",
            "_rule_matches_alert",
            "_execute_rule_action",
            "escalate_alert",
            "notify_alert",
            "auto_resolve_alert"
        ],
        "classes": {
            "MonitoringRules": {
                "methods": [
                    "__init__",
                    "check_alert_rules",
                    "_rule_matches_alert",
                    "_execute_rule_action",
                    "escalate_alert",
                    "notify_alert",
                    "auto_resolve_alert"
                ],
                "docstring": "Handles alert rules and rule-based actions.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\core\\managers\\monitoring\\monitoring_crud.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_alert",
            "record_metric",
            "create_widget"
        ],
        "classes": {
            "AlertLevel": {
                "methods": [],
                "docstring": "Alert severity levels.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MetricType": {
                "methods": [],
                "docstring": "Metric types.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "WidgetType": {
                "methods": [],
                "docstring": "Widget types.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MonitoringCRUD": {
                "methods": [
                    "__init__",
                    "create_alert",
                    "record_metric",
                    "create_widget"
                ],
                "docstring": "Handles create operations for monitoring.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\managers\\monitoring\\monitoring_query.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_alerts",
            "get_metrics",
            "get_widgets",
            "acknowledge_alert",
            "resolve_alert"
        ],
        "classes": {
            "MonitoringQuery": {
                "methods": [
                    "__init__",
                    "get_alerts",
                    "get_metrics",
                    "get_widgets",
                    "acknowledge_alert",
                    "resolve_alert"
                ],
                "docstring": "Handles query and update operations for monitoring.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\core\\managers\\results\\results_validation.py": {
        "language": ".py",
        "functions": [
            "validate_result",
            "_validate_rule"
        ],
        "classes": {
            "ResultsValidator": {
                "methods": [
                    "validate_result",
                    "_validate_rule"
                ],
                "docstring": "Validates results against rules.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\core\\managers\\monitoring\\alert_operations.py": {
        "language": ".py",
        "functions": [
            "acknowledge_alert_internal",
            "resolve_alert_internal"
        ],
        "classes": {
            "AlertOperations": {
                "methods": [
                    "acknowledge_alert_internal",
                    "resolve_alert_internal"
                ],
                "docstring": "Helper for alert CRUD operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\core\\managers\\monitoring\\widget_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_widget",
            "get_widgets"
        ],
        "classes": {
            "WidgetType": {
                "methods": [],
                "docstring": "Widget types.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "WidgetManager": {
                "methods": [
                    "__init__",
                    "create_widget",
                    "get_widgets"
                ],
                "docstring": "Manages dashboard widgets.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\core\\managers\\results\\results_processing.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "process_result_by_type",
            "archive_old_results"
        ],
        "classes": {
            "ResultStatus": {
                "methods": [],
                "docstring": "Result processing status.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ResultsProcessor": {
                "methods": [
                    "__init__",
                    "process_result_by_type",
                    "archive_old_results"
                ],
                "docstring": "Handles result processing operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\core\\managers\\results\\results_query_helpers.py": {
        "language": ".py",
        "functions": [
            "get_results_filtered",
            "archive_results_batch"
        ],
        "classes": {
            "ResultsQueryHelper": {
                "methods": [
                    "get_results_filtered",
                    "archive_results_batch"
                ],
                "docstring": "Handles result querying operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\core\\orchestration\\orchestrator_components.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register_component",
            "get_component",
            "has_component",
            "get_all_components",
            "unregister_component",
            "clear_all_components"
        ],
        "classes": {
            "OrchestratorComponents": {
                "methods": [
                    "__init__",
                    "register_component",
                    "get_component",
                    "has_component",
                    "get_all_components",
                    "unregister_component",
                    "clear_all_components"
                ],
                "docstring": "Manages orchestrator component registration and retrieval.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\core\\orchestration\\orchestrator_lifecycle.py": {
        "language": ".py",
        "functions": [
            "initialize_components",
            "cleanup_components"
        ],
        "classes": {
            "OrchestratorLifecycle": {
                "methods": [
                    "initialize_components",
                    "cleanup_components"
                ],
                "docstring": "Manages orchestrator lifecycle operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\core\\orchestration\\orchestrator_events.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "on",
            "off",
            "emit",
            "clear_listeners"
        ],
        "classes": {
            "OrchestratorEvents": {
                "methods": [
                    "__init__",
                    "on",
                    "off",
                    "emit",
                    "clear_listeners"
                ],
                "docstring": "Manages orchestrator event system.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\orchestration\\orchestrator_utilities.py": {
        "language": ".py",
        "functions": [
            "safe_execute",
            "sanitize_config"
        ],
        "classes": {
            "OrchestratorUtilities": {
                "methods": [
                    "safe_execute",
                    "sanitize_config"
                ],
                "docstring": "Utility functions for orchestrator operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\core\\gamification\\competition_storage.py": {
        "language": ".py",
        "functions": [
            "load_scores",
            "save_scores",
            "update_ranks"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\core\\gamification\\system_core.py": {
        "language": ".py",
        "functions": [
            "get_competition_system",
            "__init__",
            "award_achievement",
            "get_leaderboard",
            "get_agent_score",
            "generate_leaderboard_message"
        ],
        "classes": {
            "CompetitionMode": {
                "methods": [],
                "docstring": "Competition modes for different scenarios.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AutonomousCompetitionSystem": {
                "methods": [
                    "__init__",
                    "award_achievement",
                    "get_leaderboard",
                    "get_agent_score",
                    "generate_leaderboard_message"
                ],
                "docstring": "Gamification system for autonomous development.\n\nEncourages proactive behavior through:\n- Point-based achievements\n- Leaderboards (optional display)\n- Proactive initiative bonuses\n- Quality multipliers\n- Collaboration rewards",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 11
    },
    "src\\core\\gamification\\autonomous_competition_system.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\gamification\\leaderboard.py": {
        "language": ".py",
        "functions": [
            "update_ranks",
            "get_leaderboard",
            "generate_leaderboard_message"
        ],
        "classes": {
            "LeaderboardManager": {
                "methods": [
                    "update_ranks",
                    "get_leaderboard",
                    "generate_leaderboard_message"
                ],
                "docstring": "Manages leaderboard rankings and display.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\core\\gamification\\achievements.py": {
        "language": ".py",
        "functions": [
            "calculate_proactive_bonus",
            "calculate_quality_multiplier"
        ],
        "classes": {
            "AchievementType": {
                "methods": [],
                "docstring": "Achievement categories for autonomous development.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "Achievement": {
                "methods": [],
                "docstring": "Individual achievement earned by an agent.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AgentScore": {
                "methods": [],
                "docstring": "Agent scoring and leaderboard position.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ScoringCalculator": {
                "methods": [
                    "calculate_proactive_bonus",
                    "calculate_quality_multiplier"
                ],
                "docstring": "Calculates points and multipliers for achievements.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\services\\messaging_cli_formatters.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\messaging_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "send_message",
            "broadcast_message",
            "get_agent_status",
            "list_agents"
        ],
        "classes": {
            "ConsolidatedMessagingService": {
                "methods": [
                    "__init__",
                    "send_message",
                    "broadcast_message",
                    "get_agent_status",
                    "list_agents"
                ],
                "docstring": "Consolidated messaging service adapter for Discord bot.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\gamification\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\architectural_principles_data.py": {
        "language": ".py",
        "functions": [
            "get_srp_guidance",
            "get_ocp_guidance"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\services\\agent_management.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_assignments",
            "get_agent_principle",
            "assign_principle",
            "_save_assignments",
            "get_all_assignments",
            "get_agents_by_principle",
            "__init__",
            "get_agent_status",
            "get_integration_stats",
            "_get_recent_work_count",
            "_get_pending_tasks_count",
            "_get_last_activity",
            "_get_total_documents",
            "_get_agent_documents",
            "__init__",
            "get_task_context",
            "_search_similar_tasks",
            "_search_related_messages",
            "_search_devlog_insights",
            "_get_fallback_context",
            "format_search_result",
            "generate_recommendations",
            "get_vector_database_service",
            "search_vector_database"
        ],
        "classes": {
            "AgentAssignmentManager": {
                "methods": [
                    "__init__",
                    "_load_assignments",
                    "get_agent_principle",
                    "assign_principle",
                    "_save_assignments",
                    "get_all_assignments",
                    "get_agents_by_principle"
                ],
                "docstring": "Manages agent-to-principle assignments with persistence.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AgentStatusManager": {
                "methods": [
                    "__init__",
                    "get_agent_status",
                    "get_integration_stats",
                    "_get_recent_work_count",
                    "_get_pending_tasks_count",
                    "_get_last_activity",
                    "_get_total_documents",
                    "_get_agent_documents"
                ],
                "docstring": "Handles agent status and utility functions.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TaskContextManager": {
                "methods": [
                    "__init__",
                    "get_task_context",
                    "_search_similar_tasks",
                    "_search_related_messages",
                    "_search_devlog_insights",
                    "_get_fallback_context"
                ],
                "docstring": "Manages task context and search operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 46
    },
    "src\\services\\messaging_cli_parser.py": {
        "language": ".py",
        "functions": [
            "create_messaging_parser"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\services\\message_batching_service.py": {
        "language": ".py",
        "functions": [
            "get_batching_service",
            "start_batch",
            "add_to_batch",
            "send_batch",
            "get_batch_status",
            "cancel_batch",
            "__init__",
            "add_message",
            "get_consolidated_message",
            "clear",
            "size",
            "__init__",
            "_get_batch_key",
            "start_batch",
            "add_to_batch",
            "send_batch",
            "get_batch_status",
            "cancel_batch",
            "_save_batch_history"
        ],
        "classes": {
            "MessageBatch": {
                "methods": [
                    "__init__",
                    "add_message",
                    "get_consolidated_message",
                    "clear",
                    "size"
                ],
                "docstring": "Represents a batch of messages with size limit to prevent memory leaks.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MessageBatchingService": {
                "methods": [
                    "__init__",
                    "_get_batch_key",
                    "start_batch",
                    "add_to_batch",
                    "send_batch",
                    "get_batch_status",
                    "cancel_batch",
                    "_save_batch_history"
                ],
                "docstring": "Service for batching multiple messages into one.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 32
    },
    "src\\services\\hard_onboarding_service.py": {
        "language": ".py",
        "functions": [
            "hard_onboard_agent",
            "hard_onboard_multiple_agents",
            "__init__",
            "_load_agent_coordinates",
            "_validate_coordinates",
            "step_1_clear_chat",
            "step_2_send_execute",
            "step_3_new_window",
            "step_4_navigate_to_onboarding",
            "step_5_send_onboarding_message",
            "execute_hard_onboarding"
        ],
        "classes": {
            "HardOnboardingService": {
                "methods": [
                    "__init__",
                    "_load_agent_coordinates",
                    "_validate_coordinates",
                    "step_1_clear_chat",
                    "step_2_send_execute",
                    "step_3_new_window",
                    "step_4_navigate_to_onboarding",
                    "step_5_send_onboarding_message",
                    "execute_hard_onboarding"
                ],
                "docstring": "Handles hard onboarding with complete reset protocol.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\services\\thea\\thea_service.py": {
        "language": ".py",
        "functions": [
            "create_thea_service",
            "__init__",
            "start_browser",
            "ensure_login",
            "_is_logged_in",
            "send_message",
            "wait_for_response",
            "_extract_basic_response",
            "communicate",
            "_save_conversation",
            "cleanup",
            "__enter__",
            "__exit__"
        ],
        "classes": {
            "TheaService": {
                "methods": [
                    "__init__",
                    "start_browser",
                    "ensure_login",
                    "_is_logged_in",
                    "send_message",
                    "wait_for_response",
                    "_extract_basic_response",
                    "communicate",
                    "_save_conversation",
                    "cleanup",
                    "__enter__",
                    "__exit__"
                ],
                "docstring": "V2 compliant Thea communication service.\n\nFeatures:\n- Cookie-based session persistence\n- PyAutoGUI message sending (proven working)\n- ResponseDetector integration\n- Autonomous operation",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 25
    },
    "src\\services\\handlers\\hard_onboarding_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "can_handle",
            "handle"
        ],
        "classes": {
            "HardOnboardingHandler": {
                "methods": [
                    "__init__",
                    "can_handle",
                    "handle"
                ],
                "docstring": "Handles hard onboarding commands for messaging CLI.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\services\\thea\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\handlers\\soft_onboarding_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "can_handle",
            "_load_full_onboarding_template",
            "handle",
            "_handle_single_step"
        ],
        "classes": {
            "SoftOnboardingHandler": {
                "methods": [
                    "__init__",
                    "can_handle",
                    "_load_full_onboarding_template",
                    "handle",
                    "_handle_single_step"
                ],
                "docstring": "Handles soft onboarding commands for messaging CLI.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\services\\utils\\messaging_templates.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\utils\\onboarding_constants.py": {
        "language": ".py",
        "functions": [
            "get_phase_2_status",
            "get_agent_assignments",
            "get_targets",
            "is_phase_2_active"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "src\\services\\soft_onboarding_service.py": {
        "language": ".py",
        "functions": [
            "soft_onboard_agent",
            "soft_onboard_multiple_agents",
            "__init__",
            "_load_agent_coordinates",
            "_validate_coordinates",
            "step_1_click_chat_input",
            "step_2_save_session",
            "step_3_send_cleanup_prompt",
            "step_4_open_new_tab",
            "step_5_navigate_to_onboarding",
            "step_6_paste_onboarding_message",
            "execute_soft_onboarding"
        ],
        "classes": {
            "SoftOnboardingService": {
                "methods": [
                    "__init__",
                    "_load_agent_coordinates",
                    "_validate_coordinates",
                    "step_1_click_chat_input",
                    "step_2_save_session",
                    "step_3_send_cleanup_prompt",
                    "step_4_open_new_tab",
                    "step_5_navigate_to_onboarding",
                    "step_6_paste_onboarding_message",
                    "execute_soft_onboarding"
                ],
                "docstring": "Handles soft onboarding with session cleanup protocol.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\services\\utils\\vector_integration_helpers.py": {
        "language": ".py",
        "functions": [
            "format_search_result",
            "generate_recommendations",
            "generate_agent_recommendations"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\services\\handlers\\batch_message_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "can_handle",
            "handle",
            "_handle_simplified_batch",
            "_handle_batch_start",
            "_handle_batch_add",
            "_handle_batch_send",
            "_handle_batch_status",
            "_handle_batch_cancel"
        ],
        "classes": {
            "BatchMessageHandler": {
                "methods": [
                    "__init__",
                    "can_handle",
                    "handle",
                    "_handle_simplified_batch",
                    "_handle_batch_start",
                    "_handle_batch_add",
                    "_handle_batch_send",
                    "_handle_batch_status",
                    "_handle_batch_cancel"
                ],
                "docstring": "Handles message batching commands for messaging CLI.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\services\\chatgpt\\extractor_storage.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "save_conversation",
            "load_conversation",
            "list_conversations",
            "cleanup_old_conversations",
            "get_storage_info"
        ],
        "classes": {
            "ConversationStorage": {
                "methods": [
                    "__init__",
                    "save_conversation",
                    "load_conversation",
                    "list_conversations",
                    "cleanup_old_conversations",
                    "get_storage_info"
                ],
                "docstring": "Handles persistence operations for ChatGPT conversations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\services\\chatgpt\\extractor_deprecated.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "save_conversation",
            "load_conversation",
            "list_conversations",
            "cleanup_old_conversations",
            "get_extraction_info",
            "get_unified_config",
            "get_logger"
        ],
        "classes": {
            "ConversationExtractor": {
                "methods": [
                    "__init__",
                    "save_conversation",
                    "load_conversation",
                    "list_conversations",
                    "cleanup_old_conversations",
                    "get_extraction_info"
                ],
                "docstring": "ChatGPT conversation extraction and management.\n\nProvides capabilities for:\n- Extracting conversation history\n- Parsing message structure\n- Saving conversations to files\n- Managing conversation metadata",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\services\\chatgpt\\extractor_message_parser.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "MessageParser": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Handles extraction and parsing of ChatGPT messages.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\infrastructure\\logging\\unified_logger.py": {
        "language": ".py",
        "functions": [
            "debug",
            "info",
            "warning",
            "error",
            "critical",
            "log",
            "__init__",
            "_map_config_level",
            "_map_log_level",
            "debug",
            "info",
            "warning",
            "error",
            "critical",
            "log",
            "__init__",
            "increment_stat",
            "get_stats",
            "reset_stats",
            "get_error_rate",
            "is_healthy"
        ],
        "classes": {
            "LoggerInterface": {
                "methods": [
                    "debug",
                    "info",
                    "warning",
                    "error",
                    "critical",
                    "log"
                ],
                "docstring": "Abstract interface for logging operations.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "UnifiedLogger": {
                "methods": [
                    "__init__",
                    "_map_config_level",
                    "_map_log_level",
                    "debug",
                    "info",
                    "warning",
                    "error",
                    "critical",
                    "log"
                ],
                "docstring": "Unified logger implementation combining multiple logging targets.",
                "base_classes": [
                    "LoggerInterface"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "LogStatistics": {
                "methods": [
                    "__init__",
                    "increment_stat",
                    "get_stats",
                    "reset_stats",
                    "get_error_rate",
                    "is_healthy"
                ],
                "docstring": "Provides statistics about logging operations for autonomous diagnostics.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 42
    },
    "src\\discord_commander\\messaging_commands.py": {
        "language": ".py",
        "functions": [
            "setup",
            "__init__"
        ],
        "classes": {
            "MessagingCommands": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Discord commands for agent messaging.",
                "base_classes": [
                    "commands.Cog"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 3
    },
    "src\\discord_commander\\discord_embeds.py": {
        "language": ".py",
        "functions": [
            "create_devlog_embed",
            "create_agent_status_embed",
            "create_coordination_embed"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\discord_commander\\core.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "validate",
            "is_valid"
        ],
        "classes": {
            "DiscordConfig": {
                "methods": [
                    "__post_init__",
                    "validate",
                    "is_valid"
                ],
                "docstring": "Discord bot configuration.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\discord_commander\\messaging_controller_deprecated.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_agent_list",
            "_create_agent_options",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "create_agent_messaging_view",
            "create_swarm_status_view",
            "get_agent_status"
        ],
        "classes": {
            "AgentMessagingView": {
                "methods": [
                    "__init__",
                    "_load_agent_list",
                    "_create_agent_options"
                ],
                "docstring": "Discord view for easy agent messaging.",
                "base_classes": [
                    "discord.ui.View"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MessageModal": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Modal for message input.",
                "base_classes": [
                    "discord.ui.Modal"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SwarmStatusView": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Discord view for swarm status monitoring.",
                "base_classes": [
                    "discord.ui.View"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "BroadcastModal": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Modal for broadcast messages.",
                "base_classes": [
                    "discord.ui.Modal"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "DiscordMessagingController": {
                "methods": [
                    "__init__",
                    "create_agent_messaging_view",
                    "create_swarm_status_view",
                    "get_agent_status"
                ],
                "docstring": "Main Discord messaging controller.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\discord_commander\\enhanced_bot.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "get_bot_status"
        ],
        "classes": {
            "EnhancedDiscordCommanderBot": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Enhanced Discord Commander Bot with messaging integration.",
                "base_classes": [
                    "commands.Bot"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "EnhancedBotManager": {
                "methods": [
                    "__init__",
                    "get_bot_status"
                ],
                "docstring": "Manager for the enhanced Discord bot.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\discord_commander\\messaging_controller_modals.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__"
        ],
        "classes": {
            "MessageModal": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Modal for message input.",
                "base_classes": [
                    "discord.ui.Modal"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "BroadcastModal": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Modal for broadcast messages.",
                "base_classes": [
                    "discord.ui.Modal"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\discord_commander\\messaging_controller_views.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_agent_list",
            "_create_agent_options",
            "__init__",
            "_get_status_emoji",
            "_extract_points"
        ],
        "classes": {
            "AgentMessagingView": {
                "methods": [
                    "__init__",
                    "_load_agent_list",
                    "_create_agent_options"
                ],
                "docstring": "Discord view for easy agent messaging.",
                "base_classes": [
                    "discord.ui.View"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SwarmStatusView": {
                "methods": [
                    "__init__",
                    "_get_status_emoji",
                    "_extract_points"
                ],
                "docstring": "Discord view for swarm status monitoring.",
                "base_classes": [
                    "discord.ui.View"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\discord_commander\\messaging_controller_refactored.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_agent_messaging_view",
            "create_swarm_status_view",
            "get_agent_status"
        ],
        "classes": {
            "DiscordMessagingController": {
                "methods": [
                    "__init__",
                    "create_agent_messaging_view",
                    "create_swarm_status_view",
                    "get_agent_status"
                ],
                "docstring": "Main Discord messaging controller facade.\n\nCoordinates between Discord views/modals and swarm messaging service.\nProvides:\n- Agent-to-agent messaging through Discord UI\n- Swarm status monitoring with real-time updates\n- Broadcast messaging to all agents\n- Interactive views and modals for easy coordination",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\discord_commander\\status_reader.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "read_agent_status",
            "read_all_statuses",
            "_normalize_status",
            "clear_cache",
            "get_cache_stats"
        ],
        "classes": {
            "StatusReader": {
                "methods": [
                    "__init__",
                    "read_agent_status",
                    "read_all_statuses",
                    "_normalize_status",
                    "clear_cache",
                    "get_cache_stats"
                ],
                "docstring": "Read and cache agent status.json files.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\gaming\\dreamos\\fsm_monitoring.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_monitoring",
            "stop_monitoring",
            "is_monitoring",
            "_monitor_loop",
            "_check_inboxes",
            "_process_report_file"
        ],
        "classes": {
            "FSMMonitor": {
                "methods": [
                    "__init__",
                    "start_monitoring",
                    "stop_monitoring",
                    "is_monitoring",
                    "_monitor_loop",
                    "_check_inboxes",
                    "_process_report_file"
                ],
                "docstring": "Handles background monitoring of agent inboxes for FSM orchestrator.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\gaming\\dreamos\\resumer_v2\\atomic_file_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "atomic_write",
            "atomic_read",
            "atomic_update",
            "backup",
            "restore"
        ],
        "classes": {
            "AtomicFileManager": {
                "methods": [
                    "__init__",
                    "atomic_write",
                    "atomic_read",
                    "atomic_update",
                    "backup",
                    "restore"
                ],
                "docstring": "Manages atomic file operations for safe file updates.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\gaming\\dreamos\\fsm_orchestrator.py": {
        "language": ".py",
        "functions": [
            "create_fsm_orchestrator",
            "__init__",
            "create_task",
            "get_task",
            "update_task_state",
            "add_evidence",
            "process_agent_report",
            "_save_task",
            "start_monitoring",
            "stop_monitoring",
            "get_status_summary",
            "cleanup"
        ],
        "classes": {
            "FSMOrchestrator": {
                "methods": [
                    "__init__",
                    "create_task",
                    "get_task",
                    "update_task_state",
                    "add_evidence",
                    "process_agent_report",
                    "_save_task",
                    "start_monitoring",
                    "stop_monitoring",
                    "get_status_summary",
                    "cleanup"
                ],
                "docstring": "FSM Orchestrator for managing task states and agent coordination.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 23
    },
    "src\\trading_robot\\repositories\\implementations\\trading_query_operations.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "TradingQueryOperations": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Query operations for trading repository.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\discord_commander\\messaging_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_agent_messaging_view",
            "create_swarm_status_view",
            "get_agent_status"
        ],
        "classes": {
            "DiscordMessagingController": {
                "methods": [
                    "__init__",
                    "create_agent_messaging_view",
                    "create_swarm_status_view",
                    "get_agent_status"
                ],
                "docstring": "Main Discord messaging controller facade.\n\nCoordinates between Discord views/modals and swarm messaging service.\nProvides:\n- Agent-to-agent messaging through Discord UI\n- Swarm status monitoring with real-time updates\n- Broadcast messaging to all agents\n- Interactive views and modals for easy coordination",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\gaming\\dreamos\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\gaming\\dreamos\\resumer_v2\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\trading_robot\\repositories\\implementations\\trading_write_operations.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "TradingWriteOperations": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Write operations for trading repository.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\trading_robot\\repositories\\implementations\\in_memory_write_operations.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "InMemoryWriteOperations": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Write operations for in-memory repository.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\gaming\\dreamos\\ui_integration.py": {
        "language": ".py",
        "functions": [
            "get_player_status",
            "get_quest_details",
            "get_leaderboard",
            "register_gamification_blueprint"
        ],
        "classes": {},
        "routes": [
            {
                "function": "get_player_status",
                "method": "GET",
                "path": "/player/status"
            },
            {
                "function": "get_quest_details",
                "method": "GET",
                "path": "/quest/<quest_id>"
            },
            {
                "function": "get_leaderboard",
                "method": "GET",
                "path": "/leaderboard"
            }
        ],
        "complexity": 4
    },
    "src\\trading_robot\\repositories\\implementations\\in_memory_query_operations.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "InMemoryQueryOperations": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Query operations for in-memory repository.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\utils\\file_operations\\file_metadata.py": {
        "language": ".py",
        "functions": [
            "execute",
            "file_exists",
            "is_file_readable",
            "is_file_writable",
            "get_file_size",
            "get_file_modified_time",
            "get_file_hash",
            "get_file_extension",
            "is_json_file"
        ],
        "classes": {
            "FileOperation": {
                "methods": [
                    "execute"
                ],
                "docstring": "Abstract base class for file operations.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "FileMetadataOperations": {
                "methods": [
                    "file_exists",
                    "is_file_readable",
                    "is_file_writable",
                    "get_file_size",
                    "get_file_modified_time",
                    "get_file_hash",
                    "get_file_extension",
                    "is_json_file"
                ],
                "docstring": "Handles file metadata operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\utils\\file_operations\\directory_operations.py": {
        "language": ".py",
        "functions": [
            "list_files",
            "get_directory_size",
            "count_files"
        ],
        "classes": {
            "DirectoryOperations": {
                "methods": [
                    "list_files",
                    "get_directory_size",
                    "count_files"
                ],
                "docstring": "Handles directory and file listing operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\utils\\file_operations\\file_serialization.py": {
        "language": ".py",
        "functions": [
            "ensure_directory",
            "read_json",
            "write_json",
            "read_yaml",
            "write_yaml"
        ],
        "classes": {
            "DataSerializationOperations": {
                "methods": [
                    "ensure_directory",
                    "read_json",
                    "write_json",
                    "read_yaml",
                    "write_yaml"
                ],
                "docstring": "Handles data serialization operations (JSON/YAML).",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\utils\\file_operations\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\static\\js\\gaming\\gamification-ui.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\vector_database\\handlers.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\web\\vector_database\\models.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "AnalyticsData": {
                "methods": [],
                "docstring": "Analytics data model for vector database reporting.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "Collection": {
                "methods": [],
                "docstring": "Vector database collection model.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ExportData": {
                "methods": [],
                "docstring": "Export data model for vector database exports.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ExportRequest": {
                "methods": [],
                "docstring": "Export request model.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SearchRequest": {
                "methods": [],
                "docstring": "Search request model.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SearchResult": {
                "methods": [],
                "docstring": "Search result model.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "Document": {
                "methods": [],
                "docstring": "Document model for vector database.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "DocumentRequest": {
                "methods": [],
                "docstring": "Document request model.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "PaginationRequest": {
                "methods": [],
                "docstring": "Pagination request model.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\vision\\monitoring.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_monitoring",
            "stop_monitoring",
            "get_monitoring_status"
        ],
        "classes": {
            "VisionMonitoring": {
                "methods": [
                    "__init__",
                    "start_monitoring",
                    "stop_monitoring",
                    "get_monitoring_status"
                ],
                "docstring": "Manages continuous vision monitoring with callbacks.\n\nCapabilities:\n- Continuous screen monitoring\n- Callback-based processing\n- Configurable monitoring frequency\n- Start/stop control",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\vision\\persistence.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "store_analysis",
            "get_previous_image",
            "store_previous_image",
            "save_vision_data",
            "cleanup_old_data",
            "_get_cache_key",
            "_make_serializable",
            "get_history",
            "clear_history",
            "get_persistence_info"
        ],
        "classes": {
            "VisionPersistence": {
                "methods": [
                    "__init__",
                    "store_analysis",
                    "get_previous_image",
                    "store_previous_image",
                    "save_vision_data",
                    "cleanup_old_data",
                    "_get_cache_key",
                    "_make_serializable",
                    "get_history",
                    "clear_history",
                    "get_persistence_info"
                ],
                "docstring": "Manages persistence of vision analysis data and images.\n\nCapabilities:\n- Analysis history storage\n- Image caching for change detection\n- Data cleanup and lifecycle management\n- JSON serialization of analysis results",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\vision\\analyzers\\ui_detector.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "detect_ui_elements",
            "_convert_to_grayscale",
            "_process_contour",
            "_classify_element",
            "get_detector_info"
        ],
        "classes": {
            "UIDetector": {
                "methods": [
                    "__init__",
                    "detect_ui_elements",
                    "_convert_to_grayscale",
                    "_process_contour",
                    "_classify_element",
                    "get_detector_info"
                ],
                "docstring": "Detects and classifies UI elements in images.\n\nCapabilities:\n- Button detection\n- Text field detection\n- Icon detection\n- Container detection\n- Shape-based classification",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\vision\\analyzers\\edge_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_edges",
            "_convert_to_grayscale",
            "get_analyzer_info"
        ],
        "classes": {
            "EdgeAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_edges",
                    "_convert_to_grayscale",
                    "get_analyzer_info"
                ],
                "docstring": "Analyzes edge content and distribution in images.\n\nCapabilities:\n- Canny edge detection\n- Edge density calculation\n- Edge distribution analysis",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\vision\\utils.py": {
        "language": ".py",
        "functions": [
            "get_coordinate_loader_fallback",
            "get_unified_config_fallback",
            "get_logger_fallback"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\gui\\utils.py": {
        "language": ".py",
        "functions": [
            "get_coordinate_loader_fallback",
            "get_unified_config_fallback",
            "get_logger_fallback"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\vision\\analyzers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\vision\\analyzers\\change_detector.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "detect_changes",
            "_convert_to_grayscale",
            "_find_change_regions",
            "get_detector_info"
        ],
        "classes": {
            "ChangeDetector": {
                "methods": [
                    "__init__",
                    "detect_changes",
                    "_convert_to_grayscale",
                    "_find_change_regions",
                    "get_detector_info"
                ],
                "docstring": "Detects visual changes between two images.\n\nCapabilities:\n- Frame differencing\n- Change region detection\n- Change percentage calculation\n- Configurable sensitivity",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\vision\\analyzers\\color_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_colors",
            "_analyze_rgb_image",
            "_analyze_grayscale_image",
            "get_analyzer_info"
        ],
        "classes": {
            "ColorAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_colors",
                    "_analyze_rgb_image",
                    "_analyze_grayscale_image",
                    "get_analyzer_info"
                ],
                "docstring": "Analyzes color distribution and statistics in images.\n\nCapabilities:\n- Mean color calculation (RGB)\n- Mean intensity calculation (grayscale)\n- Color channel analysis",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\gui\\styles\\themes.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_color",
            "get_style",
            "to_dict",
            "__init__",
            "__init__",
            "__init__",
            "set_theme",
            "get_theme",
            "add_theme",
            "get_available_themes"
        ],
        "classes": {
            "Theme": {
                "methods": [
                    "__init__",
                    "get_color",
                    "get_style",
                    "to_dict"
                ],
                "docstring": "Base theme class.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "DarkTheme": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Dark theme for GUI applications.",
                "base_classes": [
                    "Theme"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "LightTheme": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Light theme for GUI applications.",
                "base_classes": [
                    "Theme"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ThemeManager": {
                "methods": [],
                "docstring": null,
                "base_classes": [],
                "maturity": "Prototype",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 17
    },
    "src\\web\\vector_database\\unified_middleware.py": {
        "language": ".py",
        "functions": [
            "error_handler",
            "json_required",
            "log_request",
            "rate_limit",
            "add_cors_headers",
            "cache_response",
            "validate_request",
            "validate_pagination",
            "decorated_function",
            "decorated_function",
            "decorated_function",
            "decorator",
            "decorated_function",
            "decorator",
            "decorator",
            "decorated_function",
            "decorated_function",
            "decorated_function",
            "decorated_function"
        ],
        "classes": {
            "UnifiedVectorMiddleware": {
                "methods": [
                    "error_handler",
                    "json_required",
                    "log_request",
                    "rate_limit",
                    "add_cors_headers",
                    "cache_response",
                    "validate_request",
                    "validate_pagination"
                ],
                "docstring": "Unified middleware providing error handling, request/response processing,\nand validation decorators for vector database operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 27
    },
    "src\\orchestrators\\overnight\\scheduler_queue.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_task",
            "get_available_tasks",
            "is_task_ready",
            "remove_task",
            "balance_agent_load",
            "get_queue_size"
        ],
        "classes": {
            "SchedulerQueue": {
                "methods": [
                    "__init__",
                    "add_task",
                    "get_available_tasks",
                    "is_task_ready",
                    "remove_task",
                    "balance_agent_load",
                    "get_queue_size"
                ],
                "docstring": "Manages task queue and readiness logic.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\orchestrators\\overnight\\scheduler_models.py": {
        "language": ".py",
        "functions": [
            "__lt__"
        ],
        "classes": {
            "Task": {
                "methods": [
                    "__lt__"
                ],
                "docstring": "Task representation for scheduling.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\gui\\ui_builders.py": {
        "language": ".py",
        "functions": [
            "create_header",
            "create_left_panel",
            "create_right_panel"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\orchestrators\\overnight\\scheduler_tracking.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "mark_task_completed",
            "mark_task_failed",
            "update_agent_load",
            "set_current_cycle",
            "get_tracking_status"
        ],
        "classes": {
            "SchedulerTracking": {
                "methods": [
                    "__init__",
                    "mark_task_completed",
                    "mark_task_failed",
                    "update_agent_load",
                    "set_current_cycle",
                    "get_tracking_status"
                ],
                "docstring": "Manages task completion and failure tracking.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\orchestrators\\overnight\\recovery_escalation.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "summarize_failures"
        ],
        "classes": {
            "RecoveryEscalation": {
                "methods": [
                    "__init__",
                    "summarize_failures"
                ],
                "docstring": "Manages failure escalation.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\orchestrators\\overnight\\recovery_messaging.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "send_message_to_agent"
        ],
        "classes": {
            "RecoveryMessaging": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Handles all messaging/notification for recovery system.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 3
    },
    "src\\orchestrators\\overnight\\scheduler_refactored.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_task",
            "mark_task_completed",
            "mark_task_failed",
            "get_scheduler_status",
            "get_unified_config",
            "get_logger"
        ],
        "classes": {
            "TaskScheduler": {
                "methods": [
                    "__init__",
                    "add_task",
                    "mark_task_completed",
                    "mark_task_failed",
                    "get_scheduler_status"
                ],
                "docstring": "Cycle-based task scheduler facade for overnight operations.\n\nCoordinates between queue management, task tracking, and execution scheduling.\nProvides:\n- Priority-based task queuing\n- Load balancing across agents\n- Dependency management\n- Retry logic\n- Cycle-based scheduling (V2 requirement)",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\orchestrators\\overnight\\monitor_metrics.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "update_cycle_metrics",
            "add_tasks",
            "mark_completed",
            "mark_failed",
            "get_metrics"
        ],
        "classes": {
            "MonitorMetrics": {
                "methods": [
                    "__init__",
                    "update_cycle_metrics",
                    "add_tasks",
                    "mark_completed",
                    "mark_failed",
                    "get_metrics"
                ],
                "docstring": "Calculates performance metrics.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\orchestrators\\overnight\\scheduler_deprecated.py": {
        "language": ".py",
        "functions": [
            "__lt__",
            "__init__",
            "add_task",
            "_get_available_tasks",
            "_is_task_ready",
            "_balance_agent_load",
            "mark_task_completed",
            "mark_task_failed",
            "_remove_task_from_queue",
            "get_scheduler_status",
            "get_unified_config",
            "get_logger"
        ],
        "classes": {
            "Task": {
                "methods": [
                    "__lt__"
                ],
                "docstring": "Task representation for scheduling.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TaskScheduler": {
                "methods": [
                    "__init__",
                    "add_task",
                    "_get_available_tasks",
                    "_is_task_ready",
                    "_balance_agent_load",
                    "mark_task_completed",
                    "mark_task_failed",
                    "_remove_task_from_queue",
                    "get_scheduler_status"
                ],
                "docstring": "Cycle-based task scheduler for overnight operations.\n\nProvides:\n- Priority-based task queuing\n- Load balancing across agents\n- Dependency management\n- Retry logic\n- Cycle-based scheduling (V2 requirement)",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\ai_training\\dreamvault\\runner.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_logging",
            "add_conversations_to_queue",
            "_fetch_conversation",
            "_process_conversation",
            "run_batch",
            "_save_stats",
            "get_queue_status",
            "cleanup_old_data",
            "rebuild_indexes",
            "get_system_stats"
        ],
        "classes": {
            "BatchRunner": {
                "methods": [
                    "__init__",
                    "_setup_logging",
                    "add_conversations_to_queue",
                    "_fetch_conversation",
                    "_process_conversation",
                    "run_batch",
                    "_save_stats",
                    "get_queue_status",
                    "cleanup_old_data",
                    "rebuild_indexes",
                    "get_system_stats"
                ],
                "docstring": "Batch processor for conversation ingestion pipeline.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\orchestrators\\overnight\\monitor_state.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_monitoring",
            "stop_monitoring",
            "update_cycle",
            "update_agent_activity",
            "get_stalled_agents",
            "get_agent_status",
            "get_info"
        ],
        "classes": {
            "MonitorState": {
                "methods": [
                    "__init__",
                    "start_monitoring",
                    "stop_monitoring",
                    "update_cycle",
                    "update_agent_activity",
                    "get_stalled_agents",
                    "get_agent_status",
                    "get_info"
                ],
                "docstring": "Manages monitor state and agent tracking.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\orchestrators\\overnight\\recovery_handlers.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "RecoveryHandlers": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Handles different types of failures.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\orchestrators\\overnight\\scheduler_helpers.py": {
        "language": ".py",
        "functions": [
            "get_scheduler_status"
        ],
        "classes": {
            "SchedulerHelpers": {
                "methods": [
                    "get_scheduler_status"
                ],
                "docstring": "Helper functions for scheduler operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\orchestrators\\overnight\\recovery_state.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize_agents",
            "get_status"
        ],
        "classes": {
            "RecoveryState": {
                "methods": [
                    "__init__",
                    "initialize_agents",
                    "get_status"
                ],
                "docstring": "Manages recovery system state.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\ai_training\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\orchestrators\\overnight\\orchestrator_execution.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_create_task_message"
        ],
        "classes": {
            "OrchestratorExecution": {
                "methods": [
                    "__init__",
                    "_create_task_message"
                ],
                "docstring": "Handles cycle and task execution.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\ai_training\\dreamvault\\scrapers\\login_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "ensure_login",
            "_is_logged_in",
            "_automated_login",
            "_handle_2fa",
            "_manual_login"
        ],
        "classes": {
            "LoginHandler": {
                "methods": [
                    "__init__",
                    "ensure_login",
                    "_is_logged_in",
                    "_automated_login",
                    "_handle_2fa",
                    "_manual_login"
                ],
                "docstring": "Handles ChatGPT login with various methods.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\ai_training\\dreamvault\\scrapers\\scraper_progress.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_progress",
            "_save_progress",
            "_get_conversation_hash",
            "_is_conversation_processed",
            "_mark_conversation_processed",
            "reset_progress",
            "get_progress_stats"
        ],
        "classes": {
            "ScraperProgressTracker": {
                "methods": [
                    "__init__",
                    "_load_progress",
                    "_save_progress",
                    "_get_conversation_hash",
                    "_is_conversation_processed",
                    "_mark_conversation_processed",
                    "reset_progress",
                    "get_progress_stats"
                ],
                "docstring": "Tracks scraper progress and resume functionality.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\ai_training\\dreamvault\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\ai_training\\dreamvault\\scrapers\\cookie_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "save_cookies",
            "load_cookies",
            "has_valid_cookies",
            "clear_cookies",
            "_init_fernet",
            "_encrypt_data",
            "_decrypt_data",
            "encrypt_cookie_file",
            "decrypt_cookie_file",
            "generate_encryption_key"
        ],
        "classes": {
            "CookieManager": {
                "methods": [
                    "__init__",
                    "save_cookies",
                    "load_cookies",
                    "has_valid_cookies",
                    "clear_cookies",
                    "_init_fernet",
                    "_encrypt_data",
                    "_decrypt_data",
                    "encrypt_cookie_file",
                    "decrypt_cookie_file",
                    "generate_encryption_key"
                ],
                "docstring": "Manages cookie persistence and session management.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\ai_training\\dreamvault\\database.py": {
        "language": ".py",
        "functions": [
            "get_database_connection",
            "reset_database_connection",
            "__init__",
            "_detect_database_type",
            "_safe_url",
            "get_connection",
            "_get_sqlite_connection",
            "_get_postgresql_connection",
            "execute",
            "executemany",
            "get_placeholder",
            "adapt_query",
            "test_connection"
        ],
        "classes": {
            "DatabaseConnection": {
                "methods": [
                    "__init__",
                    "_detect_database_type",
                    "_safe_url",
                    "get_connection",
                    "_get_sqlite_connection",
                    "_get_postgresql_connection",
                    "execute",
                    "executemany",
                    "get_placeholder",
                    "adapt_query",
                    "test_connection"
                ],
                "docstring": "Database connection abstraction supporting SQLite and PostgreSQL.\n\nUsage:\n    # From environment variable\n    db = DatabaseConnection()\n\n    # Explicit URL\n    db = DatabaseConnection(\"postgresql://user:pass@localhost:5432/dreamvault\")\n\n    # Get connection\n    with db.get_connection() as conn:\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM conversations\")",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 24
    },
    "src\\ai_training\\dreamvault\\scrapers\\browser_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_driver",
            "_create_undetected_driver",
            "_create_standard_driver",
            "close_driver"
        ],
        "classes": {
            "BrowserManager": {
                "methods": [
                    "__init__",
                    "create_driver",
                    "_create_undetected_driver",
                    "_create_standard_driver",
                    "close_driver"
                ],
                "docstring": "Manages browser driver creation and configuration.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\ai_automation\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\ai_training\\dreamvault\\scrapers\\chatgpt_scraper_core.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\ai_training\\dreamvault\\scrapers\\scraper_extraction.py": {
        "language": ".py",
        "functions": [
            "reverse_file_numbering"
        ],
        "classes": {
            "ScraperExtraction": {
                "methods": [
                    "reverse_file_numbering"
                ],
                "docstring": "Handles conversation extraction logic.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\ai_training\\dreamvault\\scrapers\\scraper_conversation_methods.py": {
        "language": ".py",
        "functions": [
            "extract_all_smart",
            "extract_all_standard"
        ],
        "classes": {
            "ScraperConversationMethods": {
                "methods": [
                    "extract_all_smart",
                    "extract_all_standard"
                ],
                "docstring": "Large conversation extraction methods.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\ai_automation\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\ai_training\\dreamvault\\scrapers\\scraper_login.py": {
        "language": ".py",
        "functions": [
            "ensure_login_with_cookies",
            "_handle_workspace_selection"
        ],
        "classes": {
            "ScraperLoginHelper": {
                "methods": [
                    "ensure_login_with_cookies",
                    "_handle_workspace_selection"
                ],
                "docstring": "Handles login and authentication logic.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\ai_training\\dreamvault\\scrapers\\chatgpt_scraper.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__enter__",
            "__exit__",
            "start_driver",
            "close_driver",
            "ensure_login",
            "_rate_limit",
            "select_model",
            "_handle_workspace_selection",
            "get_conversation_list",
            "extract_conversation",
            "extract_all_conversations_smart",
            "_count_total_conversations",
            "_get_conversations_with_smart_extraction",
            "_reverse_file_numbering",
            "extract_all_conversations",
            "get_rate_limit_info",
            "get_adaptive_health_status",
            "_is_conversation_processed",
            "_mark_conversation_processed",
            "reset_progress",
            "get_progress_stats"
        ],
        "classes": {
            "ChatGPTScraper": {
                "methods": [
                    "__init__",
                    "__enter__",
                    "__exit__",
                    "start_driver",
                    "close_driver",
                    "ensure_login",
                    "_rate_limit",
                    "select_model",
                    "_handle_workspace_selection",
                    "get_conversation_list",
                    "extract_conversation",
                    "extract_all_conversations_smart",
                    "_count_total_conversations",
                    "_get_conversations_with_smart_extraction",
                    "_reverse_file_numbering",
                    "extract_all_conversations",
                    "get_rate_limit_info",
                    "get_adaptive_health_status",
                    "_is_conversation_processed",
                    "_mark_conversation_processed",
                    "reset_progress",
                    "get_progress_stats"
                ],
                "docstring": "Integrated ChatGPT scraper with all essential features:\nCookie persistence, manual login, rate limiting, model selection,\nconversation extraction, resume functionality.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 44
    },
    "src\\ai_training\\dreamvault\\scrapers\\chatgpt_scraper_refactored.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\ai_training\\dreamvault\\scrapers\\chatgpt_scraper_operations.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\ai_training\\dreamvault\\config.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_config",
            "_deep_merge",
            "get",
            "ensure_directories",
            "get_rate_limit",
            "get_batch_config",
            "get_llm_config",
            "get_redaction_config"
        ],
        "classes": {
            "Config": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "_deep_merge",
                    "get",
                    "ensure_directories",
                    "get_rate_limit",
                    "get_batch_config",
                    "get_llm_config",
                    "get_redaction_config"
                ],
                "docstring": "Configuration manager for ShadowArchive.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\shared_utils\\file_hash.py": {
        "language": ".py",
        "functions": [
            "compute_file_sha256",
            "find_duplicate_files"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\shared_utils\\api_client.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__enter__",
            "__exit__",
            "close",
            "get",
            "post",
            "__init__"
        ],
        "classes": {
            "APIClient": {
                "methods": [
                    "__init__",
                    "__enter__",
                    "__exit__",
                    "close",
                    "get",
                    "post"
                ],
                "docstring": "Synchronous API client with retries, timeouts, and context manager support.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AsyncAPIClient": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Asynchronous API client with reusable session, timeout, and simple retries.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\ai_training\\dreamvault\\schema.py": {
        "language": ".py",
        "functions": [
            "create_summary",
            "validate",
            "save_summary",
            "load_summary"
        ],
        "classes": {
            "SummarySchema": {
                "methods": [
                    "create_summary",
                    "validate",
                    "save_summary",
                    "load_summary"
                ],
                "docstring": "Schema definition and validation for conversation summaries.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\shared_utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\ai_training\\dreamvault\\scrapers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\integrations\\jarvis\\memory_system.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "remember_conversation",
            "get_recent_conversations",
            "get_conversation_context",
            "learn_user_preference",
            "get_user_preference",
            "learn_user_info",
            "get_user_info",
            "learn_command",
            "get_best_commands",
            "search_memory",
            "get_memory_summary",
            "clear_old_memory",
            "close"
        ],
        "classes": {
            "MemorySystem": {
                "methods": [
                    "__init__",
                    "remember_conversation",
                    "get_recent_conversations",
                    "get_conversation_context",
                    "learn_user_preference",
                    "get_user_preference",
                    "learn_user_info",
                    "get_user_info",
                    "learn_command",
                    "get_best_commands",
                    "search_memory",
                    "get_memory_summary",
                    "clear_old_memory",
                    "close"
                ],
                "docstring": "Memory system for Personal Jarvis to remember conversations and context",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 28
    },
    "src\\tools\\duplicate_detection\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\shared_utils\\config.py": {
        "language": ".py",
        "functions": [
            "get_workspace_root",
            "load_env",
            "get_setting"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\ai_automation\\automation_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run_prompt",
            "get_engine_info",
            "get_unified_config"
        ],
        "classes": {
            "AutomationEngine": {
                "methods": [
                    "__init__",
                    "run_prompt",
                    "get_engine_info"
                ],
                "docstring": "OpenAI Chat Completions API wrapper with retry and timeout.\n\nCapabilities:\n- GPT-3.5/GPT-4 prompt execution\n- Automatic retry with exponential backoff\n- Configurable timeout\n- V2 configuration integration",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 7
    },
    "src\\shared_utils\\logger.py": {
        "language": ".py",
        "functions": [
            "setup_logger"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\tools\\duplicate_detection\\file_hash.py": {
        "language": ".py",
        "functions": [
            "compute_file_sha256",
            "find_duplicate_files"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\ai_automation\\utils\\filesystem.py": {
        "language": ".py",
        "functions": [
            "make_executable"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\integrations\\jarvis\\ollama_integration.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "is_available",
            "get_models",
            "generate",
            "__init__",
            "is_ready",
            "get_model_info",
            "generate_response",
            "__init__",
            "set_code_context",
            "analyze_code",
            "generate_code",
            "review_code",
            "debug_code",
            "process_voice_command",
            "extract_intent",
            "__init__",
            "register_agent",
            "get_agent",
            "is_available",
            "get_available_models",
            "create_specialized_agent",
            "create_code_agent",
            "create_voice_agent"
        ],
        "classes": {
            "OllamaResponse": {
                "methods": [],
                "docstring": "Response from Ollama API.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "OllamaClient": {
                "methods": [
                    "__init__",
                    "is_available",
                    "get_models",
                    "generate"
                ],
                "docstring": "Client for interacting with Ollama API.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "OllamaAgent": {
                "methods": [
                    "__init__",
                    "is_ready",
                    "get_model_info",
                    "generate_response"
                ],
                "docstring": "Agent powered by Ollama LLM.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "OllamaSpecializedAgent": {
                "methods": [
                    "__init__",
                    "set_code_context",
                    "analyze_code",
                    "generate_code",
                    "review_code",
                    "debug_code",
                    "process_voice_command",
                    "extract_intent"
                ],
                "docstring": "Specialized agent for code and voice tasks (CONSOLIDATED).\n\nReplaces OllamaCodeAgent and OllamaVoiceAgent with unified implementation.\nSupports both code analysis and voice processing through mode parameter.\n\nV2 Compliance: Class consolidation (6 \u2192 5 classes)",
                "base_classes": [
                    "OllamaAgent"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "OllamaManager": {
                "methods": [
                    "__init__",
                    "register_agent",
                    "get_agent",
                    "is_available",
                    "get_available_models",
                    "create_specialized_agent",
                    "create_code_agent",
                    "create_voice_agent"
                ],
                "docstring": "Manager for multiple Ollama agents.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 48
    },
    "src\\integrations\\jarvis\\conversation_patterns.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\integrations\\jarvis\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\integrations\\osrs\\osrs_agent_core.py": {
        "language": ".py",
        "functions": [
            "create_osrs_agent",
            "__init__",
            "setup_logging",
            "start_autonomous_operation",
            "execute_osrs_cycle",
            "update_game_state",
            "process_coordination_messages",
            "execute_role_activity",
            "send_message",
            "communicate_with_swarm",
            "update_status",
            "pause_agent",
            "resume_agent",
            "shutdown"
        ],
        "classes": {
            "AgentRole": {
                "methods": [],
                "docstring": "OSRS Agent specializations.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AgentStatus": {
                "methods": [],
                "docstring": "Agent operational status.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "OSRSAccount": {
                "methods": [],
                "docstring": "OSRS account configuration.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "OSRSGameState": {
                "methods": [],
                "docstring": "Current OSRS game state.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "OSRS_Agent_Core": {
                "methods": [
                    "__init__",
                    "setup_logging",
                    "start_autonomous_operation",
                    "execute_osrs_cycle",
                    "update_game_state",
                    "process_coordination_messages",
                    "execute_role_activity",
                    "send_message",
                    "communicate_with_swarm",
                    "update_status",
                    "pause_agent",
                    "resume_agent",
                    "shutdown"
                ],
                "docstring": "@brief Core OSRS Agent - Autonomous Old School RuneScape coordination agent.\n\nThis class represents a single autonomous agent that can play OSRS\ncontinuously without manual intervention, coordinating with other agents\nin the swarm for maximum efficiency.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 27
    },
    "src\\integrations\\jarvis\\vision_system.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "capture_screen",
            "extract_text",
            "detect_ui_elements",
            "find_text_regions",
            "analyze_screen_content",
            "continuous_monitoring",
            "save_vision_data"
        ],
        "classes": {
            "VisionSystem": {
                "methods": [
                    "__init__",
                    "capture_screen",
                    "extract_text",
                    "detect_ui_elements",
                    "find_text_regions",
                    "analyze_screen_content",
                    "continuous_monitoring",
                    "save_vision_data"
                ],
                "docstring": "Vision system for AI agents to \"see\" what's on screen\nProvides screenshot capture, OCR, and visual analysis capabilities",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\integrations\\osrs\\performance_validation.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_performance_report"
        ],
        "classes": {
            "PerformanceMetrics": {
                "methods": [],
                "docstring": "Performance metrics for validation.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "GamingPerformanceValidator": {
                "methods": [
                    "__init__",
                    "generate_performance_report"
                ],
                "docstring": "Performance validator for gaming infrastructure components.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\integrations\\jarvis\\memory_database.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "init_database",
            "load_memory",
            "save_memory"
        ],
        "classes": {
            "MemoryDatabase": {
                "methods": [
                    "__init__",
                    "init_database",
                    "load_memory",
                    "save_memory"
                ],
                "docstring": "Handles database operations for memory system.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\tools\\duplicate_detection\\dups_format.py": {
        "language": ".py",
        "functions": [
            "format_duplicates_text"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\integrations\\jarvis\\conversation_pattern_data.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\integrations\\osrs\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\tools\\duplicate_detection\\duplicate_gui.py": {
        "language": ".py",
        "functions": [
            "_format_duplicates_text",
            "main",
            "__init__",
            "_on_browse",
            "_on_clear_clicked",
            "_on_scan_clicked",
            "_scan_path",
            "_set_output",
            "_set_buttons_state",
            "_get_output_text",
            "_build_menu",
            "_save_report",
            "_on_save_report_clicked",
            "run",
            "work"
        ],
        "classes": {
            "DuplicateScannerGUI": {
                "methods": [
                    "__init__",
                    "_on_browse",
                    "_on_clear_clicked",
                    "_on_scan_clicked",
                    "_scan_path",
                    "_set_output",
                    "_set_buttons_state",
                    "_get_output_text",
                    "_build_menu",
                    "_save_report",
                    "_on_save_report_clicked",
                    "run"
                ],
                "docstring": null,
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "ActionAgent"
            }
        },
        "routes": [],
        "complexity": 27
    },
    "src\\integrations\\jarvis\\conversation_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_response",
            "_check_specific_patterns",
            "_is_learning_request",
            "_handle_learning",
            "_is_memory_query",
            "_handle_memory_query",
            "_is_help_request",
            "_handle_help_request",
            "_is_identity_question",
            "_handle_identity_question",
            "_is_greeting",
            "_handle_greeting",
            "_is_farewell",
            "_handle_farewell",
            "_is_gratitude",
            "_handle_gratitude",
            "_generate_default_response",
            "remember_conversation",
            "get_conversation_summary"
        ],
        "classes": {
            "ConversationEngine": {
                "methods": [
                    "__init__",
                    "generate_response",
                    "_check_specific_patterns",
                    "_is_learning_request",
                    "_handle_learning",
                    "_is_memory_query",
                    "_handle_memory_query",
                    "_is_help_request",
                    "_handle_help_request",
                    "_is_identity_question",
                    "_handle_identity_question",
                    "_is_greeting",
                    "_handle_greeting",
                    "_is_farewell",
                    "_handle_farewell",
                    "_is_gratitude",
                    "_handle_gratitude",
                    "_generate_default_response",
                    "remember_conversation",
                    "get_conversation_summary"
                ],
                "docstring": "AI-powered conversation engine for Personal Jarvis",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 40
    },
    "src\\tools\\duplicate_detection\\find_duplicates.py": {
        "language": ".py",
        "functions": [
            "parse_args",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\integrations\\osrs\\osrs_role_activities.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute_combat_activity",
            "execute_resource_activity",
            "execute_quest_activity",
            "execute_strategic_activity",
            "execute_trading_activity",
            "execute_skill_training_activity",
            "execute_clan_activity",
            "execute_emergency_monitoring"
        ],
        "classes": {
            "OSRSRoleActivities": {
                "methods": [
                    "__init__",
                    "execute_combat_activity",
                    "execute_resource_activity",
                    "execute_quest_activity",
                    "execute_strategic_activity",
                    "execute_trading_activity",
                    "execute_skill_training_activity",
                    "execute_clan_activity",
                    "execute_emergency_monitoring"
                ],
                "docstring": "Executes role-specific OSRS activities.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\integrations\\osrs\\swarm_activity_planner.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "plan_strategic_activities",
            "should_plan_resource_gathering",
            "should_plan_combat_activity",
            "_get_resource_agents",
            "_get_combat_agents"
        ],
        "classes": {
            "SwarmActivity": {
                "methods": [],
                "docstring": "Coordinated swarm activity.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SwarmActivityPlanner": {
                "methods": [
                    "__init__",
                    "plan_strategic_activities",
                    "should_plan_resource_gathering",
                    "should_plan_combat_activity",
                    "_get_resource_agents",
                    "_get_combat_agents"
                ],
                "docstring": "Plans strategic activities for swarm.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\integrations\\osrs\\swarm_coordinator.py": {
        "language": ".py",
        "functions": [
            "create_swarm_coordinator",
            "__init__",
            "setup_logging",
            "register_agent",
            "start_coordination",
            "coordination_loop",
            "process_coordination_activities",
            "execute_coordination_activity",
            "check_activity_readiness",
            "manage_resource_sharing",
            "process_resource_request",
            "coordinate_strategic_activities",
            "plan_strategic_activities",
            "should_plan_resource_gathering",
            "should_plan_combat_activity",
            "monitor_agent_health",
            "restart_agent",
            "send_message",
            "update_coordination_status",
            "shutdown"
        ],
        "classes": {
            "SwarmMessage": {
                "methods": [],
                "docstring": "Message structure for swarm communication.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SwarmActivity": {
                "methods": [],
                "docstring": "Coordinated swarm activity.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "OSRS_Swarm_Coordinator": {
                "methods": [
                    "__init__",
                    "setup_logging",
                    "register_agent",
                    "start_coordination",
                    "coordination_loop",
                    "process_coordination_activities",
                    "execute_coordination_activity",
                    "check_activity_readiness",
                    "manage_resource_sharing",
                    "process_resource_request",
                    "coordinate_strategic_activities",
                    "plan_strategic_activities",
                    "should_plan_resource_gathering",
                    "should_plan_combat_activity",
                    "monitor_agent_health",
                    "restart_agent",
                    "send_message",
                    "update_coordination_status",
                    "shutdown"
                ],
                "docstring": "OSRS Swarm Coordinator - Manages coordination between 8 OSRS agents",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 39
    },
    "src\\integrations\\osrs\\osrs_coordination_handlers.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "handle_coordination_message",
            "handle_resource_request",
            "handle_activity_coordination",
            "handle_emergency_alert",
            "should_participate_in_activity",
            "initiate_emergency_response"
        ],
        "classes": {
            "OSRSCoordinationHandlers": {
                "methods": [
                    "__init__",
                    "handle_coordination_message",
                    "handle_resource_request",
                    "handle_activity_coordination",
                    "handle_emergency_alert",
                    "should_participate_in_activity",
                    "initiate_emergency_response"
                ],
                "docstring": "Handles coordination messages between OSRS agents.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\integrations\\osrs\\gaming_integration_core.py": {
        "language": ".py",
        "functions": [
            "create_gaming_integration_core",
            "create_session",
            "get_session",
            "end_session",
            "get_active_sessions",
            "register_system",
            "get_system",
            "get_all_systems",
            "handle_event",
            "__init__",
            "to_dict",
            "__init__",
            "to_dict",
            "__init__",
            "create_session",
            "get_session",
            "end_session",
            "get_active_sessions",
            "__init__",
            "register_system",
            "get_system",
            "get_all_systems",
            "__init__",
            "handle_event",
            "_handle_create_session",
            "_handle_end_session",
            "_handle_get_session",
            "__init__",
            "_initialize_integration",
            "_setup_default_handlers",
            "_connect_to_systems",
            "create_game_session",
            "get_game_session",
            "end_game_session",
            "get_active_sessions",
            "register_entertainment_system",
            "get_entertainment_system",
            "get_all_entertainment_systems",
            "register_event_handler",
            "handle_event",
            "get_status",
            "is_connected",
            "get_core_health"
        ],
        "classes": {
            "IGameSessionManager": {
                "methods": [
                    "create_session",
                    "get_session",
                    "end_session",
                    "get_active_sessions"
                ],
                "docstring": "Interface for game session management (ISP: Segregated interface).",
                "base_classes": [
                    "Protocol"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "IEntertainmentSystemManager": {
                "methods": [
                    "register_system",
                    "get_system",
                    "get_all_systems"
                ],
                "docstring": "Interface for entertainment system management (ISP: Segregated interface).",
                "base_classes": [
                    "Protocol"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "IIntegrationHandler": {
                "methods": [
                    "handle_event"
                ],
                "docstring": "Interface for integration event handlers (ISP: Segregated interface).",
                "base_classes": [
                    "Protocol"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "IntegrationStatus": {
                "methods": [],
                "docstring": "Integration status states.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "GameType": {
                "methods": [],
                "docstring": "Game types.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "GameSession": {
                "methods": [
                    "__init__",
                    "to_dict"
                ],
                "docstring": "Simplified game session - Single Responsibility: Data container.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "EntertainmentSystem": {
                "methods": [
                    "__init__",
                    "to_dict"
                ],
                "docstring": "Simplified entertainment system - Single Responsibility: Data container.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "GameSessionManager": {
                "methods": [
                    "__init__",
                    "create_session",
                    "get_session",
                    "end_session",
                    "get_active_sessions"
                ],
                "docstring": "Game session manager - Single Responsibility: Session management.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "EntertainmentSystemManager": {
                "methods": [
                    "__init__",
                    "register_system",
                    "get_system",
                    "get_all_systems"
                ],
                "docstring": "Entertainment system manager - Single Responsibility: System management.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "IntegrationEventHandler": {
                "methods": [
                    "__init__",
                    "handle_event",
                    "_handle_create_session",
                    "_handle_end_session",
                    "_handle_get_session"
                ],
                "docstring": "Integration event handler - Single Responsibility: Event processing.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "GamingIntegrationCore": {
                "methods": [
                    "__init__",
                    "_initialize_integration",
                    "_setup_default_handlers",
                    "_connect_to_systems",
                    "create_game_session",
                    "get_game_session",
                    "end_game_session",
                    "get_active_sessions",
                    "register_entertainment_system",
                    "get_entertainment_system",
                    "get_all_entertainment_systems",
                    "register_event_handler",
                    "handle_event",
                    "get_status",
                    "is_connected",
                    "get_core_health"
                ],
                "docstring": "Gaming integration core - SOLID Compliant: Uses composition and interfaces.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 85
    },
    "agent_workspaces\\database_specialist\\query_helpers.py": {
        "language": ".py",
        "functions": [
            "calculate_query_complexity",
            "simulate_index_usage",
            "suggest_query_rewrite",
            "get_common_queries",
            "get_test_queries_with_thresholds",
            "get_validation_queries"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "tools\\validate_imports.py": {
        "language": ".py",
        "functions": [
            "validate_module_imports",
            "validate_directory",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "tools\\update_swarm_brain.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_load_brain",
            "add_insight",
            "add_lesson",
            "add_recommendation",
            "add_pattern",
            "save"
        ],
        "classes": {
            "SwarmBrainUpdater": {
                "methods": [
                    "__init__",
                    "_load_brain",
                    "add_insight",
                    "add_lesson",
                    "add_recommendation",
                    "add_pattern",
                    "save"
                ],
                "docstring": "Updates the swarm brain database with insights and learnings.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 15
    },
    "tools\\agent_toolbelt_executors.py": {
        "language": ".py",
        "functions": [
            "execute",
            "execute",
            "execute",
            "execute",
            "execute",
            "execute",
            "execute",
            "execute"
        ],
        "classes": {
            "VectorExecutor": {
                "methods": [
                    "execute"
                ],
                "docstring": "Execute vector database operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MessagingExecutor": {
                "methods": [
                    "execute"
                ],
                "docstring": "Execute messaging operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AnalysisExecutor": {
                "methods": [
                    "execute"
                ],
                "docstring": "Execute analysis operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "V2Executor": {
                "methods": [
                    "execute"
                ],
                "docstring": "Execute V2 compliance operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AgentExecutor": {
                "methods": [
                    "execute"
                ],
                "docstring": "Execute agent operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ConsolidationExecutor": {
                "methods": [
                    "execute"
                ],
                "docstring": "Execute consolidation operations (learned from Agent-7's session).",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RefactorExecutor": {
                "methods": [
                    "execute"
                ],
                "docstring": "Execute refactoring operations (patterns learned from Agent-7's session).",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ComplianceExecutor": {
                "methods": [
                    "execute"
                ],
                "docstring": "Execute compliance checking operations (tools from Agent-7's refactor session).",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "tools\\arch_pattern_validator.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "validate_file",
            "_analyze_patterns",
            "_has_repository_pattern",
            "_has_service_pattern",
            "_has_dependency_injection",
            "_has_error_handling",
            "_has_logging",
            "_has_type_hints",
            "_has_docstrings",
            "_check_function_sizes",
            "_check_class_sizes",
            "_calculate_complexity",
            "_calculate_quality_score",
            "print_result"
        ],
        "classes": {
            "ValidationResult": {
                "methods": [],
                "docstring": "Results from validating a single file.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ArchitectureValidator": {
                "methods": [
                    "__init__",
                    "validate_file",
                    "_analyze_patterns",
                    "_has_repository_pattern",
                    "_has_service_pattern",
                    "_has_dependency_injection",
                    "_has_error_handling",
                    "_has_logging",
                    "_has_type_hints",
                    "_has_docstrings",
                    "_check_function_sizes",
                    "_check_class_sizes",
                    "_calculate_complexity",
                    "_calculate_quality_score",
                    "print_result"
                ],
                "docstring": "Validates code against V2 architectural patterns.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 31
    },
    "tools\\browser_pool_manager.py": {
        "language": ".py",
        "functions": [
            "is_expired",
            "mark_used",
            "__init__",
            "_create_browser",
            "acquire",
            "release",
            "_close_driver",
            "cleanup",
            "_get_reuse_rate",
            "get_stats",
            "__enter__",
            "__exit__"
        ],
        "classes": {
            "BrowserInstance": {
                "methods": [
                    "is_expired",
                    "mark_used"
                ],
                "docstring": "Represents a pooled browser instance.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "BrowserPoolManager": {
                "methods": [
                    "__init__",
                    "_create_browser",
                    "acquire",
                    "release",
                    "_close_driver",
                    "cleanup",
                    "_get_reuse_rate",
                    "get_stats",
                    "__enter__",
                    "__exit__"
                ],
                "docstring": "Manages a pool of browser instances for performance optimization.\n\nPerformance Benefits:\n- 20-30% faster operations (no startup overhead)\n- Reduced memory thrashing\n- Better resource utilization",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 24
    },
    "tools\\quick_linecount.py": {
        "language": ".py",
        "functions": [
            "count_lines",
            "format_result",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "mcp_servers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "scripts\\validate_config_ssot.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "trading_robot\\strategies\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "trading_robot\\web\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\config_ssot.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\analytics\\framework\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\error_handling\\archive_c055\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\services\\chatgpt\\session_persistence.py": {
        "language": ".py",
        "functions": [
            "clear_session_files"
        ],
        "classes": {
            "SessionPersistence": {
                "methods": [
                    "clear_session_files"
                ],
                "docstring": "Handles session data persistence operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\services\\chatgpt\\navigator_messaging.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "NavigatorMessaging": {
                "methods": [],
                "docstring": "Handles message sending and response waiting for ChatGPT navigator.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\tools\\github_scanner.py": {
        "language": ".py",
        "functions": [
            "get_setting",
            "filter_integration_candidates",
            "print_repository_summary",
            "__init__",
            "list_user_repositories",
            "get_repository",
            "get_repository_languages",
            "_parse_repository",
            "close",
            "__enter__",
            "__exit__"
        ],
        "classes": {
            "RepositoryInfo": {
                "methods": [],
                "docstring": "Information about a GitHub repository.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "GitHubScanner": {
                "methods": [
                    "__init__",
                    "list_user_repositories",
                    "get_repository",
                    "get_repository_languages",
                    "_parse_repository",
                    "close",
                    "__enter__",
                    "__exit__"
                ],
                "docstring": "GitHub API client for repository scanning.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 19
    },
    "src\\tools\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agent_workspaces\\database_specialist\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "project_analyzer_reports.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_chunk_reports",
            "generate_consolidation_summary"
        ],
        "classes": {
            "ReportGenerator": {
                "methods": [
                    "__init__",
                    "generate_chunk_reports",
                    "generate_consolidation_summary"
                ],
                "docstring": "Generates analysis reports and consolidation summaries.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "project_analyzer_core.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_project_structure",
            "analyze_directory_chunk",
            "identify_consolidation_opportunity",
            "get_consolidation_reason",
            "get_consolidation_priority"
        ],
        "classes": {
            "CoreAnalyzer": {
                "methods": [
                    "__init__",
                    "get_project_structure",
                    "analyze_directory_chunk",
                    "identify_consolidation_opportunity",
                    "get_consolidation_reason",
                    "get_consolidation_priority"
                ],
                "docstring": "Core project analysis and consolidation detection.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "project_analyzer_file.py": {
        "language": ".py",
        "functions": [
            "analyze_python_file",
            "analyze_js_file",
            "analyze_md_file",
            "analyze_yaml_file",
            "analyze_file",
            "_get_error_result"
        ],
        "classes": {
            "FileAnalyzer": {
                "methods": [
                    "analyze_python_file",
                    "analyze_js_file",
                    "analyze_md_file",
                    "analyze_yaml_file",
                    "analyze_file",
                    "_get_error_result"
                ],
                "docstring": "Analyzes individual files for various languages.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\services\\handlers\\task_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_ensure_data_dir",
            "can_handle",
            "handle",
            "_get_current_agent",
            "_handle_get_next_task",
            "_handle_list_tasks",
            "_handle_task_status",
            "_handle_complete_task",
            "_priority_name",
            "_task_status"
        ],
        "classes": {
            "TaskHandler": {
                "methods": [
                    "__init__",
                    "_ensure_data_dir",
                    "can_handle",
                    "handle",
                    "_get_current_agent",
                    "_handle_get_next_task",
                    "_handle_list_tasks",
                    "_handle_task_status",
                    "_handle_complete_task",
                    "_priority_name",
                    "_task_status"
                ],
                "docstring": "Handles task system commands for messaging CLI.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\services\\helpers\\task_repo_loader.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "is_assigned",
            "is_completed",
            "is_pending",
            "assign_to",
            "complete",
            "__init__",
            "_init_db",
            "_get_connection",
            "get",
            "get_pending",
            "save",
            "list_all",
            "_row_to_task",
            "_task_to_row"
        ],
        "classes": {
            "SimpleTask": {
                "methods": [
                    "__init__",
                    "is_assigned",
                    "is_completed",
                    "is_pending",
                    "assign_to",
                    "complete"
                ],
                "docstring": "Lightweight task representation for CLI operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SimpleTaskRepository": {
                "methods": [
                    "__init__",
                    "_init_db",
                    "_get_connection",
                    "get",
                    "get_pending",
                    "save",
                    "list_all",
                    "_row_to_task",
                    "_task_to_row"
                ],
                "docstring": "Lightweight SQLite task repository for CLI operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 30
    },
    "tools\\documentation_assistant.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "create_mission_doc",
            "create_completion_report",
            "create_milestone_doc",
            "create_enhancement_request",
            "create_status_snapshot",
            "_count_active_agents",
            "_list_recent_missions",
            "_list_recent_milestones"
        ],
        "classes": {
            "DocumentationAssistant": {
                "methods": [
                    "__init__",
                    "create_mission_doc",
                    "create_completion_report",
                    "create_milestone_doc",
                    "create_enhancement_request",
                    "create_status_snapshot",
                    "_count_active_agents",
                    "_list_recent_missions",
                    "_list_recent_milestones"
                ],
                "docstring": "Helper tool for generating consistent documentation.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 19
    },
    "src\\services\\helpers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\markov_8agent_roi_optimizer.py": {
        "language": ".py",
        "functions": [
            "calculate_roi",
            "load_top_violations",
            "create_roi_optimized_tasks",
            "assign_tasks_to_8_agents"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "tools\\markov_cycle_simulator.py": {
        "language": ".py",
        "functions": [
            "load_real_violations_from_scanner",
            "create_tasks_from_violations",
            "simulate_cycle",
            "run_4_cycle_simulation"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "tools\\markov_task_optimizer.py": {
        "language": ".py",
        "functions": [
            "demo_markov_optimizer",
            "__init__",
            "select_next_task",
            "_calculate_transition_probability",
            "_dependency_score",
            "_agent_match_score",
            "_strategic_value",
            "_risk_score",
            "_resource_availability",
            "_get_historical_success_rate",
            "_update_history",
            "build_transition_matrix",
            "_create_dummy_state_after",
            "find_optimal_sequence",
            "_simulate_state_after_task",
            "explain_recommendation"
        ],
        "classes": {
            "Task": {
                "methods": [],
                "docstring": "Task definition with Markov-relevant attributes.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ProjectState": {
                "methods": [],
                "docstring": "Current state of the project.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MarkovTaskOptimizer": {
                "methods": [
                    "__init__",
                    "select_next_task",
                    "_calculate_transition_probability",
                    "_dependency_score",
                    "_agent_match_score",
                    "_strategic_value",
                    "_risk_score",
                    "_resource_availability",
                    "_get_historical_success_rate",
                    "_update_history",
                    "build_transition_matrix",
                    "_create_dummy_state_after",
                    "find_optimal_sequence",
                    "_simulate_state_after_task",
                    "explain_recommendation"
                ],
                "docstring": "Markov Chain-based task optimizer for intelligent task selection.\n\nUses weighted scoring across multiple dimensions:\n- Dependency impact (unblocking other tasks)\n- Agent availability and specialization match\n- Strategic value (points, V2 compliance, consolidation)\n- Risk assessment (complexity, success rate)\n- Resource availability (file conflicts)",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 31
    },
    "src\\core\\messaging_protocol_models.py": {
        "language": ".py",
        "functions": [
            "send_message",
            "generate_onboarding_message",
            "format_message",
            "check_and_rotate"
        ],
        "classes": {
            "IMessageDelivery": {
                "methods": [
                    "send_message"
                ],
                "docstring": "Interface for message delivery mechanisms.\n\nDefines the contract for any message delivery service.\nSupports dependency injection and testability.",
                "base_classes": [
                    "Protocol"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "IOnboardingService": {
                "methods": [
                    "generate_onboarding_message"
                ],
                "docstring": "Interface for onboarding operations.\n\nDefines the contract for agent onboarding services.\nSupports customizable onboarding styles and content.",
                "base_classes": [
                    "Protocol"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "IMessageFormatter": {
                "methods": [
                    "format_message"
                ],
                "docstring": "Interface for message formatting operations.\n\nDefines the contract for message formatting services.\nSupports template-based message formatting.",
                "base_classes": [
                    "Protocol"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "IInboxManager": {
                "methods": [
                    "check_and_rotate"
                ],
                "docstring": "Interface for inbox management operations.\n\nDefines the contract for inbox rotation and management.\nSupports automated inbox cleanup and archival.",
                "base_classes": [
                    "Protocol"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\messaging_process_lock.py": {
        "language": ".py",
        "functions": [
            "get_messaging_lock",
            "with_messaging_lock",
            "__init__",
            "acquire",
            "release",
            "__enter__",
            "__exit__",
            "wrapper"
        ],
        "classes": {
            "CrossProcessMessagingLock": {
                "methods": [
                    "__init__",
                    "acquire",
                    "release",
                    "__enter__",
                    "__exit__"
                ],
                "docstring": "Cross-process lock for coordinating PyAutoGUI messaging operations.\n\nEnsures only ONE process can send messages at a time, preventing:\n- Mouse cursor conflicts\n- Wrong agent targeting\n- Interrupted typing/paste operations\n- Messages going to wrong inboxes",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 13
    },
    "src\\core\\error_handling\\error_intelligence.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "record_error",
            "record_recovery",
            "predict_failure_risk",
            "suggest_recovery_strategy",
            "get_component_health",
            "get_system_intelligence_report",
            "_analyze_patterns",
            "_get_recent_errors",
            "_get_error_trend",
            "_calculate_health_score"
        ],
        "classes": {
            "ErrorTrend": {
                "methods": [],
                "docstring": "Error trend indicators.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ErrorPattern": {
                "methods": [],
                "docstring": "Detected error pattern.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ErrorMetrics": {
                "methods": [],
                "docstring": "Error metrics for a component.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ErrorIntelligenceEngine": {
                "methods": [
                    "__init__",
                    "record_error",
                    "record_recovery",
                    "predict_failure_risk",
                    "suggest_recovery_strategy",
                    "get_component_health",
                    "get_system_intelligence_report",
                    "_analyze_patterns",
                    "_get_recent_errors",
                    "_get_error_trend",
                    "_calculate_health_score"
                ],
                "docstring": "Intelligent error analysis and prediction system.\n\nAnalyzes error patterns, predicts failures, and suggests recovery strategies\nbased on historical data and learning.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\core\\error_handling\\error_handling_models_v2.py": {
        "language": ".py",
        "functions": [
            "from_exception",
            "__post_init__",
            "to_dict",
            "__post_init__",
            "to_dict",
            "classify_severity",
            "classify_recoverability",
            "should_retry",
            "calculate_delay",
            "for_severity",
            "__init__",
            "decide_action"
        ],
        "classes": {
            "ErrorSeverity": {
                "methods": [],
                "docstring": "Error severity levels for autonomous decision making.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ErrorCategory": {
                "methods": [],
                "docstring": "Error category types for specialized handling.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ErrorRecoverability": {
                "methods": [],
                "docstring": "Error recoverability classification.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ErrorContext": {
                "methods": [
                    "from_exception"
                ],
                "docstring": "Error context information for autonomous analysis.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "BaseErrorResponse": {
                "methods": [
                    "__post_init__",
                    "to_dict"
                ],
                "docstring": "Base error response with shared logic (DRY principle).",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RecoverableErrorResponse": {
                "methods": [],
                "docstring": "Base class for recoverable errors (can retry).",
                "base_classes": [
                    "BaseErrorResponse"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "FileErrorResponse": {
                "methods": [],
                "docstring": "File operation error response (recoverable).",
                "base_classes": [
                    "RecoverableErrorResponse"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "NetworkErrorResponse": {
                "methods": [],
                "docstring": "Network operation error response (recoverable).",
                "base_classes": [
                    "RecoverableErrorResponse"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "DatabaseErrorResponse": {
                "methods": [],
                "docstring": "Database operation error response (recoverable).",
                "base_classes": [
                    "RecoverableErrorResponse"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CriticalErrorResponse": {
                "methods": [],
                "docstring": "Base class for critical errors (cannot retry).",
                "base_classes": [
                    "BaseErrorResponse"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ValidationErrorResponse": {
                "methods": [],
                "docstring": "Validation error response (critical - bad data).",
                "base_classes": [
                    "CriticalErrorResponse"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ConfigurationErrorResponse": {
                "methods": [],
                "docstring": "Configuration error response (critical - setup issue).",
                "base_classes": [
                    "CriticalErrorResponse"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AgentErrorResponse": {
                "methods": [],
                "docstring": "Agent operation error response (usually recoverable).",
                "base_classes": [
                    "RecoverableErrorResponse"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CoordinationErrorResponse": {
                "methods": [],
                "docstring": "Coordination error response (recoverable with retry).",
                "base_classes": [
                    "RecoverableErrorResponse"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ErrorSummary": {
                "methods": [
                    "__post_init__",
                    "to_dict"
                ],
                "docstring": "Error summary statistics for autonomous monitoring.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ErrorClassifier": {
                "methods": [
                    "classify_severity",
                    "classify_recoverability",
                    "should_retry"
                ],
                "docstring": "Autonomous error classification system.\n\nAutomatically determines:\n- Error severity (LOW, MEDIUM, HIGH, CRITICAL)\n- Error recoverability (RECOVERABLE, CRITICAL, CONDITIONAL)\n- Recommended action (RETRY, ESCALATE, FAIL)",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RetryConfiguration": {
                "methods": [
                    "calculate_delay",
                    "for_severity"
                ],
                "docstring": "Retry operation configuration with exponential backoff.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ErrorDecisionEngine": {
                "methods": [
                    "__init__",
                    "decide_action"
                ],
                "docstring": "Autonomous error decision engine.\n\nMakes decisions about error handling:\n- Should we retry?\n- Should we escalate?\n- Should we fail immediately?",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 24
    },
    "src\\infrastructure\\logging\\log_formatters.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "format",
            "__init__"
        ],
        "classes": {
            "ColorFormatter": {
                "methods": [
                    "__init__",
                    "format"
                ],
                "docstring": "Logging formatter with color support.",
                "base_classes": [
                    "logging.Formatter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "PlainFormatter": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Plain logging formatter without colors (for files).",
                "base_classes": [
                    "logging.Formatter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\infrastructure\\logging\\log_handlers.py": {
        "language": ".py",
        "functions": [
            "create_console_handler",
            "create_file_handler",
            "__init__",
            "setup_handlers",
            "get_handlers",
            "remove_all_handlers"
        ],
        "classes": {
            "LogHandlerFactory": {
                "methods": [
                    "create_console_handler",
                    "create_file_handler"
                ],
                "docstring": "Factory for creating logging handlers.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "LogHandlerManager": {
                "methods": [
                    "__init__",
                    "setup_handlers",
                    "get_handlers",
                    "remove_all_handlers"
                ],
                "docstring": "Manages logging handlers for a logger instance.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\infrastructure\\logging\\log_config.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "LogLevel": {
                "methods": [],
                "docstring": "Enumeration of log levels.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "LoggingConfig": {
                "methods": [],
                "docstring": "Configuration for logging operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\utils\\file_operations\\validation_operations.py": {
        "language": ".py",
        "functions": [
            "validate_file_path",
            "is_path_safe",
            "validate_file_extension"
        ],
        "classes": {
            "FileValidationResult": {
                "methods": [],
                "docstring": "Result of file validation.\n\nAttributes:\n    path: File path that was validated\n    exists: Whether the file/directory exists\n    is_file: Whether the path is a file\n    is_directory: Whether the path is a directory\n    readable: Whether the file is readable\n    writable: Whether the file is writable\n    size_bytes: File size in bytes\n    modified_time: Last modification time\n    errors: List of validation errors (if any)",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "FileValidator": {
                "methods": [
                    "validate_file_path",
                    "is_path_safe",
                    "validate_file_extension"
                ],
                "docstring": "Handles comprehensive file validation.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\utils\\file_operations\\scanner_operations.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "scan_directory",
            "scan_by_pattern",
            "get_scanned_files",
            "reset_scan",
            "count_files_by_extension"
        ],
        "classes": {
            "UnifiedFileScanner": {
                "methods": [
                    "__init__",
                    "scan_directory",
                    "scan_by_pattern",
                    "get_scanned_files",
                    "reset_scan",
                    "count_files_by_extension"
                ],
                "docstring": "Unified file scanner with filtering and pattern matching.\n\nProvides efficient directory scanning with support for:\n- Extension filtering\n- Exclude patterns\n- Recursive scanning\n- Scan history tracking",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\utils\\file_operations\\backup_operations.py": {
        "language": ".py",
        "functions": [
            "create_backup_manager",
            "create_backup",
            "restore_from_backup",
            "copy_file",
            "safe_delete_file",
            "__init__",
            "create_backup",
            "list_backups",
            "restore_backup",
            "cleanup_old_backups"
        ],
        "classes": {
            "BackupOperations": {
                "methods": [
                    "create_backup",
                    "restore_from_backup",
                    "copy_file",
                    "safe_delete_file"
                ],
                "docstring": "Handles backup and restore operations for individual files.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "BackupManager": {
                "methods": [
                    "__init__",
                    "create_backup",
                    "list_backups",
                    "restore_backup",
                    "cleanup_old_backups"
                ],
                "docstring": "Manages backups for agent state and configuration.\n\nProvides functionality for creating, listing, restoring, and cleaning up\nbackups of agent workspaces and configuration files.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 19
    },
    "src\\core\\error_handling\\error_classification.py": {
        "language": ".py",
        "functions": [
            "classify_error",
            "determine_severity",
            "is_recoverable",
            "suggest_recovery_approach",
            "__init__",
            "classify_error",
            "determine_severity",
            "determine_category",
            "is_recoverable",
            "suggest_recovery_approach",
            "get_classification_stats",
            "clear_cache"
        ],
        "classes": {
            "ErrorSeverity": {
                "methods": [],
                "docstring": "Error severity levels for classification.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ErrorCategory": {
                "methods": [],
                "docstring": "Error categories for intelligent handling.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ErrorClassifier": {
                "methods": [
                    "__init__",
                    "classify_error",
                    "determine_severity",
                    "determine_category",
                    "is_recoverable",
                    "suggest_recovery_approach",
                    "get_classification_stats",
                    "clear_cache"
                ],
                "docstring": "Intelligent error classifier for autonomous systems.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\core\\utilities\\result_utilities.py": {
        "language": ".py",
        "functions": [
            "create_result_manager",
            "__init__",
            "initialize",
            "cleanup",
            "add_result",
            "get_results",
            "get_last_result",
            "clear_results"
        ],
        "classes": {
            "ResultManager": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "add_result",
                    "get_results",
                    "get_last_result",
                    "clear_results"
                ],
                "docstring": "Manages results for operations.",
                "base_classes": [
                    "BaseUtility",
                    null
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 15
    },
    "src\\core\\utilities\\base_utilities.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "cleanup"
        ],
        "classes": {
            "BaseUtility": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup"
                ],
                "docstring": "Base class for all shared utilities.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\core\\utilities\\validation_utilities.py": {
        "language": ".py",
        "functions": [
            "create_validation_manager",
            "__init__",
            "initialize",
            "cleanup",
            "add_validation_rule",
            "validate",
            "get_validation_results"
        ],
        "classes": {
            "ValidationManager": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "add_validation_rule",
                    "validate",
                    "get_validation_results"
                ],
                "docstring": "Manages validation operations.",
                "base_classes": [
                    "BaseUtility"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 13
    },
    "src\\core\\utilities\\config_utilities.py": {
        "language": ".py",
        "functions": [
            "create_configuration_manager",
            "__init__",
            "initialize",
            "cleanup",
            "set_config",
            "get_config"
        ],
        "classes": {
            "ConfigurationManager": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "set_config",
                    "get_config"
                ],
                "docstring": "Manages configuration for managers.",
                "base_classes": [
                    "BaseUtility"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 11
    },
    "src\\core\\utilities\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\utilities\\logging_utilities.py": {
        "language": ".py",
        "functions": [
            "create_logging_manager",
            "__init__",
            "initialize",
            "cleanup",
            "set_log_level",
            "log_info",
            "log_error"
        ],
        "classes": {
            "LoggingManager": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "set_log_level",
                    "log_info",
                    "log_error"
                ],
                "docstring": "Manages logging for managers.",
                "base_classes": [
                    "BaseUtility"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 13
    },
    "src\\core\\utilities\\init_utilities.py": {
        "language": ".py",
        "functions": [
            "create_initialization_manager",
            "__init__",
            "initialize",
            "cleanup",
            "is_initialized",
            "get_init_time"
        ],
        "classes": {
            "InitializationManager": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "is_initialized",
                    "get_init_time"
                ],
                "docstring": "Manages initialization operations.",
                "base_classes": [
                    "BaseUtility"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 11
    },
    "src\\core\\utilities\\error_utilities.py": {
        "language": ".py",
        "functions": [
            "create_error_handler",
            "__init__",
            "initialize",
            "cleanup",
            "handle_error",
            "get_error_summary"
        ],
        "classes": {
            "ErrorHandler": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "handle_error",
                    "get_error_summary"
                ],
                "docstring": "Handles errors for managers.",
                "base_classes": [
                    "BaseUtility"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 11
    },
    "src\\core\\utilities\\cleanup_utilities.py": {
        "language": ".py",
        "functions": [
            "create_cleanup_manager",
            "__init__",
            "initialize",
            "cleanup",
            "register_handler"
        ],
        "classes": {
            "CleanupManager": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "register_handler"
                ],
                "docstring": "Manages cleanup operations for managers.",
                "base_classes": [
                    "BaseUtility"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 9
    },
    "src\\core\\utilities\\status_utilities.py": {
        "language": ".py",
        "functions": [
            "create_status_manager",
            "__init__",
            "initialize",
            "cleanup",
            "set_status",
            "get_status",
            "get_status_history"
        ],
        "classes": {
            "StatusManager": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "set_status",
                    "get_status",
                    "get_status_history"
                ],
                "docstring": "Manages status for managers.",
                "base_classes": [
                    "BaseUtility"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 13
    },
    "src\\discord_commander\\unified_discord_bot.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__"
        ],
        "classes": {
            "UnifiedDiscordBot": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Single unified Discord bot for agent messaging system.",
                "base_classes": [
                    "commands.Bot"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MessagingCommands": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Commands for agent messaging.",
                "base_classes": [
                    "commands.Cog"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\discord_commander\\discord_gui_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_main_gui",
            "create_status_gui",
            "create_agent_message_modal",
            "create_broadcast_modal",
            "get_agent_status"
        ],
        "classes": {
            "DiscordGUIController": {
                "methods": [
                    "__init__",
                    "create_main_gui",
                    "create_status_gui",
                    "create_agent_message_modal",
                    "create_broadcast_modal",
                    "get_agent_status"
                ],
                "docstring": "Unified Discord GUI Controller for Agent Messaging System (Facade Pattern).\n\nProvides complete Discord-based access to:\n- Agent-to-agent messaging\n- Swarm status monitoring\n- Broadcast communications\n- Interactive GUI (views, modals, buttons)\n\nThis is a lightweight facade that delegates to specialized components:\n- discord_gui_views.py: UI views (AgentMessagingGUIView, SwarmStatusGUIView)\n- discord_gui_modals.py: UI modals (AgentMessageModal, BroadcastMessageModal)",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\message_task\\dedupe.py": {
        "language": ".py",
        "functions": [
            "task_fingerprint",
            "normalize_priority",
            "extract_tags"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\message_task\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\message_task\\schemas.py": {
        "language": ".py",
        "functions": [
            "to_dict",
            "format_message"
        ],
        "classes": {
            "InboundMessage": {
                "methods": [],
                "docstring": "Inbound message from any channel (Discord, CLI, Agent Bus).",
                "base_classes": [
                    "BaseModel"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ParsedTask": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Parsed task from message content.",
                "base_classes": [
                    "BaseModel"
                ],
                "maturity": "Core Asset",
                "agent_type": "DataAgent"
            },
            "TaskStateTransition": {
                "methods": [],
                "docstring": "Task state transition event.",
                "base_classes": [
                    "BaseModel"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TaskCompletionReport": {
                "methods": [
                    "format_message"
                ],
                "docstring": "Task completion report for messaging.",
                "base_classes": [
                    "BaseModel"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "Config": {
                "methods": [],
                "docstring": "Pydantic config.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\message_task\\ingestion_pipeline.py": {
        "language": ".py",
        "functions": [
            "handle_inbound",
            "__init__",
            "process"
        ],
        "classes": {
            "MessageTaskPipeline": {
                "methods": [
                    "__init__",
                    "process"
                ],
                "docstring": "Complete message-to-task ingestion pipeline.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 5
    },
    "src\\message_task\\parsers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\message_task\\fsm_bridge.py": {
        "language": ".py",
        "functions": [
            "initial_state",
            "transition_on_create",
            "transition_to_doing",
            "transition_to_blocked",
            "transition_to_done",
            "transition_to_cancelled",
            "is_terminal_state",
            "can_transition",
            "get_transition_event"
        ],
        "classes": {
            "TaskState": {
                "methods": [],
                "docstring": "Task state constants aligned with Core FSM.",
                "base_classes": [
                    "str",
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TaskEvent": {
                "methods": [],
                "docstring": "Task event constants.",
                "base_classes": [
                    "str",
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 9
    },
    "src\\message_task\\router.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "parse",
            "ingest"
        ],
        "classes": {
            "MessageTaskRouter": {
                "methods": [
                    "__init__",
                    "parse",
                    "ingest"
                ],
                "docstring": "Routes messages to tasks with deduplication.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\message_task\\emitters.py": {
        "language": ".py",
        "functions": [
            "on_task_state_change",
            "send_completion_report",
            "send_task_created_ack",
            "__init__",
            "emit"
        ],
        "classes": {
            "TaskEmitter": {
                "methods": [
                    "__init__",
                    "emit"
                ],
                "docstring": "Emits task-related messages to messaging bus.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 7
    },
    "src\\message_task\\messaging_integration.py": {
        "language": ".py",
        "functions": [
            "get_pipeline",
            "process_message_for_task",
            "should_create_task_from_message"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\message_task\\parsers\\structured_parser.py": {
        "language": ".py",
        "functions": [
            "parse"
        ],
        "classes": {
            "StructuredParser": {
                "methods": [
                    "parse"
                ],
                "docstring": "Parser for structured task messages.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "DataAgent"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\message_task\\parsers\\fallback_regex.py": {
        "language": ".py",
        "functions": [
            "parse"
        ],
        "classes": {
            "FallbackRegexParser": {
                "methods": [
                    "parse"
                ],
                "docstring": "Fallback parser using simple regex patterns.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "DataAgent"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\message_task\\parsers\\ai_parser.py": {
        "language": ".py",
        "functions": [
            "parse",
            "_extract_priority",
            "_extract_assignee"
        ],
        "classes": {
            "AIParser": {
                "methods": [
                    "parse",
                    "_extract_priority",
                    "_extract_assignee"
                ],
                "docstring": "AI-powered flexible parser for natural language.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "DataAgent"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\core\\error_handling\\error_execution.py": {
        "language": ".py",
        "functions": [
            "get_orchestrator",
            "execute_with_error_handling",
            "__init__",
            "execute_with_error_handling",
            "_execute_with_retry",
            "_attempt_recovery",
            "_execute_recovery_strategy",
            "_check_failure_risk",
            "_record_error_intelligence"
        ],
        "classes": {
            "ErrorExecutionOrchestrator": {
                "methods": [
                    "__init__",
                    "execute_with_error_handling",
                    "_execute_with_retry",
                    "_attempt_recovery",
                    "_execute_recovery_strategy",
                    "_check_failure_risk",
                    "_record_error_intelligence"
                ],
                "docstring": "Orchestrates operation execution with comprehensive error handling.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\core\\error_handling\\component_management.py": {
        "language": ".py",
        "functions": [
            "register_circuit_breaker",
            "register_retry_mechanism",
            "add_recovery_strategy",
            "get_component_status",
            "reset_component",
            "__init__",
            "register_circuit_breaker",
            "register_retry_mechanism",
            "add_recovery_strategy",
            "get_component_status",
            "get_error_report",
            "reset_component",
            "get_all_components",
            "get_component_metrics"
        ],
        "classes": {
            "ComponentManager": {
                "methods": [
                    "__init__",
                    "register_circuit_breaker",
                    "register_retry_mechanism",
                    "add_recovery_strategy",
                    "get_component_status",
                    "get_error_report",
                    "reset_component",
                    "get_all_components",
                    "get_component_metrics"
                ],
                "docstring": "Manages error handling components for autonomous systems.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 23
    },
    "src\\core\\import_system\\import_mixins_core.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "os",
            "sys",
            "json",
            "logging",
            "threading",
            "time",
            "re",
            "datetime",
            "Path",
            "__init__",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Union",
            "Callable",
            "Tuple",
            "__init__",
            "dataclass",
            "field",
            "Enum",
            "ABC",
            "abstractmethod"
        ],
        "classes": {
            "CoreImportsMixin": {
                "methods": [
                    "__init__",
                    "os",
                    "sys",
                    "json",
                    "logging",
                    "threading",
                    "time",
                    "re",
                    "datetime",
                    "Path"
                ],
                "docstring": "Mixin providing core Python imports via delegation.\n\nProvides access to: os, sys, json, logging, threading, time, re, datetime, Path",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TypingImportsMixin": {
                "methods": [
                    "__init__",
                    "Any",
                    "Dict",
                    "List",
                    "Optional",
                    "Union",
                    "Callable",
                    "Tuple"
                ],
                "docstring": "Mixin providing typing imports via delegation.\n\nProvides access to: Any, Dict, List, Optional, Union, Callable, Tuple",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SpecialImportsMixin": {
                "methods": [
                    "__init__",
                    "dataclass",
                    "field",
                    "Enum",
                    "ABC",
                    "abstractmethod"
                ],
                "docstring": "Mixin providing special Python imports via delegation.\n\nProvides access to: dataclass, field, Enum, ABC, abstractmethod",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 48
    },
    "src\\core\\import_system\\import_mixins_utils.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_module_path",
            "is_module_available",
            "get_import_path",
            "resolve_relative_import",
            "get_package_root",
            "list_module_contents",
            "get_module_docstring",
            "validate_import_syntax",
            "get_import_dependencies",
            "create_import_alias",
            "create_from_import"
        ],
        "classes": {
            "ImportUtilitiesMixin": {
                "methods": [
                    "__init__",
                    "get_module_path",
                    "is_module_available",
                    "get_import_path",
                    "resolve_relative_import",
                    "get_package_root",
                    "list_module_contents",
                    "get_module_docstring",
                    "validate_import_syntax",
                    "get_import_dependencies",
                    "create_import_alias",
                    "create_from_import"
                ],
                "docstring": "Mixin providing import utility methods via delegation.\n\nProvides module introspection, validation, and path resolution utilities.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 24
    },
    "src\\core\\import_system\\import_mixins_registry.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register_import",
            "get_import",
            "has_import",
            "remove_import",
            "clear_cache",
            "get_cache_stats",
            "mark_failed_import",
            "is_failed_import",
            "clear_failed_imports",
            "get_import_history",
            "cleanup_old_imports",
            "get_import_patterns",
            "validate_import_pattern"
        ],
        "classes": {
            "ImportRegistryMixin": {
                "methods": [
                    "__init__",
                    "register_import",
                    "get_import",
                    "has_import",
                    "remove_import",
                    "clear_cache",
                    "get_cache_stats",
                    "mark_failed_import",
                    "is_failed_import",
                    "clear_failed_imports",
                    "get_import_history",
                    "cleanup_old_imports",
                    "get_import_patterns",
                    "validate_import_pattern"
                ],
                "docstring": "Mixin providing import registry methods via delegation.\n\nProvides import caching, history tracking, and pattern management.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 28
    },
    "src\\discord_commander\\discord_gui_views.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_agents",
            "_create_agent_options",
            "_get_status_emoji",
            "_extract_points",
            "__init__"
        ],
        "classes": {
            "AgentMessagingGUIView": {
                "methods": [
                    "__init__",
                    "_load_agents",
                    "_create_agent_options",
                    "_get_status_emoji",
                    "_extract_points"
                ],
                "docstring": "Complete agent messaging GUI with all controls.",
                "base_classes": [
                    "discord.ui.View"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SwarmStatusGUIView": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Status monitoring view.",
                "base_classes": [
                    "discord.ui.View"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\utils\\config_auto_migrator.py": {
        "language": ".py",
        "functions": [
            "auto_migrate_directory",
            "__init__",
            "auto_migrate_file",
            "_detect_hardcoded_values",
            "_is_config_value",
            "_generate_config_key",
            "_apply_migrations",
            "auto_update_imports",
            "generate_config_entries",
            "generate_migration_report"
        ],
        "classes": {
            "MigrationAction": {
                "methods": [],
                "docstring": "Represents an autonomous migration action.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ConfigAutoMigrator": {
                "methods": [
                    "__init__",
                    "auto_migrate_file",
                    "_detect_hardcoded_values",
                    "_is_config_value",
                    "_generate_config_key",
                    "_apply_migrations",
                    "auto_update_imports",
                    "generate_config_entries",
                    "generate_migration_report"
                ],
                "docstring": "Autonomous configuration migration system.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 19
    },
    "src\\utils\\autonomous_config_orchestrator.py": {
        "language": ".py",
        "functions": [
            "run_autonomous_config_system",
            "__init__",
            "run_autonomous_consolidation",
            "_generate_all_reports",
            "_generate_master_report",
            "save_reports"
        ],
        "classes": {
            "AutonomousConfigOrchestrator": {
                "methods": [
                    "__init__",
                    "run_autonomous_consolidation",
                    "_generate_all_reports",
                    "_generate_master_report",
                    "save_reports"
                ],
                "docstring": "Orchestrates autonomous configuration management.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 11
    },
    "src\\utils\\scanner_registry.py": {
        "language": ".py",
        "functions": [
            "auto_register",
            "__new__",
            "register",
            "get_scanner",
            "get_all_scanners",
            "auto_discover_scanners",
            "list_scanners"
        ],
        "classes": {
            "ScannerRegistry": {
                "methods": [
                    "__new__",
                    "register",
                    "get_scanner",
                    "get_all_scanners",
                    "auto_discover_scanners",
                    "list_scanners"
                ],
                "docstring": "Autonomous scanner registry with auto-discovery.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 13
    },
    "src\\utils\\config_remediator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "auto_fix_duplicates",
            "_consolidate_duplicates",
            "auto_validate_and_heal",
            "_check_missing_imports",
            "_add_config_import",
            "_check_naming_consistency",
            "_check_unused_configs",
            "generate_remediation_report"
        ],
        "classes": {
            "RemediationAction": {
                "methods": [],
                "docstring": "Represents an autonomous remediation action.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ConfigRemediator": {
                "methods": [
                    "__init__",
                    "auto_fix_duplicates",
                    "_consolidate_duplicates",
                    "auto_validate_and_heal",
                    "_check_missing_imports",
                    "_add_config_import",
                    "_check_naming_consistency",
                    "_check_unused_configs",
                    "generate_remediation_report"
                ],
                "docstring": "Autonomous configuration remediation system.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\discord_commander\\discord_gui_modals.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__"
        ],
        "classes": {
            "AgentMessageModal": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Modal for composing message to specific agent.",
                "base_classes": [
                    "discord.ui.Modal"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "BroadcastMessageModal": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Modal for broadcasting message to all agents.",
                "base_classes": [
                    "discord.ui.Modal"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\gaming\\dreamos\\fsm_file_operations.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "save_task",
            "load_task",
            "emit_verification_message",
            "get_all_task_files",
            "check_agent_reports",
            "move_to_processed"
        ],
        "classes": {
            "FSMFileOperations": {
                "methods": [
                    "__init__",
                    "save_task",
                    "load_task",
                    "emit_verification_message",
                    "get_all_task_files",
                    "check_agent_reports",
                    "move_to_processed"
                ],
                "docstring": "Handles all file operations for FSM orchestrator.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\gaming\\dreamos\\fsm_models.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "__post_init__"
        ],
        "classes": {
            "TaskState": {
                "methods": [],
                "docstring": "Task state enumeration for FSM workflow.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "Task": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Task data structure for FSM orchestrator.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AgentReport": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Agent report data structure for task updates.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "run_discord_bot.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "run_unified_discord_bot.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "docs\\examples\\gaming_integration_core_examples.py": {
        "language": ".py",
        "functions": [
            "example_basic_session",
            "example_multi_player",
            "example_entertainment_systems",
            "example_event_driven",
            "example_custom_handler",
            "example_health_monitoring",
            "example_dependency_injection",
            "__init__",
            "handle_event",
            "__init__",
            "create_session",
            "get_session",
            "end_session",
            "get_active_sessions"
        ],
        "classes": {
            "AnalyticsHandler": {
                "methods": [
                    "__init__",
                    "handle_event"
                ],
                "docstring": null,
                "base_classes": [],
                "maturity": "Prototype",
                "agent_type": "Utility"
            },
            "LoggingSessionManager": {
                "methods": [
                    "__init__",
                    "create_session",
                    "get_session",
                    "end_session",
                    "get_active_sessions"
                ],
                "docstring": null,
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 21
    },
    "extensions\\repository-navigator\\jest.config.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "extensions\\repository-navigator\\src\\types.ts": {
        "language": ".ts",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "extensions\\repository-navigator\\src\\metadataReader.ts": {
        "language": ".ts",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "extensions\\repository-navigator\\src\\extension.ts": {
        "language": ".ts",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "extensions\\repository-navigator\\src\\treeDataProvider.ts": {
        "language": ".ts",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\error_handling\\error_decision_models.py": {
        "language": ".py",
        "functions": [
            "classify",
            "_determine_severity",
            "_determine_category",
            "_determine_recoverability",
            "should_retry",
            "get_delay",
            "decide_action"
        ],
        "classes": {
            "ErrorClassifier": {
                "methods": [
                    "classify",
                    "_determine_severity",
                    "_determine_category",
                    "_determine_recoverability"
                ],
                "docstring": "Intelligent error classifier for autonomous systems.\n\nClassifies errors by severity, category, and recoverability.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RetryConfiguration": {
                "methods": [
                    "should_retry",
                    "get_delay"
                ],
                "docstring": "Retry configuration for error recovery.\n\nDefines retry behavior for different error types.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ErrorDecisionEngine": {
                "methods": [
                    "decide_action"
                ],
                "docstring": "Error decision engine for autonomous error handling.\n\nMakes decisions about error handling strategies based on classification.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\core\\error_handling\\error_responses_specialized.py": {
        "language": ".py",
        "functions": [
            "to_dict",
            "to_dict",
            "to_dict",
            "__post_init__",
            "to_dict",
            "__post_init__",
            "to_dict"
        ],
        "classes": {
            "ValidationErrorResponse": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Validation error response.",
                "base_classes": [
                    "StandardErrorResponse"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ConfigurationErrorResponse": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Configuration error response.",
                "base_classes": [
                    "StandardErrorResponse"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AgentErrorResponse": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Agent operation error response.",
                "base_classes": [
                    "StandardErrorResponse"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CoordinationErrorResponse": {
                "methods": [
                    "__post_init__",
                    "to_dict"
                ],
                "docstring": "Coordination error response.",
                "base_classes": [
                    "StandardErrorResponse"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ErrorSummary": {
                "methods": [
                    "__post_init__",
                    "to_dict"
                ],
                "docstring": "Error summary statistics.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\core\\error_handling\\error_response_models.py": {
        "language": ".py",
        "functions": [
            "to_dict",
            "__post_init__"
        ],
        "classes": {
            "BaseErrorResponse": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Base error response with common fields.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RecoverableErrorResponse": {
                "methods": [],
                "docstring": "Error response for recoverable errors.",
                "base_classes": [
                    "BaseErrorResponse"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "FileErrorResponse": {
                "methods": [],
                "docstring": "Error response for file operation errors.",
                "base_classes": [
                    "RecoverableErrorResponse"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "NetworkErrorResponse": {
                "methods": [],
                "docstring": "Error response for network/connection errors.",
                "base_classes": [
                    "RecoverableErrorResponse"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "DatabaseErrorResponse": {
                "methods": [],
                "docstring": "Error response for database operation errors.",
                "base_classes": [
                    "RecoverableErrorResponse"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CriticalErrorResponse": {
                "methods": [],
                "docstring": "Error response for critical system errors.",
                "base_classes": [
                    "BaseErrorResponse"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ValidationErrorResponse": {
                "methods": [],
                "docstring": "Error response for validation failures.",
                "base_classes": [
                    "CriticalErrorResponse"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ConfigurationErrorResponse": {
                "methods": [],
                "docstring": "Error response for configuration errors.",
                "base_classes": [
                    "CriticalErrorResponse"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AgentErrorResponse": {
                "methods": [],
                "docstring": "Error response for agent-specific errors.",
                "base_classes": [
                    "RecoverableErrorResponse"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CoordinationErrorResponse": {
                "methods": [
                    "__post_init__"
                ],
                "docstring": "Error response for coordination/communication errors.",
                "base_classes": [
                    "RecoverableErrorResponse"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\core\\error_handling\\coordination_strategies.py": {
        "language": ".py",
        "functions": [
            "create_service_restart_strategy",
            "create_config_reset_strategy",
            "register_default_coordination_strategies",
            "restart_service",
            "reset_config"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "src\\core\\error_handling\\error_responses.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "to_dict",
            "to_dict",
            "to_dict",
            "to_dict"
        ],
        "classes": {
            "ErrorContext": {
                "methods": [],
                "docstring": "Error context information.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "StandardErrorResponse": {
                "methods": [
                    "__post_init__",
                    "to_dict"
                ],
                "docstring": "Standardized error response format.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "FileErrorResponse": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "File operation error response.",
                "base_classes": [
                    "StandardErrorResponse"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "NetworkErrorResponse": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Network operation error response.",
                "base_classes": [
                    "StandardErrorResponse"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "DatabaseErrorResponse": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Database operation error response.",
                "base_classes": [
                    "StandardErrorResponse"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\error_handling\\error_exceptions.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "RetryException": {
                "methods": [],
                "docstring": "Exception raised to trigger retry mechanism.",
                "base_classes": [
                    "Exception"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CircuitBreakerError": {
                "methods": [],
                "docstring": "Exception raised when circuit breaker is OPEN.",
                "base_classes": [
                    "Exception"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\core\\error_handling\\error_config.py": {
        "language": ".py",
        "functions": [
            "calculate_delay"
        ],
        "classes": {
            "RetryConfig": {
                "methods": [
                    "calculate_delay"
                ],
                "docstring": "Unified retry configuration (consolidated from multiple sources).",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CircuitBreakerConfig": {
                "methods": [],
                "docstring": "Circuit breaker configuration.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RecoverableErrors": {
                "methods": [],
                "docstring": "Recoverable error types.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ErrorSeverityMapping": {
                "methods": [],
                "docstring": "Error severity mapping.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\core\\error_handling\\error_context_models.py": {
        "language": ".py",
        "functions": [
            "add_metadata",
            "to_dict",
            "increment_severity",
            "increment_category",
            "to_dict"
        ],
        "classes": {
            "ErrorContext": {
                "methods": [
                    "add_metadata",
                    "to_dict"
                ],
                "docstring": "Error context information for debugging and recovery.\n\nProvides comprehensive context about error occurrence including:\n- Component and operation information\n- Execution environment details\n- Error metadata and timing",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ErrorSummary": {
                "methods": [
                    "increment_severity",
                    "increment_category",
                    "to_dict"
                ],
                "docstring": "Error summary for reporting and analysis.\n\nAggregates error information for monitoring and intelligence.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\error_handling\\coordination_decorator.py": {
        "language": ".py",
        "functions": [
            "handle_coordination_errors",
            "decorator",
            "wrapper",
            "operation"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "src\\core\\config\\config_enums.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "ConfigEnvironment": {
                "methods": [],
                "docstring": "Configuration environment types.",
                "base_classes": [
                    "str",
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ConfigSource": {
                "methods": [],
                "docstring": "Configuration source types.",
                "base_classes": [
                    "str",
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ReportFormat": {
                "methods": [],
                "docstring": "Report output formats.",
                "base_classes": [
                    "str",
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\core\\config\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\utils\\config_file_scanner.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_skip_patterns",
            "should_skip_file",
            "scan_file",
            "scan_directory"
        ],
        "classes": {
            "FileScanner": {
                "methods": [
                    "__init__",
                    "_get_skip_patterns",
                    "should_skip_file",
                    "scan_file",
                    "scan_directory"
                ],
                "docstring": "Handles file scanning operations for configuration patterns.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\utils\\config_models.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "ConfigPattern": {
                "methods": [],
                "docstring": "Configuration pattern found in code.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 0
    },
    "tell_thea_session_summary.py": {
        "language": ".py",
        "functions": [
            "tell_thea"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "jest.config.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "run_discord_commander.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\refactor_validator.py": {
        "language": ".py",
        "functions": [
            "validate_imports",
            "validate_backwards_compatibility",
            "run_basic_functionality_test",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "tools\\agent_task_finder.py": {
        "language": ".py",
        "functions": [
            "load_project_analysis",
            "calculate_roi",
            "find_violations",
            "rank_tasks_by_roi",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "tools\\git_commit_verifier.py": {
        "language": ".py",
        "functions": [
            "run_git_command",
            "check_commits_today",
            "verify_work_exists",
            "check_file_exists"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "tools\\swarm_status_broadcaster.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "broadcast",
            "broadcast_c055_status",
            "broadcast_v2_progress",
            "broadcast_achievement",
            "_send_to_agent",
            "broadcast_with_template"
        ],
        "classes": {
            "BroadcastMessage": {
                "methods": [],
                "docstring": "A message to broadcast to agents",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SwarmStatusBroadcaster": {
                "methods": [
                    "__init__",
                    "broadcast",
                    "broadcast_c055_status",
                    "broadcast_v2_progress",
                    "broadcast_achievement",
                    "_send_to_agent",
                    "broadcast_with_template"
                ],
                "docstring": "Broadcast status messages to multiple agents",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 15
    },
    "tools\\quick_metrics.py": {
        "language": ".py",
        "functions": [
            "analyze_file",
            "analyze_multiple",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "tools\\memory_leak_scanner.py": {
        "language": ".py",
        "functions": [
            "scan_file",
            "scan_directory",
            "print_report",
            "__init__"
        ],
        "classes": {
            "MemoryLeakPattern": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Memory leak pattern detector.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 5
    },
    "tools\\qa_validation_checklist.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "check",
            "run_git_command",
            "verify_git_commits_exist",
            "verify_files_exist",
            "run_validation",
            "print_summary"
        ],
        "classes": {
            "QAChecklist": {
                "methods": [
                    "__init__",
                    "check",
                    "run_git_command",
                    "verify_git_commits_exist",
                    "verify_files_exist",
                    "run_validation",
                    "print_summary"
                ],
                "docstring": "QA validation checklist.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "tools\\refresh_cache.py": {
        "language": ".py",
        "functions": [
            "check_cache_freshness",
            "delete_cache_files",
            "refresh_cache",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "tools\\v2_compliance_batch_checker.py": {
        "language": ".py",
        "functions": [
            "check_file_compliance",
            "batch_check",
            "print_report"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "tools\\git_work_verifier.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "verify_claim",
            "_get_git_evidence",
            "_parse_git_log",
            "verify_multiple_claims",
            "generate_report"
        ],
        "classes": {
            "WorkClaim": {
                "methods": [],
                "docstring": "A claim of work completed",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "GitEvidence": {
                "methods": [],
                "docstring": "Git evidence for work",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "VerificationResult": {
                "methods": [],
                "docstring": "Result of verifying a work claim",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "GitWorkVerifier": {
                "methods": [
                    "__init__",
                    "verify_claim",
                    "_get_git_evidence",
                    "_parse_git_log",
                    "verify_multiple_claims",
                    "generate_report"
                ],
                "docstring": "Verify work claims against git history",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 13
    },
    "tools\\captain_roi_quick_calc.py": {
        "language": ".py",
        "functions": [
            "calculate_task_roi"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tools\\integrity_validator.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "validate_task_completion",
            "validate_agent_status",
            "validate_points_claim",
            "generate_integrity_report"
        ],
        "classes": {
            "IntegrityCheck": {
                "methods": [],
                "docstring": "Result of integrity validation",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "IntegrityValidator": {
                "methods": [
                    "__init__",
                    "validate_task_completion",
                    "validate_agent_status",
                    "validate_points_claim",
                    "generate_integrity_report"
                ],
                "docstring": "Validate agent task claims against evidence",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 11
    },
    "tools\\captain_message_all_agents.py": {
        "language": ".py",
        "functions": [
            "message_all_agents"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tools\\captain_find_idle_agents.py": {
        "language": ".py",
        "functions": [
            "find_idle_agents"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tools\\verify_task.py": {
        "language": ".py",
        "functions": [
            "get_file_metrics",
            "search_file",
            "verify_task",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "tools\\captain_update_log.py": {
        "language": ".py",
        "functions": [
            "update_captains_log"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tools\\work_attribution_tool.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "get_agent_work",
            "get_all_agents_work",
            "verify_agent_did_work",
            "who_worked_on_file",
            "generate_attribution_report",
            "_parse_git_log"
        ],
        "classes": {
            "WorkItem": {
                "methods": [],
                "docstring": "A piece of work done by an agent",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "WorkAttributionTool": {
                "methods": [
                    "__init__",
                    "get_agent_work",
                    "get_all_agents_work",
                    "verify_agent_did_work",
                    "who_worked_on_file",
                    "generate_attribution_report",
                    "_parse_git_log"
                ],
                "docstring": "Attribution tool to properly credit agents for their work",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 15
    },
    "tools\\captain_gas_check.py": {
        "language": ".py",
        "functions": [
            "check_agent_gas_levels"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tools\\captain_check_agent_status.py": {
        "language": ".py",
        "functions": [
            "check_all_agent_status"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tools\\coverage_validator.py": {
        "language": ".py",
        "functions": [
            "parse_jest_coverage_summary",
            "validate_coverage"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tools\\work_completion_verifier.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "verify_extension",
            "verify_python_module",
            "_parse_coverage",
            "format_results"
        ],
        "classes": {
            "WorkCompletionVerifier": {
                "methods": [
                    "__init__",
                    "verify_extension",
                    "verify_python_module",
                    "_parse_coverage",
                    "format_results"
                ],
                "docstring": "Verify work completion before messaging.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 11
    },
    "tools\\agent_status_quick_check.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "get_agent_status",
            "format_quick_status",
            "format_detailed_status",
            "check_all_agents"
        ],
        "classes": {
            "AgentStatusChecker": {
                "methods": [
                    "__init__",
                    "get_agent_status",
                    "format_quick_status",
                    "format_detailed_status",
                    "check_all_agents"
                ],
                "docstring": "Quick agent status verification.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 11
    },
    "tools\\swarm_orchestrator.py": {
        "language": ".py",
        "functions": [
            "run_orchestrator",
            "__init__",
            "_discover_agents",
            "get_agent_status",
            "scan_all_opportunities",
            "_scan_linter_errors",
            "_scan_v2_violations",
            "_scan_memory_leaks",
            "_scan_test_coverage",
            "_scan_todo_comments",
            "_scan_duplication",
            "_scan_complexity",
            "calculate_roi",
            "match_to_agent",
            "create_inbox_task",
            "send_gas_message",
            "run_cycle"
        ],
        "classes": {
            "SwarmOrchestrator": {
                "methods": [
                    "__init__",
                    "_discover_agents",
                    "get_agent_status",
                    "scan_all_opportunities",
                    "_scan_linter_errors",
                    "_scan_v2_violations",
                    "_scan_memory_leaks",
                    "_scan_test_coverage",
                    "_scan_todo_comments",
                    "_scan_duplication",
                    "_scan_complexity",
                    "calculate_roi",
                    "match_to_agent",
                    "create_inbox_task",
                    "send_gas_message",
                    "run_cycle"
                ],
                "docstring": "The Gas Station - Autonomous Swarm Coordinator.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 33
    },
    "tools\\captain_self_message.py": {
        "language": ".py",
        "functions": [
            "send_self_message"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tools\\captain_next_task_picker.py": {
        "language": ".py",
        "functions": [
            "calculate_roi",
            "get_next_task_for_agent"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tools\\captain_toolbelt_help.py": {
        "language": ".py",
        "functions": [
            "show_toolbelt"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tools\\captain_leaderboard_update.py": {
        "language": ".py",
        "functions": [
            "update_leaderboard"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tools\\pattern_suggester.py": {
        "language": ".py",
        "functions": [
            "analyze_file_structure",
            "suggest_pattern",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "tools\\agent_message_history.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "get_agent_inbox",
            "get_sent_messages",
            "_extract_sender",
            "_extract_recipient",
            "_extract_priority",
            "format_message_list",
            "_get_priority_icon",
            "show_conversation"
        ],
        "classes": {
            "MessageHistoryViewer": {
                "methods": [
                    "__init__",
                    "get_agent_inbox",
                    "get_sent_messages",
                    "_extract_sender",
                    "_extract_recipient",
                    "_extract_priority",
                    "format_message_list",
                    "_get_priority_icon",
                    "show_conversation"
                ],
                "docstring": "View agent message history.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 19
    },
    "tools\\real_violation_scanner.py": {
        "language": ".py",
        "functions": [
            "scan_file",
            "find_real_violations",
            "verify_claimed_files",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "tools\\task_verification_tool.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "verify_all",
            "_get_metrics",
            "_check_git_history",
            "_check_refactor_headers",
            "_get_recommendation"
        ],
        "classes": {
            "TaskVerifier": {
                "methods": [
                    "__init__",
                    "verify_all",
                    "_get_metrics",
                    "_check_git_history",
                    "_check_refactor_headers",
                    "_get_recommendation"
                ],
                "docstring": "Verifies task state before execution.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 13
    },
    "tools\\autonomous_task_engine.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "discover_tasks",
            "get_optimal_task_for_agent",
            "get_top_n_tasks_for_agent",
            "claim_task",
            "start_task",
            "complete_task",
            "generate_autonomous_report",
            "_discover_v2_violations",
            "_discover_tech_debt",
            "_discover_code_todos",
            "_discover_optimizations",
            "_discover_test_gaps",
            "_calculate_skill_matches",
            "_score_task_for_agent",
            "_get_or_create_agent_profile",
            "_has_unmet_blockers",
            "_find_task",
            "_update_agent_profile",
            "_load_tasks",
            "_save_tasks",
            "_load_agent_profiles",
            "_save_agent_profiles"
        ],
        "classes": {
            "Task": {
                "methods": [],
                "docstring": "A discovered task opportunity",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AgentProfile": {
                "methods": [],
                "docstring": "Agent's capabilities and history",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TaskRecommendation": {
                "methods": [],
                "docstring": "Personalized task recommendation for an agent",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AutonomousTaskEngine": {
                "methods": [
                    "__init__",
                    "discover_tasks",
                    "get_optimal_task_for_agent",
                    "get_top_n_tasks_for_agent",
                    "claim_task",
                    "start_task",
                    "complete_task",
                    "generate_autonomous_report",
                    "_discover_v2_violations",
                    "_discover_tech_debt",
                    "_discover_code_todos",
                    "_discover_optimizations",
                    "_discover_test_gaps",
                    "_calculate_skill_matches",
                    "_score_task_for_agent",
                    "_get_or_create_agent_profile",
                    "_has_unmet_blockers",
                    "_find_task",
                    "_update_agent_profile",
                    "_load_tasks",
                    "_save_tasks",
                    "_load_agent_profiles",
                    "_save_agent_profiles"
                ],
                "docstring": "The Masterpiece Tool - Autonomous Task Discovery & Selection Engine\n\nEnables agents to:\n1. Discover optimal tasks autonomously\n2. Get personalized recommendations based on skills\n3. Calculate ROI and impact automatically\n4. Claim and track tasks without Captain intervention\n5. Coordinate with other agents intelligently",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 47
    },
    "tools\\agent_mission_controller.py": {
        "language": ".py",
        "functions": [
            "main",
            "load",
            "matches_specialty",
            "__init__",
            "_load_patterns_db",
            "analyze_file_for_mission",
            "_determine_pattern_and_plan",
            "_estimate_points",
            "_assess_difficulty",
            "_calculate_priority",
            "_estimate_time",
            "scan_for_missions",
            "recommend_mission"
        ],
        "classes": {
            "AgentProfile": {
                "methods": [
                    "load"
                ],
                "docstring": "Agent specialty and capabilities.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "Mission": {
                "methods": [
                    "matches_specialty"
                ],
                "docstring": "A refactoring mission.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MissionRecommendation": {
                "methods": [],
                "docstring": "A recommended mission with reasoning.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MissionIntelligence": {
                "methods": [
                    "__init__",
                    "_load_patterns_db",
                    "analyze_file_for_mission",
                    "_determine_pattern_and_plan",
                    "_estimate_points",
                    "_assess_difficulty",
                    "_calculate_priority",
                    "_estimate_time",
                    "scan_for_missions",
                    "recommend_mission"
                ],
                "docstring": "The brain of the mission controller.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 25
    },
    "tools\\architecture_review.py": {
        "language": ".py",
        "functions": [
            "request_review",
            "provide_review",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "tools\\cache_invalidator.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "check_cache_age",
            "clear_cache_file",
            "clear_all_caches",
            "clear_analysis_chunks",
            "verify_caches"
        ],
        "classes": {
            "CacheInvalidator": {
                "methods": [
                    "__init__",
                    "check_cache_age",
                    "clear_cache_file",
                    "clear_all_caches",
                    "clear_analysis_chunks",
                    "verify_caches"
                ],
                "docstring": "Manages project scanner cache invalidation.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 13
    },
    "tools\\mission_control.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "check_task_queue",
            "run_scanner_analysis",
            "consult_swarm_brain",
            "check_agent_statuses",
            "find_real_violations",
            "generate_mission",
            "suggest_pattern",
            "print_mission_brief",
            "save_mission_brief"
        ],
        "classes": {
            "MissionControl": {
                "methods": [
                    "__init__",
                    "check_task_queue",
                    "run_scanner_analysis",
                    "consult_swarm_brain",
                    "check_agent_statuses",
                    "find_real_violations",
                    "generate_mission",
                    "suggest_pattern",
                    "print_mission_brief",
                    "save_mission_brief"
                ],
                "docstring": "Autonomous mission generator for swarm agents.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 21
    },
    "docs\\examples\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\file_refactor_detector.py": {
        "language": ".py",
        "functions": [
            "scan_directory",
            "main",
            "__init__",
            "check_file",
            "_check_file_header",
            "_check_git_history",
            "_get_warning"
        ],
        "classes": {
            "RefactorDetector": {
                "methods": [
                    "__init__",
                    "check_file",
                    "_check_file_header",
                    "_check_git_history",
                    "_get_warning"
                ],
                "docstring": "Detects refactor markers in files.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "tools_v2\\demo_swarm_pulse.py": {
        "language": ".py",
        "functions": [
            "demo_swarm_pulse"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tools_v2\\advisor_cli.py": {
        "language": ".py",
        "functions": [
            "main",
            "_print_recommendation",
            "_print_validation",
            "_print_swarm_analysis"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "tools_v2\\categories\\oss_tools.py": {
        "language": ".py",
        "functions": [
            "execute",
            "execute",
            "execute",
            "execute",
            "execute"
        ],
        "classes": {
            "OSSCloneTool": {
                "methods": [
                    "execute"
                ],
                "docstring": "Clone external OSS project.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "OSSFetchIssuesTool": {
                "methods": [
                    "execute"
                ],
                "docstring": "Fetch GitHub issues from OSS project.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "OSSImportIssuesTool": {
                "methods": [
                    "execute"
                ],
                "docstring": "Import GitHub issues as tasks.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "OSSPortfolioTool": {
                "methods": [
                    "execute"
                ],
                "docstring": "Generate OSS contribution portfolio.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "OSSStatusTool": {
                "methods": [
                    "execute"
                ],
                "docstring": "Get OSS contribution status.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "tools_v2\\categories\\message_task_tools.py": {
        "language": ".py",
        "functions": [
            "execute",
            "execute",
            "execute"
        ],
        "classes": {
            "MessageIngestTool": {
                "methods": [
                    "execute"
                ],
                "docstring": "Ingest message and create task.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TaskParserTool": {
                "methods": [
                    "execute"
                ],
                "docstring": "Parse message to extract task info.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "DataAgent"
            },
            "TaskFingerprintTool": {
                "methods": [
                    "execute"
                ],
                "docstring": "Generate task fingerprint for deduplication.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 6
    },
    "tools_v2\\categories\\observability_tools.py": {
        "language": ".py",
        "functions": [
            "execute",
            "execute",
            "execute",
            "execute"
        ],
        "classes": {
            "MetricsSnapshotTool": {
                "methods": [
                    "execute"
                ],
                "docstring": "Get current metrics snapshot.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MetricsTool": {
                "methods": [
                    "execute"
                ],
                "docstring": "Get specific metric value.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SystemHealthTool": {
                "methods": [
                    "execute"
                ],
                "docstring": "Check system health status.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SLOCheckTool": {
                "methods": [
                    "execute"
                ],
                "docstring": "Check SLO compliance.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "tools_v2\\categories\\validation_tools.py": {
        "language": ".py",
        "functions": [
            "execute",
            "execute",
            "execute",
            "execute"
        ],
        "classes": {
            "SmokeTestTool": {
                "methods": [
                    "execute"
                ],
                "docstring": "Run smoke tests.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "FeatureFlagTool": {
                "methods": [
                    "execute"
                ],
                "docstring": "Check or set feature flags.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RollbackTool": {
                "methods": [
                    "execute"
                ],
                "docstring": "Emergency rollback features.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ValidationReportTool": {
                "methods": [
                    "execute"
                ],
                "docstring": "Generate validation report for all systems.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "tools_v2\\categories\\memory_safety_tools.py": {
        "language": ".py",
        "functions": [
            "detect_memory_leaks",
            "verify_files_exist",
            "scan_unbounded_structures",
            "validate_imports",
            "check_file_handles"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "tools_v2\\categories\\discord_tools.py": {
        "language": ".py",
        "functions": [
            "get_name",
            "get_description",
            "execute",
            "get_name",
            "get_description",
            "execute",
            "get_name",
            "get_description",
            "execute"
        ],
        "classes": {
            "DiscordBotHealthTool": {
                "methods": [
                    "get_name",
                    "get_description",
                    "execute"
                ],
                "docstring": "Check if Discord bot is running and healthy.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "DiscordBotStartTool": {
                "methods": [
                    "get_name",
                    "get_description",
                    "execute"
                ],
                "docstring": "Start Discord Commander bot.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "DiscordTestMessageTool": {
                "methods": [
                    "get_name",
                    "get_description",
                    "execute"
                ],
                "docstring": "Send test message via Discord bot.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 18
    },
    "tools_v2\\categories\\swarm_brain_tools.py": {
        "language": ".py",
        "functions": [
            "execute",
            "execute",
            "execute",
            "execute",
            "execute"
        ],
        "classes": {
            "TakeNoteTool": {
                "methods": [
                    "execute"
                ],
                "docstring": "Take personal note.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ShareLearningTool": {
                "methods": [
                    "execute"
                ],
                "docstring": "Share learning with swarm brain.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SearchKnowledgeTool": {
                "methods": [
                    "execute"
                ],
                "docstring": "Search swarm knowledge base.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "LogSessionTool": {
                "methods": [
                    "execute"
                ],
                "docstring": "Log work session to agent notes.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "GetAgentNotesTool": {
                "methods": [
                    "execute"
                ],
                "docstring": "Get agent's personal notes.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "tools_v2\\categories\\session_tools.py": {
        "language": ".py",
        "functions": [
            "get_spec",
            "validate",
            "execute",
            "_create_passdown",
            "_create_devlog",
            "_update_swarm_brain",
            "_update_status",
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute"
        ],
        "classes": {
            "SessionCleanupTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute",
                    "_create_passdown",
                    "_create_devlog",
                    "_update_swarm_brain",
                    "_update_status"
                ],
                "docstring": "Automate complete session cleanup (5 steps).",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "PassdownTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Create or read session passdown.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "PointsCalculatorTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Calculate and track agent points.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 26
    },
    "tools_v2\\categories\\memory_safety_adapters.py": {
        "language": ".py",
        "functions": [
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute"
        ],
        "classes": {
            "MemoryLeakDetectorTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Detect potential memory leaks in codebase.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "FileVerificationTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Verify files exist before task assignment.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "UnboundedScanTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Scan for unbounded data structures.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ImportValidatorTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Validate Python file imports.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "FileHandleCheckTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Check for unclosed file handles.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 30
    },
    "tools_v2\\categories\\swarm_mission_control.py": {
        "language": ".py",
        "functions": [
            "get_name",
            "get_description",
            "get_spec",
            "validate",
            "execute",
            "_read_swarm_state",
            "_read_agent_context",
            "_analyze_available_work",
            "_calculate_optimal_task",
            "_build_context_package",
            "_format_mission_brief",
            "_get_agent_specialty",
            "get_name",
            "get_description",
            "get_spec",
            "validate",
            "execute",
            "get_name",
            "get_description",
            "get_spec",
            "validate",
            "execute",
            "_find_related_files",
            "_find_similar_work",
            "_find_current_violations",
            "_find_dependencies",
            "_find_coordination_needs",
            "_find_success_patterns",
            "_generate_checklist",
            "_calculate_completeness"
        ],
        "classes": {
            "SwarmMissionControl": {
                "methods": [
                    "get_name",
                    "get_description",
                    "get_spec",
                    "validate",
                    "execute",
                    "_read_swarm_state",
                    "_read_agent_context",
                    "_analyze_available_work",
                    "_calculate_optimal_task",
                    "_build_context_package",
                    "_format_mission_brief",
                    "_get_agent_specialty"
                ],
                "docstring": "Swarm Mission Control - The masterpiece tool for intelligent task selection.\n\nProvides each agent with:\n1. Optimal next task recommendation\n2. Full context package for execution\n3. Swarm state awareness (who's doing what)\n4. Conflict detection (avoid duplicate work)\n5. Dependency mapping (coordination needs)\n6. Success patterns (learn from past work)",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SwarmConflictDetector": {
                "methods": [
                    "get_name",
                    "get_description",
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Detect if proposed work conflicts with active missions.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ContextPackageBuilder": {
                "methods": [
                    "get_name",
                    "get_description",
                    "get_spec",
                    "validate",
                    "execute",
                    "_find_related_files",
                    "_find_similar_work",
                    "_find_current_violations",
                    "_find_dependencies",
                    "_find_coordination_needs",
                    "_find_success_patterns",
                    "_generate_checklist",
                    "_calculate_completeness"
                ],
                "docstring": "Build complete context package for any task.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 60
    },
    "tools_v2\\categories\\workflow_tools.py": {
        "language": ".py",
        "functions": [
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute"
        ],
        "classes": {
            "InboxCleanupTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Clean old messages from agent inbox.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MissionClaimTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Claim high-value mission from queue.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ROICalculatorTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Calculate ROI for potential tasks.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 18
    },
    "tools_v2\\categories\\captain_tools_advanced.py": {
        "language": ".py",
        "functions": [
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute"
        ],
        "classes": {
            "FileExistenceValidator": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Validate file existence before task assignment (prevents phantom tasks).",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ProjectScanRunner": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Run fresh project scan to update violation data.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "PhantomTaskDetector": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Detect phantom tasks (files in task pool that don't exist).",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MultiFuelDelivery": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Send fuel (gas) to multiple agents at once.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MarkovROIRunner": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Run Markov ROI optimizer and return optimal assignments.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SwarmStatusDashboard": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Generate comprehensive swarm status dashboard.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 36
    },
    "tools_v2\\categories\\swarm_consciousness.py": {
        "language": ".py",
        "functions": [
            "get_spec",
            "validate",
            "execute",
            "_collect_swarm_pulse",
            "_get_agent_pulse",
            "_dashboard_view",
            "_detect_conflicts",
            "_find_related_work",
            "_captain_command_center"
        ],
        "classes": {
            "SwarmPulseTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute",
                    "_collect_swarm_pulse",
                    "_get_agent_pulse",
                    "_dashboard_view",
                    "_detect_conflicts",
                    "_find_related_work",
                    "_captain_command_center"
                ],
                "docstring": "Real-time swarm consciousness dashboard.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 18
    },
    "tools_v2\\categories\\intelligent_mission_advisor_adapter.py": {
        "language": ".py",
        "functions": [
            "get_spec",
            "validate",
            "execute",
            "_format_summary",
            "get_spec",
            "validate",
            "execute",
            "_format_validation_summary",
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute"
        ],
        "classes": {
            "MissionAdvisorTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute",
                    "_format_summary"
                ],
                "docstring": "Get intelligent mission recommendation - THE MASTERPIECE TOOL.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "OrderValidatorTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute",
                    "_format_validation_summary"
                ],
                "docstring": "Validate Captain's orders before execution - CRITICAL SAFETY.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SwarmAnalyzerTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Analyze overall swarm state - STRATEGIC INTELLIGENCE.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RealtimeGuidanceTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Get real-time execution guidance - CONTINUOUS INTELLIGENCE.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 28
    },
    "tools_v2\\categories\\captain_tools.py": {
        "language": ".py",
        "functions": [
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute"
        ],
        "classes": {
            "StatusCheckTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Check all agent status.json files to detect idle agents.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "GitVerifyTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Verify git commits for work attribution and integrity checks.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "PointsCalculatorTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Calculate points based on ROI, impact, and complexity.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MissionAssignTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Create structured mission files in agent inboxes.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "GasDeliveryTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Send PyAutoGUI activation messages to agents (\"Prompts Are Gas\").",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "LeaderboardUpdateTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Update agent leaderboard with new points.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "WorkVerifyTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Comprehensive work verification (git + files + tests).",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CycleReportTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Generate Captain's cycle report.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "MarkovOptimizerTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Interface to Markov chain optimizer for task selection.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "IntegrityCheckTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Verify work claims with git history and Entry #025 integrity checks.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 60
    },
    "tools_v2\\categories\\intelligent_mission_advisor.py": {
        "language": ".py",
        "functions": [
            "get_mission_advisor",
            "__init__",
            "_load_agent_status",
            "_identify_specialty",
            "_load_swarm_brain",
            "_extract_patterns",
            "_load_other_agents_work",
            "_load_leaderboard",
            "get_mission_recommendation",
            "_scan_real_available_tasks",
            "_check_conflicts",
            "_match_specialty",
            "_calculate_roi",
            "_verify_task",
            "_generate_intelligent_briefing",
            "_explain_specialty_match",
            "_generate_approach_recommendation",
            "_identify_risks",
            "_calculate_success_probability",
            "_calculate_confidence",
            "_get_current_rank",
            "_generate_fallback_suggestions",
            "validate_captain_order",
            "_find_relevant_patterns",
            "_generate_execution_guidance",
            "get_realtime_guidance",
            "analyze_swarm_state"
        ],
        "classes": {
            "IntelligentMissionAdvisor": {
                "methods": [
                    "__init__",
                    "_load_agent_status",
                    "_identify_specialty",
                    "_load_swarm_brain",
                    "_extract_patterns",
                    "_load_other_agents_work",
                    "_load_leaderboard",
                    "get_mission_recommendation",
                    "_scan_real_available_tasks",
                    "_check_conflicts",
                    "_match_specialty",
                    "_calculate_roi",
                    "_verify_task",
                    "_generate_intelligent_briefing",
                    "_explain_specialty_match",
                    "_generate_approach_recommendation",
                    "_identify_risks",
                    "_calculate_success_probability",
                    "_calculate_confidence",
                    "_get_current_rank",
                    "_generate_fallback_suggestions",
                    "validate_captain_order",
                    "_find_relevant_patterns",
                    "_generate_execution_guidance",
                    "get_realtime_guidance",
                    "analyze_swarm_state"
                ],
                "docstring": "AI-powered mission advisor providing intelligent guidance to agents.\n\nThis is the masterpiece tool - an agent's personal senior engineer advisor.\n\nCapabilities:\n- Real-time project state analysis (actual files, violations, needs)\n- Agent specialty matching (align work with strengths)\n- ROI optimization (suggest highest-value tasks)\n- Conflict detection (avoid duplicating other agents' work)\n- Task validation (verify files exist, check if already done)\n- Intelligent briefing (provide full context, not just orders)\n- Progress monitoring (real-time guidance during execution)\n- Pattern learning (apply successful swarm patterns)\n- Reality verification (documentation vs actual state)\n- Autonomous decision support (what should I work on next?)",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 53
    },
    "tools_v2\\categories\\config_tools.py": {
        "language": ".py",
        "functions": [
            "get_spec",
            "get_help",
            "validate",
            "execute",
            "get_spec",
            "get_help",
            "validate",
            "execute",
            "get_spec",
            "get_help",
            "validate",
            "execute"
        ],
        "classes": {
            "ValidateConfigSSOTAdapter": {
                "methods": [
                    "get_spec",
                    "get_help",
                    "validate",
                    "execute"
                ],
                "docstring": "Validate that config follows SSOT principle.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ListConfigSourcesAdapter": {
                "methods": [
                    "get_spec",
                    "get_help",
                    "validate",
                    "execute"
                ],
                "docstring": "List all configuration sources in project.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CheckConfigImportsAdapter": {
                "methods": [
                    "get_spec",
                    "get_help",
                    "validate",
                    "execute"
                ],
                "docstring": "Check what imports config files.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 24
    },
    "tools_v2\\categories\\coordination_tools.py": {
        "language": ".py",
        "functions": [
            "get_spec",
            "get_help",
            "validate",
            "execute",
            "get_spec",
            "get_help",
            "validate",
            "execute",
            "get_spec",
            "get_help",
            "validate",
            "execute"
        ],
        "classes": {
            "FindDomainExpertAdapter": {
                "methods": [
                    "get_spec",
                    "get_help",
                    "validate",
                    "execute"
                ],
                "docstring": "Find which agent has expertise in a given domain.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RequestExpertReviewAdapter": {
                "methods": [
                    "get_spec",
                    "get_help",
                    "validate",
                    "execute"
                ],
                "docstring": "Request expert review using Pattern #5 coordination.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CheckCoordinationPatternsAdapter": {
                "methods": [
                    "get_spec",
                    "get_help",
                    "validate",
                    "execute"
                ],
                "docstring": "Check swarm brain for coordination patterns.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 24
    },
    "tools_v2\\categories\\integration_tools.py": {
        "language": ".py",
        "functions": [
            "get_spec",
            "get_help",
            "validate",
            "execute",
            "get_spec",
            "get_help",
            "validate",
            "execute",
            "get_spec",
            "get_help",
            "validate",
            "execute",
            "get_spec",
            "get_help",
            "validate",
            "execute"
        ],
        "classes": {
            "FindSSOTViolationsAdapter": {
                "methods": [
                    "get_spec",
                    "get_help",
                    "validate",
                    "execute"
                ],
                "docstring": "Find potential SSOT (Single Source of Truth) violations.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "FindDuplicateFunctionalityAdapter": {
                "methods": [
                    "get_spec",
                    "get_help",
                    "validate",
                    "execute"
                ],
                "docstring": "Find duplicate functionality across services/modules.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "FindIntegrationOpportunitiesAdapter": {
                "methods": [
                    "get_spec",
                    "get_help",
                    "validate",
                    "execute"
                ],
                "docstring": "Analyze codebase for integration opportunities.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "CheckImportDependenciesAdapter": {
                "methods": [
                    "get_spec",
                    "get_help",
                    "validate",
                    "execute"
                ],
                "docstring": "Check import dependencies for circular imports or heavy dependencies.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 32
    },
    "extensions\\repository-navigator\\src\\importPathProvider.ts": {
        "language": ".ts",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "extensions\\repository-navigator\\src\\completionProvider.ts": {
        "language": ".ts",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "extensions\\repository-navigator\\out\\types.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "extensions\\repository-navigator\\out\\metadataReader.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "extensions\\repository-navigator\\out\\extension.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "extensions\\repository-navigator\\out\\treeDataProvider.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "extensions\\repository-navigator\\out\\completionProvider.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "extensions\\repository-navigator\\__mocks__\\vscode.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "extensions\\repository-navigator\\out\\importPathProvider.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\agent_notes_protocol.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\core\\message_queue_analytics_interfaces.py": {
        "language": ".py",
        "functions": [
            "info",
            "warning",
            "error",
            "get_performance_metrics",
            "get_trending_data",
            "analyze_bottlenecks",
            "predict_queue_load",
            "suggest_optimizations",
            "detect_anomalies",
            "get_health_score",
            "get_health_report",
            "check_component_health"
        ],
        "classes": {
            "IMessageQueueLogger": {
                "methods": [
                    "info",
                    "warning",
                    "error"
                ],
                "docstring": "Interface for message queue logging operations.",
                "base_classes": [
                    "Protocol"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "IQueueAnalytics": {
                "methods": [
                    "get_performance_metrics",
                    "get_trending_data",
                    "analyze_bottlenecks"
                ],
                "docstring": "Interface for queue performance analytics.\n\nProvides Business Intelligence capabilities for queue monitoring,\nperformance analysis, and optimization insights.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "IQueueIntelligence": {
                "methods": [
                    "predict_queue_load",
                    "suggest_optimizations",
                    "detect_anomalies"
                ],
                "docstring": "Interface for predictive queue intelligence.\n\nProvides machine learning and predictive analytics for queue optimization.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "IQueueHealthMonitor": {
                "methods": [
                    "get_health_score",
                    "get_health_report",
                    "check_component_health"
                ],
                "docstring": "Interface for queue health monitoring.\n\nProvides health scoring and status monitoring for autonomous systems.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 24
    },
    "src\\core\\message_queue_core_interfaces.py": {
        "language": ".py",
        "functions": [
            "message",
            "queue_id",
            "to_dict",
            "from_dict",
            "enqueue",
            "dequeue",
            "mark_delivered",
            "mark_failed",
            "get_statistics",
            "cleanup_expired",
            "load_entries",
            "save_entries",
            "atomic_operation",
            "stop_processing",
            "max_queue_size",
            "processing_batch_size",
            "max_age_days",
            "retry_base_delay",
            "retry_max_delay",
            "cleanup_interval"
        ],
        "classes": {
            "IQueueEntry": {
                "methods": [
                    "message",
                    "queue_id",
                    "to_dict",
                    "from_dict"
                ],
                "docstring": "Interface for queue entry objects.",
                "base_classes": [
                    "Protocol"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "IMessageQueue": {
                "methods": [
                    "enqueue",
                    "dequeue",
                    "mark_delivered",
                    "mark_failed",
                    "get_statistics",
                    "cleanup_expired"
                ],
                "docstring": "Abstract interface for message queue operations.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "IQueuePersistence": {
                "methods": [
                    "load_entries",
                    "save_entries",
                    "atomic_operation"
                ],
                "docstring": "Abstract interface for queue persistence operations.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "IQueueProcessor": {
                "methods": [
                    "stop_processing"
                ],
                "docstring": "Abstract interface for queue processing operations.",
                "base_classes": [
                    "ABC"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "IQueueConfig": {
                "methods": [
                    "max_queue_size",
                    "processing_batch_size",
                    "max_age_days",
                    "retry_base_delay",
                    "retry_max_delay",
                    "cleanup_interval"
                ],
                "docstring": "Interface for queue configuration.",
                "base_classes": [
                    "Protocol"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 40
    },
    "src\\core\\analytics\\engines\\caching_engine_fixed.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get",
            "set",
            "delete",
            "clear",
            "get_stats",
            "get_status"
        ],
        "classes": {
            "CachingEngine": {
                "methods": [
                    "__init__",
                    "get",
                    "set",
                    "delete",
                    "clear",
                    "get_stats",
                    "get_status"
                ],
                "docstring": "Memory-safe caching engine with LRU eviction.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\core\\analytics\\framework\\predictive_modeling_forecasters.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "forecast_moving_average",
            "forecast_exponential_smoothing",
            "forecast_linear_trend"
        ],
        "classes": {
            "PredictiveModelingForecasters": {
                "methods": [
                    "__init__",
                    "forecast_moving_average",
                    "forecast_exponential_smoothing",
                    "forecast_linear_trend"
                ],
                "docstring": "Implements time-series forecasting methods.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\analytics\\framework\\predictive_modeling_metrics.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "calculate_ensemble",
            "calculate_forecast_confidence",
            "calculate_forecast_accuracy"
        ],
        "classes": {
            "PredictiveModelingMetrics": {
                "methods": [
                    "__init__",
                    "calculate_ensemble",
                    "calculate_forecast_confidence",
                    "calculate_forecast_accuracy"
                ],
                "docstring": "Handles forecast ensemble and accuracy calculations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\core\\analytics\\framework\\predictive_modeling_seasonality.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "detect_seasonality"
        ],
        "classes": {
            "PredictiveModelingSeasonality": {
                "methods": [
                    "__init__",
                    "detect_seasonality"
                ],
                "docstring": "Handles seasonal pattern detection and analysis.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\core\\intelligent_context\\agent_models.py": {
        "language": ".py",
        "functions": [
            "to_dict"
        ],
        "classes": {
            "AgentCapability": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Agent capability structure for matching and optimization.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AgentRecommendation": {
                "methods": [],
                "docstring": "Agent recommendation structure.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\core\\intelligent_context\\mission_models.py": {
        "language": ".py",
        "functions": [
            "to_dict"
        ],
        "classes": {
            "MissionContext": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Mission context structure for intelligent retrieval.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\core\\intelligent_context\\context_enums.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "MissionPhase": {
                "methods": [],
                "docstring": "Mission phases.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AgentStatus": {
                "methods": [],
                "docstring": "Agent availability status.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "RiskLevel": {
                "methods": [],
                "docstring": "Risk levels.",
                "base_classes": [
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\core\\intelligent_context\\metrics_models.py": {
        "language": ".py",
        "functions": [
            "to_dict"
        ],
        "classes": {
            "ContextMetrics": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Metrics for context retrieval operations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\core\\intelligent_context\\context_results.py": {
        "language": ".py",
        "functions": [
            "to_dict",
            "to_dict"
        ],
        "classes": {
            "SearchResult": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Search result structure.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ContextRetrievalResult": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Result of context retrieval operation.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\core\\intelligent_context\\emergency_models.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "EmergencyContext": {
                "methods": [],
                "docstring": "Emergency context structure.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "InterventionProtocol": {
                "methods": [],
                "docstring": "Intervention protocol structure.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\core\\intelligent_context\\analysis_models.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "RiskAssessment": {
                "methods": [],
                "docstring": "Risk assessment structure.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "SuccessPrediction": {
                "methods": [],
                "docstring": "Success prediction structure.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\core\\config\\config_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_environment",
            "get",
            "_convert_type",
            "validate"
        ],
        "classes": {
            "UnifiedConfigManager": {
                "methods": [
                    "__init__",
                    "_load_environment",
                    "get",
                    "_convert_type",
                    "validate"
                ],
                "docstring": "SINGLE SOURCE OF TRUTH for all configuration management.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\core\\config\\config_accessors.py": {
        "language": ".py",
        "functions": [
            "get_config",
            "get_unified_config",
            "get_timeout_config",
            "get_agent_config",
            "get_browser_config",
            "get_threshold_config",
            "get_file_pattern_config",
            "get_test_config",
            "get_report_config",
            "validate_config",
            "reload_config"
        ],
        "classes": {},
        "routes": [],
        "complexity": 11
    },
    "src\\core\\config\\config_dataclasses.py": {
        "language": ".py",
        "functions": [
            "agent_ids",
            "alert_rules",
            "benchmark_targets",
            "project_patterns",
            "test_categories"
        ],
        "classes": {
            "TimeoutConfig": {
                "methods": [],
                "docstring": "Centralized timeout configurations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AgentConfig": {
                "methods": [
                    "agent_ids"
                ],
                "docstring": "Centralized agent configuration.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "BrowserConfig": {
                "methods": [],
                "docstring": "Unified browser configuration (ChatGPT + Driver management).",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ThresholdConfig": {
                "methods": [
                    "alert_rules",
                    "benchmark_targets"
                ],
                "docstring": "Centralized threshold and alert configurations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "FilePatternConfig": {
                "methods": [
                    "project_patterns"
                ],
                "docstring": "Centralized file pattern configurations.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "TestConfig": {
                "methods": [
                    "test_categories"
                ],
                "docstring": "Centralized test configuration.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ReportConfig": {
                "methods": [],
                "docstring": "Centralized reporting configuration.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\services\\onboarding_template_loader.py": {
        "language": ".py",
        "functions": [
            "load_onboarding_template",
            "__init__",
            "load_full_template",
            "create_onboarding_message",
            "_format_custom_message"
        ],
        "classes": {
            "OnboardingTemplateLoader": {
                "methods": [
                    "__init__",
                    "load_full_template",
                    "create_onboarding_message",
                    "_format_custom_message"
                ],
                "docstring": "Loads and merges onboarding templates.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 9
    },
    "src\\opensource\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\opensource\\contribution_tracker.py": {
        "language": ".py",
        "functions": [
            "calculate_reputation",
            "__init__",
            "_load_portfolio",
            "_save_portfolio",
            "log_contribution",
            "get_metrics",
            "get_agent_contributions",
            "register_project"
        ],
        "classes": {
            "ContributionMetrics": {
                "methods": [
                    "calculate_reputation"
                ],
                "docstring": "Metrics for swarm's OSS contributions.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "ContributionTracker": {
                "methods": [
                    "__init__",
                    "_load_portfolio",
                    "_save_portfolio",
                    "log_contribution",
                    "get_metrics",
                    "get_agent_contributions",
                    "register_project"
                ],
                "docstring": "Tracks and analyzes swarm's OSS contributions.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\opensource\\portfolio_builder.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_readme",
            "generate_dashboard_html",
            "export_portfolio_json"
        ],
        "classes": {
            "PortfolioBuilder": {
                "methods": [
                    "__init__",
                    "generate_readme",
                    "generate_dashboard_html",
                    "export_portfolio_json"
                ],
                "docstring": "Builds swarm's OSS contribution portfolio.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\opensource\\task_integration.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_task_from_issue",
            "_determine_priority",
            "bulk_import_issues"
        ],
        "classes": {
            "OSSTaskIntegration": {
                "methods": [
                    "__init__",
                    "create_task_from_issue",
                    "_determine_priority",
                    "bulk_import_issues"
                ],
                "docstring": "Integrates OSS issues with task system.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\opensource\\github_integration.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "fetch_issues",
            "create_branch",
            "commit_changes",
            "push_branch",
            "create_pr"
        ],
        "classes": {
            "GitHubIntegration": {
                "methods": [
                    "__init__",
                    "fetch_issues",
                    "create_branch",
                    "commit_changes",
                    "push_branch",
                    "create_pr"
                ],
                "docstring": "GitHub API integration for OSS contributions.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\opensource\\setup_oss.py": {
        "language": ".py",
        "functions": [
            "setup_oss_system"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\obs\\metrics.py": {
        "language": ".py",
        "functions": [
            "incr",
            "decr",
            "set_metric",
            "snapshot",
            "reset",
            "get",
            "dump_metrics",
            "log_ingest_success",
            "log_ingest_failure",
            "log_ingest_duplicate",
            "log_parser_used",
            "log_oss_clone_success",
            "log_oss_clone_failure",
            "log_oss_pr_submitted",
            "log_oss_pr_merged",
            "log_message_sent",
            "log_message_failed",
            "log_race_condition_prevented"
        ],
        "classes": {},
        "routes": [],
        "complexity": 18
    },
    "src\\opensource\\oss_cli.py": {
        "language": ".py",
        "functions": [
            "create_parser",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\opensource\\project_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_registry",
            "_save_registry",
            "_load_portfolio",
            "_save_portfolio",
            "clone_project",
            "get_project",
            "list_projects",
            "get_project_path",
            "add_contribution"
        ],
        "classes": {
            "OpenSourceProjectManager": {
                "methods": [
                    "__init__",
                    "_load_registry",
                    "_save_registry",
                    "_load_portfolio",
                    "_save_portfolio",
                    "clone_project",
                    "get_project",
                    "list_projects",
                    "get_project_path",
                    "add_contribution"
                ],
                "docstring": "Manages swarm's open source project contributions.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\features\\flags.py": {
        "language": ".py",
        "functions": [
            "is_enabled",
            "disable_feature",
            "enable_feature"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\obs\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\features\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\swarm_brain\\agent_notes.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_notes",
            "_save_notes",
            "add_note",
            "_append_to_markdown",
            "get_notes",
            "search_notes",
            "log_work",
            "record_learning",
            "mark_important"
        ],
        "classes": {
            "NoteType": {
                "methods": [],
                "docstring": "Types of notes agents can take.",
                "base_classes": [
                    "str",
                    "Enum"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "AgentNotes": {
                "methods": [
                    "__init__",
                    "_load_notes",
                    "_save_notes",
                    "add_note",
                    "_append_to_markdown",
                    "get_notes",
                    "search_notes",
                    "log_work",
                    "record_learning",
                    "mark_important"
                ],
                "docstring": "Manages personal notes for an agent.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\swarm_brain\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\swarm_brain\\knowledge_base.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_kb",
            "_save_kb",
            "add_entry",
            "_save_to_category_file",
            "search",
            "get_by_agent",
            "get_by_category"
        ],
        "classes": {
            "KnowledgeEntry": {
                "methods": [],
                "docstring": "Entry in swarm knowledge base.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "KnowledgeBase": {
                "methods": [
                    "__init__",
                    "_load_kb",
                    "_save_kb",
                    "add_entry",
                    "_save_to_category_file",
                    "search",
                    "get_by_agent",
                    "get_by_category"
                ],
                "docstring": "Centralized knowledge base for swarm.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\swarm_brain\\swarm_memory.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "take_note",
            "share_learning",
            "record_decision",
            "log_session",
            "search_swarm_knowledge",
            "get_my_notes",
            "get_my_learnings",
            "update_status_with_notes"
        ],
        "classes": {
            "SwarmMemory": {
                "methods": [
                    "__init__",
                    "take_note",
                    "share_learning",
                    "record_decision",
                    "log_session",
                    "search_swarm_knowledge",
                    "get_my_notes",
                    "get_my_learnings",
                    "update_status_with_notes"
                ],
                "docstring": "Unified memory system for agents and swarm.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 18
    },
    "tools_v2\\categories\\debate_tools.py": {
        "language": ".py",
        "functions": [
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute",
            "get_spec",
            "validate",
            "execute"
        ],
        "classes": {
            "DebateStartTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Start a new multi-agent debate.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "DebateVoteTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Cast vote in active debate.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "DebateStatusTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Get current debate status and results.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            },
            "DebateNotifyTool": {
                "methods": [
                    "get_spec",
                    "validate",
                    "execute"
                ],
                "docstring": "Notify agents to participate in debate.",
                "base_classes": [
                    "IToolAdapter"
                ],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 24
    },
    "tools\\generate_utils_catalog_enhanced.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "analyze_file",
            "scan_utils_directories",
            "generate_markdown"
        ],
        "classes": {
            "UtilsAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_file",
                    "scan_utils_directories",
                    "generate_markdown"
                ],
                "docstring": "Analyzer for Python files in utils directories.",
                "base_classes": [],
                "maturity": "Core Asset",
                "agent_type": "Utility"
            }
        },
        "routes": [],
        "complexity": 9
    }
}