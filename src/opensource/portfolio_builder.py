#!/usr/bin/env python3
"""
Portfolio Builder
=================

Builds and displays swarm's open source contribution portfolio.

Author: Agent-7 - Repository Cloning Specialist
Created: 2025-10-13
"""

import logging
from datetime import datetime
from pathlib import Path

logger = logging.getLogger(__name__)


class PortfolioBuilder:
    """Builds swarm's OSS contribution portfolio."""

    def __init__(self, contribution_tracker):
        """
        Initialize portfolio builder.

        Args:
            contribution_tracker: ContributionTracker instance
        """
        self.tracker = contribution_tracker

    def generate_readme(self, output_path: str = "D:\\OpenSource_Swarm_Projects\\README.md"):
        """
        Generate portfolio README.

        Args:
            output_path: Output file path
        """
        metrics = self.tracker.get_metrics()

        readme = f"""# Agent Swarm - Open Source Contributions üêù

**Autonomous Development System**  
**Building recognition through quality contributions**

---

## üìä Contribution Metrics

| Metric | Count |
|--------|-------|
| **Projects Contributed To** | {metrics.total_projects} |
| **Pull Requests Submitted** | {metrics.total_prs} |
| **Pull Requests Merged** | {metrics.merged_prs} |
| **Issues Closed** | {metrics.issues_closed} |
| **Total Commits** | {metrics.total_commits} |
| **Reputation Score** | {metrics.reputation_score:.1f} |

**Merge Rate:** {(metrics.merged_prs / metrics.total_prs * 100) if metrics.total_prs > 0 else 0:.1f}%

---

## üèÜ Featured Projects

"""

        # Add projects
        for project_name, project_data in self.tracker.portfolio.get("projects", {}).items():
            readme += f"### {project_name}\n"
            readme += f"- **URL:** {project_data.get('github_url', 'N/A')}\n"
            readme += f"- **Status:** {project_data.get('status', 'active')}\n"
            readme += f"- **Added:** {project_data.get('added_at', 'N/A')}\n\n"

        readme += """
---

## ü§ñ Agent Contributions

"""

        # Add agent stats
        for agent_id, stats in metrics.agent_contributions.items():
            readme += f"**{agent_id}:** {stats.get('contributions', 0)} contributions, "
            readme += f"{stats.get('merged_prs', 0)} merged PRs\n"

        readme += """

---

## üêù About Agent Swarm

Agent Swarm is an autonomous development system with 8 specialized agents working cooperatively to deliver high-quality code contributions.

**Agents:**
- Agent-1: System Recovery & Architecture
- Agent-2: Architecture & Design
- Agent-3: Testing & Quality Assurance
- Agent-4: Strategic Oversight (Captain)
- Agent-5: Business Intelligence
- Agent-6: Performance Optimization
- Agent-7: Repository Cloning & Web Development
- Agent-8: SSOT & Documentation

**Three Pillars:**
1. **Autonomy** - Independent decision making and execution
2. **Cooperation** - Collaborative problem solving
3. **Integrity** - Quality, testing, documentation standards

---

## üìû Contact

For questions about our contributions or collaboration opportunities:
- GitHub: [Agent Swarm Organization]
- System: Agent Cellphone V2
- Built with: Python, autonomous coordination, swarm intelligence

---

*Last updated: {datetime.now().strftime('%Y-%m-%d')}*
*Portfolio generated by Agent Swarm Portfolio Builder*
"""

        # Write README
        Path(output_path).write_text(readme, encoding="utf-8")
        logger.info(f"‚úÖ Portfolio README generated: {output_path}")

    def generate_dashboard_html(
        self, output_path: str = "D:\\OpenSource_Swarm_Projects\\portfolio.html"
    ):
        """
        Generate HTML portfolio dashboard.

        Args:
            output_path: Output file path
        """
        metrics = self.tracker.get_metrics()

        html = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Agent Swarm - OSS Portfolio</title>
    <style>
        body {{ font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
               margin: 0; padding: 20px; background: #0d1117; color: #c9d1d9; }}
        .container {{ max-width: 1200px; margin: 0 auto; }}
        h1 {{ color: #58a6ff; border-bottom: 2px solid #21262d; padding-bottom: 10px; }}
        .metrics {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); 
                   gap: 20px; margin: 30px 0; }}
        .metric-card {{ background: #161b22; border: 1px solid #30363d; border-radius: 6px; 
                       padding: 20px; text-align: center; }}
        .metric-value {{ font-size: 2.5em; font-weight: bold; color: #58a6ff; }}
        .metric-label {{ color: #8b949e; margin-top: 10px; }}
        .projects {{ margin-top: 30px; }}
        .project-card {{ background: #161b22; border: 1px solid #30363d; border-radius: 6px; 
                        padding: 20px; margin-bottom: 20px; }}
        .agents {{ display: flex; flex-wrap: wrap; gap: 10px; margin-top: 20px; }}
        .agent-badge {{ background: #21262d; border: 1px solid #30363d; border-radius: 12px; 
                       padding: 8px 16px; }}
    </style>
</head>
<body>
    <div class="container">
        <h1>üêù Agent Swarm - Open Source Portfolio</h1>
        <p>Autonomous Development System - Building Recognition Through Quality Contributions</p>
        
        <div class="metrics">
            <div class="metric-card">
                <div class="metric-value">{metrics.total_projects}</div>
                <div class="metric-label">Projects</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">{metrics.total_prs}</div>
                <div class="metric-label">PRs Submitted</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">{metrics.merged_prs}</div>
                <div class="metric-label">PRs Merged</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">{metrics.reputation_score:.0f}</div>
                <div class="metric-label">Reputation Score</div>
            </div>
        </div>
        
        <h2>üìà Merge Rate: {(metrics.merged_prs / metrics.total_prs * 100) if metrics.total_prs > 0 else 0:.1f}%</h2>
        
        <div class="agents">
            <h3>ü§ñ Agent Contributions:</h3>
"""

        for agent_id, stats in metrics.agent_contributions.items():
            html += f'            <div class="agent-badge">{agent_id}: {stats.get("contributions", 0)} contributions</div>\n'

        html += """        </div>
        
        <div class="projects">
            <h2>üèÜ Projects</h2>
"""

        for project_name, project_data in self.tracker.portfolio.get("projects", {}).items():
            html += f"""            <div class="project-card">
                <h3>{project_name}</h3>
                <p><strong>URL:</strong> <a href="{project_data.get('github_url', '#')}" style="color: #58a6ff;">{project_data.get('github_url', 'N/A')}</a></p>
                <p><strong>Status:</strong> {project_data.get('status', 'active')}</p>
                <p><strong>Added:</strong> {project_data.get('added_at', 'N/A')}</p>
            </div>
"""

        html += (
            """        </div>
        
        <footer style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #21262d; text-align: center; color: #8b949e;">
            <p>Agent Swarm - Autonomous Development System</p>
            <p>Last updated: """
            + datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            + """</p>
        </footer>
    </div>
</body>
</html>
"""
        )

        Path(output_path).write_text(html, encoding="utf-8")
        logger.info(f"‚úÖ Portfolio dashboard generated: {output_path}")

    def export_portfolio_json(
        self, output_path: str = "D:\\OpenSource_Swarm_Projects\\portfolio_export.json"
    ):
        """
        Export portfolio as JSON.

        Args:
            output_path: Output file path
        """
        import json

        metrics = self.tracker.get_metrics()

        export_data = {
            "generated_at": datetime.now().isoformat(),
            "metrics": {
                "total_projects": metrics.total_projects,
                "total_prs": metrics.total_prs,
                "merged_prs": metrics.merged_prs,
                "merge_rate": (
                    (metrics.merged_prs / metrics.total_prs * 100) if metrics.total_prs > 0 else 0
                ),
                "total_commits": metrics.total_commits,
                "issues_closed": metrics.issues_closed,
                "reputation_score": metrics.reputation_score,
            },
            "projects": self.tracker.portfolio.get("projects", {}),
            "contributions": self.tracker.portfolio.get("contributions", []),
            "agents": metrics.agent_contributions,
        }

        Path(output_path).write_text(
            json.dumps(export_data, indent=2, ensure_ascii=False), encoding="utf-8"
        )
        logger.info(f"‚úÖ Portfolio exported: {output_path}")
