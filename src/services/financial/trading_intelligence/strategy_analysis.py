"""Strategy definitions and trading signal models."""

from __future__ import annotations

import logging
from dataclasses import dataclass
from enum import Enum
from typing import Optional

import pandas as pd

logger = logging.getLogger(__name__)


class StrategyType(Enum):
    """Supported trading strategy identifiers."""

    MOMENTUM = "MOMENTUM"
    MEAN_REVERSION = "MEAN_REVERSION"


class SignalType(Enum):
    """Trading signal directions."""

    BUY = "BUY"
    SELL = "SELL"
    HOLD = "HOLD"


class SignalStrength(Enum):
    """Relative strength of a trading signal."""

    WEAK = "WEAK"
    STRONG = "STRONG"


@dataclass
class TradingSignal:
    """A signal generated by a trading strategy."""

    symbol: str
    signal_type: SignalType
    strength: SignalStrength
    price: float


def momentum_strategy(symbol: str, data: pd.DataFrame) -> Optional[TradingSignal]:
    """Simple momentum strategy using the last two closing prices."""
    logger.info("Running momentum strategy for %s", symbol)
    if len(data) < 2:
        logger.debug("Not enough data for momentum strategy")
        return None
    last_close = float(data["Close"].iloc[-1])
    prev_close = float(data["Close"].iloc[-2])
    if last_close > prev_close:
        return TradingSignal(symbol, SignalType.BUY, SignalStrength.WEAK, last_close)
    elif last_close < prev_close:
        return TradingSignal(symbol, SignalType.SELL, SignalStrength.WEAK, last_close)
    return TradingSignal(symbol, SignalType.HOLD, SignalStrength.WEAK, last_close)


def mean_reversion_strategy(symbol: str, data: pd.DataFrame) -> Optional[TradingSignal]:
    """Generate a signal when price deviates from its mean."""
    logger.info("Running mean reversion strategy for %s", symbol)
    if data.empty:
        logger.debug("No data for mean reversion strategy")
        return None
    price = float(data["Close"].iloc[-1])
    mean_price = float(data["Close"].mean())
    if price > mean_price:
        return TradingSignal(symbol, SignalType.SELL, SignalStrength.WEAK, price)
    elif price < mean_price:
        return TradingSignal(symbol, SignalType.BUY, SignalStrength.WEAK, price)
    return None
