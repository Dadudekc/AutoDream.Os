{
  "summary": {
    "files_analyzed": 771,
    "syntax_errors": 3,
    "file_violations": 102,
    "class_violations": 321,
    "function_violations": 269,
    "total_violations": 695
  },
  "issues": [
    {
      "type": "function_loc",
      "path": "demo_health_monitoring_system.py",
      "function_name": "demo_health_monitoring",
      "current_loc": 106,
      "limit": 50,
      "excess": 56,
      "severity": "minor",
      "line_number": 28,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from demo_health_monitoring",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "syntax_error",
      "path": "error_handling_demo.py",
      "severity": "critical"
    },
    {
      "type": "file_loc",
      "path": "performance_benchmark.py",
      "current_loc": 426,
      "limit": 400,
      "excess": 26,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "performance_benchmark_core.py - Core classes: PerformanceBenchmark",
          "performance_benchmark_utils.py - Utility functions: main, __init__, setup_test_data",
          "performance_benchmark_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 10,
          "imports": 22
        }
      }
    },
    {
      "type": "class_loc",
      "path": "performance_benchmark.py",
      "class_name": "PerformanceBenchmark",
      "current_loc": 343,
      "limit": 100,
      "excess": 243,
      "severity": "major",
      "line_number": 29,
      "suggestion": {
        "suggested_methods_split": [
          "PerformanceBenchmarkCore - Core methods: setup_test_data, benchmark_database_performance, benchmark_memory_usage, benchmark_api_simulation, benchmark_cache_performance",
          "PerformanceBenchmarkUtils - Utility methods: run_full_benchmark, print_results, simulate_api_call"
        ],
        "properties_to_extract": [
          "tasks",
          "tasks",
          "results",
          "start_time",
          "start_time",
          "start_time",
          "start_time",
          "first_run",
          "start_time",
          "cached_run",
          "agent_id",
          "start_time",
          "start_time",
          "first_agent_run",
          "start_time",
          "cached_agent_run",
          "process",
          "results",
          "initial_memory",
          "tasks",
          "final_memory",
          "initial_memory",
          "tasks",
          "final_memory",
          "results",
          "operations",
          "results",
          "cache_hits",
          "cache_misses",
          "test_iterations",
          "start_time",
          "invalidated",
          "invalidation_time",
          "db_results",
          "api_results",
          "mem_results",
          "cache_results",
          "task",
          "task",
          "task",
          "start_time",
          "end_time",
          "futures",
          "futures",
          "times",
          "task_id",
          "task",
          "hr",
          "db_improvement",
          "result",
          "future",
          "future",
          "api_improvement",
          "result",
          "result"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "performance_benchmark.py",
      "function_name": "benchmark_database_performance",
      "current_loc": 71,
      "limit": 50,
      "excess": 21,
      "severity": "minor",
      "line_number": 55,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from benchmark_database_performance",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "performance_benchmark.py",
      "function_name": "benchmark_memory_usage",
      "current_loc": 51,
      "limit": 50,
      "excess": 1,
      "severity": "minor",
      "line_number": 127,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from benchmark_memory_usage",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "performance_benchmark.py",
      "function_name": "benchmark_api_simulation",
      "current_loc": 60,
      "limit": 50,
      "excess": 10,
      "severity": "minor",
      "line_number": 179,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from benchmark_api_simulation",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "performance_benchmark.py",
      "function_name": "benchmark_cache_performance",
      "current_loc": 52,
      "limit": 50,
      "excess": 2,
      "severity": "minor",
      "line_number": 240,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from benchmark_cache_performance",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "performance_benchmark.py",
      "function_name": "print_results",
      "current_loc": 60,
      "limit": 50,
      "excess": 10,
      "severity": "minor",
      "line_number": 312,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from print_results",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "simple_performance_test.py",
      "function_name": "test_performance_optimizations",
      "current_loc": 87,
      "limit": 50,
      "excess": 37,
      "severity": "minor",
      "line_number": 22,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from test_performance_optimizations",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "test_hard_onboarding.py",
      "class_name": "HardOnboardingTester",
      "current_loc": 218,
      "limit": 100,
      "excess": 118,
      "severity": "major",
      "line_number": 29,
      "suggestion": {
        "suggested_methods_split": [
          "HardOnboardingTesterCore - Core methods: log_test_result, test_hard_onboarding_flag_parsing, test_hard_onboarding_validation, test_role_assignment_parsing, test_onboarding_handler_integration",
          "HardOnboardingTesterUtils - Utility methods: test_dry_run_mode, run_all_tests"
        ],
        "properties_to_extract": [
          "status",
          "service",
          "test_args",
          "args",
          "service",
          "role_map_str",
          "role_map",
          "expected",
          "handler",
          "mock_args",
          "can_handle",
          "service",
          "args",
          "bad_args",
          "result",
          "good_args",
          "spec"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "create_cleanup_messages.py",
      "function_name": "create_cleanup_messages",
      "current_loc": 72,
      "limit": 50,
      "excess": 22,
      "severity": "minor",
      "line_number": 7,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from create_cleanup_messages",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "validate_contract_system.py",
      "class_name": "ContractSystemValidator",
      "current_loc": 212,
      "limit": 100,
      "excess": 112,
      "severity": "major",
      "line_number": 17,
      "suggestion": {
        "suggested_methods_split": [
          "ContractSystemValidatorCore - Core methods: validate_contract_system",
          "ContractSystemValidatorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "swarm_contract_path",
          "contract_files",
          "swarm_contract_path",
          "total_errors",
          "required_sections",
          "swarm_contract",
          "available_contracts",
          "required_fields",
          "contract_details",
          "required_details",
          "available_contracts",
          "swarm_data",
          "required_fields",
          "contract_data",
          "swarm_data",
          "contract_file",
          "contract_path",
          "status_icon"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "test_a2a_format.py",
      "function_name": "test_a2a_format",
      "current_loc": 51,
      "limit": 50,
      "excess": 1,
      "severity": "minor",
      "line_number": 11,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from test_a2a_format",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "agent5_consolidation_coordination_manager.py",
      "current_loc": 464,
      "limit": 400,
      "excess": 64,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "agent5_consolidation_coordination_manager_core.py - Core classes: Agent5ConsolidationCoordinationManager",
          "agent5_consolidation_coordination_manager_utils.py - Utility functions: main, __init__, initialize_consolidation_coordination",
          "agent5_consolidation_coordination_manager_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 10,
          "imports": 8
        }
      }
    },
    {
      "type": "class_loc",
      "path": "agent5_consolidation_coordination_manager.py",
      "class_name": "Agent5ConsolidationCoordinationManager",
      "current_loc": 404,
      "limit": 100,
      "excess": 304,
      "severity": "major",
      "line_number": 32,
      "suggestion": {
        "suggested_methods_split": [
          "Agent5ConsolidationCoordinationManagerCore - Core methods: initialize_consolidation_coordination, coordinate_consolidation_chunks, monitor_consolidation_progress, track_business_value, coordinate_agent_communication",
          "Agent5ConsolidationCoordinationManagerUtils - Utility methods: generate_coordination_report, save_coordination_status, execute_consolidation_coordination"
        ],
        "properties_to_extract": [
          "agent_workspaces_dir",
          "active_agents",
          "total_agents",
          "total_chunks",
          "completed_chunks",
          "in_progress_chunks",
          "consolidation_progress",
          "estimated_benefits",
          "total_benefit",
          "estimated_cost",
          "roi_percentage",
          "recent_communications",
          "cutoff_date",
          "communication_dirs",
          "total_chunks",
          "completed_chunks",
          "in_progress_chunks",
          "overall_progress",
          "report",
          "report_file",
          "status_data",
          "status_file",
          "report",
          "coordination_summary",
          "summary_file",
          "agent_id",
          "comm_path",
          "agent_id",
          "recent_files",
          "cutoff_date"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "agent5_consolidation_coordination_manager.py",
      "function_name": "__init__",
      "current_loc": 75,
      "limit": 50,
      "excess": 25,
      "severity": "minor",
      "line_number": 35,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from __init__",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "agent5_consolidation_coordination_manager.py",
      "function_name": "monitor_consolidation_progress",
      "current_loc": 53,
      "limit": 50,
      "excess": 3,
      "severity": "minor",
      "line_number": 158,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from monitor_consolidation_progress",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "agent5_consolidation_coordination_manager.py",
      "function_name": "track_business_value",
      "current_loc": 55,
      "limit": 50,
      "excess": 5,
      "severity": "minor",
      "line_number": 212,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from track_business_value",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "agent5_consolidation_coordination_manager.py",
      "function_name": "generate_coordination_report",
      "current_loc": 54,
      "limit": 50,
      "excess": 4,
      "severity": "minor",
      "line_number": 303,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from generate_coordination_report",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "agent5_consolidation_coordination_manager.py",
      "function_name": "execute_consolidation_coordination",
      "current_loc": 59,
      "limit": 50,
      "excess": 9,
      "severity": "minor",
      "line_number": 377,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from execute_consolidation_coordination",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "agent5_consolidation_execution.py",
      "class_name": "Agent5ConsolidationExecutor",
      "current_loc": 204,
      "limit": 100,
      "excess": 104,
      "severity": "major",
      "line_number": 29,
      "suggestion": {
        "suggested_methods_split": [
          "Agent5ConsolidationExecutorCore - Core methods: execute_core_consolidation_validation, execute_business_intelligence_analysis, execute_consolidation_coordination, create_agent5_status_report, execute_consolidation_system",
          "Agent5ConsolidationExecutorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "validator",
          "success",
          "dashboard",
          "success",
          "manager",
          "success",
          "total_tasks",
          "completed_tasks",
          "success_rate",
          "report",
          "report_file",
          "status_report",
          "execution_report",
          "report_file"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "agent5_consolidation_execution.py",
      "function_name": "create_agent5_status_report",
      "current_loc": 56,
      "limit": 50,
      "excess": 6,
      "severity": "minor",
      "line_number": 114,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from create_agent5_status_report",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "agent5_consolidation_execution.py",
      "function_name": "execute_consolidation_system",
      "current_loc": 62,
      "limit": 50,
      "excess": 12,
      "severity": "minor",
      "line_number": 171,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from execute_consolidation_system",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "agent5_core_consolidation_validator.py",
      "current_loc": 517,
      "limit": 400,
      "excess": 117,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "agent5_core_consolidation_validator_core.py - Core classes: Agent5CoreConsolidationValidator",
          "agent5_core_consolidation_validator_utils.py - Utility functions: main, __init__, validate_messaging_system_consolidation",
          "agent5_core_consolidation_validator_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 11,
          "imports": 10
        }
      }
    },
    {
      "type": "class_loc",
      "path": "agent5_core_consolidation_validator.py",
      "class_name": "Agent5CoreConsolidationValidator",
      "current_loc": 456,
      "limit": 100,
      "excess": 356,
      "severity": "major",
      "line_number": 33,
      "suggestion": {
        "suggested_methods_split": [
          "Agent5CoreConsolidationValidatorCore - Core methods: validate_messaging_system_consolidation, validate_analytics_engine_consolidation, validate_configuration_system_consolidation, validate_business_value_preservation, validate_system_performance",
          "Agent5CoreConsolidationValidatorUtils - Utility methods: calculate_consolidation_metrics, generate_consolidation_report, generate_recommendations, execute_consolidation_validation"
        ],
        "properties_to_extract": [
          "recommendations",
          "unified_messaging_file",
          "duplicate_files",
          "required_functions",
          "found_functions",
          "unified_analytics_file",
          "analytics_dir",
          "analytics_files",
          "remaining_files",
          "enhanced_config_file",
          "duplicate_files",
          "required_functions",
          "found_functions",
          "business_functions",
          "preserved_functions",
          "memory_usage",
          "disk_usage",
          "core_dir",
          "current_files",
          "current_count",
          "target_count",
          "reduction_percentage",
          "metrics",
          "total_checks",
          "passed_checks",
          "warning_checks",
          "failed_checks",
          "error_checks",
          "overall_status",
          "metrics",
          "report",
          "report_file",
          "report",
          "validation_summary",
          "summary_file",
          "full_path",
          "content",
          "full_path",
          "content",
          "memory_status",
          "memory_status",
          "disk_status",
          "disk_status",
          "overall_status",
          "overall_status",
          "overall_status"
        ],
        "method_count": 9,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "agent5_core_consolidation_validator.py",
      "function_name": "validate_messaging_system_consolidation",
      "current_loc": 51,
      "limit": 50,
      "excess": 1,
      "severity": "minor",
      "line_number": 76,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from validate_messaging_system_consolidation",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "agent5_core_consolidation_validator.py",
      "function_name": "validate_configuration_system_consolidation",
      "current_loc": 51,
      "limit": 50,
      "excess": 1,
      "severity": "minor",
      "line_number": 172,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from validate_configuration_system_consolidation",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "agent5_core_consolidation_validator.py",
      "function_name": "generate_consolidation_report",
      "current_loc": 70,
      "limit": 50,
      "excess": 20,
      "severity": "minor",
      "line_number": 324,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from generate_consolidation_report",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "agent5_core_consolidation_validator.py",
      "function_name": "execute_consolidation_validation",
      "current_loc": 59,
      "limit": 50,
      "excess": 9,
      "severity": "minor",
      "line_number": 430,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from execute_consolidation_validation",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "agent5_core_modules_coordinator.py",
      "current_loc": 434,
      "limit": 400,
      "excess": 34,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "agent5_core_modules_coordinator_core.py - Core classes: Agent5CoreModulesCoordinator",
          "agent5_core_modules_coordinator_utils.py - Utility functions: main, __init__, analyze_core_modules_structure",
          "agent5_core_modules_coordinator_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 10,
          "imports": 7
        }
      }
    },
    {
      "type": "class_loc",
      "path": "agent5_core_modules_coordinator.py",
      "class_name": "Agent5CoreModulesCoordinator",
      "current_loc": 377,
      "limit": 100,
      "excess": 277,
      "severity": "major",
      "line_number": 29,
      "suggestion": {
        "suggested_methods_split": [
          "Agent5CoreModulesCoordinatorCore - Core methods: analyze_core_modules_structure, coordinate_messaging_consolidation, coordinate_analytics_consolidation, coordinate_configuration_consolidation, calculate_business_metrics",
          "Agent5CoreModulesCoordinatorUtils - Utility methods: generate_coordination_report, generate_recommendations, execute_core_modules_coordination"
        ],
        "properties_to_extract": [
          "recommendations",
          "core_dir",
          "core_modules",
          "messaging_files",
          "existing_files",
          "recommendations",
          "analytics_dir",
          "analytics_files",
          "analytics_count",
          "recommendations",
          "config_files",
          "existing_files",
          "recommendations",
          "total_current_files",
          "total_target_files",
          "total_reduction",
          "reduction_percent",
          "total_progress",
          "average_progress",
          "business_metrics",
          "report",
          "report_file",
          "report",
          "coordination_summary",
          "summary_file",
          "relative_path",
          "file_str",
          "full_path",
          "full_path"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "agent5_core_modules_coordinator.py",
      "function_name": "execute_core_modules_coordination",
      "current_loc": 61,
      "limit": 50,
      "excess": 11,
      "severity": "minor",
      "line_number": 345,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from execute_core_modules_coordination",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "agent5_core_modules_validator.py",
      "current_loc": 609,
      "limit": 400,
      "excess": 209,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "agent5_core_modules_validator_core.py - Core classes: Agent5CoreModulesValidator",
          "agent5_core_modules_validator_utils.py - Utility functions: main, __init__, validate_messaging_system_consolidation",
          "agent5_core_modules_validator_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 11,
          "imports": 8
        }
      }
    },
    {
      "type": "class_loc",
      "path": "agent5_core_modules_validator.py",
      "class_name": "Agent5CoreModulesValidator",
      "current_loc": 552,
      "limit": 100,
      "excess": 452,
      "severity": "major",
      "line_number": 29,
      "suggestion": {
        "suggested_methods_split": [
          "Agent5CoreModulesValidatorCore - Core methods: validate_messaging_system_consolidation, validate_analytics_engine_consolidation, validate_configuration_system_consolidation, validate_coordination_system_consolidation, validate_engine_system_consolidation",
          "Agent5CoreModulesValidatorUtils - Utility methods: validate_system_performance, generate_validation_report, generate_recommendations, execute_comprehensive_validation"
        ],
        "properties_to_extract": [
          "recommendations",
          "target_file",
          "source_files",
          "existing_source_files",
          "messaging_keywords",
          "found_keywords",
          "target_file",
          "source_dirs",
          "total_files",
          "target_files",
          "analytics_keywords",
          "found_keywords",
          "target_file",
          "source_files",
          "existing_source_files",
          "config_keywords",
          "found_keywords",
          "target_file",
          "source_files",
          "existing_source_files",
          "target_files",
          "coordination_keywords",
          "found_keywords",
          "target_file",
          "source_dir",
          "engine_keywords",
          "found_keywords",
          "memory_usage",
          "disk_usage",
          "total_checks",
          "passed_checks",
          "warning_checks",
          "failed_checks",
          "error_checks",
          "overall_status",
          "report",
          "report_file",
          "report",
          "validation_summary",
          "summary_file",
          "full_path",
          "content",
          "full_path",
          "content",
          "full_path",
          "content",
          "full_path",
          "content",
          "files",
          "total_files",
          "target_files",
          "content",
          "memory_status",
          "memory_status",
          "disk_status",
          "disk_status",
          "overall_status",
          "files",
          "overall_status",
          "overall_status"
        ],
        "method_count": 9,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "agent5_core_modules_validator.py",
      "function_name": "__init__",
      "current_loc": 63,
      "limit": 50,
      "excess": 13,
      "severity": "minor",
      "line_number": 32,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from __init__",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "agent5_core_modules_validator.py",
      "function_name": "validate_messaging_system_consolidation",
      "current_loc": 56,
      "limit": 50,
      "excess": 6,
      "severity": "minor",
      "line_number": 96,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from validate_messaging_system_consolidation",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "agent5_core_modules_validator.py",
      "function_name": "validate_analytics_engine_consolidation",
      "current_loc": 61,
      "limit": 50,
      "excess": 11,
      "severity": "minor",
      "line_number": 153,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from validate_analytics_engine_consolidation",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "agent5_core_modules_validator.py",
      "function_name": "validate_coordination_system_consolidation",
      "current_loc": 54,
      "limit": 50,
      "excess": 4,
      "severity": "minor",
      "line_number": 262,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from validate_coordination_system_consolidation",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "agent5_core_modules_validator.py",
      "function_name": "validate_engine_system_consolidation",
      "current_loc": 53,
      "limit": 50,
      "excess": 3,
      "severity": "minor",
      "line_number": 317,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from validate_engine_system_consolidation",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "agent5_core_modules_validator.py",
      "function_name": "generate_validation_report",
      "current_loc": 66,
      "limit": 50,
      "excess": 16,
      "severity": "minor",
      "line_number": 410,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from generate_validation_report",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "agent5_core_modules_validator.py",
      "function_name": "execute_comprehensive_validation",
      "current_loc": 63,
      "limit": 50,
      "excess": 13,
      "severity": "minor",
      "line_number": 518,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from execute_comprehensive_validation",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "agent6_documentation_consolidator.py",
      "current_loc": 466,
      "limit": 400,
      "excess": 66,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "agent6_documentation_consolidator_core.py - Core classes: Agent6DocumentationConsolidator",
          "agent6_documentation_consolidator_utils.py - Utility functions: main, __init__, initialize_documentation_map",
          "agent6_documentation_consolidator_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 9,
          "imports": 7
        }
      }
    },
    {
      "type": "class_loc",
      "path": "agent6_documentation_consolidator.py",
      "class_name": "Agent6DocumentationConsolidator",
      "current_loc": 406,
      "limit": 100,
      "excess": 306,
      "severity": "major",
      "line_number": 32,
      "suggestion": {
        "suggested_methods_split": [
          "Agent6DocumentationConsolidatorCore - Core methods: initialize_documentation_map, create_api_documentation, generate_api_documentation_content, update_existing_documentation, apply_consolidation_changes",
          "Agent6DocumentationConsolidatorUtils - Utility methods: create_consolidation_summary, execute_documentation_consolidation"
        ],
        "properties_to_extract": [
          "docs_dir",
          "doc_content",
          "doc_file",
          "target_file",
          "source_files",
          "content",
          "updated_content",
          "consolidation_notice",
          "content",
          "summary",
          "summary_file",
          "summary",
          "report",
          "report_file",
          "content",
          "content",
          "content",
          "content"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "agent6_documentation_consolidator.py",
      "function_name": "initialize_documentation_map",
      "current_loc": 116,
      "limit": 50,
      "excess": 66,
      "severity": "minor",
      "line_number": 41,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from initialize_documentation_map",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "agent6_documentation_consolidator.py",
      "function_name": "generate_api_documentation_content",
      "current_loc": 104,
      "limit": 50,
      "excess": 54,
      "severity": "minor",
      "line_number": 182,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from generate_api_documentation_content",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "agent6_web_interface_coordinator.py",
      "current_loc": 467,
      "limit": 400,
      "excess": 67,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "agent6_web_interface_coordinator_core.py - Core classes: Agent6WebInterfaceCoordinator",
          "agent6_web_interface_coordinator_utils.py - Utility functions: main, __init__, initialize_web_interface_map",
          "agent6_web_interface_coordinator_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 9,
          "imports": 7
        }
      }
    },
    {
      "type": "class_loc",
      "path": "agent6_web_interface_coordinator.py",
      "class_name": "Agent6WebInterfaceCoordinator",
      "current_loc": 407,
      "limit": 100,
      "excess": 307,
      "severity": "major",
      "line_number": 32,
      "suggestion": {
        "suggested_methods_split": [
          "Agent6WebInterfaceCoordinatorCore - Core methods: initialize_web_interface_map, analyze_static_assets, create_web_interface_documentation, generate_web_interface_documentation_content, validate_web_interface_functionality",
          "Agent6WebInterfaceCoordinatorUtils - Utility methods: create_web_interface_summary, execute_web_interface_coordination"
        ],
        "properties_to_extract": [
          "web_static_dir",
          "assets",
          "js_dir",
          "css_dir",
          "docs_dir",
          "doc_content",
          "doc_file",
          "target_file",
          "source_files",
          "content",
          "validation_results",
          "web_dir",
          "static_dir",
          "frontend_dir",
          "assets_analysis",
          "validation_results",
          "summary",
          "summary_file",
          "assets_analysis",
          "validation_results",
          "summary",
          "report",
          "report_file",
          "js_files",
          "css_files",
          "js_files",
          "css_files",
          "frontend_files"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "agent6_web_interface_coordinator.py",
      "function_name": "analyze_static_assets",
      "current_loc": 57,
      "limit": 50,
      "excess": 7,
      "severity": "minor",
      "line_number": 81,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from analyze_static_assets",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "agent6_web_interface_coordinator.py",
      "function_name": "generate_web_interface_documentation_content",
      "current_loc": 109,
      "limit": 50,
      "excess": 59,
      "severity": "minor",
      "line_number": 165,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from generate_web_interface_documentation_content",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "agent6_web_interface_coordinator.py",
      "function_name": "validate_web_interface_functionality",
      "current_loc": 65,
      "limit": 50,
      "excess": 15,
      "severity": "minor",
      "line_number": 275,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from validate_web_interface_functionality",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "agent6_web_interface_coordinator.py",
      "function_name": "execute_web_interface_coordination",
      "current_loc": 57,
      "limit": 50,
      "excess": 7,
      "severity": "minor",
      "line_number": 382,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from execute_web_interface_coordination",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "comprehensive_project_analyzer.py",
      "current_loc": 670,
      "limit": 400,
      "excess": 270,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "comprehensive_project_analyzer_core.py - Core classes: ProjectAnalyzer",
          "comprehensive_project_analyzer_utils.py - Utility functions: main, __init__, analyze_python_file",
          "comprehensive_project_analyzer_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 14,
          "imports": 13
        }
      }
    },
    {
      "type": "class_loc",
      "path": "comprehensive_project_analyzer.py",
      "class_name": "ProjectAnalyzer",
      "current_loc": 623,
      "limit": 100,
      "excess": 523,
      "severity": "major",
      "line_number": 17,
      "suggestion": {
        "suggested_methods_split": [
          "ProjectAnalyzerCore - Core methods: analyze_python_file, analyze_js_file, analyze_md_file, analyze_yaml_file, analyze_file",
          "ProjectAnalyzerUtils - Utility methods: get_project_structure, analyze_directory_chunk, identify_consolidation_opportunity, get_consolidation_reason, get_consolidation_priority"
        ],
        "properties_to_extract": [
          "ext",
          "structure",
          "total_files",
          "total_dirs",
          "file_types",
          "files_analyzed",
          "total_files",
          "total_lines",
          "total_functions",
          "total_classes",
          "total_imports",
          "file_types",
          "complexity_by_type",
          "imports_by_file",
          "consolidation_opportunities",
          "avg_complexity_by_type",
          "structure",
          "master_index",
          "chunk_id",
          "master_file",
          "total_files",
          "total_opportunities",
          "summary",
          "summary_file",
          "tree",
          "functions",
          "classes",
          "imports",
          "decorators",
          "docstrings",
          "complexity_indicators",
          "lines",
          "non_empty_lines",
          "comment_lines",
          "functions",
          "classes",
          "imports",
          "exports",
          "async_functions",
          "arrow_functions",
          "lines",
          "non_empty_lines",
          "comment_lines",
          "headers",
          "code_blocks",
          "links",
          "images",
          "tables",
          "lines",
          "non_empty_lines",
          "lines",
          "keys",
          "comments",
          "non_empty_lines",
          "rel_path",
          "skip_dirs",
          "file_counts",
          "skip_dirs",
          "chunk_analysis",
          "chunk_file",
          "content",
          "content",
          "content",
          "content",
          "rel_path",
          "file_path",
          "rel_path",
          "analysis",
          "file_type",
          "methods",
          "module"
        ],
        "method_count": 12,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "comprehensive_project_analyzer.py",
      "function_name": "analyze_python_file",
      "current_loc": 98,
      "limit": 50,
      "excess": 48,
      "severity": "minor",
      "line_number": 27,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from analyze_python_file",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "comprehensive_project_analyzer.py",
      "function_name": "analyze_js_file",
      "current_loc": 65,
      "limit": 50,
      "excess": 15,
      "severity": "minor",
      "line_number": 126,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from analyze_js_file",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "comprehensive_project_analyzer.py",
      "function_name": "analyze_md_file",
      "current_loc": 55,
      "limit": 50,
      "excess": 5,
      "severity": "minor",
      "line_number": 192,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from analyze_md_file",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "comprehensive_project_analyzer.py",
      "function_name": "analyze_directory_chunk",
      "current_loc": 89,
      "limit": 50,
      "excess": 39,
      "severity": "minor",
      "line_number": 355,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from analyze_directory_chunk",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "comprehensive_project_analyzer.py",
      "function_name": "generate_chunk_reports",
      "current_loc": 59,
      "limit": 50,
      "excess": 9,
      "severity": "minor",
      "line_number": 489,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from generate_chunk_reports",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "comprehensive_project_analyzer.py",
      "function_name": "generate_consolidation_summary",
      "current_loc": 91,
      "limit": 50,
      "excess": 41,
      "severity": "minor",
      "line_number": 549,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from generate_consolidation_summary",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "operational_quality_analysis.py",
      "function_name": "analyze_code_quality",
      "current_loc": 218,
      "limit": 50,
      "excess": 168,
      "severity": "minor",
      "line_number": 15,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from analyze_code_quality",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "test_message_queue_pyautogui_integration.py",
      "function_name": "test_message_queue_pyautogui_integration",
      "current_loc": 141,
      "limit": 50,
      "excess": 91,
      "severity": "minor",
      "line_number": 35,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from test_message_queue_pyautogui_integration",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "test_backwards_compatibility.py",
      "function_name": "test_backwards_compatibility",
      "current_loc": 90,
      "limit": 50,
      "excess": 40,
      "severity": "minor",
      "line_number": 19,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from test_backwards_compatibility",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "trading_robot\\backtesting\\backtester.py",
      "class_name": "Backtester",
      "current_loc": 205,
      "limit": 100,
      "excess": 105,
      "severity": "major",
      "line_number": 95,
      "suggestion": {
        "suggested_methods_split": [
          "BacktesterCore - Core methods: run_backtest, run_walk_forward_optimization",
          "BacktesterUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "result",
          "symbol",
          "signal",
          "current_price",
          "position_size",
          "cash",
          "positions_value",
          "results",
          "total_days",
          "data",
          "data",
          "current_date",
          "current_data",
          "cost",
          "current_price",
          "current_price",
          "exit_value",
          "pnl",
          "trade",
          "train_end",
          "test_end",
          "train_data",
          "test_data",
          "result",
          "strategy_result",
          "portfolio_value",
          "position",
          "exit_value",
          "pnl",
          "trade"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "trading_robot\\backtesting\\backtester.py",
      "function_name": "run_backtest",
      "current_loc": 62,
      "limit": 50,
      "excess": 12,
      "severity": "minor",
      "line_number": 106,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from run_backtest",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "trading_robot\\backtesting\\backtester.py",
      "function_name": "_execute_trade",
      "current_loc": 61,
      "limit": 50,
      "excess": 11,
      "severity": "minor",
      "line_number": 169,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _execute_trade",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "trading_robot\\core\\alpaca_client.py",
      "class_name": "AlpacaClient",
      "current_loc": 236,
      "limit": 100,
      "excess": 136,
      "severity": "major",
      "line_number": 14,
      "suggestion": {
        "suggested_methods_split": [
          "AlpacaClientCore - Core methods: connect, is_connected, get_account_info, get_positions, get_orders",
          "AlpacaClientUtils - Utility methods: get_historical_data, submit_market_order, submit_limit_order, cancel_order, get_market_clock"
        ],
        "properties_to_extract": [
          "account",
          "positions",
          "orders",
          "bars",
          "data",
          "df",
          "order",
          "order",
          "clock",
          "end",
          "start"
        ],
        "method_count": 10,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "trading_robot\\core\\alpaca_client.py",
      "function_name": "get_historical_data",
      "current_loc": 51,
      "limit": 50,
      "excess": 1,
      "severity": "minor",
      "line_number": 112,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from get_historical_data",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "trading_robot\\core\\risk_manager.py",
      "class_name": "RiskManager",
      "current_loc": 263,
      "limit": 100,
      "excess": 163,
      "severity": "major",
      "line_number": 12,
      "suggestion": {
        "suggested_methods_split": [
          "RiskManagerCore - Core methods: validate_trade, calculate_position_size, update_portfolio_value, record_trade, get_portfolio_risk_metrics",
          "RiskManagerUtils - Utility methods: check_market_hours, calculate_stop_loss_price, calculate_take_profit_price, reset_daily_counters, get_risk_report"
        ],
        "properties_to_extract": [
          "trade_value",
          "risk_per_trade",
          "risk_per_share",
          "position_size",
          "max_position_size",
          "position_size",
          "max_value",
          "old_value",
          "emergency_loss",
          "trade_record",
          "current_qty",
          "current_avg_price",
          "total_exposure",
          "position_count",
          "largest_position",
          "concentration_pct",
          "exposure_pct",
          "now",
          "current_time",
          "current_day",
          "market_open",
          "market_close",
          "metrics",
          "report",
          "current_qty",
          "stop_loss_pct",
          "total_value",
          "new_qty",
          "new_avg_price",
          "position_value",
          "largest_position",
          "stop_loss_pct",
          "take_profit_pct",
          "new_qty",
          "new_qty",
          "new_qty"
        ],
        "method_count": 10,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "trading_robot\\core\\trading_engine.py",
      "class_name": "TradingEngine",
      "current_loc": 246,
      "limit": 100,
      "excess": 146,
      "severity": "major",
      "line_number": 12,
      "suggestion": {
        "suggested_methods_split": [
          "TradingEngineCore - Core methods: is_market_open, can_trade_symbol",
          "TradingEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "clock",
          "bars",
          "order",
          "bars",
          "orders",
          "clock",
          "market_was_open",
          "positions",
          "order_type",
          "limit_price",
          "status"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "trading_robot\\execution\\live_executor.py",
      "class_name": "LiveExecutor",
      "current_loc": 311,
      "limit": 100,
      "excess": 211,
      "severity": "major",
      "line_number": 16,
      "suggestion": {
        "suggested_methods_split": [
          "LiveExecutorCore - Core methods: add_symbol, remove_symbol, get_trading_symbols, get_executor_status",
          "LiveExecutorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "now",
          "last_trade",
          "market_data",
          "strategy_results",
          "current_price",
          "symbol",
          "current_price",
          "avg_entry_price",
          "quantity",
          "stop_loss_price",
          "take_profit_price",
          "order",
          "bars",
          "orders",
          "current_time",
          "market_open",
          "quantity",
          "side",
          "order",
          "order",
          "positions",
          "current_price",
          "alerts",
          "positions",
          "symbol_position",
          "quantity",
          "side"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "trading_robot\\execution\\live_executor.py",
      "function_name": "_execute_signal",
      "current_loc": 56,
      "limit": 50,
      "excess": 6,
      "severity": "minor",
      "line_number": 127,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _execute_signal",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "trading_robot\\strategies\\indicators.py",
      "class_name": "TechnicalIndicators",
      "current_loc": 187,
      "limit": 100,
      "excess": 87,
      "severity": "major",
      "line_number": 9,
      "suggestion": {
        "suggested_methods_split": [
          "TechnicalIndicatorsCore - Core methods: sma, ema, rsi, macd, bollinger_bands",
          "TechnicalIndicatorsUtils - Utility methods: stochastic_oscillator, atr, williams_r, cci, momentum"
        ],
        "properties_to_extract": [
          "delta",
          "gain",
          "loss",
          "rs",
          "fast_ema",
          "slow_ema",
          "macd_line",
          "signal_line",
          "histogram",
          "sma",
          "std",
          "upper_band",
          "lower_band",
          "lowest_low",
          "highest_high",
          "k_percent",
          "d_percent",
          "high_low",
          "high_close",
          "low_close",
          "true_range",
          "highest_high",
          "lowest_low",
          "typical_price",
          "sma",
          "mean_deviation",
          "obv_values",
          "obv",
          "money_flow_multiplier",
          "money_flow_volume",
          "typical_price",
          "diff",
          "pivot",
          "recent",
          "slope",
          "excess_returns",
          "obv"
        ],
        "method_count": 19,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "trading_robot\\web\\dashboard.py",
      "current_loc": 409,
      "limit": 400,
      "excess": 9,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "dashboard_core.py - Core classes: TradingDashboard",
          "dashboard_utils.py - Utility functions: create_templates, __init__, _setup_routes",
          "dashboard_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 14,
          "imports": 20
        }
      }
    },
    {
      "type": "class_loc",
      "path": "trading_robot\\web\\dashboard.py",
      "class_name": "TradingDashboard",
      "current_loc": 180,
      "limit": 100,
      "excess": 80,
      "severity": "major",
      "line_number": 17,
      "suggestion": {
        "suggested_methods_split": [
          "TradingDashboardCore - Core methods: ",
          "TradingDashboardUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "disconnected_clients",
          "config_obj",
          "server",
          "account_info",
          "positions",
          "portfolio_value",
          "account_info",
          "positions",
          "portfolio_value",
          "positions",
          "account_info",
          "data",
          "order",
          "status"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "trading_robot\\web\\dashboard.py",
      "function_name": "_setup_routes",
      "current_loc": 96,
      "limit": 50,
      "excess": 46,
      "severity": "minor",
      "line_number": 30,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _setup_routes",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "consolidation_tasks\\agent2_service_simplification.py",
      "class_name": "ServiceSimplificationAgent",
      "current_loc": 159,
      "limit": 100,
      "excess": 59,
      "severity": "major",
      "line_number": 18,
      "suggestion": {
        "suggested_methods_split": [
          "ServiceSimplificationAgentCore - Core methods: consolidate_integration_coordinators, consolidate_ml_optimizer, create_backup, run_consolidation",
          "ServiceSimplificationAgentUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "integration_content",
          "integration_path",
          "optimization_content",
          "optimization_path",
          "source_path",
          "backup_path"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "consolidation_tasks\\agent2_service_simplification.py",
      "function_name": "consolidate_integration_coordinators",
      "current_loc": 58,
      "limit": 50,
      "excess": 8,
      "severity": "minor",
      "line_number": 26,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from consolidate_integration_coordinators",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "consolidation_tasks\\agent2_service_simplification.py",
      "function_name": "consolidate_ml_optimizer",
      "current_loc": 62,
      "limit": 50,
      "excess": 12,
      "severity": "minor",
      "line_number": 85,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from consolidate_ml_optimizer",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "consolidation_tasks\\agent1_core_consolidation.py",
      "current_loc": 428,
      "limit": 400,
      "excess": 28,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "agent1_core_consolidation_core.py - Core classes: CoreConsolidationAgent",
          "agent1_core_consolidation_utils.py - Utility functions: __init__, create_backup, consolidate_managers_directory",
          "agent1_core_consolidation_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 11,
          "imports": 3
        }
      }
    },
    {
      "type": "class_loc",
      "path": "consolidation_tasks\\agent1_core_consolidation.py",
      "class_name": "CoreConsolidationAgent",
      "current_loc": 406,
      "limit": 100,
      "excess": 306,
      "severity": "major",
      "line_number": 18,
      "suggestion": {
        "suggested_methods_split": [
          "CoreConsolidationAgentCore - Core methods: create_backup, consolidate_managers_directory, extract_essential_functions, generate_consolidated_managers, consolidate_analytics_directory",
          "CoreConsolidationAgentUtils - Utility methods: run_consolidation, rollback_changes, restore_from_backup, validate_rollback"
        ],
        "properties_to_extract": [
          "source_path",
          "managers_dir",
          "essential_functions",
          "consolidated_content",
          "consolidated_path",
          "essential_functions",
          "required_patterns",
          "header",
          "footer",
          "functions_code",
          "analytics_content",
          "analytics_path",
          "backup_path",
          "backup_dir",
          "critical_files",
          "lines",
          "backups",
          "content",
          "latest_backup",
          "relative_path",
          "original_path",
          "func_name"
        ],
        "method_count": 9,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "consolidation_tasks\\agent1_core_consolidation.py",
      "function_name": "generate_consolidated_managers",
      "current_loc": 68,
      "limit": 50,
      "excess": 18,
      "severity": "minor",
      "line_number": 98,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from generate_consolidated_managers",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "consolidation_tasks\\agent1_core_consolidation.py",
      "function_name": "_generate_consolidated_function",
      "current_loc": 115,
      "limit": 50,
      "excess": 65,
      "severity": "minor",
      "line_number": 167,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _generate_consolidated_function",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "consolidation_tasks\\agent1_core_consolidation.py",
      "function_name": "consolidate_analytics_directory",
      "current_loc": 52,
      "limit": 50,
      "excess": 2,
      "severity": "minor",
      "line_number": 283,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from consolidate_analytics_directory",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "templates\\onboarding_roles.py",
      "function_name": "build_role_message",
      "current_loc": 76,
      "limit": 50,
      "excess": 26,
      "severity": "minor",
      "line_number": 26,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from build_role_message",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "templates\\onboarding_roles.py",
      "function_name": "f_get_role_specific_tasks",
      "current_loc": 100,
      "limit": 50,
      "excess": 50,
      "severity": "minor",
      "line_number": 104,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from f_get_role_specific_tasks",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\web\\simple_monitoring_dashboard.py",
      "current_loc": 548,
      "limit": 400,
      "excess": 148,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "simple_monitoring_dashboard_core.py - Core classes: SwarmMonitoringHandler, SimpleSwarmDashboard",
          "simple_monitoring_dashboard_utils.py - Utility functions: __init__, do_GET, serve_dashboard",
          "simple_monitoring_dashboard_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 2,
          "functions": 15,
          "imports": 7
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\web\\simple_monitoring_dashboard.py",
      "class_name": "SwarmMonitoringHandler",
      "current_loc": 481,
      "limit": 100,
      "excess": 381,
      "severity": "major",
      "line_number": 17,
      "suggestion": {
        "suggested_methods_split": [
          "SwarmMonitoringHandlerCore - Core methods: do_GET, serve_dashboard, serve_agents_status, serve_system_status, serve_consolidation_progress",
          "SwarmMonitoringHandlerUtils - Utility methods: serve_static_file, send_json_response, get_agents_status, calculate_consolidation_progress, generate_dashboard_html"
        ],
        "properties_to_extract": [
          "html_content",
          "agents_status",
          "agents_data",
          "response",
          "system_info",
          "progress_data",
          "agent_id",
          "status_file",
          "agents_status",
          "total_progress",
          "active_tasks",
          "completed_tasks",
          "active_agents",
          "average_progress",
          "progress",
          "agent_status",
          "data"
        ],
        "method_count": 11,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\web\\simple_monitoring_dashboard.py",
      "function_name": "get_agents_status",
      "current_loc": 51,
      "limit": 50,
      "excess": 1,
      "severity": "minor",
      "line_number": 98,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from get_agents_status",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\web\\simple_monitoring_dashboard.py",
      "function_name": "generate_dashboard_html",
      "current_loc": 306,
      "limit": 50,
      "excess": 256,
      "severity": "minor",
      "line_number": 188,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from generate_dashboard_html",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\web\\swarm_monitoring_dashboard.py",
      "current_loc": 996,
      "limit": 400,
      "excess": 596,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "swarm_monitoring_dashboard_core.py - Core classes: AgentStatus, Alert",
          "swarm_monitoring_dashboard_utils.py - Utility functions: __init__, _setup_routes, _get_all_agents_status",
          "swarm_monitoring_dashboard_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 3,
          "functions": 20,
          "imports": 28
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\web\\swarm_monitoring_dashboard.py",
      "class_name": "SwarmMonitoringDashboard",
      "current_loc": 913,
      "limit": 100,
      "excess": 813,
      "severity": "major",
      "line_number": 79,
      "suggestion": {
        "suggested_methods_split": [
          "SwarmMonitoringDashboardCore - Core methods: start_monitoring, stop_monitoring, create_html_template, run",
          "SwarmMonitoringDashboardUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "agents_status",
          "data",
          "disconnected_clients",
          "template_content",
          "template_file",
          "agent_id",
          "status_file",
          "cpu_percent",
          "memory",
          "disk",
          "process",
          "process_memory",
          "metrics",
          "agents_status",
          "total_progress",
          "active_tasks",
          "completed_tasks",
          "average_progress",
          "agents_status",
          "system_metrics",
          "consolidation_progress",
          "current_agents",
          "agents_status",
          "metrics",
          "filtered_alerts",
          "progress",
          "data",
          "last_updated",
          "agent_status",
          "agent_status",
          "agent_status",
          "cached",
          "data"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\web\\swarm_monitoring_dashboard.py",
      "function_name": "_setup_routes",
      "current_loc": 106,
      "limit": 50,
      "excess": 56,
      "severity": "minor",
      "line_number": 123,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _setup_routes",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\web\\swarm_monitoring_dashboard.py",
      "function_name": "_get_all_agents_status",
      "current_loc": 58,
      "limit": 50,
      "excess": 8,
      "severity": "minor",
      "line_number": 230,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _get_all_agents_status",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\web\\swarm_monitoring_dashboard.py",
      "function_name": "create_html_template",
      "current_loc": 496,
      "limit": 50,
      "excess": 446,
      "severity": "minor",
      "line_number": 476,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from create_html_template",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\web\\analytics_dashboard.py",
      "current_loc": 876,
      "limit": 400,
      "excess": 476,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "analytics_dashboard_core.py - Core classes: AnalyticsDashboardWeb",
          "analytics_dashboard_utils.py - Utility functions: main, __init__, _setup_routes",
          "analytics_dashboard_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 15,
          "imports": 28
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\web\\analytics_dashboard.py",
      "class_name": "AnalyticsDashboardWeb",
      "current_loc": 825,
      "limit": 100,
      "excess": 725,
      "severity": "major",
      "line_number": 30,
      "suggestion": {
        "suggested_methods_split": [
          "AnalyticsDashboardWebCore - Core methods: start, create_default_templates",
          "AnalyticsDashboardWebUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "static_path",
          "templates_dir",
          "dashboard_html",
          "performance_html",
          "usage_html",
          "reports_html",
          "data",
          "data",
          "report",
          "data",
          "status",
          "data",
          "metric_name",
          "value",
          "tags"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\web\\analytics_dashboard.py",
      "function_name": "_setup_routes",
      "current_loc": 96,
      "limit": 50,
      "excess": 46,
      "severity": "minor",
      "line_number": 45,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _setup_routes",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\web\\analytics_dashboard.py",
      "function_name": "create_default_templates",
      "current_loc": 702,
      "limit": 50,
      "excess": 652,
      "severity": "minor",
      "line_number": 153,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from create_default_templates",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\web\\vector_database\\search_utils.py",
      "function_name": "simulate_vector_search",
      "current_loc": 53,
      "limit": 50,
      "excess": 3,
      "severity": "minor",
      "line_number": 17,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from simulate_vector_search",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\web\\vector_database\\document_utils.py",
      "class_name": "DocumentUtils",
      "current_loc": 101,
      "limit": 100,
      "excess": 1,
      "severity": "major",
      "line_number": 17,
      "suggestion": {
        "suggested_methods_split": [
          "DocumentUtilsCore - Core methods: simulate_get_documents, simulate_add_document, simulate_get_document, simulate_update_document, simulate_delete_document",
          "DocumentUtilsUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "all_documents",
          "reverse",
          "start",
          "end",
          "documents",
          "total",
          "total_pages",
          "all_documents"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\web\\vector_database\\document_utils.py",
      "function_name": "simulate_get_documents",
      "current_loc": 55,
      "limit": 50,
      "excess": 5,
      "severity": "minor",
      "line_number": 20,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from simulate_get_documents",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\message_identity_clarification.py",
      "function_name": "format_message_with_identity_clarification",
      "current_loc": 51,
      "limit": 50,
      "excess": 1,
      "severity": "minor",
      "line_number": 22,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from format_message_with_identity_clarification",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\agent_vector_integration_core.py",
      "class_name": "AgentVectorIntegrationCore",
      "current_loc": 121,
      "limit": 100,
      "excess": 21,
      "severity": "major",
      "line_number": 13,
      "suggestion": {
        "suggested_methods_split": [
          "AgentVectorIntegrationCoreCore - Core methods: get_agent_context, get_task_recommendations, store_agent_knowledge, search_agent_patterns, get_agent_status",
          "AgentVectorIntegrationCoreUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "context",
          "recommendations",
          "knowledge_id",
          "patterns"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\architectural_principles.py",
      "class_name": "PrincipleDefinitions",
      "current_loc": 269,
      "limit": 100,
      "excess": 169,
      "severity": "major",
      "line_number": 14,
      "suggestion": {
        "suggested_methods_split": [
          "PrincipleDefinitionsCore - Core methods: get_all_principles",
          "PrincipleDefinitionsUtils - Utility methods: "
        ],
        "properties_to_extract": [],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\architectural_principles.py",
      "function_name": "get_all_principles",
      "current_loc": 265,
      "limit": 50,
      "excess": 215,
      "severity": "minor",
      "line_number": 18,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from get_all_principles",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\services\\swarm_intelligence_manager.py",
      "current_loc": 596,
      "limit": 400,
      "excess": 196,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "swarm_intelligence_manager_core.py - Core classes: SwarmIntelligenceManager",
          "swarm_intelligence_manager_utils.py - Utility functions: __init__, _load_config, get_swarm_intelligence",
          "swarm_intelligence_manager_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 28,
          "imports": 14
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\swarm_intelligence_manager.py",
      "class_name": "SwarmIntelligenceManager",
      "current_loc": 578,
      "limit": 100,
      "excess": 478,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "SwarmIntelligenceManagerCore - Core methods: get_swarm_intelligence, sync_with_swarm",
          "SwarmIntelligenceManagerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "agents",
          "insights",
          "valuable_keywords",
          "content_lower",
          "content_lower",
          "specializations",
          "collective_insights",
          "coordination_opportunities",
          "swarm_patterns",
          "shared_count",
          "updated_count",
          "insights",
          "opportunities",
          "patterns",
          "query_obj",
          "results",
          "all_tags",
          "shared_count",
          "query",
          "results",
          "insights_to_share",
          "pattern_count",
          "updated_count",
          "pattern_updates",
          "capability_updates",
          "insight_updates",
          "coordination_updates",
          "message",
          "sent_count",
          "service",
          "capabilities_message",
          "sent_count",
          "query",
          "results",
          "shared_count",
          "learned_count",
          "updated_count",
          "learned_count",
          "query",
          "results",
          "updated_count",
          "query",
          "results",
          "query_obj",
          "results",
          "query_obj",
          "results",
          "common_tags",
          "agent",
          "doc",
          "content",
          "query",
          "results",
          "query",
          "results",
          "pattern_message",
          "insight",
          "strategy",
          "pattern",
          "capability"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\agent_status_manager.py",
      "class_name": "AgentStatusManager",
      "current_loc": 139,
      "limit": 100,
      "excess": 39,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "AgentStatusManagerCore - Core methods: get_agent_status, get_integration_stats",
          "AgentStatusManagerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "recent_work_count",
          "pending_tasks_count",
          "last_activity",
          "total_documents",
          "agent_documents",
          "query",
          "results",
          "inbox_path",
          "recent_files",
          "stats",
          "query",
          "results",
          "latest_file"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\command_handler_module.py",
      "class_name": "CommandHandler",
      "current_loc": 113,
      "limit": 100,
      "excess": 13,
      "severity": "major",
      "line_number": 16,
      "suggestion": {
        "suggested_methods_split": [
          "CommandHandlerCore - Core methods: process_command, get_agent_status, assign_task_to_agent, coordinate_with_agent, create_task",
          "CommandHandlerUtils - Utility methods: update_task, complete_task, get_system_status, restart_system_component, check_system_health"
        ],
        "properties_to_extract": [
          "command",
          "args",
          "kwargs",
          "cmd_parts",
          "agent_id",
          "action",
          "cmd_parts",
          "action",
          "cmd_parts",
          "action"
        ],
        "method_count": 10,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\compliance_validator.py",
      "class_name": "ComplianceValidator",
      "current_loc": 105,
      "limit": 100,
      "excess": 5,
      "severity": "major",
      "line_number": 14,
      "suggestion": {
        "suggested_methods_split": [
          "ComplianceValidatorCore - Core methods: validate_agent_compliance",
          "ComplianceValidatorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "issues",
          "recommendations",
          "recommendations",
          "issues",
          "issues",
          "issues",
          "issues",
          "recommendations",
          "validation_issues",
          "validation_issues",
          "validation_issues",
          "validation_issues"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\consolidated_agent_management_service.py",
      "class_name": "ConsolidatedAgentManagementService",
      "current_loc": 292,
      "limit": 100,
      "excess": 192,
      "severity": "major",
      "line_number": 33,
      "suggestion": {
        "suggested_methods_split": [
          "ConsolidatedAgentManagementServiceCore - Core methods: get_agent_principle, assign_principle, get_all_assignments, get_agents_by_principle, get_agent_status",
          "ConsolidatedAgentManagementServiceUtils - Utility methods: get_integration_stats, index_agent_work, search_agent_work, get_agent_context, get_agent_config"
        ],
        "properties_to_extract": [
          "default_assignments",
          "assignments",
          "vector_service",
          "config",
          "recent_work_count",
          "pending_tasks_count",
          "last_activity",
          "total_documents",
          "agent_documents",
          "results",
          "inbox_path",
          "recent_files",
          "stats",
          "results",
          "result",
          "results",
          "context",
          "latest_file",
          "config",
          "principle"
        ],
        "method_count": 12,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\services\\consolidated_architectural_service.py",
      "current_loc": 630,
      "limit": 400,
      "excess": 230,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "consolidated_architectural_service_core.py - Core classes: AgentAssignmentManager, ArchitecturalPrinciple",
          "consolidated_architectural_service_utils.py - Utility functions: __init__, get_all_principles, __init__",
          "consolidated_architectural_service_types.py - Type definitions and imports"
        ],
        "estimated_splits": 4,
        "complexity_factors": {
          "classes": 9,
          "functions": 29,
          "imports": 9
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\consolidated_architectural_service.py",
      "class_name": "PrincipleDefinitions",
      "current_loc": 269,
      "limit": 100,
      "excess": 169,
      "severity": "major",
      "line_number": 89,
      "suggestion": {
        "suggested_methods_split": [
          "PrincipleDefinitionsCore - Core methods: get_all_principles",
          "PrincipleDefinitionsUtils - Utility methods: "
        ],
        "properties_to_extract": [],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\consolidated_architectural_service.py",
      "class_name": "ConsolidatedArchitecturalService",
      "current_loc": 115,
      "limit": 100,
      "excess": 15,
      "severity": "major",
      "line_number": 435,
      "suggestion": {
        "suggested_methods_split": [
          "ConsolidatedArchitecturalServiceCore - Core methods: get_principle_guidance, get_all_principles, get_agent_principle, assign_principle, validate_agent_compliance",
          "ConsolidatedArchitecturalServiceUtils - Utility methods: onboard_agent, get_agent_onboarding_status, generate_onboarding_message, get_comprehensive_principle_report, get_system_architecture_summary"
        ],
        "properties_to_extract": [
          "principles",
          "principle",
          "guidance",
          "agents",
          "all_assignments",
          "all_principles",
          "principle_counts"
        ],
        "method_count": 10,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\consolidated_architectural_service.py",
      "function_name": "get_all_principles",
      "current_loc": 265,
      "limit": 50,
      "excess": 215,
      "severity": "minor",
      "line_number": 93,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from get_all_principles",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\services\\consolidated_coordination_service.py",
      "current_loc": 531,
      "limit": 400,
      "excess": 131,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "consolidated_coordination_service_core.py - Core classes: ConsolidatedCoordinationService",
          "consolidated_coordination_service_utils.py - Utility functions: __init__, _initialize_coordination_rules, _initialize_routing_table",
          "consolidated_coordination_service_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 29,
          "imports": 10
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\consolidated_coordination_service.py",
      "class_name": "ConsolidatedCoordinationService",
      "current_loc": 500,
      "limit": 100,
      "excess": 400,
      "severity": "major",
      "line_number": 32,
      "suggestion": {
        "suggested_methods_split": [
          "ConsolidatedCoordinationServiceCore - Core methods: determine_coordination_strategy, apply_coordination_rules, can_handle_command, get_status, get_name",
          "ConsolidatedCoordinationServiceUtils - Utility methods: get_command_stats, process_message, process_bulk_messages, validate_message, determine_coordination_strategy"
        ],
        "properties_to_extract": [
          "priority_strategy",
          "type_strategy",
          "sender_strategy",
          "strategy",
          "routing_config",
          "supported_commands",
          "help_text",
          "results",
          "is_valid",
          "errors",
          "required_strategies",
          "base_result",
          "start_time",
          "execution_time",
          "coordinates",
          "agents",
          "formatted_agents",
          "strategy",
          "validation",
          "result",
          "result",
          "is_valid",
          "is_valid",
          "is_valid",
          "is_valid",
          "is_valid",
          "result",
          "result",
          "result",
          "result",
          "result",
          "result",
          "result"
        ],
        "method_count": 18,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\consolidated_coordination_service.py",
      "function_name": "process_command",
      "current_loc": 51,
      "limit": 50,
      "excess": 1,
      "severity": "minor",
      "line_number": 132,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from process_command",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\consolidated_coordination_service.py",
      "function_name": "process_message",
      "current_loc": 74,
      "limit": 50,
      "excess": 24,
      "severity": "minor",
      "line_number": 295,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from process_message",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\consolidated_debate_service.py",
      "class_name": "ConsolidatedDebateService",
      "current_loc": 261,
      "limit": 100,
      "excess": 161,
      "severity": "major",
      "line_number": 84,
      "suggestion": {
        "suggested_methods_split": [
          "ConsolidatedDebateServiceCore - Core methods: get_debate_status, invite_all_agents, notify_pending_agents, get_arguments_summary, save_debate_state",
          "ConsolidatedDebateServiceUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "default_participants",
          "results",
          "invitation_message",
          "successful",
          "pending",
          "results",
          "reminder_message",
          "successful",
          "option_counts",
          "option_quality",
          "avg_quality",
          "tree",
          "root",
          "coords",
          "option",
          "quality_score",
          "agent_id",
          "author",
          "option",
          "title",
          "content",
          "success",
          "success",
          "agent_id",
          "specialty_elem",
          "specialty",
          "coords",
          "confidence",
          "feasibility",
          "value",
          "argument",
          "coords",
          "coords"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\consolidated_debate_service.py",
      "function_name": "_load_debate_data",
      "current_loc": 68,
      "limit": 50,
      "excess": 18,
      "severity": "minor",
      "line_number": 118,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _load_debate_data",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\consolidated_handler_service.py",
      "class_name": "ConsolidatedHandlerService",
      "current_loc": 113,
      "limit": 100,
      "excess": 13,
      "severity": "major",
      "line_number": 28,
      "suggestion": {
        "suggested_methods_split": [
          "ConsolidatedHandlerServiceCore - Core methods: can_handle_command, get_available_commands, get_command_help",
          "ConsolidatedHandlerServiceUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "handlers"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\consolidated_miscellaneous_service.py",
      "class_name": "ConsolidatedMiscellaneousService",
      "current_loc": 187,
      "limit": 100,
      "excess": 87,
      "severity": "major",
      "line_number": 29,
      "suggestion": {
        "suggested_methods_split": [
          "ConsolidatedMiscellaneousServiceCore - Core methods: execute_query, get_agent_data, update_agent_data, get_learning_recommendations, get_task_recommendations",
          "ConsolidatedMiscellaneousServiceUtils - Utility methods: generate_insights, create_task_context, get_task_context, update_task_context, index_work_item"
        ],
        "properties_to_extract": [
          "issues",
          "recommendations"
        ],
        "method_count": 22,
        "estimated_classes": 2
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\consolidated_utility_service.py",
      "class_name": "ConsolidatedUtilityService",
      "current_loc": 337,
      "limit": 100,
      "excess": 237,
      "severity": "major",
      "line_number": 28,
      "suggestion": {
        "suggested_methods_split": [
          "ConsolidatedUtilityServiceCore - Core methods: list_agents, get_agent_info, get_agent_coordinates, get_agent_inbox, register_agent",
          "ConsolidatedUtilityServiceUtils - Utility methods: record_performance_metric, get_performance_summary, analyze_performance_trends, get_performance_recommendations, validate_agent_compliance"
        ],
        "properties_to_extract": [
          "agent_info",
          "agent_info",
          "cutoff_date",
          "summary",
          "cutoff_date",
          "values",
          "first_half",
          "second_half",
          "first_avg",
          "second_avg",
          "recommendations",
          "summary",
          "issues",
          "recommendations",
          "recommendations",
          "issues",
          "issues",
          "lines",
          "issues",
          "issues",
          "recommendations",
          "total_checks",
          "compliant_checks",
          "compliance_rate",
          "coords",
          "timestamp",
          "recent_values",
          "trend",
          "threshold",
          "line_count",
          "max_lines",
          "trend",
          "trend",
          "validation_issues",
          "validation_issues",
          "validation_issues",
          "validation_issues"
        ],
        "method_count": 12,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\consolidated_vector_service.py",
      "class_name": "ConsolidatedVectorService",
      "current_loc": 249,
      "limit": 100,
      "excess": 149,
      "severity": "major",
      "line_number": 36,
      "suggestion": {
        "suggested_methods_split": [
          "ConsolidatedVectorServiceCore - Core methods: generate_embeddings, add_document, search_documents, get_document, delete_document",
          "ConsolidatedVectorServiceUtils - Utility methods: get_collection_stats, create_collection, delete_collection, list_collections, get_task_context"
        ],
        "properties_to_extract": [
          "search_query",
          "embeddings",
          "task_embedding",
          "results",
          "embeddings",
          "work_embedding",
          "document",
          "results",
          "recommendations",
          "collections",
          "agent_collections",
          "total_documents",
          "embeddings",
          "response",
          "stats"
        ],
        "method_count": 16,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\services\\handlers_orchestrator.py",
      "current_loc": 509,
      "limit": 400,
      "excess": 109,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "handlers_orchestrator_core.py - Core classes: HandlerType, HandlerPriority",
          "handlers_orchestrator_utils.py - Utility functions: create_unified_handlers_orchestrator, __init__, _initialize_handlers",
          "handlers_orchestrator_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 5,
          "functions": 32,
          "imports": 21
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\handlers_orchestrator.py",
      "class_name": "UnifiedHandlersOrchestrator",
      "current_loc": 401,
      "limit": 100,
      "excess": 301,
      "severity": "major",
      "line_number": 87,
      "suggestion": {
        "suggested_methods_split": [
          "UnifiedHandlersOrchestratorCore - Core methods: process_request, submit_request, get_request_status, schedule_overnight_task, process_overnight_batch",
          "UnifiedHandlersOrchestratorUtils - Utility methods: perform_overnight_maintenance, assign_task_to_agent, get_agent_status, update_agent_status, check_agent_health"
        ],
        "properties_to_extract": [
          "request_id",
          "request",
          "role",
          "command",
          "context",
          "operation",
          "schedule",
          "task_id",
          "batch_id",
          "agent_id",
          "task_data",
          "task_id",
          "agent_id",
          "status_type",
          "task_id",
          "task",
          "results",
          "handler",
          "result",
          "loader",
          "active_agents",
          "result",
          "active_agents"
        ],
        "method_count": 21,
        "estimated_classes": 2
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\learning_recommender.py",
      "class_name": "LearningRecommender",
      "current_loc": 192,
      "limit": 100,
      "excess": 92,
      "severity": "major",
      "line_number": 18,
      "suggestion": {
        "suggested_methods_split": [
          "LearningRecommenderCore - Core methods: get_learning_recommendations",
          "LearningRecommenderUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "default_config",
          "skill_gaps",
          "common_techs",
          "used_techs",
          "work_types",
          "recommendations",
          "work_patterns",
          "skill_gaps",
          "recommendations",
          "query",
          "work_results",
          "work_types",
          "technologies",
          "recommendations",
          "config_file",
          "merged_config",
          "file_config"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\onboarding_service.py",
      "class_name": "OnboardingService",
      "current_loc": 133,
      "limit": 100,
      "excess": 33,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "OnboardingServiceCore - Core methods: generate_onboarding_message, get_service_status",
          "OnboardingServiceUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "base_message",
          "style_templates",
          "template",
          "role",
          "onboarded_at",
          "style_templates",
          "template",
          "agent_status",
          "onboarded_agents"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\performance_analyzer.py",
      "class_name": "PerformanceAnalyzer",
      "current_loc": 353,
      "limit": 100,
      "excess": 253,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "PerformanceAnalyzerCore - Core methods: analyze_agent_performance, get_integration_health",
          "PerformanceAnalyzerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "recommendations",
          "thresholds",
          "task_completion_rate",
          "coordination_effectiveness",
          "knowledge_utilization",
          "weights",
          "performance_score",
          "recommendations",
          "health_status",
          "issues",
          "vector_db_status",
          "recent_activity",
          "swarm_sync_status",
          "query",
          "completed_tasks",
          "query_all",
          "all_tasks",
          "query",
          "coordination_work",
          "query",
          "knowledge_work",
          "work_types",
          "query",
          "recent_work",
          "sync_issues",
          "status_sync",
          "comm_sync",
          "coord_sync",
          "queue_sync",
          "agent_status_dir",
          "status_files",
          "issues",
          "inbox_path",
          "recent_messages",
          "cutoff_time",
          "coord_files",
          "alignment_issues",
          "queue_file",
          "mtime",
          "age_minutes",
          "health_status",
          "health_status",
          "status_path",
          "msg_path",
          "mtime",
          "mtime",
          "age_days",
          "mtime",
          "age_hours"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\recommendation_engine.py",
      "class_name": "RecommendationEngine",
      "current_loc": 203,
      "limit": 100,
      "excess": 103,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "RecommendationEngineCore - Core methods: get_agent_recommendations, optimize_workflow",
          "RecommendationEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "recommendations",
          "all_tags",
          "optimizations",
          "similar_contexts",
          "recommendations",
          "workflow_patterns",
          "optimizations",
          "query",
          "common_tags",
          "workflow_type",
          "query"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\services\\simple_onboarding.py",
      "current_loc": 464,
      "limit": 400,
      "excess": 64,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "simple_onboarding_core.py - Core classes: SimpleOnboarding",
          "simple_onboarding_utils.py - Utility functions: __init__, execute, _should_process_agent",
          "simple_onboarding_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 19,
          "imports": 15
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\simple_onboarding.py",
      "class_name": "SimpleOnboarding",
      "current_loc": 421,
      "limit": 100,
      "excess": 321,
      "severity": "major",
      "line_number": 44,
      "suggestion": {
        "suggested_methods_split": [
          "SimpleOnboardingCore - Core methods: execute",
          "SimpleOnboardingUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "coord_map",
          "results",
          "processed_count",
          "success_count",
          "total_count",
          "operation_desc",
          "operation_desc",
          "agent_coords",
          "chat_coords",
          "onboarding_coords",
          "wrap_msg",
          "ob_msg",
          "template",
          "timestamp",
          "timestamp",
          "resp_text",
          "template_path",
          "loader",
          "converted",
          "flow_desc",
          "operations_performed",
          "tone",
          "instruction",
          "tone",
          "instruction",
          "tone",
          "greeting",
          "responsibilities",
          "tone",
          "greeting",
          "responsibilities",
          "result",
          "data",
          "success",
          "success",
          "windows",
          "data"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\simple_onboarding.py",
      "function_name": "_onboard_agent",
      "current_loc": 65,
      "limit": 50,
      "excess": 15,
      "severity": "minor",
      "line_number": 232,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _onboard_agent",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\unified_vector_integration.py",
      "class_name": "UnifiedVectorIntegration",
      "current_loc": 157,
      "limit": 100,
      "excess": 57,
      "severity": "major",
      "line_number": 52,
      "suggestion": {
        "suggested_methods_split": [
          "UnifiedVectorIntegrationCore - Core methods: ",
          "UnifiedVectorIntegrationUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "cache_key",
          "hash_obj",
          "hash_bytes",
          "embedding",
          "limit",
          "query_embedding",
          "results",
          "query",
          "similar_docs",
          "embedding",
          "model",
          "chunk",
          "value",
          "normalized",
          "content",
          "document",
          "embedding",
          "embedding",
          "similarity"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\work_indexer.py",
      "class_name": "WorkIndexer",
      "current_loc": 132,
      "limit": 100,
      "excess": 32,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "WorkIndexerCore - Core methods: index_agent_work, index_inbox_messages",
          "WorkIndexerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "file_path",
          "content",
          "document",
          "result",
          "inbox_path",
          "indexed_count",
          "message_files",
          "content",
          "document",
          "result"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\work_indexer.py",
      "function_name": "index_agent_work",
      "current_loc": 54,
      "limit": 50,
      "excess": 4,
      "severity": "minor",
      "line_number": 36,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from index_agent_work",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\work_indexer.py",
      "function_name": "index_inbox_messages",
      "current_loc": 60,
      "limit": 50,
      "excess": 10,
      "severity": "minor",
      "line_number": 91,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from index_inbox_messages",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\services\\advanced_analytics_service.py",
      "current_loc": 840,
      "limit": 400,
      "excess": 440,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "advanced_analytics_service_core.py - Core classes: MetricDataPoint, AnalyticsResult",
          "advanced_analytics_service_utils.py - Utility functions: get_analytics_service, __init__, collect_metric",
          "advanced_analytics_service_types.py - Type definitions and imports"
        ],
        "estimated_splits": 3,
        "complexity_factors": {
          "classes": 7,
          "functions": 78,
          "imports": 26
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\advanced_analytics_service.py",
      "class_name": "MetricsCollector",
      "current_loc": 109,
      "limit": 100,
      "excess": 9,
      "severity": "major",
      "line_number": 56,
      "suggestion": {
        "suggested_methods_split": [
          "MetricsCollectorCore - Core methods: collect_metric, get_metric_data, get_metric_stats, get_all_metric_names, get_collection_stats",
          "MetricsCollectorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "cutoff_time",
          "data_points",
          "values",
          "recent",
          "previous",
          "recent_avg",
          "previous_avg",
          "cutoff_time",
          "data_point"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\advanced_analytics_service.py",
      "class_name": "UsageAnalyticsEngine",
      "current_loc": 186,
      "limit": 100,
      "excess": 86,
      "severity": "major",
      "line_number": 167,
      "suggestion": {
        "suggested_methods_split": [
          "UsageAnalyticsEngineCore - Core methods: analyze_agent_usage, analyze_system_usage",
          "UsageAnalyticsEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "activity_data",
          "task_data",
          "error_data",
          "total_activity",
          "total_tasks",
          "total_errors",
          "efficiency",
          "error_rate",
          "peak_hours",
          "task_completion_trend",
          "all_agents",
          "agent_analyses",
          "total_system_activity",
          "total_system_tasks",
          "total_system_errors",
          "system_efficiency",
          "system_error_rate",
          "most_active",
          "most_efficient",
          "hour_counts",
          "values",
          "distribution",
          "insights",
          "insights",
          "efficiencies",
          "agent_analysis",
          "metrics",
          "hour",
          "efficiency_std"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\advanced_analytics_service.py",
      "class_name": "PerformanceDashboard",
      "current_loc": 199,
      "limit": 100,
      "excess": 99,
      "severity": "major",
      "line_number": 355,
      "suggestion": {
        "suggested_methods_split": [
          "PerformanceDashboardCore - Core methods: generate_dashboard_data",
          "PerformanceDashboardUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "system_usage",
          "agent_health",
          "system_efficiency",
          "error_rate",
          "system_usage",
          "quality_metrics",
          "alerts",
          "error_rate"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\advanced_analytics_service.py",
      "class_name": "AutomatedReportingSystem",
      "current_loc": 164,
      "limit": 100,
      "excess": 64,
      "severity": "major",
      "line_number": 556,
      "suggestion": {
        "suggested_methods_split": [
          "AutomatedReportingSystemCore - Core methods: generate_business_intelligence_report",
          "AutomatedReportingSystemUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "system_usage",
          "dashboard_data",
          "efficiency_change",
          "error_rate_change",
          "insights",
          "system_usage",
          "efficiency_trend",
          "productivity_trend",
          "system_usage",
          "recommendations",
          "efficiency",
          "error_rate",
          "alerts",
          "stats",
          "stats"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\advanced_analytics_service.py",
      "class_name": "AdvancedAnalyticsService",
      "current_loc": 108,
      "limit": 100,
      "excess": 8,
      "severity": "major",
      "line_number": 722,
      "suggestion": {
        "suggested_methods_split": [
          "AdvancedAnalyticsServiceCore - Core methods: start, stop, get_dashboard_data, get_usage_analytics, generate_report",
          "AdvancedAnalyticsServiceUtils - Utility methods: collect_custom_metric, get_metrics_stats, get_service_status"
        ],
        "properties_to_extract": [],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\advanced_analytics_service.py",
      "function_name": "analyze_system_usage",
      "current_loc": 56,
      "limit": 50,
      "excess": 6,
      "severity": "minor",
      "line_number": 215,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from analyze_system_usage",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\services\\consolidated_messaging_service.py",
      "current_loc": 1641,
      "limit": 400,
      "excess": 1241,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "consolidated_messaging_service_core.py - Core classes: ConsolidatedMessagingService, DeliveryMethod",
          "consolidated_messaging_service_utils.py - Utility functions: get_coordinate_loader, get_messaging_core, main",
          "consolidated_messaging_service_types.py - Type definitions and imports"
        ],
        "estimated_splits": 5,
        "complexity_factors": {
          "classes": 11,
          "functions": 46,
          "imports": 62
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\consolidated_messaging_service.py",
      "class_name": "ConsolidatedMessagingService",
      "current_loc": 1133,
      "limit": 100,
      "excess": 1033,
      "severity": "major",
      "line_number": 499,
      "suggestion": {
        "suggested_methods_split": [
          "ConsolidatedMessagingServiceCore - Core methods: load_coordinates_from_json, send_message_pyautogui, send_message_unified, broadcast_message_swarm, list_available_agents",
          "ConsolidatedMessagingServiceUtils - Utility methods: show_message_history, run_cli_interface, broadcast_message, list_agents, show_message_history"
        ],
        "properties_to_extract": [
          "coordinates",
          "parser",
          "parsed_args",
          "agents",
          "results",
          "message_parts",
          "task_templates",
          "task_keys",
          "selected_task",
          "task_config",
          "priorities",
          "selected_priority",
          "inbox_path",
          "timestamp",
          "message_file",
          "unified_message",
          "result",
          "unified_msg",
          "results",
          "args",
          "agents",
          "results",
          "workspace_base",
          "agents_status",
          "tool_path",
          "structured_message",
          "project_root",
          "thea_comm",
          "success",
          "coord_file",
          "agents",
          "agent_order",
          "task_data",
          "completion_notes",
          "completion_message",
          "coords",
          "captain_notification",
          "captain_coords",
          "agents",
          "role_map",
          "coords",
          "success",
          "status",
          "success",
          "broadcast_result",
          "agent_path",
          "inbox_path",
          "status_path",
          "result",
          "data",
          "captain_notification",
          "captain_coords",
          "unified_msg",
          "success",
          "success",
          "captain_msg",
          "onboarding_handler",
          "result",
          "coords",
          "priority_map",
          "msg_priority",
          "tag_map",
          "msg_tag",
          "unified_msg",
          "success",
          "success",
          "success",
          "agent_data",
          "onboarding",
          "chat",
          "active",
          "description",
          "captain_msg",
          "spec",
          "description"
        ],
        "method_count": 18,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\consolidated_messaging_service.py",
      "function_name": "deliver_message_pyautogui",
      "current_loc": 55,
      "limit": 50,
      "excess": 5,
      "severity": "minor",
      "line_number": 205,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from deliver_message_pyautogui",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\consolidated_messaging_service.py",
      "function_name": "send_message_inbox",
      "current_loc": 59,
      "limit": 50,
      "excess": 9,
      "severity": "minor",
      "line_number": 312,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from send_message_inbox",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\consolidated_messaging_service.py",
      "function_name": "send_message_pyautogui",
      "current_loc": 78,
      "limit": 50,
      "excess": 28,
      "severity": "minor",
      "line_number": 528,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from send_message_pyautogui",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\consolidated_messaging_service.py",
      "function_name": "run_cli_interface",
      "current_loc": 219,
      "limit": 50,
      "excess": 169,
      "severity": "minor",
      "line_number": 683,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from run_cli_interface",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\consolidated_messaging_service.py",
      "function_name": "handle_task_assistance",
      "current_loc": 53,
      "limit": 50,
      "excess": 3,
      "severity": "minor",
      "line_number": 1045,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from handle_task_assistance",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\consolidated_messaging_service.py",
      "function_name": "handle_thea_communication",
      "current_loc": 68,
      "limit": 50,
      "excess": 18,
      "severity": "minor",
      "line_number": 1139,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from handle_thea_communication",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\consolidated_messaging_service.py",
      "function_name": "show_current_coordinates",
      "current_loc": 63,
      "limit": 50,
      "excess": 13,
      "severity": "minor",
      "line_number": 1208,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from show_current_coordinates",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\consolidated_messaging_service.py",
      "function_name": "handle_claim_task",
      "current_loc": 56,
      "limit": 50,
      "excess": 6,
      "severity": "minor",
      "line_number": 1272,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from handle_claim_task",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\consolidated_messaging_service.py",
      "function_name": "handle_complete_task",
      "current_loc": 76,
      "limit": 50,
      "excess": 26,
      "severity": "minor",
      "line_number": 1329,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from handle_complete_task",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\consolidated_messaging_service.py",
      "function_name": "handle_hard_onboarding",
      "current_loc": 75,
      "limit": 50,
      "excess": 25,
      "severity": "minor",
      "line_number": 1406,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from handle_hard_onboarding",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\consolidated_messaging_service.py",
      "function_name": "_get_next_available_task",
      "current_loc": 150,
      "limit": 50,
      "excess": 100,
      "severity": "minor",
      "line_number": 1482,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _get_next_available_task",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\services\\messaging_cli_refactored.py",
      "current_loc": 468,
      "limit": 400,
      "excess": 68,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "messaging_cli_refactored_core.py - Core classes: MessageCoordinator, MessagingCLI",
          "messaging_cli_refactored_utils.py - Utility functions: main, send_to_agent, broadcast_to_all",
          "messaging_cli_refactored_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 2,
          "functions": 14,
          "imports": 24
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\messaging_cli_refactored.py",
      "class_name": "MessagingCLI",
      "current_loc": 216,
      "limit": 100,
      "excess": 116,
      "severity": "major",
      "line_number": 240,
      "suggestion": {
        "suggested_methods_split": [
          "MessagingCLICore - Core methods: execute",
          "MessagingCLIUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "parser",
          "parsed_args",
          "priority",
          "success",
          "success",
          "revival_msg",
          "success",
          "success_count",
          "success",
          "coord_loader",
          "agents",
          "success",
          "coords",
          "desc",
          "status"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\messaging_cli_refactored.py",
      "function_name": "_create_parser",
      "current_loc": 82,
      "limit": 50,
      "excess": 32,
      "severity": "minor",
      "line_number": 246,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _create_parser",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\services\\unified_database_services.py",
      "current_loc": 553,
      "limit": 400,
      "excess": 153,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "unified_database_services_core.py - Core classes: DatabaseConnectionError, SQLQueryBuilder",
          "unified_database_services_utils.py - Utility functions: create_unified_database_service, validate_table_name, __init__",
          "unified_database_services_types.py - Type definitions and imports"
        ],
        "estimated_splits": 5,
        "complexity_factors": {
          "classes": 11,
          "functions": 29,
          "imports": 20
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\unified_database_services.py",
      "class_name": "UnifiedDatabaseService",
      "current_loc": 181,
      "limit": 100,
      "excess": 81,
      "severity": "major",
      "line_number": 345,
      "suggestion": {
        "suggested_methods_split": [
          "UnifiedDatabaseServiceCore - Core methods: register_model, create_tables, insert, select, update",
          "UnifiedDatabaseServiceUtils - Utility methods: delete, execute_raw_query, backup_database, get_stats, cleanup"
        ],
        "properties_to_extract": [
          "query",
          "stats",
          "cursor",
          "record_id",
          "cursor",
          "rows",
          "results",
          "cursor",
          "updated_count",
          "cursor",
          "deleted_count",
          "cursor",
          "rows",
          "results",
          "backup_conn"
        ],
        "method_count": 10,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\coordination\\stats_tracker.py",
      "class_name": "StatsTracker",
      "current_loc": 220,
      "limit": 100,
      "excess": 120,
      "severity": "major",
      "line_number": 18,
      "suggestion": {
        "suggested_methods_split": [
          "StatsTrackerCore - Core methods: update_coordination_stats, get_coordination_stats, get_detailed_stats, get_performance_summary, reset_stats",
          "StatsTrackerUtils - Utility methods: get_tracker_status"
        ],
        "properties_to_extract": [
          "total",
          "current_avg",
          "stats",
          "total",
          "current_avg",
          "stats",
          "detailed",
          "cutoff_time",
          "recent_history",
          "total_coordinations",
          "successful",
          "failed",
          "avg_time"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\coordination\\stats_tracker.py",
      "function_name": "_update_detailed_stats",
      "current_loc": 53,
      "limit": 50,
      "excess": 3,
      "severity": "minor",
      "line_number": 87,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _update_detailed_stats",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\coordination\\bulk_coordinator.py",
      "class_name": "BulkCoordinator",
      "current_loc": 149,
      "limit": 100,
      "excess": 49,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "BulkCoordinatorCore - Core methods: coordinate_bulk_messages, coordinate_messages_by_priority, coordinate_messages_by_type, coordinate_messages_by_sender, get_bulk_coordinator_status",
          "BulkCoordinatorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "results",
          "successful",
          "failed",
          "grouped_messages",
          "execution_time",
          "grouped",
          "priority_groups",
          "results",
          "type_groups",
          "results",
          "sender_groups",
          "results",
          "strategy",
          "coordination_result",
          "strategy",
          "message_type",
          "sender_type",
          "result"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\coordination\\strategy_coordinator.py",
      "class_name": "StrategyCoordinator",
      "current_loc": 163,
      "limit": 100,
      "excess": 63,
      "severity": "major",
      "line_number": 24,
      "suggestion": {
        "suggested_methods_split": [
          "StrategyCoordinatorCore - Core methods: determine_coordination_strategy, apply_coordination_rules, get_coordination_rules, get_routing_table, update_coordination_rule",
          "StrategyCoordinatorUtils - Utility methods: update_routing_config, get_coordinator_status"
        ],
        "properties_to_extract": [
          "priority_strategy",
          "type_strategy",
          "sender_strategy",
          "rules_applied",
          "routing_config",
          "time_estimates"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\handlers\\command_handler.py",
      "class_name": "CommandHandler",
      "current_loc": 145,
      "limit": 100,
      "excess": 45,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "CommandHandlerCore - Core methods: can_handle, get_command_statistics",
          "CommandHandlerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "total",
          "success_rate",
          "start_time",
          "execution_time",
          "result",
          "message_data",
          "coordinate_handler",
          "coords_result",
          "agents",
          "results",
          "stats",
          "result",
          "message_data",
          "result",
          "agents",
          "formatted",
          "count",
          "result",
          "result",
          "result",
          "result",
          "result"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\handlers\\onboarding_handler.py",
      "class_name": "OnboardingHandler",
      "current_loc": 207,
      "limit": 100,
      "excess": 107,
      "severity": "major",
      "line_number": 37,
      "suggestion": {
        "suggested_methods_split": [
          "OnboardingHandlerCore - Core methods: can_handle, handle, handle_onboarding_commands",
          "OnboardingHandlerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "reg",
          "target_agents",
          "stamp",
          "backup",
          "ui_onboarder",
          "total",
          "ok_count",
          "agents",
          "cycle",
          "cycle",
          "role_map",
          "role",
          "message",
          "sync_ok",
          "agents",
          "spec",
          "role",
          "backup_path",
          "ui_onboarder",
          "sync_ok",
          "path",
          "proc",
          "agents",
          "coords",
          "ok",
          "ok",
          "path"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\handlers\\onboarding_handler.py",
      "function_name": "_handle_hard_onboarding",
      "current_loc": 141,
      "limit": 50,
      "excess": 91,
      "severity": "minor",
      "line_number": 103,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _handle_hard_onboarding",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\handlers\\utility_handler.py",
      "class_name": "UtilityHandler",
      "current_loc": 180,
      "limit": 100,
      "excess": 80,
      "severity": "major",
      "line_number": 25,
      "suggestion": {
        "suggested_methods_split": [
          "UtilityHandlerCore - Core methods: check_status, list_agents, get_coordinates, get_history",
          "UtilityHandlerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "onboarding_handler",
          "onboarding_handler",
          "onboarded_agents",
          "agents",
          "coords_data",
          "agent_coords",
          "results",
          "history",
          "status",
          "onboarded_agents",
          "vector_db",
          "db_stats",
          "status",
          "query",
          "query"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\handlers\\utility_handler.py",
      "function_name": "check_status",
      "current_loc": 55,
      "limit": 50,
      "excess": 5,
      "severity": "minor",
      "line_number": 32,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from check_status",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\protocol\\routers\\route_analyzer.py",
      "class_name": "RouteAnalyzer",
      "current_loc": 160,
      "limit": 100,
      "excess": 60,
      "severity": "major",
      "line_number": 29,
      "suggestion": {
        "suggested_methods_split": [
          "RouteAnalyzerCore - Core methods: analyze_route_options, update_route_performance, get_route_performance_summary, get_route_usage_stats, clear_performance_data",
          "RouteAnalyzerUtils - Utility methods: get_analyzer_status"
        ],
        "properties_to_extract": [
          "route_scores",
          "best_route",
          "route_key",
          "score",
          "base_scores",
          "route_key",
          "route_type",
          "summary",
          "score",
          "latencies",
          "route_opt",
          "usage_count",
          "avg_latency"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\protocol\\routers\\route_analyzer.py",
      "function_name": "_calculate_route_score",
      "current_loc": 52,
      "limit": 50,
      "excess": 2,
      "severity": "minor",
      "line_number": 86,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _calculate_route_score",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\thea\\core\\thea_communication_manager.py",
      "class_name": "TheaCommunicationManager",
      "current_loc": 232,
      "limit": 100,
      "excess": 132,
      "severity": "major",
      "line_number": 23,
      "suggestion": {
        "suggested_methods_split": [
          "TheaCommunicationManagerCore - Core methods: initialize, run_communication_cycle, create_response_analysis, send_quick_message, get_status",
          "TheaCommunicationManagerUtils - Utility methods: cleanup"
        ],
        "properties_to_extract": [
          "timestamp",
          "message_path",
          "template_path",
          "template",
          "message",
          "status",
          "response_ready",
          "screenshot_path",
          "template_path",
          "status"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\thea\\core\\thea_communication_manager.py",
      "function_name": "run_communication_cycle",
      "current_loc": 89,
      "limit": 50,
      "excess": 39,
      "severity": "minor",
      "line_number": 51,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from run_communication_cycle",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\thea\\authentication\\thea_authentication_service.py",
      "class_name": "TheaAuthenticationService",
      "current_loc": 109,
      "limit": 100,
      "excess": 9,
      "severity": "major",
      "line_number": 162,
      "suggestion": {
        "suggested_methods_split": [
          "TheaAuthenticationServiceCore - Core methods: ensure_authenticated, save_session_cookies, check_login_status, clear_authentication",
          "TheaAuthenticationServiceUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "auth_status",
          "cookies",
          "updated_cookies"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\thea\\browser\\thea_browser_service.py",
      "class_name": "TheaBrowserService",
      "current_loc": 233,
      "limit": 100,
      "excess": 133,
      "severity": "major",
      "line_number": 26,
      "suggestion": {
        "suggested_methods_split": [
          "TheaBrowserServiceCore - Core methods: initialize_driver, navigate_to_thea, navigate_to_chatgpt, get_current_url, wait_for_element",
          "TheaBrowserServiceUtils - Utility methods: find_input_field, send_message_to_input, get_cookies, add_cookies, refresh_page"
        ],
        "properties_to_extract": [
          "options",
          "options",
          "wait",
          "input_field",
          "lines",
          "element"
        ],
        "method_count": 13,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\thea\\messaging\\thea_messaging_service.py",
      "class_name": "TheaMessagingService",
      "current_loc": 138,
      "limit": 100,
      "excess": 38,
      "severity": "major",
      "line_number": 32,
      "suggestion": {
        "suggested_methods_split": [
          "TheaMessagingServiceCore - Core methods: send_message, wait_for_response, get_default_message, load_message_template",
          "TheaMessagingServiceUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "message_path",
          "timestamp",
          "message_path",
          "timeout"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\thea\\responses\\thea_response_service.py",
      "class_name": "TheaResponseService",
      "current_loc": 204,
      "limit": 100,
      "excess": 104,
      "severity": "major",
      "line_number": 32,
      "suggestion": {
        "suggested_methods_split": [
          "TheaResponseServiceCore - Core methods: wait_for_response, capture_response",
          "TheaResponseServiceUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "result",
          "extracted_response",
          "screenshot_path",
          "text",
          "timestamp",
          "sent_message_path",
          "metadata",
          "json_path",
          "timeout",
          "timestamp",
          "screenshot_path",
          "screenshot",
          "message_files",
          "log_path",
          "sent_message",
          "response_section",
          "log_content",
          "response_section",
          "response_section",
          "sent_message"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\thea\\responses\\thea_response_service.py",
      "function_name": "_create_conversation_log",
      "current_loc": 66,
      "limit": 50,
      "excess": 16,
      "severity": "minor",
      "line_number": 170,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _create_conversation_log",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\services\\thea\\config\\thea_config.py",
      "class_name": "TheaConfig",
      "current_loc": 110,
      "limit": 100,
      "excess": 10,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "TheaConfigCore - Core methods: from_env, from_args, to_dict",
          "TheaConfigUtils - Utility methods: "
        ],
        "properties_to_extract": [],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\services\\messaging\\cli.py",
      "function_name": "main",
      "current_loc": 67,
      "limit": 50,
      "excess": 17,
      "severity": "minor",
      "line_number": 71,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from main",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\documentation_indexing_service.py",
      "class_name": "DocumentationIndexingService",
      "current_loc": 170,
      "limit": 100,
      "excess": 70,
      "severity": "major",
      "line_number": 9,
      "suggestion": {
        "suggested_methods_split": [
          "DocumentationIndexingServiceCore - Core methods: index_project_documentation, index_specific_files, index_directory, reindex_file, get_indexing_status",
          "DocumentationIndexingServiceUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "results",
          "directories_to_index",
          "total_results",
          "key_files",
          "results",
          "stats",
          "dir_path",
          "file_path",
          "path",
          "content",
          "metadata",
          "results",
          "results"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\documentation_indexing_service.py",
      "function_name": "index_project_documentation",
      "current_loc": 51,
      "limit": 50,
      "excess": 1,
      "severity": "minor",
      "line_number": 26,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from index_project_documentation",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\search_history_service.py",
      "class_name": "SearchHistoryService",
      "current_loc": 150,
      "limit": 100,
      "excess": 50,
      "severity": "major",
      "line_number": 9,
      "suggestion": {
        "suggested_methods_split": [
          "SearchHistoryServiceCore - Core methods: add_search, get_search_suggestions, get_agent_search_history, clear_history, get_statistics",
          "SearchHistoryServiceUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "search_entry",
          "suggestions",
          "common_patterns",
          "agent_history",
          "total_searches",
          "unique_agents",
          "agent_stats",
          "role",
          "domain",
          "query"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\search_history_service.py",
      "function_name": "get_search_suggestions",
      "current_loc": 60,
      "limit": 50,
      "excess": 10,
      "severity": "minor",
      "line_number": 47,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from get_search_suggestions",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\unified_import_system.py",
      "class_name": "UnifiedImportSystem",
      "current_loc": 242,
      "limit": 100,
      "excess": 142,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "UnifiedImportSystemCore - Core methods: os, sys, json, logging, threading",
          "UnifiedImportSystemUtils - Utility methods: time, re, datetime, Path, Any"
        ],
        "properties_to_extract": [],
        "method_count": 45,
        "estimated_classes": 4
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\message_queue_pyautogui_integration.py",
      "class_name": "MessageQueuePyAutoGUIIntegration",
      "current_loc": 156,
      "limit": 100,
      "excess": 56,
      "severity": "major",
      "line_number": 35,
      "suggestion": {
        "suggested_methods_split": [
          "MessageQueuePyAutoGUIIntegrationCore - Core methods: create_pyautogui_delivery_callback, get_delivery_statistics, reset_statistics, pyautogui_delivery_callback",
          "MessageQueuePyAutoGUIIntegrationUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "type_mapping",
          "priority_mapping",
          "message_type_enum",
          "priority_enum",
          "unified_message",
          "coords",
          "success",
          "content",
          "recipient",
          "sender",
          "message_type",
          "priority",
          "content",
          "recipient",
          "sender",
          "message_type",
          "priority",
          "content",
          "recipient",
          "sender",
          "message_type",
          "priority"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\message_queue_pyautogui_integration.py",
      "function_name": "_convert_to_unified_message",
      "current_loc": 57,
      "limit": 50,
      "excess": 7,
      "severity": "minor",
      "line_number": 92,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _convert_to_unified_message",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\agent_context_manager.py",
      "class_name": "AgentContextManager",
      "current_loc": 118,
      "limit": 100,
      "excess": 18,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "AgentContextManagerCore - Core methods: set_agent_context, get_agent_context, update_agent_context, remove_agent_context, list_agents",
          "AgentContextManagerUtils - Utility methods: agent_contexts, get_context_summary"
        ],
        "properties_to_extract": [],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\agent_coordination.py",
      "current_loc": 569,
      "limit": 400,
      "excess": 169,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "agent_coordination_core.py - Core classes: AgentStatus, AgentCapability",
          "agent_coordination_utils.py - Utility functions: create_agent_info, create_agent_task, create_agent_context",
          "agent_coordination_types.py - Type definitions and imports"
        ],
        "estimated_splits": 5,
        "complexity_factors": {
          "classes": 11,
          "functions": 40,
          "imports": 17
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\agent_coordination.py",
      "class_name": "AgentCoordinationManager",
      "current_loc": 115,
      "limit": 100,
      "excess": 15,
      "severity": "major",
      "line_number": 372,
      "suggestion": {
        "suggested_methods_split": [
          "AgentCoordinationManagerCore - Core methods: register_agent, create_task, assign_task, execute_task, get_agent_context",
          "AgentCoordinationManagerUtils - Utility methods: get_coordination_status"
        ],
        "properties_to_extract": [
          "context",
          "task",
          "agent",
          "suitable_strategy",
          "success",
          "task",
          "agent",
          "context",
          "suitable_strategy"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\analytics_unified.py",
      "current_loc": 748,
      "limit": 400,
      "excess": 348,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "analytics_unified_core.py - Core classes: AnalyticsStatus, AnalyticsType",
          "analytics_unified_utils.py - Utility functions: create_intelligence_engine, create_processing_engine, create_analytics_coordinator",
          "analytics_unified_types.py - Type definitions and imports"
        ],
        "estimated_splits": 8,
        "complexity_factors": {
          "classes": 16,
          "functions": 49,
          "imports": 16
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\analytics_unified.py",
      "class_name": "PatternRecognitionEngine",
      "current_loc": 107,
      "limit": 100,
      "excess": 7,
      "severity": "major",
      "line_number": 232,
      "suggestion": {
        "suggested_methods_split": [
          "PatternRecognitionEngineCore - Core methods: start, stop, process_data, get_capabilities, analyze_patterns",
          "PatternRecognitionEngineUtils - Utility methods: detect_anomalies"
        ],
        "properties_to_extract": [
          "start_time",
          "start_time",
          "result_data",
          "result",
          "result_data",
          "result"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\automated_health_check_system.py",
      "current_loc": 1056,
      "limit": 400,
      "excess": 656,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "automated_health_check_system_core.py - Core classes: HealthCheckType, HealthStatus",
          "automated_health_check_system_utils.py - Utility functions: main, to_dict, should_run",
          "automated_health_check_system_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 5,
          "functions": 29,
          "imports": 18
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\automated_health_check_system.py",
      "class_name": "AutomatedHealthCheckSystem",
      "current_loc": 849,
      "limit": 100,
      "excess": 749,
      "severity": "major",
      "line_number": 130,
      "suggestion": {
        "suggested_methods_split": [
          "AutomatedHealthCheckSystemCore - Core methods: start_monitoring, stop_monitoring, get_health_status_summary, get_detailed_health_report, export_health_check_snapshot",
          "AutomatedHealthCheckSystemUtils - Utility methods: acknowledge_alert, get_consolidation_readiness_status"
        ],
        "properties_to_extract": [
          "start_time",
          "start_time",
          "status",
          "details",
          "recommendations",
          "start_time",
          "status",
          "details",
          "recommendations",
          "start_time",
          "status",
          "details",
          "recommendations",
          "start_time",
          "status",
          "details",
          "recommendations",
          "alert",
          "recent_alerts",
          "alert",
          "cutoff_time",
          "total_checks",
          "enabled_checks",
          "healthy_count",
          "warning_count",
          "critical_count",
          "unknown_count",
          "report",
          "timestamp",
          "snapshot",
          "snapshot_file",
          "status",
          "last_alert_time",
          "cooldown_period",
          "overall_status",
          "result",
          "result",
          "result",
          "cpu_percent",
          "details",
          "status",
          "details",
          "recommendations",
          "response_time",
          "details",
          "status",
          "details",
          "recommendations",
          "progress",
          "files_consolidated",
          "details",
          "status",
          "details",
          "recommendations",
          "config_status",
          "vulnerabilities",
          "details",
          "status",
          "details",
          "recommendations",
          "overall_status",
          "result",
          "status",
          "recommendations",
          "memory",
          "details",
          "status",
          "recommendations",
          "error_rate",
          "details",
          "status",
          "recommendations",
          "performance_impact",
          "details",
          "status",
          "recommendations",
          "access_status",
          "failed_attempts",
          "details",
          "overall_status",
          "overall_status",
          "result",
          "status",
          "recommendations",
          "status",
          "recommendations",
          "disk",
          "details",
          "status",
          "recommendations",
          "status",
          "recommendations",
          "services_status",
          "details",
          "unhealthy_services",
          "status",
          "recommendations",
          "integrity_status",
          "files_checked",
          "corrupted_files",
          "details",
          "status",
          "recommendations",
          "result",
          "result",
          "status",
          "recommendations",
          "status",
          "recommendations",
          "details",
          "recommendations",
          "status",
          "recommendations",
          "status",
          "recommendations",
          "status",
          "recommendations",
          "status",
          "recommendations",
          "sla_compliance",
          "details",
          "status",
          "recommendations",
          "status",
          "recommendations",
          "status",
          "recommendations"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\automated_health_check_system.py",
      "function_name": "main",
      "current_loc": 72,
      "limit": 50,
      "excess": 22,
      "severity": "minor",
      "line_number": 981,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from main",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\automated_health_check_system.py",
      "function_name": "_initialize_system_health_checks",
      "current_loc": 53,
      "limit": 50,
      "excess": 3,
      "severity": "minor",
      "line_number": 172,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _initialize_system_health_checks",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\automated_health_check_system.py",
      "function_name": "_initialize_consolidation_health_checks",
      "current_loc": 53,
      "limit": 50,
      "excess": 3,
      "severity": "minor",
      "line_number": 267,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _initialize_consolidation_health_checks",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\automated_health_check_system.py",
      "function_name": "_execute_system_health_check",
      "current_loc": 88,
      "limit": 50,
      "excess": 38,
      "severity": "minor",
      "line_number": 439,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _execute_system_health_check",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\automated_health_check_system.py",
      "function_name": "_execute_application_health_check",
      "current_loc": 81,
      "limit": 50,
      "excess": 31,
      "severity": "minor",
      "line_number": 528,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _execute_application_health_check",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\automated_health_check_system.py",
      "function_name": "_execute_consolidation_health_check",
      "current_loc": 89,
      "limit": 50,
      "excess": 39,
      "severity": "minor",
      "line_number": 610,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _execute_consolidation_health_check",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\automated_health_check_system.py",
      "function_name": "_execute_security_health_check",
      "current_loc": 59,
      "limit": 50,
      "excess": 9,
      "severity": "minor",
      "line_number": 700,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _execute_security_health_check",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\automated_health_check_system.py",
      "function_name": "get_health_status_summary",
      "current_loc": 58,
      "limit": 50,
      "excess": 8,
      "severity": "minor",
      "line_number": 832,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from get_health_status_summary",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\config_core.py",
      "class_name": "UnifiedConfigManager",
      "current_loc": 128,
      "limit": 100,
      "excess": 28,
      "severity": "major",
      "line_number": 58,
      "suggestion": {
        "suggested_methods_split": [
          "UnifiedConfigManagerCore - Core methods: get, set, get_all_configs, get_config_metadata, reload_configs",
          "UnifiedConfigManagerUtils - Utility methods: validate_configs"
        ],
        "properties_to_extract": [
          "defaults",
          "env_value",
          "errors"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\config_core.py",
      "function_name": "_load_default_configs",
      "current_loc": 56,
      "limit": 50,
      "excess": 6,
      "severity": "minor",
      "line_number": 69,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _load_default_configs",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\coordination_unified.py",
      "current_loc": 584,
      "limit": 400,
      "excess": 184,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "coordination_unified_core.py - Core classes: CoordinationStatus, TargetType",
          "coordination_unified_utils.py - Utility functions: create_coordination_engine, create_swarm_orchestrator, create_agent_strategy",
          "coordination_unified_types.py - Type definitions and imports"
        ],
        "estimated_splits": 10,
        "complexity_factors": {
          "classes": 21,
          "functions": 48,
          "imports": 16
        }
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\coordination_unified.py",
      "function_name": "main",
      "current_loc": 51,
      "limit": 50,
      "excess": 1,
      "severity": "minor",
      "line_number": 529,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from main",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\core_configuration.py",
      "current_loc": 511,
      "limit": 400,
      "excess": 111,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "core_configuration_core.py - Core classes: Environment, EnvironmentConfig",
          "core_configuration_utils.py - Utility functions: create_environment_config, create_agent_config, create_system_config",
          "core_configuration_types.py - Type definitions and imports"
        ],
        "estimated_splits": 4,
        "complexity_factors": {
          "classes": 9,
          "functions": 22,
          "imports": 13
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\core_configuration.py",
      "class_name": "UnifiedConfiguration",
      "current_loc": 158,
      "limit": 100,
      "excess": 58,
      "severity": "major",
      "line_number": 205,
      "suggestion": {
        "suggested_methods_split": [
          "UnifiedConfigurationCore - Core methods: validate, to_dict, save_to_file, load_from_file",
          "UnifiedConfigurationUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "file_path",
          "file_path",
          "data",
          "env_data",
          "agent_data",
          "system_data",
          "validation_data"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\core_configuration.py",
      "function_name": "load_from_file",
      "current_loc": 77,
      "limit": 50,
      "excess": 27,
      "severity": "minor",
      "line_number": 286,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from load_from_file",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\core_coordination.py",
      "current_loc": 688,
      "limit": 400,
      "excess": 288,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "core_coordination_core.py - Core classes: CoordinationStatus, TaskStatus",
          "core_coordination_utils.py - Utility functions: create_agent_info, create_task, create_resource",
          "core_coordination_types.py - Type definitions and imports"
        ],
        "estimated_splits": 6,
        "complexity_factors": {
          "classes": 13,
          "functions": 72,
          "imports": 17
        }
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\core_interfaces.py",
      "current_loc": 612,
      "limit": 400,
      "excess": 212,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "core_interfaces_core.py - Core classes: CoordinatorStatus, CoordinatorInfo",
          "core_interfaces_utils.py - Utility functions: create_coordinator_info, create_message, create_agent_info",
          "core_interfaces_types.py - Type definitions and imports"
        ],
        "estimated_splits": 11,
        "complexity_factors": {
          "classes": 22,
          "functions": 64,
          "imports": 16
        }
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\core_manager_system.py",
      "current_loc": 571,
      "limit": 400,
      "excess": 171,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "core_manager_system_core.py - Core classes: AgentContextManager, DocumentationService",
          "core_manager_system_utils.py - Utility functions: create_agent_context_manager, create_documentation_service, create_message_queue_manager",
          "core_manager_system_types.py - Type definitions and imports"
        ],
        "estimated_splits": 4,
        "complexity_factors": {
          "classes": 9,
          "functions": 43,
          "imports": 13
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\core_manager_system.py",
      "class_name": "MessageQueueManager",
      "current_loc": 105,
      "limit": 100,
      "excess": 5,
      "severity": "major",
      "line_number": 194,
      "suggestion": {
        "suggested_methods_split": [
          "MessageQueueManagerCore - Core methods: enqueue, dequeue, mark_completed, mark_failed, retry_entry",
          "MessageQueueManagerUtils - Utility methods: get_queue_status, cleanup_expired"
        ],
        "properties_to_extract": [
          "entry",
          "inserted",
          "entry",
          "status_counts",
          "initial_count",
          "removed_count",
          "inserted"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\core_unified_system.py",
      "current_loc": 669,
      "limit": 400,
      "excess": 269,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "core_unified_system_core.py - Core classes: BaseUtility, CleanupManager",
          "core_unified_system_utils.py - Utility functions: create_cleanup_manager, create_configuration_manager, create_error_handler",
          "core_unified_system_types.py - Type definitions and imports"
        ],
        "estimated_splits": 8,
        "complexity_factors": {
          "classes": 17,
          "functions": 69,
          "imports": 15
        }
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\core_utilities.py",
      "current_loc": 584,
      "limit": 400,
      "excess": 184,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "core_utilities_core.py - Core classes: ",
          "core_utilities_utils.py - Utility functions: read_file, write_file, copy_file",
          "core_utilities_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 0,
          "functions": 51,
          "imports": 20
        }
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\core_utilities.py",
      "function_name": "main",
      "current_loc": 63,
      "limit": 50,
      "excess": 13,
      "severity": "minor",
      "line_number": 515,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from main",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\core_validation.py",
      "current_loc": 552,
      "limit": 400,
      "excess": 152,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "core_validation_core.py - Core classes: ValidationType, ValidationLevel",
          "core_validation_utils.py - Utility functions: create_validation_rule, create_validation_schema, create_type_validator",
          "core_validation_types.py - Type definitions and imports"
        ],
        "estimated_splits": 5,
        "complexity_factors": {
          "classes": 11,
          "functions": 34,
          "imports": 16
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\core_validation.py",
      "class_name": "ValidationOrchestrator",
      "current_loc": 120,
      "limit": 100,
      "excess": 20,
      "severity": "major",
      "line_number": 311,
      "suggestion": {
        "suggested_methods_split": [
          "ValidationOrchestratorCore - Core methods: register_validator, register_schema, validate, get_validation_stats, clear_history",
          "ValidationOrchestratorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "result",
          "result",
          "total_validations",
          "successful_validations",
          "result",
          "result",
          "result"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\emergency_unified.py",
      "current_loc": 634,
      "limit": 400,
      "excess": 234,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "emergency_unified_core.py - Core classes: EmergencyStatus, EmergencyType",
          "emergency_unified_utils.py - Utility functions: create_emergency_handler, create_emergency_monitor, create_emergency_orchestrator",
          "emergency_unified_types.py - Type definitions and imports"
        ],
        "estimated_splits": 8,
        "complexity_factors": {
          "classes": 16,
          "functions": 42,
          "imports": 16
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\emergency_unified.py",
      "class_name": "EmergencyOrchestrator",
      "current_loc": 102,
      "limit": 100,
      "excess": 2,
      "severity": "major",
      "line_number": 442,
      "suggestion": {
        "suggested_methods_split": [
          "EmergencyOrchestratorCore - Core methods: register_handler, register_monitor, start_monitoring, stop_monitoring, detect_emergencies",
          "EmergencyOrchestratorUtils - Utility methods: handle_emergency, get_emergency_status"
        ],
        "properties_to_extract": [
          "success",
          "success",
          "emergencies",
          "handler",
          "action",
          "success",
          "success",
          "emergency",
          "handler"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\engines_unified.py",
      "current_loc": 703,
      "limit": 400,
      "excess": 303,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "engines_unified_core.py - Core classes: EngineStatus, EngineType",
          "engines_unified_utils.py - Utility functions: create_engine, create_engine_registry, main",
          "engines_unified_types.py - Type definitions and imports"
        ],
        "estimated_splits": 7,
        "complexity_factors": {
          "classes": 14,
          "functions": 68,
          "imports": 16
        }
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\enhanced_communication_protocols.py",
      "current_loc": 491,
      "limit": 400,
      "excess": 91,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "enhanced_communication_protocols_core.py - Core classes: CommunicationPriority, DeliveryChannel",
          "enhanced_communication_protocols_utils.py - Utility functions: get_enhanced_protocols, send_enhanced_message, broadcast_enhanced_message",
          "enhanced_communication_protocols_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 5,
          "functions": 28,
          "imports": 30
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\enhanced_communication_protocols.py",
      "class_name": "EnhancedCommunicationProtocols",
      "current_loc": 309,
      "limit": 100,
      "excess": 209,
      "severity": "major",
      "line_number": 114,
      "suggestion": {
        "suggested_methods_split": [
          "EnhancedCommunicationProtocolsCore - Core methods: send_message, broadcast_message, get_protocol_status, reset_agent_health, shutdown",
          "EnhancedCommunicationProtocolsUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "agents",
          "recipient",
          "content",
          "priority",
          "callback",
          "success",
          "health",
          "channels",
          "success_count",
          "message_data",
          "results",
          "worker",
          "coords",
          "message",
          "message",
          "inbox_dir",
          "filename",
          "filepath",
          "success",
          "message_data"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\enhanced_unified_config.py",
      "current_loc": 573,
      "limit": 400,
      "excess": 173,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "enhanced_unified_config_core.py - Core classes: ConfigEnvironment, ConfigSource",
          "enhanced_unified_config_utils.py - Utility functions: get_enhanced_config, get_config, get_agent_config",
          "enhanced_unified_config_types.py - Type definitions and imports"
        ],
        "estimated_splits": 3,
        "complexity_factors": {
          "classes": 7,
          "functions": 30,
          "imports": 17
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\enhanced_unified_config.py",
      "class_name": "EnhancedUnifiedConfig",
      "current_loc": 257,
      "limit": 100,
      "excess": 157,
      "severity": "major",
      "line_number": 169,
      "suggestion": {
        "suggested_methods_split": [
          "EnhancedUnifiedConfigCore - Core methods: get_config, get_agent_config, get_system_config, get_timeout_config, get_threshold_config",
          "EnhancedUnifiedConfigUtils - Utility methods: get_test_config, set_config, validate_configuration, export_configuration"
        ],
        "properties_to_extract": [
          "coords_file",
          "timeout_configs",
          "pyautogui_configs",
          "messaging_configs",
          "threshold_configs",
          "validation_errors",
          "value",
          "value",
          "value",
          "config_data",
          "coords_data"
        ],
        "method_count": 9,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\enhanced_unified_config.py",
      "function_name": "_load_core_configurations",
      "current_loc": 70,
      "limit": 50,
      "excess": 20,
      "severity": "minor",
      "line_number": 249,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _load_core_configurations",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\env_loader.py",
      "class_name": "EnvironmentLoader",
      "current_loc": 252,
      "limit": 100,
      "excess": 152,
      "severity": "major",
      "line_number": 23,
      "suggestion": {
        "suggested_methods_split": [
          "EnvironmentLoaderCore - Core methods: load_env_file, get_env_var, validate_critical_settings, load_unified_config_from_env, get_environment_summary",
          "EnvironmentLoaderUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "value",
          "issues",
          "required_settings",
          "numeric_settings",
          "url_settings",
          "value",
          "value",
          "issues",
          "config",
          "line",
          "key",
          "value",
          "value",
          "value"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\env_loader.py",
      "function_name": "load_unified_config_from_env",
      "current_loc": 136,
      "limit": 50,
      "excess": 86,
      "severity": "minor",
      "line_number": 130,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from load_unified_config_from_env",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\error_handling_unified.py",
      "current_loc": 674,
      "limit": 400,
      "excess": 274,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "error_handling_unified_core.py - Core classes: ErrorSeverity, ErrorType",
          "error_handling_unified_utils.py - Utility functions: create_error_handler, create_error_recovery, create_error_orchestrator",
          "error_handling_unified_types.py - Type definitions and imports"
        ],
        "estimated_splits": 8,
        "complexity_factors": {
          "classes": 16,
          "functions": 37,
          "imports": 17
        }
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\error_handling_unified.py",
      "function_name": "main",
      "current_loc": 59,
      "limit": 50,
      "excess": 9,
      "severity": "minor",
      "line_number": 611,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from main",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\error_handling_unified.py",
      "function_name": "recover",
      "current_loc": 75,
      "limit": 50,
      "excess": 25,
      "severity": "minor",
      "line_number": 351,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from recover",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\integration_unified.py",
      "current_loc": 561,
      "limit": 400,
      "excess": 161,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "integration_unified_core.py - Core classes: IntegrationStatus, IntegrationType",
          "integration_unified_utils.py - Utility functions: create_integration_connector, create_integration_manager, main",
          "integration_unified_types.py - Type definitions and imports"
        ],
        "estimated_splits": 6,
        "complexity_factors": {
          "classes": 13,
          "functions": 30,
          "imports": 16
        }
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\managers_unified.py",
      "current_loc": 730,
      "limit": 400,
      "excess": 330,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "managers_unified_core.py - Core classes: ManagerStatus, ManagerType",
          "managers_unified_utils.py - Utility functions: create_manager, create_manager_registry, main",
          "managers_unified_types.py - Type definitions and imports"
        ],
        "estimated_splits": 7,
        "complexity_factors": {
          "classes": 14,
          "functions": 45,
          "imports": 16
        }
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\message_queue.py",
      "current_loc": 487,
      "limit": 400,
      "excess": 87,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "message_queue_core.py - Core classes: QueueConfig, MessageQueue",
          "message_queue_utils.py - Utility functions: __init__, __init__, enqueue",
          "message_queue_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 3,
          "functions": 25,
          "imports": 28
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\message_queue.py",
      "class_name": "MessageQueue",
      "current_loc": 323,
      "limit": 100,
      "excess": 223,
      "severity": "major",
      "line_number": 70,
      "suggestion": {
        "suggested_methods_split": [
          "MessageQueueCore - Core methods: enqueue, enqueue_with_pyautogui, enqueue_broadcast_with_pyautogui, dequeue, mark_delivered",
          "MessageQueueUtils - Utility methods: mark_failed, get_statistics, cleanup_expired, get_health_status, get_pyautogui_delivery_stats"
        ],
        "properties_to_extract": [
          "queue_file",
          "queue_id",
          "now",
          "priority_score",
          "entry",
          "formatted_message",
          "formatted_message",
          "batch_size",
          "use_pyautogui",
          "delivery_callback",
          "entries",
          "delivery_info",
          "entries",
          "pending_entries",
          "entries_to_process",
          "entries",
          "entries",
          "entries",
          "entries",
          "original_count",
          "max_age_seconds",
          "now",
          "active_entries",
          "expired_count",
          "entries",
          "age"
        ],
        "method_count": 10,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\message_queue.py",
      "function_name": "enqueue",
      "current_loc": 63,
      "limit": 50,
      "excess": 13,
      "severity": "minor",
      "line_number": 109,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from enqueue",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\message_queue_statistics.py",
      "class_name": "QueueStatisticsCalculator",
      "current_loc": 150,
      "limit": 100,
      "excess": 50,
      "severity": "major",
      "line_number": 15,
      "suggestion": {
        "suggested_methods_split": [
          "QueueStatisticsCalculatorCore - Core methods: calculate_statistics",
          "QueueStatisticsCalculatorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "stats",
          "now",
          "total_age",
          "formatted",
          "status",
          "age_seconds",
          "created_at",
          "priority_bucket",
          "retry_bucket",
          "minutes",
          "created_at",
          "age",
          "hours",
          "days"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\message_queue_statistics.py",
      "function_name": "calculate_statistics",
      "current_loc": 78,
      "limit": 50,
      "excess": 28,
      "severity": "minor",
      "line_number": 18,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from calculate_statistics",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\onboarding_service.py",
      "class_name": "OnboardingService",
      "current_loc": 170,
      "limit": 100,
      "excess": 70,
      "severity": "major",
      "line_number": 13,
      "suggestion": {
        "suggested_methods_split": [
          "OnboardingServiceCore - Core methods: generate_onboarding_message, validate_onboarding, create_agent_workspace",
          "OnboardingServiceUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "agent_info",
          "template",
          "message",
          "loader",
          "coords",
          "workspace_path",
          "inbox_path",
          "status_path",
          "workspace_path",
          "inbox_path",
          "devlogs_path",
          "status_data"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\onboarding_service.py",
      "function_name": "_load_onboarding_templates",
      "current_loc": 56,
      "limit": 50,
      "excess": 6,
      "severity": "minor",
      "line_number": 20,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _load_onboarding_templates",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\operational_monitoring_baseline.py",
      "current_loc": 950,
      "limit": 400,
      "excess": 550,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "operational_monitoring_baseline_core.py - Core classes: MonitoringPriority, SLATier",
          "operational_monitoring_baseline_utils.py - Utility functions: main, __init__, _initialize_baseline",
          "operational_monitoring_baseline_types.py - Type definitions and imports"
        ],
        "estimated_splits": 3,
        "complexity_factors": {
          "classes": 6,
          "functions": 28,
          "imports": 17
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\operational_monitoring_baseline.py",
      "class_name": "OperationalMonitoringBaseline",
      "current_loc": 796,
      "limit": 100,
      "excess": 696,
      "severity": "major",
      "line_number": 84,
      "suggestion": {
        "suggested_methods_split": [
          "OperationalMonitoringBaselineCore - Core methods: collect_operational_metrics, perform_system_health_check, generate_operational_report, save_baseline_snapshot, export_operational_dashboard_data",
          "OperationalMonitoringBaselineUtils - Utility methods: get_consolidation_safety_status"
        ],
        "properties_to_extract": [
          "baseline_file",
          "sla_requirements",
          "required_uptime",
          "current_uptime",
          "compliance_status",
          "risk_assessment",
          "consolidation_impact",
          "mitigation_strategies",
          "uptime_map",
          "risks",
          "impacts",
          "strategies",
          "metrics",
          "metrics",
          "metrics",
          "response_time",
          "error_rate",
          "metrics",
          "consolidation_impact",
          "consolidation_progress",
          "metrics",
          "timestamp",
          "metrics",
          "components",
          "alerts",
          "overall_status",
          "sla_compliance",
          "consolidation_impact",
          "health_status",
          "components",
          "component_metrics",
          "alerts",
          "consolidation_metrics",
          "impact_assessment",
          "current_health",
          "report",
          "recommendations",
          "non_compliant_components",
          "critical_alerts",
          "warning_alerts",
          "snapshot",
          "snapshot_file",
          "current_health",
          "dashboard_data",
          "current_health",
          "safety_status",
          "critical_alerts",
          "non_compliant_slas",
          "warning_alerts",
          "cpu_percent",
          "memory",
          "disk",
          "component_name",
          "health_status",
          "issues",
          "alert_data",
          "alert_data",
          "health_status",
          "alert_data",
          "health_status"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\operational_monitoring_baseline.py",
      "function_name": "main",
      "current_loc": 65,
      "limit": 50,
      "excess": 15,
      "severity": "minor",
      "line_number": 882,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from main",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\operational_monitoring_baseline.py",
      "function_name": "_collect_system_metrics",
      "current_loc": 57,
      "limit": 50,
      "excess": 7,
      "severity": "minor",
      "line_number": 364,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _collect_system_metrics",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\performance_monitoring_dashboard.py",
      "current_loc": 1149,
      "limit": 400,
      "excess": 749,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "performance_monitoring_dashboard_core.py - Core classes: DashboardType, MetricType",
          "performance_monitoring_dashboard_utils.py - Utility functions: main, __init__, _initialize_dashboards",
          "performance_monitoring_dashboard_types.py - Type definitions and imports"
        ],
        "estimated_splits": 3,
        "complexity_factors": {
          "classes": 6,
          "functions": 24,
          "imports": 19
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\performance_monitoring_dashboard.py",
      "class_name": "PerformanceMonitoringDashboard",
      "current_loc": 978,
      "limit": 100,
      "excess": 878,
      "severity": "major",
      "line_number": 86,
      "suggestion": {
        "suggested_methods_split": [
          "PerformanceMonitoringDashboardCore - Core methods: start_monitoring, stop_monitoring, get_dashboard_data, export_dashboard_snapshot, get_all_dashboards_summary",
          "PerformanceMonitoringDashboardUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "dashboard_id",
          "dashboard_id",
          "dashboard_id",
          "dashboard_id",
          "dashboard_id",
          "timestamp",
          "timestamp",
          "consolidation_progress",
          "files_consolidated",
          "performance_impact",
          "timestamp",
          "cpu_metric",
          "memory_metric",
          "impact_metric",
          "history",
          "recent_values",
          "avg_recent",
          "avg_previous",
          "dashboard",
          "data",
          "snapshot",
          "cpu_times",
          "memory",
          "disk",
          "widget",
          "metric"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\performance_monitoring_dashboard.py",
      "function_name": "main",
      "current_loc": 80,
      "limit": 50,
      "excess": 30,
      "severity": "minor",
      "line_number": 1066,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from main",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\performance_monitoring_dashboard.py",
      "function_name": "_create_operational_dashboard",
      "current_loc": 104,
      "limit": 50,
      "excess": 54,
      "severity": "minor",
      "line_number": 131,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _create_operational_dashboard",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\performance_monitoring_dashboard.py",
      "function_name": "_create_consolidation_dashboard",
      "current_loc": 128,
      "limit": 50,
      "excess": 78,
      "severity": "minor",
      "line_number": 236,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _create_consolidation_dashboard",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\performance_monitoring_dashboard.py",
      "function_name": "_create_performance_dashboard",
      "current_loc": 126,
      "limit": 50,
      "excess": 76,
      "severity": "minor",
      "line_number": 365,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _create_performance_dashboard",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\performance_monitoring_dashboard.py",
      "function_name": "_create_sla_dashboard",
      "current_loc": 87,
      "limit": 50,
      "excess": 37,
      "severity": "minor",
      "line_number": 492,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _create_sla_dashboard",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\performance_monitoring_dashboard.py",
      "function_name": "_create_alert_dashboard",
      "current_loc": 87,
      "limit": 50,
      "excess": 37,
      "severity": "minor",
      "line_number": 580,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _create_alert_dashboard",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\performance_monitoring_dashboard.py",
      "function_name": "_collect_system_metrics",
      "current_loc": 66,
      "limit": 50,
      "excess": 16,
      "severity": "minor",
      "line_number": 721,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _collect_system_metrics",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\performance_unified.py",
      "current_loc": 691,
      "limit": 400,
      "excess": 291,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "performance_unified_core.py - Core classes: PerformanceStatus, PerformanceMetric",
          "performance_unified_utils.py - Utility functions: create_performance_monitor, create_performance_dashboard, create_performance_manager",
          "performance_unified_types.py - Type definitions and imports"
        ],
        "estimated_splits": 7,
        "complexity_factors": {
          "classes": 15,
          "functions": 48,
          "imports": 16
        }
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\performance_unified.py",
      "function_name": "main",
      "current_loc": 54,
      "limit": 50,
      "excess": 4,
      "severity": "minor",
      "line_number": 633,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from main",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\refactoring_unified.py",
      "current_loc": 680,
      "limit": 400,
      "excess": 280,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "refactoring_unified_core.py - Core classes: RefactoringType, RefactoringStatus",
          "refactoring_unified_utils.py - Utility functions: create_refactoring_tool, create_code_analyzer, create_refactoring_orchestrator",
          "refactoring_unified_types.py - Type definitions and imports"
        ],
        "estimated_splits": 8,
        "complexity_factors": {
          "classes": 16,
          "functions": 36,
          "imports": 16
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\refactoring_unified.py",
      "class_name": "RefactoringOrchestrator",
      "current_loc": 115,
      "limit": 100,
      "excess": 15,
      "severity": "major",
      "line_number": 466,
      "suggestion": {
        "suggested_methods_split": [
          "RefactoringOrchestratorCore - Core methods: register_tool, register_analyzer, create_task, execute_task, analyze_file",
          "RefactoringOrchestratorUtils - Utility methods: get_refactoring_status"
        ],
        "properties_to_extract": [
          "task",
          "analyses",
          "task",
          "tool",
          "result",
          "analysis",
          "tool"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\refactoring_unified.py",
      "function_name": "main",
      "current_loc": 52,
      "limit": 50,
      "excess": 2,
      "severity": "minor",
      "line_number": 624,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from main",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\ssot_unified.py",
      "current_loc": 714,
      "limit": 400,
      "excess": 314,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "ssot_unified_core.py - Core classes: SSOTStatus, SSOTType",
          "ssot_unified_utils.py - Utility functions: create_ssot_manager, create_ssot_validator, create_ssot_coordinator",
          "ssot_unified_types.py - Type definitions and imports"
        ],
        "estimated_splits": 7,
        "complexity_factors": {
          "classes": 14,
          "functions": 45,
          "imports": 16
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\ssot_unified.py",
      "class_name": "ConfigurationSSOTManager",
      "current_loc": 110,
      "limit": 100,
      "excess": 10,
      "severity": "major",
      "line_number": 216,
      "suggestion": {
        "suggested_methods_split": [
          "ConfigurationSSOTManagerCore - Core methods: start, stop, create_record, read_record, update_record",
          "ConfigurationSSOTManagerUtils - Utility methods: delete_record, get_capabilities"
        ],
        "properties_to_extract": [
          "record",
          "record",
          "record"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\ssot_unified.py",
      "class_name": "DataSSOTManager",
      "current_loc": 108,
      "limit": 100,
      "excess": 8,
      "severity": "major",
      "line_number": 328,
      "suggestion": {
        "suggested_methods_split": [
          "DataSSOTManagerCore - Core methods: start, stop, create_record, read_record, update_record",
          "DataSSOTManagerUtils - Utility methods: delete_record, get_capabilities"
        ],
        "properties_to_extract": [
          "record",
          "record",
          "record"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\ssot_unified.py",
      "class_name": "SSOTCoordinator",
      "current_loc": 104,
      "limit": 100,
      "excess": 4,
      "severity": "major",
      "line_number": 513,
      "suggestion": {
        "suggested_methods_split": [
          "SSOTCoordinatorCore - Core methods: register_manager, register_validator, start_all_managers, stop_all_managers, create_record",
          "SSOTCoordinatorUtils - Utility methods: read_record, update_record, delete_record, validate_record, get_ssot_status"
        ],
        "properties_to_extract": [
          "success",
          "success",
          "manager",
          "manager",
          "manager",
          "manager",
          "validations",
          "success",
          "success",
          "validation"
        ],
        "method_count": 10,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\ssot_unified.py",
      "function_name": "main",
      "current_loc": 54,
      "limit": 50,
      "excess": 4,
      "severity": "minor",
      "line_number": 656,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from main",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\ssot_unified.py",
      "function_name": "validate_record",
      "current_loc": 53,
      "limit": 50,
      "excess": 3,
      "severity": "minor",
      "line_number": 449,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from validate_record",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\swarm_coordination.py",
      "current_loc": 568,
      "limit": 400,
      "excess": 168,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "swarm_coordination_core.py - Core classes: SwarmStatus, SwarmPhase",
          "swarm_coordination_utils.py - Utility functions: create_swarm_agent, create_swarm_task, create_performance_monitoring_engine",
          "swarm_coordination_types.py - Type definitions and imports"
        ],
        "estimated_splits": 5,
        "complexity_factors": {
          "classes": 10,
          "functions": 39,
          "imports": 17
        }
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\unified_config.py",
      "current_loc": 495,
      "limit": 400,
      "excess": 95,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "unified_config_core.py - Core classes: TimeoutConfig, AgentConfig",
          "unified_config_utils.py - Utility functions: get_unified_config, reload_config, get_timeout_config",
          "unified_config_types.py - Type definitions and imports"
        ],
        "estimated_splits": 4,
        "complexity_factors": {
          "classes": 9,
          "functions": 16,
          "imports": 18
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\unified_config.py",
      "class_name": "UnifiedConfig",
      "current_loc": 113,
      "limit": 100,
      "excess": 13,
      "severity": "major",
      "line_number": 331,
      "suggestion": {
        "suggested_methods_split": [
          "UnifiedConfigCore - Core methods: validate, get_config_summary",
          "UnifiedConfigUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "issues"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\unified_config.py",
      "function_name": "validate",
      "current_loc": 67,
      "limit": 50,
      "excess": 17,
      "severity": "minor",
      "line_number": 347,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from validate",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\unified_monitoring_coordinator.py",
      "current_loc": 494,
      "limit": 400,
      "excess": 94,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "unified_monitoring_coordinator_core.py - Core classes: MonitoringAlertLevel, SwarmComponent",
          "unified_monitoring_coordinator_utils.py - Utility functions: get_monitoring_coordinator, __init__, _initialize_monitoring_systems",
          "unified_monitoring_coordinator_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 5,
          "functions": 17,
          "imports": 35
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\unified_monitoring_coordinator.py",
      "class_name": "UnifiedMonitoringCoordinator",
      "current_loc": 365,
      "limit": 100,
      "excess": 265,
      "severity": "major",
      "line_number": 108,
      "suggestion": {
        "suggested_methods_split": [
          "UnifiedMonitoringCoordinatorCore - Core methods: start_monitoring, stop_monitoring, get_monitoring_report, resolve_alert",
          "UnifiedMonitoringCoordinatorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "alert",
          "status_summary",
          "messaging_core",
          "health_result",
          "screen_size",
          "inbox_paths",
          "healthy_inboxes",
          "coord_loader",
          "active_agents",
          "coord_file",
          "queue_file",
          "inbox_path",
          "agents_with_coords",
          "queue_size",
          "coords_data",
          "queue_data"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\validation_unified.py",
      "current_loc": 721,
      "limit": 400,
      "excess": 321,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "validation_unified_core.py - Core classes: ValidationStatus, ValidationType",
          "validation_unified_utils.py - Utility functions: create_validator, create_schema_validator, create_validation_manager",
          "validation_unified_types.py - Type definitions and imports"
        ],
        "estimated_splits": 7,
        "complexity_factors": {
          "classes": 14,
          "functions": 32,
          "imports": 18
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\validation_unified.py",
      "class_name": "DataTypeValidator",
      "current_loc": 132,
      "limit": 100,
      "excess": 32,
      "severity": "major",
      "line_number": 204,
      "suggestion": {
        "suggested_methods_split": [
          "DataTypeValidatorCore - Core methods: validate, get_capabilities",
          "DataTypeValidatorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "pattern",
          "pattern",
          "pattern"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\validation_unified.py",
      "class_name": "ConstraintValidator",
      "current_loc": 116,
      "limit": 100,
      "excess": 16,
      "severity": "major",
      "line_number": 338,
      "suggestion": {
        "suggested_methods_split": [
          "ConstraintValidatorCore - Core methods: validate, get_capabilities",
          "ConstraintValidatorUtils - Utility methods: "
        ],
        "properties_to_extract": [],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\validation_unified.py",
      "function_name": "main",
      "current_loc": 54,
      "limit": 50,
      "excess": 4,
      "severity": "minor",
      "line_number": 663,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from main",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\validation_unified.py",
      "function_name": "validate",
      "current_loc": 60,
      "limit": 50,
      "excess": 10,
      "severity": "minor",
      "line_number": 210,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from validate",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\validation_unified.py",
      "function_name": "validate",
      "current_loc": 101,
      "limit": 50,
      "excess": 51,
      "severity": "minor",
      "line_number": 344,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from validate",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\validation_unified.py",
      "function_name": "validate_schema",
      "current_loc": 67,
      "limit": 50,
      "excess": 17,
      "severity": "minor",
      "line_number": 467,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from validate_schema",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\vector_unified.py",
      "current_loc": 637,
      "limit": 400,
      "excess": 237,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "vector_unified_core.py - Core classes: VectorStatus, VectorType",
          "vector_unified_utils.py - Utility functions: create_vector_engine, create_vector_coordinator, main",
          "vector_unified_types.py - Type definitions and imports"
        ],
        "estimated_splits": 7,
        "complexity_factors": {
          "classes": 14,
          "functions": 36,
          "imports": 17
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\vector_unified.py",
      "class_name": "VectorAnalyticsEngine",
      "current_loc": 138,
      "limit": 100,
      "excess": 38,
      "severity": "major",
      "line_number": 273,
      "suggestion": {
        "suggested_methods_split": [
          "VectorAnalyticsEngineCore - Core methods: start, stop, add_vector, search_vectors, get_capabilities",
          "VectorAnalyticsEngineUtils - Utility methods: perform_clustering"
        ],
        "properties_to_extract": [
          "results",
          "distance",
          "similarity",
          "start_time",
          "centroids",
          "clusters",
          "processing_time",
          "result",
          "similarity",
          "distance",
          "result",
          "n_clusters",
          "closest_centroid",
          "min_distance",
          "distance",
          "min_distance",
          "closest_centroid"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\vector_unified.py",
      "function_name": "perform_clustering",
      "current_loc": 58,
      "limit": 50,
      "excess": 8,
      "severity": "minor",
      "line_number": 353,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from perform_clustering",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\config_monitor.py",
      "current_loc": 480,
      "limit": 400,
      "excess": 80,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "config_monitor_core.py - Core classes: ConfigHealthMetrics, ConfigAlert",
          "config_monitor_utils.py - Utility functions: get_config_monitor, start_config_monitoring, stop_config_monitoring",
          "config_monitor_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 4,
          "functions": 16,
          "imports": 23
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\config_monitor.py",
      "class_name": "ConfigMonitor",
      "current_loc": 377,
      "limit": 100,
      "excess": 277,
      "severity": "major",
      "line_number": 76,
      "suggestion": {
        "suggested_methods_split": [
          "ConfigMonitorCore - Core methods: start_monitoring, stop_monitoring, take_snapshot, get_health_status, get_alerts",
          "ConfigMonitorUtils - Utility methods: get_performance_report, generate_health_report"
        ],
        "properties_to_extract": [
          "metrics",
          "alerts",
          "system_stats",
          "metrics",
          "alerts",
          "alerts",
          "system_stats",
          "latest",
          "metrics",
          "critical_alerts",
          "high_alerts",
          "alerts",
          "cutoff",
          "recent_snapshots",
          "avg_metrics",
          "total_snapshots",
          "health_status",
          "performance_report",
          "report",
          "status_emoji",
          "metrics",
          "system_stats",
          "alerts_count",
          "critical_count",
          "high_count",
          "config_files",
          "cache_stats",
          "error_rate",
          "status",
          "alerts",
          "alerts",
          "metrics",
          "recent_alerts",
          "snapshot",
          "alerts",
          "cutoff",
          "status",
          "severity_emoji",
          "config",
          "validation_results",
          "status",
          "status"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\config_monitor.py",
      "function_name": "generate_health_report",
      "current_loc": 65,
      "limit": 50,
      "excess": 15,
      "severity": "minor",
      "line_number": 388,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from generate_health_report",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\enhanced_config_system.py",
      "current_loc": 686,
      "limit": 400,
      "excess": 286,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "enhanced_config_system_core.py - Core classes: ConfigValidationError, ConfigMigrationError",
          "enhanced_config_system_utils.py - Utility functions: get_enhanced_config_system, initialize_enhanced_config, __init__",
          "enhanced_config_system_types.py - Type definitions and imports"
        ],
        "estimated_splits": 4,
        "complexity_factors": {
          "classes": 9,
          "functions": 36,
          "imports": 23
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\enhanced_config_system.py",
      "class_name": "ConfigValidator",
      "current_loc": 143,
      "limit": 100,
      "excess": 43,
      "severity": "major",
      "line_number": 154,
      "suggestion": {
        "suggested_methods_split": [
          "ConfigValidatorCore - Core methods: add_schema, validate, validate_file",
          "ConfigValidatorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "unified_schema",
          "coords_schema",
          "schema",
          "errors",
          "errors",
          "config",
          "config"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\enhanced_config_system.py",
      "class_name": "ConfigMigrator",
      "current_loc": 105,
      "limit": 100,
      "excess": 5,
      "severity": "major",
      "line_number": 374,
      "suggestion": {
        "suggested_methods_split": [
          "ConfigMigratorCore - Core methods: migrate, add_migration",
          "ConfigMigratorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "migration_key",
          "migration_func",
          "migration_key",
          "migrated_config",
          "agent_count"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\enhanced_config_system.py",
      "class_name": "EnhancedConfigSystem",
      "current_loc": 186,
      "limit": 100,
      "excess": 86,
      "severity": "major",
      "line_number": 481,
      "suggestion": {
        "suggested_methods_split": [
          "EnhancedConfigSystemCore - Core methods: load_config, save_config, migrate_config, get_cache_stats, start_hot_reload",
          "EnhancedConfigSystemUtils - Utility methods: stop_hot_reload, validate_all_configs"
        ],
        "properties_to_extract": [
          "config_files",
          "cached_config",
          "config_path",
          "config_path",
          "config",
          "migrated_config",
          "config_files",
          "results",
          "config_path",
          "config_path",
          "config_path",
          "config_json",
          "metadata",
          "format",
          "format",
          "config_path",
          "config",
          "config",
          "config_path",
          "config_path"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\enhanced_config_system.py",
      "function_name": "_load_builtin_schemas",
      "current_loc": 90,
      "limit": 50,
      "excess": 40,
      "severity": "minor",
      "line_number": 161,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _load_builtin_schemas",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\enhanced_config_system.py",
      "function_name": "load_config",
      "current_loc": 52,
      "limit": 50,
      "excess": 2,
      "severity": "minor",
      "line_number": 522,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from load_config",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\analytics\\engines\\coordination_analytics_engine.py",
      "class_name": "CoordinationAnalyticsEngine",
      "current_loc": 107,
      "limit": 100,
      "excess": 7,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "CoordinationAnalyticsEngineCore - Core methods: collect_analytics, get_analytics_summary, clear_analytics_history, get_status",
          "CoordinationAnalyticsEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "metrics",
          "insights",
          "result",
          "metrics",
          "insights",
          "total_analytics",
          "recent_analytics"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\analytics\\engines\\metrics_engine.py",
      "class_name": "MetricsEngine",
      "current_loc": 128,
      "limit": 100,
      "excess": 28,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "MetricsEngineCore - Core methods: record_metric, increment_metric, get_metric, get_all_metrics, record_performance",
          "MetricsEngineUtils - Utility methods: record_error, get_performance_summary, get_error_summary, clear_metrics, get_status"
        ],
        "properties_to_extract": [
          "uptime",
          "durations",
          "avg_duration",
          "max_duration",
          "min_duration",
          "error_types"
        ],
        "method_count": 10,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\analytics\\intelligence\\anomaly_detection_engine.py",
      "class_name": "AnomalyDetectionEngine",
      "current_loc": 101,
      "limit": 100,
      "excess": 1,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "AnomalyDetectionEngineCore - Core methods: detect_anomalies, get_anomaly_summary",
          "AnomalyDetectionEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "anomalies",
          "stat_anomalies",
          "perf_anomalies",
          "anomalies",
          "threshold",
          "by_type",
          "by_severity",
          "mean",
          "stdev",
          "anomalies",
          "change",
          "anomaly_type",
          "severity",
          "z_score"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\analytics\\intelligence\\business_intelligence_engine_core.py",
      "class_name": "BusinessIntelligenceEngineCore",
      "current_loc": 147,
      "limit": 100,
      "excess": 47,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "BusinessIntelligenceEngineCoreCore - Core methods: generate_insights, get_insights_history, clear_insights, get_metrics, update_metrics",
          "BusinessIntelligenceEngineCoreUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "insights",
          "numeric_fields",
          "numeric_fields",
          "recommendations",
          "kpis",
          "numeric_fields",
          "insights",
          "recommendations",
          "kpis",
          "insight_result",
          "values",
          "mean_val",
          "median_val",
          "std_val",
          "values",
          "insight",
          "trend",
          "trend_strength",
          "trend",
          "trend_strength"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\analytics\\intelligence\\predictive_modeling_engine.py",
      "class_name": "PredictiveModelingEngine",
      "current_loc": 140,
      "limit": 100,
      "excess": 40,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "PredictiveModelingEngineCore - Core methods: create_model, train_model, predict, get_model_info, get_all_models",
          "PredictiveModelingEngineUtils - Utility methods: delete_model, get_predictions_summary, get_status"
        ],
        "properties_to_extract": [
          "model",
          "prediction",
          "values",
          "base_prediction",
          "noise",
          "total_predictions",
          "recent_predictions"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\analytics\\intelligence\\business_intelligence_engine_operations.py",
      "class_name": "BusinessIntelligenceEngineOperations",
      "current_loc": 190,
      "limit": 100,
      "excess": 90,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "BusinessIntelligenceEngineOperationsCore - Core methods: generate_dashboard_data, export_insights, get_performance_metrics, optimize_performance",
          "BusinessIntelligenceEngineOperationsUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "summary",
          "dates",
          "numeric_fields",
          "key_metrics",
          "numeric_fields",
          "charts",
          "numeric_fields",
          "alerts",
          "numeric_fields",
          "csv_lines",
          "dashboard",
          "values",
          "values",
          "values",
          "chart_data",
          "mean_val",
          "std_val"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\analytics\\intelligence\\pattern_analysis\\anomaly_detector.py",
      "class_name": "AnomalyDetector",
      "current_loc": 148,
      "limit": 100,
      "excess": 48,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "AnomalyDetectorCore - Core methods: detect_anomalies, detect_outliers",
          "AnomalyDetectorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "numeric_values",
          "anomalies",
          "mean_val",
          "stdev_val",
          "anomalies",
          "threshold",
          "sorted_values",
          "n",
          "q1_idx",
          "q3_idx",
          "q1",
          "q3",
          "iqr",
          "lower_bound",
          "upper_bound",
          "outliers",
          "mean_val",
          "stdev_val",
          "outliers",
          "threshold",
          "z_score"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\analytics\\orchestrators\\coordination_analytics_orchestrator.py",
      "class_name": "CoordinationAnalyticsSystem",
      "current_loc": 120,
      "limit": 100,
      "excess": 20,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "CoordinationAnalyticsSystemCore - Core methods: start, stop, process_analytics, get_analytics_report, get_status",
          "CoordinationAnalyticsSystemUtils - Utility methods: reset_stats"
        ],
        "properties_to_extract": [
          "result",
          "recommendations"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\analytics\\processors\\insight_processor.py",
      "class_name": "InsightProcessor",
      "current_loc": 118,
      "limit": 100,
      "excess": 18,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "InsightProcessorCore - Core methods: process_insight, batch_process_insights, get_processing_stats, reset_stats, get_status",
          "InsightProcessorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "total",
          "success_rate",
          "processed_insight",
          "required_fields",
          "confidence",
          "results",
          "result"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\analytics\\processors\\prediction_processor.py",
      "class_name": "PredictionProcessor",
      "current_loc": 115,
      "limit": 100,
      "excess": 15,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "PredictionProcessorCore - Core methods: process_prediction, batch_process_predictions, get_processing_stats, reset_stats, get_status",
          "PredictionProcessorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "total",
          "success_rate",
          "prediction",
          "required_fields",
          "confidence",
          "results",
          "result"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\consolidation\\utility_consolidation\\utility_consolidation_engine.py",
      "class_name": "UtilityConsolidationEngine",
      "current_loc": 128,
      "limit": 100,
      "excess": 28,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "UtilityConsolidationEngineCore - Core methods: consolidate_utilities, get_consolidation_summary, clear_consolidation_history, get_status",
          "UtilityConsolidationEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "consolidated",
          "duplicates",
          "optimized",
          "result",
          "merged",
          "seen",
          "duplicates",
          "seen",
          "optimized",
          "total_consolidations",
          "recent_consolidation",
          "name",
          "name",
          "optimized_utility"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\consolidation\\utility_consolidation\\utility_consolidation_orchestrator.py",
      "class_name": "UtilityConsolidationOrchestrator",
      "current_loc": 127,
      "limit": 100,
      "excess": 27,
      "severity": "major",
      "line_number": 22,
      "suggestion": {
        "suggested_methods_split": [
          "UtilityConsolidationOrchestratorCore - Core methods: run_consolidation_analysis, generate_consolidation_report, execute_consolidation, save_report, get_opportunities_summary",
          "UtilityConsolidationOrchestratorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "analysis_results",
          "report",
          "report",
          "opportunity",
          "primary",
          "consolidated",
          "file_path",
          "cons_type",
          "detailed_opp",
          "consolidated_content",
          "consolidated_path"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\coordination\\swarm\\engines\\performance_monitoring_engine.py",
      "class_name": "PerformanceMonitoringEngine",
      "current_loc": 148,
      "limit": 100,
      "excess": 48,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "PerformanceMonitoringEngineCore - Core methods: update_metrics, get_performance_summary, get_efficiency_trend, reset_metrics, get_metrics_export",
          "PerformanceMonitoringEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "efficiency",
          "base_efficiency",
          "efficiency",
          "total_tasks",
          "success_rate",
          "time_efficiency",
          "time_efficiency"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\coordination\\swarm\\engines\\task_coordination_engine.py",
      "class_name": "TaskCoordinationEngine",
      "current_loc": 169,
      "limit": 100,
      "excess": 69,
      "severity": "major",
      "line_number": 28,
      "suggestion": {
        "suggested_methods_split": [
          "TaskCoordinationEngineCore - Core methods: get_task_summary, get_next_task, clear_completed_tasks",
          "TaskCoordinationEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "result",
          "execution_time",
          "queue",
          "queue"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\coordination\\swarm\\orchestrators\\swarm_coordination_orchestrator.py",
      "class_name": "SwarmCoordinationEnhancer",
      "current_loc": 131,
      "limit": 100,
      "excess": 31,
      "severity": "major",
      "line_number": 57,
      "suggestion": {
        "suggested_methods_split": [
          "SwarmCoordinationEnhancerCore - Core methods: start_coordination, stop_coordination, get_coordination_summary, get_performance_metrics, reset_metrics",
          "SwarmCoordinationEnhancerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "uptime",
          "task_summary",
          "performance_summary",
          "result",
          "uptime"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\data_optimization\\data_optimization_engine.py",
      "class_name": "DataOptimizationEngine",
      "current_loc": 130,
      "limit": 100,
      "excess": 30,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "DataOptimizationEngineCore - Core methods: optimize_data, get_optimization_summary, clear_optimization_history, get_status",
          "DataOptimizationEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "optimized",
          "cached",
          "metrics",
          "result",
          "compressed",
          "cache_key",
          "original_size",
          "optimized_size",
          "compression_ratio",
          "total_optimizations",
          "recent_optimization",
          "oldest_key",
          "compressed_item"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\deployment\\deployment_orchestrator_engine.py",
      "class_name": "DeploymentOrchestratorEngine",
      "current_loc": 123,
      "limit": 100,
      "excess": 23,
      "severity": "major",
      "line_number": 26,
      "suggestion": {
        "suggested_methods_split": [
          "DeploymentOrchestratorEngineCore - Core methods: initialize_system, deploy_to_agent, mass_deploy, get_deployment_status, get_metrics",
          "DeploymentOrchestratorEngineUtils - Utility methods: get_agent_domains, update_config, shutdown"
        ],
        "properties_to_extract": [
          "results",
          "success",
          "successful",
          "agent_id",
          "success"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\deployment\\coordinators\\target_discovery.py",
      "class_name": "TargetDiscoveryEngine",
      "current_loc": 123,
      "limit": 100,
      "excess": 23,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "TargetDiscoveryEngineCore - Core methods: discover_targets, get_discovery_summary, clear_discovery_history, get_status",
          "TargetDiscoveryEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "targets",
          "prioritized",
          "filtered",
          "result",
          "targets",
          "prioritized",
          "filtered",
          "total_discoveries",
          "recent_discovery",
          "priority"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\deployment\\coordinators\\metrics_tracker.py",
      "class_name": "DeploymentMetricsTracker",
      "current_loc": 168,
      "limit": 100,
      "excess": 68,
      "severity": "major",
      "line_number": 25,
      "suggestion": {
        "suggested_methods_split": [
          "DeploymentMetricsTrackerCore - Core methods: update_deployment_metrics, update_agent_status, get_agent_status, get_deployment_metrics, get_metrics_summary",
          "DeploymentMetricsTrackerUtils - Utility methods: get_target_analysis, get_performance_report, reset_metrics, export_metrics"
        ],
        "properties_to_extract": [
          "total_deployments",
          "success_score",
          "efficiency_score",
          "by_type",
          "by_priority",
          "by_status",
          "total_deployments",
          "efficiency_score",
          "recommendations",
          "avg_time_per_deployment",
          "time_efficiency",
          "time_efficiency"
        ],
        "method_count": 9,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\deployment\\engines\\deployment_discovery_engine.py",
      "class_name": "DeploymentDiscoveryEngine",
      "current_loc": 162,
      "limit": 100,
      "excess": 62,
      "severity": "major",
      "line_number": 25,
      "suggestion": {
        "suggested_methods_split": [
          "DeploymentDiscoveryEngineCore - Core methods: discover_targets, prioritize_targets, get_discovered_targets, filter_targets",
          "DeploymentDiscoveryEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "targets",
          "targets",
          "targets",
          "filtered",
          "targets",
          "file_targets",
          "system_targets",
          "optimization_targets",
          "integration_patterns",
          "optimization_areas",
          "priority_order",
          "sorted_targets",
          "filtered",
          "filtered",
          "target",
          "target",
          "target"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\deployment\\engines\\deployment_metrics_engine.py",
      "class_name": "DeploymentMetricsEngine",
      "current_loc": 179,
      "limit": 100,
      "excess": 79,
      "severity": "major",
      "line_number": 25,
      "suggestion": {
        "suggested_methods_split": [
          "DeploymentMetricsEngineCore - Core methods: start_deployment_tracking, update_target_completion, finish_deployment_tracking, get_current_metrics, get_metrics_summary",
          "DeploymentMetricsEngineUtils - Utility methods: get_historical_metrics, analyze_performance_trends"
        ],
        "properties_to_extract": [
          "final_metrics",
          "progress_percentage",
          "recent_metrics",
          "avg_success_rate",
          "avg_throughput",
          "avg_execution_time",
          "completed",
          "progress_percentage"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\dry_eliminator\\engines\\code_analysis_engine.py",
      "class_name": "CodeAnalysisEngine",
      "current_loc": 138,
      "limit": 100,
      "excess": 38,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "CodeAnalysisEngineCore - Core methods: analyze_code, get_analysis_summary, clear_analysis_history, get_status",
          "CodeAnalysisEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "patterns",
          "duplicates",
          "metrics",
          "result",
          "patterns",
          "duplicates",
          "metrics",
          "total_analyses",
          "recent_analysis",
          "seen",
          "name"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\dry_eliminator\\engines\\elimination_strategy_engine.py",
      "class_name": "EliminationStrategyEngine",
      "current_loc": 113,
      "limit": 100,
      "excess": 13,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "EliminationStrategyEngineCore - Core methods: execute_elimination, get_elimination_summary, clear_elimination_history, get_status",
          "EliminationStrategyEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "strategy",
          "result",
          "metrics",
          "elimination_result",
          "result",
          "metrics",
          "total_eliminations",
          "recent_elimination"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\dry_eliminator\\engines\\dry_elimination_engine_orchestrator.py",
      "class_name": "DRYEliminationEngineOrchestrator",
      "current_loc": 171,
      "limit": 100,
      "excess": 71,
      "severity": "major",
      "line_number": 32,
      "suggestion": {
        "suggested_methods_split": [
          "DRYEliminationEngineOrchestratorCore - Core methods: run_full_analysis, get_violations_summary, get_elimination_summary, generate_detailed_report, export_results",
          "DRYEliminationEngineOrchestratorUtils - Utility methods: clear_analysis, get_analysis_status"
        ],
        "properties_to_extract": [
          "analysis_results",
          "import_patterns",
          "method_patterns",
          "constant_patterns",
          "duplicate_blocks",
          "violations",
          "elimination_results",
          "summary",
          "metrics_file",
          "report_file",
          "results_file",
          "strategy",
          "result"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\dry_eliminator\\engines\\dry_elimination_engine_orchestrator.py",
      "function_name": "run_full_analysis",
      "current_loc": 65,
      "limit": 50,
      "excess": 15,
      "severity": "minor",
      "line_number": 54,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from run_full_analysis",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\dry_eliminator\\engines\\file_discovery_engine.py",
      "class_name": "FileDiscoveryEngine",
      "current_loc": 162,
      "limit": 100,
      "excess": 62,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "FileDiscoveryEngineCore - Core methods: discover_python_files, get_file_statistics, get_files_by_size, get_files_by_line_count, get_largest_files",
          "FileDiscoveryEngineUtils - Utility methods: get_files_by_extension, get_files_in_directory, refresh_file_list, get_file_metadata, clear_cache"
        ],
        "properties_to_extract": [
          "python_files",
          "total_size",
          "total_lines",
          "filtered_files",
          "filtered_files",
          "file_sizes",
          "filtered_files",
          "filtered_files",
          "target_dir",
          "metadata",
          "file_size",
          "metadata",
          "line_count",
          "metadata",
          "file_size",
          "content"
        ],
        "method_count": 11,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\dry_eliminator\\engines\\metrics_reporting_engine.py",
      "class_name": "MetricsReportingEngine",
      "current_loc": 230,
      "limit": 100,
      "excess": 130,
      "severity": "major",
      "line_number": 23,
      "suggestion": {
        "suggested_methods_split": [
          "MetricsReportingEngineCore - Core methods: start_analysis, end_analysis, update_file_metrics, update_violation_metrics, update_elimination_metrics",
          "MetricsReportingEngineUtils - Utility methods: generate_summary_report, generate_detailed_report, export_metrics_to_file, get_metrics_dict, reset_metrics"
        ],
        "properties_to_extract": [
          "type_counts",
          "successful_results",
          "failed_results",
          "total_lines_removed",
          "modified_files",
          "type_counts",
          "severity_counts",
          "report",
          "type_counts",
          "severity_counts",
          "duration",
          "success_rate",
          "violations_per_file",
          "lines_per_violation",
          "efficiency"
        ],
        "method_count": 10,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\dry_eliminator\\engines\\metrics_reporting_engine.py",
      "function_name": "generate_detailed_report",
      "current_loc": 70,
      "limit": 50,
      "excess": 20,
      "severity": "minor",
      "line_number": 148,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from generate_detailed_report",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\dry_eliminator\\orchestrators\\elimination_coordinator.py",
      "class_name": "EliminationCoordinator",
      "current_loc": 198,
      "limit": 100,
      "excess": 98,
      "severity": "major",
      "line_number": 28,
      "suggestion": {
        "suggested_methods_split": [
          "EliminationCoordinatorCore - Core methods: eliminate_advanced_dry_violations, analyze_project_violations, eliminate_specific_violations, get_coordinator_status, reset_coordinator_state",
          "EliminationCoordinatorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "metrics",
          "engine_summary",
          "metrics",
          "start_time",
          "python_files",
          "violations",
          "elimination_time",
          "summary",
          "python_files",
          "violations",
          "summary",
          "all_violations",
          "target_violations",
          "elimination_results",
          "elimination_results"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\dry_eliminator\\orchestrators\\results_manager.py",
      "class_name": "ResultsManager",
      "current_loc": 229,
      "limit": 100,
      "excess": 129,
      "severity": "major",
      "line_number": 25,
      "suggestion": {
        "suggested_methods_split": [
          "ResultsManagerCore - Core methods: update_results, generate_summary_report, get_results_status, reset_results, export_results",
          "ResultsManagerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "type_mapping",
          "counter_name",
          "successful_results",
          "total_results",
          "total_consolidations",
          "total_removals",
          "total_errors",
          "parts",
          "total_time"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\emergency_intervention\\unified_emergency\\orchestrator.py",
      "class_name": "EmergencyInterventionOrchestrator",
      "current_loc": 213,
      "limit": 100,
      "excess": 113,
      "severity": "major",
      "line_number": 31,
      "suggestion": {
        "suggested_methods_split": [
          "EmergencyInterventionOrchestratorCore - Core methods: detect_emergency, analyze_emergency, execute_intervention, handle_emergency, register_intervention_handler",
          "EmergencyInterventionOrchestratorUtils - Utility methods: get_emergency_status, get_active_emergencies, get_emergency_history, get_system_metrics, get_protocol_summary"
        ],
        "properties_to_extract": [
          "emergency",
          "analysis",
          "response",
          "emergency",
          "analysis",
          "response",
          "action_enum",
          "emergency",
          "metrics",
          "active_emergencies",
          "action_enums",
          "protocol",
          "response"
        ],
        "method_count": 14,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\emergency_intervention\\unified_emergency\\engine.py",
      "class_name": "EmergencyInterventionEngine",
      "current_loc": 159,
      "limit": 100,
      "excess": 59,
      "severity": "major",
      "line_number": 36,
      "suggestion": {
        "suggested_methods_split": [
          "EmergencyInterventionEngineCore - Core methods: register_protocol, register_handler, detect_emergency, respond_to_emergency, get_active_emergencies",
          "EmergencyInterventionEngineUtils - Utility methods: get_metrics, get_status, clear_emergencies, reset_metrics, clear_resources"
        ],
        "properties_to_extract": [
          "emergency",
          "start_time",
          "matching_protocols",
          "protocol",
          "interventions",
          "response_time",
          "response",
          "successful_interventions",
          "resolution_threshold",
          "status"
        ],
        "method_count": 10,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\emergency_intervention\\unified_emergency\\engines\\action_executor.py",
      "class_name": "ActionExecutor",
      "current_loc": 146,
      "limit": 100,
      "excess": 46,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "ActionExecutorCore - Core methods: register_handler, execute_action, execute_multiple_actions, get_available_actions, get_registered_handlers",
          "ActionExecutorUtils - Utility methods: clear_handlers, has_handler"
        ],
        "properties_to_extract": [
          "start_time",
          "execution_time",
          "results",
          "result",
          "handler",
          "result",
          "success",
          "error_message",
          "result",
          "success",
          "error_message",
          "result",
          "success",
          "error_message"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\emergency_intervention\\unified_emergency\\handlers\\protocol_executor.py",
      "class_name": "ProtocolExecutor",
      "current_loc": 218,
      "limit": 100,
      "excess": 118,
      "severity": "major",
      "line_number": 18,
      "suggestion": {
        "suggested_methods_split": [
          "ProtocolExecutorCore - Core methods: execute_protocol, get_execution_history, get_active_executions, cancel_execution",
          "ProtocolExecutorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "execution_id",
          "execution_record",
          "success_count",
          "total_count",
          "execution_record",
          "action_result"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\emergency_intervention\\unified_emergency\\handlers\\protocol_executor.py",
      "function_name": "execute_protocol",
      "current_loc": 81,
      "limit": 50,
      "excess": 31,
      "severity": "minor",
      "line_number": 26,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from execute_protocol",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\emergency_intervention\\unified_emergency\\handlers\\protocol_initializer.py",
      "class_name": "ProtocolInitializer",
      "current_loc": 200,
      "limit": 100,
      "excess": 100,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "ProtocolInitializerCore - Core methods: initialize_default_protocols, get_initialized_protocol_count, reinitialize_protocols",
          "ProtocolInitializerUtils - Utility methods: "
        ],
        "properties_to_extract": [],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\emergency_intervention\\unified_emergency\\handlers\\protocol_registry.py",
      "class_name": "ProtocolRegistry",
      "current_loc": 127,
      "limit": 100,
      "excess": 27,
      "severity": "major",
      "line_number": 25,
      "suggestion": {
        "suggested_methods_split": [
          "ProtocolRegistryCore - Core methods: register_protocol, get_protocol, list_protocols, remove_protocol, get_protocol_count",
          "ProtocolRegistryUtils - Utility methods: clear_protocols, export_protocols, import_protocols"
        ],
        "properties_to_extract": [
          "severity_levels",
          "protocol_id",
          "protocol_id",
          "compatible_protocols",
          "protocols",
          "protocol_id",
          "imported_count",
          "protocols",
          "protocol"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\emergency_intervention\\unified_emergency\\orchestrators\\emergency_logger.py",
      "class_name": "EmergencyLogger",
      "current_loc": 148,
      "limit": 100,
      "excess": 48,
      "severity": "major",
      "line_number": 18,
      "suggestion": {
        "suggested_methods_split": [
          "EmergencyLoggerCore - Core methods: log_emergency_event, get_emergency_history, get_all_emergency_history, get_system_events, get_health_recommendations",
          "EmergencyLoggerUtils - Utility methods: calculate_system_health, get_emergency_statistics, export_emergency_data, clear_emergency_history, get_logger_status"
        ],
        "properties_to_extract": [
          "event",
          "events",
          "recommendations",
          "health_score",
          "health_status",
          "total_emergencies",
          "total_events",
          "event_types",
          "events",
          "event_type"
        ],
        "method_count": 10,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\emergency_intervention\\unified_emergency\\orchestrators\\emergency_analyzer.py",
      "class_name": "EmergencyAnalyzer",
      "current_loc": 196,
      "limit": 100,
      "excess": 96,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "EmergencyAnalyzerCore - Core methods: analyze_emergency, get_analysis_history, get_analysis_metrics, clear_analysis_history, export_analysis_data",
          "EmergencyAnalyzerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "severity_scores",
          "base_score",
          "type_multipliers",
          "multiplier",
          "risk_score",
          "context",
          "downtime_estimates",
          "recommendations",
          "severity_scores",
          "type_scores",
          "severity_score",
          "type_score",
          "total_analyses",
          "critical_count",
          "high_count",
          "analysis",
          "risk_level",
          "risk_level",
          "risk_level",
          "risk_level"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\emergency_intervention\\unified_emergency\\orchestrators\\emergency_orchestrator.py",
      "class_name": "EmergencyInterventionOrchestrator",
      "current_loc": 213,
      "limit": 100,
      "excess": 113,
      "severity": "major",
      "line_number": 31,
      "suggestion": {
        "suggested_methods_split": [
          "EmergencyInterventionOrchestratorCore - Core methods: detect_emergency, analyze_emergency, execute_intervention, handle_emergency, register_intervention_handler",
          "EmergencyInterventionOrchestratorUtils - Utility methods: get_emergency_status, get_active_emergencies, get_emergency_history, get_system_metrics, get_protocol_summary"
        ],
        "properties_to_extract": [
          "emergency",
          "analysis",
          "response",
          "emergency",
          "analysis",
          "response",
          "action_enum",
          "emergency",
          "metrics",
          "active_emergencies",
          "action_enums",
          "protocol",
          "response"
        ],
        "method_count": 14,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\communication_core_engine.py",
      "class_name": "CommunicationCoreEngine",
      "current_loc": 124,
      "limit": 100,
      "excess": 24,
      "severity": "major",
      "line_number": 8,
      "suggestion": {
        "suggested_methods_split": [
          "CommunicationCoreEngineCore - Core methods: initialize, execute, cleanup, get_status",
          "CommunicationCoreEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "operation",
          "channel_id",
          "message",
          "recipient",
          "message_data",
          "channel_id",
          "message",
          "channels",
          "broadcast_results",
          "last_message",
          "message_data"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\configuration_core_engine.py",
      "class_name": "ConfigurationCoreEngine",
      "current_loc": 126,
      "limit": 100,
      "excess": 26,
      "severity": "major",
      "line_number": 8,
      "suggestion": {
        "suggested_methods_split": [
          "ConfigurationCoreEngineCore - Core methods: initialize, execute, cleanup, get_status",
          "ConfigurationCoreEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "operation",
          "config_id",
          "source",
          "config_id",
          "config_data",
          "destination",
          "save_result",
          "setting_key",
          "config_id",
          "setting_value",
          "config_data",
          "config_data"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\coordination_core_engine.py",
      "class_name": "CoordinationCoreEngine",
      "current_loc": 136,
      "limit": 100,
      "excess": 36,
      "severity": "major",
      "line_number": 8,
      "suggestion": {
        "suggested_methods_split": [
          "CoordinationCoreEngineCore - Core methods: initialize, execute, coordinate, schedule, monitor",
          "CoordinationCoreEngineUtils - Utility methods: cleanup, get_status"
        ],
        "properties_to_extract": [
          "operation",
          "coordination_id",
          "results",
          "schedule_id",
          "tasks",
          "timing",
          "monitor_id",
          "statuses",
          "task_id",
          "task_type",
          "task_result",
          "status"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\integration_core_engine.py",
      "class_name": "IntegrationCoreEngine",
      "current_loc": 138,
      "limit": 100,
      "excess": 38,
      "severity": "major",
      "line_number": 8,
      "suggestion": {
        "suggested_methods_split": [
          "IntegrationCoreEngineCore - Core methods: initialize, execute, connect, sync, transform",
          "IntegrationCoreEngineUtils - Utility methods: cleanup, get_status"
        ],
        "properties_to_extract": [
          "operation",
          "connection_id",
          "connection_type",
          "endpoint",
          "connection_id",
          "sync_data",
          "sync_result",
          "transform_id",
          "input_data",
          "transform_type",
          "transformed",
          "transformed",
          "transformed"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\ml_core_engine.py",
      "class_name": "MLCoreEngine",
      "current_loc": 121,
      "limit": 100,
      "excess": 21,
      "severity": "major",
      "line_number": 8,
      "suggestion": {
        "suggested_methods_split": [
          "MLCoreEngineCore - Core methods: initialize, execute, train_model, predict, optimize",
          "MLCoreEngineUtils - Utility methods: cleanup, get_status"
        ],
        "properties_to_extract": [
          "operation",
          "model_id",
          "training_data",
          "model_id",
          "features",
          "prediction",
          "model_id",
          "optimization_params"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\monitoring_core_engine.py",
      "class_name": "MonitoringCoreEngine",
      "current_loc": 124,
      "limit": 100,
      "excess": 24,
      "severity": "major",
      "line_number": 8,
      "suggestion": {
        "suggested_methods_split": [
          "MonitoringCoreEngineCore - Core methods: initialize, execute, cleanup, get_status",
          "MonitoringCoreEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "operation",
          "metric_name",
          "metric_value",
          "metric_type",
          "metric_data",
          "component",
          "health_status",
          "alert_id",
          "alert_type",
          "message",
          "severity",
          "alert_data"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\orchestration_core_engine.py",
      "class_name": "OrchestrationCoreEngine",
      "current_loc": 126,
      "limit": 100,
      "excess": 26,
      "severity": "major",
      "line_number": 8,
      "suggestion": {
        "suggested_methods_split": [
          "OrchestrationCoreEngineCore - Core methods: initialize, execute, cleanup, get_status",
          "OrchestrationCoreEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "operation",
          "orchestration_id",
          "operations",
          "orchestration_result",
          "workflow_id",
          "steps",
          "workflow_result",
          "coordination_id",
          "components",
          "coordination_result"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\processing_core_engine.py",
      "class_name": "ProcessingCoreEngine",
      "current_loc": 127,
      "limit": 100,
      "excess": 27,
      "severity": "major",
      "line_number": 8,
      "suggestion": {
        "suggested_methods_split": [
          "ProcessingCoreEngineCore - Core methods: initialize, execute, cleanup, get_status",
          "ProcessingCoreEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "operation",
          "processor_id",
          "data",
          "process_type",
          "process_result",
          "batch_id",
          "items",
          "processor_type",
          "batch_result",
          "job_id",
          "job_type",
          "priority",
          "job"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\storage_core_engine.py",
      "class_name": "StorageCoreEngine",
      "current_loc": 120,
      "limit": 100,
      "excess": 20,
      "severity": "major",
      "line_number": 8,
      "suggestion": {
        "suggested_methods_split": [
          "StorageCoreEngineCore - Core methods: initialize, execute, cleanup, get_status",
          "StorageCoreEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "operation",
          "store_id",
          "data",
          "storage_type",
          "store_result",
          "store_id",
          "data",
          "cache_key",
          "data",
          "ttl",
          "cache_entry"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\utility_core_engine.py",
      "class_name": "UtilityCoreEngine",
      "current_loc": 140,
      "limit": 100,
      "excess": 40,
      "severity": "major",
      "line_number": 8,
      "suggestion": {
        "suggested_methods_split": [
          "UtilityCoreEngineCore - Core methods: initialize, execute, process, validate, transform",
          "UtilityCoreEngineUtils - Utility methods: cleanup, get_status"
        ],
        "properties_to_extract": [
          "operation",
          "processor_id",
          "input_data",
          "process_type",
          "validator_id",
          "input_data",
          "validation_rules",
          "validation_result",
          "transformer_id",
          "input_data",
          "transform_type",
          "processed",
          "transformed",
          "processed",
          "transformed",
          "processed",
          "processed",
          "transformed",
          "transformed"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\validation_core_engine.py",
      "class_name": "ValidationCoreEngine",
      "current_loc": 138,
      "limit": 100,
      "excess": 38,
      "severity": "major",
      "line_number": 8,
      "suggestion": {
        "suggested_methods_split": [
          "ValidationCoreEngineCore - Core methods: initialize, execute, cleanup, get_status",
          "ValidationCoreEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "operation",
          "data",
          "rules",
          "validation_result",
          "rule_id",
          "rule_definition",
          "data",
          "standard",
          "compliance_result"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\analysis_core_engine.py",
      "class_name": "AnalysisCoreEngine",
      "current_loc": 153,
      "limit": 100,
      "excess": 53,
      "severity": "major",
      "line_number": 8,
      "suggestion": {
        "suggested_methods_split": [
          "AnalysisCoreEngineCore - Core methods: initialize, execute, analyze, extract_patterns, detect_violations",
          "AnalysisCoreEngineUtils - Utility methods: cleanup, get_status"
        ],
        "properties_to_extract": [
          "operation",
          "content",
          "analysis_type",
          "analysis_result",
          "content",
          "pattern_type",
          "patterns",
          "content",
          "violation_type",
          "violations"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\data_core_engine.py",
      "class_name": "DataCoreEngine",
      "current_loc": 110,
      "limit": 100,
      "excess": 10,
      "severity": "major",
      "line_number": 8,
      "suggestion": {
        "suggested_methods_split": [
          "DataCoreEngineCore - Core methods: initialize, execute, cleanup, get_status",
          "DataCoreEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "operation",
          "dataset_id",
          "data",
          "dataset_id",
          "query_id",
          "query",
          "dataset_id",
          "result"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\performance_core_engine.py",
      "class_name": "PerformanceCoreEngine",
      "current_loc": 133,
      "limit": 100,
      "excess": 33,
      "severity": "major",
      "line_number": 8,
      "suggestion": {
        "suggested_methods_split": [
          "PerformanceCoreEngineCore - Core methods: initialize, execute, cleanup, get_status",
          "PerformanceCoreEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "operation",
          "benchmark_id",
          "test_data",
          "benchmark_result",
          "optimization_id",
          "target",
          "optimization_type",
          "optimization_result",
          "profile_id",
          "component",
          "profile_result"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\security_core_engine.py",
      "class_name": "SecurityCoreEngine",
      "current_loc": 117,
      "limit": 100,
      "excess": 17,
      "severity": "major",
      "line_number": 8,
      "suggestion": {
        "suggested_methods_split": [
          "SecurityCoreEngineCore - Core methods: initialize, execute, cleanup, get_status",
          "SecurityCoreEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "operation",
          "user_id",
          "credentials",
          "auth_result",
          "user_id",
          "action",
          "resource",
          "authz_result",
          "event",
          "user_id",
          "details",
          "audit_entry"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\engines\\engine_monitoring.py",
      "function_name": "perform_health_check",
      "current_loc": 69,
      "limit": 50,
      "excess": 19,
      "severity": "minor",
      "line_number": 116,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from perform_health_check",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\engines\\engine_state.py",
      "class_name": "EngineStateManager",
      "current_loc": 112,
      "limit": 100,
      "excess": 12,
      "severity": "major",
      "line_number": 28,
      "suggestion": {
        "suggested_methods_split": [
          "EngineStateManagerCore - Core methods: transition_to, can_transition_to, get_valid_transitions, is_stable_state, is_error_state",
          "EngineStateManagerUtils - Utility methods: record_error, reset_error_state, get_state_summary"
        ],
        "properties_to_extract": [
          "VALID_TRANSITIONS",
          "stable_states",
          "old_state"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\enhanced_integration\\coordinators\\enhanced_integration_coordinator.py",
      "class_name": "EnhancedIntegrationCoordinator",
      "current_loc": 145,
      "limit": 100,
      "excess": 45,
      "severity": "major",
      "line_number": 43,
      "suggestion": {
        "suggested_methods_split": [
          "EnhancedIntegrationCoordinatorCore - Core methods: start_coordination, stop_coordination, get_integration_summary",
          "EnhancedIntegrationCoordinatorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "results",
          "uptime",
          "task_summary",
          "performance_summary",
          "task",
          "result",
          "uptime"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\enhanced_integration\\engines\\integration_coordination_engine.py",
      "class_name": "IntegrationCoordinationEngine",
      "current_loc": 242,
      "limit": 100,
      "excess": 142,
      "severity": "major",
      "line_number": 28,
      "suggestion": {
        "suggested_methods_split": [
          "IntegrationCoordinationEngineCore - Core methods: get_coordination_status, cancel_task, cleanup",
          "IntegrationCoordinationEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "coroutines",
          "results",
          "successful",
          "successful",
          "total_time",
          "sorted_tasks",
          "high_priority_tasks",
          "normal_tasks",
          "results",
          "success",
          "task",
          "results",
          "start_time",
          "success",
          "end_time",
          "execution_time",
          "high_priority_result",
          "normal_result",
          "results",
          "results",
          "results"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\enhanced_integration\\engines\\integration_performance_engine.py",
      "class_name": "IntegrationPerformanceEngine",
      "current_loc": 120,
      "limit": 100,
      "excess": 20,
      "severity": "major",
      "line_number": 26,
      "suggestion": {
        "suggested_methods_split": [
          "IntegrationPerformanceEngineCore - Core methods: start_monitoring, stop_monitoring, update_metrics, generate_performance_report, get_performance_summary",
          "IntegrationPerformanceEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "alpha",
          "total_ops",
          "success_factor",
          "latency_factor",
          "throughput_factor",
          "efficiency",
          "report"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\enhanced_integration\\engines\\integration_task_engine.py",
      "class_name": "IntegrationTaskEngine",
      "current_loc": 110,
      "limit": 100,
      "excess": 10,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "IntegrationTaskEngineCore - Core methods: add_task, get_next_task, get_task_summary",
          "IntegrationTaskEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "execution_time",
          "result",
          "execution_time",
          "result",
          "result",
          "result"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\enhanced_integration\\engines\\integration_optimization_engine.py",
      "class_name": "IntegrationOptimizationEngine",
      "current_loc": 176,
      "limit": 100,
      "excess": 76,
      "severity": "major",
      "line_number": 28,
      "suggestion": {
        "suggested_methods_split": [
          "IntegrationOptimizationEngineCore - Core methods: get_optimization_metrics, clear_optimization_cache, get_active_optimizations, cancel_optimization",
          "IntegrationOptimizationEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "cache_size",
          "success",
          "total_optimizations",
          "active_count",
          "total_time",
          "completed_count",
          "avg_execution_time",
          "task"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\enhanced_integration\\orchestrators\\coordination_engine_core.py",
      "class_name": "CoordinationEngineCore",
      "current_loc": 174,
      "limit": 100,
      "excess": 74,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "CoordinationEngineCoreCore - Core methods: determine_coordination_strategy, allocate_resources, release_resources, get_resource_status, optimize_coordination",
          "CoordinationEngineCoreUtils - Utility methods: get_coordination_status"
        ],
        "properties_to_extract": [
          "total_allocated",
          "used_cpu",
          "used_memory",
          "resource_status",
          "used_cores",
          "used_memory",
          "used_connections",
          "optimization_reason",
          "optimization_reason",
          "optimization_reason"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\enhanced_integration\\orchestrators\\coordination_engine_operations.py",
      "class_name": "CoordinationEngineOperations",
      "current_loc": 259,
      "limit": 100,
      "excess": 159,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "CoordinationEngineOperationsCore - Core methods: schedule_task, determine_coordination_strategy, allocate_resources, monitor_task_progress, get_task_queue_status",
          "CoordinationEngineOperationsUtils - Utility methods: optimize_task_scheduling, get_performance_metrics, get_resource_status"
        ],
        "properties_to_extract": [
          "strategy",
          "allocation_success",
          "schedule",
          "task_info",
          "allocated_time",
          "scheduled_tasks",
          "running_tasks",
          "completed_tasks",
          "queue_status",
          "total_tasks",
          "now",
          "allocation_times",
          "avg_allocation_time",
          "total_allocated",
          "used_cpu",
          "used_memory",
          "used_cores",
          "used_memory",
          "optimization",
          "optimization",
          "optimization"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\enhanced_integration\\orchestrators\\task_processor.py",
      "class_name": "IntegrationTaskProcessor",
      "current_loc": 191,
      "limit": 100,
      "excess": 91,
      "severity": "major",
      "line_number": 23,
      "suggestion": {
        "suggested_methods_split": [
          "IntegrationTaskProcessorCore - Core methods: submit_integration_task, get_task_queue_size, get_active_tasks_count, get_completed_tasks_count, get_task_statistics",
          "IntegrationTaskProcessorUtils - Utility methods: clear_completed_tasks, get_recent_tasks"
        ],
        "properties_to_extract": [
          "results",
          "start_time",
          "total_tasks",
          "successful_tasks",
          "result",
          "execution_time",
          "task_result",
          "task",
          "result"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\error_handling\\error_analysis_engine.py",
      "class_name": "ErrorAnalysisEngine",
      "current_loc": 210,
      "limit": 100,
      "excess": 110,
      "severity": "major",
      "line_number": 23,
      "suggestion": {
        "suggested_methods_split": [
          "ErrorAnalysisEngineCore - Core methods: create_error_summary, is_recoverable_error, get_error_severity, analyze_error_patterns, calculate_error_trends",
          "ErrorAnalysisEngineUtils - Utility methods: get_recovery_recommendations, assess_system_health"
        ],
        "properties_to_extract": [
          "error_types",
          "operations",
          "summary",
          "error_counts",
          "patterns",
          "recommendations",
          "total_errors",
          "critical_issues",
          "recent_errors",
          "older_errors",
          "recommendations",
          "severity",
          "total_errors",
          "critical_errors",
          "concerns",
          "error_type",
          "operation",
          "error_type",
          "trend",
          "recommendations",
          "health_score",
          "status",
          "trend",
          "trend",
          "recommendations",
          "health_score",
          "status",
          "recommendations",
          "health_score",
          "status",
          "health_score",
          "status",
          "recommendations",
          "recommendations",
          "recommendations"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\error_handling\\error_handling_orchestrator.py",
      "class_name": "UnifiedErrorHandlingOrchestrator",
      "current_loc": 176,
      "limit": 100,
      "excess": 76,
      "severity": "major",
      "line_number": 23,
      "suggestion": {
        "suggested_methods_split": [
          "UnifiedErrorHandlingOrchestratorCore - Core methods: retry_operation, safe_execute, validate_and_execute, handle_operation_error, handle_file_operation_error",
          "UnifiedErrorHandlingOrchestratorUtils - Utility methods: handle_network_operation_error, handle_database_operation_error, handle_validation_error, handle_configuration_error, handle_agent_operation_error"
        ],
        "properties_to_extract": [
          "config"
        ],
        "method_count": 17,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\error_handling\\retry_safety_engine.py",
      "class_name": "RetrySafetyEngine",
      "current_loc": 208,
      "limit": 100,
      "excess": 108,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "RetrySafetyEngineCore - Core methods: retry_operation, safe_execute, validate_and_execute, execute_with_timeout, circuit_breaker_execute",
          "RetrySafetyEngineUtils - Utility methods: timeout_handler"
        ],
        "properties_to_extract": [
          "effective_logger",
          "last_exception",
          "effective_logger",
          "effective_logger",
          "config",
          "result",
          "effective_logger",
          "effective_logger",
          "last_exception",
          "delay"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\error_handling\\retry_safety_engine.py",
      "function_name": "retry_operation",
      "current_loc": 52,
      "limit": 50,
      "excess": 2,
      "severity": "minor",
      "line_number": 37,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from retry_operation",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\error_handling\\coordination_error_handler.py",
      "class_name": "CoordinationErrorHandler",
      "current_loc": 106,
      "limit": 100,
      "excess": 6,
      "severity": "major",
      "line_number": 194,
      "suggestion": {
        "suggested_methods_split": [
          "CoordinationErrorHandlerCore - Core methods: execute_with_error_handling, register_circuit_breaker, register_retry_mechanism, get_error_report, add_recovery_strategy",
          "CoordinationErrorHandlerUtils - Utility methods: get_component_status, cleanup_stale_data, reset_component, restart_coordination_service, reset_coordination_config"
        ],
        "properties_to_extract": [
          "restart_strategy",
          "config_strategy",
          "config",
          "config"
        ],
        "method_count": 10,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\error_handling\\advanced_error_handler.py",
      "current_loc": 403,
      "limit": 400,
      "excess": 3,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "advanced_error_handler_core.py - Core classes: DegradationLevel, ResilienceConfig",
          "advanced_error_handler_utils.py - Utility functions: get_advanced_error_handler, create_advanced_error_handler, get_all_error_handlers",
          "advanced_error_handler_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 5,
          "functions": 19,
          "imports": 23
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\error_handling\\advanced_error_handler.py",
      "class_name": "AdvancedErrorHandler",
      "current_loc": 217,
      "limit": 100,
      "excess": 117,
      "severity": "major",
      "line_number": 152,
      "suggestion": {
        "suggested_methods_split": [
          "AdvancedErrorHandlerCore - Core methods: execute_with_resilience, get_resilience_status, reset",
          "AdvancedErrorHandlerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "non_retryable",
          "cb_config",
          "retry_config",
          "recovery_config",
          "result",
          "result"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\error_handling\\advanced_error_handler.py",
      "function_name": "execute_with_resilience",
      "current_loc": 51,
      "limit": 50,
      "excess": 1,
      "severity": "minor",
      "line_number": 196,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from execute_with_resilience",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\error_handling\\automated_recovery.py",
      "current_loc": 487,
      "limit": 400,
      "excess": 87,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "automated_recovery_core.py - Core classes: RecoveryStrategy, RecoveryState",
          "automated_recovery_utils.py - Utility functions: get_recovery_manager, create_recovery_manager, get_all_recovery_managers",
          "automated_recovery_types.py - Type definitions and imports"
        ],
        "estimated_splits": 3,
        "complexity_factors": {
          "classes": 7,
          "functions": 25,
          "imports": 15
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\error_handling\\automated_recovery.py",
      "class_name": "AutomatedRecoveryManager",
      "current_loc": 269,
      "limit": 100,
      "excess": 169,
      "severity": "major",
      "line_number": 184,
      "suggestion": {
        "suggested_methods_split": [
          "AutomatedRecoveryManagerCore - Core methods: register_component, initiate_recovery, recover_and_retry, get_recovery_status, reset",
          "AutomatedRecoveryManagerUtils - Utility methods: monitor_worker"
        ],
        "properties_to_extract": [
          "thread",
          "start_time",
          "component_strategies",
          "component",
          "recovery_success",
          "strategies",
          "success",
          "health_status",
          "unhealthy_components",
          "recovery_time"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\error_handling\\automated_recovery.py",
      "function_name": "initiate_recovery",
      "current_loc": 85,
      "limit": 50,
      "excess": 35,
      "severity": "minor",
      "line_number": 277,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from initiate_recovery",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\file_locking\\file_locking_engine_operations.py",
      "class_name": "FileLockEngineOperations",
      "current_loc": 113,
      "limit": 100,
      "excess": 13,
      "severity": "major",
      "line_number": 17,
      "suggestion": {
        "suggested_methods_split": [
          "FileLockEngineOperationsCore - Core methods: acquire_lock, release_lock, cleanup_stale_locks",
          "FileLockEngineOperationsUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "start_time",
          "cleaned_count",
          "lock_file",
          "success",
          "lock_file",
          "execution_time",
          "lock_files",
          "success",
          "success",
          "execution_time",
          "execution_time",
          "execution_time",
          "execution_time",
          "lock_file"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\file_locking\\file_locking_manager.py",
      "class_name": "FileLockManager",
      "current_loc": 121,
      "limit": 100,
      "excess": 21,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "FileLockManagerCore - Core methods: create_file_lock, acquire_lock, release_lock, is_locked, cleanup_stale_locks",
          "FileLockManagerUtils - Utility methods: get_active_locks, get_lock_info, force_release_lock, get_metrics, reset_metrics"
        ],
        "properties_to_extract": [
          "lock_result",
          "lock_file",
          "lock_info",
          "lock_file",
          "lock_file",
          "active_locks",
          "metrics",
          "acquire_result",
          "lock_key",
          "lock_info"
        ],
        "method_count": 11,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\file_locking\\operations\\lock_queries.py",
      "class_name": "LockQueries",
      "current_loc": 107,
      "limit": 100,
      "excess": 7,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "LockQueriesCore - Core methods: get_locks_by_process, get_locks_by_thread, get_locks_by_owner, get_locks_by_type, get_locks_by_duration",
          "LockQueriesUtils - Utility methods: get_locks_by_metadata, get_lock_statistics, find_conflicting_locks, get_lock_health_status"
        ],
        "properties_to_extract": [
          "active_locks",
          "active_locks",
          "active_locks",
          "active_locks",
          "active_locks",
          "filtered_locks",
          "active_locks",
          "active_locks",
          "locks_by_type",
          "locks_by_owner",
          "total_duration",
          "active_locks",
          "conflicting_locks",
          "metrics",
          "duration",
          "lock_type",
          "owner"
        ],
        "method_count": 9,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\import_system\\import_core.py",
      "class_name": "ImportSystemCore",
      "current_loc": 132,
      "limit": 100,
      "excess": 32,
      "severity": "major",
      "line_number": 29,
      "suggestion": {
        "suggested_methods_split": [
          "ImportSystemCoreCore - Core methods: os, sys, json, logging, threading",
          "ImportSystemCoreUtils - Utility methods: time, re, datetime, Path, Any"
        ],
        "properties_to_extract": [],
        "method_count": 21,
        "estimated_classes": 2
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\import_system\\import_utilities.py",
      "class_name": "ImportUtilities",
      "current_loc": 106,
      "limit": 100,
      "excess": 6,
      "severity": "major",
      "line_number": 17,
      "suggestion": {
        "suggested_methods_split": [
          "ImportUtilitiesCore - Core methods: get_module_path, is_module_available, get_import_path, resolve_relative_import, get_package_root",
          "ImportUtilitiesUtils - Utility methods: list_module_contents, get_module_docstring, validate_import_syntax, get_import_dependencies, create_import_alias"
        ],
        "properties_to_extract": [
          "module",
          "module",
          "path",
          "base_path",
          "target_path",
          "module",
          "module",
          "module",
          "module",
          "path"
        ],
        "method_count": 11,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\import_system\\import_registry.py",
      "class_name": "ImportRegistry",
      "current_loc": 107,
      "limit": 100,
      "excess": 7,
      "severity": "major",
      "line_number": 18,
      "suggestion": {
        "suggested_methods_split": [
          "ImportRegistryCore - Core methods: register_import, get_import, has_import, remove_import, clear_cache",
          "ImportRegistryUtils - Utility methods: get_cache_stats, mark_failed_import, is_failed_import, clear_failed_imports, get_import_history"
        ],
        "properties_to_extract": [
          "patterns",
          "valid_patterns",
          "current_time",
          "cleaned_count",
          "cleaned_count"
        ],
        "method_count": 13,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\integration\\analytics\\analytics_engine.py",
      "class_name": "VectorIntegrationAnalyticsEngine",
      "current_loc": 136,
      "limit": 100,
      "excess": 36,
      "severity": "major",
      "line_number": 31,
      "suggestion": {
        "suggested_methods_split": [
          "VectorIntegrationAnalyticsEngineCore - Core methods: analyze_performance_data, get_trend_analysis, get_performance_forecast, get_optimization_recommendations, get_analytics_summary",
          "VectorIntegrationAnalyticsEngineUtils - Utility methods: clear_all_caches, get_cached_trends, get_cached_forecasts, get_latest_recommendations, validate_forecast_accuracy"
        ],
        "properties_to_extract": [
          "trends",
          "trends",
          "forecasts",
          "trend_objects",
          "recommendations",
          "analysis_result",
          "trend"
        ],
        "method_count": 12,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\integration\\analytics\\forecast_generator.py",
      "class_name": "ForecastGenerator",
      "current_loc": 203,
      "limit": 100,
      "excess": 103,
      "severity": "major",
      "line_number": 26,
      "suggestion": {
        "suggested_methods_split": [
          "ForecastGeneratorCore - Core methods: generate_forecast, generate_multi_metric_forecast, validate_forecast_accuracy, get_forecast_summary, get_cached_forecasts",
          "ForecastGeneratorUtils - Utility methods: clear_forecast_cache"
        ],
        "properties_to_extract": [
          "recent_window",
          "recent_values",
          "x_values",
          "mean_x",
          "mean_y",
          "numerator",
          "denominator",
          "slope",
          "intercept",
          "forecast_hours",
          "forecast_values",
          "residuals",
          "residual_std",
          "margin_of_error",
          "last_forecast",
          "confidence_interval",
          "ss_res",
          "ss_tot",
          "r_squared",
          "model_accuracy",
          "forecasts",
          "metrics_by_name",
          "predicted_values",
          "min_length",
          "errors",
          "mape",
          "accuracy",
          "summary",
          "accuracies",
          "metric_values",
          "forecast_id",
          "forecast_horizon",
          "forecast",
          "last_value",
          "forecast_values",
          "confidence_interval",
          "model_accuracy",
          "last_value",
          "forecast_values",
          "confidence_interval",
          "model_accuracy",
          "x",
          "predicted_value",
          "forecast",
          "metric_summary",
          "error"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\integration\\analytics\\forecast_generator.py",
      "function_name": "_generate_simple_forecast",
      "current_loc": 67,
      "limit": 50,
      "excess": 17,
      "severity": "minor",
      "line_number": 79,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _generate_simple_forecast",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\integration\\analytics\\recommendation_engine_analysis.py",
      "class_name": "RecommendationEngineAnalysis",
      "current_loc": 128,
      "limit": 100,
      "excess": 28,
      "severity": "major",
      "line_number": 23,
      "suggestion": {
        "suggested_methods_split": [
          "RecommendationEngineAnalysisCore - Core methods: ",
          "RecommendationEngineAnalysisUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "recommendations",
          "recommendations",
          "summaries",
          "metric_summaries",
          "values",
          "avg_value",
          "metric_groups",
          "mean_val",
          "variance",
          "std_dev",
          "cv",
          "metric_recs",
          "rec",
          "rec",
          "rec",
          "name"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\integration\\analytics\\recommendation_engine_system.py",
      "class_name": "RecommendationEngineSystem",
      "current_loc": 166,
      "limit": 100,
      "excess": 66,
      "severity": "major",
      "line_number": 23,
      "suggestion": {
        "suggested_methods_split": [
          "RecommendationEngineSystemCore - Core methods: ",
          "RecommendationEngineSystemUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "recommendations",
          "summaries",
          "metric_summaries",
          "resource_rec",
          "perf_rec",
          "scale_rec",
          "metric_groups",
          "memory_metrics",
          "cpu_metrics",
          "response_metrics",
          "throughput_metrics",
          "name",
          "avg_value",
          "avg_value",
          "avg_value",
          "avg_value"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\integration_coordinators\\unified_integration\\monitor_engine.py",
      "class_name": "IntegrationMonitorEngine",
      "current_loc": 158,
      "limit": 100,
      "excess": 58,
      "severity": "major",
      "line_number": 22,
      "suggestion": {
        "suggested_methods_split": [
          "IntegrationMonitorEngineCore - Core methods: start_monitoring, stop_monitoring, add_callback, remove_callback, get_metrics",
          "IntegrationMonitorEngineUtils - Utility methods: get_all_metrics, get_stats, check_integration_health, update_metrics"
        ],
        "properties_to_extract": [
          "metrics"
        ],
        "method_count": 9,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\integration_coordinators\\unified_integration\\monitor_engine.py",
      "function_name": "check_integration_health",
      "current_loc": 51,
      "limit": 50,
      "excess": 1,
      "severity": "minor",
      "line_number": 74,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from check_integration_health",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\integration_coordinators\\unified_integration\\coordinators\\config_manager.py",
      "class_name": "ConfigManager",
      "current_loc": 155,
      "limit": 100,
      "excess": 55,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "ConfigManagerCore - Core methods: export_configuration, validate_configuration, update_configuration, get_configuration_summary, get_configuration_history",
          "ConfigManagerUtils - Utility methods: reset_configuration, get_manager_status"
        ],
        "properties_to_extract": [
          "export_data",
          "validation_results",
          "required_fields",
          "numeric_fields",
          "update_results",
          "cutoff_time",
          "value",
          "old_value"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\integration_coordinators\\unified_integration\\coordinators\\health_monitor.py",
      "class_name": "HealthMonitor",
      "current_loc": 143,
      "limit": 100,
      "excess": 43,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "HealthMonitorCore - Core methods: get_system_health, add_monitoring_callback, set_alert_threshold, get_alert_thresholds, check_health_thresholds",
          "HealthMonitorUtils - Utility methods: record_health_status, get_health_trends, get_monitor_status"
        ],
        "properties_to_extract": [
          "health_status",
          "performance_summary",
          "recommendations",
          "alerts",
          "cutoff_time",
          "recent_history",
          "health_scores",
          "average_health",
          "trend",
          "value",
          "trend",
          "trend",
          "trend"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\intelligent_context\\intelligent_context_emergency.py",
      "class_name": "IntelligentContextEmergency",
      "current_loc": 108,
      "limit": 100,
      "excess": 8,
      "severity": "major",
      "line_number": 17,
      "suggestion": {
        "suggested_methods_split": [
          "IntelligentContextEmergencyCore - Core methods: get_emergency_context, get_intervention_protocols, create_emergency_protocol, assess_emergency_severity, get_emergency_agents",
          "IntelligentContextEmergencyUtils - Utility methods: calculate_emergency_response_time"
        ],
        "properties_to_extract": [
          "start_time",
          "protocols",
          "risk_factors",
          "agent_count",
          "emergency_agents",
          "base_time",
          "risk_adjustment",
          "available_agents",
          "emergency_context",
          "execution_time",
          "execution_time"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\intelligent_context\\intelligent_context_engine.py",
      "class_name": "IntelligentContextEngine",
      "current_loc": 110,
      "limit": 100,
      "excess": 10,
      "severity": "major",
      "line_number": 30,
      "suggestion": {
        "suggested_methods_split": [
          "IntelligentContextEngineCore - Core methods: update_mission_context, get_mission_context, update_agent_capability, get_agent_capabilities, search_context",
          "IntelligentContextEngineUtils - Utility methods: get_emergency_context, get_intervention_protocols, optimize_agent_assignment, analyze_success_patterns, assess_mission_risks"
        ],
        "properties_to_extract": [],
        "method_count": 12,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\intelligent_context\\intelligent_context_search.py",
      "class_name": "IntelligentContextSearch",
      "current_loc": 116,
      "limit": 100,
      "excess": 16,
      "severity": "major",
      "line_number": 17,
      "suggestion": {
        "suggested_methods_split": [
          "IntelligentContextSearchCore - Core methods: search_context, search_missions, search_agents, search_by_skills, search_by_mission_type",
          "IntelligentContextSearchUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "results",
          "results",
          "results",
          "results",
          "results",
          "execution_time",
          "mission",
          "execution_time"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\intelligent_context\\engines\\agent_assignment_engine.py",
      "class_name": "AgentAssignmentEngine",
      "current_loc": 151,
      "limit": 100,
      "excess": 51,
      "severity": "major",
      "line_number": 26,
      "suggestion": {
        "suggested_methods_split": [
          "AgentAssignmentEngineCore - Core methods: optimize_agent_assignment, get_agent_availability_summary, get_engine_status",
          "AgentAssignmentEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "score",
          "base_time",
          "workload_factor",
          "complexity_factor",
          "experience_factor",
          "confidence",
          "available_count",
          "busy_count",
          "recommendations",
          "execution_time",
          "execution_time",
          "score",
          "specialization",
          "recommendation"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\intelligent_context\\engines\\risk_assessment_engine.py",
      "class_name": "RiskAssessmentEngine",
      "current_loc": 122,
      "limit": 100,
      "excess": 22,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "RiskAssessmentEngineCore - Core methods: assess_mission_risks, calculate_risk_score, get_risk_summary, get_engine_status",
          "RiskAssessmentEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "mitigations",
          "risk_factors",
          "base_score",
          "critical_factors",
          "high_factors",
          "complexity_factor",
          "risk_assessment",
          "risk_score",
          "risk_factors",
          "risk_level",
          "mitigation_strategies",
          "risk_assessment",
          "execution_time",
          "execution_time"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\intelligent_context\\unified_intelligent_context\\engine_search.py",
      "class_name": "IntelligentContextEngineSearch",
      "current_loc": 165,
      "limit": 100,
      "excess": 65,
      "severity": "major",
      "line_number": 17,
      "suggestion": {
        "suggested_methods_split": [
          "IntelligentContextEngineSearchCore - Core methods: ",
          "IntelligentContextEngineSearchUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "results",
          "query_lower",
          "results",
          "query_lower",
          "results",
          "query_lower",
          "results",
          "execution_time",
          "relevance_score",
          "relevance_score",
          "relevance_score",
          "mission_results",
          "capability_results",
          "emergency_results",
          "execution_time"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\intelligent_context\\unified_intelligent_context\\search_operations.py",
      "class_name": "IntelligentContextSearchOperations",
      "current_loc": 167,
      "limit": 100,
      "excess": 67,
      "severity": "major",
      "line_number": 18,
      "suggestion": {
        "suggested_methods_split": [
          "IntelligentContextSearchOperationsCore - Core methods: search_contexts, search_with_pattern, optimize_search_query",
          "IntelligentContextSearchOperationsUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "query",
          "words",
          "filtered_words",
          "processed_query",
          "results",
          "results",
          "processed_query",
          "results",
          "results",
          "pattern",
          "query",
          "query",
          "query",
          "words",
          "unique_words",
          "optimized_query"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\managers\\core_configuration_manager.py",
      "current_loc": 413,
      "limit": 400,
      "excess": 13,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "core_configuration_manager_core.py - Core classes: CoreConfigurationManager",
          "core_configuration_manager_utils.py - Utility functions: __init__, initialize, execute",
          "core_configuration_manager_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 14,
          "imports": 12
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\managers\\core_configuration_manager.py",
      "class_name": "CoreConfigurationManager",
      "current_loc": 392,
      "limit": 100,
      "excess": 292,
      "severity": "major",
      "line_number": 22,
      "suggestion": {
        "suggested_methods_split": [
          "CoreConfigurationManagerCore - Core methods: initialize, execute, load_config, save_config, validate_config",
          "CoreConfigurationManagerUtils - Utility methods: cleanup, get_status"
        ],
        "properties_to_extract": [
          "validation_result",
          "file_path",
          "validation_errors",
          "env_file",
          "discord_config",
          "app_config",
          "db_config",
          "config_key",
          "export_path",
          "import_path",
          "config_key",
          "validation_result",
          "config_key",
          "file_path",
          "env_value",
          "config_type",
          "config_data",
          "config_key",
          "config_data",
          "config_data",
          "rules",
          "config_data",
          "config_data",
          "config_data",
          "line",
          "value",
          "expected_type"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\core_configuration_manager.py",
      "function_name": "validate_config",
      "current_loc": 51,
      "limit": 50,
      "excess": 1,
      "severity": "minor",
      "line_number": 161,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from validate_config",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\managers\\core_resource_manager.py",
      "current_loc": 523,
      "limit": 400,
      "excess": 123,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "core_resource_manager_core.py - Core classes: CoreResourceManager",
          "core_resource_manager_utils.py - Utility functions: __init__, initialize, execute",
          "core_resource_manager_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 19,
          "imports": 14
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\managers\\core_resource_manager.py",
      "class_name": "CoreResourceManager",
      "current_loc": 500,
      "limit": 100,
      "excess": 400,
      "severity": "major",
      "line_number": 24,
      "suggestion": {
        "suggested_methods_split": [
          "CoreResourceManagerCore - Core methods: initialize, execute, create_resource, get_resource, update_resource",
          "CoreResourceManagerUtils - Utility methods: delete_resource, cleanup, get_status"
        ],
        "properties_to_extract": [
          "operation",
          "file_path",
          "operation",
          "lock_id",
          "operation",
          "agent_id",
          "file_path",
          "content",
          "dir_path",
          "agent_id",
          "context_data",
          "lock_data",
          "content",
          "acquired",
          "context_data",
          "content",
          "content",
          "lock_data",
          "files",
          "dest",
          "updates",
          "dest"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\core_resource_manager.py",
      "function_name": "_handle_file_operation",
      "current_loc": 58,
      "limit": 50,
      "excess": 8,
      "severity": "minor",
      "line_number": 253,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _handle_file_operation",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\core_resource_manager.py",
      "function_name": "_handle_context_operation",
      "current_loc": 86,
      "limit": 50,
      "excess": 36,
      "severity": "minor",
      "line_number": 357,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _handle_context_operation",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\managers\\base_manager.py",
      "current_loc": 474,
      "limit": 400,
      "excess": 74,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "base_manager_core.py - Core classes: ManagerType, ManagerState",
          "base_manager_utils.py - Utility functions: __init__, initialize, execute",
          "base_manager_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 3,
          "functions": 13,
          "imports": 24
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\managers\\base_manager.py",
      "class_name": "BaseManager",
      "current_loc": 414,
      "limit": 100,
      "excess": 314,
      "severity": "major",
      "line_number": 61,
      "suggestion": {
        "suggested_methods_split": [
          "BaseManagerCore - Core methods: initialize, execute, cleanup, get_status, get_health_check",
          "BaseManagerUtils - Utility methods: update_configuration, get_metrics, reset_metrics"
        ],
        "properties_to_extract": [
          "uptime_hours",
          "init_context",
          "success",
          "validation_result",
          "result",
          "cleanup_context",
          "success",
          "base_status",
          "manager_status",
          "validation_result",
          "success"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\base_manager.py",
      "function_name": "initialize",
      "current_loc": 70,
      "limit": 50,
      "excess": 20,
      "severity": "minor",
      "line_number": 112,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from initialize",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\base_manager.py",
      "function_name": "execute",
      "current_loc": 74,
      "limit": 50,
      "excess": 24,
      "severity": "minor",
      "line_number": 183,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from execute",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\base_manager.py",
      "function_name": "cleanup",
      "current_loc": 58,
      "limit": 50,
      "excess": 8,
      "severity": "minor",
      "line_number": 269,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from cleanup",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\managers\\core_monitoring_manager.py",
      "current_loc": 548,
      "limit": 400,
      "excess": 148,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "core_monitoring_manager_core.py - Core classes: AlertLevel, MetricType",
          "core_monitoring_manager_utils.py - Utility functions: __init__, initialize, execute",
          "core_monitoring_manager_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 4,
          "functions": 20,
          "imports": 18
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\managers\\core_monitoring_manager.py",
      "class_name": "CoreMonitoringManager",
      "current_loc": 498,
      "limit": 100,
      "excess": 398,
      "severity": "major",
      "line_number": 51,
      "suggestion": {
        "suggested_methods_split": [
          "CoreMonitoringManagerCore - Core methods: initialize, execute, create_alert, record_metric, create_widget",
          "CoreMonitoringManagerUtils - Utility methods: cleanup, get_status, monitor"
        ],
        "properties_to_extract": [
          "active_alerts",
          "acknowledged_alerts",
          "resolved_alerts",
          "thread",
          "alert_id",
          "level",
          "message",
          "source",
          "type_mapping",
          "metric_type_name",
          "metric_type",
          "timestamp",
          "widget_id",
          "widget_type",
          "title",
          "config",
          "widget",
          "level_filter",
          "status_filter",
          "source_filter",
          "filtered_alerts",
          "metric_name_filter",
          "include_history",
          "filtered_metrics",
          "widget_type_filter",
          "enabled_only",
          "filtered_widgets",
          "alert_id",
          "acknowledged_by",
          "alert_id",
          "resolved_by",
          "resolution_notes",
          "current_level",
          "alert_data",
          "alert",
          "metric_data",
          "alert",
          "alert",
          "action",
          "metric_name",
          "metric_value",
          "cutoff_time",
          "cutoff_time",
          "widget_data",
          "to_remove"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\core_monitoring_manager.py",
      "function_name": "record_metric",
      "current_loc": 59,
      "limit": 50,
      "excess": 9,
      "severity": "minor",
      "line_number": 157,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from record_metric",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\managers\\execution\\base_execution_manager.py",
      "current_loc": 552,
      "limit": 400,
      "excess": 152,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "base_execution_manager_core.py - Core classes: TaskStatus, ProtocolType",
          "base_execution_manager_utils.py - Utility functions: __init__, initialize, execute",
          "base_execution_manager_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 3,
          "functions": 20,
          "imports": 16
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\managers\\execution\\base_execution_manager.py",
      "class_name": "BaseExecutionManager",
      "current_loc": 511,
      "limit": 100,
      "excess": 411,
      "severity": "major",
      "line_number": 42,
      "suggestion": {
        "suggested_methods_split": [
          "BaseExecutionManagerCore - Core methods: initialize, execute, execute_task, register_protocol, get_execution_status",
          "BaseExecutionManagerUtils - Utility methods: cleanup, get_status, processor"
        ],
        "properties_to_extract": [
          "operation",
          "file_path",
          "operation",
          "data_size",
          "url",
          "method",
          "thread",
          "task",
          "execution_id",
          "execution",
          "thread",
          "protocol",
          "task_id",
          "task_type",
          "priority",
          "data",
          "task",
          "task_id",
          "task",
          "status_filter",
          "task_type_filter",
          "tasks",
          "protocol_type_filter",
          "enabled_only",
          "protocols",
          "execution",
          "task_type",
          "started_at",
          "executions",
          "executions",
          "duration",
          "tasks",
          "tasks",
          "protocols",
          "protocols",
          "result",
          "execution",
          "completed_at",
          "result",
          "failed_at",
          "result",
          "result",
          "task_id",
          "task"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\execution\\base_execution_manager.py",
      "function_name": "execute_task",
      "current_loc": 62,
      "limit": 50,
      "excess": 12,
      "severity": "minor",
      "line_number": 104,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from execute_task",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\managers\\execution\\execution_coordinator.py",
      "class_name": "ExecutionCoordinator",
      "current_loc": 151,
      "limit": 100,
      "excess": 51,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "ExecutionCoordinatorCore - Core methods: initialize, execute, cleanup, get_status, create_task",
          "ExecutionCoordinatorUtils - Utility methods: execute_protocol, get_task_status"
        ],
        "properties_to_extract": [
          "payload",
          "exec_payload",
          "payload",
          "base_success",
          "task_success",
          "protocol_success",
          "success",
          "task_success",
          "protocol_success",
          "base_success",
          "success",
          "base_status",
          "task_status",
          "protocol_status"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\managers\\monitoring\\metrics_manager.py",
      "class_name": "MetricsManager",
      "current_loc": 285,
      "limit": 100,
      "excess": 185,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "MetricsManagerCore - Core methods: execute, get_status",
          "MetricsManagerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "base_status",
          "metric_name",
          "aggregation_type",
          "time_window",
          "history",
          "cutoff_time",
          "filtered_history",
          "values",
          "metric_name",
          "trend_window",
          "history",
          "cutoff_time",
          "filtered_history",
          "values",
          "first_value",
          "last_value",
          "trend_direction",
          "trend_magnitude",
          "moving_averages",
          "export_format",
          "metric_names",
          "include_history",
          "result",
          "mean",
          "variance",
          "export_data",
          "export_data",
          "export_string",
          "sorted_values",
          "n",
          "result",
          "csv_lines",
          "export_string"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\monitoring\\metrics_manager.py",
      "function_name": "_get_metric_aggregation",
      "current_loc": 97,
      "limit": 50,
      "excess": 47,
      "severity": "minor",
      "line_number": 45,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _get_metric_aggregation",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\monitoring\\metrics_manager.py",
      "function_name": "_get_metric_trends",
      "current_loc": 90,
      "limit": 50,
      "excess": 40,
      "severity": "minor",
      "line_number": 143,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _get_metric_trends",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\monitoring\\metrics_manager.py",
      "function_name": "_export_metrics",
      "current_loc": 55,
      "limit": 50,
      "excess": 5,
      "severity": "minor",
      "line_number": 234,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _export_metrics",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\managers\\monitoring\\base_monitoring_manager.py",
      "current_loc": 530,
      "limit": 400,
      "excess": 130,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "base_monitoring_manager_core.py - Core classes: AlertLevel, MetricType",
          "base_monitoring_manager_utils.py - Utility functions: __init__, initialize, execute",
          "base_monitoring_manager_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 4,
          "functions": 20,
          "imports": 16
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\managers\\monitoring\\base_monitoring_manager.py",
      "class_name": "BaseMonitoringManager",
      "current_loc": 482,
      "limit": 100,
      "excess": 382,
      "severity": "major",
      "line_number": 49,
      "suggestion": {
        "suggested_methods_split": [
          "BaseMonitoringManagerCore - Core methods: initialize, execute, create_alert, record_metric, create_widget",
          "BaseMonitoringManagerUtils - Utility methods: cleanup, get_status, monitor"
        ],
        "properties_to_extract": [
          "thread",
          "alert_id",
          "level",
          "source",
          "message",
          "metadata",
          "alert",
          "metric_name",
          "metric_value",
          "metric_type",
          "tags",
          "metric_entry",
          "widget_id",
          "widget_type",
          "title",
          "config",
          "widget",
          "level_filter",
          "status_filter",
          "source_filter",
          "alerts",
          "metric_name",
          "include_history",
          "widget_type_filter",
          "widgets",
          "alert_id",
          "alert_id",
          "resolution_notes",
          "metric_type",
          "widget_type",
          "alerts",
          "alerts",
          "alerts",
          "metrics",
          "metrics",
          "widgets",
          "alert",
          "alert",
          "action",
          "cutoff_time",
          "cutoff_time",
          "to_remove"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\monitoring\\base_monitoring_manager.py",
      "function_name": "record_metric",
      "current_loc": 53,
      "limit": 50,
      "excess": 3,
      "severity": "minor",
      "line_number": 149,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from record_metric",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\managers\\results\\performance_results_processor.py",
      "class_name": "PerformanceResultsProcessor",
      "current_loc": 114,
      "limit": 100,
      "excess": 14,
      "severity": "major",
      "line_number": 18,
      "suggestion": {
        "suggested_methods_split": [
          "PerformanceResultsProcessorCore - Core methods: ",
          "PerformanceResultsProcessorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "performance_metrics",
          "test_name",
          "duration",
          "performance_score",
          "performance_analysis",
          "score",
          "cpu_usage",
          "memory_usage",
          "response_time",
          "throughput",
          "analysis",
          "cpu_usage",
          "memory_usage",
          "response_time",
          "high_metrics"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\managers\\results\\base_results_manager.py",
      "class_name": "BaseResultsManager",
      "current_loc": 309,
      "limit": 100,
      "excess": 209,
      "severity": "major",
      "line_number": 32,
      "suggestion": {
        "suggested_methods_split": [
          "BaseResultsManagerCore - Core methods: initialize, execute, process_results, cleanup, get_status",
          "BaseResultsManagerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "field",
          "rule_type",
          "expected_value",
          "value",
          "result_data",
          "result_type",
          "validation_rules",
          "callback_key",
          "result_id",
          "result",
          "processed_data",
          "validation_passed",
          "result_id",
          "result_type",
          "status",
          "include_archived",
          "results",
          "result_ids",
          "archive_all",
          "archived_count",
          "processor_type",
          "processor_func",
          "cutoff_date",
          "to_archive",
          "results",
          "results",
          "results",
          "result_ids",
          "created_at",
          "result",
          "result"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\results\\base_results_manager.py",
      "function_name": "process_results",
      "current_loc": 74,
      "limit": 50,
      "excess": 24,
      "severity": "minor",
      "line_number": 77,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from process_results",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\managers\\results\\analysis_results_processor.py",
      "function_name": "_process_analysis_result",
      "current_loc": 54,
      "limit": 50,
      "excess": 4,
      "severity": "minor",
      "line_number": 29,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _process_analysis_result",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\orchestration\\intent_subsystems\\debate_engine.py",
      "class_name": "DebateEngine",
      "current_loc": 117,
      "limit": 100,
      "excess": 17,
      "severity": "major",
      "line_number": 196,
      "suggestion": {
        "suggested_methods_split": [
          "DebateEngineCore - Core methods: create_debate, submit_argument, analyze_debate, conduct_voting, resolve_debate",
          "DebateEngineUtils - Utility methods: get_session_status, list_active_sessions, get_debate_history"
        ],
        "properties_to_extract": [
          "session",
          "session",
          "session",
          "analysis",
          "session",
          "voting_results",
          "session",
          "analysis",
          "consensus",
          "session"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\orchestration\\intent_subsystems\\intervention_manager.py",
      "current_loc": 614,
      "limit": 400,
      "excess": 214,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "intervention_manager_core.py - Core classes: InterventionPriority, InterventionType",
          "intervention_manager_utils.py - Utility functions: create_intervention_manager, detect_intervention_needed, execute_intervention",
          "intervention_manager_types.py - Type definitions and imports"
        ],
        "estimated_splits": 6,
        "complexity_factors": {
          "classes": 12,
          "functions": 32,
          "imports": 21
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\orchestration\\intent_subsystems\\intervention_manager.py",
      "class_name": "SwarmInterventionStrategy",
      "current_loc": 222,
      "limit": 100,
      "excess": 122,
      "severity": "major",
      "line_number": 137,
      "suggestion": {
        "suggested_methods_split": [
          "SwarmInterventionStrategyCore - Core methods: detect_intervention_needed, execute_intervention, validate_intervention_effectiveness",
          "SwarmInterventionStrategyUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "system_health",
          "agent_status",
          "failed_agents",
          "communication_status",
          "start_time",
          "intervention_id",
          "actions_executed",
          "errors",
          "metrics_before",
          "metrics_after",
          "execution_time",
          "result",
          "actions",
          "actions",
          "actions",
          "resource_type",
          "scale_factor",
          "message",
          "agent_id",
          "restart_type",
          "reset_type",
          "backup_channel",
          "status",
          "cpu_before",
          "cpu_after",
          "memory_before",
          "memory_after",
          "cpu_improved",
          "memory_improved",
          "status"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\orchestration\\intent_subsystems\\intervention_manager.py",
      "class_name": "InterventionManager",
      "current_loc": 182,
      "limit": 100,
      "excess": 82,
      "severity": "major",
      "line_number": 361,
      "suggestion": {
        "suggested_methods_split": [
          "InterventionManagerCore - Core methods: register_protocol, start_monitoring, stop_monitoring, trigger_intervention, detect_and_trigger",
          "InterventionManagerUtils - Utility methods: get_intervention_status, get_intervention_stats"
        ],
        "properties_to_extract": [
          "protocol",
          "result",
          "intervention_id",
          "protocol",
          "result",
          "stats",
          "last_execution",
          "cooldown_end",
          "current_count",
          "last_execution",
          "hour_ago",
          "context",
          "intervention_id",
          "current_count",
          "result"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\orchestration\\intent_subsystems\\lifecycle_coordinator.py",
      "current_loc": 669,
      "limit": 400,
      "excess": 269,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "lifecycle_coordinator_core.py - Core classes: LifecyclePhase, LifecycleStatus",
          "lifecycle_coordinator_utils.py - Utility functions: create_lifecycle_coordinator, agent_id, capabilities",
          "lifecycle_coordinator_types.py - Type definitions and imports"
        ],
        "estimated_splits": 5,
        "complexity_factors": {
          "classes": 10,
          "functions": 32,
          "imports": 19
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\orchestration\\intent_subsystems\\lifecycle_coordinator.py",
      "class_name": "SwarmLifecycleStrategy",
      "current_loc": 105,
      "limit": 100,
      "excess": 5,
      "severity": "major",
      "line_number": 152,
      "suggestion": {
        "suggested_methods_split": [
          "SwarmLifecycleStrategyCore - Core methods: should_transition, validate_transition, handle_transition_error",
          "SwarmLifecycleStrategyUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "current_phase",
          "allowed_transitions",
          "timeout",
          "debate_end"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\orchestration\\intent_subsystems\\lifecycle_coordinator.py",
      "class_name": "LifecycleCoordinator",
      "current_loc": 331,
      "limit": 100,
      "excess": 231,
      "severity": "major",
      "line_number": 259,
      "suggestion": {
        "suggested_methods_split": [
          "LifecycleCoordinatorCore - Core methods: register_agent, unregister_agent, start_coordination, stop_coordination, execute_lifecycle_cycle",
          "LifecycleCoordinatorUtils - Utility methods: force_transition, get_agent_status, get_coordination_stats"
        ],
        "properties_to_extract": [
          "agent_id",
          "initial_state",
          "state",
          "transition",
          "agent",
          "state",
          "original_phase",
          "agent",
          "state",
          "agent",
          "state",
          "stats",
          "phase",
          "from_phase",
          "result",
          "next_phase",
          "phase",
          "status",
          "error_msg",
          "transition",
          "transition",
          "observations",
          "error_msg",
          "transition",
          "agent_ids",
          "analysis",
          "peer_inputs",
          "batch",
          "debate_results",
          "decision",
          "context",
          "transition",
          "action_results"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\orchestration\\intent_subsystems\\lifecycle_coordinator.py",
      "function_name": "_transition_agent",
      "current_loc": 69,
      "limit": 50,
      "excess": 19,
      "severity": "minor",
      "line_number": 484,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _transition_agent",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\orchestration\\intent_subsystems\\message_router.py",
      "current_loc": 650,
      "limit": 400,
      "excess": 250,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "message_router_core.py - Core classes: MessagePriority, MessageType",
          "message_router_utils.py - Utility functions: create_message_router, can_handle, handle",
          "message_router_types.py - Type definitions and imports"
        ],
        "estimated_splits": 8,
        "complexity_factors": {
          "classes": 16,
          "functions": 31,
          "imports": 28
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\orchestration\\intent_subsystems\\message_router.py",
      "class_name": "PyAutoGUIHandler",
      "current_loc": 101,
      "limit": 100,
      "excess": 1,
      "severity": "major",
      "line_number": 178,
      "suggestion": {
        "suggested_methods_split": [
          "PyAutoGUIHandlerCore - Core methods: can_handle, handle",
          "PyAutoGUIHandlerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "coords",
          "unified_message",
          "success"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\orchestration\\intent_subsystems\\message_router.py",
      "class_name": "MessageRouter",
      "current_loc": 202,
      "limit": 100,
      "excess": 102,
      "severity": "major",
      "line_number": 376,
      "suggestion": {
        "suggested_methods_split": [
          "MessageRouterCore - Core methods: route_message, send_message, send_bulk_messages, broadcast_message, get_delivery_status",
          "MessageRouterUtils - Utility methods: get_delivery_stats, create_message"
        ],
        "properties_to_extract": [
          "message_ids",
          "message_ids",
          "stats",
          "message_id",
          "expires_at",
          "broadcast_msg",
          "method",
          "expires_at",
          "method",
          "message",
          "delivery_method",
          "handler",
          "result",
          "retry_count"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\orchestration\\intent_subsystems\\message_router.py",
      "function_name": "handle",
      "current_loc": 73,
      "limit": 50,
      "excess": 23,
      "severity": "minor",
      "line_number": 206,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from handle",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\pattern_analysis\\unified_pattern_analysis\\analyzer.py",
      "class_name": "PatternAnalyzer",
      "current_loc": 145,
      "limit": 100,
      "excess": 45,
      "severity": "major",
      "line_number": 147,
      "suggestion": {
        "suggested_methods_split": [
          "PatternAnalyzerCore - Core methods: initialize, analyze_performance_patterns, analyze_coordination_patterns, generate_optimization_recommendations, get_analysis_summary",
          "PatternAnalyzerUtils - Utility methods: shutdown"
        ],
        "properties_to_extract": [
          "metrics",
          "patterns",
          "contexts",
          "patterns",
          "recommendations",
          "performance_patterns",
          "patterns_by_type",
          "contexts",
          "recommendation",
          "pattern",
          "pattern"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\performance\\performance_monitoring_system.py",
      "class_name": "PerformanceMonitoringSystem",
      "current_loc": 173,
      "limit": 100,
      "excess": 73,
      "severity": "major",
      "line_number": 61,
      "suggestion": {
        "suggested_methods_split": [
          "PerformanceMonitoringSystemCore - Core methods: start_monitoring, stop_monitoring, collect_metrics, generate_report, get_system_status",
          "PerformanceMonitoringSystemUtils - Utility methods: get_metrics_summary, cleanup"
        ],
        "properties_to_extract": [
          "metrics",
          "current_time",
          "cpu_percent",
          "memory",
          "disk",
          "disk_percent",
          "current_metrics",
          "report_id",
          "summary",
          "report",
          "latest_metrics",
          "summary",
          "cpu_metric",
          "cpu_metrics",
          "memory_metrics"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\performance\\performance_monitoring_system.py",
      "function_name": "collect_metrics",
      "current_loc": 51,
      "limit": 50,
      "excess": 1,
      "severity": "minor",
      "line_number": 99,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from collect_metrics",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\performance\\performance_cli.py",
      "function_name": "handle_dashboard_command",
      "current_loc": 53,
      "limit": 50,
      "excess": 3,
      "severity": "minor",
      "line_number": 145,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from handle_dashboard_command",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\performance\\unified_dashboard\\reporter.py",
      "class_name": "DashboardReporter",
      "current_loc": 229,
      "limit": 100,
      "excess": 129,
      "severity": "major",
      "line_number": 22,
      "suggestion": {
        "suggested_methods_split": [
          "DashboardReporterCore - Core methods: initialize, generate_metrics_report, generate_alerts_report, generate_performance_report, export_report",
          "DashboardReporterUtils - Utility methods: get_report_history, cleanup_old_reports, get_reporter_stats, shutdown"
        ],
        "properties_to_extract": [
          "metrics",
          "total_metrics",
          "values",
          "avg_value",
          "max_value",
          "min_value",
          "alerts",
          "total_alerts",
          "critical_alerts",
          "warning_alerts",
          "info_alerts",
          "metrics_report",
          "alerts_report",
          "report",
          "critical_alerts",
          "warning_alerts",
          "reports",
          "cutoff_time",
          "cleaned"
        ],
        "method_count": 9,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\performance\\unified_dashboard\\engine.py",
      "class_name": "DashboardEngine",
      "current_loc": 184,
      "limit": 100,
      "excess": 84,
      "severity": "major",
      "line_number": 31,
      "suggestion": {
        "suggested_methods_split": [
          "DashboardEngineCore - Core methods: add_metric, get_metric, get_metrics_by_type, update_metric, remove_metric",
          "DashboardEngineUtils - Utility methods: get_all_metrics, add_widget, get_widget, get_all_widgets, update_widget"
        ],
        "properties_to_extract": [
          "status"
        ],
        "method_count": 27,
        "estimated_classes": 2
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\performance\\unified_dashboard\\widget_manager.py",
      "class_name": "WidgetManager",
      "current_loc": 139,
      "limit": 100,
      "excess": 39,
      "severity": "major",
      "line_number": 22,
      "suggestion": {
        "suggested_methods_split": [
          "WidgetManagerCore - Core methods: add_widget, get_widget, get_all_widgets, update_widget, remove_widget",
          "WidgetManagerUtils - Utility methods: add_config, get_config, get_all_configs, update_config, remove_config"
        ],
        "properties_to_extract": [
          "widget",
          "config"
        ],
        "method_count": 14,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\refactoring\\analysis_tools_core.py",
      "class_name": "ArchitectureAnalyzer",
      "current_loc": 173,
      "limit": 100,
      "excess": 73,
      "severity": "major",
      "line_number": 25,
      "suggestion": {
        "suggested_methods_split": [
          "ArchitectureAnalyzerCore - Core methods: analyze_file, find_duplicates, identify_patterns, generate_suggestions",
          "ArchitectureAnalyzerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "duplicates",
          "file_hashes",
          "patterns",
          "suggestions",
          "classes",
          "lines",
          "functions",
          "lines",
          "imports",
          "lines",
          "lines",
          "complexity_indicators",
          "complexity_count",
          "line_count",
          "classes",
          "functions",
          "imports",
          "complexity_score",
          "v2_compliance",
          "suggestion",
          "suggestion",
          "content",
          "lines",
          "class_name",
          "func_name",
          "content",
          "file_hash",
          "content",
          "original",
          "duplicate",
          "pattern",
          "pattern"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\refactoring\\file_analysis.py",
      "function_name": "analyze_file_for_extraction",
      "current_loc": 54,
      "limit": 50,
      "excess": 4,
      "severity": "minor",
      "line_number": 20,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from analyze_file_for_extraction",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\refactoring\\refactor_tools.py",
      "current_loc": 494,
      "limit": 400,
      "excess": 94,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "refactor_tools_core.py - Core classes: ExtractionPlan, RefactorTools",
          "refactor_tools_utils.py - Utility functions: get_refactor_tools, create_extraction_plan, execute_extraction",
          "refactor_tools_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 4,
          "functions": 33,
          "imports": 19
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\refactoring\\tools\\consolidation_tools.py",
      "class_name": "ConsolidationTools",
      "current_loc": 106,
      "limit": 100,
      "excess": 6,
      "severity": "major",
      "line_number": 29,
      "suggestion": {
        "suggested_methods_split": [
          "ConsolidationToolsCore - Core methods: create_consolidation_plan, execute_consolidation, analyze_duplicates",
          "ConsolidationToolsUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "duplicates",
          "duplicate_groups",
          "consolidation_targets",
          "consolidation_rules",
          "estimated_savings",
          "dir_path",
          "file_hashes",
          "duplicates",
          "duplicates",
          "total_duplicates",
          "total_groups",
          "path",
          "content",
          "file_hash"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\refactoring\\tools\\extraction_tools.py",
      "current_loc": 454,
      "limit": 400,
      "excess": 54,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "extraction_tools_core.py - Core classes: ExtractionPlan, ExtractionTools",
          "extraction_tools_utils.py - Utility functions: __init__, create_extraction_plan, execute_extraction",
          "extraction_tools_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 2,
          "functions": 8,
          "imports": 5
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\refactoring\\tools\\extraction_tools.py",
      "class_name": "ExtractionTools",
      "current_loc": 425,
      "limit": 100,
      "excess": 325,
      "severity": "major",
      "line_number": 30,
      "suggestion": {
        "suggested_methods_split": [
          "ExtractionToolsCore - Core methods: create_extraction_plan, execute_extraction",
          "ExtractionToolsUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "base_path",
          "rules",
          "models_code",
          "imports",
          "result",
          "utils_functions",
          "utils_imports",
          "helper_functions",
          "result",
          "core_classes",
          "core_functions",
          "core_imports",
          "main_functions",
          "result",
          "source_path",
          "source_content",
          "tree",
          "target_files",
          "extraction_rules",
          "source_path",
          "source_content",
          "tree",
          "models",
          "utils",
          "core",
          "target_path",
          "class_name",
          "has_init",
          "has_properties",
          "func_name",
          "is_utility",
          "docstring",
          "arg_count",
          "class_name",
          "is_core",
          "method_count",
          "class_code",
          "is_utility",
          "is_utility",
          "func_code",
          "args",
          "is_core",
          "is_core",
          "is_core",
          "class_code",
          "func_name",
          "is_core",
          "docstring",
          "base_names",
          "is_core",
          "is_core",
          "is_core",
          "func_code",
          "args",
          "is_utility",
          "method_name",
          "method_code",
          "args"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\refactoring\\tools\\extraction_tools.py",
      "function_name": "_extract_models",
      "current_loc": 62,
      "limit": 50,
      "excess": 12,
      "severity": "minor",
      "line_number": 117,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _extract_models",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\refactoring\\tools\\extraction_tools.py",
      "function_name": "_extract_utils",
      "current_loc": 113,
      "limit": 50,
      "excess": 63,
      "severity": "minor",
      "line_number": 180,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _extract_utils",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\refactoring\\tools\\extraction_tools.py",
      "function_name": "_extract_core",
      "current_loc": 161,
      "limit": 50,
      "excess": 111,
      "severity": "minor",
      "line_number": 294,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _extract_core",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\refactoring\\tools\\optimization_tools.py",
      "class_name": "OptimizationTools",
      "current_loc": 275,
      "limit": 100,
      "excess": 175,
      "severity": "major",
      "line_number": 27,
      "suggestion": {
        "suggested_methods_split": [
          "OptimizationToolsCore - Core methods: create_optimization_plan, execute_optimization",
          "OptimizationToolsUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "targets",
          "lines",
          "rules",
          "improvements",
          "improvements",
          "lines",
          "optimized_content",
          "lines",
          "sections",
          "class_indices",
          "function_indices",
          "class_count",
          "function_count",
          "import_lines",
          "other_lines",
          "optimized_lines",
          "optimized_lines",
          "optimized_lines",
          "source_path",
          "source_content",
          "optimization_targets",
          "optimization_rules",
          "performance_improvements",
          "v2_compliance_improvements",
          "source_path",
          "source_content",
          "optimized_content",
          "content",
          "content",
          "content",
          "content",
          "optimized_content",
          "optimized_content",
          "optimized_content",
          "next_line",
          "optimized_content",
          "optimized_content",
          "optimized_content",
          "then_line",
          "else_line",
          "optimized_content",
          "optimized_content",
          "optimized_content",
          "optimized_content"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\ssot\\unified_ssot\\execution\\task_executor.py",
      "class_name": "TaskExecutor",
      "current_loc": 125,
      "limit": 100,
      "excess": 25,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "TaskExecutorCore - Core methods: ",
          "TaskExecutorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "result",
          "integration_result"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\ssot\\unified_ssot\\validators\\basic_validator.py",
      "class_name": "BasicValidator",
      "current_loc": 109,
      "limit": 100,
      "excess": 9,
      "severity": "major",
      "line_number": 17,
      "suggestion": {
        "suggested_methods_split": [
          "BasicValidatorCore - Core methods: validate_basic_fields, validate_component_metadata, get_validation_score",
          "BasicValidatorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "issues",
          "issues",
          "timestamp_fields",
          "base_score",
          "score",
          "version",
          "value",
          "value"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\ssot\\unified_ssot\\validators\\standard_validator.py",
      "class_name": "StandardValidator",
      "current_loc": 144,
      "limit": 100,
      "excess": 44,
      "severity": "major",
      "line_number": 18,
      "suggestion": {
        "suggested_methods_split": [
          "StandardValidatorCore - Core methods: validate_standard_fields, validate_component_relationships, get_validation_score",
          "StandardValidatorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "issues",
          "issues",
          "issues",
          "required_keys",
          "visited",
          "base_score",
          "score",
          "age",
          "days_since_update",
          "config_issues",
          "settings"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\ssot\\unified_ssot\\validators\\strict_validator.py",
      "class_name": "StrictValidator",
      "current_loc": 190,
      "limit": 100,
      "excess": 90,
      "severity": "major",
      "line_number": 17,
      "suggestion": {
        "suggested_methods_split": [
          "StrictValidatorCore - Core methods: validate_strict_requirements, validate_component_integrity, get_validation_score",
          "StrictValidatorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "issues",
          "issues",
          "issues",
          "issues",
          "issues",
          "issues",
          "security_issues",
          "thresholds",
          "phase_names",
          "required_resources",
          "base_score",
          "score",
          "perf_issues",
          "phase_issues",
          "resource_issues",
          "exec_time",
          "memory",
          "config",
          "sensitive_keys",
          "value",
          "desc"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\utils\\message_queue_utils.py",
      "class_name": "MessageQueueUtils",
      "current_loc": 202,
      "limit": 100,
      "excess": 102,
      "severity": "major",
      "line_number": 13,
      "suggestion": {
        "suggested_methods_split": [
          "MessageQueueUtilsCore - Core methods: calculate_priority_score, calculate_retry_delay, is_entry_ready_for_retry, is_entry_expired, build_priority_heap",
          "MessageQueueUtilsUtils - Utility methods: get_next_entries_for_processing, update_entry_for_retry, mark_entry_delivered, mark_entry_failed, mark_entry_processing"
        ],
        "properties_to_extract": [
          "base_scores",
          "base_score",
          "age_hours",
          "age_penalty",
          "delay",
          "max_age",
          "heap",
          "entries_to_process",
          "total_entries",
          "status_counts",
          "now",
          "ages",
          "age_stats",
          "retry_attempts",
          "retry_stats",
          "active_entries",
          "expired_count",
          "issues",
          "entry",
          "retry_delay"
        ],
        "method_count": 13,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\utils\\agent_matching.py",
      "class_name": "AgentMatchingUtils",
      "current_loc": 131,
      "limit": 100,
      "excess": 31,
      "severity": "major",
      "line_number": 22,
      "suggestion": {
        "suggested_methods_split": [
          "AgentMatchingUtilsCore - Core methods: calculate_agent_match_score, get_agent_type_match_score, rank_agents_by_capability, get_best_agent_for_task",
          "AgentMatchingUtilsUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "required_skills",
          "agent_skills",
          "skill_matches",
          "skill_score",
          "performance_score",
          "match_score",
          "task_type",
          "ranked_agents",
          "ranked_agents",
          "match_score",
          "performance_score"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\validation\\coordination_validator.py",
      "class_name": "CoordinationValidator",
      "current_loc": 256,
      "limit": 100,
      "excess": 156,
      "severity": "major",
      "line_number": 51,
      "suggestion": {
        "suggested_methods_split": [
          "CoordinationValidatorCore - Core methods: validate_message_structure, validate_coordination_system, validate_performance_metrics, validate_security_compliance, run_comprehensive_validation",
          "CoordinationValidatorUtils - Utility methods: get_validation_report"
        ],
        "properties_to_extract": [
          "rules",
          "issues",
          "required_fields",
          "issues",
          "issues",
          "issues",
          "all_issues",
          "errors",
          "warnings",
          "info",
          "total_issues",
          "error_weight",
          "warning_weight",
          "weighted_score",
          "max_possible_score",
          "compliance_score",
          "message_rules_path",
          "quality_rules_path",
          "security_rules_path",
          "valid_types",
          "agent_data",
          "response_time",
          "throughput",
          "auth_data",
          "overall_result",
          "system_issues",
          "system_issues",
          "rules",
          "required_agent_fields",
          "overall_result",
          "overall_result"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\validation\\performance_benchmark\\benchmark_runner_core.py",
      "class_name": "BenchmarkRunnerCore",
      "current_loc": 113,
      "limit": 100,
      "excess": 13,
      "severity": "major",
      "line_number": 22,
      "suggestion": {
        "suggested_methods_split": [
          "BenchmarkRunnerCoreCore - Core methods: add_suite, run_benchmark, run_suite, run_all_suites, get_metrics_summary",
          "BenchmarkRunnerCoreUtils - Utility methods: generate_report, clear_metrics, get_benchmark_history"
        ],
        "properties_to_extract": [
          "start_time",
          "results",
          "total_time",
          "avg_time",
          "min_time",
          "max_time",
          "benchmark_result",
          "results",
          "all_results",
          "config",
          "iteration_start",
          "result",
          "results",
          "result",
          "iteration_time",
          "iteration_time"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\validation\\performance_benchmark\\benchmark_runner_core.py",
      "function_name": "run_benchmark",
      "current_loc": 58,
      "limit": 50,
      "excess": 8,
      "severity": "minor",
      "line_number": 35,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from run_benchmark",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\validation\\performance_benchmark\\benchmark_runner_operations.py",
      "class_name": "BenchmarkRunnerOperations",
      "current_loc": 224,
      "limit": 100,
      "excess": 124,
      "severity": "major",
      "line_number": 23,
      "suggestion": {
        "suggested_methods_split": [
          "BenchmarkRunnerOperationsCore - Core methods: run_parallel_benchmarks, run_benchmark, run_stress_test, compare_benchmarks, export_results",
          "BenchmarkRunnerOperationsUtils - Utility methods: get_performance_trends, run_single_benchmark"
        ],
        "properties_to_extract": [
          "results",
          "threads",
          "start_time",
          "results",
          "total_time",
          "avg_time",
          "min_time",
          "max_time",
          "benchmark_result",
          "config",
          "start_time",
          "results",
          "total_time",
          "avg_time",
          "min_time",
          "max_time",
          "benchmark_result",
          "best_result",
          "worst_result",
          "avg_times",
          "total_avg",
          "comparison",
          "history",
          "function_trends",
          "trends",
          "func",
          "benchmark_type",
          "config",
          "args",
          "kwargs",
          "result",
          "thread",
          "config",
          "iteration_start",
          "iteration_start",
          "func_name",
          "result",
          "iteration_time",
          "iteration_time",
          "first_avg",
          "last_avg",
          "trend_direction",
          "trend_percentage",
          "iteration_time",
          "iteration_time"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\validation\\performance_benchmark\\benchmark_runner_operations.py",
      "function_name": "run_benchmark",
      "current_loc": 58,
      "limit": 50,
      "excess": 8,
      "severity": "minor",
      "line_number": 59,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from run_benchmark",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\analyzer_core.py",
      "class_name": "StrategicOversightAnalyzer",
      "current_loc": 189,
      "limit": 100,
      "excess": 89,
      "severity": "major",
      "line_number": 29,
      "suggestion": {
        "suggested_methods_split": [
          "StrategicOversightAnalyzerCore - Core methods: initialize, analyze_swarm_coordination, analyze_agent_performance, generate_strategic_recommendations, analyze_system_health",
          "StrategicOversightAnalyzerUtils - Utility methods: get_analysis_summary"
        ],
        "properties_to_extract": [
          "insights",
          "coordination_data",
          "metrics",
          "performance_data",
          "recommendations",
          "health_data",
          "insight",
          "metric",
          "recommendation"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\factory_core.py",
      "class_name": "StrategicOversightFactoryCore",
      "current_loc": 133,
      "limit": 100,
      "excess": 33,
      "severity": "major",
      "line_number": 35,
      "suggestion": {
        "suggested_methods_split": [
          "StrategicOversightFactoryCoreCore - Core methods: create_strategic_oversight_report, create_swarm_coordination_insight, create_strategic_recommendation, create_agent_performance_metrics, create_swarm_coordination_status",
          "StrategicOversightFactoryCoreUtils - Utility methods: create_strategic_mission"
        ],
        "properties_to_extract": [],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\factory_extended.py",
      "class_name": "StrategicOversightFactoryExtended",
      "current_loc": 140,
      "limit": 100,
      "excess": 40,
      "severity": "major",
      "line_number": 34,
      "suggestion": {
        "suggested_methods_split": [
          "StrategicOversightFactoryExtendedCore - Core methods: create_vector_database_metrics, create_system_health_metrics, create_comprehensive_report, create_emergency_insight, create_high_priority_recommendation",
          "StrategicOversightFactoryExtendedUtils - Utility methods: create_mission_batch"
        ],
        "properties_to_extract": [
          "missions",
          "mission"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\factory_methods.py",
      "class_name": "StrategicOversightFactory",
      "current_loc": 190,
      "limit": 100,
      "excess": 90,
      "severity": "major",
      "line_number": 34,
      "suggestion": {
        "suggested_methods_split": [
          "StrategicOversightFactoryCore - Core methods: create_oversight_report, create_swarm_insight, create_strategic_recommendation, create_agent_performance_metrics, create_swarm_coordination_status",
          "StrategicOversightFactoryUtils - Utility methods: create_vector_database_metrics, create_system_health_metrics, create_strategic_mission, create_quick_mission, create_emergency_mission"
        ],
        "properties_to_extract": [],
        "method_count": 10,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\analyzers\\prediction_analyzer.py",
      "class_name": "PredictionAnalyzer",
      "current_loc": 155,
      "limit": 100,
      "excess": 55,
      "severity": "major",
      "line_number": 33,
      "suggestion": {
        "suggested_methods_split": [
          "PredictionAnalyzerCore - Core methods: add_historical_data, get_prediction_summary",
          "PredictionAnalyzerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "complexity",
          "successful_tasks",
          "total_tasks",
          "factors",
          "risks",
          "recommendations",
          "confidence_values",
          "total_confidence",
          "base_probability",
          "confidence_level",
          "historical_success_rate",
          "base_probability"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\vector_strategic_oversight\\unified_strategic_oversight\\analyzers\\swarm_analyzer.py",
      "class_name": "SwarmCoordinationAnalyzer",
      "current_loc": 133,
      "limit": 100,
      "excess": 33,
      "severity": "major",
      "line_number": 17,
      "suggestion": {
        "suggested_methods_split": [
          "SwarmCoordinationAnalyzerCore - Core methods: ",
          "SwarmCoordinationAnalyzerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "insights",
          "insights",
          "insights",
          "insights",
          "collaboration_insights",
          "mission_insights",
          "performance_insights"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\quality\\quality_assurance_system.py",
      "class_name": "QualityAssuranceSystem",
      "current_loc": 339,
      "limit": 100,
      "excess": 239,
      "severity": "major",
      "line_number": 27,
      "suggestion": {
        "suggested_methods_split": [
          "QualityAssuranceSystemCore - Core methods: run_comprehensive_quality_check",
          "QualityAssuranceSystemUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "file_analysis",
          "v2_compliance",
          "test_coverage",
          "lint_results",
          "security_results",
          "performance_score",
          "metrics",
          "total_files",
          "total_lines",
          "python_files",
          "compliant_files",
          "non_compliant_files",
          "total_files",
          "compliance_rate",
          "lint_errors",
          "lint_warnings",
          "lint_details",
          "security_issues",
          "security_details",
          "timestamp",
          "report_file",
          "report_data",
          "recommendations",
          "result",
          "result",
          "result",
          "import_count",
          "function_count",
          "non_compliant",
          "coverage_file",
          "complexity_ratio",
          "performance_score",
          "performance_score",
          "file_path",
          "file_path",
          "lint_data",
          "security_data",
          "coverage_data",
          "file_path",
          "lines",
          "lines",
          "content"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\quality\\quality_gates.py",
      "current_loc": 617,
      "limit": 400,
      "excess": 217,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "quality_gates_core.py - Core classes: GateStatus, QualityGate",
          "quality_gates_utils.py - Utility functions: main, __init__, run_quality_gate_suite",
          "quality_gates_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 4,
          "functions": 12,
          "imports": 13
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\quality\\quality_gates.py",
      "class_name": "QualityGates",
      "current_loc": 533,
      "limit": 100,
      "excess": 433,
      "severity": "major",
      "line_number": 49,
      "suggestion": {
        "suggested_methods_split": [
          "QualityGatesCore - Core methods: run_quality_gate_suite",
          "QualityGatesUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "gates",
          "coverage_gate",
          "v2_gate",
          "lint_gate",
          "security_gate",
          "performance_gate",
          "docs_gate",
          "complexity_gate",
          "execution_time",
          "passed_gates",
          "total_gates",
          "pass_rate",
          "overall_status",
          "suite",
          "timestamp",
          "report_file",
          "report_data",
          "recommendations",
          "failed_gates",
          "result",
          "coverage",
          "threshold",
          "status",
          "violations",
          "total_files",
          "compliance_rate",
          "threshold",
          "status",
          "result",
          "error_count",
          "threshold",
          "status",
          "result",
          "issue_count",
          "threshold",
          "status",
          "import_count",
          "function_count",
          "threshold",
          "status",
          "documented_functions",
          "total_functions",
          "doc_coverage",
          "threshold",
          "status",
          "total_complexity",
          "file_count",
          "avg_complexity",
          "threshold",
          "status",
          "lines",
          "lines",
          "complexity_ratio",
          "performance_score",
          "performance_score",
          "security_data",
          "issue_count",
          "file_path",
          "file_path",
          "file_path",
          "file_path",
          "coverage",
          "error_count",
          "lines",
          "content",
          "content",
          "lines",
          "in_function",
          "function_has_docstring",
          "content",
          "complexity",
          "in_function",
          "function_has_docstring",
          "next_line",
          "function_has_docstring"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\quality\\quality_gates.py",
      "function_name": "run_quality_gate_suite",
      "current_loc": 62,
      "limit": 50,
      "excess": 12,
      "severity": "minor",
      "line_number": 71,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from run_quality_gate_suite",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\quality\\quality_gates.py",
      "function_name": "_check_test_coverage",
      "current_loc": 54,
      "limit": 50,
      "excess": 4,
      "severity": "minor",
      "line_number": 134,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _check_test_coverage",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\quality\\quality_gates.py",
      "function_name": "_check_documentation",
      "current_loc": 73,
      "limit": 50,
      "excess": 23,
      "severity": "minor",
      "line_number": 378,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _check_documentation",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\quality\\quality_gates.py",
      "function_name": "_check_complexity",
      "current_loc": 57,
      "limit": 50,
      "excess": 7,
      "severity": "minor",
      "line_number": 452,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _check_complexity",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\quality\\testing_coordinator.py",
      "current_loc": 586,
      "limit": 400,
      "excess": 186,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "testing_coordinator_core.py - Core classes: TestType, TestResult",
          "testing_coordinator_utils.py - Utility functions: main, __init__, run_comprehensive_test_suite",
          "testing_coordinator_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 4,
          "functions": 13,
          "imports": 13
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\quality\\testing_coordinator.py",
      "class_name": "TestingCoordinator",
      "current_loc": 494,
      "limit": 100,
      "excess": 394,
      "severity": "major",
      "line_number": 54,
      "suggestion": {
        "suggested_methods_split": [
          "TestingCoordinatorCore - Core methods: run_comprehensive_test_suite",
          "TestingCoordinatorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "test_suites",
          "unit_results",
          "integration_results",
          "functional_results",
          "performance_results",
          "security_results",
          "regression_results",
          "start_time",
          "start_time",
          "start_time",
          "start_time",
          "start_time",
          "start_time",
          "passed",
          "failed",
          "skipped",
          "errors",
          "lines",
          "lines",
          "timestamp",
          "report_file",
          "total_tests",
          "total_passed",
          "total_failed",
          "total_skipped",
          "total_errors",
          "total_duration",
          "success_rate",
          "report_data",
          "recommendations",
          "result",
          "duration",
          "coverage",
          "result",
          "duration",
          "result",
          "duration",
          "result",
          "duration",
          "result",
          "duration",
          "security_issues",
          "passed",
          "failed",
          "result",
          "duration",
          "parts",
          "security_data",
          "security_issues",
          "parts",
          "passed",
          "failed",
          "skipped",
          "errors"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\quality\\testing_coordinator.py",
      "function_name": "_run_unit_tests",
      "current_loc": 54,
      "limit": 50,
      "excess": 4,
      "severity": "minor",
      "line_number": 109,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _run_unit_tests",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\quality\\testing_coordinator.py",
      "function_name": "_run_security_tests",
      "current_loc": 63,
      "limit": 50,
      "excess": 13,
      "severity": "minor",
      "line_number": 317,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _run_security_tests",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\quality\\v2_compliance_executor.py",
      "current_loc": 472,
      "limit": 400,
      "excess": 72,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "v2_compliance_executor_core.py - Core classes: V2Violation, ModularizationPlan",
          "v2_compliance_executor_utils.py - Utility functions: main, __init__, execute_v2_compliance_audit",
          "v2_compliance_executor_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 3,
          "functions": 14,
          "imports": 9
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\quality\\v2_compliance_executor.py",
      "class_name": "V2ComplianceExecutor",
      "current_loc": 387,
      "limit": 100,
      "excess": 287,
      "severity": "major",
      "line_number": 37,
      "suggestion": {
        "suggested_methods_split": [
          "V2ComplianceExecutorCore - Core methods: execute_v2_compliance_audit, execute_automated_modularization",
          "V2ComplianceExecutorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "violations",
          "recommendations",
          "lines",
          "start_line",
          "end_line",
          "func_lines",
          "modularization_plans",
          "modules",
          "functions",
          "function_groups",
          "classes",
          "config_functions",
          "lines",
          "total_lines",
          "function_count",
          "class_count",
          "import_count",
          "complexity",
          "dependencies",
          "timestamp",
          "report_file",
          "total_violations",
          "high_priority",
          "medium_priority",
          "total_excess_lines",
          "report_data",
          "timestamp",
          "report_file",
          "report_data",
          "recommendations",
          "high_priority_count",
          "total_excess",
          "violation_types",
          "tree",
          "functions",
          "classes",
          "complex_functions",
          "imports",
          "config_functions",
          "util_functions",
          "tree",
          "modules",
          "complexity_score",
          "dependencies",
          "base_name",
          "target_files",
          "content",
          "lines",
          "line_count",
          "excess_lines",
          "recommendations",
          "func_lines",
          "plan",
          "content",
          "prefix",
          "file_path",
          "violation"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\quality\\v2_compliance_executor.py",
      "function_name": "_analyze_modularization_opportunities",
      "current_loc": 67,
      "limit": 50,
      "excess": 17,
      "severity": "minor",
      "line_number": 103,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _analyze_modularization_opportunities",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\agent_communication\\agent_communication_engine_operations.py",
      "class_name": "AgentCommunicationEngineOperations",
      "current_loc": 107,
      "limit": 100,
      "excess": 7,
      "severity": "major",
      "line_number": 37,
      "suggestion": {
        "suggested_methods_split": [
          "AgentCommunicationEngineOperationsCore - Core methods: get_agent_status_file_path",
          "AgentCommunicationEngineOperationsUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "agents",
          "successful_deliveries",
          "failed_deliveries",
          "status_file",
          "inbox_path",
          "cleaned_count",
          "current_time",
          "max_age_seconds",
          "result",
          "file_path",
          "file_age"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\semantic\\semantic_router.py",
      "class_name": "SemanticRouter",
      "current_loc": 108,
      "limit": 100,
      "excess": 8,
      "severity": "major",
      "line_number": 12,
      "suggestion": {
        "suggested_methods_split": [
          "SemanticRouterCore - Core methods: route",
          "SemanticRouterUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "similar_statuses",
          "priority",
          "agent_suggestions",
          "result",
          "text_lower",
          "suggestions",
          "task_words",
          "spec_words",
          "overlap",
          "total_words",
          "history_boost",
          "final_score",
          "base_score",
          "base_score",
          "history_boost"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\health\\monitoring\\health_alerting.py",
      "current_loc": 721,
      "limit": 400,
      "excess": 321,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "health_alerting_core.py - Core classes: AlertChannel, AlertPriority",
          "health_alerting_utils.py - Utility functions: __init__, _load_configuration, _create_default_configuration",
          "health_alerting_types.py - Type definitions and imports"
        ],
        "estimated_splits": 3,
        "complexity_factors": {
          "classes": 7,
          "functions": 25,
          "imports": 44
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\health\\monitoring\\health_alerting.py",
      "class_name": "HealthAlertingSystem",
      "current_loc": 608,
      "limit": 100,
      "excess": 508,
      "severity": "major",
      "line_number": 114,
      "suggestion": {
        "suggested_methods_split": [
          "HealthAlertingSystemCore - Core methods: start_alerting, stop_alerting, process_health_event, resolve_alert, get_alert_statistics",
          "HealthAlertingSystemUtils - Utility methods: export_alert_data"
        ],
        "properties_to_extract": [
          "config_file",
          "default_config",
          "config_file",
          "default_channels",
          "alert_id",
          "alert",
          "message",
          "relevant_data",
          "severity_icon",
          "log_message",
          "log_file",
          "channel_config",
          "config",
          "smtp_server",
          "smtp_port",
          "smtp_user",
          "smtp_password",
          "from_email",
          "to_emails",
          "channel_config",
          "webhook_url",
          "channel_config",
          "webhook_url",
          "now",
          "cutoff_time",
          "now",
          "last_24h",
          "last_7d",
          "recent_alerts",
          "weekly_alerts",
          "resolved_alerts",
          "total_time",
          "data",
          "context",
          "result",
          "msg",
          "body",
          "server",
          "color_map",
          "payload",
          "service",
          "priority_map",
          "message",
          "payload",
          "alert_age_hours",
          "alert",
          "timestamp",
          "filepath",
          "config",
          "rule",
          "channel",
          "config_obj",
          "cooldown_end",
          "channel_config"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\health\\monitoring\\health_alerting.py",
      "function_name": "_handle_email_alert",
      "current_loc": 54,
      "limit": 50,
      "excess": 4,
      "severity": "minor",
      "line_number": 436,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _handle_email_alert",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\health\\monitoring\\health_alerting.py",
      "function_name": "_handle_slack_alert",
      "current_loc": 51,
      "limit": 50,
      "excess": 1,
      "severity": "minor",
      "line_number": 491,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _handle_slack_alert",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\health\\monitoring\\health_dashboard.py",
      "current_loc": 636,
      "limit": 400,
      "excess": 236,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "health_dashboard_core.py - Core classes: DashboardWidget, DashboardLayout",
          "health_dashboard_utils.py - Utility functions: __init__, _create_default_layout, _setup_routes",
          "health_dashboard_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 3,
          "functions": 17,
          "imports": 28
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\health\\monitoring\\health_dashboard.py",
      "class_name": "HealthMonitoringDashboard",
      "current_loc": 581,
      "limit": 100,
      "excess": 481,
      "severity": "major",
      "line_number": 56,
      "suggestion": {
        "suggested_methods_split": [
          "HealthMonitoringDashboardCore - Core methods: start_dashboard, stop_dashboard, dashboard, get_health_data, get_metrics",
          "HealthMonitoringDashboardUtils - Utility methods: get_alerts, get_metric_history, get_services, export_data"
        ],
        "properties_to_extract": [
          "widgets",
          "snapshot",
          "snapshot",
          "snapshot",
          "history",
          "cutoff",
          "snapshot",
          "filepath"
        ],
        "method_count": 9,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\health\\monitoring\\health_dashboard.py",
      "function_name": "_create_default_layout",
      "current_loc": 53,
      "limit": 50,
      "excess": 3,
      "severity": "minor",
      "line_number": 89,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _create_default_layout",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\health\\monitoring\\health_dashboard.py",
      "function_name": "_setup_routes",
      "current_loc": 80,
      "limit": 50,
      "excess": 30,
      "severity": "minor",
      "line_number": 143,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _setup_routes",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\health\\monitoring\\health_dashboard.py",
      "function_name": "_get_dashboard_html",
      "current_loc": 340,
      "limit": 50,
      "excess": 290,
      "severity": "minor",
      "line_number": 263,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _get_dashboard_html",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\health\\monitoring\\health_monitoring_service.py",
      "current_loc": 639,
      "limit": 400,
      "excess": 239,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "health_monitoring_service_core.py - Core classes: ServiceType, AlertSeverity",
          "health_monitoring_service_utils.py - Utility functions: __init__, _initialize_components, _load_configuration",
          "health_monitoring_service_types.py - Type definitions and imports"
        ],
        "estimated_splits": 4,
        "complexity_factors": {
          "classes": 8,
          "functions": 20,
          "imports": 46
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\health\\monitoring\\health_monitoring_service.py",
      "class_name": "HealthMonitoringService",
      "current_loc": 502,
      "limit": 100,
      "excess": 402,
      "severity": "major",
      "line_number": 138,
      "suggestion": {
        "suggested_methods_split": [
          "HealthMonitoringServiceCore - Core methods: start_monitoring, stop_monitoring, add_alert_handler, get_health_snapshot, export_health_data",
          "HealthMonitoringServiceUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "config_file",
          "default_config",
          "config_file",
          "alert_id",
          "alert",
          "cutoff_time",
          "one_hour_ago",
          "all_statuses",
          "snapshot",
          "data",
          "default_services",
          "health_url",
          "response",
          "cpu_percent",
          "cpu_metric",
          "memory",
          "memory_metric",
          "disk",
          "disk_metric",
          "network_metric",
          "overall_status",
          "timestamp",
          "filepath",
          "start_time",
          "elapsed",
          "sleep_time",
          "health_status",
          "availability_metric",
          "response_time",
          "recent_statuses",
          "overall_status",
          "config",
          "endpoint",
          "overall_status",
          "overall_status"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\health\\monitoring\\health_monitoring_service.py",
      "function_name": "_collect_system_metrics",
      "current_loc": 54,
      "limit": 50,
      "excess": 4,
      "severity": "minor",
      "line_number": 395,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _collect_system_metrics",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\health\\monitoring\\health_monitoring_system.py",
      "current_loc": 437,
      "limit": 400,
      "excess": 37,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "health_monitoring_system_core.py - Core classes: HealthMonitoringSystem",
          "health_monitoring_system_utils.py - Utility functions: main, __init__, _initialize_components",
          "health_monitoring_system_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 15,
          "imports": 33
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\health\\monitoring\\health_monitoring_system.py",
      "class_name": "HealthMonitoringSystem",
      "current_loc": 332,
      "limit": 100,
      "excess": 232,
      "severity": "major",
      "line_number": 45,
      "suggestion": {
        "suggested_methods_split": [
          "HealthMonitoringSystemCore - Core methods: start, stop, start_dashboard, stop_dashboard, get_health_snapshot",
          "HealthMonitoringSystemUtils - Utility methods: get_system_status, export_system_data, get_component_status, configure_alert_channel, create_custom_alert_rule"
        ],
        "properties_to_extract": [
          "status",
          "exports",
          "snapshot",
          "component_metrics",
          "component_alerts",
          "critical_alerts",
          "warning_alerts",
          "snapshot",
          "value",
          "critical_threshold",
          "warning_threshold",
          "alert_channel",
          "channel_config",
          "rule"
        ],
        "method_count": 10,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\health\\monitoring\\health_monitoring_system.py",
      "function_name": "main",
      "current_loc": 55,
      "limit": 50,
      "excess": 5,
      "severity": "minor",
      "line_number": 379,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from main",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\backup_disaster_recovery\\backup_system_core.py",
      "current_loc": 712,
      "limit": 400,
      "excess": 312,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "backup_system_core_core.py - Core classes: BackupSystemCore",
          "backup_system_core_utils.py - Utility functions: create_backup_system, __init__, _load_config",
          "backup_system_core_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 29,
          "imports": 25
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\backup_disaster_recovery\\backup_system_core.py",
      "class_name": "BackupSystemCore",
      "current_loc": 657,
      "limit": 100,
      "excess": 557,
      "severity": "major",
      "line_number": 46,
      "suggestion": {
        "suggested_methods_split": [
          "BackupSystemCoreCore - Core methods: ",
          "BackupSystemCoreUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "default_config",
          "backup_path",
          "file_list",
          "total_size",
          "checksums",
          "last_backup_time",
          "changed_files",
          "backup_path",
          "checksums",
          "last_full_backup_time",
          "changed_files",
          "backup_path",
          "checksums",
          "file_list",
          "source_path",
          "critical_paths",
          "exclude_patterns",
          "file_str",
          "all_files",
          "checksums",
          "backup_path",
          "current_checksums",
          "timestamp",
          "backup_path",
          "target_path",
          "parent_backup_id",
          "backup_path",
          "target_path",
          "parent_backup_id",
          "backup_path",
          "target_path",
          "retention_days",
          "cutoff_date",
          "source_path",
          "backup_id",
          "strategy_func",
          "backup_result",
          "content",
          "cursor",
          "result",
          "cursor",
          "result",
          "cursor",
          "result",
          "cursor",
          "result",
          "cursor",
          "backup_info",
          "recovery_id",
          "cursor",
          "result",
          "parent_info",
          "parent_info",
          "cursor",
          "old_backups",
          "cursor",
          "total_backups",
          "cursor",
          "total_size",
          "cursor",
          "by_type",
          "cursor",
          "recent_backups",
          "dir_path",
          "user_config"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\backup_disaster_recovery\\backup_system_core.py",
      "function_name": "_load_config",
      "current_loc": 57,
      "limit": 50,
      "excess": 7,
      "severity": "minor",
      "line_number": 67,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _load_config",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\backup_disaster_recovery\\backup_scheduler.py",
      "current_loc": 456,
      "limit": 400,
      "excess": 56,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "backup_scheduler_core.py - Core classes: BackupScheduler",
          "backup_scheduler_utils.py - Utility functions: create_backup_scheduler, __init__, _load_config",
          "backup_scheduler_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 22,
          "imports": 17
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\backup_disaster_recovery\\backup_scheduler.py",
      "class_name": "BackupScheduler",
      "current_loc": 409,
      "limit": 100,
      "excess": 309,
      "severity": "major",
      "line_number": 38,
      "suggestion": {
        "suggested_methods_split": [
          "BackupSchedulerCore - Core methods: stop",
          "BackupSchedulerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "default_config",
          "backup_schedules",
          "parts",
          "check_interval",
          "alerts",
          "threshold_hours",
          "threshold_time",
          "backups",
          "latest_backup",
          "latest_time",
          "threshold_percent",
          "threshold_count",
          "cutoff_time",
          "channels",
          "timestamp",
          "log_file",
          "timestamp",
          "notification",
          "webhook_url",
          "embed",
          "email_config",
          "cron_expression",
          "job_func",
          "backup_root",
          "statvfs",
          "total_space",
          "free_space",
          "used_space",
          "usage_percent",
          "cursor",
          "failure_count",
          "backup_result",
          "backup_result",
          "retention_days",
          "weekdays",
          "user_config",
          "day_name"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\backup_disaster_recovery\\backup_scheduler.py",
      "function_name": "_load_config",
      "current_loc": 58,
      "limit": 50,
      "excess": 8,
      "severity": "minor",
      "line_number": 53,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _load_config",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\backup_disaster_recovery\\business_continuity_planner.py",
      "current_loc": 886,
      "limit": 400,
      "excess": 486,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "business_continuity_planner_core.py - Core classes: DisasterType, RecoveryPriority",
          "business_continuity_planner_utils.py - Utility functions: create_business_continuity_planner, __init__, _load_config",
          "business_continuity_planner_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 3,
          "functions": 24,
          "imports": 20
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\backup_disaster_recovery\\business_continuity_planner.py",
      "class_name": "BusinessContinuityPlanner",
      "current_loc": 816,
      "limit": 100,
      "excess": 716,
      "severity": "major",
      "line_number": 61,
      "suggestion": {
        "suggested_methods_split": [
          "BusinessContinuityPlannerCore - Core methods: ",
          "BusinessContinuityPlannerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "default_config",
          "procedures",
          "scenarios",
          "impact_analysis",
          "system_priority",
          "rto_rpo",
          "impact_factors",
          "factors",
          "recovery_objectives",
          "recovery_objectives",
          "priority_weights",
          "weight",
          "impact_score",
          "requirements",
          "rto_rpo",
          "recovery_req",
          "estimated_recovery_time",
          "rto_minutes",
          "total_score",
          "system_count",
          "impact_analysis",
          "recovery_plan",
          "recovery_phases",
          "resource_req",
          "total_time",
          "phases",
          "all_resources",
          "total_duration",
          "criteria",
          "procedures",
          "plan_id",
          "execution_result",
          "phase_number",
          "phase_name",
          "phase_result",
          "test_result",
          "affected_systems",
          "recovery_plan",
          "execution_result",
          "score",
          "recommendations",
          "overall_score",
          "system_impact",
          "recovery_req",
          "downtime",
          "downtime_impact",
          "severity_weights",
          "severity_weight",
          "priority_weights",
          "priority_weight",
          "system_score",
          "test_scenarios",
          "total_score",
          "score",
          "downtime_impact",
          "downtime_impact",
          "phase_result",
          "scenario_result",
          "score",
          "score",
          "user_config"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\backup_disaster_recovery\\business_continuity_planner.py",
      "function_name": "_load_config",
      "current_loc": 160,
      "limit": 50,
      "excess": 110,
      "severity": "minor",
      "line_number": 76,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _load_config",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\backup_disaster_recovery\\business_continuity_planner.py",
      "function_name": "_create_recovery_phases",
      "current_loc": 61,
      "limit": 50,
      "excess": 11,
      "severity": "minor",
      "line_number": 487,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _create_recovery_phases",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\backup_disaster_recovery\\business_continuity_planner.py",
      "function_name": "_create_testing_procedures",
      "current_loc": 54,
      "limit": 50,
      "excess": 4,
      "severity": "minor",
      "line_number": 608,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _create_testing_procedures",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\backup_disaster_recovery\\business_continuity_planner.py",
      "function_name": "execute_recovery_plan",
      "current_loc": 52,
      "limit": 50,
      "excess": 2,
      "severity": "minor",
      "line_number": 663,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from execute_recovery_plan",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\backup_disaster_recovery\\backup_monitoring.py",
      "current_loc": 1050,
      "limit": 400,
      "excess": 650,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "backup_monitoring_core.py - Core classes: BackupMonitoringSystem",
          "backup_monitoring_utils.py - Utility functions: create_backup_monitoring_system, __init__, _load_config",
          "backup_monitoring_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 45,
          "imports": 21
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\backup_disaster_recovery\\backup_monitoring.py",
      "class_name": "BackupMonitoringSystem",
      "current_loc": 1001,
      "limit": 100,
      "excess": 901,
      "severity": "major",
      "line_number": 40,
      "suggestion": {
        "suggested_methods_split": [
          "BackupMonitoringSystemCore - Core methods: ",
          "BackupMonitoringSystemUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "default_config",
          "check_interval",
          "health_checks",
          "checks",
          "threshold_hours",
          "threshold_time",
          "backups",
          "latest_backup",
          "latest_time",
          "threshold_percent",
          "threshold_percent",
          "cutoff_time",
          "cpu_percent",
          "cpu_threshold",
          "memory",
          "memory_threshold",
          "integrity_failures",
          "recent_backups",
          "checks",
          "alert_id",
          "channels",
          "timestamp",
          "severity_emoji",
          "emoji",
          "log_file",
          "timestamp",
          "alert_data",
          "webhook_url",
          "color_map",
          "embed",
          "email_config",
          "escalation_config",
          "escalation_threshold",
          "escalation_minutes",
          "escalation_message",
          "retention_days",
          "cutoff_date",
          "age_hours",
          "backup_root",
          "usage",
          "usage_percent",
          "cursor",
          "total_backups",
          "cursor",
          "failed_backups",
          "failure_rate",
          "backup_root",
          "stats",
          "backups",
          "backup_root",
          "usage",
          "free_gb",
          "memory",
          "cpu_percent",
          "backups",
          "cpu_percent",
          "memory",
          "backup_root",
          "disk_usage",
          "stats",
          "backups",
          "free_gb",
          "start_time",
          "duration_ms",
          "test_file",
          "latest_backup",
          "backup_time",
          "age_hours",
          "cursor",
          "backup_count",
          "cursor",
          "checksum_count",
          "cursor",
          "total_count",
          "latest_backup",
          "backup_time",
          "age_hours",
          "cursor",
          "existing_alert",
          "cursor",
          "active_alerts",
          "last_escalation_time",
          "time_since_escalation",
          "cursor",
          "metrics_deleted",
          "cursor",
          "health_checks_deleted",
          "cursor",
          "active_alerts",
          "cursor",
          "recent_health_checks",
          "cursor",
          "recent_metrics",
          "cursor",
          "cursor",
          "user_config",
          "backup_path",
          "result",
          "backup_path",
          "result",
          "result",
          "result",
          "result",
          "result",
          "result",
          "result",
          "result",
          "result",
          "result",
          "result"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\backup_disaster_recovery\\backup_monitoring.py",
      "function_name": "_load_config",
      "current_loc": 94,
      "limit": 50,
      "excess": 44,
      "severity": "minor",
      "line_number": 56,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _load_config",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\core\\backup_disaster_recovery\\backup_monitoring.py",
      "function_name": "_init_monitoring_database",
      "current_loc": 63,
      "limit": 50,
      "excess": 13,
      "severity": "minor",
      "line_number": 151,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _init_monitoring_database",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\core\\backup_disaster_recovery\\backup_cli.py",
      "current_loc": 610,
      "limit": 400,
      "excess": 210,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "backup_cli_core.py - Core classes: BackupCLI",
          "backup_cli_utils.py - Utility functions: main, __init__, run",
          "backup_cli_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 33,
          "imports": 24
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\core\\backup_disaster_recovery\\backup_cli.py",
      "class_name": "BackupCLI",
      "current_loc": 555,
      "limit": 100,
      "excess": 455,
      "severity": "major",
      "line_number": 46,
      "suggestion": {
        "suggested_methods_split": [
          "BackupCLICore - Core methods: ",
          "BackupCLIUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "parser",
          "parsed_args",
          "parser",
          "subparsers",
          "backup_parser",
          "backup_subparsers",
          "create_parser",
          "list_parser",
          "info_parser",
          "delete_parser",
          "cleanup_parser",
          "recovery_parser",
          "monitor_parser",
          "monitor_subparsers",
          "start_parser",
          "stop_parser",
          "status_parser",
          "health_parser",
          "alerts_parser",
          "scheduler_parser",
          "scheduler_subparsers",
          "start_parser",
          "stop_parser",
          "status_parser",
          "manual_parser",
          "bcp_parser",
          "bcp_subparsers",
          "test_parser",
          "plan_parser",
          "execute_parser",
          "status_parser",
          "status_parser",
          "stats_parser",
          "config_parser",
          "config_subparsers",
          "show_parser",
          "validate_parser",
          "backup_result",
          "backups",
          "backups",
          "backup_info",
          "confirm",
          "retention_days",
          "restore_result",
          "status",
          "status",
          "result",
          "test_result",
          "disaster_type",
          "recovery_plan",
          "status",
          "stats",
          "monitor_status",
          "bcp_status",
          "stats",
          "config",
          "size_mb",
          "created"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\application\\use_cases\\assign_task_uc.py",
      "class_name": "AssignTaskUseCase",
      "current_loc": 102,
      "limit": 100,
      "excess": 2,
      "severity": "major",
      "line_number": 40,
      "suggestion": {
        "suggested_methods_split": [
          "AssignTaskUseCaseCore - Core methods: execute",
          "AssignTaskUseCaseUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "task",
          "event",
          "agent",
          "available_agents",
          "agent"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\application\\use_cases\\assign_task_uc.py",
      "function_name": "execute",
      "current_loc": 80,
      "limit": 50,
      "excess": 30,
      "severity": "minor",
      "line_number": 62,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from execute",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\application\\use_cases\\complete_task_uc.py",
      "function_name": "execute",
      "current_loc": 69,
      "limit": 50,
      "excess": 19,
      "severity": "minor",
      "line_number": 59,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from execute",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\architecture\\unified_architecture_core.py",
      "class_name": "UnifiedArchitectureCore",
      "current_loc": 102,
      "limit": 100,
      "excess": 2,
      "severity": "major",
      "line_number": 56,
      "suggestion": {
        "suggested_methods_split": [
          "UnifiedArchitectureCoreCore - Core methods: register_component, get_component, list_components, update_component_metrics, get_architecture_health",
          "UnifiedArchitectureCoreUtils - Utility methods: consolidate_architecture"
        ],
        "properties_to_extract": [
          "total_components",
          "active_components",
          "health_percentage",
          "health",
          "component",
          "dependencies"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\automation\\ui_onboarding.py",
      "class_name": "UIOnboarder",
      "current_loc": 125,
      "limit": 100,
      "excess": 25,
      "severity": "major",
      "line_number": 66,
      "suggestion": {
        "suggested_methods_split": [
          "UIOnboarderCore - Core methods: perform",
          "UIOnboarderUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "last",
          "oc",
          "last"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\discord_commander\\agent_communication_engine_operations.py",
      "class_name": "AgentCommunicationEngineOperations",
      "current_loc": 107,
      "limit": 100,
      "excess": 7,
      "severity": "major",
      "line_number": 25,
      "suggestion": {
        "suggested_methods_split": [
          "AgentCommunicationEngineOperationsCore - Core methods: get_agent_status_file_path",
          "AgentCommunicationEngineOperationsUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "agents",
          "successful_deliveries",
          "failed_deliveries",
          "status_file",
          "inbox_path",
          "cleaned_count",
          "current_time",
          "max_age_seconds",
          "result",
          "file_path",
          "file_age"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\discord_commander\\command_router.py",
      "class_name": "CommandRouter",
      "current_loc": 189,
      "limit": 100,
      "excess": 89,
      "severity": "major",
      "line_number": 24,
      "suggestion": {
        "suggested_methods_split": [
          "CommandRouterCore - Core methods: parse_command, validate_command, get_command_metadata, get_all_commands, generate_command_id",
          "CommandRouterUtils - Utility methods: sanitize_content, create_command_context"
        ],
        "properties_to_extract": [
          "message",
          "metadata",
          "timestamp",
          "content",
          "max_length",
          "match",
          "agent_id",
          "content",
          "agent_id",
          "agent_num"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\discord_commander\\command_router.py",
      "function_name": "__init__",
      "current_loc": 56,
      "limit": 50,
      "excess": 6,
      "severity": "minor",
      "line_number": 27,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from __init__",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\discord_commander\\discord_agent_bot.py",
      "current_loc": 661,
      "limit": 400,
      "excess": 261,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "discord_agent_bot_core.py - Core classes: DiscordAgentBot, DiscordAgentBotManager",
          "discord_agent_bot_utils.py - Utility functions: get_discord_bot_manager, start_discord_agent_bot, test_discord_bot_connection",
          "discord_agent_bot_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 2,
          "functions": 21,
          "imports": 74
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\discord_commander\\discord_agent_bot.py",
      "class_name": "DiscordAgentBot",
      "current_loc": 440,
      "limit": 100,
      "excess": 340,
      "severity": "major",
      "line_number": 93,
      "suggestion": {
        "suggested_methods_split": [
          "DiscordAgentBotCore - Core methods: get_command_stats",
          "DiscordAgentBotUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "global_rate",
          "user_cooldown",
          "config_path",
          "coordinates_path",
          "guild_id",
          "intents",
          "current_dir",
          "coordinates_path",
          "target_channel",
          "handled",
          "content",
          "author",
          "channel",
          "total_active",
          "context",
          "response_data",
          "agent_id",
          "data",
          "notification_msg",
          "error_embed",
          "embed",
          "response_data",
          "embed",
          "follow_up",
          "error_embed",
          "config",
          "response_data",
          "response_msg",
          "command_id",
          "channel",
          "response_data",
          "target_channel",
          "target_channel",
          "response_data",
          "result",
          "followup_data",
          "agents",
          "embed",
          "error_embed",
          "result",
          "followup_data",
          "embed",
          "error_embed",
          "result",
          "followup_data",
          "latency",
          "active_commands",
          "embed",
          "error_embed"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\discord_commander\\discord_agent_bot.py",
      "function_name": "__init__",
      "current_loc": 54,
      "limit": 50,
      "excess": 4,
      "severity": "minor",
      "line_number": 96,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from __init__",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\discord_commander\\discord_agent_bot.py",
      "function_name": "_send_startup_notification",
      "current_loc": 63,
      "limit": 50,
      "excess": 13,
      "severity": "minor",
      "line_number": 229,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _send_startup_notification",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\discord_commander\\discord_agent_bot.py",
      "function_name": "process_command",
      "current_loc": 154,
      "limit": 50,
      "excess": 104,
      "severity": "minor",
      "line_number": 334,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from process_command",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\discord_commander\\discord_agent_bot_backup.py",
      "current_loc": 718,
      "limit": 400,
      "excess": 318,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "discord_agent_bot_backup_core.py - Core classes: DiscordAgentBot, DiscordAgentBotManager",
          "discord_agent_bot_backup_utils.py - Utility functions: get_discord_bot_manager, start_discord_agent_bot, test_discord_bot_connection",
          "discord_agent_bot_backup_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 2,
          "functions": 28,
          "imports": 57
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\discord_commander\\discord_agent_bot_backup.py",
      "class_name": "DiscordAgentBot",
      "current_loc": 257,
      "limit": 100,
      "excess": 157,
      "severity": "major",
      "line_number": 55,
      "suggestion": {
        "suggested_methods_split": [
          "DiscordAgentBotCore - Core methods: get_command_stats",
          "DiscordAgentBotUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "global_rate",
          "user_cooldown",
          "config_path",
          "agent_map_path",
          "guild_id",
          "intents",
          "content",
          "author",
          "channel",
          "total_active",
          "context",
          "response_data",
          "error_embed",
          "embed",
          "response_data",
          "embed",
          "follow_up",
          "error_embed",
          "config",
          "response_data",
          "response_msg",
          "command_id",
          "response_data",
          "agents",
          "embed",
          "result",
          "followup_data",
          "embed",
          "error_embed",
          "result",
          "followup_data",
          "latency",
          "active_commands",
          "embed",
          "error_embed"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\discord_commander\\discord_agent_bot_backup.py",
      "function_name": "process_command",
      "current_loc": 132,
      "limit": 50,
      "excess": 82,
      "severity": "minor",
      "line_number": 169,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from process_command",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\discord_commander\\discord_agent_bot_backup.py",
      "function_name": "_handle_swarm_command",
      "current_loc": 52,
      "limit": 50,
      "excess": 2,
      "severity": "minor",
      "line_number": 415,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _handle_swarm_command",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\discord_commander\\discord_agent_bot_clean.py",
      "current_loc": 436,
      "limit": 400,
      "excess": 36,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "discord_agent_bot_clean_core.py - Core classes: DiscordAgentBot, DiscordAgentBotManager",
          "discord_agent_bot_clean_utils.py - Utility functions: get_discord_bot_manager, start_discord_agent_bot, test_discord_bot_connection",
          "discord_agent_bot_clean_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 2,
          "functions": 17,
          "imports": 50
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\discord_commander\\discord_agent_bot_clean.py",
      "class_name": "DiscordAgentBot",
      "current_loc": 257,
      "limit": 100,
      "excess": 157,
      "severity": "major",
      "line_number": 51,
      "suggestion": {
        "suggested_methods_split": [
          "DiscordAgentBotCore - Core methods: get_command_stats",
          "DiscordAgentBotUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "global_rate",
          "user_cooldown",
          "config_path",
          "agent_map_path",
          "guild_id",
          "intents",
          "content",
          "author",
          "channel",
          "total_active",
          "context",
          "response_data",
          "error_embed",
          "embed",
          "response_data",
          "embed",
          "follow_up",
          "error_embed",
          "config",
          "response_data",
          "response_msg",
          "command_id",
          "response_data",
          "agents",
          "embed",
          "result",
          "followup_data",
          "embed",
          "error_embed",
          "result",
          "followup_data",
          "latency",
          "active_commands",
          "embed",
          "error_embed"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\discord_commander\\discord_agent_bot_clean.py",
      "function_name": "process_command",
      "current_loc": 132,
      "limit": 50,
      "excess": 82,
      "severity": "minor",
      "line_number": 165,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from process_command",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\discord_commander\\discord_commander.py",
      "class_name": "DiscordCommander",
      "current_loc": 249,
      "limit": 100,
      "excess": 149,
      "severity": "major",
      "line_number": 26,
      "suggestion": {
        "suggested_methods_split": [
          "DiscordCommanderCore - Core methods: stop_monitoring",
          "DiscordCommanderUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "new_files",
          "parts",
          "metadata",
          "lines",
          "summary",
          "status_data",
          "coordination_data",
          "webhook_test",
          "test_message",
          "broadcast_result",
          "agent_test",
          "devlog_test_data",
          "devlog_test",
          "all_tests_pass",
          "new_devlogs",
          "filename",
          "metadata",
          "devlog_data",
          "line",
          "summary",
          "agent",
          "category",
          "message",
          "result",
          "content"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\discord_commander\\discord_webhook_integration.py",
      "current_loc": 672,
      "limit": 400,
      "excess": 272,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "discord_webhook_integration_core.py - Core classes: DiscordWebhookIntegration",
          "discord_webhook_integration_utils.py - Utility functions: __init__, _load_webhook_url, send_devlog_notification",
          "discord_webhook_integration_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 23,
          "imports": 12
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\discord_commander\\discord_webhook_integration.py",
      "class_name": "DiscordWebhookIntegration",
      "current_loc": 642,
      "limit": 100,
      "excess": 542,
      "severity": "major",
      "line_number": 31,
      "suggestion": {
        "suggested_methods_split": [
          "DiscordWebhookIntegrationCore - Core methods: send_devlog_notification, send_agent_status_notification, send_swarm_coordination_notification, send_contract_assignment_notification, send_mission_progress_notification",
          "DiscordWebhookIntegrationUtils - Utility methods: send_error_recovery_notification, send_coordination_event_notification, get_coordination_status, update_agent_status_cache, clear_coordination_cache"
        ],
        "properties_to_extract": [
          "SWARM_AVATARS",
          "webhook_url",
          "title",
          "description",
          "category",
          "agent",
          "colors",
          "embed",
          "agent_id",
          "status",
          "last_activity",
          "status_colors",
          "embed",
          "topic",
          "priority",
          "participants",
          "priority_colors",
          "embed",
          "contract_id",
          "title",
          "agent_id",
          "priority",
          "deadline",
          "priority_colors",
          "embed",
          "mission_id",
          "title",
          "progress",
          "agent_id",
          "status",
          "embed",
          "error_type",
          "recovery_status",
          "agent_id",
          "embed",
          "event_type",
          "participants",
          "priority",
          "priority_colors",
          "embed",
          "config_path",
          "embed",
          "payload",
          "response",
          "embed",
          "payload",
          "response",
          "embed",
          "payload",
          "response",
          "data_file",
          "data_file",
          "data",
          "embed",
          "payload",
          "response",
          "embed",
          "payload",
          "response",
          "embed",
          "payload",
          "response",
          "embed",
          "payload",
          "response",
          "color",
          "color",
          "test_payload",
          "response",
          "contract_id",
          "mission_id",
          "progress",
          "error_type",
          "recovery_status",
          "event_type",
          "color",
          "color",
          "color",
          "data",
          "color",
          "color",
          "config",
          "webhook_url"
        ],
        "method_count": 11,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\discord_commander\\embeds.py",
      "current_loc": 526,
      "limit": 400,
      "excess": 126,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "embeds_core.py - Core classes: EmbedBuilder, EmbedManager",
          "embeds_utils.py - Utility functions: create_embed_builder, create_embed_manager, create_base_embed",
          "embeds_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 2,
          "functions": 26,
          "imports": 5
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\discord_commander\\embeds.py",
      "class_name": "EmbedBuilder",
      "current_loc": 431,
      "limit": 100,
      "excess": 331,
      "severity": "major",
      "line_number": 25,
      "suggestion": {
        "suggested_methods_split": [
          "EmbedBuilderCore - Core methods: create_base_embed, add_footer, create_prompt_embed, update_prompt_embed_success, update_prompt_embed_error",
          "EmbedBuilderUtils - Utility methods: create_direct_agent_embed, create_urgent_broadcast_embed, create_status_embed, update_status_embed, create_swarm_embed"
        ],
        "properties_to_extract": [
          "COLORS",
          "embed",
          "footer_text",
          "embed",
          "embed",
          "embed",
          "embed",
          "status_emoji",
          "embed",
          "embed",
          "agent_list",
          "embed",
          "main_commands",
          "swarm_commands",
          "summary_commands",
          "slash_commands",
          "utility_commands",
          "alias_commands",
          "embed",
          "embed",
          "embed",
          "embed",
          "status"
        ],
        "method_count": 22,
        "estimated_classes": 2
      }
    },
    {
      "type": "function_loc",
      "path": "src\\discord_commander\\embeds.py",
      "function_name": "create_help_embed",
      "current_loc": 92,
      "limit": 50,
      "excess": 42,
      "severity": "minor",
      "line_number": 318,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from create_help_embed",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\discord_commander\\handlers_agent_summary.py",
      "class_name": "AgentSummary",
      "current_loc": 122,
      "limit": 100,
      "excess": 22,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "AgentSummaryCore - Core methods: ",
          "AgentSummaryUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "embed",
          "result",
          "embed",
          "agent_key",
          "error_embed"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\discord_commander\\handlers_agents.py",
      "class_name": "AgentCommandHandlers",
      "current_loc": 341,
      "limit": 100,
      "excess": 241,
      "severity": "major",
      "line_number": 32,
      "suggestion": {
        "suggested_methods_split": [
          "AgentCommandHandlersCore - Core methods: get_active_command_count, get_agent_command_stats",
          "AgentCommandHandlersUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "author",
          "channel",
          "agent_id",
          "prompt",
          "command_id",
          "prompt_embed",
          "command_data",
          "agent_id",
          "author",
          "channel",
          "agent_id",
          "status_embed",
          "workspace_path",
          "agent_commands",
          "cutoff_time",
          "to_remove",
          "author",
          "channel",
          "agent_id",
          "command_id",
          "direct_embed",
          "command_data",
          "agent_id",
          "error_embed",
          "updated_embed",
          "updated_embed",
          "error_embed",
          "status_info",
          "updated_embed",
          "inbox_path",
          "error_embed",
          "error_embed",
          "updated_embed",
          "updated_embed",
          "updated_embed",
          "inbox_files",
          "recent_files",
          "active_commands",
          "active_commands"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\discord_commander\\handlers_agents.py",
      "function_name": "handle_direct_agent_command",
      "current_loc": 65,
      "limit": 50,
      "excess": 15,
      "severity": "minor",
      "line_number": 267,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from handle_direct_agent_command",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\discord_commander\\handlers_swarm.py",
      "current_loc": 436,
      "limit": 400,
      "excess": 36,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "handlers_swarm_core.py - Core classes: SwarmCommandHandlers",
          "handlers_swarm_utils.py - Utility functions: create_swarm_command_handlers, __init__, handle_swarm_command",
          "handlers_swarm_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 14,
          "imports": 16
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\discord_commander\\handlers_swarm.py",
      "class_name": "SwarmCommandHandlers",
      "current_loc": 395,
      "limit": 100,
      "excess": 295,
      "severity": "major",
      "line_number": 30,
      "suggestion": {
        "suggested_methods_split": [
          "SwarmCommandHandlersCore - Core methods: get_swarm_agent_list, get_swarm_stats, get_active_broadcast_count, get_broadcast_stats",
          "SwarmCommandHandlersUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "author",
          "channel",
          "message",
          "command_id",
          "broadcast_embed",
          "broadcast_data",
          "recipient_count",
          "author",
          "channel",
          "message",
          "command_id",
          "urgent_embed",
          "broadcast_data",
          "message",
          "agents",
          "active_broadcasts",
          "total_broadcasts",
          "broadcast_types",
          "cutoff_time",
          "to_remove",
          "updated_embed",
          "updated_embed",
          "error_embed",
          "updated_embed",
          "updated_embed",
          "result",
          "urgent_message",
          "success",
          "results",
          "successful_count",
          "total_count",
          "broadcast_type",
          "agents",
          "status_results",
          "swarm_stats",
          "health_report"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\discord_commander\\handlers_swarm.py",
      "function_name": "execute_urgent_broadcast",
      "current_loc": 71,
      "limit": 50,
      "excess": 21,
      "severity": "minor",
      "line_number": 243,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from execute_urgent_broadcast",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\discord_commander\\handlers_swarm.py",
      "function_name": "coordinate_swarm_action",
      "current_loc": 58,
      "limit": 50,
      "excess": 8,
      "severity": "minor",
      "line_number": 331,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from coordinate_swarm_action",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\discord_commander\\discord_dynamic_agent_commands.py",
      "function_name": "setup_dynamic_agent_commands",
      "current_loc": 173,
      "limit": 50,
      "excess": 123,
      "severity": "minor",
      "line_number": 148,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from setup_dynamic_agent_commands",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\discord_commander\\enhanced_discord_integration.py",
      "current_loc": 1012,
      "limit": 400,
      "excess": 612,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "enhanced_discord_integration_core.py - Core classes: AgentChannel, DiscordChannelConfig",
          "enhanced_discord_integration_utils.py - Utility functions: get_enhanced_discord_commander, start_enhanced_discord_monitoring, send_devlog_to_discord",
          "enhanced_discord_integration_types.py - Type definitions and imports"
        ],
        "estimated_splits": 4,
        "complexity_factors": {
          "classes": 9,
          "functions": 43,
          "imports": 28
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\discord_commander\\enhanced_discord_integration.py",
      "class_name": "EnhancedDiscordWebhookManager",
      "current_loc": 276,
      "limit": 100,
      "excess": 176,
      "severity": "major",
      "line_number": 103,
      "suggestion": {
        "suggested_methods_split": [
          "EnhancedDiscordWebhookManagerCore - Core methods: set_channel_webhook, get_channel_config, send_to_channel, test_channel_webhook, get_all_channels",
          "EnhancedDiscordWebhookManagerUtils - Utility methods: get_agent_channel"
        ],
        "properties_to_extract": [
          "default_channels",
          "config",
          "bot_token",
          "test_message",
          "config_data",
          "payload",
          "response",
          "client",
          "data",
          "channel_obj",
          "content",
          "username",
          "avatar_url",
          "channel",
          "embed",
          "discord_embed",
          "webhook_payload"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\discord_commander\\enhanced_discord_integration.py",
      "class_name": "AgentChannelCoordinator",
      "current_loc": 171,
      "limit": 100,
      "excess": 71,
      "severity": "major",
      "line_number": 381,
      "suggestion": {
        "suggested_methods_split": [
          "AgentChannelCoordinatorCore - Core methods: create_agent_notification_embed",
          "AgentChannelCoordinatorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "config",
          "color",
          "priority_colors",
          "embed",
          "color",
          "embed",
          "message",
          "success",
          "notification",
          "success1",
          "success2",
          "success3",
          "to_channel",
          "notification",
          "agent_channel",
          "notification",
          "success2",
          "success3",
          "agent_channel"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\discord_commander\\enhanced_discord_integration.py",
      "class_name": "EnhancedDevLogMonitor",
      "current_loc": 166,
      "limit": 100,
      "excess": 66,
      "severity": "major",
      "line_number": 554,
      "suggestion": {
        "suggested_methods_split": [
          "EnhancedDevLogMonitorCore - Core methods: stop_monitoring",
          "EnhancedDevLogMonitorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "new_files",
          "agent",
          "category",
          "parts",
          "metadata",
          "lines",
          "summary",
          "new_devlogs",
          "metadata",
          "agent",
          "devlog_data",
          "agent_channel",
          "line",
          "summary",
          "content",
          "notification"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\discord_commander\\enhanced_discord_integration.py",
      "class_name": "EnhancedDiscordCommander",
      "current_loc": 156,
      "limit": 100,
      "excess": 56,
      "severity": "major",
      "line_number": 722,
      "suggestion": {
        "suggested_methods_split": [
          "EnhancedDiscordCommanderCore - Core methods: configure_channel_webhook, get_channel_info",
          "EnhancedDiscordCommanderUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "success_count",
          "total_channels",
          "info",
          "init_success",
          "agent_test",
          "broadcast_test",
          "all_tests_pass",
          "config",
          "agent_channel",
          "notification",
          "channel_info"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\discord_commander\\enhanced_discord_integration.py",
      "function_name": "send_devlog_to_discord",
      "current_loc": 94,
      "limit": 50,
      "excess": 44,
      "severity": "minor",
      "line_number": 910,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from send_devlog_to_discord",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\discord_commander\\enhanced_discord_integration.py",
      "function_name": "_create_default_channels",
      "current_loc": 61,
      "limit": 50,
      "excess": 11,
      "severity": "minor",
      "line_number": 130,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _create_default_channels",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\discord_commander\\enhanced_discord_integration.py",
      "function_name": "_send_via_channel_id",
      "current_loc": 95,
      "limit": 50,
      "excess": 45,
      "severity": "minor",
      "line_number": 265,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _send_via_channel_id",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\discord_commander\\enhanced_discord_integration.py",
      "function_name": "send_discord_message",
      "current_loc": 62,
      "limit": 50,
      "excess": 12,
      "severity": "minor",
      "line_number": 291,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from send_discord_message",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\discord_commander\\enhanced_discord_integration.py",
      "function_name": "on_ready",
      "current_loc": 57,
      "limit": 50,
      "excess": 7,
      "severity": "minor",
      "line_number": 296,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from on_ready",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\domain\\entities\\agent.py",
      "class_name": "Agent",
      "current_loc": 107,
      "limit": 100,
      "excess": 7,
      "severity": "major",
      "line_number": 16,
      "suggestion": {
        "suggested_methods_split": [
          "AgentCore - Core methods: current_task_count, can_accept_more_tasks, workload_percentage, has_capability, add_capability",
          "AgentUtils - Utility methods: remove_capability, assign_task, complete_task, deactivate, reactivate"
        ],
        "properties_to_extract": [],
        "method_count": 11,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\domain\\services\\assignment_service.py",
      "class_name": "AssignmentService",
      "current_loc": 117,
      "limit": 100,
      "excess": 17,
      "severity": "major",
      "line_number": 14,
      "suggestion": {
        "suggested_methods_split": [
          "AssignmentServiceCore - Core methods: find_best_agent_for_task, validate_assignment",
          "AssignmentServiceUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "suitable_agents",
          "scored_agents",
          "best_agent",
          "workload_factor",
          "capacity_factor",
          "priority_factor",
          "score",
          "score"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\gaming\\performance_validation.py",
      "class_name": "GamingPerformanceValidator",
      "current_loc": 195,
      "limit": 100,
      "excess": 95,
      "severity": "major",
      "line_number": 31,
      "suggestion": {
        "suggested_methods_split": [
          "GamingPerformanceValidatorCore - Core methods: generate_performance_report",
          "GamingPerformanceValidatorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "core",
          "init_time",
          "start_time",
          "session",
          "session_time",
          "start_time",
          "status",
          "status_time",
          "start_time",
          "fps_metrics",
          "fps_time",
          "start_time",
          "memory_metrics",
          "memory_time",
          "start_time",
          "cpu_metrics",
          "cpu_time",
          "start_time",
          "network_metrics",
          "network_time",
          "total_time",
          "test_data",
          "start_time",
          "session_time",
          "start_time",
          "perf_time",
          "start_time",
          "health_time",
          "start_time",
          "interaction_time",
          "total_time",
          "start_time",
          "session_time",
          "start_time",
          "fps_time",
          "start_time",
          "memory_time",
          "results",
          "all_passed",
          "report"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\gaming\\gaming_integration_core.py",
      "class_name": "GamingIntegrationCore",
      "current_loc": 113,
      "limit": 100,
      "excess": 13,
      "severity": "major",
      "line_number": 238,
      "suggestion": {
        "suggested_methods_split": [
          "GamingIntegrationCoreCore - Core methods: create_game_session, get_game_session, end_game_session, get_active_sessions, register_entertainment_system",
          "GamingIntegrationCoreUtils - Utility methods: get_entertainment_system, get_all_entertainment_systems, register_event_handler, handle_event, get_status"
        ],
        "properties_to_extract": [
          "game_type_str",
          "handler"
        ],
        "method_count": 12,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\gaming\\handlers\\gaming_alert_handlers.py",
      "function_name": "handle_performance_alerts",
      "current_loc": 59,
      "limit": 50,
      "excess": 9,
      "severity": "minor",
      "line_number": 13,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from handle_performance_alerts",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\gaming\\integration\\core.py",
      "class_name": "GamingIntegrationCore",
      "current_loc": 119,
      "limit": 100,
      "excess": 19,
      "severity": "major",
      "line_number": 15,
      "suggestion": {
        "suggested_methods_split": [
          "GamingIntegrationCoreCore - Core methods: create_game_session, end_game_session, get_active_sessions, get_system_status, process_event",
          "GamingIntegrationCoreUtils - Utility methods: register_entertainment_system"
        ],
        "properties_to_extract": [
          "GameType",
          "session_id",
          "session",
          "session",
          "event_type",
          "handler",
          "system",
          "game_type",
          "player_id",
          "session",
          "session_id"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\infrastructure\\unified_browser_service.py",
      "current_loc": 670,
      "limit": 400,
      "excess": 270,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "unified_browser_service_core.py - Core classes: BrowserConfig, TheaConfig",
          "unified_browser_service_utils.py - Utility functions: create_browser_service, start, stop",
          "unified_browser_service_types.py - Type definitions and imports"
        ],
        "estimated_splits": 5,
        "complexity_factors": {
          "classes": 10,
          "functions": 59,
          "imports": 24
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\infrastructure\\unified_browser_service.py",
      "class_name": "ChromeBrowserAdapter",
      "current_loc": 122,
      "limit": 100,
      "excess": 22,
      "severity": "major",
      "line_number": 134,
      "suggestion": {
        "suggested_methods_split": [
          "ChromeBrowserAdapterCore - Core methods: start, stop, navigate, get_current_url, get_title",
          "ChromeBrowserAdapterUtils - Utility methods: find_element, find_elements, execute_script, is_running, get_cookies"
        ],
        "properties_to_extract": [
          "options"
        ],
        "method_count": 11,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\infrastructure\\unified_browser_service.py",
      "class_name": "BrowserOperations",
      "current_loc": 105,
      "limit": 100,
      "excess": 5,
      "severity": "major",
      "line_number": 435,
      "suggestion": {
        "suggested_methods_split": [
          "BrowserOperationsCore - Core methods: navigate_to_conversation, send_message, wait_for_response_ready, get_page_status",
          "BrowserOperationsUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "target_url",
          "success",
          "start_time",
          "input_element",
          "send_button",
          "input_element",
          "title"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\infrastructure\\unified_logging_time.py",
      "current_loc": 572,
      "limit": 400,
      "excess": 172,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "unified_logging_time_core.py - Core classes: LogLevel, LoggingConfig",
          "unified_logging_time_utils.py - Utility functions: create_logging_time_service, debug, info",
          "unified_logging_time_types.py - Type definitions and imports"
        ],
        "estimated_splits": 6,
        "complexity_factors": {
          "classes": 12,
          "functions": 73,
          "imports": 20
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\infrastructure\\unified_logging_time.py",
      "class_name": "UnifiedLogger",
      "current_loc": 101,
      "limit": 100,
      "excess": 1,
      "severity": "major",
      "line_number": 156,
      "suggestion": {
        "suggested_methods_split": [
          "UnifiedLoggerCore - Core methods: debug, info, warning, error, critical",
          "UnifiedLoggerUtils - Utility methods: log"
        ],
        "properties_to_extract": [
          "level_mapping",
          "formatter",
          "mapping",
          "console_handler",
          "log_dir",
          "file_handler"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\infrastructure\\unified_logging_time.py",
      "class_name": "UnifiedLoggingTimeService",
      "current_loc": 127,
      "limit": 100,
      "excess": 27,
      "severity": "major",
      "line_number": 407,
      "suggestion": {
        "suggested_methods_split": [
          "UnifiedLoggingTimeServiceCore - Core methods: get_logger, debug, info, warning, error",
          "UnifiedLoggingTimeServiceUtils - Utility methods: critical, now, utcnow, from_timestamp, to_timestamp"
        ],
        "properties_to_extract": [],
        "method_count": 23,
        "estimated_classes": 2
      }
    },
    {
      "type": "file_loc",
      "path": "src\\infrastructure\\unified_persistence.py",
      "current_loc": 703,
      "limit": 400,
      "excess": 303,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "unified_persistence_core.py - Core classes: PersistenceConfig, DatabaseConnection",
          "unified_persistence_utils.py - Utility functions: create_persistence_service, __init__, get_connection",
          "unified_persistence_types.py - Type definitions and imports"
        ],
        "estimated_splits": 4,
        "complexity_factors": {
          "classes": 9,
          "functions": 53,
          "imports": 21
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\infrastructure\\unified_persistence.py",
      "class_name": "AgentRepository",
      "current_loc": 171,
      "limit": 100,
      "excess": 71,
      "severity": "major",
      "line_number": 170,
      "suggestion": {
        "suggested_methods_split": [
          "AgentRepositoryCore - Core methods: get, get_by_capability, get_active, get_available, save",
          "AgentRepositoryUtils - Utility methods: delete, list_all"
        ],
        "properties_to_extract": [
          "schema",
          "rows",
          "rows",
          "rows",
          "rows",
          "affected",
          "rows",
          "capabilities",
          "created_at",
          "last_active_at",
          "capabilities",
          "capabilities"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\infrastructure\\unified_persistence.py",
      "class_name": "TaskRepository",
      "current_loc": 149,
      "limit": 100,
      "excess": 49,
      "severity": "major",
      "line_number": 343,
      "suggestion": {
        "suggested_methods_split": [
          "TaskRepositoryCore - Core methods: get, get_by_agent, get_pending, save, delete",
          "TaskRepositoryUtils - Utility methods: list_all"
        ],
        "properties_to_extract": [
          "schema",
          "rows",
          "rows",
          "rows",
          "affected",
          "rows",
          "created_at",
          "assigned_at",
          "completed_at"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\infrastructure\\unified_persistence.py",
      "class_name": "UnifiedPersistenceService",
      "current_loc": 105,
      "limit": 100,
      "excess": 5,
      "severity": "major",
      "line_number": 561,
      "suggestion": {
        "suggested_methods_split": [
          "UnifiedPersistenceServiceCore - Core methods: save_agent, get_agent, delete_agent, list_agents, get_active_agents",
          "UnifiedPersistenceServiceUtils - Utility methods: get_available_agents, get_agents_by_capability, save_task, get_task, delete_task"
        ],
        "properties_to_extract": [],
        "method_count": 16,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\infrastructure\\unified_persistence.py",
      "function_name": "get_database_stats",
      "current_loc": 58,
      "limit": 50,
      "excess": 8,
      "severity": "minor",
      "line_number": 501,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from get_database_stats",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\infrastructure\\infrastructure_monitoring_integration.py",
      "current_loc": 492,
      "limit": 400,
      "excess": 92,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "infrastructure_monitoring_integration_core.py - Core classes: InfrastructureHealthMetrics, InfrastructureServiceStatus",
          "infrastructure_monitoring_integration_utils.py - Utility functions: get_infrastructure_monitor, start_infrastructure_monitoring, stop_infrastructure_monitoring",
          "infrastructure_monitoring_integration_types.py - Type definitions and imports"
        ],
        "estimated_splits": 4,
        "complexity_factors": {
          "classes": 9,
          "functions": 26,
          "imports": 32
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\infrastructure\\infrastructure_monitoring_integration.py",
      "class_name": "InfrastructureMonitoringIntegration",
      "current_loc": 356,
      "limit": 100,
      "excess": 256,
      "severity": "major",
      "line_number": 113,
      "suggestion": {
        "suggested_methods_split": [
          "InfrastructureMonitoringIntegrationCore - Core methods: start_monitoring, stop_monitoring, get_infrastructure_health",
          "InfrastructureMonitoringIntegrationUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "services",
          "summary",
          "services_healthy",
          "disk_usage",
          "start_time",
          "test_file",
          "log_dir",
          "config_files",
          "backup_dir",
          "cache_size",
          "test_dir",
          "test_file",
          "test_logger",
          "infra_metrics",
          "service_statuses",
          "operation_time",
          "total_log_size",
          "backup_files",
          "most_recent",
          "age_hours"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\infrastructure\\browser\\thea_modules\\browser_ops.py",
      "class_name": "TheaBrowserOperations",
      "current_loc": 184,
      "limit": 100,
      "excess": 84,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "TheaBrowserOperationsCore - Core methods: navigate_to_conversation, send_message, wait_for_response_ready, get_page_status",
          "TheaBrowserOperationsUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "selectors",
          "fallback_selectors",
          "selectors",
          "fallback_selectors",
          "config",
          "input_element",
          "send_button",
          "element",
          "element",
          "input_element",
          "title",
          "conversation_elements",
          "element",
          "element"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\infrastructure\\browser\\thea_modules\\content_scraper.py",
      "class_name": "TheaContentScraper",
      "current_loc": 180,
      "limit": 100,
      "excess": 80,
      "severity": "major",
      "line_number": 39,
      "suggestion": {
        "suggested_methods_split": [
          "TheaContentScraperCore - Core methods: scrape_content, validate_content",
          "TheaContentScraperUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "content",
          "content",
          "content",
          "content",
          "content",
          "content",
          "metadata",
          "project_patterns",
          "file_types_found",
          "score",
          "total_weight",
          "length",
          "word_count",
          "sentences",
          "issues",
          "cleaned_content",
          "metadata",
          "quality_score",
          "processing_time"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\infrastructure\\browser\\thea_modules\\content_scraper.py",
      "function_name": "_calculate_quality_score",
      "current_loc": 54,
      "limit": 50,
      "excess": 4,
      "severity": "minor",
      "line_number": 131,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _calculate_quality_score",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\infrastructure\\browser\\thea_modules\\profile.py",
      "class_name": "TheaManagerProfile",
      "current_loc": 242,
      "limit": 100,
      "excess": 142,
      "severity": "major",
      "line_number": 24,
      "suggestion": {
        "suggested_methods_split": [
          "TheaManagerProfileCore - Core methods: initialize, send_message_and_wait, get_status, scrape_current_content, validate_setup",
          "TheaManagerProfileUtils - Utility methods: cleanup"
        ],
        "properties_to_extract": [
          "issues",
          "config_issues",
          "status",
          "response",
          "status",
          "current_response",
          "page_status",
          "scraped_content",
          "page_status",
          "progress"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\infrastructure\\browser\\thea_modules\\response_collector.py",
      "class_name": "TheaResponseCollector",
      "current_loc": 167,
      "limit": 100,
      "excess": 67,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "TheaResponseCollectorCore - Core methods: collect_full_response, poll_for_completion, wait_for_response_start, get_response_metadata",
          "TheaResponseCollectorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "last_response_length",
          "stable_count",
          "max_stable_count",
          "start_time",
          "start_time",
          "response_element",
          "fallback_selectors",
          "thinking_indicators",
          "send_buttons",
          "current_response",
          "current_length",
          "element",
          "last_response_length",
          "stable_count",
          "last_response_length",
          "stable_count"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\infrastructure\\browser\\thea_modules\\response_collector.py",
      "function_name": "collect_full_response",
      "current_loc": 56,
      "limit": 50,
      "excess": 6,
      "severity": "minor",
      "line_number": 34,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from collect_full_response",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "src\\infrastructure\\logging\\unified_logging_system.py",
      "current_loc": 455,
      "limit": 400,
      "excess": 55,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "unified_logging_system_core.py - Core classes: LogLevel, LogFormat",
          "unified_logging_system_utils.py - Utility functions: get_unified_logger, configure_logging, set_correlation_id",
          "unified_logging_system_types.py - Type definitions and imports"
        ],
        "estimated_splits": 4,
        "complexity_factors": {
          "classes": 8,
          "functions": 28,
          "imports": 26
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\infrastructure\\logging\\unified_logging_system.py",
      "class_name": "UnifiedLogger",
      "current_loc": 184,
      "limit": 100,
      "excess": 84,
      "severity": "major",
      "line_number": 129,
      "suggestion": {
        "suggested_methods_split": [
          "UnifiedLoggerCore - Core methods: configure, get_logger, set_correlation_id, get_correlation_id, add_swarm_context",
          "UnifiedLoggerUtils - Utility methods: get_swarm_context, log_performance_metric, shutdown"
        ],
        "properties_to_extract": [
          "_lock",
          "root_logger",
          "level_map",
          "summary",
          "perf_logger",
          "console_handler",
          "file_handler",
          "logger",
          "swarm_logger",
          "metric",
          "operation"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\infrastructure\\persistence\\sqlite_agent_repo.py",
      "class_name": "SqliteAgentRepository",
      "current_loc": 273,
      "limit": 100,
      "excess": 173,
      "severity": "major",
      "line_number": 18,
      "suggestion": {
        "suggested_methods_split": [
          "SqliteAgentRepositoryCore - Core methods: get, get_by_capability, get_active, get_available, add",
          "SqliteAgentRepositoryUtils - Utility methods: save, delete, list_all"
        ],
        "properties_to_extract": [
          "conn",
          "capabilities",
          "created_at",
          "last_active_at",
          "row",
          "rows",
          "rows",
          "rows",
          "cursor",
          "rows",
          "agent",
          "capabilities",
          "capabilities"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\infrastructure\\persistence\\sqlite_task_repo.py",
      "class_name": "SqliteTaskRepository",
      "current_loc": 254,
      "limit": 100,
      "excess": 154,
      "severity": "major",
      "line_number": 18,
      "suggestion": {
        "suggested_methods_split": [
          "SqliteTaskRepositoryCore - Core methods: get, get_by_agent, get_pending, add, save",
          "SqliteTaskRepositoryUtils - Utility methods: delete, list_all"
        ],
        "properties_to_extract": [
          "conn",
          "created_at",
          "assigned_at",
          "completed_at",
          "agent_id",
          "row",
          "rows",
          "rows",
          "cursor",
          "rows"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\infrastructure\\persistence\\optimized_sqlite_task_repo.py",
      "current_loc": 439,
      "limit": 400,
      "excess": 39,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "optimized_sqlite_task_repo_core.py - Core classes: QueryCache, OptimizedSqliteTaskRepository",
          "optimized_sqlite_task_repo_utils.py - Utility functions: get_optimized_task_repository, __init__, get",
          "optimized_sqlite_task_repo_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 2,
          "functions": 22,
          "imports": 19
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\infrastructure\\persistence\\optimized_sqlite_task_repo.py",
      "class_name": "OptimizedSqliteTaskRepository",
      "current_loc": 364,
      "limit": 100,
      "excess": 264,
      "severity": "major",
      "line_number": 64,
      "suggestion": {
        "suggested_methods_split": [
          "OptimizedSqliteTaskRepositoryCore - Core methods: get, get_by_agent, get_pending, add, update",
          "OptimizedSqliteTaskRepositoryUtils - Utility methods: delete, get_all, clear_cache, get_cache_stats"
        ],
        "properties_to_extract": [
          "conn",
          "key_parts",
          "cache_key",
          "cached_task",
          "cache_key",
          "cached_tasks",
          "tasks",
          "cache_key",
          "cached_tasks",
          "tasks",
          "cache_key",
          "cached_tasks",
          "tasks",
          "row",
          "task",
          "rows",
          "rows",
          "rows",
          "task",
          "task",
          "task"
        ],
        "method_count": 9,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\quality\\proof_ledger.py",
      "function_name": "run_tdd_proof",
      "current_loc": 66,
      "limit": 50,
      "excess": 16,
      "severity": "minor",
      "line_number": 18,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from run_tdd_proof",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\core\\dependency_injection.py",
      "class_name": "TradingDependencyContainer",
      "current_loc": 198,
      "limit": 100,
      "excess": 98,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "TradingDependencyContainerCore - Core methods: register_factory, register_instance, resolve, has_service, clear_scope",
          "TradingDependencyContainerUtils - Utility methods: get_registered_services"
        ],
        "properties_to_extract": [
          "services",
          "sig",
          "params",
          "instance",
          "instance",
          "factory",
          "instance"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\trading_robot\\core\\dependency_injection.py",
      "function_name": "resolve",
      "current_loc": 57,
      "limit": 50,
      "excess": 7,
      "severity": "minor",
      "line_number": 102,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from resolve",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\repositories\\trading_repository.py",
      "class_name": "TradingRepository",
      "current_loc": 161,
      "limit": 100,
      "excess": 61,
      "severity": "major",
      "line_number": 26,
      "suggestion": {
        "suggested_methods_split": [
          "TradingRepositoryCore - Core methods: ",
          "TradingRepositoryUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "trade_count",
          "position_count",
          "portfolio_count",
          "trade_cleared",
          "position_cleared",
          "portfolio_cleared",
          "success"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\repositories\\implementations\\in_memory_trading_repository.py",
      "class_name": "InMemoryTradingRepository",
      "current_loc": 279,
      "limit": 100,
      "excess": 179,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "InMemoryTradingRepositoryCore - Core methods: ",
          "InMemoryTradingRepositoryUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "trade",
          "symbol_trades",
          "result",
          "status_trades",
          "result",
          "all_trades",
          "result",
          "position",
          "positions"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\repositories\\implementations\\trading_repository_impl.py",
      "class_name": "TradingRepositoryImpl",
      "current_loc": 265,
      "limit": 100,
      "excess": 165,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "TradingRepositoryImplCore - Core methods: ",
          "TradingRepositoryImplUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "trade",
          "trades",
          "result",
          "trades",
          "result",
          "trades",
          "result",
          "trades",
          "result",
          "count",
          "count"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\repositories\\interfaces\\position_repository_interface.py",
      "class_name": "PositionRepositoryInterface",
      "current_loc": 138,
      "limit": 100,
      "excess": 38,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "PositionRepositoryInterfaceCore - Core methods: ",
          "PositionRepositoryInterfaceUtils - Utility methods: "
        ],
        "properties_to_extract": [],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\repositories\\interfaces\\trading_repository_interface.py",
      "class_name": "TradingRepositoryInterface",
      "current_loc": 125,
      "limit": 100,
      "excess": 25,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "TradingRepositoryInterfaceCore - Core methods: ",
          "TradingRepositoryInterfaceUtils - Utility methods: "
        ],
        "properties_to_extract": [],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\repositories\\models\\portfolio.py",
      "class_name": "Portfolio",
      "current_loc": 163,
      "limit": 100,
      "excess": 63,
      "severity": "major",
      "line_number": 22,
      "suggestion": {
        "suggested_methods_split": [
          "PortfolioCore - Core methods: add_position, remove_position, get_position, has_position, get_total_market_value",
          "PortfolioUtils - Utility methods: get_total_cost_basis, get_total_unrealized_pnl, get_total_unrealized_pnl_percentage, get_portfolio_value, get_position_count"
        ],
        "properties_to_extract": [
          "cost_basis",
          "positions"
        ],
        "method_count": 19,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\repositories\\models\\position.py",
      "class_name": "Position",
      "current_loc": 123,
      "limit": 100,
      "excess": 23,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "PositionCore - Core methods: get_market_value, get_cost_basis, get_unrealized_pnl, get_unrealized_pnl_percentage, is_long",
          "PositionUtils - Utility methods: is_short, is_flat, is_profitable, update_price, add_quantity"
        ],
        "properties_to_extract": [
          "cost_basis",
          "total_quantity",
          "total_cost"
        ],
        "method_count": 12,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\services\\trading_service.py",
      "class_name": "TradingService",
      "current_loc": 251,
      "limit": 100,
      "excess": 151,
      "severity": "major",
      "line_number": 26,
      "suggestion": {
        "suggested_methods_split": [
          "TradingServiceCore - Core methods: ",
          "TradingServiceUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "trade_id",
          "trade",
          "success",
          "positions",
          "position",
          "positions",
          "total_pnl",
          "total_value",
          "result",
          "trade",
          "success",
          "symbol",
          "current_position",
          "trades",
          "trades",
          "total_quantity",
          "total_cost",
          "new_avg_price",
          "updated_position",
          "updated_position",
          "new_quantity",
          "pnl",
          "updated_position",
          "pnl"
        ],
        "method_count": 0,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\trading_robot\\services\\trading_service.py",
      "function_name": "execute_trade",
      "current_loc": 57,
      "limit": 50,
      "excess": 7,
      "severity": "minor",
      "line_number": 34,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from execute_trade",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\trading_robot\\services\\trading_service.py",
      "function_name": "_update_position_from_trade",
      "current_loc": 68,
      "limit": 50,
      "excess": 18,
      "severity": "minor",
      "line_number": 209,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _update_position_from_trade",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\services\\analytics\\market_trend_engine.py",
      "class_name": "MarketTrendEngine",
      "current_loc": 182,
      "limit": 100,
      "excess": 82,
      "severity": "major",
      "line_number": 22,
      "suggestion": {
        "suggested_methods_split": [
          "MarketTrendEngineCore - Core methods: analyze_market_trend, get_trend_summary",
          "MarketTrendEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "trades_sorted",
          "price_changes",
          "avg_change",
          "volatility",
          "strength",
          "trade_count_factor",
          "trades_sorted",
          "price_changes",
          "volatility",
          "consistency_factor",
          "confidence",
          "trades_sorted",
          "recent_trades",
          "price_changes",
          "avg_change",
          "bullish_count",
          "bearish_count",
          "sideways_count",
          "avg_strength",
          "avg_confidence",
          "avg_predicted_change",
          "total_trends",
          "confidence",
          "predicted_change",
          "prev_price",
          "curr_price",
          "direction",
          "consistency_factor",
          "prev_price",
          "curr_price",
          "prev_price",
          "curr_price",
          "overall_sentiment",
          "change",
          "direction",
          "direction",
          "change",
          "change",
          "overall_sentiment",
          "overall_sentiment"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\services\\analytics\\risk_analysis_engine.py",
      "class_name": "RiskAnalysisEngine",
      "current_loc": 143,
      "limit": 100,
      "excess": 43,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "RiskAnalysisEngineCore - Core methods: calculate_risk_metrics",
          "RiskAnalysisEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "symbol_returns",
          "returns",
          "returns_sorted",
          "index",
          "returns_sorted",
          "index",
          "tail_returns",
          "variance",
          "risk_multipliers",
          "returns",
          "volatility",
          "var_95",
          "expected_shortfall",
          "beta",
          "risk_level",
          "max_position_size",
          "prev_price",
          "curr_price",
          "daily_return"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\services\\analytics\\trading_bi_orchestrator.py",
      "class_name": "TradingBiAnalyticsOrchestrator",
      "current_loc": 156,
      "limit": 100,
      "excess": 56,
      "severity": "major",
      "line_number": 31,
      "suggestion": {
        "suggested_methods_split": [
          "TradingBiAnalyticsOrchestratorCore - Core methods: get_engine_status",
          "TradingBiAnalyticsOrchestratorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "position",
          "unrealized_pnl",
          "position_value",
          "pnl_percentage",
          "positions",
          "total_pnl",
          "total_value",
          "total_cost",
          "pnl_percentage",
          "trades",
          "trades",
          "trades",
          "performance_metrics",
          "risk_metrics",
          "trends",
          "trend_summary",
          "trend"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\trading_robot\\services\\analytics\\performance_metrics_engine.py",
      "class_name": "PerformanceMetricsEngine",
      "current_loc": 224,
      "limit": 100,
      "excess": 124,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "PerformanceMetricsEngineCore - Core methods: calculate_performance_metrics",
          "PerformanceMetricsEngineUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "total_cost",
          "total_revenue",
          "returns",
          "avg_return",
          "volatility",
          "risk_free_rate",
          "trades_sorted",
          "peak",
          "max_drawdown",
          "prices",
          "max_drawdown",
          "symbol_trades",
          "winning_trades",
          "total_trades",
          "symbol_trades",
          "profits",
          "losses",
          "total_profits",
          "total_losses",
          "durations",
          "symbol_trades",
          "symbol_trades",
          "returns",
          "symbol_trades",
          "total_return",
          "sharpe_ratio",
          "max_drawdown",
          "win_rate",
          "profit_factor",
          "avg_duration",
          "drawdown",
          "max_drawdown",
          "peak",
          "drawdown",
          "max_drawdown",
          "buy_times",
          "sell_times",
          "peak",
          "buy_trades",
          "sell_trades",
          "buy_trades",
          "sell_trades",
          "duration",
          "avg_buy_price",
          "avg_sell_price",
          "total_buy",
          "total_sell",
          "pnl",
          "prev_price",
          "curr_price",
          "daily_return"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\utils\\consolidated_config_management.py",
      "current_loc": 494,
      "limit": 400,
      "excess": 94,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "consolidated_config_management_core.py - Core classes: ConfigPattern, ConfigValidationResult",
          "consolidated_config_management_utils.py - Utility functions: scan_and_consolidate_config, validate_configuration_setup, scan_file",
          "consolidated_config_management_types.py - Type definitions and imports"
        ],
        "estimated_splits": 4,
        "complexity_factors": {
          "classes": 9,
          "functions": 23,
          "imports": 21
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\utils\\consolidated_config_management.py",
      "class_name": "UnifiedConfigurationManager",
      "current_loc": 239,
      "limit": 100,
      "excess": 139,
      "severity": "major",
      "line_number": 236,
      "suggestion": {
        "suggested_methods_split": [
          "UnifiedConfigurationManagerCore - Core methods: add_scanner, scan_configurations, consolidate_configurations, generate_config_file, export_scan_results",
          "UnifiedConfigurationManagerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "scan_dirs",
          "total_patterns",
          "total_files",
          "consolidation_suggestions",
          "validation_result",
          "suggestions",
          "errors",
          "warnings",
          "suggestions",
          "env_vars",
          "sensitive_patterns",
          "config_data",
          "env_vars",
          "constants",
          "output_file",
          "results_data",
          "output_file",
          "directory",
          "all_patterns",
          "lines",
          "patterns",
          "value_lower"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "src\\utils\\consolidated_file_operations.py",
      "current_loc": 641,
      "limit": 400,
      "excess": 241,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "consolidated_file_operations_core.py - Core classes: FileInfo, DirectoryInfo",
          "consolidated_file_operations_utils.py - Utility functions: ensure_dir, read_json_file, write_json_file",
          "consolidated_file_operations_types.py - Type definitions and imports"
        ],
        "estimated_splits": 5,
        "complexity_factors": {
          "classes": 10,
          "functions": 23,
          "imports": 27
        }
      }
    },
    {
      "type": "class_loc",
      "path": "src\\utils\\consolidated_file_operations.py",
      "class_name": "DirectoryOperations",
      "current_loc": 105,
      "limit": 100,
      "excess": 5,
      "severity": "major",
      "line_number": 193,
      "suggestion": {
        "suggested_methods_split": [
          "DirectoryOperationsCore - Core methods: ensure_directory, get_directory_info, find_files, cleanup_directory",
          "DirectoryOperationsUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "dir_path",
          "total_files",
          "total_dirs",
          "total_size",
          "file_types",
          "last_modified",
          "dir_path",
          "dir_path",
          "cleaned_count",
          "cutoff_time",
          "cutoff_time",
          "should_remove",
          "ext",
          "mtime",
          "ext",
          "file_mtime",
          "last_modified",
          "should_remove"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "src\\utils\\consolidated_file_operations.py",
      "class_name": "BackupOperations",
      "current_loc": 147,
      "limit": 100,
      "excess": 47,
      "severity": "major",
      "line_number": 362,
      "suggestion": {
        "suggested_methods_split": [
          "BackupOperationsCore - Core methods: create_backup, restore_backup",
          "BackupOperationsUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "source",
          "backup_root",
          "timestamp",
          "backup_path",
          "files_backed_up",
          "total_size",
          "errors",
          "duration",
          "success",
          "start_time",
          "backup",
          "restore",
          "files_restored",
          "total_size",
          "errors",
          "duration",
          "success",
          "root_path",
          "relative_root",
          "dest_root",
          "src_file",
          "should_backup",
          "relative_path",
          "dest_file",
          "should_backup",
          "dest_file",
          "should_backup"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "src\\utils\\consolidated_file_operations.py",
      "function_name": "create_backup",
      "current_loc": 84,
      "limit": 50,
      "excess": 34,
      "severity": "minor",
      "line_number": 366,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from create_backup",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\utils\\consolidated_file_operations.py",
      "function_name": "restore_backup",
      "current_loc": 57,
      "limit": 50,
      "excess": 7,
      "severity": "minor",
      "line_number": 452,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from restore_backup",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "src\\utils\\consolidated_file_operations.py",
      "function_name": "scan_directory",
      "current_loc": 71,
      "limit": 50,
      "excess": 21,
      "severity": "minor",
      "line_number": 515,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from scan_directory",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "src\\integration\\messaging_gateway.py",
      "class_name": "MessagingGateway",
      "current_loc": 206,
      "limit": 100,
      "excess": 106,
      "severity": "major",
      "line_number": 88,
      "suggestion": {
        "suggested_methods_split": [
          "MessagingGatewayCore - Core methods: list_available_agents, get_agent_status, request_agent_summary, send_pyautogui, send_message",
          "MessagingGatewayUtils - Utility methods: receive_message, broadcast_message"
        ],
        "properties_to_extract": [
          "info",
          "tgt",
          "result",
          "tgt",
          "prompt",
          "req_id",
          "ts",
          "tgt",
          "payload_meta",
          "status",
          "UMS",
          "dry_run_env",
          "p",
          "data",
          "agents",
          "result",
          "ok",
          "result",
          "ok"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "file_loc",
      "path": "tools\\duplication_analyzer.py",
      "current_loc": 463,
      "limit": 400,
      "excess": 63,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "duplication_analyzer_core.py - Core classes: DuplicationAnalyzer",
          "duplication_analyzer_utils.py - Utility functions: main, __init__, scan_codebase",
          "duplication_analyzer_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 18,
          "imports": 11
        }
      }
    },
    {
      "type": "class_loc",
      "path": "tools\\duplication_analyzer.py",
      "class_name": "DuplicationAnalyzer",
      "current_loc": 379,
      "limit": 100,
      "excess": 279,
      "severity": "major",
      "line_number": 29,
      "suggestion": {
        "suggested_methods_split": [
          "DuplicationAnalyzerCore - Core methods: scan_codebase, analyze_duplicates, generate_report",
          "DuplicationAnalyzerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "functions",
          "classes",
          "imports",
          "file_str",
          "func_content",
          "clean_content",
          "class_content",
          "clean_content",
          "lines",
          "analysis",
          "names",
          "files",
          "contents",
          "names",
          "path_parts",
          "first",
          "contents",
          "similarities",
          "plan",
          "priority_order",
          "report",
          "summary",
          "plan",
          "lines",
          "line",
          "line",
          "domains",
          "files",
          "domains",
          "instances",
          "instances",
          "instances",
          "category",
          "category",
          "similarity",
          "similarity",
          "consolidation",
          "consolidation",
          "review_item",
          "content",
          "tree",
          "func_hash",
          "class_hash"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\duplication_analyzer.py",
      "function_name": "scan_codebase",
      "current_loc": 55,
      "limit": 50,
      "excess": 5,
      "severity": "minor",
      "line_number": 45,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from scan_codebase",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\duplication_analyzer.py",
      "function_name": "_generate_consolidation_plan",
      "current_loc": 53,
      "limit": 50,
      "excess": 3,
      "severity": "minor",
      "line_number": 265,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _generate_consolidation_plan",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\duplication_analyzer.py",
      "function_name": "generate_report",
      "current_loc": 76,
      "limit": 50,
      "excess": 26,
      "severity": "minor",
      "line_number": 332,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from generate_report",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "tools\\analysis_cli.py",
      "current_loc": 505,
      "limit": 400,
      "excess": 105,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "analysis_cli_core.py - Core classes: ",
          "analysis_cli_utils.py - Utility functions: should_exclude_file, count_lines, analyze_python_file",
          "analysis_cli_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 0,
          "functions": 9,
          "imports": 11
        }
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\analysis_cli.py",
      "function_name": "analyze_python_file",
      "current_loc": 128,
      "limit": 50,
      "excess": 78,
      "severity": "minor",
      "line_number": 72,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from analyze_python_file",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\analysis_cli.py",
      "function_name": "generate_refactor_suggestions",
      "current_loc": 68,
      "limit": 50,
      "excess": 18,
      "severity": "minor",
      "line_number": 318,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from generate_refactor_suggestions",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\analysis_cli.py",
      "function_name": "format_refactor_report",
      "current_loc": 51,
      "limit": 50,
      "excess": 1,
      "severity": "minor",
      "line_number": 388,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from format_refactor_report",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\analysis_cli.py",
      "function_name": "main",
      "current_loc": 58,
      "limit": 50,
      "excess": 8,
      "severity": "minor",
      "line_number": 441,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from main",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\audit_cleanup.py",
      "function_name": "main",
      "current_loc": 130,
      "limit": 50,
      "excess": 80,
      "severity": "minor",
      "line_number": 176,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from main",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "tools\\functionality_verification.py",
      "current_loc": 480,
      "limit": 400,
      "excess": 80,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "functionality_verification_core.py - Core classes: FunctionalityVerifier",
          "functionality_verification_utils.py - Utility functions: main, __init__, generate_functionality_signature",
          "functionality_verification_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 13,
          "imports": 14
        }
      }
    },
    {
      "type": "class_loc",
      "path": "tools\\functionality_verification.py",
      "class_name": "FunctionalityVerifier",
      "current_loc": 357,
      "limit": 100,
      "excess": 257,
      "severity": "major",
      "line_number": 28,
      "suggestion": {
        "suggested_methods_split": [
          "FunctionalityVerifierCore - Core methods: generate_functionality_signature, save_baseline, load_baseline, compare_with_baseline, run_agent_specific_verification",
          "FunctionalityVerifierUtils - Utility methods: generate_verification_report"
        ],
        "properties_to_extract": [
          "signature",
          "exclude_patterns",
          "file_str",
          "functions",
          "pattern",
          "classes",
          "pattern",
          "imports",
          "patterns",
          "baseline",
          "comparison",
          "baseline_files",
          "current_files",
          "removed_files",
          "added_files",
          "common_files",
          "results",
          "agent_tests",
          "base_tests",
          "agent_specific_tests",
          "tests",
          "report",
          "match",
          "match",
          "baseline_info",
          "current_info",
          "baseline_funcs",
          "current_funcs",
          "lost_funcs",
          "new_funcs",
          "baseline_classes",
          "current_classes",
          "lost_classes",
          "new_classes",
          "status",
          "status_icon",
          "passed",
          "total",
          "match",
          "result",
          "content",
          "file_hash"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\functionality_verification.py",
      "function_name": "main",
      "current_loc": 90,
      "limit": 50,
      "excess": 40,
      "severity": "minor",
      "line_number": 387,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from main",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\functionality_verification.py",
      "function_name": "compare_with_baseline",
      "current_loc": 68,
      "limit": 50,
      "excess": 18,
      "severity": "minor",
      "line_number": 140,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from compare_with_baseline",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\functionality_verification.py",
      "function_name": "run_agent_specific_verification",
      "current_loc": 56,
      "limit": 50,
      "excess": 6,
      "severity": "minor",
      "line_number": 209,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from run_agent_specific_verification",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\functionality_verification.py",
      "function_name": "generate_verification_report",
      "current_loc": 75,
      "limit": 50,
      "excess": 25,
      "severity": "minor",
      "line_number": 310,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from generate_verification_report",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "tools\\projectscanner.py",
      "current_loc": 1179,
      "limit": 400,
      "excess": 779,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "projectscanner_core.py - Core classes: LanguageAnalyzer, BotWorker",
          "projectscanner_utils.py - Utility functions: main, __init__, _init_tree_sitter_language",
          "projectscanner_types.py - Type definitions and imports"
        ],
        "estimated_splits": 3,
        "complexity_factors": {
          "classes": 7,
          "functions": 45,
          "imports": 21
        }
      }
    },
    {
      "type": "class_loc",
      "path": "tools\\projectscanner.py",
      "class_name": "LanguageAnalyzer",
      "current_loc": 257,
      "limit": 100,
      "excess": 157,
      "severity": "major",
      "line_number": 39,
      "suggestion": {
        "suggested_methods_split": [
          "LanguageAnalyzerCore - Core methods: analyze_file, get_node_text",
          "LanguageAnalyzerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "grammar_paths",
          "grammar_path",
          "suffix",
          "tree",
          "functions",
          "classes",
          "routes",
          "complexity",
          "tree",
          "functions",
          "classes",
          "complexity",
          "tree",
          "root",
          "functions",
          "classes",
          "routes",
          "complexity",
          "lang_lib",
          "parser",
          "fn_name_node",
          "name_node",
          "docstring",
          "method_names",
          "base_classes",
          "struct_name_node",
          "name_node",
          "func_attr",
          "impl_type_node",
          "cls_name",
          "path_arg",
          "methods",
          "impl_name",
          "arg0",
          "base_parts",
          "attr_node",
          "name_node",
          "value_node",
          "callee_node",
          "args_node",
          "path_arg",
          "extracted_methods",
          "attr_node",
          "method_node",
          "callee_text",
          "parts",
          "methods",
          "path_str",
          "first_arg",
          "path_str"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "tools\\projectscanner.py",
      "class_name": "FileProcessor",
      "current_loc": 127,
      "limit": 100,
      "excess": 27,
      "severity": "major",
      "line_number": 356,
      "suggestion": {
        "suggested_methods_split": [
          "FileProcessorCore - Core methods: hash_file, should_exclude, process_file",
          "FileProcessorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "venv_patterns",
          "default_exclude_dirs",
          "file_abs",
          "path_str",
          "file_hash_val",
          "relative_path",
          "ignore_path",
          "analysis_result",
          "ignore_path",
          "source_code"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "tools\\projectscanner.py",
      "class_name": "ModularReportGenerator",
      "current_loc": 286,
      "limit": 100,
      "excess": 186,
      "severity": "major",
      "line_number": 488,
      "suggestion": {
        "suggested_methods_split": [
          "ModularReportGeneratorCore - Core methods: generate_modular_reports",
          "ModularReportGeneratorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "analysis_dir",
          "agent_analysis",
          "output_path",
          "module_analysis",
          "output_path",
          "file_type_analysis",
          "output_path",
          "complexity_analysis",
          "total_complexity",
          "file_count",
          "output_path",
          "dependency_analysis",
          "output_path",
          "architecture_overview",
          "output_path",
          "file_type",
          "complexity",
          "parts",
          "parts",
          "module",
          "module_name",
          "top_level",
          "agent_id"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "tools\\projectscanner.py",
      "class_name": "ReportGenerator",
      "current_loc": 157,
      "limit": 100,
      "excess": 57,
      "severity": "major",
      "line_number": 777,
      "suggestion": {
        "suggested_methods_split": [
          "ReportGeneratorCore - Core methods: load_existing_report, save_report, generate_init_files, load_existing_chatgpt_context, export_chatgpt_context",
          "ReportGeneratorUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "report_path",
          "test_report_path",
          "existing",
          "existing_tests",
          "test_files",
          "non_test_files",
          "merged",
          "merged_tests",
          "package_modules",
          "package_path",
          "init_file",
          "lines",
          "content",
          "context_path",
          "context_path",
          "existing_context",
          "payload",
          "merged_context",
          "t",
          "context_dict",
          "rendered",
          "file_path",
          "package_dir",
          "module_name",
          "template_content"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "tools\\projectscanner.py",
      "class_name": "ProjectScanner",
      "current_loc": 186,
      "limit": 100,
      "excess": 86,
      "severity": "major",
      "line_number": 939,
      "suggestion": {
        "suggested_methods_split": [
          "ProjectScannerCore - Core methods: load_cache, save_cache, scan_project, generate_init_files, export_chatgpt_context",
          "ProjectScannerUtils - Utility methods: generate_modular_reports, categorize_agents"
        ],
        "properties_to_extract": [
          "cache_path",
          "cache_path",
          "file_extensions",
          "valid_files",
          "total_files",
          "processed_count",
          "previous_files",
          "current_files",
          "moved_files",
          "missing_files",
          "num_workers",
          "manager",
          "score",
          "levels",
          "doc",
          "methods",
          "root_path",
          "old_hash",
          "file_path",
          "new_file",
          "percent"
        ],
        "method_count": 7,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\projectscanner.py",
      "function_name": "_analyze_python",
      "current_loc": 72,
      "limit": 50,
      "excess": 22,
      "severity": "minor",
      "line_number": 107,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _analyze_python",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\projectscanner.py",
      "function_name": "_analyze_javascript",
      "current_loc": 68,
      "limit": 50,
      "excess": 18,
      "severity": "minor",
      "line_number": 228,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _analyze_javascript",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\projectscanner.py",
      "function_name": "should_exclude",
      "current_loc": 84,
      "limit": 50,
      "excess": 34,
      "severity": "minor",
      "line_number": 378,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from should_exclude",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\projectscanner.py",
      "function_name": "_generate_complexity_analysis",
      "current_loc": 58,
      "limit": 50,
      "excess": 8,
      "severity": "minor",
      "line_number": 632,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _generate_complexity_analysis",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\projectscanner.py",
      "function_name": "export_chatgpt_context",
      "current_loc": 56,
      "limit": 50,
      "excess": 6,
      "severity": "minor",
      "line_number": 878,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from export_chatgpt_context",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\projectscanner.py",
      "function_name": "scan_project",
      "current_loc": 90,
      "limit": 50,
      "excess": 40,
      "severity": "minor",
      "line_number": 982,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from scan_project",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "tools\\analytics_cli.py",
      "current_loc": 437,
      "limit": 400,
      "excess": 37,
      "severity": "critical",
      "suggestion": {
        "error": "Cannot parse file for suggestions"
      }
    },
    {
      "type": "syntax_error",
      "path": "tools\\analytics_cli.py",
      "severity": "critical"
    },
    {
      "type": "file_loc",
      "path": "tools\\auto_remediate_loc.py",
      "current_loc": 680,
      "limit": 400,
      "excess": 280,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "auto_remediate_loc_core.py - Core classes: ",
          "auto_remediate_loc_utils.py - Utility functions: should_exclude, count_lines, analyze_file_loc",
          "auto_remediate_loc_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 0,
          "functions": 18,
          "imports": 10
        }
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\auto_remediate_loc.py",
      "function_name": "auto_remediate_class_loc",
      "current_loc": 57,
      "limit": 50,
      "excess": 7,
      "severity": "minor",
      "line_number": 283,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from auto_remediate_class_loc",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\auto_remediate_loc.py",
      "function_name": "generate_refactor_plan",
      "current_loc": 56,
      "limit": 50,
      "excess": 6,
      "severity": "minor",
      "line_number": 423,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from generate_refactor_plan",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\auto_remediate_loc.py",
      "function_name": "generate_text_report",
      "current_loc": 56,
      "limit": 50,
      "excess": 6,
      "severity": "minor",
      "line_number": 553,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from generate_text_report",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\auto_remediate_loc.py",
      "function_name": "main",
      "current_loc": 66,
      "limit": 50,
      "excess": 16,
      "severity": "minor",
      "line_number": 611,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from main",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "tools\\test_coverage_improvement.py",
      "current_loc": 848,
      "limit": 400,
      "excess": 448,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "test_coverage_improvement_core.py - Core classes: TestCoverageImprover",
          "test_coverage_improvement_utils.py - Utility functions: main, __init__, analyze_current_coverage",
          "test_coverage_improvement_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 1,
          "functions": 20,
          "imports": 16
        }
      }
    },
    {
      "type": "class_loc",
      "path": "tools\\test_coverage_improvement.py",
      "class_name": "TestCoverageImprover",
      "current_loc": 779,
      "limit": 100,
      "excess": 679,
      "severity": "major",
      "line_number": 29,
      "suggestion": {
        "suggested_methods_split": [
          "TestCoverageImproverCore - Core methods: analyze_current_coverage, improve_test_reliability, generate_ci_cd_integration, save_report, run_full_analysis",
          "TestCoverageImproverUtils - Utility methods: analyze_error_handling_coverage, run_performance_benchmarking, generate_intelligent_recommendations, generate_html_report"
        ],
        "properties_to_extract": [
          "coverage_data",
          "gaps",
          "recommendations",
          "coverage_cmd",
          "targets",
          "gaps",
          "stdout",
          "lines",
          "current_file",
          "recommendations",
          "reliability_results",
          "fixes",
          "results",
          "passed_runs",
          "total_runs",
          "fixes",
          "coverage_config",
          "workflow_config",
          "workflow",
          "timestamp",
          "filename",
          "filepath",
          "coverage_report",
          "reliability_report",
          "ci_cd_config",
          "full_report",
          "report_path",
          "error_test_cmd",
          "perf_cmd",
          "recommendations",
          "coverage_gaps",
          "error_coverage",
          "timestamp",
          "target",
          "html_content",
          "gaps",
          "recommendations",
          "html_filename",
          "html_filepath",
          "score",
          "max_score",
          "gaps",
          "coverage_score",
          "error_coverage",
          "error_score",
          "reliability_score",
          "performance_score",
          "result",
          "cmd",
          "consistency",
          "result",
          "coverage_percentage",
          "start_time",
          "result",
          "end_time",
          "execution_time",
          "benchmarks_met",
          "high_priority_gaps",
          "reliability_score",
          "parts",
          "result",
          "severity_class",
          "priority_class",
          "filename",
          "coverage_info",
          "coverage_pct",
          "coverage_percentage",
          "coverage_pct"
        ],
        "method_count": 9,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\test_coverage_improvement.py",
      "function_name": "_generate_recommendations",
      "current_loc": 81,
      "limit": 50,
      "excess": 31,
      "severity": "minor",
      "line_number": 146,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _generate_recommendations",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\test_coverage_improvement.py",
      "function_name": "analyze_error_handling_coverage",
      "current_loc": 58,
      "limit": 50,
      "excess": 8,
      "severity": "minor",
      "line_number": 459,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from analyze_error_handling_coverage",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\test_coverage_improvement.py",
      "function_name": "generate_intelligent_recommendations",
      "current_loc": 99,
      "limit": 50,
      "excess": 49,
      "severity": "minor",
      "line_number": 561,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from generate_intelligent_recommendations",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\test_coverage_improvement.py",
      "function_name": "generate_html_report",
      "current_loc": 114,
      "limit": 50,
      "excess": 64,
      "severity": "minor",
      "line_number": 661,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from generate_html_report",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\codemods\\migrate_managers.py",
      "function_name": "main",
      "current_loc": 57,
      "limit": 50,
      "excess": 7,
      "severity": "minor",
      "line_number": 56,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from main",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "tools\\codemods\\replace_prints_with_logger.py",
      "function_name": "transform_file",
      "current_loc": 71,
      "limit": 50,
      "excess": 21,
      "severity": "minor",
      "line_number": 31,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from transform_file",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "agent_workspaces\\Agent-4\\cleanup_workspace.py",
      "class_name": "WorkspaceCleanup",
      "current_loc": 122,
      "limit": 100,
      "excess": 22,
      "severity": "major",
      "line_number": 14,
      "suggestion": {
        "suggested_methods_split": [
          "WorkspaceCleanupCore - Core methods: categorize_file, move_file, cleanup_inbox, show_workspace_status",
          "WorkspaceCleanupUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "name_lower",
          "moved_count",
          "processed_count",
          "inbox_files",
          "dest_dir",
          "category",
          "file_count",
          "file_count"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "agent_workspaces\\Agent-7\\agent7_vector_database_integration.py",
      "class_name": "Agent7VectorDatabaseIntegration",
      "current_loc": 211,
      "limit": 100,
      "excess": 111,
      "severity": "major",
      "line_number": 47,
      "suggestion": {
        "suggested_methods_split": [
          "Agent7VectorDatabaseIntegrationCore - Core methods: index_agent7_status, index_agent7_capabilities, search_agent7_context, get_integration_status",
          "Agent7VectorDatabaseIntegrationUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "status_file",
          "capabilities",
          "capabilities_doc",
          "status_doc",
          "success",
          "achievements",
          "next_actions",
          "success",
          "results",
          "agent7_results",
          "status_data",
          "achievements_doc",
          "success",
          "actions_doc",
          "success"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "agent_workspaces\\Agent-7\\agent7_vector_database_integration.py",
      "function_name": "index_agent7_status",
      "current_loc": 94,
      "limit": 50,
      "excess": 44,
      "severity": "minor",
      "line_number": 63,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from index_agent7_status",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "agent_workspaces\\Agent-7\\agent7_vector_database_integration.py",
      "function_name": "index_agent7_capabilities",
      "current_loc": 67,
      "limit": 50,
      "excess": 17,
      "severity": "minor",
      "line_number": 158,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from index_agent7_capabilities",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "scripts\\enforce_python_standards.py",
      "class_name": "PythonStandardEnforcer",
      "current_loc": 297,
      "limit": 100,
      "excess": 197,
      "severity": "major",
      "line_number": 38,
      "suggestion": {
        "suggested_methods_split": [
          "PythonStandardEnforcerCore - Core methods: enforce_standards",
          "PythonStandardEnforcerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "python_files",
          "python_files",
          "root",
          "lines",
          "start_line",
          "end_line",
          "loc",
          "expected_prefix",
          "lines",
          "line",
          "suggestion",
          "stripped_line",
          "violation_counts",
          "content",
          "tree",
          "class_loc",
          "suggestion",
          "violation_type",
          "severity_icon",
          "func_loc",
          "description",
          "suggestion",
          "suggestion",
          "suggestion"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "scripts\\enforce_python_standards.py",
      "function_name": "_check_comment_formatting",
      "current_loc": 65,
      "limit": 50,
      "excess": 15,
      "severity": "minor",
      "line_number": 182,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _check_comment_formatting",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "scripts\\fix_and_ingest_vector_database.py",
      "function_name": "fix_encoding_and_reingest",
      "current_loc": 65,
      "limit": 50,
      "excess": 15,
      "severity": "minor",
      "line_number": 18,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from fix_encoding_and_reingest",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "scripts\\index_v2_refactoring.py",
      "class_name": "V2RefactoringIndexer",
      "current_loc": 343,
      "limit": 100,
      "excess": 243,
      "severity": "major",
      "line_number": 19,
      "suggestion": {
        "suggested_methods_split": [
          "V2RefactoringIndexerCore - Core methods: index_refactoring_work",
          "V2RefactoringIndexerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "indexed_count",
          "total_files",
          "pattern_description",
          "pattern_doc",
          "success",
          "doc_id",
          "document",
          "content",
          "progress"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "scripts\\index_v2_refactoring.py",
      "function_name": "__init__",
      "current_loc": 180,
      "limit": 50,
      "excess": 130,
      "severity": "minor",
      "line_number": 22,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from __init__",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "scripts\\index_v2_refactoring.py",
      "function_name": "_index_revolutionary_pattern",
      "current_loc": 78,
      "limit": 50,
      "excess": 28,
      "severity": "minor",
      "line_number": 284,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from _index_revolutionary_pattern",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "scripts\\agent_cycle.py",
      "current_loc": 596,
      "limit": 400,
      "excess": 196,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "agent_cycle_core.py - Core classes: CycleConfig, CycleResult",
          "agent_cycle_utils.py - Utility functions: main, __init__, execute_cycle",
          "agent_cycle_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 3,
          "functions": 25,
          "imports": 14
        }
      }
    },
    {
      "type": "class_loc",
      "path": "scripts\\agent_cycle.py",
      "class_name": "AgentCycleAutomation",
      "current_loc": 485,
      "limit": 100,
      "excess": 385,
      "severity": "major",
      "line_number": 61,
      "suggestion": {
        "suggested_methods_split": [
          "AgentCycleAutomationCore - Core methods: execute_cycle",
          "AgentCycleAutomationUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "start_time",
          "cycle_number",
          "required_files",
          "tasks",
          "inbox_tasks",
          "message_tasks",
          "agent_tasks",
          "inbox_dir",
          "inbox_files",
          "lines",
          "sender",
          "priority",
          "validation_results",
          "score",
          "devlog_content",
          "devlog_dir",
          "timestamp",
          "devlog_file",
          "new_status",
          "current_status",
          "cycle_tasks",
          "validation_results",
          "new_status",
          "end_time",
          "result",
          "agent_roles",
          "cmd",
          "dup_results",
          "cmd",
          "result",
          "template",
          "cmd",
          "commit_message",
          "cmd",
          "end_time",
          "contract",
          "parts",
          "schema",
          "status",
          "status",
          "content",
          "sender",
          "priority"
        ],
        "method_count": 1,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "scripts\\agent_cycle.py",
      "function_name": "execute_cycle",
      "current_loc": 74,
      "limit": 50,
      "excess": 24,
      "severity": "minor",
      "line_number": 77,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from execute_cycle",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "syntax_error",
      "path": "scripts\\agent_onboarding.py",
      "severity": "critical"
    },
    {
      "type": "class_loc",
      "path": "scripts\\cleanup_v2_compliance.py",
      "class_name": "V2ComplianceChecker",
      "current_loc": 183,
      "limit": 100,
      "excess": 83,
      "severity": "major",
      "line_number": 21,
      "suggestion": {
        "suggested_methods_split": [
          "V2ComplianceCheckerCore - Core methods: analyze_file_sizes, analyze_code_structure, generate_report, save_report",
          "V2ComplianceCheckerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "large_files",
          "src_dir",
          "structure_issues",
          "src_dir",
          "large_files",
          "structure_issues",
          "report",
          "compliance_score",
          "deductions",
          "compliance_score",
          "deduction",
          "deduction",
          "deduction",
          "file_info",
          "severity_icon",
          "lines",
          "line_count",
          "init_file",
          "contents",
          "has_py_files"
        ],
        "method_count": 4,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "scripts\\cleanup_v2_compliance.py",
      "function_name": "generate_report",
      "current_loc": 93,
      "limit": 50,
      "excess": 43,
      "severity": "minor",
      "line_number": 104,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from generate_report",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "scripts\\dup_scan.py",
      "class_name": "DuplicationScanner",
      "current_loc": 312,
      "limit": 100,
      "excess": 212,
      "severity": "major",
      "line_number": 36,
      "suggestion": {
        "suggested_methods_split": [
          "DuplicationScannerCore - Core methods: scan_directory, save_report",
          "DuplicationScannerUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "files",
          "exact_duplicates",
          "similar_content",
          "patterns",
          "report",
          "files",
          "exact_duplicates",
          "hash_to_files",
          "similar_content",
          "line_groups",
          "patterns",
          "report",
          "recommendations",
          "most_duplicated",
          "output_path",
          "intersection",
          "union",
          "ext1",
          "ext2",
          "dir1",
          "dir2",
          "top_ext",
          "top_dir",
          "file_path",
          "file_hash",
          "lines",
          "files",
          "content1",
          "content2",
          "content",
          "file_path",
          "line_hash",
          "result",
          "similarity",
          "result"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "scripts\\setup_enhanced_discord.py",
      "class_name": "EnhancedDiscordSetup",
      "current_loc": 281,
      "limit": 100,
      "excess": 181,
      "severity": "major",
      "line_number": 20,
      "suggestion": {
        "suggested_methods_split": [
          "EnhancedDiscordSetupCore - Core methods: run_setup, check_prerequisites, create_configuration, setup_coordination, create_helper_scripts",
          "EnhancedDiscordSetupUtils - Utility methods: show_final_instructions"
        ],
        "properties_to_extract": [
          "prerequisites_ok",
          "required_dirs",
          "enhanced_file",
          "prerequisites_ok",
          "prerequisites_ok",
          "config",
          "inbox_dir",
          "coordination_message",
          "coord_file",
          "webhook_config_script",
          "webhook_script_path",
          "template_config",
          "overwrite"
        ],
        "method_count": 6,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "scripts\\setup_enhanced_discord.py",
      "function_name": "setup_coordination",
      "current_loc": 54,
      "limit": 50,
      "excess": 4,
      "severity": "minor",
      "line_number": 136,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from setup_coordination",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "scripts\\setup_enhanced_discord.py",
      "function_name": "create_helper_scripts",
      "current_loc": 78,
      "limit": 50,
      "excess": 28,
      "severity": "minor",
      "line_number": 191,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from create_helper_scripts",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "scripts\\test_discord_agent_bot.py",
      "class_name": "DiscordAgentBotTester",
      "current_loc": 194,
      "limit": 100,
      "excess": 94,
      "severity": "major",
      "line_number": 31,
      "suggestion": {
        "suggested_methods_split": [
          "DiscordAgentBotTesterCore - Core methods: test_command_parsing, test_agent_validation, test_agent_list, test_config_loading, run_all_tests",
          "DiscordAgentBotTesterUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "test_commands",
          "passed",
          "total",
          "valid_agents",
          "invalid_agents",
          "passed",
          "total",
          "agents",
          "expected_count",
          "config",
          "test_agent",
          "test_message",
          "test_sender",
          "test1",
          "test2",
          "test3",
          "test4",
          "test5",
          "tests",
          "passed",
          "result",
          "test5",
          "status"
        ],
        "method_count": 5,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "scripts\\v2_release_summary.py",
      "function_name": "main",
      "current_loc": 78,
      "limit": 50,
      "excess": 28,
      "severity": "minor",
      "line_number": 13,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from main",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "scripts\\activate_vector_database_integration.py",
      "function_name": "activate_vector_database_integration",
      "current_loc": 111,
      "limit": 50,
      "excess": 61,
      "severity": "minor",
      "line_number": 21,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from activate_vector_database_integration",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "scripts\\cleanup_overnight_sequence.py",
      "class_name": "CleanupSequenceCoordinator",
      "current_loc": 253,
      "limit": 100,
      "excess": 153,
      "severity": "major",
      "line_number": 62,
      "suggestion": {
        "suggested_methods_split": [
          "CleanupSequenceCoordinatorCore - Core methods: log_sequence_event, execute_messaging_command, send_phase_notification, assign_contract_to_agent, execute_phase",
          "CleanupSequenceCoordinatorUtils - Utility methods: check_phase_completion, run_full_sequence, save_sequence_log"
        ],
        "properties_to_extract": [
          "timestamp",
          "log_entry",
          "phase_config",
          "agent",
          "description",
          "message",
          "phase_config",
          "agent",
          "phase_config",
          "duration_hours",
          "phase_config",
          "agent",
          "status_file",
          "end_time",
          "duration",
          "log_file",
          "cmd",
          "result",
          "cmd",
          "result",
          "current_task",
          "start_idx",
          "phases_to_run",
          "phases_to_run",
          "status"
        ],
        "method_count": 8,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "scripts\\cleanup_overnight_sequence.py",
      "function_name": "main",
      "current_loc": 71,
      "limit": 50,
      "excess": 21,
      "severity": "minor",
      "line_number": 317,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from main",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "file_loc",
      "path": "scripts\\send_devlog_unified.py",
      "current_loc": 483,
      "limit": 400,
      "excess": 83,
      "severity": "critical",
      "suggestion": {
        "suggested_splits": [
          "send_devlog_unified_core.py - Core classes: ",
          "send_devlog_unified_utils.py - Utility functions: load_discord_config, get_channel_config, parse_devlog_content",
          "send_devlog_unified_types.py - Type definitions and imports"
        ],
        "estimated_splits": 2,
        "complexity_factors": {
          "classes": 0,
          "functions": 9,
          "imports": 20
        }
      }
    },
    {
      "type": "function_loc",
      "path": "scripts\\send_devlog_unified.py",
      "function_name": "send_to_discord_webhook",
      "current_loc": 71,
      "limit": 50,
      "excess": 21,
      "severity": "minor",
      "line_number": 139,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from send_to_discord_webhook",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "scripts\\send_devlog_unified.py",
      "function_name": "send_to_discord_channel",
      "current_loc": 119,
      "limit": 50,
      "excess": 69,
      "severity": "minor",
      "line_number": 212,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from send_to_discord_channel",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "scripts\\send_devlog_unified.py",
      "function_name": "main",
      "current_loc": 125,
      "limit": 50,
      "excess": 75,
      "severity": "minor",
      "line_number": 355,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from main",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "class_loc",
      "path": "scripts\\test_devlog_sender.py",
      "class_name": "TestDevlogSender",
      "current_loc": 175,
      "limit": 100,
      "excess": 75,
      "severity": "major",
      "line_number": 60,
      "suggestion": {
        "suggested_methods_split": [
          "TestDevlogSenderCore - Core methods: setup, teardown, create_test_devlog",
          "TestDevlogSenderUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "filepath",
          "valid_agents",
          "test_file",
          "test_content",
          "test_file",
          "test_cases",
          "mock_instance",
          "success"
        ],
        "method_count": 3,
        "estimated_classes": 1
      }
    },
    {
      "type": "class_loc",
      "path": "scripts\\test_enhanced_discord.py",
      "class_name": "EnhancedDiscordTester",
      "current_loc": 311,
      "limit": 100,
      "excess": 211,
      "severity": "major",
      "line_number": 22,
      "suggestion": {
        "suggested_methods_split": [
          "EnhancedDiscordTesterCore - Core methods: show_test_results, all_tests_passed",
          "EnhancedDiscordTesterUtils - Utility methods: "
        ],
        "properties_to_extract": [
          "prerequisites_ok",
          "enhanced_file",
          "total_tests",
          "passed_tests",
          "critical_tests",
          "prerequisites_ok",
          "prerequisites_ok",
          "commander",
          "channel_info",
          "commander",
          "init_success",
          "commander",
          "test_result",
          "commander",
          "broadcast_result",
          "info",
          "configured_webhooks",
          "total_channels",
          "status",
          "name",
          "status",
          "name",
          "status",
          "name",
          "config",
          "prerequisites_ok"
        ],
        "method_count": 2,
        "estimated_classes": 1
      }
    },
    {
      "type": "function_loc",
      "path": "scripts\\test_enhanced_discord.py",
      "function_name": "check_prerequisites",
      "current_loc": 58,
      "limit": 50,
      "excess": 8,
      "severity": "minor",
      "line_number": 62,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from check_prerequisites",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "scripts\\test_enhanced_discord.py",
      "function_name": "show_test_results",
      "current_loc": 75,
      "limit": 50,
      "excess": 25,
      "severity": "minor",
      "line_number": 247,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from show_test_results",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    },
    {
      "type": "function_loc",
      "path": "scripts\\utilities\\setup_discord_bot.py",
      "function_name": "setup_environment",
      "current_loc": 105,
      "limit": 50,
      "excess": 55,
      "severity": "minor",
      "line_number": 55,
      "suggestion": {
        "suggested_extracts": [
          "Extract helper functions from setup_environment",
          "Split into smaller functions with single responsibilities",
          "Move complex logic to separate utility functions"
        ],
        "estimated_functions": 2,
        "complexity_indicators": [
          "nested_loops",
          "complex_conditionals",
          "large_function"
        ],
        "auto_remediable": true,
        "remediation_type": "function_split"
      }
    }
  ],
  "generated_at": "D:\\Agent_Cellphone_V2_Repository",
  "config": {
    "max_file_loc": 400,
    "max_class_loc": 100,
    "max_function_loc": 50
  }
}
