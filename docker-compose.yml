# Docker Compose configuration for V2_SWARM Agent Cellphone System
# Local development and testing environment

version: '3.8'

services:
  # Main application service
  swarm-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: swarm-agent-cellphone
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app/src
      - PYTHONUNBUFFERED=1
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
      - DISCORD_CHANNEL_ID=${DISCORD_CHANNEL_ID}
      - DISCORD_CHANNEL_AGENT_1=${DISCORD_CHANNEL_AGENT_1}
      - DISCORD_CHANNEL_AGENT_2=${DISCORD_CHANNEL_AGENT_2}
      - DISCORD_CHANNEL_AGENT_3=${DISCORD_CHANNEL_AGENT_3}
      - DISCORD_CHANNEL_AGENT_4=${DISCORD_CHANNEL_AGENT_4}
      - DISCORD_CHANNEL_AGENT_5=${DISCORD_CHANNEL_AGENT_5}
      - DISCORD_CHANNEL_AGENT_6=${DISCORD_CHANNEL_AGENT_6}
      - DISCORD_CHANNEL_AGENT_7=${DISCORD_CHANNEL_AGENT_7}
      - DISCORD_CHANNEL_AGENT_8=${DISCORD_CHANNEL_AGENT_8}
    volumes:
      - ./agent_workspaces:/app/agent_workspaces
      - ./devlogs:/app/devlogs
      - ./logs:/app/logs
      - ./data:/app/data
    ports:
      - "8000:8000"
    networks:
      - swarm-network
    depends_on:
      - redis
      - postgres

  # Redis for caching and message queuing
  redis:
    image: redis:7-alpine
    container_name: swarm-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-swarm123}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - swarm-network

  # PostgreSQL for persistent data storage
  postgres:
    image: postgres:15-alpine
    container_name: swarm-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=swarm_db
      - POSTGRES_USER=swarm_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-swarm123}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - swarm-network

  # Monitoring service (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: swarm-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - swarm-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: swarm-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    networks:
      - swarm-network
    depends_on:
      - prometheus

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: swarm-nginx
    restart: unless-stopped
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - swarm-network
    depends_on:
      - swarm-app

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  swarm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
