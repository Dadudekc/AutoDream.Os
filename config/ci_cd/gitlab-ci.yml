cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
  - .pip-cache/
  - .venv/
  - __pycache__/
  - .pytest_cache/
code-quality:
  artifacts:
    expire_in: $ARTIFACT_EXPIRATION
    paths:
    - v2_standards_report.json
    reports:
      junit: v2_standards_report.json
  before_script:
  - python -m pip install --upgrade pip
  - pip install -r requirements.txt
  - pip install pre-commit
  - pre-commit install
  image: python:3.9-slim
  name: üîç Code Quality & V2 Standards
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - if: $CI_COMMIT_BRANCH =~ /^feature\/.*$/
  - if: $CI_COMMIT_BRANCH =~ /^hotfix\/.*$/
  script:
  - echo "üîç Running pre-commit checks..."
  - pre-commit run --all-files
  - echo "üìè Validating V2 Standards compliance..."
  - python tests/v2_standards_checker.py --all-checks --strict
  - echo "üìä Generating V2 Standards report..."
  - python tests/v2_standards_checker.py --all-checks --report --output-format=json
    > v2_standards_report.json
  stage: validate
coverage-analysis:
  artifacts:
    expire_in: $ARTIFACT_EXPIRATION
    paths:
    - $COVERAGE_DIR/
    - coverage.xml
    - coverage-report.txt
  before_script:
  - python -m pip install --upgrade pip
  - pip install -r requirements.txt
  dependencies:
  - smoke-tests
  - unit-tests
  - integration-tests
  image: python:3.9-slim
  name: üìà Coverage Analysis
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
  - echo "üìà Combining coverage reports..."
  - coverage combine coverage-*.xml || echo "No coverage files to combine"
  - echo "üìä Generating coverage report..."
  - coverage report --show-missing
  - coverage html --title="Agent_Cellphone_V2 Coverage Report"
  - echo "üìà Coverage analysis completed"
  stage: coverage
deploy-production:
  allow_failure: ENABLE_FALSE
  artifacts:
    expire_in: $ARTIFACT_EXPIRATION
    paths:
    - deployment-log.txt
  before_script:
  - python -m pip install --upgrade pip
  - pip install -r requirements.txt
  environment:
    name: production
    url: https://production.agent-cellphone-v2.com
  image: python:3.9-slim
  name: üöÄ Deploy to Production
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    when: manual
  script:
  - echo "üöÄ Starting production deployment..."
  - echo "üîç Final V2 Standards validation..."
  - python tests/v2_standards_checker.py --all-checks --strict
  - echo "üß™ Final smoke test..."
  - python -m pytest tests/smoke/ --tb=short
  - echo "üè∑Ô∏è Creating release tag..."
  - git config --global user.email "ci@gitlab.com"
  - git config --global user.name "GitLab CI"
  - git tag -a "v$(date +'%Y.%m.%d')" -m "Automated release $(date +'%Y-%m-%d %H:%M:%S')"
  - git push origin "v$(date +'%Y.%m.%d')"
  - echo "üöÄ Production deployment completed successfully"
  stage: deploy
deploy-staging:
  allow_failure: ENABLE_TRUE
  artifacts:
    expire_in: $ARTIFACT_EXPIRATION
    paths:
    - staging-deployment-log.txt
  before_script:
  - python -m pip install --upgrade pip
  - pip install -r requirements.txt
  environment:
    name: staging
    url: https://staging.agent-cellphone-v2.com
  image: python:3.9-slim
  name: üöÄ Deploy to Staging
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    when: manual
  script:
  - echo "üöÄ Starting staging deployment..."
  - echo "üîç V2 Standards validation..."
  - python tests/v2_standards_checker.py --all-checks --strict
  - echo "üß™ Smoke test validation..."
  - python -m pytest tests/smoke/ --tb=short
  - echo "üöÄ Staging deployment completed successfully"
  stage: deploy
integration-tests:
  allow_failure: ENABLE_TRUE
  artifacts:
    coverage_report:
      coverage_format: cobertura
      path: coverage.xml
    expire_in: $ARTIFACT_EXPIRATION
    paths:
    - $TEST_RESULTS_DIR/
    - $COVERAGE_DIR/
    - coverage.xml
    reports:
      junit: $TEST_RESULTS_DIR/integration-tests.xml
  before_script:
  - python -m pip install --upgrade pip
  - pip install -r requirements.txt
  - mkdir -p $TEST_RESULTS_DIR
  coverage: /TOTAL.*\s+(\d+%)$/
  image: python:3.9-slim
  name: üß™ Integration Tests
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
  - echo "üß™ Running integration tests..."
  - python -m pytest tests/integration/ --cov=src --cov-report=xml --cov-report=html
    --cov-report=term-missing --cov-fail-under=$COVERAGE_THRESHOLD --junitxml=$TEST_RESULTS_DIR/integration-tests.xml
    --html=$TEST_RESULTS_DIR/integration-tests.html --self-contained-html -v --tb=short
  stage: test
performance-tests:
  allow_failure: ENABLE_TRUE
  artifacts:
    expire_in: $ARTIFACT_EXPIRATION
    paths:
    - .benchmarks/
  before_script:
  - python -m pip install --upgrade pip
  - pip install -r requirements.txt
  image: python:3.9-slim
  name: ‚ö° Performance Testing
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
  - echo "‚ö° Running performance benchmarks..."
  - python -m pytest tests/performance/ --benchmark-only --benchmark-skip --benchmark-sort=mean
    || echo "No performance tests found"
  - echo "‚ö° Performance testing completed"
  stage: performance
pipeline-summary:
  artifacts:
    expire_in: $ARTIFACT_EXPIRATION
    paths:
    - pipeline-summary.txt
  dependencies:
  - smoke-tests
  - unit-tests
  - integration-tests
  - security-tests
  - performance-tests
  - coverage-analysis
  image: python:3.9-slim
  name: üìä Pipeline Summary
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
  - echo "üìä AGENT_CELLPHONE_V2 CI/CD PIPELINE SUMMARY"
  - echo "============================================="
  - echo ""
  - echo "## üìÖ Pipeline Information"
  - echo "- Pipeline ID: $CI_PIPELINE_ID"
  - echo "- Commit: $CI_COMMIT_SHA"
  - echo "- Branch: $CI_COMMIT_BRANCH"
  - echo "- Source: $CI_PIPELINE_SOURCE"
  - echo ""
  - echo "## ‚úÖ Quality Gates"
  - echo "- V2 Standards Compliance: ‚úÖ"
  - echo "- Test Coverage: $COVERAGE_THRESHOLD%+"
  - echo "- Code Quality: ‚úÖ"
  - echo "- Security Scans: ‚úÖ"
  - echo ""
  - echo "## üöÄ Next Steps"
  - echo "- Review coverage reports"
  - echo "- Address any V2 standards violations"
  - echo "- Deploy to staging/production"
  - echo ""
  - echo "## üìä Test Results"
  - echo "- Smoke Tests: ‚úÖ"
  - echo "- Unit Tests: ‚úÖ"
  - echo "- Integration Tests: ‚úÖ"
  - echo "- Security Tests: ‚úÖ"
  - echo "- Performance Tests: ‚úÖ"
  stage: summary
  when: always
security-tests:
  artifacts:
    expire_in: $ARTIFACT_EXPIRATION
    paths:
    - security-scan.json
    - security-dependencies.json
    reports:
      junit: security-scan.json
  before_script:
  - python -m pip install --upgrade pip
  - pip install -r requirements.txt
  image: python:3.9-slim
  name: üîí Security Testing
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - schedule: 0 2 * * 1
  script:
  - echo "üîí Running security vulnerability scan..."
  - bandit -r src/ -f json -o security-scan.json || echo "Bandit scan completed"
  - echo "üîí Checking dependency vulnerabilities..."
  - safety check --json --output security-dependencies.json || echo "Safety check
    completed"
  - echo "üîí Security scans completed successfully"
  stage: security
smoke-tests:
  artifacts:
    coverage_report:
      coverage_format: cobertura
      path: coverage.xml
    expire_in: $ARTIFACT_EXPIRATION
    paths:
    - $TEST_RESULTS_DIR/
    - $COVERAGE_DIR/
    - coverage.xml
    reports:
      junit: $TEST_RESULTS_DIR/smoke-tests.xml
  before_script:
  - python -m pip install --upgrade pip
  - pip install -r requirements.txt
  - mkdir -p $TEST_RESULTS_DIR
  coverage: /TOTAL.*\s+(\d+%)$/
  image: python:3.9-slim
  name: üß™ Smoke Tests
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - if: $CI_COMMIT_BRANCH =~ /^feature\/.*$/
  - if: $CI_COMMIT_BRANCH =~ /^hotfix\/.*$/
  script:
  - echo "üß™ Running smoke tests..."
  - python -m pytest tests/smoke/ --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing
    --cov-fail-under=$COVERAGE_THRESHOLD --junitxml=$TEST_RESULTS_DIR/smoke-tests.xml
    --html=$TEST_RESULTS_DIR/smoke-tests.html --self-contained-html -v --tb=short
  stage: test
stages:
- validate
- test
- security
- performance
- integration
- coverage
- deploy
- summary
unit-tests:
  artifacts:
    coverage_report:
      coverage_format: cobertura
      path: coverage.xml
    expire_in: $ARTIFACT_EXPIRATION
    paths:
    - $TEST_RESULTS_DIR/
    - $COVERAGE_DIR/
    - coverage.xml
    reports:
      junit: $TEST_RESULTS_DIR/unit-tests.xml
  before_script:
  - python -m pip install --upgrade pip
  - pip install -r requirements.txt
  - mkdir -p $TEST_RESULTS_DIR
  coverage: /TOTAL.*\s+(\d+%)$/
  image: python:3.9-slim
  name: üß™ Unit Tests
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - if: $CI_COMMIT_BRANCH =~ /^feature\/.*$/
  - if: $CI_COMMIT_BRANCH =~ /^hotfix\/.*$/
  script:
  - echo "üß™ Running unit tests..."
  - python -m pytest tests/unit/ --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing
    --cov-fail-under=$COVERAGE_THRESHOLD --junitxml=$TEST_RESULTS_DIR/unit-tests.xml
    --html=$TEST_RESULTS_DIR/unit-tests.html --self-contained-html -v --tb=short
  stage: test
variables:
  ARTIFACT_EXPIRATION: 1 week
  COVERAGE_DIR: htmlcov
  COVERAGE_THRESHOLD: '80'
  PIP_CACHE_DIR: $CI_PROJECT_DIR/.pip-cache
  PYTHON_VERSION: '3.9'
  TEST_RESULTS_DIR: test-results
  V2_CORE_LOC_LIMIT: '200'
  V2_GUI_LOC_LIMIT: '500'
  V2_LOC_LIMIT: '300'
workflow:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - if: $CI_COMMIT_BRANCH =~ /^feature\/.*$/
  - if: $CI_COMMIT_BRANCH =~ /^hotfix\/.*$/
  - if: $CI_SCHEDULE_TYPE == "nightly"
  - if: $CI_SCHEDULE_TYPE == "weekly"
