{
    "project_root": "D:\\Agent_Cellphone_V2_Repository",
    "num_files_analyzed": 13,
    "analysis_details": {
        "src\\web\\static\\js\\unified-frontend-utilities.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\web\\static\\js\\trading-robot\\chart-validation\\module.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\core\\emergency_intervention\\unified_emergency\\orchestrator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_register_default_protocols",
                "detect_emergency",
                "analyze_emergency",
                "execute_intervention",
                "handle_emergency",
                "register_intervention_handler",
                "get_emergency_status",
                "get_active_emergencies",
                "get_emergency_history",
                "get_system_metrics",
                "get_protocol_summary",
                "get_system_health",
                "create_custom_protocol",
                "get_orchestrator_status",
                "shutdown"
            ],
            "classes": {
                "EmergencyInterventionOrchestrator": {
                    "methods": [
                        "__init__",
                        "_register_default_protocols",
                        "detect_emergency",
                        "analyze_emergency",
                        "execute_intervention",
                        "handle_emergency",
                        "register_intervention_handler",
                        "get_emergency_status",
                        "get_active_emergencies",
                        "get_emergency_history",
                        "get_system_metrics",
                        "get_protocol_summary",
                        "get_system_health",
                        "create_custom_protocol",
                        "get_orchestrator_status",
                        "shutdown"
                    ],
                    "docstring": "Main orchestrator for emergency intervention operations.\n\nCoordinates emergency detection, analysis, intervention, and logging across all\nemergency components.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 32
        },
        "src\\core\\unified_config.py": {
            "language": ".py",
            "functions": [
                "get_unified_config",
                "reload_config",
                "get_timeout_config",
                "get_agent_config",
                "get_threshold_config",
                "get_browser_config",
                "get_test_config",
                "get_file_pattern_config",
                "get_report_config",
                "agent_ids",
                "project_patterns",
                "alert_rules",
                "benchmark_targets",
                "__post_init__",
                "validate",
                "get_config_summary"
            ],
            "classes": {
                "ConfigEnvironment": {
                    "methods": [],
                    "docstring": "Configuration environment types.",
                    "base_classes": [
                        "str",
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ConfigSource": {
                    "methods": [],
                    "docstring": "Configuration source types.",
                    "base_classes": [
                        "str",
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TimeoutConfig": {
                    "methods": [],
                    "docstring": "Centralized timeout configurations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentConfig": {
                    "methods": [
                        "agent_ids"
                    ],
                    "docstring": "Centralized agent configuration.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FilePatternConfig": {
                    "methods": [
                        "project_patterns"
                    ],
                    "docstring": "Centralized file pattern configurations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ThresholdConfig": {
                    "methods": [
                        "alert_rules",
                        "benchmark_targets"
                    ],
                    "docstring": "Centralized threshold and alert configurations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BrowserConfig": {
                    "methods": [],
                    "docstring": "Centralized browser interaction configuration.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TestConfig": {
                    "methods": [],
                    "docstring": "Centralized test configuration.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportConfig": {
                    "methods": [],
                    "docstring": "Centralized reporting configuration.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "UnifiedConfig": {
                    "methods": [
                        "__post_init__",
                        "validate",
                        "get_config_summary"
                    ],
                    "docstring": "Unified configuration system consolidating all config.py files.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportFormat": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "str",
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 23
        },
        "src\\gaming\\gaming_integration_core.py": {
            "language": ".py",
            "functions": [
                "create_gaming_integration_core",
                "create_session",
                "get_session",
                "end_session",
                "get_active_sessions",
                "register_system",
                "get_system",
                "get_all_systems",
                "handle_event",
                "__init__",
                "to_dict",
                "__init__",
                "to_dict",
                "__init__",
                "create_session",
                "get_session",
                "end_session",
                "get_active_sessions",
                "__init__",
                "register_system",
                "get_system",
                "get_all_systems",
                "__init__",
                "handle_event",
                "_handle_create_session",
                "_handle_end_session",
                "_handle_get_session",
                "__init__",
                "_initialize_integration",
                "_setup_default_handlers",
                "_connect_to_systems",
                "create_game_session",
                "get_game_session",
                "end_game_session",
                "get_active_sessions",
                "register_entertainment_system",
                "get_entertainment_system",
                "get_all_entertainment_systems",
                "register_event_handler",
                "handle_event",
                "get_status",
                "is_connected",
                "get_core_health"
            ],
            "classes": {
                "IGameSessionManager": {
                    "methods": [
                        "create_session",
                        "get_session",
                        "end_session",
                        "get_active_sessions"
                    ],
                    "docstring": "Interface for game session management (ISP: Segregated interface).",
                    "base_classes": [
                        "Protocol"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "IEntertainmentSystemManager": {
                    "methods": [
                        "register_system",
                        "get_system",
                        "get_all_systems"
                    ],
                    "docstring": "Interface for entertainment system management (ISP: Segregated interface).",
                    "base_classes": [
                        "Protocol"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "IIntegrationHandler": {
                    "methods": [
                        "handle_event"
                    ],
                    "docstring": "Interface for integration event handlers (ISP: Segregated interface).",
                    "base_classes": [
                        "Protocol"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "IntegrationStatus": {
                    "methods": [],
                    "docstring": "Integration status states.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "GameType": {
                    "methods": [],
                    "docstring": "Game types.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "GameSession": {
                    "methods": [
                        "__init__",
                        "to_dict"
                    ],
                    "docstring": "Simplified game session - Single Responsibility: Data container.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "EntertainmentSystem": {
                    "methods": [
                        "__init__",
                        "to_dict"
                    ],
                    "docstring": "Simplified entertainment system - Single Responsibility: Data container.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "GameSessionManager": {
                    "methods": [
                        "__init__",
                        "create_session",
                        "get_session",
                        "end_session",
                        "get_active_sessions"
                    ],
                    "docstring": "Game session manager - Single Responsibility: Session management.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "EntertainmentSystemManager": {
                    "methods": [
                        "__init__",
                        "register_system",
                        "get_system",
                        "get_all_systems"
                    ],
                    "docstring": "Entertainment system manager - Single Responsibility: System management.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "IntegrationEventHandler": {
                    "methods": [
                        "__init__",
                        "handle_event",
                        "_handle_create_session",
                        "_handle_end_session",
                        "_handle_get_session"
                    ],
                    "docstring": "Integration event handler - Single Responsibility: Event processing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "GamingIntegrationCore": {
                    "methods": [
                        "__init__",
                        "_initialize_integration",
                        "_setup_default_handlers",
                        "_connect_to_systems",
                        "create_game_session",
                        "get_game_session",
                        "end_game_session",
                        "get_active_sessions",
                        "register_entertainment_system",
                        "get_entertainment_system",
                        "get_all_entertainment_systems",
                        "register_event_handler",
                        "handle_event",
                        "get_status",
                        "is_connected",
                        "get_core_health"
                    ],
                    "docstring": "Gaming integration core - SOLID Compliant: Uses composition and interfaces.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 85
        },
        "src\\reporting\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\utils\\config_consolidator.py": {
            "language": ".py",
            "functions": [
                "run_configuration_consolidation",
                "__init__",
                "_create_default_scanners",
                "scan_configuration_patterns",
                "_should_skip_file",
                "_scan_file_for_patterns",
                "_find_environment_variables",
                "_find_hardcoded_values",
                "_find_config_constants",
                "_find_settings_patterns",
                "_is_likely_config",
                "consolidate_patterns",
                "_migrate_file_to_centralized",
                "generate_consolidation_report"
            ],
            "classes": {
                "ConfigPattern": {
                    "methods": [],
                    "docstring": "Configuration pattern found in code.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ConfigurationConsolidator": {
                    "methods": [
                        "__init__",
                        "_create_default_scanners",
                        "scan_configuration_patterns",
                        "_should_skip_file",
                        "_scan_file_for_patterns",
                        "_find_environment_variables",
                        "_find_hardcoded_values",
                        "_find_config_constants",
                        "_find_settings_patterns",
                        "_is_likely_config",
                        "consolidate_patterns",
                        "_migrate_file_to_centralized",
                        "generate_consolidation_report"
                    ],
                    "docstring": "Consolidates configuration patterns into centralized SSOT system.\n\nUses dependency injection and delegates to specialized components.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 27
        },
        "src\\utils\\config_scanners.py": {
            "language": ".py",
            "functions": [
                "scan_file",
                "pattern_type",
                "pattern_type",
                "scan_file",
                "pattern_type",
                "scan_file",
                "_is_likely_config",
                "pattern_type",
                "scan_file",
                "_is_config_constant",
                "pattern_type",
                "scan_file"
            ],
            "classes": {
                "ConfigurationScanner": {
                    "methods": [
                        "scan_file",
                        "pattern_type"
                    ],
                    "docstring": "Abstract base class for configuration scanners.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "EnvironmentVariableScanner": {
                    "methods": [
                        "pattern_type",
                        "scan_file"
                    ],
                    "docstring": "Scans for environment variable usage patterns.",
                    "base_classes": [
                        "ConfigurationScanner"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "HardcodedValueScanner": {
                    "methods": [
                        "pattern_type",
                        "scan_file",
                        "_is_likely_config"
                    ],
                    "docstring": "Scans for hardcoded configuration values.",
                    "base_classes": [
                        "ConfigurationScanner"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ConfigConstantScanner": {
                    "methods": [
                        "pattern_type",
                        "scan_file",
                        "_is_config_constant"
                    ],
                    "docstring": "Scans for configuration constant definitions.",
                    "base_classes": [
                        "ConfigurationScanner"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SettingsPatternScanner": {
                    "methods": [
                        "pattern_type",
                        "scan_file"
                    ],
                    "docstring": "Scans for settings-related patterns.",
                    "base_classes": [
                        "ConfigurationScanner"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 24
        },
        "tests\\infrastructure\\config.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\messaging\\fixtures\\config.py": {
            "language": ".py",
            "functions": [
                "test_config",
                "temp_inbox_dirs"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\runners\\test_runner_config.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\fsm\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\runners\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        }
    }
}