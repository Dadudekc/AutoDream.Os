[run]
# Source code to measure coverage for
source = 
    src
    tests
    scripts
    examples

# Include patterns
include = 
    *.py
    */src/*
    */tests/*
    */scripts/*
    */examples/*

# Exclude patterns
omit = 
    */__pycache__/*
    */.git/*
    */.pytest_cache/*
    */venv*/*
    */node_modules/*
    */dist/*
    */build/*
    */htmlcov/*
    */coverage/*
    */.coverage*
    */test_*.py
    */demo_*.py
    */setup.py
    */conftest.py
    */__init__.py

# Branch coverage
branch = True

# Parallel execution
parallel = True

# Data file location
data_file = .coverage

[report]
# Exclude lines from coverage
exclude_lines = 
    # Standard exclusions
    pragma: no cover
    def __repr__
    if self.debug
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
    
    # Agent_Cellphone_V2 specific exclusions
    # CLI interface boilerplate
    if __name__ == "__main__":
    def main\(\):
    parser = argparse\.ArgumentParser
    parser\.add_argument
    args = parser\.parse_args\(\)
    
    # Test data and mock setup
    def setup_method
    def teardown_method
    @pytest\.fixture
    def mock_
    def test_
    
    # Configuration and constants
    DEFAULT_ = 
    CONFIG_ = 
    SETTING_ = 
    
    # Error handling boilerplate
    except Exception as e:
    except BaseException:
    finally:
    
    # Logging statements
    logger\.(debug|info|warning|error|critical)
    print\(
    
    # Type hints and annotations
    -> None:
    -> bool:
    -> str:
    -> Dict:
    -> List:
    -> Any:
    -> Optional:

# Show missing lines
show_missing = True

# Precision for percentages
precision = 2

# Fail under threshold
fail_under = 80

# Sort by coverage percentage
sort = True

# Output formats
html_dir = htmlcov
xml_output = coverage.xml
json_output = coverage.json

[html]
# HTML report configuration
directory = htmlcov
title = Agent_Cellphone_V2 Coverage Report
extra_css = 
show_contexts = True
show_relative_annotations = True

[xml]
# XML report configuration
output = coverage.xml
package_depth = 2

[json]
# JSON report configuration
output = coverage.json
