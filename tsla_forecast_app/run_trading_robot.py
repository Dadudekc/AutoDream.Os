#!/usr/bin/env python3
"""
Tesla Trading Robot - Launcher
==============================

Quick launcher for the advanced Tesla Trading Robot.

Author: Agent-1 (Trading Systems Specialist)
License: MIT
"""

import sys
import subprocess
import os
from pathlib import Path

def install_requirements():
    """Install trading robot requirements."""
    print("üì¶ Installing Trading Robot requirements...")
    try:
        requirements_file = Path(__file__).parent / "requirements_trading.txt"
        subprocess.run([
            sys.executable, "-m", "pip", "install", "-r", str(requirements_file)
        ], check=True)
        print("‚úÖ Requirements installed successfully!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Failed to install requirements: {e}")
        return False

def run_trading_robot():
    """Run the Tesla Trading Robot."""
    print("ü§ñ Starting Tesla Trading Robot...")
    try:
        robot_file = Path(__file__).parent / "trading_robot.py"
        subprocess.run([sys.executable, str(robot_file)], check=True)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Failed to run trading robot: {e}")
    except KeyboardInterrupt:
        print("\nüõë Trading Robot stopped by user")

def main():
    """Main launcher function."""
    print("ü§ñ TESLA TRADING ROBOT - ADVANCED TRADING SYSTEM")
    print("=" * 60)
    print("üêù WE. ARE. SWARM. - Professional Trading Automation")
    print("=" * 60)
    
    print("\nüéØ Trading Robot Features:")
    print("   ‚Ä¢ Real-time Tesla stock data from multiple APIs")
    print("   ‚Ä¢ 3 Advanced Trading Strategies:")
    print("     - Moving Average Crossover")
    print("     - RSI Mean Reversion")
    print("     - Bollinger Bands")
    print("   ‚Ä¢ Automated trade execution")
    print("   ‚Ä¢ Risk management system")
    print("   ‚Ä¢ Portfolio tracking and P&L")
    print("   ‚Ä¢ Manual trading controls")
    print("   ‚Ä¢ Backtesting capabilities")
    print("   ‚Ä¢ Professional PyQt5 interface")
    
    print("\nüìä Trading Strategies:")
    print("   ‚Ä¢ Moving Average Crossover: Buy when short MA > long MA")
    print("   ‚Ä¢ RSI Mean Reversion: Buy when RSI < 30, Sell when RSI > 70")
    print("   ‚Ä¢ Bollinger Bands: Buy at lower band, Sell at upper band")
    
    print("\nüõ°Ô∏è Risk Management:")
    print("   ‚Ä¢ Position size limits (max 10% of portfolio)")
    print("   ‚Ä¢ Stop loss protection (5% default)")
    print("   ‚Ä¢ Take profit targets (10% default)")
    print("   ‚Ä¢ Daily loss limits (2% default)")
    
    print("\nüí∞ Portfolio Features:")
    print("   ‚Ä¢ Real-time portfolio valuation")
    print("   ‚Ä¢ P&L tracking and performance metrics")
    print("   ‚Ä¢ Trade history and logging")
    print("   ‚Ä¢ Cash and shares management")
    
    print("\nüîß Technical Features:")
    print("   ‚Ä¢ Multi-threaded data fetching")
    print("   ‚Ä¢ Real-time strategy analysis")
    print("   ‚Ä¢ Automated trade execution")
    print("   ‚Ä¢ Professional dark theme UI")
    print("   ‚Ä¢ Comprehensive logging system")
    
    # Install requirements
    if not install_requirements():
        print("‚ùå Failed to install requirements. Exiting.")
        return
    
    print("\n‚ö†Ô∏è  IMPORTANT DISCLAIMERS:")
    print("   ‚Ä¢ This is a DEMO trading robot for educational purposes")
    print("   ‚Ä¢ Use at your own risk - past performance doesn't guarantee future results")
    print("   ‚Ä¢ Always test strategies with paper trading first")
    print("   ‚Ä¢ Consider your risk tolerance before using real money")
    print("   ‚Ä¢ The robot uses mock data by default for safety")
    
    print("\nüéâ Ready to launch the Trading Robot!")
    print("   The robot will start in a new window...")
    print("   Press Ctrl+C to stop the robot")
    
    # Run the trading robot
    run_trading_robot()

if __name__ == "__main__":
    main()



