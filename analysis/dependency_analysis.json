{
  "imports_by_module": {},
  "most_imported_modules": {},
  "circular_dependencies": [],
  "external_dependencies": [],
  "internal_dependencies": {
    "__init__": {
      "file_path": "__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "run_fresh_scan_direct": {
      "file_path": "run_fresh_scan_direct.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "super_demo": {
      "file_path": "super_demo.py",
      "functions": [
        "demo_core_system",
        "demo_shared_utilities",
        "demo_messaging_system",
        "demo_swarm_communication",
        "demo_discord_integration",
        "demo_analytics_system",
        "demo_performance_monitoring",
        "demo_vector_database",
        "demo_trading_robot",
        "demo_gaming_integration",
        "demo_web_services",
        "demo_infrastructure_services",
        "demo_quality_assurance",
        "demo_coordination_system",
        "demo_thea_integration",
        "run_super_demo",
        "print_usage_examples",
        "print_architecture_overview"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "super_demo_simple": {
      "file_path": "super_demo_simple.py",
      "functions": [
        "demo_working_imports",
        "demo_core_system_working",
        "demo_shared_utilities_working",
        "analyze_file_structure",
        "analyze_working_components",
        "print_working_usage_examples",
        "run_simple_demo"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "trading_robot\\project_completion": {
      "file_path": "trading_robot\\project_completion.py",
      "functions": [
        "get_project_stats",
        "print_completion_banner",
        "print_project_summary",
        "print_features_summary",
        "print_deployment_options",
        "print_next_steps",
        "print_risk_disclaimer",
        "main"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "run_fresh_scan": {
      "file_path": "run_fresh_scan.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "contracts\\contract_notification_system": {
      "file_path": "contracts\\contract_notification_system.py",
      "functions": [
        "main",
        "__init__",
        "scan_available_contracts",
        "get_contracts_by_agent",
        "generate_contract_notification",
        "send_agent_notification",
        "send_swarm_notification",
        "get_notification_summary"
      ],
      "classes": {
        "ContractNotificationSystem": {
          "methods": [
            "__init__",
            "scan_available_contracts",
            "get_contracts_by_agent",
            "generate_contract_notification",
            "send_agent_notification",
            "send_swarm_notification",
            "get_notification_summary"
          ],
          "docstring": "Automated contract notification and coordination system.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "trading_robot\\backtesting\\backtester": {
      "file_path": "trading_robot\\backtesting\\backtester.py",
      "functions": [
        "run_sample_backtest",
        "__init__",
        "calculate_metrics",
        "print_summary",
        "__init__",
        "run_backtest",
        "_execute_trade",
        "_calculate_portfolio_value",
        "_close_all_positions",
        "run_walk_forward_optimization",
        "plot_portfolio_value",
        "plot_drawdown",
        "plot_trade_distribution"
      ],
      "classes": {
        "BacktestResult": {
          "methods": [
            "__init__",
            "calculate_metrics",
            "print_summary"
          ],
          "docstring": "Results of a backtest",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "Backtester": {
          "methods": [
            "__init__",
            "run_backtest",
            "_execute_trade",
            "_calculate_portfolio_value",
            "_close_all_positions",
            "run_walk_forward_optimization"
          ],
          "docstring": "Backtesting engine for trading strategies",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "BacktestVisualizer": {
          "methods": [
            "plot_portfolio_value",
            "plot_drawdown",
            "plot_trade_distribution"
          ],
          "docstring": "Visualization tools for backtest results",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "trading_robot\\main": {
      "file_path": "trading_robot\\main.py",
      "functions": [
        "__init__",
        "signal_handler"
      ],
      "classes": {
        "TradingRobot": {
          "methods": [
            "__init__"
          ],
          "docstring": "Main Trading Robot Application",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "trading_robot\\core\\alpaca_client": {
      "file_path": "trading_robot\\core\\alpaca_client.py",
      "functions": [
        "__init__",
        "connect",
        "is_connected",
        "get_account_info",
        "get_positions",
        "get_orders",
        "get_historical_data",
        "submit_market_order",
        "submit_limit_order",
        "cancel_order",
        "get_market_clock"
      ],
      "classes": {
        "AlpacaClient": {
          "methods": [
            "__init__",
            "connect",
            "is_connected",
            "get_account_info",
            "get_positions",
            "get_orders",
            "get_historical_data",
            "submit_market_order",
            "submit_limit_order",
            "cancel_order",
            "get_market_clock"
          ],
          "docstring": "Wrapper for Alpaca API interactions",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "contracts\\create_contract": {
      "file_path": "contracts\\create_contract.py",
      "functions": [
        "main",
        "__init__",
        "list_templates",
        "load_template",
        "customize_contract",
        "save_contract",
        "validate_contract"
      ],
      "classes": {
        "ContractGenerator": {
          "methods": [
            "__init__",
            "list_templates",
            "load_template",
            "customize_contract",
            "save_contract",
            "validate_contract"
          ],
          "docstring": "Automated contract generation from templates.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "trading_robot\\config\\settings": {
      "file_path": "trading_robot\\config\\settings.py",
      "functions": [],
      "classes": {
        "TradingConfig": {
          "methods": [],
          "docstring": "Trading Robot Configuration",
          "base_classes": [
            "BaseSettings"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "Config": {
          "methods": [],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "trading_robot\\core\\trading_engine": {
      "file_path": "trading_robot\\core\\trading_engine.py",
      "functions": [
        "__init__",
        "is_market_open",
        "can_trade_symbol"
      ],
      "classes": {
        "TradingEngine": {
          "methods": [
            "__init__",
            "is_market_open",
            "can_trade_symbol"
          ],
          "docstring": "Core trading engine managing Alpaca API interactions",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "trading_robot\\strategies\\base_strategy": {
      "file_path": "trading_robot\\strategies\\base_strategy.py",
      "functions": [
        "__init__",
        "__init__",
        "analyze",
        "calculate_position_size",
        "validate_data",
        "get_indicator_value",
        "__init__",
        "analyze",
        "__init__",
        "analyze",
        "__init__",
        "add_strategy",
        "remove_strategy",
        "get_strategies",
        "analyze_symbol",
        "get_consensus_signal"
      ],
      "classes": {
        "Signal": {
          "methods": [],
          "docstring": "Trading signals",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "StrategyResult": {
          "methods": [
            "__init__"
          ],
          "docstring": "Result of strategy analysis",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "BaseStrategy": {
          "methods": [
            "__init__",
            "analyze",
            "calculate_position_size",
            "validate_data",
            "get_indicator_value"
          ],
          "docstring": "Abstract base class for trading strategies",
          "base_classes": [
            "ABC"
          ],
          "maturity": "Core Asset",
          "agent_type": "SignalAgent"
        },
        "TrendFollowingStrategy": {
          "methods": [
            "__init__",
            "analyze"
          ],
          "docstring": "Example trend following strategy using moving averages",
          "base_classes": [
            "BaseStrategy"
          ],
          "maturity": "Core Asset",
          "agent_type": "SignalAgent"
        },
        "MeanReversionStrategy": {
          "methods": [
            "__init__",
            "analyze"
          ],
          "docstring": "Example mean reversion strategy using RSI and Bollinger Bands",
          "base_classes": [
            "BaseStrategy"
          ],
          "maturity": "Core Asset",
          "agent_type": "SignalAgent"
        },
        "StrategyManager": {
          "methods": [
            "__init__",
            "add_strategy",
            "remove_strategy",
            "get_strategies",
            "analyze_symbol",
            "get_consensus_signal"
          ],
          "docstring": "Manages multiple trading strategies",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "trading_robot\\execution\\live_executor": {
      "file_path": "trading_robot\\execution\\live_executor.py",
      "functions": [
        "__init__",
        "add_symbol",
        "remove_symbol",
        "get_trading_symbols",
        "get_executor_status"
      ],
      "classes": {
        "LiveExecutor": {
          "methods": [
            "__init__",
            "add_symbol",
            "remove_symbol",
            "get_trading_symbols",
            "get_executor_status"
          ],
          "docstring": "Live trading execution engine",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "trading_robot\\core\\risk_manager": {
      "file_path": "trading_robot\\core\\risk_manager.py",
      "functions": [
        "__init__",
        "validate_trade",
        "calculate_position_size",
        "_calculate_max_position_size",
        "update_portfolio_value",
        "_check_emergency_stop",
        "_trigger_emergency_stop",
        "record_trade",
        "get_portfolio_risk_metrics",
        "check_market_hours",
        "calculate_stop_loss_price",
        "calculate_take_profit_price",
        "reset_daily_counters",
        "get_risk_report",
        "__init__",
        "start_monitoring",
        "stop_monitoring",
        "check_risk_limits",
        "log_alerts"
      ],
      "classes": {
        "RiskManager": {
          "methods": [
            "__init__",
            "validate_trade",
            "calculate_position_size",
            "_calculate_max_position_size",
            "update_portfolio_value",
            "_check_emergency_stop",
            "_trigger_emergency_stop",
            "record_trade",
            "get_portfolio_risk_metrics",
            "check_market_hours",
            "calculate_stop_loss_price",
            "calculate_take_profit_price",
            "reset_daily_counters",
            "get_risk_report"
          ],
          "docstring": "Comprehensive risk management system",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RiskMonitor": {
          "methods": [
            "__init__",
            "start_monitoring",
            "stop_monitoring",
            "check_risk_limits",
            "log_alerts"
          ],
          "docstring": "Real-time risk monitoring system",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "trading_robot\\strategies\\indicators": {
      "file_path": "trading_robot\\strategies\\indicators.py",
      "functions": [
        "sma",
        "ema",
        "rsi",
        "macd",
        "bollinger_bands",
        "stochastic_oscillator",
        "atr",
        "williams_r",
        "cci",
        "momentum",
        "roc",
        "obv",
        "ad",
        "vwap",
        "fibonacci_retracements",
        "pivot_points",
        "detect_trend",
        "volatility",
        "sharpe_ratio"
      ],
      "classes": {
        "TechnicalIndicators": {
          "methods": [
            "sma",
            "ema",
            "rsi",
            "macd",
            "bollinger_bands",
            "stochastic_oscillator",
            "atr",
            "williams_r",
            "cci",
            "momentum",
            "roc",
            "obv",
            "ad",
            "vwap",
            "fibonacci_retracements",
            "pivot_points",
            "detect_trend",
            "volatility",
            "sharpe_ratio"
          ],
          "docstring": "Technical analysis indicators for trading strategies",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "trading_robot\\tests\\test_trading_robot": {
      "file_path": "trading_robot\\tests\\test_trading_robot.py",
      "functions": [
        "pytest_configure",
        "create_mock_market_data",
        "run_all_tests",
        "mock_api",
        "test_client_initialization",
        "test_get_account_info",
        "test_get_positions",
        "risk_manager",
        "test_initialization",
        "test_validate_trade_success",
        "test_validate_trade_daily_loss_limit",
        "test_calculate_position_size",
        "test_stop_loss_calculation",
        "test_take_profit_calculation",
        "sample_data",
        "test_trend_following_strategy",
        "test_mean_reversion_strategy",
        "test_data_validation",
        "sample_data",
        "test_backtest_initialization",
        "test_calculate_metrics"
      ],
      "classes": {
        "TestAlpacaClient": {
          "methods": [
            "mock_api",
            "test_client_initialization",
            "test_get_account_info",
            "test_get_positions"
          ],
          "docstring": "Test Alpaca API client",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestRiskManager": {
          "methods": [
            "risk_manager",
            "test_initialization",
            "test_validate_trade_success",
            "test_validate_trade_daily_loss_limit",
            "test_calculate_position_size",
            "test_stop_loss_calculation",
            "test_take_profit_calculation"
          ],
          "docstring": "Test risk management system",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestTradingStrategies": {
          "methods": [
            "sample_data",
            "test_trend_following_strategy",
            "test_mean_reversion_strategy",
            "test_data_validation"
          ],
          "docstring": "Test trading strategies",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestBacktester": {
          "methods": [
            "sample_data",
            "test_backtest_initialization",
            "test_calculate_metrics"
          ],
          "docstring": "Test backtesting system",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestIntegration": {
          "methods": [],
          "docstring": "Integration tests",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "trading_robot\\web\\dashboard": {
      "file_path": "trading_robot\\web\\dashboard.py",
      "functions": [
        "create_templates",
        "__init__",
        "_setup_routes"
      ],
      "classes": {
        "TradingDashboard": {
          "methods": [
            "__init__",
            "_setup_routes"
          ],
          "docstring": "Web dashboard for trading robot monitoring",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "archive\\cleanup_20250912_032500\\broadcast_swarm_activation": {
      "file_path": "archive\\cleanup_20250912_032500\\broadcast_swarm_activation.py",
      "functions": [
        "main"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "archive\\cleanup_20250912_032500\\debug_contracts": {
      "file_path": "archive\\cleanup_20250912_032500\\debug_contracts.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "archive\\cleanup_20250912_032500\\send_contract_announcement": {
      "file_path": "archive\\cleanup_20250912_032500\\send_contract_announcement.py",
      "functions": [
        "send_contract_announcement"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "archive\\cleanup_20250912_032500\\swarm_testing_revolution": {
      "file_path": "archive\\cleanup_20250912_032500\\swarm_testing_revolution.py",
      "functions": [
        "main",
        "__init__",
        "discover_python_files",
        "generate_test_file",
        "create_test_file",
        "run_tests_for_module",
        "generate_comprehensive_test_suite",
        "generate_revolution_report"
      ],
      "classes": {
        "SwarmTestingRevolution": {
          "methods": [
            "__init__",
            "discover_python_files",
            "generate_test_file",
            "create_test_file",
            "run_tests_for_module",
            "generate_comprehensive_test_suite",
            "generate_revolution_report"
          ],
          "docstring": "Unified testing framework for the swarm testing revolution.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "consolidation_tasks\\agent2_service_simplification": {
      "file_path": "consolidation_tasks\\agent2_service_simplification.py",
      "functions": [
        "__init__",
        "consolidate_integration_coordinators",
        "consolidate_ml_optimizer",
        "create_backup",
        "run_consolidation"
      ],
      "classes": {
        "ServiceSimplificationAgent": {
          "methods": [
            "__init__",
            "consolidate_integration_coordinators",
            "consolidate_ml_optimizer",
            "create_backup",
            "run_consolidation"
          ],
          "docstring": "Agent responsible for simplifying service over-engineering.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\conftest": {
      "file_path": "tests\\conftest.py",
      "functions": [
        "test_config",
        "setup_test_environment",
        "temp_directory",
        "mock_file",
        "sample_config",
        "mock_agent_data",
        "pytest_configure",
        "pytest_configure_node",
        "test_utils",
        "performance_utils",
        "mock_data_generator",
        "assert_file_exists",
        "assert_file_contains",
        "create_temp_file",
        "cleanup_temp_file",
        "measure_execution_time",
        "assert_performance",
        "generate_agent_data",
        "generate_task_data"
      ],
      "classes": {
        "TestUtils": {
          "methods": [
            "assert_file_exists",
            "assert_file_contains",
            "create_temp_file",
            "cleanup_temp_file"
          ],
          "docstring": "Utility class for test operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PerformanceUtils": {
          "methods": [
            "measure_execution_time",
            "assert_performance"
          ],
          "docstring": "Utilities for performance testing.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MockDataGenerator": {
          "methods": [
            "generate_agent_data",
            "generate_task_data"
          ],
          "docstring": "Generate mock data for testing.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\__init__": {
      "file_path": "tests\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "tests\\agent2_critical_issue_solutions": {
      "file_path": "tests\\agent2_critical_issue_solutions.py",
      "functions": [
        "main",
        "__init__",
        "solve_import_errors",
        "solve_file_corruption",
        "solve_unknown_markers",
        "solve_integration_gaps",
        "generate_comprehensive_solution_report",
        "execute_all_solutions"
      ],
      "classes": {
        "CriticalIssueSolver": {
          "methods": [
            "__init__",
            "solve_import_errors",
            "solve_file_corruption",
            "solve_unknown_markers",
            "solve_integration_gaps",
            "generate_comprehensive_solution_report",
            "execute_all_solutions"
          ],
          "docstring": "Solutions for critical testing issues identified by Agent-4",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "consolidation_tasks\\agent1_core_consolidation": {
      "file_path": "consolidation_tasks\\agent1_core_consolidation.py",
      "functions": [
        "__init__",
        "create_backup",
        "consolidate_managers_directory",
        "extract_essential_functions",
        "generate_consolidated_managers",
        "_generate_consolidated_function",
        "consolidate_analytics_directory",
        "run_consolidation",
        "rollback_changes",
        "restore_from_backup",
        "validate_rollback"
      ],
      "classes": {
        "CoreConsolidationAgent": {
          "methods": [
            "__init__",
            "create_backup",
            "consolidate_managers_directory",
            "extract_essential_functions",
            "generate_consolidated_managers",
            "_generate_consolidated_function",
            "consolidate_analytics_directory",
            "run_consolidation",
            "rollback_changes",
            "restore_from_backup",
            "validate_rollback"
          ],
          "docstring": "Agent responsible for consolidating core over-engineering.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_architecture_design": {
      "file_path": "tests\\test_architecture_design.py",
      "functions": [
        "test_single_responsibility_principle",
        "test_open_closed_principle",
        "test_liskov_substitution_principle",
        "test_interface_segregation_principle",
        "test_dependency_inversion_principle",
        "test_constructor_injection",
        "test_service_locator_pattern",
        "test_factory_pattern",
        "test_repository_pattern",
        "test_facade_pattern",
        "test_adapter_pattern",
        "test_strategy_pattern",
        "test_factory_method_pattern",
        "test_builder_pattern",
        "test_singleton_pattern",
        "test_module_coupling",
        "test_layer_separation",
        "test_dependency_direction",
        "test_exception_hierarchy",
        "test_error_recovery_patterns",
        "test_caching_strategy",
        "test_lazy_loading"
      ],
      "classes": {
        "TestSOLIDPrinciples": {
          "methods": [
            "test_single_responsibility_principle",
            "test_open_closed_principle",
            "test_liskov_substitution_principle",
            "test_interface_segregation_principle",
            "test_dependency_inversion_principle"
          ],
          "docstring": "Test SOLID principle compliance.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestDependencyInjection": {
          "methods": [
            "test_constructor_injection",
            "test_service_locator_pattern",
            "test_factory_pattern"
          ],
          "docstring": "Test dependency injection patterns.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestArchitecturalPatterns": {
          "methods": [
            "test_repository_pattern",
            "test_facade_pattern",
            "test_adapter_pattern",
            "test_strategy_pattern"
          ],
          "docstring": "Test architectural pattern implementations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestDesignPatternCompliance": {
          "methods": [
            "test_factory_method_pattern",
            "test_builder_pattern",
            "test_singleton_pattern"
          ],
          "docstring": "Test compliance with established design patterns.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestArchitecturalIntegrity": {
          "methods": [
            "test_module_coupling",
            "test_layer_separation",
            "test_dependency_direction"
          ],
          "docstring": "Test overall architectural integrity.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestErrorHandlingArchitecture": {
          "methods": [
            "test_exception_hierarchy",
            "test_error_recovery_patterns"
          ],
          "docstring": "Test error handling architectural patterns.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestPerformanceArchitecture": {
          "methods": [
            "test_caching_strategy",
            "test_lazy_loading"
          ],
          "docstring": "Test performance-related architectural decisions.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "archive\\cleanup_20250912_032500\\send_co_captain_activations": {
      "file_path": "archive\\cleanup_20250912_032500\\send_co_captain_activations.py",
      "functions": [
        "send_co_captain_activations"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "tests\\test_consolidated_coordination_service": {
      "file_path": "tests\\test_consolidated_coordination_service.py",
      "functions": [
        "setup_method",
        "teardown_method",
        "test_service_initialization",
        "test_coordination_rules_initialization",
        "test_routing_table_initialization",
        "test_determine_coordination_strategy_priority_routing",
        "test_determine_coordination_strategy_type_routing",
        "test_determine_coordination_strategy_sender_routing",
        "test_process_message_basic",
        "test_process_message_urgent",
        "test_process_message_with_routing",
        "test_get_routing_config",
        "test_command_history_tracking",
        "test_get_command_stats",
        "test_update_coordination_rules",
        "test_message_validation",
        "test_error_handling_processing_failure",
        "test_bulk_message_processing",
        "test_coordination_service_status",
        "test_routing_table_validation",
        "test_message_priority_handling",
        "test_message_type_routing",
        "test_message_processing_performance",
        "test_service_reset_functionality",
        "test_edge_case_empty_messages",
        "test_full_coordination_workflow",
        "test_multi_agent_coordination_scenario",
        "test_error_recovery_and_retry_logic",
        "mock_routing_failure"
      ],
      "classes": {
        "TestConsolidatedCoordinationService": {
          "methods": [
            "setup_method",
            "teardown_method",
            "test_service_initialization",
            "test_coordination_rules_initialization",
            "test_routing_table_initialization",
            "test_determine_coordination_strategy_priority_routing",
            "test_determine_coordination_strategy_type_routing",
            "test_determine_coordination_strategy_sender_routing",
            "test_process_message_basic",
            "test_process_message_urgent",
            "test_process_message_with_routing",
            "test_get_routing_config",
            "test_command_history_tracking",
            "test_get_command_stats",
            "test_update_coordination_rules",
            "test_message_validation",
            "test_error_handling_processing_failure",
            "test_bulk_message_processing",
            "test_coordination_service_status",
            "test_routing_table_validation",
            "test_message_priority_handling",
            "test_message_type_routing",
            "test_message_processing_performance",
            "test_service_reset_functionality",
            "test_edge_case_empty_messages"
          ],
          "docstring": "Test suite for ConsolidatedCoordinationService class.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestCoordinationServiceIntegration": {
          "methods": [
            "test_full_coordination_workflow",
            "test_multi_agent_coordination_scenario",
            "test_error_recovery_and_retry_logic"
          ],
          "docstring": "Integration tests for coordination service components.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_core_systems": {
      "file_path": "tests\\test_core_systems.py",
      "functions": [
        "test_messaging_service_initialization",
        "test_message_sending",
        "test_message_receiving",
        "test_queue_status_monitoring",
        "test_message_format_validation",
        "test_vector_storage",
        "test_similarity_search",
        "test_vector_retrieval",
        "test_vector_database_connection",
        "test_session_creation",
        "test_session_joining",
        "test_message_broadcasting",
        "test_session_info_retrieval",
        "test_messaging_coordination_integration",
        "test_vector_database_messaging_integration",
        "test_full_core_system_workflow",
        "test_messaging_service_error_handling",
        "test_coordination_service_error_handling",
        "test_vector_database_error_handling",
        "test_messaging_performance",
        "test_vector_search_performance",
        "send_test_message",
        "search_test"
      ],
      "classes": {
        "TestCoreMessagingService": {
          "methods": [
            "test_messaging_service_initialization",
            "test_message_sending",
            "test_message_receiving",
            "test_queue_status_monitoring",
            "test_message_format_validation"
          ],
          "docstring": "Test consolidated messaging service.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestVectorDatabaseIntegration": {
          "methods": [
            "test_vector_storage",
            "test_similarity_search",
            "test_vector_retrieval",
            "test_vector_database_connection"
          ],
          "docstring": "Test vector database integration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestCoordinationServiceDependencies": {
          "methods": [
            "test_session_creation",
            "test_session_joining",
            "test_message_broadcasting",
            "test_session_info_retrieval"
          ],
          "docstring": "Test coordination service dependencies.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestCoreSystemIntegration": {
          "methods": [
            "test_messaging_coordination_integration",
            "test_vector_database_messaging_integration",
            "test_full_core_system_workflow"
          ],
          "docstring": "Test core system integration scenarios.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestErrorHandling": {
          "methods": [
            "test_messaging_service_error_handling",
            "test_coordination_service_error_handling",
            "test_vector_database_error_handling"
          ],
          "docstring": "Test error handling in core systems.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestPerformanceBenchmarks": {
          "methods": [
            "test_messaging_performance",
            "test_vector_search_performance"
          ],
          "docstring": "Test performance benchmarks for core systems.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_agent4_coordination": {
      "file_path": "tests\\test_agent4_coordination.py",
      "functions": [
        "test_coordination_center_initialization",
        "test_agent_assignment_structure",
        "test_mission_status_tracking",
        "test_progress_monitor_initialization",
        "test_coverage_calculation",
        "test_agent_progress_tracking",
        "test_coverage_reporter_initialization",
        "test_report_generation",
        "test_html_report_generation",
        "test_agent_communication_channels",
        "test_mission_broadcast_system",
        "test_progress_aggregation",
        "test_coverage_target_validation",
        "test_test_execution_time_tracking",
        "test_error_handling_validation",
        "test_integration_test_validation",
        "test_execution_time_measurement",
        "test_memory_usage_tracking",
        "test_coverage_collection_efficiency",
        "test_pytest_configuration_validation",
        "test_test_discovery_validation",
        "test_coverage_reporting_integration",
        "__init__",
        "generate_coverage_report",
        "generate_html_report"
      ],
      "classes": {
        "TestCoordinationCenterFunctionality": {
          "methods": [
            "test_coordination_center_initialization",
            "test_agent_assignment_structure",
            "test_mission_status_tracking"
          ],
          "docstring": "Test coordination center functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestProgressMonitorFunctionality": {
          "methods": [
            "test_progress_monitor_initialization",
            "test_coverage_calculation",
            "test_agent_progress_tracking"
          ],
          "docstring": "Test progress monitoring functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestReportingSystemFunctionality": {
          "methods": [
            "test_coverage_reporter_initialization",
            "test_report_generation",
            "test_html_report_generation"
          ],
          "docstring": "Test reporting system functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestCrossAgentCoordination": {
          "methods": [
            "test_agent_communication_channels",
            "test_mission_broadcast_system",
            "test_progress_aggregation"
          ],
          "docstring": "Test cross-agent coordination functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestQualityAssuranceFramework": {
          "methods": [
            "test_coverage_target_validation",
            "test_test_execution_time_tracking",
            "test_error_handling_validation",
            "test_integration_test_validation"
          ],
          "docstring": "Test quality assurance framework.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestPerformanceMetrics": {
          "methods": [
            "test_execution_time_measurement",
            "test_memory_usage_tracking",
            "test_coverage_collection_efficiency"
          ],
          "docstring": "Test performance metrics collection.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestSystemIntegration": {
          "methods": [
            "test_pytest_configuration_validation",
            "test_test_discovery_validation",
            "test_coverage_reporting_integration"
          ],
          "docstring": "Test system integration functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CoverageReporter": {
          "methods": [
            "__init__",
            "generate_coverage_report",
            "generate_html_report"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_infrastructure": {
      "file_path": "tests\\test_infrastructure.py",
      "functions": [
        "test_enhanced_config_initialization",
        "test_config_value_retrieval",
        "test_agent_config_loading",
        "test_environment_variable_loading",
        "test_browser_service_integration",
        "test_configuration_service_integration",
        "test_messaging_service_integration",
        "test_service_startup_procedures",
        "test_configuration_validation",
        "test_resource_cleanup",
        "test_service_health_checks",
        "test_system_resource_monitoring",
        "test_performance_metrics_collection",
        "test_error_logging_integration",
        "test_development_environment_setup",
        "test_file_path_handling",
        "test_network_connectivity_handling",
        "test_secure_configuration_storage",
        "test_resource_access_control",
        "test_concurrent_service_handling",
        "test_memory_usage_monitoring"
      ],
      "classes": {
        "TestConfigurationManagement": {
          "methods": [
            "test_enhanced_config_initialization",
            "test_config_value_retrieval",
            "test_agent_config_loading",
            "test_environment_variable_loading"
          ],
          "docstring": "Test configuration management system.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestServiceIntegrations": {
          "methods": [
            "test_browser_service_integration",
            "test_configuration_service_integration",
            "test_messaging_service_integration"
          ],
          "docstring": "Test service integration scenarios.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestDeploymentTests": {
          "methods": [
            "test_service_startup_procedures",
            "test_configuration_validation",
            "test_resource_cleanup",
            "test_service_health_checks"
          ],
          "docstring": "Test deployment and infrastructure scenarios.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestInfrastructureMonitoring": {
          "methods": [
            "test_system_resource_monitoring",
            "test_performance_metrics_collection",
            "test_error_logging_integration"
          ],
          "docstring": "Test infrastructure monitoring capabilities.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestEnvironmentHandling": {
          "methods": [
            "test_development_environment_setup",
            "test_file_path_handling",
            "test_network_connectivity_handling"
          ],
          "docstring": "Test environment-specific handling.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestInfrastructureSecurity": {
          "methods": [
            "test_secure_configuration_storage",
            "test_resource_access_control"
          ],
          "docstring": "Test infrastructure security measures.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestScalabilityTesting": {
          "methods": [
            "test_concurrent_service_handling",
            "test_memory_usage_monitoring"
          ],
          "docstring": "Test infrastructure scalability.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_consolidated_messaging_service": {
      "file_path": "tests\\test_consolidated_messaging_service.py",
      "functions": [
        "setup_method",
        "teardown_method",
        "test_service_initialization",
        "test_coordinate_loading_without_messaging",
        "test_coordinate_loading_with_messaging",
        "test_coordinate_loading_with_invalid_agent",
        "test_send_message_pyautogui_dry_run",
        "test_send_message_pyautogui_without_pyautogui",
        "test_send_message_pyautogui_with_mocking",
        "test_send_message_pyautogui_invalid_agent",
        "test_broadcast_message_dry_run",
        "test_broadcast_message_with_messaging",
        "test_list_agents_functionality",
        "test_show_message_history_without_messaging",
        "test_show_message_history_with_messaging",
        "test_error_handling_coordinate_loader_failure",
        "test_constants_and_configuration",
        "test_service_availability_flags",
        "test_service_initialization_performance",
        "test_message_priority_and_tags",
        "test_message_content_validation",
        "test_service_integration_with_file_operations",
        "test_cli_argument_parsing",
        "test_cli_help_and_version",
        "test_full_messaging_workflow",
        "test_service_component_interaction"
      ],
      "classes": {
        "TestConsolidatedMessagingService": {
          "methods": [
            "setup_method",
            "teardown_method",
            "test_service_initialization",
            "test_coordinate_loading_without_messaging",
            "test_coordinate_loading_with_messaging",
            "test_coordinate_loading_with_invalid_agent",
            "test_send_message_pyautogui_dry_run",
            "test_send_message_pyautogui_without_pyautogui",
            "test_send_message_pyautogui_with_mocking",
            "test_send_message_pyautogui_invalid_agent",
            "test_broadcast_message_dry_run",
            "test_broadcast_message_with_messaging",
            "test_list_agents_functionality",
            "test_show_message_history_without_messaging",
            "test_show_message_history_with_messaging",
            "test_error_handling_coordinate_loader_failure",
            "test_constants_and_configuration",
            "test_service_availability_flags",
            "test_service_initialization_performance",
            "test_message_priority_and_tags",
            "test_message_content_validation",
            "test_service_integration_with_file_operations"
          ],
          "docstring": "Test suite for ConsolidatedMessagingService class.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestMessagingCLIInterface": {
          "methods": [
            "test_cli_argument_parsing",
            "test_cli_help_and_version"
          ],
          "docstring": "Test CLI interface functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestMessagingServiceIntegration": {
          "methods": [
            "test_full_messaging_workflow",
            "test_service_component_interaction"
          ],
          "docstring": "Integration tests for messaging service components.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_reporting": {
      "file_path": "tests\\test_reporting.py",
      "functions": [
        "coverage_reporter",
        "progress_tracker",
        "track_test_progress",
        "__init__",
        "generate_coverage_report",
        "generate_html_report",
        "generate_csv_report",
        "_calculate_summary",
        "_calculate_agent_breakdown",
        "_generate_recommendations",
        "_create_html_report",
        "__init__",
        "record_test_result",
        "get_progress_summary",
        "generate_progress_report",
        "finalize",
        "test_coverage_reporter_initialization",
        "test_coverage_report_generation",
        "test_html_report_generation",
        "test_progress_tracker",
        "test_progress_report_generation",
        "test_coverage_reporter_initialization",
        "test_report_generation",
        "test_progress_tracker_initialization"
      ],
      "classes": {
        "CoverageReporter": {
          "methods": [
            "__init__",
            "generate_coverage_report",
            "generate_html_report",
            "generate_csv_report",
            "_calculate_summary",
            "_calculate_agent_breakdown",
            "_generate_recommendations",
            "_create_html_report"
          ],
          "docstring": "Comprehensive test coverage reporting system.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ProgressTracker": {
          "methods": [
            "__init__",
            "record_test_result",
            "get_progress_summary",
            "generate_progress_report"
          ],
          "docstring": "Track test execution progress and provide updates.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestReportingSystem": {
          "methods": [
            "test_coverage_reporter_initialization",
            "test_coverage_report_generation",
            "test_html_report_generation",
            "test_progress_tracker",
            "test_progress_report_generation"
          ],
          "docstring": "Test the reporting system functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestCoverageReporterClass": {
          "methods": [
            "test_coverage_reporter_initialization",
            "test_report_generation"
          ],
          "docstring": "Test class for CoverageReporter functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestProgressTrackerClass": {
          "methods": [
            "test_progress_tracker_initialization"
          ],
          "docstring": "Test class for ProgressTracker functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\coverage_dashboard": {
      "file_path": "tests\\coverage_dashboard.py",
      "functions": [
        "main",
        "__init__",
        "generate_coverage_report",
        "_parse_coverage_data",
        "_save_report",
        "get_coverage_summary",
        "get_agent_progress_report"
      ],
      "classes": {
        "CoverageDashboard": {
          "methods": [
            "__init__",
            "generate_coverage_report",
            "_parse_coverage_data",
            "_save_report",
            "get_coverage_summary",
            "get_agent_progress_report"
          ],
          "docstring": "Comprehensive test coverage monitoring dashboard.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_consolidated_vector_service": {
      "file_path": "tests\\test_consolidated_vector_service.py",
      "functions": [
        "setup_method",
        "teardown_method",
        "test_service_initialization",
        "test_embedding_generation_sentence_transformers",
        "test_embedding_generation_openai",
        "test_embedding_generation_model_switching",
        "test_embedding_generation_unsupported_model",
        "test_embedding_generation_missing_dependencies",
        "test_vector_document_creation",
        "test_store_document_with_embeddings",
        "test_store_document_engine_failure",
        "test_search_documents",
        "test_delete_document",
        "test_get_document",
        "test_get_stats",
        "test_collection_management",
        "test_engine_initialization_failure",
        "test_empty_text_embedding",
        "test_multiple_text_embedding",
        "test_embedding_generation_performance",
        "test_search_query_validation",
        "test_document_type_handling",
        "test_error_handling_engine_operations",
        "test_configuration_validation",
        "test_service_state_management",
        "test_full_vector_workflow",
        "test_model_switching_workflow",
        "test_batch_operations"
      ],
      "classes": {
        "TestConsolidatedVectorService": {
          "methods": [
            "setup_method",
            "teardown_method",
            "test_service_initialization",
            "test_embedding_generation_sentence_transformers",
            "test_embedding_generation_openai",
            "test_embedding_generation_model_switching",
            "test_embedding_generation_unsupported_model",
            "test_embedding_generation_missing_dependencies",
            "test_vector_document_creation",
            "test_store_document_with_embeddings",
            "test_store_document_engine_failure",
            "test_search_documents",
            "test_delete_document",
            "test_get_document",
            "test_get_stats",
            "test_collection_management",
            "test_engine_initialization_failure",
            "test_empty_text_embedding",
            "test_multiple_text_embedding",
            "test_embedding_generation_performance",
            "test_search_query_validation",
            "test_document_type_handling",
            "test_error_handling_engine_operations",
            "test_configuration_validation",
            "test_service_state_management"
          ],
          "docstring": "Test suite for ConsolidatedVectorService class.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestVectorServiceIntegration": {
          "methods": [
            "test_full_vector_workflow",
            "test_model_switching_workflow",
            "test_batch_operations"
          ],
          "docstring": "Integration tests for vector service components.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\swarm_testing_framework": {
      "file_path": "tests\\swarm_testing_framework.py",
      "functions": [
        "main",
        "__init__",
        "discover_components",
        "_discover_directory",
        "_is_testable_file",
        "_get_component_name",
        "_analyze_dependencies",
        "run_comprehensive_testing",
        "_test_component",
        "_run_unit_tests",
        "_run_integration_tests",
        "_check_documentation",
        "_add_example_usage",
        "_generate_example_usage",
        "_generate_module_docstring",
        "_find_test_files",
        "_create_basic_unit_tests",
        "_generate_basic_test_content",
        "_calculate_coverage",
        "_generate_testing_report",
        "_generate_markdown_report"
      ],
      "classes": {
        "TestingComponent": {
          "methods": [],
          "docstring": "Represents a testable component in the swarm system.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SwarmTestingReport": {
          "methods": [],
          "docstring": "Comprehensive testing report for the swarm mission.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SwarmTestingFramework": {
          "methods": [
            "__init__",
            "discover_components",
            "_discover_directory",
            "_is_testable_file",
            "_get_component_name",
            "_analyze_dependencies",
            "run_comprehensive_testing",
            "_test_component",
            "_run_unit_tests",
            "_run_integration_tests",
            "_check_documentation",
            "_add_example_usage",
            "_generate_example_usage",
            "_generate_module_docstring",
            "_find_test_files",
            "_create_basic_unit_tests",
            "_generate_basic_test_content",
            "_calculate_coverage",
            "_generate_testing_report",
            "_generate_markdown_report"
          ],
          "docstring": "Comprehensive testing framework for swarm mission.\n\nEnsures every component is tested and every file has practical examples.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\agent2_support_framework": {
      "file_path": "tests\\agent2_support_framework.py",
      "functions": [
        "main",
        "__init__",
        "resolve_src_imports",
        "test_import_resolution",
        "generate_import_fix_guide",
        "__init__",
        "register_architectural_markers",
        "generate_pytest_ini_config",
        "generate_conftest_setup",
        "__init__",
        "test_service_integration",
        "generate_integration_report",
        "__init__",
        "execute_support_analysis",
        "generate_support_package"
      ],
      "classes": {
        "ImportResolver": {
          "methods": [
            "__init__",
            "resolve_src_imports",
            "test_import_resolution",
            "generate_import_fix_guide"
          ],
          "docstring": "Advanced import resolution framework for Agent-2 support",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MarkerConfigurator": {
          "methods": [
            "__init__",
            "register_architectural_markers",
            "generate_pytest_ini_config",
            "generate_conftest_setup"
          ],
          "docstring": "Pytest marker configuration and registration framework",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "IntegrationTestHelper": {
          "methods": [
            "__init__",
            "test_service_integration",
            "generate_integration_report"
          ],
          "docstring": "Integration testing utilities for cross-service validation",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SwarmSupportCoordinator": {
          "methods": [
            "__init__",
            "execute_support_analysis",
            "generate_support_package"
          ],
          "docstring": "Main coordinator for Agent-2 support framework",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_architectural_patterns_comprehensive_agent2": {
      "file_path": "tests\\test_architectural_patterns_comprehensive_agent2.py",
      "functions": [
        "test_single_responsibility_principle_comprehensive",
        "test_open_closed_principle_comprehensive",
        "test_liskov_substitution_principle_comprehensive",
        "test_interface_segregation_principle_comprehensive",
        "test_dependency_inversion_principle_comprehensive",
        "test_constructor_injection_patterns",
        "test_service_locator_comprehensive",
        "test_factory_pattern_comprehensive",
        "test_repository_pattern_comprehensive",
        "test_facade_pattern_comprehensive",
        "test_adapter_pattern_comprehensive",
        "test_singleton_pattern_comprehensive",
        "test_module_coupling_comprehensive",
        "test_layer_separation_comprehensive",
        "test_dependency_direction_comprehensive",
        "test_exception_hierarchy_comprehensive",
        "test_error_recovery_patterns_comprehensive"
      ],
      "classes": {
        "TestSOLIDPrinciplesComprehensive": {
          "methods": [
            "test_single_responsibility_principle_comprehensive",
            "test_open_closed_principle_comprehensive",
            "test_liskov_substitution_principle_comprehensive",
            "test_interface_segregation_principle_comprehensive",
            "test_dependency_inversion_principle_comprehensive"
          ],
          "docstring": "Comprehensive SOLID principles validation across all modules.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestDependencyInjectionComprehensive": {
          "methods": [
            "test_constructor_injection_patterns",
            "test_service_locator_comprehensive",
            "test_factory_pattern_comprehensive"
          ],
          "docstring": "Comprehensive dependency injection pattern testing.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestArchitecturalPatternsComprehensive": {
          "methods": [
            "test_repository_pattern_comprehensive",
            "test_facade_pattern_comprehensive",
            "test_adapter_pattern_comprehensive",
            "test_singleton_pattern_comprehensive"
          ],
          "docstring": "Comprehensive architectural pattern validation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestArchitecturalIntegrityComprehensive": {
          "methods": [
            "test_module_coupling_comprehensive",
            "test_layer_separation_comprehensive",
            "test_dependency_direction_comprehensive"
          ],
          "docstring": "Comprehensive architectural integrity testing.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestErrorHandlingArchitectural": {
          "methods": [
            "test_exception_hierarchy_comprehensive",
            "test_error_recovery_patterns_comprehensive"
          ],
          "docstring": "Test error handling architectural patterns.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\enhanced_architectural_tests": {
      "file_path": "tests\\enhanced_architectural_tests.py",
      "functions": [
        "main",
        "__init__",
        "log_test_result",
        "run_enhanced_tests",
        "test_solid_principles_enhanced",
        "test_dependency_injection_enhanced",
        "test_architectural_patterns_enhanced",
        "test_integration_patterns",
        "test_performance_architecture",
        "test_error_handling_enhanced",
        "generate_report"
      ],
      "classes": {
        "EnhancedArchitecturalTestSuite": {
          "methods": [
            "__init__",
            "log_test_result",
            "run_enhanced_tests",
            "test_solid_principles_enhanced",
            "test_dependency_injection_enhanced",
            "test_architectural_patterns_enhanced",
            "test_integration_patterns",
            "test_performance_architecture",
            "test_error_handling_enhanced",
            "generate_report"
          ],
          "docstring": "Enhanced architectural testing framework for Agent-2's contribution to 85%+ coverage goal",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_commandresult": {
      "file_path": "tests\\test_commandresult.py",
      "functions": [
        "test_success_result_creation",
        "test_failure_result_creation",
        "test_minimal_result_creation",
        "test_result_with_none_values",
        "test_result_immutability",
        "test_result_serialization",
        "test_result_parametrized",
        "test_message_sending_workflow",
        "test_database_operation_workflow",
        "test_swarm_coordination_workflow",
        "test_performance_monitoring",
        "test_error_handling_patterns",
        "send_message",
        "save_user_data",
        "coordinate_task",
        "execute_with_performance_tracking",
        "sample_operation",
        "risky_operation"
      ],
      "classes": {
        "TestCommandResult": {
          "methods": [
            "test_success_result_creation",
            "test_failure_result_creation",
            "test_minimal_result_creation",
            "test_result_with_none_values",
            "test_result_immutability",
            "test_result_serialization",
            "test_result_parametrized"
          ],
          "docstring": "Unit tests for CommandResult basic functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestCommandResultIntegration": {
          "methods": [
            "test_message_sending_workflow",
            "test_database_operation_workflow",
            "test_swarm_coordination_workflow",
            "test_performance_monitoring",
            "test_error_handling_patterns"
          ],
          "docstring": "Integration tests for CommandResult in real-world scenarios.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\run_integration_tests": {
      "file_path": "tests\\run_integration_tests.py",
      "functions": [
        "main",
        "__init__",
        "run_all_tests",
        "run_e2e_tests",
        "run_api_tests",
        "run_integration_tests",
        "run_deployment_tests",
        "_generate_summary",
        "_result_to_dict",
        "save_report",
        "_save_html_report"
      ],
      "classes": {
        "IntegrationTestRunner": {
          "methods": [
            "__init__",
            "run_all_tests",
            "run_e2e_tests",
            "run_api_tests",
            "run_integration_tests",
            "run_deployment_tests",
            "_generate_summary",
            "_result_to_dict",
            "save_report",
            "_save_html_report"
          ],
          "docstring": "Orchestrates execution of all integration test suites.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_chrome_undetected": {
      "file_path": "tests\\test_chrome_undetected.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestChrome_Undetected": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Chrome_Undetected.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration_testing_framework": {
      "file_path": "tests\\integration_testing_framework.py",
      "functions": [
        "create_integration_test_framework",
        "__init__",
        "_create_http_session",
        "_load_openapi_spec",
        "register_test_suite",
        "execute_test_suite",
        "_execute_test",
        "validate_api_endpoint",
        "_validate_response_against_spec",
        "execute_e2e_workflow",
        "_execute_agent_lifecycle_e2e",
        "_execute_message_flow_e2e",
        "_execute_vector_search_e2e",
        "execute_cross_service_test",
        "_test_messaging_coordination_integration",
        "_test_vector_analytics_integration",
        "execute_deployment_verification",
        "generate_test_report",
        "save_report"
      ],
      "classes": {
        "TestStatus": {
          "methods": [],
          "docstring": "Test execution status enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestType": {
          "methods": [],
          "docstring": "Test type classification.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestResult": {
          "methods": [],
          "docstring": "Comprehensive test result data structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestSuite": {
          "methods": [],
          "docstring": "Test suite configuration and execution management.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "IntegrationTestFramework": {
          "methods": [
            "__init__",
            "_create_http_session",
            "_load_openapi_spec",
            "register_test_suite",
            "execute_test_suite",
            "_execute_test",
            "validate_api_endpoint",
            "_validate_response_against_spec",
            "execute_e2e_workflow",
            "_execute_agent_lifecycle_e2e",
            "_execute_message_flow_e2e",
            "_execute_vector_search_e2e",
            "execute_cross_service_test",
            "_test_messaging_coordination_integration",
            "_test_vector_analytics_integration",
            "execute_deployment_verification",
            "generate_test_report",
            "save_report"
          ],
          "docstring": "Comprehensive integration testing framework for Swarm Intelligence system.\n\nProvides unified testing capabilities across:\n- End-to-end testing\n- API testing with OpenAPI validation\n- Cross-service integration testing\n- Automated deployment verification",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\run_architectural_tests_standalone": {
      "file_path": "tests\\run_architectural_tests_standalone.py",
      "functions": [
        "run_solid_principles_tests",
        "run_dependency_injection_tests",
        "run_architectural_patterns_tests",
        "run_integrity_tests",
        "run_error_handling_tests",
        "generate_coverage_report",
        "main",
        "__init__",
        "add_result",
        "get_summary"
      ],
      "classes": {
        "TestResult": {
          "methods": [
            "__init__",
            "add_result",
            "get_summary"
          ],
          "docstring": "Simple test result tracking.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_infrastructure_monitoring_integration": {
      "file_path": "tests\\test_infrastructure_monitoring_integration.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestInfrastructure_Monitoring_Integration": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Infrastructure_Monitoring_Integration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_metrics": {
      "file_path": "tests\\test_metrics.py",
      "functions": [
        "setUp",
        "test_module_import",
        "test_basic_functionality",
        "test_error_handling",
        "test_performance_baseline",
        "test_example_usage",
        "test_main_block_execution"
      ],
      "classes": {
        "TestMetrics": {
          "methods": [
            "setUp",
            "test_module_import",
            "test_basic_functionality",
            "test_error_handling",
            "test_performance_baseline"
          ],
          "docstring": "Comprehensive test suite for metrics.",
          "base_classes": [
            "unittest.TestCase"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestExamplesAndDemos": {
          "methods": [
            "test_example_usage",
            "test_main_block_execution"
          ],
          "docstring": "Test practical examples and demonstrations.",
          "base_classes": [
            "unittest.TestCase"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_std_logger": {
      "file_path": "tests\\test_std_logger.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestStd_Logger": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Std_Logger.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_browser_ops": {
      "file_path": "tests\\test_browser_ops.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestBrowser_Ops": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Browser_Ops.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_profile": {
      "file_path": "tests\\test_profile.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestProfile": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Profile.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_content_scraper": {
      "file_path": "tests\\test_content_scraper.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestContent_Scraper": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Content_Scraper.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_messaging_health_gate": {
      "file_path": "tests\\test_messaging_health_gate.py",
      "functions": [
        "_run_script",
        "setup_method",
        "_run_script",
        "test_validate_registry_runs",
        "test_doctor_runs",
        "test_doctor_with_category_filter",
        "test_generate_stubs_dry_run",
        "test_generate_docs_runs",
        "test_list_systems_runs",
        "test_registry_schema_validation",
        "test_registry_loads_correctly",
        "test_registry_has_expected_categories",
        "test_health_check_runs",
        "test_health_check_identifies_issues",
        "test_stub_generator_identifies_missing_systems",
        "test_stub_generator_creates_package_structure",
        "test_docs_generator_loads_data",
        "test_docs_generator_creates_content",
        "setup_method",
        "_run_script",
        "test_doctor_exit_codes",
        "test_validation_exit_codes",
        "test_tools_produce_consistent_output"
      ],
      "classes": {
        "TestHealthGateTools": {
          "methods": [
            "setup_method",
            "_run_script",
            "test_validate_registry_runs",
            "test_doctor_runs",
            "test_doctor_with_category_filter",
            "test_generate_stubs_dry_run",
            "test_generate_docs_runs",
            "test_list_systems_runs"
          ],
          "docstring": "Test the health gate CLI tools.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestRegistryValidation": {
          "methods": [
            "test_registry_schema_validation",
            "test_registry_loads_correctly",
            "test_registry_has_expected_categories"
          ],
          "docstring": "Test registry validation functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestHealthCheckIntegration": {
          "methods": [
            "test_health_check_runs",
            "test_health_check_identifies_issues"
          ],
          "docstring": "Test health check integration with registry.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestStubGeneration": {
          "methods": [
            "test_stub_generator_identifies_missing_systems",
            "test_stub_generator_creates_package_structure"
          ],
          "docstring": "Test stub generation functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestDocumentationGeneration": {
          "methods": [
            "test_docs_generator_loads_data",
            "test_docs_generator_creates_content"
          ],
          "docstring": "Test documentation generation functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestCIBehavior": {
          "methods": [
            "setup_method",
            "_run_script",
            "test_doctor_exit_codes",
            "test_validation_exit_codes",
            "test_tools_produce_consistent_output"
          ],
          "docstring": "Test CI/CD specific behavior.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_comprehensive_architecture_agent2": {
      "file_path": "tests\\test_comprehensive_architecture_agent2.py",
      "functions": [
        "run_architectural_tests",
        "test_single_responsibility_principle",
        "test_open_closed_principle",
        "test_liskov_substitution_principle",
        "test_interface_segregation_principle",
        "test_dependency_inversion_principle",
        "test_constructor_injection",
        "test_service_locator_pattern",
        "test_factory_pattern_implementation",
        "test_repository_pattern",
        "test_facade_pattern",
        "test_adapter_pattern",
        "test_singleton_pattern",
        "test_module_coupling_analysis",
        "test_layer_separation",
        "test_dependency_direction",
        "test_exception_hierarchy",
        "test_error_recovery_patterns"
      ],
      "classes": {
        "TestSOLIDPrinciplesCompliance": {
          "methods": [
            "test_single_responsibility_principle",
            "test_open_closed_principle",
            "test_liskov_substitution_principle",
            "test_interface_segregation_principle",
            "test_dependency_inversion_principle"
          ],
          "docstring": "Comprehensive SOLID principles validation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestDependencyInjectionPatterns": {
          "methods": [
            "test_constructor_injection",
            "test_service_locator_pattern",
            "test_factory_pattern_implementation"
          ],
          "docstring": "Test dependency injection implementations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestArchitecturalPatterns": {
          "methods": [
            "test_repository_pattern",
            "test_facade_pattern",
            "test_adapter_pattern",
            "test_singleton_pattern"
          ],
          "docstring": "Test architectural pattern implementations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestArchitecturalIntegrity": {
          "methods": [
            "test_module_coupling_analysis",
            "test_layer_separation",
            "test_dependency_direction"
          ],
          "docstring": "Test overall architectural integrity and consistency.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestErrorHandlingArchitecture": {
          "methods": [
            "test_exception_hierarchy",
            "test_error_recovery_patterns"
          ],
          "docstring": "Test error handling architectural patterns.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_optimized_sqlite_task_repo": {
      "file_path": "tests\\test_optimized_sqlite_task_repo.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestOptimized_Sqlite_Task_Repo": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Optimized_Sqlite_Task_Repo.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_sqlite_task_repo": {
      "file_path": "tests\\test_sqlite_task_repo.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestSqlite_Task_Repo": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Sqlite_Task_Repo.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_response_collector": {
      "file_path": "tests\\test_response_collector.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestResponse_Collector": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Response_Collector.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_messaging_registry": {
      "file_path": "tests\\test_messaging_registry.py",
      "functions": [
        "test_system_spec_creation",
        "test_system_spec_defaults",
        "test_system_spec_string_representation",
        "create_test_registry",
        "test_load_registry_success",
        "test_load_registry_file_not_found",
        "test_load_registry_invalid_yaml",
        "test_iter_specs_all",
        "test_iter_specs_filtered",
        "test_get_system_by_id",
        "test_get_critical_systems",
        "test_get_systems_by_category",
        "test_resolve_success",
        "test_resolve_import_error",
        "test_resolve_attribute_error",
        "test_health_check_result_creation",
        "test_check_imports_success",
        "test_check_imports_failure",
        "test_get_health_summary",
        "test_registry_loads_19_systems",
        "test_all_systems_have_required_fields"
      ],
      "classes": {
        "TestSystemSpec": {
          "methods": [
            "test_system_spec_creation",
            "test_system_spec_defaults",
            "test_system_spec_string_representation"
          ],
          "docstring": "Test SystemSpec dataclass.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestRegistryLoader": {
          "methods": [
            "create_test_registry",
            "test_load_registry_success",
            "test_load_registry_file_not_found",
            "test_load_registry_invalid_yaml",
            "test_iter_specs_all",
            "test_iter_specs_filtered",
            "test_get_system_by_id",
            "test_get_critical_systems",
            "test_get_systems_by_category",
            "test_resolve_success",
            "test_resolve_import_error",
            "test_resolve_attribute_error"
          ],
          "docstring": "Test registry loading functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestHealthCheck": {
          "methods": [
            "test_health_check_result_creation",
            "test_check_imports_success",
            "test_check_imports_failure",
            "test_get_health_summary"
          ],
          "docstring": "Test health check functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestRegistryIntegration": {
          "methods": [
            "test_registry_loads_19_systems",
            "test_all_systems_have_required_fields"
          ],
          "docstring": "Integration tests for the complete registry system.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_thea_cookie_manager": {
      "file_path": "tests\\test_thea_cookie_manager.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestThea_Cookie_Manager": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Thea_Cookie_Manager.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_sqlite_agent_repo": {
      "file_path": "tests\\test_sqlite_agent_repo.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestSqlite_Agent_Repo": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Sqlite_Agent_Repo.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_thea_login_handler": {
      "file_path": "tests\\test_thea_login_handler.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestThea_Login_Handler": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Thea_Login_Handler.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_system_clock": {
      "file_path": "tests\\test_system_clock.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestSystem_Clock": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for System_Clock.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_unified_persistence": {
      "file_path": "tests\\test_unified_persistence.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestUnified_Persistence": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Unified_Persistence.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_unified_browser_service": {
      "file_path": "tests\\test_unified_browser_service.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestUnified_Browser_Service": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Unified_Browser_Service.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_thea_manager_profile": {
      "file_path": "tests\\test_thea_manager_profile.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestThea_Manager_Profile": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Thea_Manager_Profile.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_unified_logging_time": {
      "file_path": "tests\\test_unified_logging_time.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestUnified_Logging_Time": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Unified_Logging_Time.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_consolidated_services_integration": {
      "file_path": "tests\\integration\\test_consolidated_services_integration.py",
      "functions": [
        "setup_method",
        "test_messaging_service_initialization_integration",
        "test_vector_service_initialization_integration",
        "test_coordination_service_initialization_integration",
        "test_cross_service_coordinate_loading",
        "test_cross_service_embedding_generation",
        "test_cross_service_message_coordination",
        "test_service_interaction_messaging_to_coordination",
        "test_service_interaction_vector_to_messaging",
        "test_broadcast_integration_across_services",
        "test_error_handling_integration",
        "test_service_performance_integration",
        "test_service_state_persistence_integration",
        "test_end_to_end_service_workflow",
        "test_messaging_service_line_coverage",
        "test_vector_service_line_coverage",
        "test_coordination_service_line_coverage",
        "__init__",
        "__init__",
        "__init__"
      ],
      "classes": {
        "TestConsolidatedServicesIntegration": {
          "methods": [
            "setup_method",
            "test_messaging_service_initialization_integration",
            "test_vector_service_initialization_integration",
            "test_coordination_service_initialization_integration",
            "test_cross_service_coordinate_loading",
            "test_cross_service_embedding_generation",
            "test_cross_service_message_coordination",
            "test_service_interaction_messaging_to_coordination",
            "test_service_interaction_vector_to_messaging",
            "test_broadcast_integration_across_services",
            "test_error_handling_integration",
            "test_service_performance_integration",
            "test_service_state_persistence_integration",
            "test_end_to_end_service_workflow"
          ],
          "docstring": "Critical integration tests for consolidated services interaction.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestCriticalServiceIntegration": {
          "methods": [
            "test_messaging_service_line_coverage",
            "test_vector_service_line_coverage",
            "test_coordination_service_line_coverage"
          ],
          "docstring": "Critical integration tests for emergency validation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MockConsolidatedMessagingService": {
          "methods": [
            "__init__"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "MockConsolidatedVectorService": {
          "methods": [
            "__init__"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "MockConsolidatedCoordinationService": {
          "methods": [
            "__init__"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\test_thea_session_manager": {
      "file_path": "tests\\test_thea_session_manager.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestThea_Session_Manager": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Thea_Session_Manager.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_final_integration_coverage": {
      "file_path": "tests\\integration\\test_final_integration_coverage.py",
      "functions": [
        "setup_method",
        "test_complete_service_initialization_integration",
        "test_cross_service_data_flow_integration",
        "test_service_dependency_chain_integration",
        "test_error_propagation_integration",
        "test_performance_integration_benchmarks",
        "test_resource_cleanup_integration",
        "test_configuration_integration_validation",
        "test_boundary_conditions_integration",
        "test_concurrent_operations_integration",
        "test_service_health_integration_monitoring",
        "test_end_to_end_workflow_integration",
        "test_service_interaction_patterns",
        "test_service_scaling_integration",
        "test_service_recovery_integration"
      ],
      "classes": {
        "TestFinalIntegrationCoverage": {
          "methods": [
            "setup_method",
            "test_complete_service_initialization_integration",
            "test_cross_service_data_flow_integration",
            "test_service_dependency_chain_integration",
            "test_error_propagation_integration",
            "test_performance_integration_benchmarks",
            "test_resource_cleanup_integration",
            "test_configuration_integration_validation",
            "test_boundary_conditions_integration",
            "test_concurrent_operations_integration",
            "test_service_health_integration_monitoring",
            "test_end_to_end_workflow_integration"
          ],
          "docstring": "Final integration tests for 92%+ coverage achievement.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestIntegrationCoverageExpansion": {
          "methods": [
            "test_service_interaction_patterns",
            "test_service_scaling_integration",
            "test_service_recovery_integration"
          ],
          "docstring": "Additional integration tests for 92%+ coverage expansion.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_integration_testing_framework": {
      "file_path": "tests\\integration\\test_integration_testing_framework.py",
      "functions": [
        "test_framework_initialization",
        "test_test_configuration_management",
        "test_test_result_aggregation",
        "test_test_coverage_reporting",
        "e2e_test_instance",
        "test_performance_under_load",
        "api_test_instance",
        "test_api_endpoints_crud_operations",
        "test_api_error_handling",
        "test_api_authentication_authorization",
        "test_api_performance_validation",
        "test_api_schema_validation",
        "integration_test_instance",
        "test_data_consistency_across_services",
        "deployment_test_instance",
        "test_service_health_checks",
        "test_configuration_validation",
        "test_security_posture_validation",
        "test_performance_baseline_validation",
        "test_rollback_capability_validation",
        "test_test_coverage_achievement",
        "test_test_execution_reliability",
        "test_ci_cd_integration_quality",
        "__init__",
        "__init__",
        "test_agent_creation_lifecycle",
        "__init__",
        "test_api_endpoints",
        "__init__",
        "test_service_interactions",
        "__init__",
        "test_deployment_health"
      ],
      "classes": {
        "TestIntegrationTestingFramework": {
          "methods": [
            "test_framework_initialization",
            "test_test_configuration_management",
            "test_test_result_aggregation",
            "test_test_coverage_reporting"
          ],
          "docstring": "Test the core integration testing framework.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestE2EAgentLifecycle": {
          "methods": [
            "e2e_test_instance",
            "test_performance_under_load"
          ],
          "docstring": "Test end-to-end agent lifecycle scenarios.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestAgentAPISuite": {
          "methods": [
            "api_test_instance",
            "test_api_endpoints_crud_operations",
            "test_api_error_handling",
            "test_api_authentication_authorization",
            "test_api_performance_validation",
            "test_api_schema_validation"
          ],
          "docstring": "Test comprehensive API test suites.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestCrossServiceIntegration": {
          "methods": [
            "integration_test_instance",
            "test_data_consistency_across_services"
          ],
          "docstring": "Test cross-service integration scenarios.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestDeploymentVerification": {
          "methods": [
            "deployment_test_instance",
            "test_service_health_checks",
            "test_configuration_validation",
            "test_security_posture_validation",
            "test_performance_baseline_validation",
            "test_rollback_capability_validation"
          ],
          "docstring": "Test deployment verification and health checks.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestIntegrationFrameworkQuality": {
          "methods": [
            "test_test_coverage_achievement",
            "test_test_execution_reliability",
            "test_ci_cd_integration_quality"
          ],
          "docstring": "Test integration testing framework quality metrics.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "IntegrationTestingFramework": {
          "methods": [
            "__init__"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "AgentLifecycleE2ETest": {
          "methods": [
            "__init__",
            "test_agent_creation_lifecycle"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "AgentAPISuiteTest": {
          "methods": [
            "__init__",
            "test_api_endpoints"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "CrossServiceIntegrationTest": {
          "methods": [
            "__init__",
            "test_service_interactions"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "DeploymentVerificationTest": {
          "methods": [
            "__init__",
            "test_deployment_health"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_agent_vector_integration": {
      "file_path": "tests\\integration\\test_agent_vector_integration.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAgent_Vector_Integration": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Agent_Vector_Integration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_agent_assignment_manager": {
      "file_path": "tests\\integration\\test_agent_assignment_manager.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAgent_Assignment_Manager": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Agent_Assignment_Manager.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_advanced_analytics_service": {
      "file_path": "tests\\integration\\test_advanced_analytics_service.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAdvanced_Analytics_Service": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Advanced_Analytics_Service.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_error_handling_integration": {
      "file_path": "tests\\integration\\test_error_handling_integration.py",
      "functions": [
        "error_components",
        "mock_messaging_service",
        "mock_vector_service",
        "test_error_recovery_integration",
        "test_error_analysis_engine_integration",
        "test_error_handling_performance_under_load",
        "test_error_metrics_and_reporting_integration",
        "test_error_boundary_logging",
        "worker_thread",
        "__init__",
        "__init__",
        "recover_from_error",
        "__init__",
        "call",
        "__init__",
        "__init__",
        "analyze_error",
        "__init__",
        "recover",
        "__init__",
        "__init__",
        "handle_specialized_error"
      ],
      "classes": {
        "TestErrorHandlingIntegration": {
          "methods": [
            "error_components",
            "mock_messaging_service",
            "mock_vector_service",
            "test_error_recovery_integration",
            "test_error_analysis_engine_integration",
            "test_error_handling_performance_under_load",
            "test_error_metrics_and_reporting_integration"
          ],
          "docstring": "Integration tests for error handling module interactions.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestErrorHandlingBoundaries": {
          "methods": [
            "test_error_boundary_logging"
          ],
          "docstring": "Test error handling at system boundaries.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AdvancedErrorHandler": {
          "methods": [
            "__init__"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "AutomatedRecovery": {
          "methods": [
            "__init__",
            "recover_from_error"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "CircuitBreaker": {
          "methods": [
            "__init__",
            "call"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "CoordinationErrorHandler": {
          "methods": [
            "__init__"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "ErrorAnalysisEngine": {
          "methods": [
            "__init__",
            "analyze_error"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "ErrorRecovery": {
          "methods": [
            "__init__",
            "recover"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "RetryMechanisms": {
          "methods": [
            "__init__"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "SpecializedHandlers": {
          "methods": [
            "__init__",
            "handle_specialized_error"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_agent_utils_registry": {
      "file_path": "tests\\integration\\test_agent_utils_registry.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAgent_Utils_Registry": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Agent_Utils_Registry.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_agent_vector_utils": {
      "file_path": "tests\\integration\\test_agent_vector_utils.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAgent_Vector_Utils": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Agent_Vector_Utils.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_agent_status_manager": {
      "file_path": "tests\\integration\\test_agent_status_manager.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAgent_Status_Manager": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Agent_Status_Manager.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_agent_vector_integration_operations": {
      "file_path": "tests\\integration\\test_agent_vector_integration_operations.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAgent_Vector_Integration_Operations": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Agent_Vector_Integration_Operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_agent_vector_integration_core": {
      "file_path": "tests\\integration\\test_agent_vector_integration_core.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAgent_Vector_Integration_Core": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Agent_Vector_Integration_Core.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_cross_service_integration": {
      "file_path": "tests\\integration\\test_cross_service_integration.py",
      "functions": [
        "cross_service_integration",
        "integration_framework",
        "run_cross_service_integration_suite",
        "__init__",
        "setup_method",
        "teardown_method",
        "test_messaging_coordination_integration",
        "test_vector_analytics_integration",
        "test_agent_messaging_integration",
        "test_api_gateway_integration",
        "test_full_system_integration",
        "_verify_coordination_processing",
        "_test_message_coordination_sync",
        "_test_analytics_vector_feedback",
        "_verify_agent_message_status",
        "_test_agent_message_consistency",
        "_test_gateway_data_flow",
        "_test_gateway_error_handling",
        "_execute_full_system_workflow",
        "_verify_cross_service_consistency",
        "_test_system_under_load",
        "_test_system_resilience"
      ],
      "classes": {
        "TestCrossServiceIntegration": {
          "methods": [
            "__init__",
            "setup_method",
            "teardown_method",
            "test_messaging_coordination_integration",
            "test_vector_analytics_integration",
            "test_agent_messaging_integration",
            "test_api_gateway_integration",
            "test_full_system_integration",
            "_verify_coordination_processing",
            "_test_message_coordination_sync",
            "_test_analytics_vector_feedback",
            "_verify_agent_message_status",
            "_test_agent_message_consistency",
            "_test_gateway_data_flow",
            "_test_gateway_error_handling",
            "_execute_full_system_workflow",
            "_verify_cross_service_consistency",
            "_test_system_under_load",
            "_test_system_resilience"
          ],
          "docstring": "Cross-service integration testing suite.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_architectural_onboarding": {
      "file_path": "tests\\integration\\test_architectural_onboarding.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestArchitectural_Onboarding": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Architectural_Onboarding.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_automated_reporting": {
      "file_path": "tests\\integration\\test_automated_reporting.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAutomated_Reporting": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Automated_Reporting.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_cli": {
      "file_path": "tests\\integration\\test_cli.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestCli": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Cli.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_architectural_principles": {
      "file_path": "tests\\integration\\test_architectural_principles.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestArchitectural_Principles": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Architectural_Principles.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_command_handler": {
      "file_path": "tests\\integration\\test_command_handler.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestCommand_Handler": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Command_Handler.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_architectural_models": {
      "file_path": "tests\\integration\\test_architectural_models.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestArchitectural_Models": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Architectural_Models.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_command_handler_module": {
      "file_path": "tests\\integration\\test_command_handler_module.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestCommand_Handler_Module": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Command_Handler_Module.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_bulk_coordinator": {
      "file_path": "tests\\integration\\test_bulk_coordinator.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestBulk_Coordinator": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Bulk_Coordinator.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_consolidated_agent_management_service": {
      "file_path": "tests\\integration\\test_consolidated_agent_management_service.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestConsolidated_Agent_Management_Service": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Consolidated_Agent_Management_Service.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_broadcast": {
      "file_path": "tests\\integration\\test_broadcast.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestBroadcast": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Broadcast.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_config": {
      "file_path": "tests\\integration\\test_config.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestConfig": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Config.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_compliance_validator": {
      "file_path": "tests\\integration\\test_compliance_validator.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestCompliance_Validator": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Compliance_Validator.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_consolidated_handler_service": {
      "file_path": "tests\\integration\\test_consolidated_handler_service.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestConsolidated_Handler_Service": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Consolidated_Handler_Service.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_consolidated_architectural_service": {
      "file_path": "tests\\integration\\test_consolidated_architectural_service.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestConsolidated_Architectural_Service": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Consolidated_Architectural_Service.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_consolidated_debate_service": {
      "file_path": "tests\\integration\\test_consolidated_debate_service.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestConsolidated_Debate_Service": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Consolidated_Debate_Service.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_consolidated_miscellaneous_service": {
      "file_path": "tests\\integration\\test_consolidated_miscellaneous_service.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestConsolidated_Miscellaneous_Service": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Consolidated_Miscellaneous_Service.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_consolidated_analytics_service": {
      "file_path": "tests\\integration\\test_consolidated_analytics_service.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestConsolidated_Analytics_Service": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Consolidated_Analytics_Service.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_consolidated_onboarding_service": {
      "file_path": "tests\\integration\\test_consolidated_onboarding_service.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestConsolidated_Onboarding_Service": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Consolidated_Onboarding_Service.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_coordinate_handler": {
      "file_path": "tests\\integration\\test_coordinate_handler.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestCoordinate_Handler": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Coordinate_Handler.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_consolidated_utility_service": {
      "file_path": "tests\\integration\\test_consolidated_utility_service.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestConsolidated_Utility_Service": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Consolidated_Utility_Service.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_constants": {
      "file_path": "tests\\integration\\test_constants.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestConstants": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Constants.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_coordinate_handler_module": {
      "file_path": "tests\\integration\\test_coordinate_handler_module.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestCoordinate_Handler_Module": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Coordinate_Handler_Module.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_coordinator": {
      "file_path": "tests\\integration\\test_coordinator.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestCoordinator": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Coordinator.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_cursor_db": {
      "file_path": "tests\\integration\\test_cursor_db.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestCursor_Db": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Cursor_Db.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_deliveryautogui_delivery": {
      "file_path": "tests\\integration\\test_deliveryautogui_delivery.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestDeliveryautogui_Delivery": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Deliveryautogui_Delivery.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_embedding_service": {
      "file_path": "tests\\integration\\test_embedding_service.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestEmbedding_Service": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Embedding_Service.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_messaging_cli_refactored": {
      "file_path": "tests\\integration\\test_messaging_cli_refactored.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestMessaging_Cli_Refactored": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Messaging_Cli_Refactored.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_handlers_orchestrator": {
      "file_path": "tests\\integration\\test_handlers_orchestrator.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestHandlers_Orchestrator": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Handlers_Orchestrator.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_fallback": {
      "file_path": "tests\\integration\\test_fallback.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestFallback": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Fallback.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_coordinates": {
      "file_path": "tests\\integration\\test_coordinates.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestCoordinates": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Coordinates.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_messaging_enums": {
      "file_path": "tests\\integration\\test_messaging_enums.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestMessaging_Enums": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Messaging_Enums.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_message_identity_clarification": {
      "file_path": "tests\\integration\\test_message_identity_clarification.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestMessage_Identity_Clarification": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Message_Identity_Clarification.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_history": {
      "file_path": "tests\\integration\\test_history.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestHistory": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for History.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_inbox_delivery": {
      "file_path": "tests\\integration\\test_inbox_delivery.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestInbox_Delivery": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Inbox_Delivery.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_learning_recommender": {
      "file_path": "tests\\integration\\test_learning_recommender.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestLearning_Recommender": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Learning_Recommender.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_messaging_performance_monitor": {
      "file_path": "tests\\integration\\test_messaging_performance_monitor.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestMessaging_Performance_Monitor": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Messaging_Performance_Monitor.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_messaging_interfaces": {
      "file_path": "tests\\integration\\test_messaging_interfaces.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestMessaging_Interfaces": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Messaging_Interfaces.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_messaging_cli": {
      "file_path": "tests\\integration\\test_messaging_cli.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestMessaging_Cli": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Messaging_Cli.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_messaging_models": {
      "file_path": "tests\\integration\\test_messaging_models.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestMessaging_Models": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Messaging_Models.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_messaging_system_integration": {
      "file_path": "tests\\integration\\test_messaging_system_integration.py",
      "functions": [
        "setup_method",
        "teardown_method",
        "test_end_to_end_message_flow",
        "test_consolidated_service_gateway_integration",
        "test_message_routing_gateway_coordination",
        "test_gateway_physical_delivery_simulation",
        "test_error_handling_across_components",
        "test_message_priority_handling_integration",
        "test_broadcast_message_integration",
        "test_service_configuration_integration",
        "test_message_format_compatibility",
        "test_performance_under_load",
        "test_cross_component_error_propagation",
        "test_message_routing_table_consistency",
        "test_system_resilience_and_recovery"
      ],
      "classes": {
        "TestMessagingSystemIntegration": {
          "methods": [
            "setup_method",
            "teardown_method",
            "test_end_to_end_message_flow",
            "test_consolidated_service_gateway_integration",
            "test_message_routing_gateway_coordination",
            "test_gateway_physical_delivery_simulation",
            "test_error_handling_across_components",
            "test_message_priority_handling_integration",
            "test_broadcast_message_integration",
            "test_service_configuration_integration",
            "test_message_format_compatibility",
            "test_performance_under_load",
            "test_cross_component_error_propagation",
            "test_message_routing_table_consistency",
            "test_system_resilience_and_recovery"
          ],
          "docstring": "Integration tests for complete messaging system.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_onboarding_handler_module": {
      "file_path": "tests\\integration\\test_onboarding_handler_module.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestOnboarding_Handler_Module": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Onboarding_Handler_Module.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_onboarding_bridge": {
      "file_path": "tests\\integration\\test_onboarding_bridge.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestOnboarding_Bridge": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Onboarding_Bridge.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_performance_analyzer": {
      "file_path": "tests\\integration\\test_performance_analyzer.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestPerformance_Analyzer": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Performance_Analyzer.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_onboarding_message_generator": {
      "file_path": "tests\\integration\\test_onboarding_message_generator.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestOnboarding_Message_Generator": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Onboarding_Message_Generator.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_metrics_collector": {
      "file_path": "tests\\integration\\test_metrics_collector.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestMetrics_Collector": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Metrics_Collector.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_performance_dashboard": {
      "file_path": "tests\\integration\\test_performance_dashboard.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestPerformance_Dashboard": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Performance_Dashboard.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_recommendation_engine": {
      "file_path": "tests\\integration\\test_recommendation_engine.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestRecommendation_Engine": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Recommendation_Engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_onboarding_handler": {
      "file_path": "tests\\integration\\test_onboarding_handler.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestOnboarding_Handler": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Onboarding_Handler.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_role_command_handler": {
      "file_path": "tests\\integration\\test_role_command_handler.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestRole_Command_Handler": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Role_Command_Handler.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_providersautogui_delivery": {
      "file_path": "tests\\integration\\test_providersautogui_delivery.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestProvidersautogui_Delivery": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Providersautogui_Delivery.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_overnight_command_handler": {
      "file_path": "tests\\integration\\test_overnight_command_handler.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestOvernight_Command_Handler": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Overnight_Command_Handler.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_simple_onboarding": {
      "file_path": "tests\\integration\\test_simple_onboarding.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestSimple_Onboarding": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Simple_Onboarding.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_route_analyzer": {
      "file_path": "tests\\integration\\test_route_analyzer.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestRoute_Analyzer": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Route_Analyzer.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_service": {
      "file_path": "tests\\integration\\test_service.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestService": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Service.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_thea_authentication_service": {
      "file_path": "tests\\integration\\test_thea_authentication_service.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestThea_Authentication_Service": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Thea_Authentication_Service.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_strategy_coordinator": {
      "file_path": "tests\\integration\\test_strategy_coordinator.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestStrategy_Coordinator": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Strategy_Coordinator.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_status_indexer": {
      "file_path": "tests\\integration\\test_status_indexer.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestStatus_Indexer": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Status_Indexer.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_task_handlers": {
      "file_path": "tests\\integration\\test_task_handlers.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestTask_Handlers": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Task_Handlers.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_thea_browser_service": {
      "file_path": "tests\\integration\\test_thea_browser_service.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestThea_Browser_Service": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Thea_Browser_Service.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_status_embedding_indexer": {
      "file_path": "tests\\integration\\test_status_embedding_indexer.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestStatus_Embedding_Indexer": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Status_Embedding_Indexer.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_stats_tracker": {
      "file_path": "tests\\integration\\test_stats_tracker.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestStats_Tracker": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Stats_Tracker.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_task_context_manager": {
      "file_path": "tests\\integration\\test_task_context_manager.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestTask_Context_Manager": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Task_Context_Manager.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_thea_communication_manager": {
      "file_path": "tests\\integration\\test_thea_communication_manager.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestThea_Communication_Manager": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Thea_Communication_Manager.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_thea_config": {
      "file_path": "tests\\integration\\test_thea_config.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestThea_Config": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Thea_Config.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_thea_handlers": {
      "file_path": "tests\\integration\\test_thea_handlers.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestThea_Handlers": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Thea_Handlers.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_unified_handlers": {
      "file_path": "tests\\integration\\test_unified_handlers.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestUnified_Handlers": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Unified_Handlers.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_swarm_intelligence_manager": {
      "file_path": "tests\\integration\\test_swarm_intelligence_manager.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestSwarm_Intelligence_Manager": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Swarm_Intelligence_Manager.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_thea_response_service": {
      "file_path": "tests\\integration\\test_thea_response_service.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestThea_Response_Service": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Thea_Response_Service.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_utility_handler_module": {
      "file_path": "tests\\integration\\test_utility_handler_module.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestUtility_Handler_Module": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Utility_Handler_Module.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_thea_messaging_service": {
      "file_path": "tests\\integration\\test_thea_messaging_service.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestThea_Messaging_Service": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Thea_Messaging_Service.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_vector_database_engine": {
      "file_path": "tests\\integration\\test_vector_database_engine.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestVector_Database_Engine": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Vector_Database_Engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_vector_config_utils": {
      "file_path": "tests\\integration\\test_vector_config_utils.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestVector_Config_Utils": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Vector_Config_Utils.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_usage_analytics": {
      "file_path": "tests\\integration\\test_usage_analytics.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestUsage_Analytics": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Usage_Analytics.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_unified_vector_integration": {
      "file_path": "tests\\integration\\test_unified_vector_integration.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestUnified_Vector_Integration": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Unified_Vector_Integration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_unified_database_services": {
      "file_path": "tests\\integration\\test_unified_database_services.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestUnified_Database_Services": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Unified_Database_Services.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_vector_database_models": {
      "file_path": "tests\\integration\\test_vector_database_models.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestVector_Database_Models": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Vector_Database_Models.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_work_indexer": {
      "file_path": "tests\\integration\\test_work_indexer.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestWork_Indexer": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Work_Indexer.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_vector_models": {
      "file_path": "tests\\integration\\test_vector_models.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestVector_Models": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Vector_Models.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\operational\\__init__": {
      "file_path": "tests\\operational\\__init__.py",
      "functions": [
        "operational_test_config",
        "system_monitor",
        "__init__",
        "get_system_health",
        "check_stability"
      ],
      "classes": {
        "SystemMonitor": {
          "methods": [
            "__init__",
            "get_system_health",
            "check_stability"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_utility_handler": {
      "file_path": "tests\\integration\\test_utility_handler.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestUtility_Handler": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Utility_Handler.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\operational\\test_error_handling": {
      "file_path": "tests\\operational\\test_error_handling.py",
      "functions": [
        "test_error_classification",
        "test_error_logging",
        "test_error_recovery_mechanisms",
        "test_graceful_degradation",
        "test_exception_chaining",
        "test_custom_exception_hierarchy",
        "test_error_context_preservation",
        "test_service_degradation_handling",
        "test_circuit_breaker_pattern",
        "test_fallback_mechanisms",
        "test_network_error_recovery",
        "test_file_system_error_recovery",
        "test_resource_error_recovery",
        "test_error_aggregation",
        "test_error_trending_analysis",
        "test_null_and_empty_value_handling",
        "test_extreme_value_handling",
        "test_cross_component_error_propagation",
        "test_error_recovery_integration",
        "failing_operation",
        "operation_with_context",
        "unreliable_service",
        "failing_operation",
        "primary_operation",
        "fallback_operation",
        "component_a",
        "component_b",
        "failing_operation",
        "handle_error",
        "log_error",
        "log_error",
        "__init__",
        "call",
        "_on_success",
        "_on_failure"
      ],
      "classes": {
        "TestUnifiedErrorHandler": {
          "methods": [
            "test_error_classification",
            "test_error_logging",
            "test_error_recovery_mechanisms",
            "test_graceful_degradation"
          ],
          "docstring": "Test unified error handling system.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestExceptionManagement": {
          "methods": [
            "test_exception_chaining",
            "test_custom_exception_hierarchy",
            "test_error_context_preservation"
          ],
          "docstring": "Test comprehensive exception management.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestSystemResilience": {
          "methods": [
            "test_service_degradation_handling",
            "test_circuit_breaker_pattern",
            "test_fallback_mechanisms"
          ],
          "docstring": "Test system resilience and fault tolerance.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestErrorRecoveryScenarios": {
          "methods": [
            "test_network_error_recovery",
            "test_file_system_error_recovery",
            "test_resource_error_recovery"
          ],
          "docstring": "Test various error recovery scenarios.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestErrorReportingAndMonitoring": {
          "methods": [
            "test_error_aggregation",
            "test_error_trending_analysis"
          ],
          "docstring": "Test error reporting and monitoring systems.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestBoundaryConditionHandling": {
          "methods": [
            "test_null_and_empty_value_handling",
            "test_extreme_value_handling"
          ],
          "docstring": "Test handling of boundary conditions and edge cases.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestErrorHandlingIntegration": {
          "methods": [
            "test_cross_component_error_propagation",
            "test_error_recovery_integration"
          ],
          "docstring": "Integration tests for error handling across components.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "UnifiedErrorHandler": {
          "methods": [
            "handle_error",
            "log_error"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "UnifiedLoggingSystem": {
          "methods": [
            "log_error"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "SwarmException": {
          "methods": [],
          "docstring": "Base exception for V2_SWARM.",
          "base_classes": [
            "Exception"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "OperationalException": {
          "methods": [],
          "docstring": "Operational error.",
          "base_classes": [
            "SwarmException"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ConfigurationException": {
          "methods": [],
          "docstring": "Configuration error.",
          "base_classes": [
            "SwarmException"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CircuitBreaker": {
          "methods": [
            "__init__",
            "call",
            "_on_success",
            "_on_failure"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\operational\\test_monitoring_systems": {
      "file_path": "tests\\operational\\test_monitoring_systems.py",
      "functions": [
        "test_system_metrics_collection",
        "test_health_status_monitoring",
        "test_performance_threshold_alerting",
        "test_historical_performance_tracking",
        "test_health_check_execution",
        "test_health_status_reporting",
        "test_critical_service_monitoring",
        "test_event_logging_functionality",
        "test_log_level_filtering",
        "test_cpu_usage_monitoring",
        "test_memory_usage_monitoring",
        "test_disk_usage_monitoring",
        "test_system_stability_assessment",
        "test_performance_alert_thresholds",
        "test_system_health_alerts",
        "test_monitoring_data_persistence",
        "test_monitoring_system_coordination",
        "test_monitoring_data_consistency",
        "__init__",
        "get_system_metrics",
        "check_system_health",
        "set_high_cpu_mode",
        "run_health_checks",
        "get_health_status",
        "log_event"
      ],
      "classes": {
        "TestPerformanceMonitoringDashboard": {
          "methods": [
            "test_system_metrics_collection",
            "test_health_status_monitoring",
            "test_performance_threshold_alerting",
            "test_historical_performance_tracking"
          ],
          "docstring": "Test performance monitoring dashboard functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestAutomatedHealthCheckSystem": {
          "methods": [
            "test_health_check_execution",
            "test_health_status_reporting",
            "test_critical_service_monitoring"
          ],
          "docstring": "Test automated health check system functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestUnifiedLoggingSystem": {
          "methods": [
            "test_event_logging_functionality",
            "test_log_level_filtering"
          ],
          "docstring": "Test unified logging system for operational monitoring.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestSystemResourceMonitoring": {
          "methods": [
            "test_cpu_usage_monitoring",
            "test_memory_usage_monitoring",
            "test_disk_usage_monitoring",
            "test_system_stability_assessment"
          ],
          "docstring": "Test monitoring of system resources.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestOperationalAlerting": {
          "methods": [
            "test_performance_alert_thresholds",
            "test_system_health_alerts",
            "test_monitoring_data_persistence"
          ],
          "docstring": "Test operational alerting and notification systems.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestMonitoringSystemIntegration": {
          "methods": [
            "test_monitoring_system_coordination",
            "test_monitoring_data_consistency"
          ],
          "docstring": "Integration tests for monitoring system components.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PerformanceMonitoringDashboard": {
          "methods": [
            "__init__",
            "get_system_metrics",
            "check_system_health",
            "set_high_cpu_mode"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AutomatedHealthCheckSystem": {
          "methods": [
            "run_health_checks",
            "get_health_status"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "UnifiedLoggingSystem": {
          "methods": [
            "log_event"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\operational\\conftest": {
      "file_path": "tests\\operational\\conftest.py",
      "functions": [
        "operational_test_setup",
        "system_monitor",
        "operational_test_config",
        "performance_baseline",
        "cleanup_after_test",
        "pytest_configure",
        "__init__",
        "get_system_health",
        "check_stability",
        "check_operational_stability",
        "get_performance_delta",
        "log_operational_metrics"
      ],
      "classes": {
        "OperationalSystemMonitor": {
          "methods": [
            "__init__",
            "get_system_health",
            "check_stability",
            "check_operational_stability",
            "get_performance_delta",
            "log_operational_metrics"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\integration\\test_vector_database_orchestrator": {
      "file_path": "tests\\integration\\test_vector_database_orchestrator.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestVector_Database_Orchestrator": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Vector_Database_Orchestrator.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\operational\\test_coverage_progress_report": {
      "file_path": "tests\\operational\\test_coverage_progress_report.py",
      "functions": [
        "generate_operational_test_report",
        "test_operational_coverage_progress",
        "__init__",
        "generate_progress_report",
        "_analyze_monitoring_tests",
        "_analyze_error_handling_tests",
        "_analyze_stability_tests",
        "_analyze_integration_tests",
        "_calculate_coverage_metrics",
        "_generate_recommendations",
        "_identify_next_steps"
      ],
      "classes": {
        "OperationalTestCoverageReporter": {
          "methods": [
            "__init__",
            "generate_progress_report",
            "_analyze_monitoring_tests",
            "_analyze_error_handling_tests",
            "_analyze_stability_tests",
            "_analyze_integration_tests",
            "_calculate_coverage_metrics",
            "_generate_recommendations",
            "_identify_next_steps"
          ],
          "docstring": "Reports on operational test coverage progress.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\operational\\test_operational_resilience": {
      "file_path": "tests\\operational\\test_operational_resilience.py",
      "functions": [
        "test_concurrent_user_simulation",
        "test_memory_pressure_resilience",
        "test_network_failure_resilience",
        "test_service_restart_recovery",
        "test_configuration_reload_resilience",
        "test_resource_exhaustion_recovery",
        "test_monitoring_system_integration",
        "test_monitoring_alert_correlation",
        "test_emergency_shutdown_recovery",
        "test_multi_failure_scenario_resilience",
        "simulate_user_operations",
        "simulate_network_operation",
        "simulate_service_restart",
        "simulate_config_reload",
        "simulate_emergency_shutdown",
        "get_operational_status",
        "check_system_resilience",
        "get_system_metrics",
        "check_performance_health",
        "run_comprehensive_checks",
        "get_overall_health_score"
      ],
      "classes": {
        "TestSystemResilienceUnderLoad": {
          "methods": [
            "test_concurrent_user_simulation",
            "test_memory_pressure_resilience",
            "test_network_failure_resilience"
          ],
          "docstring": "Test system resilience under various load conditions.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestOperationalRecoveryScenarios": {
          "methods": [
            "test_service_restart_recovery",
            "test_configuration_reload_resilience",
            "test_resource_exhaustion_recovery"
          ],
          "docstring": "Test operational recovery from various failure scenarios.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestOperationalMonitoringIntegration": {
          "methods": [
            "test_monitoring_system_integration",
            "test_monitoring_alert_correlation"
          ],
          "docstring": "Test integration of operational monitoring components.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestEmergencyOperationalScenarios": {
          "methods": [
            "test_emergency_shutdown_recovery",
            "test_multi_failure_scenario_resilience"
          ],
          "docstring": "Test emergency operational scenarios and disaster recovery.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "OperationalMonitoringBaseline": {
          "methods": [
            "get_operational_status",
            "check_system_resilience"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "PerformanceMonitoringDashboard": {
          "methods": [
            "get_system_metrics",
            "check_performance_health"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "AutomatedHealthCheckSystem": {
          "methods": [
            "run_comprehensive_checks",
            "get_overall_health_score"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\operational\\test_operational_load_testing": {
      "file_path": "tests\\operational\\test_operational_load_testing.py",
      "functions": [
        "test_high_concurrency_user_load",
        "test_memory_intensive_operations",
        "test_io_intensive_operations",
        "test_sustained_high_load",
        "test_resource_exhaustion_boundaries",
        "_test_cpu_boundary",
        "_test_memory_boundary",
        "_test_disk_boundary",
        "test_performance_baseline_establishment",
        "test_operational_throughput_measurement",
        "_measure_throughput_scenario",
        "test_full_system_load_integration",
        "_run_integrated_load_test",
        "simulate_heavy_user_operations",
        "stress_worker",
        "throughput_worker",
        "integrated_worker",
        "get_operational_status",
        "check_system_resilience",
        "get_system_metrics"
      ],
      "classes": {
        "TestConcurrentLoadScenarios": {
          "methods": [
            "test_high_concurrency_user_load",
            "test_memory_intensive_operations",
            "test_io_intensive_operations"
          ],
          "docstring": "Test system behavior under concurrent load scenarios.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestStressTestScenarios": {
          "methods": [
            "test_sustained_high_load",
            "test_resource_exhaustion_boundaries",
            "_test_cpu_boundary",
            "_test_memory_boundary",
            "_test_disk_boundary"
          ],
          "docstring": "Test system behavior under stress conditions.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestOperationalPerformanceBenchmarks": {
          "methods": [
            "test_performance_baseline_establishment",
            "test_operational_throughput_measurement",
            "_measure_throughput_scenario"
          ],
          "docstring": "Test operational performance benchmarks and baselines.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestOperationalLoadIntegration": {
          "methods": [
            "test_full_system_load_integration",
            "_run_integrated_load_test"
          ],
          "docstring": "Integration tests for operational load scenarios.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "OperationalMonitoringBaseline": {
          "methods": [
            "get_operational_status",
            "check_system_resilience"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "PerformanceMonitoringDashboard": {
          "methods": [
            "get_system_metrics"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_consolidated_messaging_unit": {
      "file_path": "tests\\unit\\test_consolidated_messaging_unit.py",
      "functions": [
        "setup_method",
        "test_service_initialization_unit",
        "test_coordinate_loading_empty_case",
        "test_coordinate_loading_with_mock_loader",
        "test_coordinate_loading_with_invalid_coordinates",
        "test_send_message_pyautogui_dry_run_unit",
        "test_send_message_pyautogui_no_pyautogui",
        "test_send_message_pyautogui_with_mocks",
        "test_send_message_pyautogui_invalid_agent_unit",
        "test_broadcast_message_unit",
        "test_broadcast_message_no_messaging_core",
        "test_list_agents_unit",
        "test_show_message_history_unit",
        "test_service_availability_flags",
        "test_swarm_agents_constant",
        "test_message_content_validation_unit",
        "test_message_priority_handling_unit",
        "test_message_tag_handling_unit",
        "test_error_handling_coordinate_loader_failure",
        "test_error_handling_messaging_core_failure",
        "test_service_initialization_performance_unit",
        "test_service_state_consistency_unit",
        "test_service_method_availability_unit",
        "test_extreme_message_sizes",
        "test_special_characters_in_messages",
        "test_concurrent_agent_operations",
        "test_service_recovery_from_failures"
      ],
      "classes": {
        "TestConsolidatedMessagingServiceUnit": {
          "methods": [
            "setup_method",
            "test_service_initialization_unit",
            "test_coordinate_loading_empty_case",
            "test_coordinate_loading_with_mock_loader",
            "test_coordinate_loading_with_invalid_coordinates",
            "test_send_message_pyautogui_dry_run_unit",
            "test_send_message_pyautogui_no_pyautogui",
            "test_send_message_pyautogui_with_mocks",
            "test_send_message_pyautogui_invalid_agent_unit",
            "test_broadcast_message_unit",
            "test_broadcast_message_no_messaging_core",
            "test_list_agents_unit",
            "test_show_message_history_unit",
            "test_service_availability_flags",
            "test_swarm_agents_constant",
            "test_message_content_validation_unit",
            "test_message_priority_handling_unit",
            "test_message_tag_handling_unit",
            "test_error_handling_coordinate_loader_failure",
            "test_error_handling_messaging_core_failure",
            "test_service_initialization_performance_unit",
            "test_service_state_consistency_unit",
            "test_service_method_availability_unit"
          ],
          "docstring": "Unit tests for ConsolidatedMessagingService.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestMessagingServiceEdgeCases": {
          "methods": [
            "test_extreme_message_sizes",
            "test_special_characters_in_messages",
            "test_concurrent_agent_operations",
            "test_service_recovery_from_failures"
          ],
          "docstring": "Unit tests for edge cases and error conditions.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_message_router": {
      "file_path": "tests\\unit\\test_message_router.py",
      "functions": [
        "setup_method",
        "teardown_method",
        "test_router_initialization",
        "test_router_start_stop",
        "test_message_priority_enum",
        "test_message_type_enum",
        "test_routing_result_enum",
        "test_route_message_success",
        "test_route_message_invalid_format",
        "test_message_queue_operations",
        "test_priority_based_routing",
        "test_broadcast_message_routing",
        "test_worker_thread_creation",
        "test_router_error_handling",
        "test_message_validation",
        "test_routing_table_management",
        "test_message_processing_worker",
        "test_thread_safety",
        "test_message_queue_capacity",
        "test_router_performance_metrics",
        "test_message_type_routing_logic",
        "test_router_shutdown_graceful",
        "test_message_retry_logic",
        "route_test_message"
      ],
      "classes": {
        "TestMessageRouterUnit": {
          "methods": [
            "setup_method",
            "teardown_method",
            "test_router_initialization",
            "test_router_start_stop",
            "test_message_priority_enum",
            "test_message_type_enum",
            "test_routing_result_enum",
            "test_route_message_success",
            "test_route_message_invalid_format",
            "test_message_queue_operations",
            "test_priority_based_routing",
            "test_broadcast_message_routing",
            "test_worker_thread_creation",
            "test_router_error_handling",
            "test_message_validation",
            "test_routing_table_management",
            "test_message_processing_worker",
            "test_thread_safety",
            "test_message_queue_capacity",
            "test_router_performance_metrics",
            "test_message_type_routing_logic",
            "test_router_shutdown_graceful",
            "test_message_retry_logic"
          ],
          "docstring": "Unit tests for MessageRouter component.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\operational\\test_system_monitoring_integration": {
      "file_path": "tests\\operational\\test_system_monitoring_integration.py",
      "functions": [
        "test_operational_status_reporting",
        "test_monitoring_health_assessment",
        "test_baseline_metrics_validation",
        "test_real_time_metrics_collection",
        "test_performance_health_monitoring",
        "test_performance_threshold_monitoring",
        "test_comprehensive_health_checks",
        "test_overall_health_score_calculation",
        "test_health_trends_analysis",
        "test_event_logging_functionality",
        "test_error_count_tracking",
        "test_recent_logs_retrieval",
        "test_end_to_end_monitoring_workflow",
        "test_monitoring_alert_escalation",
        "test_monitoring_data_persistence_simulation",
        "__init__",
        "get_operational_status",
        "check_system_resilience",
        "get_monitoring_health",
        "__init__",
        "get_system_metrics",
        "check_performance_health",
        "get_performance_alerts",
        "add_performance_alert",
        "__init__",
        "run_comprehensive_checks",
        "get_overall_health_score",
        "get_health_trends",
        "__init__",
        "log_event",
        "get_recent_logs",
        "get_error_count"
      ],
      "classes": {
        "TestOperationalMonitoringBaseline": {
          "methods": [
            "test_operational_status_reporting",
            "test_monitoring_health_assessment",
            "test_baseline_metrics_validation"
          ],
          "docstring": "Test operational monitoring baseline functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestPerformanceMonitoringDashboard": {
          "methods": [
            "test_real_time_metrics_collection",
            "test_performance_health_monitoring",
            "test_performance_threshold_monitoring"
          ],
          "docstring": "Test performance monitoring dashboard functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestAutomatedHealthCheckSystem": {
          "methods": [
            "test_comprehensive_health_checks",
            "test_overall_health_score_calculation",
            "test_health_trends_analysis"
          ],
          "docstring": "Test automated health check system functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestUnifiedLoggingSystem": {
          "methods": [
            "test_event_logging_functionality",
            "test_error_count_tracking",
            "test_recent_logs_retrieval"
          ],
          "docstring": "Test unified logging system for operational monitoring.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestMonitoringSystemIntegration": {
          "methods": [
            "test_end_to_end_monitoring_workflow",
            "test_monitoring_alert_escalation",
            "test_monitoring_data_persistence_simulation"
          ],
          "docstring": "Integration tests for complete monitoring system.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "OperationalMonitoringBaseline": {
          "methods": [
            "__init__",
            "get_operational_status",
            "check_system_resilience",
            "get_monitoring_health"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PerformanceMonitoringDashboard": {
          "methods": [
            "__init__",
            "get_system_metrics",
            "check_performance_health",
            "get_performance_alerts",
            "add_performance_alert"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AutomatedHealthCheckSystem": {
          "methods": [
            "__init__",
            "run_comprehensive_checks",
            "get_overall_health_score",
            "get_health_trends"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "UnifiedLoggingSystem": {
          "methods": [
            "__init__",
            "log_event",
            "get_recent_logs",
            "get_error_count"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\operational\\test_stability_testing": {
      "file_path": "tests\\operational\\test_stability_testing.py",
      "functions": [
        "test_continuous_monitoring_stability",
        "test_messaging_system_endurance",
        "test_memory_usage_stability",
        "test_cpu_usage_stability",
        "test_disk_io_stability",
        "test_concurrent_monitoring_stability",
        "test_concurrent_messaging_stability",
        "test_gradual_load_increase",
        "test_burst_load_handling",
        "test_service_restart_resilience",
        "test_error_recovery_stability",
        "_simulate_recovery",
        "test_extended_operation_stability",
        "test_memory_leak_detection",
        "test_full_system_stability_integration",
        "cpu_intensive_task",
        "monitoring_worker",
        "messaging_worker",
        "get_system_metrics",
        "send_message",
        "log_event"
      ],
      "classes": {
        "TestLongRunningOperations": {
          "methods": [
            "test_continuous_monitoring_stability",
            "test_messaging_system_endurance"
          ],
          "docstring": "Test stability of long-running operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestResourceUsageStability": {
          "methods": [
            "test_memory_usage_stability",
            "test_cpu_usage_stability",
            "test_disk_io_stability"
          ],
          "docstring": "Test stability of resource usage patterns.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestConcurrentOperationStability": {
          "methods": [
            "test_concurrent_monitoring_stability",
            "test_concurrent_messaging_stability"
          ],
          "docstring": "Test stability under concurrent operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestLoadTestingScenarios": {
          "methods": [
            "test_gradual_load_increase",
            "test_burst_load_handling"
          ],
          "docstring": "Test system stability under various load conditions.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestRecoveryAndResilience": {
          "methods": [
            "test_service_restart_resilience",
            "test_error_recovery_stability",
            "_simulate_recovery"
          ],
          "docstring": "Test system recovery and resilience capabilities.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestSystemEndurance": {
          "methods": [
            "test_extended_operation_stability",
            "test_memory_leak_detection"
          ],
          "docstring": "Test long-term system endurance and sustainability.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestStabilityIntegrationScenarios": {
          "methods": [
            "test_full_system_stability_integration"
          ],
          "docstring": "Integration tests for stability across multiple components.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PerformanceMonitoringDashboard": {
          "methods": [
            "get_system_metrics"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "UnifiedMessagingCore": {
          "methods": [
            "send_message"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "UnifiedLoggingSystem": {
          "methods": [
            "log_event"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_agent_docs_integration": {
      "file_path": "tests\\unit\\test_agent_docs_integration.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAgent_Docs_Integration": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Agent_Docs_Integration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_consolidated_coordination_unit": {
      "file_path": "tests\\unit\\test_consolidated_coordination_unit.py",
      "functions": [
        "setup_method",
        "test_service_initialization_unit",
        "test_coordination_rules_initialization",
        "test_routing_table_initialization",
        "test_determine_coordination_strategy_urgent",
        "test_determine_coordination_strategy_normal",
        "test_determine_coordination_strategy_broadcast",
        "test_determine_coordination_strategy_system_sender",
        "test_process_message_success",
        "test_process_message_with_routing_config",
        "test_get_routing_config_existing",
        "test_get_routing_config_nonexistent",
        "test_command_history_tracking",
        "test_get_command_stats",
        "test_update_coordination_rules",
        "test_message_validation_valid",
        "test_message_validation_invalid",
        "test_bulk_message_processing_unit",
        "test_service_status_reporting",
        "test_routing_table_validation_valid",
        "test_routing_table_validation_invalid",
        "test_priority_handling_various_levels",
        "test_message_type_routing_various_types",
        "test_sender_type_routing",
        "test_error_handling_processing_failure",
        "test_service_reset_functionality",
        "test_message_processing_performance_unit",
        "test_edge_case_empty_content",
        "test_edge_case_long_content"
      ],
      "classes": {
        "TestConsolidatedCoordinationServiceUnit": {
          "methods": [
            "setup_method",
            "test_service_initialization_unit",
            "test_coordination_rules_initialization",
            "test_routing_table_initialization",
            "test_determine_coordination_strategy_urgent",
            "test_determine_coordination_strategy_normal",
            "test_determine_coordination_strategy_broadcast",
            "test_determine_coordination_strategy_system_sender",
            "test_process_message_success",
            "test_process_message_with_routing_config",
            "test_get_routing_config_existing",
            "test_get_routing_config_nonexistent",
            "test_command_history_tracking",
            "test_get_command_stats",
            "test_update_coordination_rules",
            "test_message_validation_valid",
            "test_message_validation_invalid",
            "test_bulk_message_processing_unit",
            "test_service_status_reporting",
            "test_routing_table_validation_valid",
            "test_routing_table_validation_invalid",
            "test_priority_handling_various_levels",
            "test_message_type_routing_various_types",
            "test_sender_type_routing",
            "test_error_handling_processing_failure",
            "test_service_reset_functionality",
            "test_message_processing_performance_unit",
            "test_edge_case_empty_content",
            "test_edge_case_long_content"
          ],
          "docstring": "Unit tests for ConsolidatedCoordinationService.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_consolidated_vector_unit": {
      "file_path": "tests\\unit\\test_consolidated_vector_unit.py",
      "functions": [
        "setup_method",
        "test_service_initialization_unit",
        "test_embedding_generation_sentence_transformers",
        "test_embedding_generation_openai",
        "test_embedding_model_switching",
        "test_embedding_generation_unsupported_model",
        "test_embedding_generation_missing_dependencies",
        "test_store_document_success",
        "test_store_document_failure",
        "test_search_documents_unit",
        "test_delete_document_unit",
        "test_get_document_unit",
        "test_get_stats_unit",
        "test_collection_management_unit",
        "test_engine_initialization_failure",
        "test_empty_text_embedding_unit",
        "test_multiple_text_embedding_unit",
        "test_document_validation_unit",
        "test_search_query_validation_unit",
        "test_error_handling_engine_operations",
        "test_configuration_validation_unit",
        "test_embedding_generation_performance_unit",
        "test_service_state_management_unit",
        "test_extreme_document_sizes",
        "test_special_characters_in_documents",
        "test_concurrent_operations_simulation"
      ],
      "classes": {
        "TestConsolidatedVectorServiceUnit": {
          "methods": [
            "setup_method",
            "test_service_initialization_unit",
            "test_embedding_generation_sentence_transformers",
            "test_embedding_generation_openai",
            "test_embedding_model_switching",
            "test_embedding_generation_unsupported_model",
            "test_embedding_generation_missing_dependencies",
            "test_store_document_success",
            "test_store_document_failure",
            "test_search_documents_unit",
            "test_delete_document_unit",
            "test_get_document_unit",
            "test_get_stats_unit",
            "test_collection_management_unit",
            "test_engine_initialization_failure",
            "test_empty_text_embedding_unit",
            "test_multiple_text_embedding_unit",
            "test_document_validation_unit",
            "test_search_query_validation_unit",
            "test_error_handling_engine_operations",
            "test_configuration_validation_unit",
            "test_embedding_generation_performance_unit",
            "test_service_state_management_unit"
          ],
          "docstring": "Unit tests for ConsolidatedVectorService.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestVectorServiceEdgeCases": {
          "methods": [
            "test_extreme_document_sizes",
            "test_special_characters_in_documents",
            "test_concurrent_operations_simulation"
          ],
          "docstring": "Unit tests for vector service edge cases.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_agent_context_manager": {
      "file_path": "tests\\unit\\test_agent_context_manager.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAgent_Context_Manager": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Agent_Context_Manager.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_messaging_gateway": {
      "file_path": "tests\\unit\\test_messaging_gateway.py",
      "functions": [
        "setup_method",
        "teardown_method",
        "test_gateway_initialization",
        "test_import_symbol_success",
        "test_import_symbol_module_only",
        "test_import_symbol_import_error",
        "test_get_agent_coordinates_known_agent",
        "test_get_agent_coordinates_unknown_agent",
        "test_route_message_to_agent_success",
        "test_route_message_to_agent_unknown_agent",
        "test_route_message_to_agent_pyautogui_unavailable",
        "test_send_discord_message_to_agent_success",
        "test_send_discord_message_to_agent_no_coords",
        "test_send_discord_message_to_agent_routing_failure",
        "test_gateway_message_processing",
        "test_coordinate_system_validation",
        "test_message_routing_error_handling",
        "test_gateway_configuration_loading",
        "test_clipboard_operations",
        "test_message_format_validation",
        "test_agent_coordinate_boundaries",
        "test_timing_delays_in_routing",
        "test_gateway_bridge_functionality"
      ],
      "classes": {
        "TestMessagingGatewayUnit": {
          "methods": [
            "setup_method",
            "teardown_method",
            "test_gateway_initialization",
            "test_import_symbol_success",
            "test_import_symbol_module_only",
            "test_import_symbol_import_error",
            "test_get_agent_coordinates_known_agent",
            "test_get_agent_coordinates_unknown_agent",
            "test_route_message_to_agent_success",
            "test_route_message_to_agent_unknown_agent",
            "test_route_message_to_agent_pyautogui_unavailable",
            "test_send_discord_message_to_agent_success",
            "test_send_discord_message_to_agent_no_coords",
            "test_send_discord_message_to_agent_routing_failure",
            "test_gateway_message_processing",
            "test_coordinate_system_validation",
            "test_message_routing_error_handling",
            "test_gateway_configuration_loading",
            "test_clipboard_operations",
            "test_message_format_validation",
            "test_agent_coordinate_boundaries",
            "test_timing_delays_in_routing",
            "test_gateway_bridge_functionality"
          ],
          "docstring": "Unit tests for MessagingGateway component.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_agent_coordination": {
      "file_path": "tests\\unit\\test_agent_coordination.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAgent_Coordination": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Agent_Coordination.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_agent_matching": {
      "file_path": "tests\\unit\\test_agent_matching.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAgent_Matching": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Agent_Matching.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_agent_documentation_service": {
      "file_path": "tests\\unit\\test_agent_documentation_service.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAgent_Documentation_Service": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Agent_Documentation_Service.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_analytics_unified": {
      "file_path": "tests\\unit\\test_analytics_unified.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAnalytics_Unified": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Analytics_Unified.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_agent_strategies": {
      "file_path": "tests\\unit\\test_agent_strategies.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAgent_Strategies": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Agent_Strategies.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_aggressive_lazy_loader": {
      "file_path": "tests\\unit\\test_aggressive_lazy_loader.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAggressive_Lazy_Loader": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Aggressive_Lazy_Loader.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_backup_cli": {
      "file_path": "tests\\unit\\test_backup_cli.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestBackup_Cli": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Backup_Cli.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_automated_health_check_system": {
      "file_path": "tests\\unit\\test_automated_health_check_system.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAutomated_Health_Check_System": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Automated_Health_Check_System.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_backup_database": {
      "file_path": "tests\\unit\\test_backup_database.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestBackup_Database": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Backup_Database.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_backup_monitoring_orchestrator": {
      "file_path": "tests\\unit\\test_backup_monitoring_orchestrator.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestBackup_Monitoring_Orchestrator": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Backup_Monitoring_Orchestrator.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_backup_monitoring": {
      "file_path": "tests\\unit\\test_backup_monitoring.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestBackup_Monitoring": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Backup_Monitoring.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_base": {
      "file_path": "tests\\unit\\test_base.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestBase": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Base.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_backup_enums": {
      "file_path": "tests\\unit\\test_backup_enums.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestBackup_Enums": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Backup_Enums.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_backup_scheduler": {
      "file_path": "tests\\unit\\test_backup_scheduler.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestBackup_Scheduler": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Backup_Scheduler.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_basic_validator": {
      "file_path": "tests\\unit\\test_basic_validator.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestBasic_Validator": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Basic_Validator.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_backup_models": {
      "file_path": "tests\\unit\\test_backup_models.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestBackup_Models": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Backup_Models.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_backup_system_core": {
      "file_path": "tests\\unit\\test_backup_system_core.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestBackup_System_Core": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Backup_System_Core.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_backup_alert_system": {
      "file_path": "tests\\unit\\test_backup_alert_system.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestBackup_Alert_System": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Backup_Alert_System.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_config_models": {
      "file_path": "tests\\unit\\test_config_models.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestConfig_Models": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Config_Models.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_configuration_models": {
      "file_path": "tests\\unit\\test_configuration_models.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestConfiguration_Models": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Configuration_Models.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_config_monitor": {
      "file_path": "tests\\unit\\test_config_monitor.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestConfig_Monitor": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Config_Monitor.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_consolidated_coordinator": {
      "file_path": "tests\\unit\\test_consolidated_coordinator.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestConsolidated_Coordinator": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Consolidated_Coordinator.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_coordinate_loader": {
      "file_path": "tests\\unit\\test_coordinate_loader.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestCoordinate_Loader": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Coordinate_Loader.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_consolidated_communication": {
      "file_path": "tests\\unit\\test_consolidated_communication.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestConsolidated_Communication": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Consolidated_Communication.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_coordination_utils": {
      "file_path": "tests\\unit\\test_coordination_utils.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestCoordination_Utils": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Coordination_Utils.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_business_continuity_planner": {
      "file_path": "tests\\unit\\test_business_continuity_planner.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestBusiness_Continuity_Planner": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Business_Continuity_Planner.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_consolidated_configuration": {
      "file_path": "tests\\unit\\test_consolidated_configuration.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestConsolidated_Configuration": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Consolidated_Configuration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_core_unified_system": {
      "file_path": "tests\\unit\\test_core_unified_system.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestCore_Unified_System": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Core_Unified_System.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_coordination_models": {
      "file_path": "tests\\unit\\test_coordination_models.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestCoordination_Models": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Coordination_Models.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_data_models": {
      "file_path": "tests\\unit\\test_data_models.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestData_Models": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Data_Models.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_coordinator_registry": {
      "file_path": "tests\\unit\\test_coordinator_registry.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestCoordinator_Registry": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Coordinator_Registry.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_decision": {
      "file_path": "tests\\unit\\test_decision.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestDecision": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Decision.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_coordinator_status_parser": {
      "file_path": "tests\\unit\\test_coordinator_status_parser.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestCoordinator_Status_Parser": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Coordinator_Status_Parser.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "DataAgent"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_core_manager_system": {
      "file_path": "tests\\unit\\test_core_manager_system.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestCore_Manager_System": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Core_Manager_System.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_core_interfaces": {
      "file_path": "tests\\unit\\test_core_interfaces.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestCore_Interfaces": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Core_Interfaces.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_data_optimization_engine": {
      "file_path": "tests\\unit\\test_data_optimization_engine.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestData_Optimization_Engine": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Data_Optimization_Engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_core_validation": {
      "file_path": "tests\\unit\\test_core_validation.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestCore_Validation": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Core_Validation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_core_utilities": {
      "file_path": "tests\\unit\\test_core_utilities.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestCore_Utilities": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Core_Utilities.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_deployment_orchestrator_engine": {
      "file_path": "tests\\unit\\test_deployment_orchestrator_engine.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestDeployment_Orchestrator_Engine": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Deployment_Orchestrator_Engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_data_optimization_models": {
      "file_path": "tests\\unit\\test_data_optimization_models.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestData_Optimization_Models": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Data_Optimization_Models.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_discord_commander_security": {
      "file_path": "tests\\unit\\test_discord_commander_security.py",
      "functions": [
        "test_empty_environment_variables",
        "test_environment_variable_parsing",
        "test_environment_variable_whitespace_handling",
        "test_environment_variable_invalid_values",
        "test_empty_environment_variable_string",
        "test_allow_guild_no_restrictions",
        "test_allow_guild_with_restrictions",
        "test_allow_guild_none_value",
        "test_allow_channel_no_restrictions",
        "test_allow_channel_with_restrictions",
        "test_allow_channel_none_value",
        "test_allow_user_no_restrictions",
        "test_allow_user_with_restrictions",
        "test_allow_user_none_value",
        "test_all_policies_allow_by_default",
        "test_combined_policy_restrictions",
        "test_realistic_channel_ids",
        "test_security_policy_module_import",
        "test_security_policy_constants_are_sets",
        "test_large_number_of_allowed_ids",
        "test_security_policy_functions_are_callable",
        "test_concurrent_policy_access",
        "check_policies"
      ],
      "classes": {
        "TestSecurityPolicyEnvironmentParsing": {
          "methods": [
            "test_empty_environment_variables",
            "test_environment_variable_parsing",
            "test_environment_variable_whitespace_handling",
            "test_environment_variable_invalid_values",
            "test_empty_environment_variable_string"
          ],
          "docstring": "Test cases for environment variable parsing in security policies.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestAllowGuildPolicy": {
          "methods": [
            "test_allow_guild_no_restrictions",
            "test_allow_guild_with_restrictions",
            "test_allow_guild_none_value"
          ],
          "docstring": "Test cases for guild access control.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestAllowChannelPolicy": {
          "methods": [
            "test_allow_channel_no_restrictions",
            "test_allow_channel_with_restrictions",
            "test_allow_channel_none_value"
          ],
          "docstring": "Test cases for channel access control.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestAllowUserPolicy": {
          "methods": [
            "test_allow_user_no_restrictions",
            "test_allow_user_with_restrictions",
            "test_allow_user_none_value"
          ],
          "docstring": "Test cases for user access control.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestSecurityPolicyIntegration": {
          "methods": [
            "test_all_policies_allow_by_default",
            "test_combined_policy_restrictions",
            "test_realistic_channel_ids"
          ],
          "docstring": "Integration tests for combined security policy behavior.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestSecurityPolicyEdgeCases": {
          "methods": [
            "test_security_policy_module_import",
            "test_security_policy_constants_are_sets",
            "test_large_number_of_allowed_ids",
            "test_security_policy_functions_are_callable"
          ],
          "docstring": "Test cases for edge cases and error conditions.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestSecurityPolicyConcurrency": {
          "methods": [
            "test_concurrent_policy_access"
          ],
          "docstring": "Test cases for concurrent access to security policies.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_deployment_coordinator": {
      "file_path": "tests\\unit\\test_deployment_coordinator.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestDeployment_Coordinator": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Deployment_Coordinator.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_documentation_search_service": {
      "file_path": "tests\\unit\\test_documentation_search_service.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestDocumentation_Search_Service": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Documentation_Search_Service.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_discord_commander_embeds": {
      "file_path": "tests\\unit\\test_discord_commander_embeds.py",
      "functions": [
        "test_create_base_embed",
        "test_create_base_embed_custom_color",
        "test_create_base_embed_invalid_color",
        "test_color_scheme_completeness",
        "embed_manager",
        "test_initialization",
        "test_create_response_embed_help",
        "test_create_response_embed_ping",
        "test_create_response_embed_error",
        "test_create_response_embed_prompt",
        "test_create_response_embed_status",
        "test_create_response_embed_agents",
        "test_create_response_embed_too_many_commands",
        "test_create_response_embed_unknown_type",
        "test_create_response_embed_with_none_values",
        "test_embed_field_limits",
        "test_update_prompt_embed_success",
        "test_update_prompt_embed_error",
        "test_update_status_embed",
        "embed_manager",
        "test_embed_creation_with_invalid_parameters",
        "test_embed_creation_with_large_data",
        "test_embed_creation_memory_efficiency",
        "embed_manager",
        "test_full_command_workflow_embeds",
        "test_embed_timestamp_consistency",
        "__init__",
        "create_base_embed",
        "__init__",
        "create_response_embed",
        "update_prompt_embed_success",
        "update_prompt_embed_error",
        "update_status_embed"
      ],
      "classes": {
        "TestEmbedBuilder": {
          "methods": [
            "test_create_base_embed",
            "test_create_base_embed_custom_color",
            "test_create_base_embed_invalid_color",
            "test_color_scheme_completeness"
          ],
          "docstring": "Test cases for EmbedBuilder static methods.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestEmbedManager": {
          "methods": [
            "embed_manager",
            "test_initialization",
            "test_create_response_embed_help",
            "test_create_response_embed_ping",
            "test_create_response_embed_error",
            "test_create_response_embed_prompt",
            "test_create_response_embed_status",
            "test_create_response_embed_agents",
            "test_create_response_embed_too_many_commands",
            "test_create_response_embed_unknown_type",
            "test_create_response_embed_with_none_values",
            "test_embed_field_limits"
          ],
          "docstring": "Test cases for EmbedManager functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestEmbedBuilderUpdateMethods": {
          "methods": [
            "test_update_prompt_embed_success",
            "test_update_prompt_embed_error",
            "test_update_status_embed"
          ],
          "docstring": "Test cases for EmbedBuilder update methods.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestEmbedErrorHandling": {
          "methods": [
            "embed_manager",
            "test_embed_creation_with_invalid_parameters",
            "test_embed_creation_with_large_data",
            "test_embed_creation_memory_efficiency"
          ],
          "docstring": "Test cases for embed error handling and edge cases.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestEmbedIntegration": {
          "methods": [
            "embed_manager",
            "test_full_command_workflow_embeds",
            "test_embed_timestamp_consistency"
          ],
          "docstring": "Integration tests for embed functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MockEmbed": {
          "methods": [
            "__init__"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "EmbedBuilder": {
          "methods": [
            "create_base_embed"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "EmbedManager": {
          "methods": [
            "__init__",
            "create_response_embed",
            "update_prompt_embed_success",
            "update_prompt_embed_error",
            "update_status_embed"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_documentation_indexing_service": {
      "file_path": "tests\\unit\\test_documentation_indexing_service.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestDocumentation_Indexing_Service": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Documentation_Indexing_Service.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_discord_commander_agent_engine": {
      "file_path": "tests\\unit\\test_discord_commander_agent_engine.py",
      "functions": [
        "temp_workspace",
        "agent_engine",
        "test_initialization",
        "test_valid_agent_names",
        "test_get_all_agent_names",
        "test_send_to_agent_inbox_success",
        "test_send_to_agent_inbox_invalid_agent",
        "test_send_to_agent_inbox_missing_inbox_directory",
        "test_send_to_agent_inbox_file_write_error",
        "test_execute_agent_command_success",
        "test_execute_agent_command_failure",
        "test_message_content_formatting",
        "test_timestamp_in_message_filename",
        "temp_workspace",
        "test_multiple_messages_to_same_agent",
        "test_messages_to_multiple_agents",
        "test_agent_workspace_creation",
        "test_send_to_agent_inbox_with_special_characters",
        "test_send_to_agent_inbox_empty_message",
        "test_execute_agent_command_with_empty_command",
        "test_is_valid_agent_edge_cases",
        "test_get_all_agent_names_consistency",
        "test_logging_on_successful_message_send",
        "test_logging_on_failed_message_send",
        "test_logging_on_command_execution"
      ],
      "classes": {
        "TestAgentCommunicationEngineCore": {
          "methods": [
            "temp_workspace",
            "agent_engine",
            "test_initialization",
            "test_valid_agent_names",
            "test_get_all_agent_names",
            "test_send_to_agent_inbox_success",
            "test_send_to_agent_inbox_invalid_agent",
            "test_send_to_agent_inbox_missing_inbox_directory",
            "test_send_to_agent_inbox_file_write_error",
            "test_execute_agent_command_success",
            "test_execute_agent_command_failure",
            "test_message_content_formatting",
            "test_timestamp_in_message_filename"
          ],
          "docstring": "Test cases for the core agent communication engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestAgentCommunicationEngineIntegration": {
          "methods": [
            "temp_workspace",
            "test_multiple_messages_to_same_agent",
            "test_messages_to_multiple_agents",
            "test_agent_workspace_creation"
          ],
          "docstring": "Integration tests for agent communication engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestAgentCommunicationEngineErrorHandling": {
          "methods": [
            "test_send_to_agent_inbox_with_special_characters",
            "test_send_to_agent_inbox_empty_message",
            "test_execute_agent_command_with_empty_command",
            "test_is_valid_agent_edge_cases",
            "test_get_all_agent_names_consistency"
          ],
          "docstring": "Test cases for error handling in agent communication engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestAgentCommunicationEngineLogging": {
          "methods": [
            "test_logging_on_successful_message_send",
            "test_logging_on_failed_message_send",
            "test_logging_on_command_execution"
          ],
          "docstring": "Test cases for logging in agent communication engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_enums": {
      "file_path": "tests\\unit\\test_enums.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestEnums": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Enums.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_embeddings": {
      "file_path": "tests\\unit\\test_embeddings.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestEmbeddings": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Embeddings.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_emergency_unified": {
      "file_path": "tests\\unit\\test_emergency_unified.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestEmergency_Unified": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Emergency_Unified.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_data_optimization_orchestrator": {
      "file_path": "tests\\unit\\test_data_optimization_orchestrator.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestData_Optimization_Orchestrator": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Data_Optimization_Orchestrator.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_engines_unified": {
      "file_path": "tests\\unit\\test_engines_unified.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestEngines_Unified": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Engines_Unified.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_env_loader": {
      "file_path": "tests\\unit\\test_env_loader.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestEnv_Loader": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Env_Loader.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_execution_manager": {
      "file_path": "tests\\unit\\test_execution_manager.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestExecution_Manager": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Execution_Manager.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_fsm_enums": {
      "file_path": "tests\\unit\\test_fsm_enums.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestFsm_Enums": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Fsm_Enums.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_fsm_models": {
      "file_path": "tests\\unit\\test_fsm_models.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestFsm_Models": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Fsm_Models.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_factory_functions": {
      "file_path": "tests\\unit\\test_factory_functions.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestFactory_Functions": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Factory_Functions.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_health_dashboard": {
      "file_path": "tests\\unit\\test_health_dashboard.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestHealth_Dashboard": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Health_Dashboard.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_fsm_utilities": {
      "file_path": "tests\\unit\\test_fsm_utilities.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestFsm_Utilities": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Fsm_Utilities.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_fsm_constants": {
      "file_path": "tests\\unit\\test_fsm_constants.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestFsm_Constants": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Fsm_Constants.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_fsm": {
      "file_path": "tests\\unit\\test_fsm.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestFsm": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Fsm.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_error_handling_unified": {
      "file_path": "tests\\unit\\test_error_handling_unified.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestError_Handling_Unified": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Error_Handling_Unified.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_integration_unified": {
      "file_path": "tests\\unit\\test_integration_unified.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestIntegration_Unified": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Integration_Unified.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_import_registry": {
      "file_path": "tests\\unit\\test_import_registry.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestImport_Registry": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Import_Registry.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_health_monitoring_service": {
      "file_path": "tests\\unit\\test_health_monitoring_service.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestHealth_Monitoring_Service": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Health_Monitoring_Service.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_import_core": {
      "file_path": "tests\\unit\\test_import_core.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestImport_Core": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Import_Core.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_manager": {
      "file_path": "tests\\unit\\test_manager.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestManager": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Manager.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_health_alerting": {
      "file_path": "tests\\unit\\test_health_alerting.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestHealth_Alerting": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Health_Alerting.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_health_monitoring_system": {
      "file_path": "tests\\unit\\test_health_monitoring_system.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestHealth_Monitoring_System": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Health_Monitoring_System.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_import_utilities": {
      "file_path": "tests\\unit\\test_import_utilities.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestImport_Utilities": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Import_Utilities.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_message_queue_utils": {
      "file_path": "tests\\unit\\test_message_queue_utils.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestMessage_Queue_Utils": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Message_Queue_Utils.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_lazy_loader": {
      "file_path": "tests\\unit\\test_lazy_loader.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestLazy_Loader": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Lazy_Loader.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_managers_unified": {
      "file_path": "tests\\unit\\test_managers_unified.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestManagers_Unified": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Managers_Unified.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_metrics": {
      "file_path": "tests\\unit\\test_metrics.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestMetrics": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Metrics.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_paths": {
      "file_path": "tests\\unit\\test_paths.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestPaths": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Paths.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_performance_models": {
      "file_path": "tests\\unit\\test_performance_models.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestPerformance_Models": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Performance_Models.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_performance_monitor": {
      "file_path": "tests\\unit\\test_performance_monitor.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestPerformance_Monitor": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Performance_Monitor.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_onboarding_service": {
      "file_path": "tests\\unit\\test_onboarding_service.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestOnboarding_Service": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Onboarding_Service.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_performance_enums": {
      "file_path": "tests\\unit\\test_performance_enums.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestPerformance_Enums": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Performance_Enums.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_performance_metrics_collector": {
      "file_path": "tests\\unit\\test_performance_metrics_collector.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestPerformance_Metrics_Collector": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Performance_Metrics_Collector.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_performance_orchestrator": {
      "file_path": "tests\\unit\\test_performance_orchestrator.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestPerformance_Orchestrator": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Performance_Orchestrator.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_performance_unified": {
      "file_path": "tests\\unit\\test_performance_unified.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestPerformance_Unified": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Performance_Unified.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_operational_monitoring_baseline": {
      "file_path": "tests\\unit\\test_operational_monitoring_baseline.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestOperational_Monitoring_Baseline": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Operational_Monitoring_Baseline.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_quality_gates": {
      "file_path": "tests\\unit\\test_quality_gates.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestQuality_Gates": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Quality_Gates.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_performance_monitoring_engine": {
      "file_path": "tests\\unit\\test_performance_monitoring_engine.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestPerformance_Monitoring_Engine": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Performance_Monitoring_Engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_performance_monitoring_dashboard": {
      "file_path": "tests\\unit\\test_performance_monitoring_dashboard.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestPerformance_Monitoring_Dashboard": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Performance_Monitoring_Dashboard.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_resource_manager": {
      "file_path": "tests\\unit\\test_resource_manager.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestResource_Manager": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Resource_Manager.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_quality_assurance_system": {
      "file_path": "tests\\unit\\test_quality_assurance_system.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestQuality_Assurance_System": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Quality_Assurance_System.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_search_history_service": {
      "file_path": "tests\\unit\\test_search_history_service.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestSearch_History_Service": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Search_History_Service.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_router_hooks": {
      "file_path": "tests\\unit\\test_router_hooks.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestRouter_Hooks": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Router_Hooks.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_ssot_models": {
      "file_path": "tests\\unit\\test_ssot_models.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestSsot_Models": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Ssot_Models.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_semantic_router": {
      "file_path": "tests\\unit\\test_semantic_router.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestSemantic_Router": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Semantic_Router.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_shared_utilities": {
      "file_path": "tests\\unit\\test_shared_utilities.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestShared_Utilities": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Shared_Utilities.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_ssot_unified": {
      "file_path": "tests\\unit\\test_ssot_unified.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestSsot_Unified": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Ssot_Unified.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_refactoring_unified": {
      "file_path": "tests\\unit\\test_refactoring_unified.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestRefactoring_Unified": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Refactoring_Unified.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_state_models": {
      "file_path": "tests\\unit\\test_state_models.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestState_Models": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for State_Models.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_simple_utils": {
      "file_path": "tests\\unit\\test_simple_utils.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestSimple_Utils": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Simple_Utils.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_standard_validator": {
      "file_path": "tests\\unit\\test_standard_validator.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestStandard_Validator": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Standard_Validator.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_swarm_coordination": {
      "file_path": "tests\\unit\\test_swarm_coordination.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestSwarm_Coordination": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Swarm_Coordination.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_status_cli": {
      "file_path": "tests\\unit\\test_status_cli.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestStatus_Cli": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Status_Cli.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_strict_validator": {
      "file_path": "tests\\unit\\test_strict_validator.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestStrict_Validator": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Strict_Validator.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_transition_models": {
      "file_path": "tests\\unit\\test_transition_models.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestTransition_Models": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Transition_Models.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_swarm_coordination_orchestrator": {
      "file_path": "tests\\unit\\test_swarm_coordination_orchestrator.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestSwarm_Coordination_Orchestrator": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Swarm_Coordination_Orchestrator.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_unified_core_interfaces": {
      "file_path": "tests\\unit\\test_unified_core_interfaces.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestUnified_Core_Interfaces": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Unified_Core_Interfaces.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_swarm_communication_coordinator": {
      "file_path": "tests\\unit\\test_swarm_communication_coordinator.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestSwarm_Communication_Coordinator": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Swarm_Communication_Coordinator.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_task_executor": {
      "file_path": "tests\\unit\\test_task_executor.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestTask_Executor": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Task_Executor.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_task_coordination_engine": {
      "file_path": "tests\\unit\\test_task_coordination_engine.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestTask_Coordination_Engine": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Task_Coordination_Engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_unified_import_system": {
      "file_path": "tests\\unit\\test_unified_import_system.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestUnified_Import_System": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Unified_Import_System.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_unified_data_processing_system": {
      "file_path": "tests\\unit\\test_unified_data_processing_system.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestUnified_Data_Processing_System": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Unified_Data_Processing_System.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_unified_logging_system_engine": {
      "file_path": "tests\\unit\\test_unified_logging_system_engine.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestUnified_Logging_System_Engine": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Unified_Logging_System_Engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_utility_consolidation_engine": {
      "file_path": "tests\\unit\\test_utility_consolidation_engine.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestUtility_Consolidation_Engine": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Utility_Consolidation_Engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_utility_consolidation_models": {
      "file_path": "tests\\unit\\test_utility_consolidation_models.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestUtility_Consolidation_Models": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Utility_Consolidation_Models.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_utility_consolidation_orchestrator": {
      "file_path": "tests\\unit\\test_utility_consolidation_orchestrator.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestUtility_Consolidation_Orchestrator": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Utility_Consolidation_Orchestrator.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_unified_logging_system": {
      "file_path": "tests\\unit\\test_unified_logging_system.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestUnified_Logging_System": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Unified_Logging_System.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_unified_monitoring_coordinator": {
      "file_path": "tests\\unit\\test_unified_monitoring_coordinator.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestUnified_Monitoring_Coordinator": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Unified_Monitoring_Coordinator.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_unified_progress_tracking": {
      "file_path": "tests\\unit\\test_unified_progress_tracking.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestUnified_Progress_Tracking": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Unified_Progress_Tracking.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_unified_logging_system_models": {
      "file_path": "tests\\unit\\test_unified_logging_system_models.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestUnified_Logging_System_Models": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Unified_Logging_System_Models.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_v2_compliance_executor": {
      "file_path": "tests\\unit\\test_v2_compliance_executor.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestV2_Compliance_Executor": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for V2_Compliance_Executor.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_utils": {
      "file_path": "tests\\unit\\test_utils.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestUtils": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Utils.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_vector_database": {
      "file_path": "tests\\unit\\test_vector_database.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestVector_Database": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Vector_Database.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\semantic\\test_status_index": {
      "file_path": "tests\\semantic\\test_status_index.py",
      "functions": [
        "test_status_similarity"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "tests\\unit\\test_vector_unified": {
      "file_path": "tests\\unit\\test_vector_unified.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestVector_Unified": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Vector_Unified.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_validation_unified": {
      "file_path": "tests\\unit\\test_validation_unified.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestValidation_Unified": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Validation_Unified.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\performance\\test_integration_performance": {
      "file_path": "tests\\performance\\test_integration_performance.py",
      "functions": [
        "setup_method",
        "test_messaging_service_throughput_performance",
        "test_coordination_service_bulk_processing_performance",
        "test_vector_service_embedding_performance",
        "test_cross_service_performance_integration",
        "test_service_scalability_under_load",
        "test_memory_leak_detection",
        "test_concurrent_service_operations",
        "test_service_recovery_performance",
        "messaging_worker",
        "coordination_worker",
        "vector_worker"
      ],
      "classes": {
        "TestIntegrationPerformance": {
          "methods": [
            "setup_method",
            "test_messaging_service_throughput_performance",
            "test_coordination_service_bulk_processing_performance",
            "test_vector_service_embedding_performance",
            "test_cross_service_performance_integration",
            "test_service_scalability_under_load",
            "test_memory_leak_detection",
            "test_concurrent_service_operations",
            "test_service_recovery_performance"
          ],
          "docstring": "Performance tests for integration services.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_workspace_agent_registry": {
      "file_path": "tests\\unit\\test_workspace_agent_registry.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestWorkspace_Agent_Registry": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Workspace_Agent_Registry.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\e2e\\test_complete_user_journey_e2e": {
      "file_path": "tests\\e2e\\test_complete_user_journey_e2e.py",
      "functions": [],
      "classes": {
        "TestCompleteUserJourneyE2E": {
          "methods": [],
          "docstring": "Complete user journey end-to-end test suite.\n\nTests full user workflows from initial access through\ncomprehensive system utilization and data operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\unit\\test_vector_integration_analytics": {
      "file_path": "tests\\unit\\test_vector_integration_analytics.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestVector_Integration_Analytics": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Vector_Integration_Analytics.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\semantic\\test_integration_smoke": {
      "file_path": "tests\\semantic\\test_integration_smoke.py",
      "functions": [
        "test_route_message_smoke",
        "test_similar_status_smoke"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "tests\\unit\\test_vector_store": {
      "file_path": "tests\\unit\\test_vector_store.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestVector_Store": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Vector_Store.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\fixtures\\shared_operational_fixtures": {
      "file_path": "tests\\fixtures\\shared_operational_fixtures.py",
      "functions": [
        "mock_monitoring_dashboard",
        "mock_health_check_system",
        "mock_logging_system",
        "mock_database_connection",
        "mock_message_queue",
        "sample_user_data",
        "sample_transaction_data",
        "system_metrics_history",
        "temp_file",
        "temp_directory",
        "performance_timer",
        "create_mock_monitoring_dashboard",
        "create_mock_health_check_system",
        "create_mock_logging_system",
        "create_mock_database_connection",
        "create_mock_message_queue",
        "generate_user_data",
        "generate_transaction_data",
        "generate_system_metrics_history",
        "create_temp_file",
        "create_temp_directory",
        "cleanup_temp_files",
        "simulate_network_delay",
        "wait_for_condition",
        "measure_execution_time",
        "high_cpu_context",
        "network_failure_context",
        "database_failure_context",
        "establish_cpu_baseline",
        "establish_memory_baseline",
        "establish_disk_baseline",
        "__init__",
        "start",
        "stop",
        "duration",
        "measure",
        "__enter__",
        "__exit__",
        "__enter__",
        "__exit__",
        "__enter__",
        "__exit__"
      ],
      "classes": {
        "SharedMockClasses": {
          "methods": [
            "create_mock_monitoring_dashboard",
            "create_mock_health_check_system",
            "create_mock_logging_system",
            "create_mock_database_connection",
            "create_mock_message_queue"
          ],
          "docstring": "Shared mock implementations for consistent testing across agents.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SharedTestData": {
          "methods": [
            "generate_user_data",
            "generate_transaction_data",
            "generate_system_metrics_history"
          ],
          "docstring": "Shared test data generators for consistent testing.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SharedTestUtils": {
          "methods": [
            "create_temp_file",
            "create_temp_directory",
            "cleanup_temp_files",
            "simulate_network_delay",
            "wait_for_condition",
            "measure_execution_time"
          ],
          "docstring": "Shared utility functions for operational testing.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SharedTestContexts": {
          "methods": [
            "high_cpu_context",
            "network_failure_context",
            "database_failure_context"
          ],
          "docstring": "Shared context managers for testing scenarios.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SharedPerformanceBaselines": {
          "methods": [
            "establish_cpu_baseline",
            "establish_memory_baseline",
            "establish_disk_baseline"
          ],
          "docstring": "Shared utilities for establishing performance baselines.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PerformanceTimer": {
          "methods": [
            "__init__",
            "start",
            "stop",
            "duration",
            "measure"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "HighCpuContext": {
          "methods": [
            "__enter__",
            "__exit__"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "NetworkFailureContext": {
          "methods": [
            "__enter__",
            "__exit__"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "DatabaseFailureContext": {
          "methods": [
            "__enter__",
            "__exit__"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\e2e\\test_collection_utils": {
      "file_path": "tests\\e2e\\test_collection_utils.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestCollection_Utils": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Collection_Utils.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\messaging\\test_fallback_delivery": {
      "file_path": "tests\\messaging\\test_fallback_delivery.py",
      "functions": [
        "test_fallback_inbox",
        "fake_inbox"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "tests\\e2e\\test_analytics_utils": {
      "file_path": "tests\\e2e\\test_analytics_utils.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAnalytics_Utils": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Analytics_Utils.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\automation\\test_ui_onboarding": {
      "file_path": "tests\\automation\\test_ui_onboarding.py",
      "functions": [
        "fake_pg",
        "test_perform_sequence",
        "test_perform_sequence_with_clipboard",
        "test_dry_run_mode",
        "test_negative_coordinates",
        "test_coordinate_adapter_flexibility"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "tests\\e2e\\test_analytics_dashboard": {
      "file_path": "tests\\e2e\\test_analytics_dashboard.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAnalytics_Dashboard": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Analytics_Dashboard.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\messaging\\__init__": {
      "file_path": "tests\\messaging\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "tests\\e2e\\test_error_handler_middleware": {
      "file_path": "tests\\e2e\\test_error_handler_middleware.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestError_Handler_Middleware": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Error_Handler_Middleware.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\e2e\\test_api_integration_workflow_e2e": {
      "file_path": "tests\\e2e\\test_api_integration_workflow_e2e.py",
      "functions": [
        "_generate_comprehensive_test_data",
        "execute_api_operation"
      ],
      "classes": {
        "TestAPIIntegrationWorkflowE2E": {
          "methods": [
            "_generate_comprehensive_test_data"
          ],
          "docstring": "API Integration workflow end-to-end test suite.\n\nTests complete API data flows, integrations, and cross-service\ncommunications across the entire swarm system.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\e2e\\test_agent_lifecycle_e2e": {
      "file_path": "tests\\e2e\\test_agent_lifecycle_e2e.py",
      "functions": [
        "agent_lifecycle_e2e",
        "integration_framework",
        "run_e2e_test_suite",
        "__init__",
        "setup_method",
        "teardown_method",
        "test_complete_agent_lifecycle",
        "test_agent_coordination_workflow",
        "test_agent_failure_recovery",
        "_test_agent_coordination",
        "_simulate_task_execution",
        "_setup_coordination_scenario",
        "_test_message_exchange",
        "_test_state_synchronization",
        "_test_task_delegation",
        "_simulate_agent_failure",
        "_test_failure_detection",
        "_test_recovery_mechanism",
        "_test_agent_restoration",
        "_verify_system_state"
      ],
      "classes": {
        "TestAgentLifecycleE2E": {
          "methods": [
            "__init__",
            "setup_method",
            "teardown_method",
            "test_complete_agent_lifecycle",
            "test_agent_coordination_workflow",
            "test_agent_failure_recovery",
            "_test_agent_coordination",
            "_simulate_task_execution",
            "_setup_coordination_scenario",
            "_test_message_exchange",
            "_test_state_synchronization",
            "_test_task_delegation",
            "_simulate_agent_failure",
            "_test_failure_detection",
            "_test_recovery_mechanism",
            "_test_agent_restoration",
            "_verify_system_state"
          ],
          "docstring": "End-to-end tests for complete agent lifecycle.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\e2e\\test_messaging_performance_dashboard": {
      "file_path": "tests\\e2e\\test_messaging_performance_dashboard.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestMessaging_Performance_Dashboard": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Messaging_Performance_Dashboard.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\e2e\\test_document_utils": {
      "file_path": "tests\\e2e\\test_document_utils.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestDocument_Utils": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Document_Utils.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\e2e\\test_request_handler_middleware": {
      "file_path": "tests\\e2e\\test_request_handler_middleware.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestRequest_Handler_Middleware": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Request_Handler_Middleware.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\e2e\\test_middleware": {
      "file_path": "tests\\e2e\\test_middleware.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestMiddleware": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Middleware.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\e2e\\test_swarm_monitoring_dashboard": {
      "file_path": "tests\\e2e\\test_swarm_monitoring_dashboard.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestSwarm_Monitoring_Dashboard": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Swarm_Monitoring_Dashboard.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\e2e\\test_response_handler_middleware": {
      "file_path": "tests\\e2e\\test_response_handler_middleware.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestResponse_Handler_Middleware": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Response_Handler_Middleware.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\e2e\\test_settings": {
      "file_path": "tests\\e2e\\test_settings.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestSettings": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Settings.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\e2e\\test_validation_middleware": {
      "file_path": "tests\\e2e\\test_validation_middleware.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestValidation_Middleware": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Validation_Middleware.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\e2e\\test_simple_monitoring_dashboard": {
      "file_path": "tests\\e2e\\test_simple_monitoring_dashboard.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestSimple_Monitoring_Dashboard": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Simple_Monitoring_Dashboard.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\e2e\\test_routes": {
      "file_path": "tests\\e2e\\test_routes.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestRoutes": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Routes.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\api\\test_api_documentation_suite": {
      "file_path": "tests\\api\\test_api_documentation_suite.py",
      "functions": [
        "test_openapi_spec_structure",
        "test_api_endpoints_documentation",
        "test_request_response_schemas",
        "test_security_schemes",
        "test_openapi_spec_validation",
        "test_swagger_ui_html_generation",
        "test_swagger_ui_customization",
        "test_interactive_api_testing",
        "test_swagger_ui_responsive_design",
        "test_semantic_versioning",
        "test_url_based_versioning",
        "test_version_compatibility",
        "test_deprecation_headers",
        "test_migration_guides",
        "test_api_examples_generation",
        "test_code_samples_interactive",
        "test_api_changelog",
        "test_developer_resources",
        "test_search_and_navigation",
        "test_documentation_completeness",
        "test_documentation_accuracy",
        "test_documentation_consistency",
        "test_performance_documentation",
        "__init__",
        "generate_spec",
        "__init__",
        "render",
        "__init__",
        "get_version",
        "__init__",
        "generate_docs"
      ],
      "classes": {
        "TestOpenAPISpecification": {
          "methods": [
            "test_openapi_spec_structure",
            "test_api_endpoints_documentation",
            "test_request_response_schemas",
            "test_security_schemes",
            "test_openapi_spec_validation"
          ],
          "docstring": "Test OpenAPI specification generation and validation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestSwaggerUIIntegration": {
          "methods": [
            "test_swagger_ui_html_generation",
            "test_swagger_ui_customization",
            "test_interactive_api_testing",
            "test_swagger_ui_responsive_design"
          ],
          "docstring": "Test Swagger UI integration and rendering.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestAPIVersioningStrategy": {
          "methods": [
            "test_semantic_versioning",
            "test_url_based_versioning",
            "test_version_compatibility",
            "test_deprecation_headers",
            "test_migration_guides"
          ],
          "docstring": "Test API versioning strategy implementation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestDeveloperPortal": {
          "methods": [
            "test_api_examples_generation",
            "test_code_samples_interactive",
            "test_api_changelog",
            "test_developer_resources",
            "test_search_and_navigation"
          ],
          "docstring": "Test developer portal functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestAPIQualityAssurance": {
          "methods": [
            "test_documentation_completeness",
            "test_documentation_accuracy",
            "test_documentation_consistency",
            "test_performance_documentation"
          ],
          "docstring": "Test API documentation quality assurance.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "OpenAPISpec": {
          "methods": [
            "__init__",
            "generate_spec"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "SwaggerUI": {
          "methods": [
            "__init__",
            "render"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "APIVersioning": {
          "methods": [
            "__init__",
            "get_version"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "DeveloperPortal": {
          "methods": [
            "__init__",
            "generate_docs"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\api\\test_agent_api_suite": {
      "file_path": "tests\\api\\test_agent_api_suite.py",
      "functions": [
        "agent_api_suite",
        "api_framework",
        "run_agent_api_test_suite",
        "__init__",
        "setup_method",
        "teardown_method",
        "test_agent_registration_api",
        "test_agent_retrieval_api",
        "test_agent_update_api",
        "test_agent_status_api",
        "test_agent_coordination_api",
        "test_agent_api_error_handling",
        "test_agent_api_performance",
        "_test_status_monitoring",
        "_test_coordination_api",
        "_test_concurrent_requests"
      ],
      "classes": {
        "TestAgentAPISuite": {
          "methods": [
            "__init__",
            "setup_method",
            "teardown_method",
            "test_agent_registration_api",
            "test_agent_retrieval_api",
            "test_agent_update_api",
            "test_agent_status_api",
            "test_agent_coordination_api",
            "test_agent_api_error_handling",
            "test_agent_api_performance",
            "_test_status_monitoring",
            "_test_coordination_api",
            "_test_concurrent_requests"
          ],
          "docstring": "Comprehensive API testing suite for agent management endpoints.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\e2e\\test_search_utils": {
      "file_path": "tests\\e2e\\test_search_utils.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestSearch_Utils": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Search_Utils.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_agent_cycle": {
      "file_path": "tests\\functional\\test_agent_cycle.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAgent_Cycle": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Agent_Cycle.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\contracts\\test_contract_system": {
      "file_path": "tests\\contracts\\test_contract_system.py",
      "functions": [
        "test_contract_structure_validation",
        "test_contract_priority_levels",
        "test_contract_scope_validation",
        "test_contract_xp_reward_calculation",
        "test_contract_deadline_validation",
        "test_contract_availability_check",
        "test_agent_eligibility_validation",
        "test_contract_claiming_process",
        "test_concurrent_claim_prevention",
        "test_progress_tracking",
        "test_completion_criteria_validation",
        "test_partial_completion_handling",
        "test_contract_timeout_handling",
        "test_xp_calculation_and_distribution",
        "test_xp_award_process",
        "test_xp_leaderboard_and_analytics",
        "test_xp_penalty_system",
        "test_contract_messaging_integration",
        "test_contract_status_broadcasting",
        "test_contract_audit_trail",
        "test_contract_performance_metrics",
        "__init__",
        "create_contract",
        "validate_contract",
        "claim_contract",
        "__init__",
        "validate_requirements",
        "check_completion_criteria",
        "__init__",
        "award_xp"
      ],
      "classes": {
        "TestContractCreation": {
          "methods": [
            "test_contract_structure_validation",
            "test_contract_priority_levels",
            "test_contract_scope_validation",
            "test_contract_xp_reward_calculation",
            "test_contract_deadline_validation"
          ],
          "docstring": "Test contract creation and validation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestContractClaiming": {
          "methods": [
            "test_contract_availability_check",
            "test_agent_eligibility_validation",
            "test_contract_claiming_process",
            "test_concurrent_claim_prevention"
          ],
          "docstring": "Test contract claiming and assignment.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestContractExecution": {
          "methods": [
            "test_progress_tracking",
            "test_completion_criteria_validation",
            "test_partial_completion_handling",
            "test_contract_timeout_handling"
          ],
          "docstring": "Test contract execution and completion tracking.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestXPRewards": {
          "methods": [
            "test_xp_calculation_and_distribution",
            "test_xp_award_process",
            "test_xp_leaderboard_and_analytics",
            "test_xp_penalty_system"
          ],
          "docstring": "Test XP reward distribution and tracking.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestContractSystemIntegration": {
          "methods": [
            "test_contract_messaging_integration",
            "test_contract_status_broadcasting",
            "test_contract_audit_trail",
            "test_contract_performance_metrics"
          ],
          "docstring": "Test contract system integration with other components.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ContractSystem": {
          "methods": [
            "__init__",
            "create_contract",
            "validate_contract",
            "claim_contract"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ContractValidator": {
          "methods": [
            "__init__",
            "validate_requirements",
            "check_completion_criteria"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "XPTracker": {
          "methods": [
            "__init__",
            "award_xp"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\deployment\\test_deployment_verification": {
      "file_path": "tests\\deployment\\test_deployment_verification.py",
      "functions": [
        "test_deployment_verification_production",
        "test_deployment_report_generation",
        "__init__",
        "_get_environment_url",
        "run_full_deployment_verification",
        "verify_system_health",
        "verify_service_availability",
        "verify_api_endpoints",
        "verify_database_connectivity",
        "verify_configuration_integrity",
        "verify_performance_baselines",
        "verify_security_posture",
        "verify_external_integrations",
        "verify_monitoring_systems",
        "verify_rollback_capability",
        "generate_deployment_report",
        "_generate_recommendations"
      ],
      "classes": {
        "DeploymentVerificationSystem": {
          "methods": [
            "__init__",
            "_get_environment_url",
            "run_full_deployment_verification",
            "verify_system_health",
            "verify_service_availability",
            "verify_api_endpoints",
            "verify_database_connectivity",
            "verify_configuration_integrity",
            "verify_performance_baselines",
            "verify_security_posture",
            "verify_external_integrations",
            "verify_monitoring_systems",
            "verify_rollback_capability",
            "generate_deployment_report",
            "_generate_recommendations"
          ],
          "docstring": "Automated deployment verification system for Swarm Intelligence platform.\n\nPerforms comprehensive checks to ensure deployment readiness and stability.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_activate_vector_database_integration": {
      "file_path": "tests\\functional\\test_activate_vector_database_integration.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestActivate_Vector_Database_Integration": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Activate_Vector_Database_Integration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_analysis_cli": {
      "file_path": "tests\\functional\\test_analysis_cli.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAnalysis_Cli": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Analysis_Cli.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_agent_documentation_cli": {
      "file_path": "tests\\functional\\test_agent_documentation_cli.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAgent_Documentation_Cli": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Agent_Documentation_Cli.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_auto_remediate_loc": {
      "file_path": "tests\\functional\\test_auto_remediate_loc.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAuto_Remediate_Loc": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Auto_Remediate_Loc.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_audit_cleanup": {
      "file_path": "tests\\functional\\test_audit_cleanup.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAudit_Cleanup": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Audit_Cleanup.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_broadcast_contract_announcement": {
      "file_path": "tests\\functional\\test_broadcast_contract_announcement.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestBroadcast_Contract_Announcement": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Broadcast_Contract_Announcement.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_broadcast_advanced_contracts": {
      "file_path": "tests\\functional\\test_broadcast_advanced_contracts.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestBroadcast_Advanced_Contracts": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Broadcast_Advanced_Contracts.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_agent_checkin": {
      "file_path": "tests\\functional\\test_agent_checkin.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAgent_Checkin": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Agent_Checkin.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_analytics_cli": {
      "file_path": "tests\\functional\\test_analytics_cli.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAnalytics_Cli": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Analytics_Cli.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_captain_snapshot": {
      "file_path": "tests\\functional\\test_captain_snapshot.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestCaptain_Snapshot": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Captain_Snapshot.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_agent_onboarding": {
      "file_path": "tests\\functional\\test_agent_onboarding.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestAgent_Onboarding": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Agent_Onboarding.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_check_snapshot_up_to_date": {
      "file_path": "tests\\functional\\test_check_snapshot_up_to_date.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestCheck_Snapshot_Up_To_Date": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Check_Snapshot_Up_To_Date.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_consolidated_messaging": {
      "file_path": "tests\\functional\\test_consolidated_messaging.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestConsolidated_Messaging": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Consolidated_Messaging.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_cleanup_v2_compliance": {
      "file_path": "tests\\functional\\test_cleanup_v2_compliance.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestCleanup_V2_Compliance": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Cleanup_V2_Compliance.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_demo_semantic": {
      "file_path": "tests\\functional\\test_demo_semantic.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestDemo_Semantic": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Demo_Semantic.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_cleanup_overnight_sequence": {
      "file_path": "tests\\functional\\test_cleanup_overnight_sequence.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestCleanup_Overnight_Sequence": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Cleanup_Overnight_Sequence.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_dup_scan": {
      "file_path": "tests\\functional\\test_dup_scan.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestDup_Scan": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Dup_Scan.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_competitive_progress_reporter": {
      "file_path": "tests\\functional\\test_competitive_progress_reporter.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestCompetitive_Progress_Reporter": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Competitive_Progress_Reporter.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_configure_discord_webhooks": {
      "file_path": "tests\\functional\\test_configure_discord_webhooks.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestConfigure_Discord_Webhooks": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Configure_Discord_Webhooks.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_execute_ssot_integration": {
      "file_path": "tests\\functional\\test_execute_ssot_integration.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestExecute_Ssot_Integration": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Execute_Ssot_Integration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_enforce_python_standards": {
      "file_path": "tests\\functional\\test_enforce_python_standards.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestEnforce_Python_Standards": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Enforce_Python_Standards.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_duplication_analyzer": {
      "file_path": "tests\\functional\\test_duplication_analyzer.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestDuplication_Analyzer": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Duplication_Analyzer.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_fix_and_ingest_vector_database": {
      "file_path": "tests\\functional\\test_fix_and_ingest_vector_database.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestFix_And_Ingest_Vector_Database": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Fix_And_Ingest_Vector_Database.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_generate_utils_catalog": {
      "file_path": "tests\\functional\\test_generate_utils_catalog.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestGenerate_Utils_Catalog": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Generate_Utils_Catalog.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_find_large_files": {
      "file_path": "tests\\functional\\test_find_large_files.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestFind_Large_Files": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Find_Large_Files.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_double_check_protocols": {
      "file_path": "tests\\functional\\test_double_check_protocols.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestDouble_Check_Protocols": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Double_Check_Protocols.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_functionality_verification": {
      "file_path": "tests\\functional\\test_functionality_verification.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestFunctionality_Verification": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Functionality_Verification.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_index_v2_refactoring": {
      "file_path": "tests\\functional\\test_index_v2_refactoring.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestIndex_V2_Refactoring": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Index_V2_Refactoring.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_ingest_statuses": {
      "file_path": "tests\\functional\\test_ingest_statuses.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestIngest_Statuses": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Ingest_Statuses.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_messaging_performance_cli": {
      "file_path": "tests\\functional\\test_messaging_performance_cli.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestMessaging_Performance_Cli": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Messaging_Performance_Cli.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_migrate_managers": {
      "file_path": "tests\\functional\\test_migrate_managers.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestMigrate_Managers": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Migrate_Managers.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_setup_discord_bot": {
      "file_path": "tests\\functional\\test_setup_discord_bot.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestSetup_Discord_Bot": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Setup_Discord_Bot.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_replace_prints_with_logger": {
      "file_path": "tests\\functional\\test_replace_prints_with_logger.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestReplace_Prints_With_Logger": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Replace_Prints_With_Logger.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_projectscanner": {
      "file_path": "tests\\functional\\test_projectscanner.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestProjectscanner": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Projectscanner.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_run_admin_commander": {
      "file_path": "tests\\functional\\test_run_admin_commander.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestRun_Admin_Commander": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Run_Admin_Commander.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_run_project_scan": {
      "file_path": "tests\\functional\\test_run_project_scan.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestRun_Project_Scan": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Run_Project_Scan.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_send_devlog_unified": {
      "file_path": "tests\\functional\\test_send_devlog_unified.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestSend_Devlog_Unified": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Send_Devlog_Unified.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_run_discord_bot": {
      "file_path": "tests\\functional\\test_run_discord_bot.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestRun_Discord_Bot": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Run_Discord_Bot.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_run_discord_agent_bot": {
      "file_path": "tests\\functional\\test_run_discord_agent_bot.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestDiscordAgentBot": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for DiscordAgentBot.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_setup_enhanced_discord": {
      "file_path": "tests\\functional\\test_setup_enhanced_discord.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestSetup_Enhanced_Discord": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Setup_Enhanced_Discord.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_migrate_orchestrators": {
      "file_path": "tests\\functional\\test_migrate_orchestrators.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestMigrate_Orchestrators": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Migrate_Orchestrators.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\commandresult": {
      "file_path": "src\\commandresult.py",
      "functions": [],
      "classes": {
        "CommandResult": {
          "methods": [],
          "docstring": "Represents the result of a command execution.\n\nThis dataclass provides a standardized way to return command execution\nresults with success status, messages, data, and metadata. It serves as\nthe universal response format for all command operations in the swarm system.\n\nAttributes:\n    success (bool): Whether the command executed successfully\n    message (str): Human-readable message describing the result\n    data (Any | None): Optional data returned by the command (can be any type)\n    execution_time (float | None): Time taken to execute the command in seconds\n    agent (str | None): Agent identifier that executed the command\n\nExample:\n    >>> # Basic success result\n    >>> result = CommandResult(\n    ...     success=True,\n    ...     message=\"File processed successfully\",\n    ...     data={\"file_path\": \"/data/input.txt\", \"lines_processed\": 150},\n    ...     execution_time=0.234,\n    ...     agent=\"Agent-2\"\n    ... )\n    >>> print(f\"\u2705 {result.message}\")\n    \u2705 File processed successfully\n    >>> print(f\"\ud83d\udcca Processed {result.data['lines_processed']} lines in {result.execution_time}s\")\n    \ud83d\udcca Processed 150 lines in 0.234s\n\nExample:\n    >>> # Error result with diagnostic data\n    >>> result = CommandResult(\n    ...     success=False,\n    ...     message=\"Network connection timeout\",\n    ...     data={\n    ...         \"error_code\": \"NETWORK_TIMEOUT\",\n    ...         \"retry_count\": 3,\n    ...         \"last_attempt\": \"2025-09-12T10:30:00Z\"\n    ...     },\n    ...     execution_time=15.678,\n    ...     agent=\"Agent-6\"\n    ... )\n    >>> if not result.success:\n    ...     print(f\"\u274c {result.message}\")\n    ...     print(f\"\ud83d\udd04 Retried {result.data['retry_count']} times\")\n    \u274c Network connection timeout\n    \ud83d\udd04 Retried 3 times",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "templates\\__init__": {
      "file_path": "templates\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "tests\\functional\\test_triple_check_protocols": {
      "file_path": "tests\\functional\\test_triple_check_protocols.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestTriple_Check_Protocols": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Triple_Check_Protocols.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_status_embedding_refresh": {
      "file_path": "tests\\functional\\test_status_embedding_refresh.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestStatus_Embedding_Refresh": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Status_Embedding_Refresh.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\agent_registry": {
      "file_path": "src\\agent_registry.py",
      "functions": [
        "_load_coordinates"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\__init__": {
      "file_path": "src\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\coordinate_agent_registry": {
      "file_path": "src\\coordinate_agent_registry.py",
      "functions": [
        "_load_coordinates"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "tests\\functional\\test_validate_workspace_coords": {
      "file_path": "tests\\functional\\test_validate_workspace_coords.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestValidate_Workspace_Coords": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Validate_Workspace_Coords.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_v2_release_summary": {
      "file_path": "tests\\functional\\test_v2_release_summary.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestV2_Release_Summary": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for V2_Release_Summary.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\swarmstatus": {
      "file_path": "src\\swarmstatus.py",
      "functions": [
        "__post_init__"
      ],
      "classes": {
        "SwarmStatus": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Represents the current swarm status.\n\nThis dataclass tracks the overall health and status of the swarm system,\nincluding active agents, missions, system health, and performance metrics.\n\nAttributes:\n    active_agents (list[str]): List of currently active agent identifiers\n    total_agents (int): Total number of agents in the swarm (default: 8)\n    current_cycle (int): Current operational cycle number\n    active_missions (list[str]): List of currently active mission identifiers\n    system_health (str): Overall system health status (HEALTHY, DEGRADED, CRITICAL)\n    last_update (datetime | None): Timestamp of last status update\n    efficiency_rating (float): Current efficiency rating (0.0-10.0)\n    pending_tasks (list[str]): List of pending task identifiers\n\nExample:\n    >>> status = SwarmStatus()\n    >>> print(f\"Active agents: {len(status.active_agents)}\")\n    >>> print(f\"System health: {status.system_health}\")\n    Active agents: 8\n    System health: HEALTHY",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tests\\functional\\test_terminal_completion_monitor": {
      "file_path": "tests\\functional\\test_terminal_completion_monitor.py",
      "functions": [
        "setup_method",
        "test_initialization",
        "test_basic_functionality",
        "test_no_exceptions_on_basic_usage",
        "test_component_has_required_attributes"
      ],
      "classes": {
        "TestTerminal_Completion_Monitor": {
          "methods": [
            "setup_method",
            "test_initialization",
            "test_basic_functionality",
            "test_no_exceptions_on_basic_usage",
            "test_component_has_required_attributes"
          ],
          "docstring": "Basic test suite for Terminal_Completion_Monitor.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "templates\\onboarding_roles": {
      "file_path": "templates\\onboarding_roles.py",
      "functions": [
        "build_role_message",
        "f_get_role_specific_tasks",
        "get_role_description",
        "validate_role",
        "get_available_roles",
        "get_cleanup_phase_roles"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\web\\frontend\\__init__": {
      "file_path": "src\\web\\frontend\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\web\\frontend\\settings": {
      "file_path": "src\\web\\frontend\\settings.py",
      "functions": [
        "get_settings"
      ],
      "classes": {
        "FrontendSettings": {
          "methods": [],
          "docstring": "Configuration values for the frontend layer.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\web\\vector_database\\__init__": {
      "file_path": "src\\web\\vector_database\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\web\\vector_database\\analytics_utils": {
      "file_path": "src\\web\\vector_database\\analytics_utils.py",
      "functions": [
        "simulate_get_analytics",
        "process_analytics"
      ],
      "classes": {
        "AnalyticsUtils": {
          "methods": [
            "simulate_get_analytics",
            "process_analytics"
          ],
          "docstring": "Utility functions for analytics operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\web\\vector_database\\document_utils": {
      "file_path": "src\\web\\vector_database\\document_utils.py",
      "functions": [
        "simulate_get_documents",
        "simulate_add_document",
        "simulate_delete_document"
      ],
      "classes": {
        "DocumentUtils": {
          "methods": [
            "simulate_get_documents",
            "simulate_add_document",
            "simulate_delete_document"
          ],
          "docstring": "Utility functions for document operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\web\\vector_database\\error_handler_middleware": {
      "file_path": "src\\web\\vector_database\\error_handler_middleware.py",
      "functions": [
        "error_handler",
        "decorated_function"
      ],
      "classes": {
        "ErrorHandlerMiddleware": {
          "methods": [
            "error_handler"
          ],
          "docstring": "Error handling middleware decorators.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\web\\vector_database\\utils": {
      "file_path": "src\\web\\vector_database\\utils.py",
      "functions": [
        "__init__",
        "simulate_vector_search",
        "simulate_get_documents",
        "simulate_add_document",
        "simulate_get_document",
        "simulate_update_document",
        "simulate_delete_document",
        "simulate_get_analytics",
        "simulate_get_collections",
        "simulate_export_data"
      ],
      "classes": {
        "VectorDatabaseUtils": {
          "methods": [
            "__init__",
            "simulate_vector_search",
            "simulate_get_documents",
            "simulate_add_document",
            "simulate_get_document",
            "simulate_update_document",
            "simulate_delete_document",
            "simulate_get_analytics",
            "simulate_get_collections",
            "simulate_export_data"
          ],
          "docstring": "Main utility orchestrator for vector database operations.\n\n    V2 Compliance: < 100 lines, facade pattern, single responsibility.\n    This class orchestrates all utility components.\n\nEXAMPLE USAGE:\n==============\n\n# Basic usage example\nfrom src.web.vector_database.utils import Utils\n\n# Initialize and use\ninstance = Utils()\nresult = instance.execute()\nprint(f\"Execution result: {result}\")\n\n# Advanced configuration\nconfig = {\n    \"option1\": \"value1\",\n    \"option2\": True\n}\n\ninstance = Utils(config)\nadvanced_result = instance.execute_advanced()\nprint(f\"Advanced result: {advanced_result}\")\n\n    ",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\web\\vector_database\\collection_utils": {
      "file_path": "src\\web\\vector_database\\collection_utils.py",
      "functions": [
        "simulate_get_collections",
        "simulate_export_data"
      ],
      "classes": {
        "CollectionUtils": {
          "methods": [
            "simulate_get_collections",
            "simulate_export_data"
          ],
          "docstring": "Utility functions for collection operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\web\\vector_database\\middleware": {
      "file_path": "src\\web\\vector_database\\middleware.py",
      "functions": [
        "__init__",
        "error_handler_decorator",
        "json_required_decorator",
        "validate_request_decorator",
        "log_request_decorator",
        "cors_headers_decorator",
        "rate_limit_decorator",
        "cache_response_decorator",
        "validate_pagination_decorator"
      ],
      "classes": {
        "VectorDatabaseMiddleware": {
          "methods": [
            "__init__",
            "error_handler_decorator",
            "json_required_decorator",
            "validate_request_decorator",
            "log_request_decorator",
            "cors_headers_decorator",
            "rate_limit_decorator",
            "cache_response_decorator",
            "validate_pagination_decorator"
          ],
          "docstring": "Main middleware orchestrator for vector database operations.\n\n    V2 Compliance: < 100 lines, facade pattern, single responsibility.\n    This class orchestrates all middleware components.\n\nEXAMPLE USAGE:\n==============\n\n# Basic usage example\nfrom src.web.vector_database.middleware import Middleware\n\n# Initialize and use\ninstance = Middleware()\nresult = instance.execute()\nprint(f\"Execution result: {result}\")\n\n# Advanced configuration\nconfig = {\n    \"option1\": \"value1\",\n    \"option2\": True\n}\n\ninstance = Middleware(config)\nadvanced_result = instance.execute_advanced()\nprint(f\"Advanced result: {advanced_result}\")\n\n    ",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\consolidated_onboarding_service": {
      "file_path": "src\\services\\consolidated_onboarding_service.py",
      "functions": [
        "get_phase_2_status",
        "get_agent_assignments",
        "get_targets",
        "is_phase_2_active"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\web\\vector_database\\models": {
      "file_path": "src\\web\\vector_database\\models.py",
      "functions": [
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict"
      ],
      "classes": {
        "AnalyticsData": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Analytics data structure for vector database operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SearchResult": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Search result data structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CollectionInfo": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Collection information data structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "Collection": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Collection data structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ExportRequest": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Export request data structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ExportData": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Export data structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "Document": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Document data structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DocumentRequest": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Document request data structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PaginationRequest": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Pagination request data structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "APIResponse": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Standard API response structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\consolidated_agent_management_service": {
      "file_path": "src\\services\\consolidated_agent_management_service.py",
      "functions": [
        "__init__",
        "_load_assignments",
        "_create_vector_integration",
        "_save_assignments",
        "get_agent_principle",
        "assign_principle",
        "get_all_assignments",
        "get_agents_by_principle",
        "get_agent_status",
        "get_integration_stats",
        "_get_recent_work_count",
        "_get_pending_tasks_count",
        "_get_last_activity",
        "_get_total_documents",
        "_get_agent_documents",
        "index_agent_work",
        "search_agent_work",
        "get_agent_context",
        "get_agent_config",
        "reload_config",
        "get_comprehensive_agent_report"
      ],
      "classes": {
        "ConsolidatedAgentManagementService": {
          "methods": [
            "__init__",
            "_load_assignments",
            "_create_vector_integration",
            "_save_assignments",
            "get_agent_principle",
            "assign_principle",
            "get_all_assignments",
            "get_agents_by_principle",
            "get_agent_status",
            "get_integration_stats",
            "_get_recent_work_count",
            "_get_pending_tasks_count",
            "_get_last_activity",
            "_get_total_documents",
            "_get_agent_documents",
            "index_agent_work",
            "search_agent_work",
            "get_agent_context",
            "get_agent_config",
            "reload_config",
            "get_comprehensive_agent_report"
          ],
          "docstring": "Unified agent management service combining assignment, status, and vector integration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\__init__": {
      "file_path": "src\\services\\__init__.py",
      "functions": [
        "_lazy_import",
        "get_agent_status_manager",
        "get_messaging_core",
        "get_vector_database",
        "get_agent_registry",
        "get_config"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\advanced_analytics_service": {
      "file_path": "src\\services\\advanced_analytics_service.py",
      "functions": [
        "get_advanced_analytics_service"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\consolidated_handler_service": {
      "file_path": "src\\services\\consolidated_handler_service.py",
      "functions": [
        "__init__",
        "can_handle_command",
        "get_available_commands",
        "get_command_help",
        "can_handle",
        "can_handle",
        "__init__"
      ],
      "classes": {
        "ConsolidatedHandlerService": {
          "methods": [
            "__init__",
            "can_handle_command",
            "get_available_commands",
            "get_command_help"
          ],
          "docstring": "Unified handler service combining coordinate, onboarding, command, contract, and utility handlers.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CoordinateHandler": {
          "methods": [
            "can_handle"
          ],
          "docstring": "Handler for coordinate management.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "OnboardingHandler": {
          "methods": [
            "can_handle"
          ],
          "docstring": "Handler for onboarding operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CommandHandler": {
          "methods": [
            "__init__"
          ],
          "docstring": "Handler for general commands.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ContractHandler": {
          "methods": [],
          "docstring": "Handler for contract operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "UtilityHandler": {
          "methods": [],
          "docstring": "Handler for utility operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\consolidated_vector_service": {
      "file_path": "src\\services\\consolidated_vector_service.py",
      "functions": [
        "__init__",
        "_initialize_engine",
        "generate_embeddings",
        "_encode_sentence_transformers",
        "_encode_openai",
        "add_document",
        "search_documents",
        "get_document",
        "delete_document",
        "get_collection_stats",
        "create_collection",
        "delete_collection",
        "list_collections",
        "get_task_context",
        "index_agent_work",
        "get_recommendations",
        "get_agent_status_summary",
        "cleanup_old_documents",
        "export_collection",
        "import_collection"
      ],
      "classes": {
        "ConsolidatedVectorService": {
          "methods": [
            "__init__",
            "_initialize_engine",
            "generate_embeddings",
            "_encode_sentence_transformers",
            "_encode_openai",
            "add_document",
            "search_documents",
            "get_document",
            "delete_document",
            "get_collection_stats",
            "create_collection",
            "delete_collection",
            "list_collections",
            "get_task_context",
            "index_agent_work",
            "get_recommendations",
            "get_agent_status_summary",
            "cleanup_old_documents",
            "export_collection",
            "import_collection"
          ],
          "docstring": "Unified vector database service combining orchestration, integration, and embeddings.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\consolidated_messaging_service": {
      "file_path": "src\\services\\consolidated_messaging_service.py",
      "functions": [
        "broadcast_message",
        "get_messaging_core",
        "list_agents",
        "send_message",
        "send_message_inbox",
        "send_message_pyautogui",
        "send_message_with_fallback",
        "show_message_history",
        "main"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\constants": {
      "file_path": "src\\services\\constants.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\coordination\\__init__": {
      "file_path": "src\\services\\coordination\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\coordination\\strategy_coordinator": {
      "file_path": "src\\services\\coordination\\strategy_coordinator.py",
      "functions": [
        "__init__",
        "_initialize_coordination_rules",
        "_initialize_routing_table",
        "determine_coordination_strategy",
        "apply_coordination_rules",
        "_estimate_delivery_time",
        "get_coordination_rules",
        "get_routing_table",
        "update_coordination_rule",
        "update_routing_config",
        "get_coordinator_status"
      ],
      "classes": {
        "StrategyCoordinator": {
          "methods": [
            "__init__",
            "_initialize_coordination_rules",
            "_initialize_routing_table",
            "determine_coordination_strategy",
            "apply_coordination_rules",
            "_estimate_delivery_time",
            "get_coordination_rules",
            "get_routing_table",
            "update_coordination_rule",
            "update_routing_config",
            "get_coordinator_status"
          ],
          "docstring": "Handles coordination strategy determination and application.\n\n    Manages strategy selection, rule application, and coordination execution.\n\nEXAMPLE USAGE:\n==============\n\n# Import the service\nfrom src.services.coordination.strategy_coordinator import Strategy_CoordinatorService\n\n# Initialize service\nservice = Strategy_CoordinatorService()\n\n# Basic service operation\nresponse = service.handle_request(request_data)\nprint(f\"Service response: {response}\")\n\n# Service with dependency injection\nfrom src.core.dependency_container import Container\n\ncontainer = Container()\nservice = container.get(Strategy_CoordinatorService)\n\n# Execute service method\nresult = service.execute_operation(input_data, context)\nprint(f\"Operation result: {result}\")\n\n    ",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\coordination\\stats_tracker": {
      "file_path": "src\\services\\coordination\\stats_tracker.py",
      "functions": [
        "__init__",
        "update_coordination_stats",
        "_update_detailed_stats",
        "_update_category_stats",
        "get_coordination_stats",
        "get_detailed_stats",
        "get_performance_summary",
        "reset_stats",
        "get_tracker_status"
      ],
      "classes": {
        "StatsTracker": {
          "methods": [
            "__init__",
            "update_coordination_stats",
            "_update_detailed_stats",
            "_update_category_stats",
            "get_coordination_stats",
            "get_detailed_stats",
            "get_performance_summary",
            "reset_stats",
            "get_tracker_status"
          ],
          "docstring": "Handles coordination statistics tracking and reporting.\n\n    Manages statistics collection, calculation, and reporting for coordination\n    operations.\n\nEXAMPLE USAGE:\n==============\n\n# Import the service\nfrom src.services.coordination.stats_tracker import Stats_TrackerService\n\n# Initialize service\nservice = Stats_TrackerService()\n\n# Basic service operation\nresponse = service.handle_request(request_data)\nprint(f\"Service response: {response}\")\n\n# Service with dependency injection\nfrom src.core.dependency_container import Container\n\ncontainer = Container()\nservice = container.get(Stats_TrackerService)\n\n# Execute service method\nresult = service.execute_operation(input_data, context)\nprint(f\"Operation result: {result}\")\n\n    ",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\coordination\\bulk_coordinator": {
      "file_path": "src\\services\\coordination\\bulk_coordinator.py",
      "functions": [
        "__init__",
        "coordinate_bulk_messages",
        "_coordinate_single_message",
        "_group_messages_by_strategy",
        "coordinate_messages_by_priority",
        "coordinate_messages_by_type",
        "coordinate_messages_by_sender",
        "get_bulk_coordinator_status"
      ],
      "classes": {
        "BulkCoordinator": {
          "methods": [
            "__init__",
            "coordinate_bulk_messages",
            "_coordinate_single_message",
            "_group_messages_by_strategy",
            "coordinate_messages_by_priority",
            "coordinate_messages_by_type",
            "coordinate_messages_by_sender",
            "get_bulk_coordinator_status"
          ],
          "docstring": "Handles bulk message coordination and grouping.\n\n    Manages bulk message processing, grouping by strategy, and batch coordination.\n\nEXAMPLE USAGE:\n==============\n\n# Import the service\nfrom src.services.coordination.bulk_coordinator import Bulk_CoordinatorService\n\n# Initialize service\nservice = Bulk_CoordinatorService()\n\n# Basic service operation\nresponse = service.handle_request(request_data)\nprint(f\"Service response: {response}\")\n\n# Service with dependency injection\nfrom src.core.dependency_container import Container\n\ncontainer = Container()\nservice = container.get(Bulk_CoordinatorService)\n\n# Execute service method\nresult = service.execute_operation(input_data, context)\nprint(f\"Operation result: {result}\")\n\n    ",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\handlers\\__init__": {
      "file_path": "src\\services\\handlers\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\models\\__init__": {
      "file_path": "src\\services\\models\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\protocol\\routers\\__init__": {
      "file_path": "src\\services\\protocol\\routers\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\utils\\agent_utils_registry": {
      "file_path": "src\\services\\utils\\agent_utils_registry.py",
      "functions": [
        "list_agents"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\protocol\\__init__": {
      "file_path": "src\\services\\protocol\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\utils\\__init__": {
      "file_path": "src\\services\\utils\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\vector_database\\status_indexer": {
      "file_path": "src\\services\\vector_database\\status_indexer.py",
      "functions": [
        "load_status",
        "index_all_statuses"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\utils\\vector_config_utils": {
      "file_path": "src\\services\\utils\\vector_config_utils.py",
      "functions": [
        "load_simple_config"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\vector_database\\__init__": {
      "file_path": "src\\services\\vector_database\\__init__.py",
      "functions": [
        "get_vector_database_service",
        "search_vector_database",
        "add_document_to_vector_db"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\protocol\\routers\\route_analyzer": {
      "file_path": "src\\services\\protocol\\routers\\route_analyzer.py",
      "functions": [
        "__init__",
        "analyze_route_options",
        "_select_fastest_route",
        "_calculate_route_score",
        "_generate_route_key",
        "update_route_performance",
        "get_route_performance_summary",
        "get_route_usage_stats",
        "clear_performance_data",
        "get_analyzer_status"
      ],
      "classes": {
        "RouteAnalyzer": {
          "methods": [
            "__init__",
            "analyze_route_options",
            "_select_fastest_route",
            "_calculate_route_score",
            "_generate_route_key",
            "update_route_performance",
            "get_route_performance_summary",
            "get_route_usage_stats",
            "clear_performance_data",
            "get_analyzer_status"
          ],
          "docstring": "Analyzes route options and calculates scores.\n\n    Handles route analysis, scoring, and selection logic for message routing decisions.\n\nEXAMPLE USAGE:\n==============\n\n# Import the service\nfrom src.services.protocol.routers.route_analyzer import Route_AnalyzerService\n\n# Initialize service\nservice = Route_AnalyzerService()\n\n# Basic service operation\nresponse = service.handle_request(request_data)\nprint(f\"Service response: {response}\")\n\n# Service with dependency injection\nfrom src.core.dependency_container import Container\n\ncontainer = Container()\nservice = container.get(Route_AnalyzerService)\n\n# Execute service method\nresult = service.execute_operation(input_data, context)\nprint(f\"Operation result: {result}\")\n\n    ",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\thea\\__init__": {
      "file_path": "src\\services\\thea\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\thea\\core\\__init__": {
      "file_path": "src\\services\\thea\\core\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\thea\\authentication\\__init__": {
      "file_path": "src\\services\\thea\\authentication\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\thea\\core\\thea_communication_manager": {
      "file_path": "src\\services\\thea\\core\\thea_communication_manager.py",
      "functions": [
        "__init__",
        "initialize",
        "run_communication_cycle",
        "_print_success_summary",
        "create_response_analysis",
        "send_quick_message",
        "get_status",
        "cleanup",
        "__enter__",
        "__exit__"
      ],
      "classes": {
        "TheaCommunicationManager": {
          "methods": [
            "__init__",
            "initialize",
            "run_communication_cycle",
            "_print_success_summary",
            "create_response_analysis",
            "send_quick_message",
            "get_status",
            "cleanup",
            "__enter__",
            "__exit__"
          ],
          "docstring": "Main orchestrator for Thea communication system.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\thea\\authentication\\thea_authentication_service": {
      "file_path": "src\\services\\thea\\authentication\\thea_authentication_service.py",
      "functions": [
        "__init__",
        "save_cookies",
        "load_cookies",
        "has_valid_cookies",
        "clear_cookies",
        "__init__",
        "is_logged_in",
        "__init__",
        "ensure_authenticated",
        "_try_cookie_authentication",
        "_manual_authentication",
        "save_session_cookies",
        "check_login_status",
        "clear_authentication"
      ],
      "classes": {
        "AuthStatus": {
          "methods": [],
          "docstring": "Authentication status.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TheaCookieManager": {
          "methods": [
            "__init__",
            "save_cookies",
            "load_cookies",
            "has_valid_cookies",
            "clear_cookies"
          ],
          "docstring": "Manages cookie persistence for Thea authentication.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TheaLoginDetector": {
          "methods": [
            "__init__",
            "is_logged_in"
          ],
          "docstring": "Detects login status on ChatGPT pages.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TheaAuthenticationService": {
          "methods": [
            "__init__",
            "ensure_authenticated",
            "_try_cookie_authentication",
            "_manual_authentication",
            "save_session_cookies",
            "check_login_status",
            "clear_authentication"
          ],
          "docstring": "Handles authentication for Thea services.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\thea\\browser\\thea_browser_service": {
      "file_path": "src\\services\\thea\\browser\\thea_browser_service.py",
      "functions": [
        "__init__",
        "_check_selenium_availability",
        "initialize_driver",
        "_create_chrome_options",
        "navigate_to_thea",
        "navigate_to_chatgpt",
        "get_current_url",
        "wait_for_element",
        "find_input_field",
        "send_message_to_input",
        "get_cookies",
        "add_cookies",
        "refresh_page",
        "execute_script",
        "driver_context",
        "cleanup",
        "__enter__",
        "__exit__"
      ],
      "classes": {
        "BrowserMode": {
          "methods": [],
          "docstring": "Browser automation modes.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TheaBrowserService": {
          "methods": [
            "__init__",
            "_check_selenium_availability",
            "initialize_driver",
            "_create_chrome_options",
            "navigate_to_thea",
            "navigate_to_chatgpt",
            "get_current_url",
            "wait_for_element",
            "find_input_field",
            "send_message_to_input",
            "get_cookies",
            "add_cookies",
            "refresh_page",
            "execute_script",
            "driver_context",
            "cleanup",
            "__enter__",
            "__exit__"
          ],
          "docstring": "Browser service for Thea automation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\thea\\messaging\\__init__": {
      "file_path": "src\\services\\thea\\messaging\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\thea\\browser\\__init__": {
      "file_path": "src\\services\\thea\\browser\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\thea\\commander\\thea_response_processor": {
      "file_path": "src\\services\\thea\\commander\\thea_response_processor.py",
      "functions": [
        "__init__",
        "__init__",
        "process_thea_response",
        "generate_commander_thea_analysis",
        "_extract_text_from_screenshot",
        "_structure_response_content",
        "_extract_key_insights",
        "_extract_action_items",
        "_calculate_confidence_metrics",
        "_calculate_quality_score",
        "_generate_enhanced_analysis"
      ],
      "classes": {
        "ResponseAnalysisResult": {
          "methods": [
            "__init__"
          ],
          "docstring": "Result of response analysis with structured data.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CommanderTheaResponseProcessor": {
          "methods": [
            "__init__",
            "process_thea_response",
            "generate_commander_thea_analysis",
            "_extract_text_from_screenshot",
            "_structure_response_content",
            "_extract_key_insights",
            "_extract_action_items",
            "_calculate_confidence_metrics",
            "_calculate_quality_score",
            "_generate_enhanced_analysis"
          ],
          "docstring": "Advanced response processor for Commander THEA consultations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\thea\\responses\\thea_response_service": {
      "file_path": "src\\services\\thea\\responses\\thea_response_service.py",
      "functions": [
        "__init__",
        "wait_for_response",
        "_wait_for_response_manual",
        "capture_response",
        "_extract_response_text",
        "_take_screenshot",
        "_create_response_metadata",
        "_find_latest_sent_message",
        "_create_conversation_log"
      ],
      "classes": {
        "ResponseStatus": {
          "methods": [],
          "docstring": "Response detection status.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TheaResponseService": {
          "methods": [
            "__init__",
            "wait_for_response",
            "_wait_for_response_manual",
            "capture_response",
            "_extract_response_text",
            "_take_screenshot",
            "_create_response_metadata",
            "_find_latest_sent_message",
            "_create_conversation_log"
          ],
          "docstring": "Service for handling Thea responses.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\thea\\responses\\__init__": {
      "file_path": "src\\services\\thea\\responses\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\thea\\config\\__init__": {
      "file_path": "src\\services\\thea\\config\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\thea\\commander\\thea_commander_manager": {
      "file_path": "src\\services\\thea\\commander\\thea_commander_manager.py",
      "functions": [
        "__init__",
        "initialize",
        "run_enhanced_consultation",
        "run_quick_analysis",
        "get_analysis_history",
        "_create_enhanced_conversation_log",
        "_display_analysis_summary",
        "_cleanup_resources"
      ],
      "classes": {
        "CommanderTheaManager": {
          "methods": [
            "__init__",
            "initialize",
            "run_enhanced_consultation",
            "run_quick_analysis",
            "get_analysis_history",
            "_create_enhanced_conversation_log",
            "_display_analysis_summary",
            "_cleanup_resources"
          ],
          "docstring": "Enhanced Commander THEA communication manager with advanced analysis capabilities.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\thea\\commander\\__init__": {
      "file_path": "src\\services\\thea\\commander\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\thea\\messaging\\thea_messaging_service": {
      "file_path": "src\\services\\thea\\messaging\\thea_messaging_service.py",
      "functions": [
        "__init__",
        "send_message",
        "_send_via_selenium",
        "_send_via_manual",
        "wait_for_response",
        "_wait_for_response_manual",
        "_save_message",
        "get_default_message",
        "load_message_template"
      ],
      "classes": {
        "MessageStatus": {
          "methods": [],
          "docstring": "Message sending status.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TheaMessagingService": {
          "methods": [
            "__init__",
            "send_message",
            "_send_via_selenium",
            "_send_via_manual",
            "wait_for_response",
            "_wait_for_response_manual",
            "_save_message",
            "get_default_message",
            "load_message_template"
          ],
          "docstring": "Handles message sending and receiving for Thea communication.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\onboarding_bridge": {
      "file_path": "src\\services\\messaging\\onboarding_bridge.py",
      "functions": [
        "hard_onboarding"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\thea\\config\\thea_config": {
      "file_path": "src\\services\\thea\\config\\thea_config.py",
      "functions": [
        "get_thea_config",
        "set_thea_config",
        "__post_init__",
        "from_env",
        "from_args",
        "to_dict"
      ],
      "classes": {
        "TheaConfig": {
          "methods": [
            "__post_init__",
            "from_env",
            "from_args",
            "to_dict"
          ],
          "docstring": "Configuration for Thea services.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\__init__": {
      "file_path": "src\\services\\messaging\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\broadcast": {
      "file_path": "src\\services\\messaging\\broadcast.py",
      "functions": [
        "broadcast"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\models": {
      "file_path": "src\\services\\messaging\\models.py",
      "functions": [
        "map_priority",
        "map_tag",
        "__init__"
      ],
      "classes": {
        "DeliveryMethod": {
          "methods": [],
          "docstring": null,
          "base_classes": [
            "str",
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "UnifiedMessageType": {
          "methods": [],
          "docstring": null,
          "base_classes": [
            "str",
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "UnifiedMessagePriority": {
          "methods": [],
          "docstring": null,
          "base_classes": [
            "str",
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "UnifiedMessageTag": {
          "methods": [],
          "docstring": null,
          "base_classes": [
            "str",
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RecipientType": {
          "methods": [],
          "docstring": null,
          "base_classes": [
            "str",
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SenderType": {
          "methods": [],
          "docstring": null,
          "base_classes": [
            "str",
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "UnifiedMessage": {
          "methods": [
            "__init__"
          ],
          "docstring": "Core message DTO",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\thea\\commander\\thea_commander_persona": {
      "file_path": "src\\services\\thea\\commander\\thea_commander_persona.py",
      "functions": [
        "__init__",
        "initialize_analysis_session",
        "simulate_processing_sequence",
        "generate_structured_assessment",
        "generate_swarm_aware_insights",
        "create_actionable_output",
        "_determine_analysis_depth",
        "_identify_assessment_areas",
        "_calculate_confidence_level",
        "_generate_rating",
        "_generate_metrics",
        "_calculate_success_probability",
        "_generate_recommendations",
        "_identify_risk_factors",
        "_generate_timeline_estimates",
        "_generate_agent_recommendations",
        "_analyze_swarm_coordination",
        "_analyze_system_integration"
      ],
      "classes": {
        "AnalysisDepth": {
          "methods": [],
          "docstring": "Analysis depth levels for Commander THEA.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ConfidenceLevel": {
          "methods": [],
          "docstring": "Confidence levels for assessments.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CommanderTheaPersona": {
          "methods": [
            "__init__",
            "initialize_analysis_session",
            "simulate_processing_sequence",
            "generate_structured_assessment",
            "generate_swarm_aware_insights",
            "create_actionable_output",
            "_determine_analysis_depth",
            "_identify_assessment_areas",
            "_calculate_confidence_level",
            "_generate_rating",
            "_generate_metrics",
            "_calculate_success_probability",
            "_generate_recommendations",
            "_identify_risk_factors",
            "_generate_timeline_estimates",
            "_generate_agent_recommendations",
            "_analyze_swarm_coordination",
            "_analyze_system_integration"
          ],
          "docstring": "Commander THEA persona with advanced analysis capabilities.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\service": {
      "file_path": "src\\services\\messaging\\service.py",
      "functions": [
        "__init__",
        "send",
        "broadcast",
        "coords"
      ],
      "classes": {
        "MessagingService": {
          "methods": [
            "__init__",
            "send",
            "broadcast",
            "coords"
          ],
          "docstring": "Thin orchestration facade; <200 LOC target.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\history": {
      "file_path": "src\\services\\messaging\\history.py",
      "functions": [
        "show"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\consolidated_messaging_service": {
      "file_path": "src\\services\\messaging\\consolidated_messaging_service.py",
      "functions": [
        "get_consolidated_messaging_service",
        "get_messaging_service",
        "__init__",
        "_load_coordinates",
        "_load_coordinates_fallback",
        "send_message",
        "_send_unified_message",
        "broadcast_message",
        "list_available_agents",
        "show_message_history",
        "get_system_status",
        "get_performance_metrics",
        "reset_performance_metrics",
        "handle_claim_task",
        "handle_complete_task",
        "handle_hard_onboarding",
        "handle_thea_communication",
        "run_cli_interface",
        "get_agent_workspaces_status",
        "launch_coordinate_capture",
        "show_current_coordinates",
        "start_agent_onboarding",
        "_create_onboarding_message",
        "_get_onboarding_coordinates",
        "_execute_onboarding_sequence",
        "_click_to_coordinates",
        "_paste_onboarding_message",
        "_paste_with_windows_clipboard",
        "_type_onboarding_message",
        "_get_agent_description",
        "_get_current_timestamp"
      ],
      "classes": {
        "ConsolidatedMessagingService": {
          "methods": [
            "__init__",
            "_load_coordinates",
            "_load_coordinates_fallback",
            "send_message",
            "_send_unified_message",
            "broadcast_message",
            "list_available_agents",
            "show_message_history",
            "get_system_status",
            "get_performance_metrics",
            "reset_performance_metrics",
            "handle_claim_task",
            "handle_complete_task",
            "handle_hard_onboarding",
            "handle_thea_communication",
            "run_cli_interface",
            "get_agent_workspaces_status",
            "launch_coordinate_capture",
            "show_current_coordinates",
            "start_agent_onboarding",
            "_create_onboarding_message",
            "_get_onboarding_coordinates",
            "_execute_onboarding_sequence",
            "_click_to_coordinates",
            "_paste_onboarding_message",
            "_paste_with_windows_clipboard",
            "_type_onboarding_message",
            "_get_agent_description",
            "_get_current_timestamp"
          ],
          "docstring": "Main consolidated messaging service coordinating all messaging components.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\delivery\\__init__": {
      "file_path": "src\\services\\messaging\\delivery\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\coordinates": {
      "file_path": "src\\services\\messaging\\coordinates.py",
      "functions": [
        "get_coordinate_loader",
        "list_agents",
        "get_agent_coordinates",
        "load_all_active_coords",
        "get_all_agents",
        "is_agent_active",
        "get_chat_coordinates"
      ],
      "classes": {
        "Mock": {
          "methods": [
            "get_all_agents",
            "is_agent_active",
            "get_chat_coordinates"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\task_handlers": {
      "file_path": "src\\services\\messaging\\task_handlers.py",
      "functions": [
        "claim_task",
        "handle_claim",
        "handle_complete"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\cli": {
      "file_path": "src\\services\\messaging\\cli.py",
      "functions": [
        "build_parser",
        "main"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\delivery\\fallback": {
      "file_path": "src\\services\\messaging\\delivery\\fallback.py",
      "functions": [
        "send_with_fallback",
        "broadcast"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\thea_handlers": {
      "file_path": "src\\services\\messaging\\thea_handlers.py",
      "functions": [
        "send_to_thea"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\delivery\\inbox_delivery": {
      "file_path": "src\\services\\messaging\\delivery\\inbox_delivery.py",
      "functions": [
        "send_message_inbox"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\models\\messaging_enums": {
      "file_path": "src\\services\\messaging\\models\\messaging_enums.py",
      "functions": [],
      "classes": {
        "DeliveryMethod": {
          "methods": [],
          "docstring": "Delivery methods for messages.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "UnifiedMessageType": {
          "methods": [],
          "docstring": "Types of messages in the unified messaging system.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "UnifiedMessagePriority": {
          "methods": [],
          "docstring": "Priority levels for messages.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MessageStatus": {
          "methods": [],
          "docstring": "Status of message delivery.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "UnifiedMessageTag": {
          "methods": [],
          "docstring": "Message tags for unified messaging.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RecipientType": {
          "methods": [],
          "docstring": "Types of message recipients.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\interfaces\\messaging_interfaces": {
      "file_path": "src\\services\\messaging\\interfaces\\messaging_interfaces.py",
      "functions": [
        "send_message",
        "is_available",
        "send_message",
        "is_available",
        "send_message",
        "is_available",
        "get_inbox_messages",
        "save_message",
        "get_message_history",
        "get_inbox_messages",
        "save_message",
        "get_message_history"
      ],
      "classes": {
        "MessageDeliveryProvider": {
          "methods": [
            "send_message",
            "is_available"
          ],
          "docstring": "Abstract base class for message delivery providers.",
          "base_classes": [
            "ABC"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PyAutoGUIDeliveryProvider": {
          "methods": [
            "send_message",
            "is_available"
          ],
          "docstring": "PyAutoGUI-based message delivery provider.",
          "base_classes": [
            "MessageDeliveryProvider"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "InboxDeliveryProvider": {
          "methods": [
            "send_message",
            "is_available"
          ],
          "docstring": "File-based inbox delivery provider.",
          "base_classes": [
            "MessageDeliveryProvider"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MessageHistoryProvider": {
          "methods": [
            "get_inbox_messages",
            "save_message",
            "get_message_history"
          ],
          "docstring": "Abstract base class for message history providers.",
          "base_classes": [
            "ABC"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "FileBasedMessageHistoryProvider": {
          "methods": [
            "get_inbox_messages",
            "save_message",
            "get_message_history"
          ],
          "docstring": "File-based message history provider.",
          "base_classes": [
            "MessageHistoryProvider"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\delivery\\pyautogui_delivery": {
      "file_path": "src\\services\\messaging\\delivery\\pyautogui_delivery.py",
      "functions": [
        "_lazy_import",
        "_focus_and_clear",
        "_paste_or_type",
        "deliver_message_pyautogui"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\providers\\inbox_delivery": {
      "file_path": "src\\services\\messaging\\providers\\inbox_delivery.py",
      "functions": [
        "__init__",
        "send_message",
        "_create_message_content",
        "_create_a2a_message_content",
        "_create_s2a_message_content",
        "_create_h2a_message_content",
        "_create_c2a_message_content",
        "_create_standard_message_content",
        "is_available",
        "get_inbox_messages",
        "save_message",
        "get_message_history",
        "_archive_message",
        "get_archived_messages"
      ],
      "classes": {
        "InboxMessageDelivery": {
          "methods": [
            "__init__",
            "send_message",
            "_create_message_content",
            "_create_a2a_message_content",
            "_create_s2a_message_content",
            "_create_h2a_message_content",
            "_create_c2a_message_content",
            "_create_standard_message_content",
            "is_available",
            "get_inbox_messages",
            "save_message",
            "get_message_history",
            "_archive_message",
            "get_archived_messages"
          ],
          "docstring": "File-based inbox message delivery provider.",
          "base_classes": [
            "InboxDeliveryProvider",
            "MessageHistoryProvider"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\models\\__init__": {
      "file_path": "src\\services\\messaging\\models\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\interfaces\\__init__": {
      "file_path": "src\\services\\messaging\\interfaces\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\models\\messaging_models": {
      "file_path": "src\\services\\messaging\\models\\messaging_models.py",
      "functions": [
        "to_dict",
        "from_dict",
        "from_tuple",
        "to_tuple",
        "to_dict",
        "to_dict",
        "update_delivery"
      ],
      "classes": {
        "UnifiedMessage": {
          "methods": [
            "to_dict",
            "from_dict"
          ],
          "docstring": "Unified message structure for all messaging operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentCoordinates": {
          "methods": [
            "from_tuple",
            "to_tuple"
          ],
          "docstring": "Agent coordinate information for PyAutoGUI delivery.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MessageHistory": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Message history entry.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MessagingMetrics": {
          "methods": [
            "to_dict",
            "update_delivery"
          ],
          "docstring": "Messaging system metrics.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\providers\\__init__": {
      "file_path": "src\\services\\messaging\\providers\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\providers\\fallback_provider\\__init__": {
      "file_path": "src\\services\\messaging\\providers\\fallback_provider\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\cli\\__init__": {
      "file_path": "src\\services\\messaging\\cli\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\providers\\pyautogui_delivery": {
      "file_path": "src\\services\\messaging\\providers\\pyautogui_delivery.py",
      "functions": [
        "__init__",
        "_load_coordinates",
        "send_message",
        "is_available",
        "_load_coordinates_from_json",
        "get_agent_coordinates",
        "list_available_agents",
        "add_agent_coordinates",
        "_save_coordinates",
        "send_with_fallback"
      ],
      "classes": {
        "PyAutoGUIMessageDelivery": {
          "methods": [
            "__init__",
            "_load_coordinates",
            "send_message",
            "is_available",
            "_load_coordinates_from_json",
            "get_agent_coordinates",
            "list_available_agents",
            "add_agent_coordinates",
            "_save_coordinates",
            "send_with_fallback"
          ],
          "docstring": "PyAutoGUI-based message delivery provider.",
          "base_classes": [
            "PyAutoGUIDeliveryProvider"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\broadcast_service\\__init__": {
      "file_path": "src\\services\\messaging\\broadcast_service\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\cli\\messaging_cli_clean": {
      "file_path": "src\\services\\messaging\\cli\\messaging_cli_clean.py",
      "functions": [
        "__init__",
        "create_parser",
        "send_message",
        "broadcast_message",
        "show_history",
        "run_cli"
      ],
      "classes": {
        "MessagingCLI": {
          "methods": [
            "__init__",
            "create_parser",
            "send_message",
            "broadcast_message",
            "show_history",
            "run_cli"
          ],
          "docstring": "Command-line interface for messaging system.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\cli\\perf_cli\\__init__": {
      "file_path": "src\\services\\messaging\\cli\\perf_cli\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\analytics\\__init__": {
      "file_path": "src\\services\\analytics\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\history_service\\__init__": {
      "file_path": "src\\services\\messaging\\history_service\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\services\\messaging\\cli\\messaging_cli": {
      "file_path": "src\\services\\messaging\\cli\\messaging_cli.py",
      "functions": [
        "__init__",
        "create_parser",
        "run_cli_interface",
        "_handle_send_message",
        "_handle_broadcast_message",
        "_handle_show_history",
        "_handle_show_status",
        "_handle_list_agents",
        "_handle_start_onboarding"
      ],
      "classes": {
        "MessagingCLI": {
          "methods": [
            "__init__",
            "create_parser",
            "run_cli_interface",
            "_handle_send_message",
            "_handle_broadcast_message",
            "_handle_show_history",
            "_handle_show_status",
            "_handle_list_agents",
            "_handle_start_onboarding"
          ],
          "docstring": "Command-line interface for messaging system.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\core\\__init__": {
      "file_path": "src\\core\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\core\\shared_utilities": {
      "file_path": "src\\core\\shared_utilities.py",
      "functions": [
        "create_cleanup_manager",
        "create_configuration_manager",
        "create_error_handler",
        "create_initialization_manager",
        "create_logging_manager",
        "create_result_manager",
        "create_status_manager",
        "create_validation_manager",
        "__init__",
        "initialize",
        "cleanup",
        "__init__",
        "initialize",
        "cleanup",
        "register_handler",
        "__init__",
        "initialize",
        "cleanup",
        "set_config",
        "get_config",
        "__init__",
        "initialize",
        "cleanup",
        "handle_error",
        "get_error_summary",
        "__init__",
        "initialize",
        "cleanup",
        "is_initialized",
        "get_init_time",
        "__init__",
        "initialize",
        "cleanup",
        "set_log_level",
        "log_info",
        "log_error",
        "__init__",
        "initialize",
        "cleanup",
        "add_result",
        "get_results",
        "get_last_result",
        "clear_results",
        "__init__",
        "initialize",
        "cleanup",
        "set_status",
        "get_status",
        "get_status_history",
        "__init__",
        "initialize",
        "cleanup",
        "add_validation_rule",
        "validate",
        "get_validation_results"
      ],
      "classes": {
        "BaseUtility": {
          "methods": [
            "__init__",
            "initialize",
            "cleanup"
          ],
          "docstring": "Base class for all shared utilities with common functionality.",
          "base_classes": [
            "ABC"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CleanupManager": {
          "methods": [
            "__init__",
            "initialize",
            "cleanup",
            "register_handler"
          ],
          "docstring": "Manages cleanup operations with LIFO handler execution.",
          "base_classes": [
            "BaseUtility"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ConfigurationManager": {
          "methods": [
            "__init__",
            "initialize",
            "cleanup",
            "set_config",
            "get_config"
          ],
          "docstring": "Manages configuration with key-value storage and defaults.",
          "base_classes": [
            "BaseUtility"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ErrorHandler": {
          "methods": [
            "__init__",
            "initialize",
            "cleanup",
            "handle_error",
            "get_error_summary"
          ],
          "docstring": "Handles errors with tracking, logging, and summary statistics.",
          "base_classes": [
            "BaseUtility"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "InitializationManager": {
          "methods": [
            "__init__",
            "initialize",
            "cleanup",
            "is_initialized",
            "get_init_time"
          ],
          "docstring": "Manages initialization with state and timestamp tracking.",
          "base_classes": [
            "BaseUtility"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "LoggingManager": {
          "methods": [
            "__init__",
            "initialize",
            "cleanup",
            "set_log_level",
            "log_info",
            "log_error"
          ],
          "docstring": "Manages logging configuration and operations.",
          "base_classes": [
            "BaseUtility"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ResultManager": {
          "methods": [
            "__init__",
            "initialize",
            "cleanup",
            "add_result",
            "get_results",
            "get_last_result",
            "clear_results"
          ],
          "docstring": "Manages results with type safety and list management.",
          "base_classes": [
            "BaseUtility",
            null
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "StatusManager": {
          "methods": [
            "__init__",
            "initialize",
            "cleanup",
            "set_status",
            "get_status",
            "get_status_history"
          ],
          "docstring": "Manages status transitions with history tracking.",
          "base_classes": [
            "BaseUtility"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ValidationManager": {
          "methods": [
            "__init__",
            "initialize",
            "cleanup",
            "add_validation_rule",
            "validate",
            "get_validation_results"
          ],
          "docstring": "Manages validation operations with rule-based validation.",
          "base_classes": [
            "BaseUtility"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\core\\error_handling_examples": {
      "file_path": "src\\core\\error_handling_examples.py",
      "functions": [
        "example_basic_error_handling",
        "example_circuit_breaker_pattern",
        "example_fallback_recovery",
        "example_error_metrics_monitoring",
        "example_custom_error_handler",
        "main",
        "__init__",
        "can_handle",
        "handle_error",
        "get_capabilities"
      ],
      "classes": {
        "DatabaseErrorHandler": {
          "methods": [
            "__init__",
            "can_handle",
            "handle_error",
            "get_capabilities"
          ],
          "docstring": "Custom error handler for database-specific errors.",
          "base_classes": [
            "ErrorHandler"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\core\\unified_core_system": {
      "file_path": "src\\core\\unified_core_system.py",
      "functions": [
        "get_unified_system",
        "initialize_core_system",
        "cleanup_core_system",
        "__init__",
        "initialize",
        "cleanup",
        "get_status",
        "set_status",
        "__init__",
        "initialize",
        "cleanup",
        "add_document",
        "search_documents",
        "__init__",
        "initialize",
        "cleanup",
        "register_agent",
        "coordinate_task",
        "__init__",
        "initialize",
        "cleanup",
        "register_health_check",
        "run_health_checks",
        "collect_metrics",
        "__init__",
        "initialize",
        "cleanup",
        "set_config",
        "get_config",
        "load_env_vars",
        "__init__",
        "_initialize_components",
        "initialize",
        "cleanup",
        "get_component",
        "get_system_status"
      ],
      "classes": {
        "SystemStatus": {
          "methods": [],
          "docstring": "System status enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SystemMetrics": {
          "methods": [],
          "docstring": "System metrics data structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "BaseCoreComponent": {
          "methods": [
            "__init__",
            "initialize",
            "cleanup",
            "get_status",
            "set_status"
          ],
          "docstring": "Base class for all core system components.",
          "base_classes": [
            "ABC"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DocumentationManager": {
          "methods": [
            "__init__",
            "initialize",
            "cleanup",
            "add_document",
            "search_documents"
          ],
          "docstring": "Unified documentation management system.",
          "base_classes": [
            "BaseCoreComponent"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentCoordinationManager": {
          "methods": [
            "__init__",
            "initialize",
            "cleanup",
            "register_agent",
            "coordinate_task"
          ],
          "docstring": "Unified agent coordination system.",
          "base_classes": [
            "BaseCoreComponent"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MonitoringSystem": {
          "methods": [
            "__init__",
            "initialize",
            "cleanup",
            "register_health_check",
            "run_health_checks",
            "collect_metrics"
          ],
          "docstring": "Unified monitoring and health check system.",
          "base_classes": [
            "BaseCoreComponent"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ConfigurationManager": {
          "methods": [
            "__init__",
            "initialize",
            "cleanup",
            "set_config",
            "get_config",
            "load_env_vars"
          ],
          "docstring": "Unified configuration management system.",
          "base_classes": [
            "BaseCoreComponent"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "UnifiedCoreSystem": {
          "methods": [
            "__init__",
            "_initialize_components",
            "initialize",
            "cleanup",
            "get_component",
            "get_system_status"
          ],
          "docstring": "Main unified core system consolidating all core functionality.\n\nThis system replaces 50+ broken/empty files with a single,\nwell-structured, working implementation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\core\\consolidation\\utility_consolidation\\__init__": {
      "file_path": "src\\core\\consolidation\\utility_consolidation\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\core\\consolidation\\base": {
      "file_path": "src\\core\\consolidation\\base.py",
      "functions": [
        "consolidate_directories",
        "_consolidate_directory",
        "_get_consolidated_path",
        "_should_consolidate_file",
        "_consolidate_file"
      ],
      "classes": {
        "ConsolidationBase": {
          "methods": [
            "consolidate_directories",
            "_consolidate_directory",
            "_get_consolidated_path",
            "_should_consolidate_file",
            "_consolidate_file"
          ],
          "docstring": "Reusable helpers for consolidation workflows.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\core\\constants\\fsm": {
      "file_path": "src\\core\\constants\\fsm.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\core\\constants\\fsm_models": {
      "file_path": "src\\core\\constants\\fsm_models.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\core\\constants\\__init__": {
      "file_path": "src\\core\\constants\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\core\\constants\\fsm\\__init__": {
      "file_path": "src\\core\\constants\\fsm\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\core\\coordination\\__init__": {
      "file_path": "src\\core\\coordination\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\core\\coordination\\swarm\\__init__": {
      "file_path": "src\\core\\coordination\\swarm\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\core\\coordination\\swarm\\engines\\__init__": {
      "file_path": "src\\core\\coordination\\swarm\\engines\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\core\\coordination\\swarm\\orchestrators\\__init__": {
      "file_path": "src\\core\\coordination\\swarm\\orchestrators\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\core\\data_optimization\\__init__": {
      "file_path": "src\\core\\data_optimization\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\core\\import_system\\__init__": {
      "file_path": "src\\core\\import_system\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\core\\coordination\\swarm\\orchestrators\\swarm_coordination_orchestrator": {
      "file_path": "src\\core\\coordination\\swarm\\orchestrators\\swarm_coordination_orchestrator.py",
      "functions": [
        "__init__",
        "start_coordination",
        "stop_coordination",
        "_create_error_result",
        "get_coordination_summary",
        "get_performance_metrics",
        "reset_metrics",
        "optimize_coordination",
        "find_best_agent",
        "calculate_efficiency",
        "get_insights"
      ],
      "classes": {
        "SwarmCoordinationEnhancer": {
          "methods": [
            "__init__",
            "start_coordination",
            "stop_coordination",
            "_create_error_result",
            "get_coordination_summary",
            "get_performance_metrics",
            "reset_metrics"
          ],
          "docstring": "Main orchestrator for swarm coordination enhancement system.\n\n    Provides unified interface to all coordination capabilities while maintaining V2\n    compliance through modular architecture.\n\nEXAMPLE USAGE:\n==============\n\n# Import the core component\nfrom src.core.coordination.swarm.orchestrators.swarm_coordination_orchestrator import Swarm_Coordination_Orchestrator\n\n# Initialize with configuration\nconfig = {\n    \"setting1\": \"value1\",\n    \"setting2\": \"value2\"\n}\n\ncomponent = Swarm_Coordination_Orchestrator(config)\n\n# Execute primary functionality\nresult = component.process_data(input_data)\nprint(f\"Processing result: {result}\")\n\n# Advanced usage with error handling\ntry:\n    advanced_result = component.advanced_operation(data, options={\"optimize\": True})\n    print(f\"Advanced operation completed: {advanced_result}\")\nexcept ProcessingError as e:\n    print(f\"Operation failed: {e}\")\n    # Implement recovery logic\n\n    ",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CoordinationUtils": {
          "methods": [
            "optimize_coordination"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "AgentMatchingUtils": {
          "methods": [
            "find_best_agent"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "PerformanceMetricsUtils": {
          "methods": [
            "calculate_efficiency"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "VectorInsightsUtils": {
          "methods": [
            "get_insights"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\core\\ssot\\__init__": {
      "file_path": "src\\core\\ssot\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\core\\ssot\\unified_ssot\\__init__": {
      "file_path": "src\\core\\ssot\\unified_ssot\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\core\\ssot\\unified_ssot\\execution\\__init__": {
      "file_path": "src\\core\\ssot\\unified_ssot\\execution\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\core\\utils\\__init__": {
      "file_path": "src\\core\\utils\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\core\\ssot\\unified_ssot\\validators\\__init__": {
      "file_path": "src\\core\\ssot\\unified_ssot\\validators\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\core\\quality\\testing_coordinator": {
      "file_path": "src\\core\\quality\\testing_coordinator.py",
      "functions": [
        "main",
        "__init__",
        "run_comprehensive_test_suite",
        "_run_unit_tests",
        "_run_integration_tests",
        "_run_functional_tests",
        "_run_performance_tests",
        "_run_security_tests",
        "_run_regression_tests",
        "_parse_pytest_output",
        "_extract_coverage_from_output",
        "_generate_test_report",
        "_generate_test_recommendations"
      ],
      "classes": {
        "TestType": {
          "methods": [],
          "docstring": "Test type enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestResult": {
          "methods": [],
          "docstring": "Test result data structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestSuite": {
          "methods": [],
          "docstring": "Test suite data structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestingCoordinator": {
          "methods": [
            "__init__",
            "run_comprehensive_test_suite",
            "_run_unit_tests",
            "_run_integration_tests",
            "_run_functional_tests",
            "_run_performance_tests",
            "_run_security_tests",
            "_run_regression_tests",
            "_parse_pytest_output",
            "_extract_coverage_from_output",
            "_generate_test_report",
            "_generate_test_recommendations"
          ],
          "docstring": "Comprehensive testing coordination and validation system.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\core\\semantic\\utils": {
      "file_path": "src\\core\\semantic\\utils.py",
      "functions": [
        "flatten_json",
        "json_to_text",
        "_walk"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\core\\semantic\\__init__": {
      "file_path": "src\\core\\semantic\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\core\\semantic\\status_cli": {
      "file_path": "src\\core\\semantic\\status_cli.py",
      "functions": [
        "load_cfg",
        "main"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\core\\semantic\\status_index": {
      "file_path": "src\\core\\semantic\\status_index.py",
      "functions": [
        "__init__",
        "ingest_dir",
        "upsert_status",
        "similar"
      ],
      "classes": {
        "StatusIndex": {
          "methods": [
            "__init__",
            "ingest_dir",
            "upsert_status",
            "similar"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\core\\performance\\__init__": {
      "file_path": "src\\core\\performance\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\core\\performance\\models\\__init__": {
      "file_path": "src\\core\\performance\\models\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\core\\deployment\\models\\__init__": {
      "file_path": "src\\core\\deployment\\models\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\core\\deployment\\models\\factory_functions": {
      "file_path": "src\\core\\deployment\\models\\factory_functions.py",
      "functions": [
        "create_default_config",
        "create_deployment_status",
        "create_deployment_metrics",
        "create_coordinator_config",
        "create_agent_domain_mapping",
        "validate_deployment_config",
        "create_deployment_summary"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\core\\messaging\\__init__": {
      "file_path": "src\\core\\messaging\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\core\\messaging\\registry_loader": {
      "file_path": "src\\core\\messaging\\registry_loader.py",
      "functions": [
        "load_registry",
        "resolve",
        "iter_specs",
        "get_system_by_id",
        "get_critical_systems",
        "get_systems_by_category",
        "__str__"
      ],
      "classes": {
        "SystemSpec": {
          "methods": [
            "__str__"
          ],
          "docstring": "Specification for a messaging system.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\core\\backup\\alerts\\__init__": {
      "file_path": "src\\core\\backup\\alerts\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\core\\messaging\\health_check": {
      "file_path": "src\\core\\messaging\\health_check.py",
      "functions": [
        "check_imports",
        "check_critical_systems",
        "assert_all_importable",
        "get_health_summary",
        "print_health_report"
      ],
      "classes": {
        "HealthCheckResult": {
          "methods": [],
          "docstring": "Result of a health check for a single system.",
          "base_classes": [
            "NamedTuple"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\core\\backup\\__init__": {
      "file_path": "src\\core\\backup\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\core\\backup\\database\\__init__": {
      "file_path": "src\\core\\backup\\database\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\application\\use_cases\\assign_task_uc": {
      "file_path": "src\\application\\use_cases\\assign_task_uc.py",
      "functions": [
        "__init__",
        "execute"
      ],
      "classes": {
        "AssignTaskRequest": {
          "methods": [],
          "docstring": "Request DTO for task assignment.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AssignTaskResponse": {
          "methods": [],
          "docstring": "Response DTO for task assignment.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AssignTaskUseCase": {
          "methods": [
            "__init__",
            "execute"
          ],
          "docstring": "Use case for assigning tasks to agents.\n\nThis use case orchestrates the domain objects to fulfill\nthe business requirement of task assignment.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\application\\use_cases\\complete_task_uc": {
      "file_path": "src\\application\\use_cases\\complete_task_uc.py",
      "functions": [
        "__init__",
        "execute"
      ],
      "classes": {
        "CompleteTaskRequest": {
          "methods": [],
          "docstring": "Request DTO for task completion.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CompleteTaskResponse": {
          "methods": [],
          "docstring": "Response DTO for task completion.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CompleteTaskUseCase": {
          "methods": [
            "__init__",
            "execute"
          ],
          "docstring": "Use case for completing tasks.\n\nThis use case handles the business logic of marking tasks as complete\nand updating the relevant entities.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\core\\backup\\models\\__init__": {
      "file_path": "src\\core\\backup\\models\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\application\\__init__": {
      "file_path": "src\\application\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\application\\use_cases\\__init__": {
      "file_path": "src\\application\\use_cases\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\architecture\\__init__": {
      "file_path": "src\\architecture\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\architecture\\design_patterns": {
      "file_path": "src\\architecture\\design_patterns.py",
      "functions": [
        "main",
        "__init__",
        "_initialize_patterns",
        "get_pattern",
        "list_patterns",
        "get_pattern_by_type",
        "apply_pattern",
        "get_pattern_recommendations"
      ],
      "classes": {
        "PatternType": {
          "methods": [],
          "docstring": "Design pattern type enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DesignPattern": {
          "methods": [],
          "docstring": "Design pattern data structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "UnifiedDesignPatterns": {
          "methods": [
            "__init__",
            "_initialize_patterns",
            "get_pattern",
            "list_patterns",
            "get_pattern_by_type",
            "apply_pattern",
            "get_pattern_recommendations"
          ],
          "docstring": "Unified Design Patterns - Essential patterns only.\n\nConsolidates all design patterns into a single, simple module\nfollowing KISS principles.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\architecture\\system_integration": {
      "file_path": "src\\architecture\\system_integration.py",
      "functions": [
        "main",
        "__init__",
        "register_endpoint",
        "check_endpoint_health",
        "get_integration_status",
        "integrate_systems"
      ],
      "classes": {
        "IntegrationType": {
          "methods": [],
          "docstring": "Integration type enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "IntegrationStatus": {
          "methods": [],
          "docstring": "Integration status enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "IntegrationEndpoint": {
          "methods": [],
          "docstring": "Integration endpoint data structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "UnifiedSystemIntegration": {
          "methods": [
            "__init__",
            "register_endpoint",
            "check_endpoint_health",
            "get_integration_status",
            "integrate_systems"
          ],
          "docstring": "Unified System Integration - Simple integration management.\n\nConsolidates all integration patterns into a single, simple,\nand maintainable design following KISS principles.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\architecture\\unified_architecture_core": {
      "file_path": "src\\architecture\\unified_architecture_core.py",
      "functions": [
        "main",
        "__init__",
        "register_component",
        "get_component",
        "list_components",
        "update_component_metrics",
        "get_architecture_health",
        "consolidate_architecture"
      ],
      "classes": {
        "ArchitectureType": {
          "methods": [],
          "docstring": "Architecture type enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ComponentStatus": {
          "methods": [],
          "docstring": "Component status enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ArchitectureComponent": {
          "methods": [],
          "docstring": "Unified architecture component data structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "UnifiedArchitectureCore": {
          "methods": [
            "__init__",
            "register_component",
            "get_component",
            "list_components",
            "update_component_metrics",
            "get_architecture_health",
            "consolidate_architecture"
          ],
          "docstring": "Unified Architecture Core - Single source of truth for all architecture.\n\nConsolidates fragmented architecture systems into a single, simple,\nand maintainable design following KISS principles.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\automation\\__init__": {
      "file_path": "src\\automation\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\automation\\ui_onboarding": {
      "file_path": "src\\automation\\ui_onboarding.py",
      "functions": [
        "from_any",
        "__init__",
        "_sleep",
        "_attempt",
        "_click",
        "_hotkey",
        "_type",
        "_press",
        "perform",
        "_get",
        "_do",
        "_do",
        "_do",
        "_do",
        "_do"
      ],
      "classes": {
        "UIUnavailableError": {
          "methods": [],
          "docstring": null,
          "base_classes": [
            "RuntimeError"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "OnboardCoords": {
          "methods": [
            "from_any"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "UIOnboarder": {
          "methods": [
            "__init__",
            "_sleep",
            "_attempt",
            "_click",
            "_hotkey",
            "_type",
            "_press",
            "perform"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\config\\ssot": {
      "file_path": "src\\config\\ssot.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\config\\__init__": {
      "file_path": "src\\config\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\config\\settings": {
      "file_path": "src\\config\\settings.py",
      "functions": [
        "build_redis_url",
        "build_amqp_url"
      ],
      "classes": {
        "Settings": {
          "methods": [
            "build_redis_url",
            "build_amqp_url"
          ],
          "docstring": null,
          "base_classes": [
            "BaseSettings"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "Config": {
          "methods": [],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\discord_commander\\guards": {
      "file_path": "src\\discord_commander\\guards.py",
      "functions": [
        "check_context"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\discord_commander\\agent_communication_engine_refactored": {
      "file_path": "src\\discord_commander\\agent_communication_engine_refactored.py",
      "functions": [
        "create_agent_communication_engine",
        "__init__"
      ],
      "classes": {
        "AgentCommunicationEngine": {
          "methods": [
            "__init__"
          ],
          "docstring": "Unified agent communication engine with core and operations functionality.",
          "base_classes": [
            "AgentCommunicationEngineCore",
            "AgentCommunicationEngineOperations"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\discord_commander\\rate_limits": {
      "file_path": "src\\discord_commander\\rate_limits.py",
      "functions": [
        "__init__",
        "release"
      ],
      "classes": {
        "RateLimiter": {
          "methods": [
            "__init__",
            "release"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\discord_commander\\__init__": {
      "file_path": "src\\discord_commander\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\discord_commander\\agent_communication_engine_base": {
      "file_path": "src\\discord_commander\\agent_communication_engine_base.py",
      "functions": [
        "__init__",
        "_setup_logger",
        "_get_unified_utility",
        "validate_agent_name",
        "format_timestamp",
        "create_message_metadata"
      ],
      "classes": {
        "AgentCommunicationEngineBase": {
          "methods": [
            "__init__",
            "_setup_logger",
            "_get_unified_utility",
            "validate_agent_name",
            "format_timestamp",
            "create_message_metadata"
          ],
          "docstring": "Base class for agent communication operations",
          "base_classes": [
            "ABC"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\discord_commander\\discord_commander": {
      "file_path": "src\\discord_commander\\discord_commander.py",
      "functions": [
        "get_discord_commander",
        "__init__",
        "_find_new_devlogs",
        "_parse_devlog_filename",
        "_extract_devlog_summary",
        "stop_monitoring"
      ],
      "classes": {
        "DiscordCommander": {
          "methods": [
            "__init__",
            "_find_new_devlogs",
            "_parse_devlog_filename",
            "_extract_devlog_summary",
            "stop_monitoring"
          ],
          "docstring": "Main Discord commander for V2_SWARM DevLog integration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\discord_commander\\discord_commander_models": {
      "file_path": "src\\discord_commander\\discord_commander_models.py",
      "functions": [
        "create_command_result",
        "__post_init__",
        "__post_init__",
        "validate",
        "to_dict"
      ],
      "classes": {
        "CommandResult": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Result of a Discord commander command execution.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DiscordMessage": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Discord message structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentCommand": {
          "methods": [
            "validate"
          ],
          "docstring": "Agent command structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CommunicationStats": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Communication statistics.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\discord_commander\\structured_logging": {
      "file_path": "src\\discord_commander\\structured_logging.py",
      "functions": [
        "configure_logging",
        "format"
      ],
      "classes": {
        "JsonFormatter": {
          "methods": [
            "format"
          ],
          "docstring": null,
          "base_classes": [
            "logging.Formatter"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\discord_commander\\embeds": {
      "file_path": "src\\discord_commander\\embeds.py",
      "functions": [
        "create_embed_builder",
        "create_embed_manager",
        "create_base_embed",
        "add_footer",
        "create_prompt_embed",
        "update_prompt_embed_success",
        "update_prompt_embed_error",
        "create_direct_agent_embed",
        "create_urgent_broadcast_embed",
        "create_status_embed",
        "update_status_embed",
        "create_swarm_embed",
        "update_swarm_embed_success",
        "update_swarm_embed_error",
        "update_urgent_embed_success",
        "update_urgent_embed_error",
        "update_direct_embed_success",
        "update_direct_embed_error",
        "create_agents_embed",
        "create_help_embed",
        "create_ping_embed",
        "create_error_embed",
        "create_rate_limit_embed",
        "create_too_many_commands_embed",
        "__init__",
        "create_response_embed"
      ],
      "classes": {
        "EmbedBuilder": {
          "methods": [
            "create_base_embed",
            "add_footer",
            "create_prompt_embed",
            "update_prompt_embed_success",
            "update_prompt_embed_error",
            "create_direct_agent_embed",
            "create_urgent_broadcast_embed",
            "create_status_embed",
            "update_status_embed",
            "create_swarm_embed",
            "update_swarm_embed_success",
            "update_swarm_embed_error",
            "update_urgent_embed_success",
            "update_urgent_embed_error",
            "update_direct_embed_success",
            "update_direct_embed_error",
            "create_agents_embed",
            "create_help_embed",
            "create_ping_embed",
            "create_error_embed",
            "create_rate_limit_embed",
            "create_too_many_commands_embed"
          ],
          "docstring": "Builder for Discord embeds with standardized formatting.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EmbedManager": {
          "methods": [
            "__init__",
            "create_response_embed"
          ],
          "docstring": "Manager for Discord embed operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\discord_commander\\handlers_agents": {
      "file_path": "src\\discord_commander\\handlers_agents.py",
      "functions": [
        "create_agent_command_handlers",
        "__init__",
        "get_active_command_count",
        "get_agent_command_stats"
      ],
      "classes": {
        "AgentCommandHandlers": {
          "methods": [
            "__init__",
            "get_active_command_count",
            "get_agent_command_stats"
          ],
          "docstring": "Handles agent-specific commands (prompt, status).",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\discord_commander\\security_policies": {
      "file_path": "src\\discord_commander\\security_policies.py",
      "functions": [
        "_ids",
        "allow_guild",
        "allow_channel",
        "allow_user"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\discord_commander\\agent_communication_engine_core": {
      "file_path": "src\\discord_commander\\agent_communication_engine_core.py",
      "functions": [
        "_create_inbox_message_content",
        "is_valid_agent",
        "get_all_agent_names"
      ],
      "classes": {
        "AgentCommunicationEngineCore": {
          "methods": [
            "_create_inbox_message_content",
            "is_valid_agent",
            "get_all_agent_names"
          ],
          "docstring": "Core agent communication operations for Discord commander",
          "base_classes": [
            "AgentCommunicationEngineBase"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\discord_commander\\discord_webhook_integration": {
      "file_path": "src\\discord_commander\\discord_webhook_integration.py",
      "functions": [
        "__init__",
        "_load_webhook_url",
        "send_devlog_notification",
        "send_agent_status_notification",
        "send_swarm_coordination_notification",
        "_create_devlog_embed",
        "_create_agent_status_embed",
        "_create_coordination_embed",
        "_initialize_coordination_tracking",
        "_load_coordination_data",
        "_save_coordination_data",
        "send_contract_assignment_notification",
        "send_mission_progress_notification",
        "send_error_recovery_notification",
        "send_coordination_event_notification",
        "_create_contract_assignment_embed",
        "_create_mission_progress_embed",
        "_create_error_recovery_embed",
        "_create_coordination_event_embed",
        "get_coordination_status",
        "update_agent_status_cache",
        "clear_coordination_cache",
        "test_webhook_connection"
      ],
      "classes": {
        "DiscordWebhookIntegration": {
          "methods": [
            "__init__",
            "_load_webhook_url",
            "send_devlog_notification",
            "send_agent_status_notification",
            "send_swarm_coordination_notification",
            "_create_devlog_embed",
            "_create_agent_status_embed",
            "_create_coordination_embed",
            "_initialize_coordination_tracking",
            "_load_coordination_data",
            "_save_coordination_data",
            "send_contract_assignment_notification",
            "send_mission_progress_notification",
            "send_error_recovery_notification",
            "send_coordination_event_notification",
            "_create_contract_assignment_embed",
            "_create_mission_progress_embed",
            "_create_error_recovery_embed",
            "_create_coordination_event_embed",
            "get_coordination_status",
            "update_agent_status_cache",
            "clear_coordination_cache",
            "test_webhook_connection"
          ],
          "docstring": "Enhanced Discord webhook integration for swarm coordination.\n\nFeatures:\n- Multiple webhook types with proper swarm avatars\n- Enhanced agent coordination messaging\n- Real-time status and mission progress tracking\n- Contract assignment and completion notifications\n- Error handling and recovery notifications",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\discord_commander\\agent_communication_engine_operations": {
      "file_path": "src\\discord_commander\\agent_communication_engine_operations.py",
      "functions": [
        "get_agent_status_file_path"
      ],
      "classes": {
        "AgentCommunicationEngineOperations": {
          "methods": [
            "get_agent_status_file_path"
          ],
          "docstring": "Extended agent communication operations for Discord commander",
          "base_classes": [
            "AgentCommunicationEngineBase"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\core\\backup_disaster_recovery\\__init__": {
      "file_path": "src\\core\\backup_disaster_recovery\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\discord_commander\\discord_agent_bot": {
      "file_path": "src\\discord_commander\\discord_agent_bot.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\discord_commander\\command_router": {
      "file_path": "src\\discord_commander\\command_router.py",
      "functions": [
        "create_command_router",
        "__init__",
        "parse_command",
        "validate_command",
        "get_command_metadata",
        "get_all_commands",
        "generate_command_id",
        "_is_valid_agent_format",
        "sanitize_content",
        "create_command_context"
      ],
      "classes": {
        "CommandRouter": {
          "methods": [
            "__init__",
            "parse_command",
            "validate_command",
            "get_command_metadata",
            "get_all_commands",
            "generate_command_id",
            "_is_valid_agent_format",
            "sanitize_content",
            "create_command_context"
          ],
          "docstring": "Routes Discord commands to appropriate handlers.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\discord_commander\\handlers_swarm": {
      "file_path": "src\\discord_commander\\handlers_swarm.py",
      "functions": [
        "create_swarm_command_handlers",
        "__init__",
        "get_swarm_agent_list",
        "get_swarm_stats",
        "get_active_broadcast_count",
        "get_broadcast_stats"
      ],
      "classes": {
        "SwarmCommandHandlers": {
          "methods": [
            "__init__",
            "get_swarm_agent_list",
            "get_swarm_stats",
            "get_active_broadcast_count",
            "get_broadcast_stats"
          ],
          "docstring": "Handles swarm-wide commands (broadcast, coordination).",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\discord_commander\\enhanced_discord_integration": {
      "file_path": "src\\discord_commander\\enhanced_discord_integration.py",
      "functions": [
        "get_enhanced_discord_commander",
        "__init__",
        "_load_channel_config",
        "_create_default_channels",
        "_save_channel_config",
        "set_channel_webhook",
        "get_channel_config",
        "send_to_channel",
        "_send_via_webhook",
        "_send_via_channel_id",
        "test_channel_webhook",
        "get_all_channels",
        "get_agent_channel",
        "__init__",
        "create_agent_notification_embed",
        "__init__",
        "_find_new_devlogs",
        "_parse_devlog_filename",
        "_extract_devlog_summary",
        "stop_monitoring",
        "__init__",
        "configure_channel_webhook",
        "get_channel_info"
      ],
      "classes": {
        "AgentChannel": {
          "methods": [],
          "docstring": "Enumeration of agent channels.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DiscordChannelConfig": {
          "methods": [],
          "docstring": "Configuration for a Discord channel.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DiscordMessage": {
          "methods": [],
          "docstring": "Discord message structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentNotification": {
          "methods": [],
          "docstring": "Agent notification structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EnhancedDiscordWebhookManager": {
          "methods": [
            "__init__",
            "_load_channel_config",
            "_create_default_channels",
            "_save_channel_config",
            "set_channel_webhook",
            "get_channel_config",
            "send_to_channel",
            "_send_via_webhook",
            "_send_via_channel_id",
            "test_channel_webhook",
            "get_all_channels",
            "get_agent_channel"
          ],
          "docstring": "Enhanced webhook manager with multi-channel support.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentChannelCoordinator": {
          "methods": [
            "__init__",
            "create_agent_notification_embed"
          ],
          "docstring": "Coordinates agent-specific channel communications.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EnhancedDevLogMonitor": {
          "methods": [
            "__init__",
            "_find_new_devlogs",
            "_parse_devlog_filename",
            "_extract_devlog_summary",
            "stop_monitoring"
          ],
          "docstring": "Enhanced DevLog monitor with agent-specific notifications.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EnhancedDiscordCommander": {
          "methods": [
            "__init__",
            "configure_channel_webhook",
            "get_channel_info"
          ],
          "docstring": "Enhanced Discord commander with individual agent channels.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DevlogEntry": {
          "methods": [],
          "docstring": "Devlog entry structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\discord_commander\\discord_agent_bot_clean": {
      "file_path": "src\\discord_commander\\discord_agent_bot_clean.py",
      "functions": [
        "get_discord_bot_manager",
        "__init__",
        "_load_config",
        "_load_agent_map",
        "get_command_stats",
        "__init__",
        "create_bot",
        "save_config",
        "load_config"
      ],
      "classes": {
        "DiscordAgentBot": {
          "methods": [
            "__init__",
            "_load_config",
            "_load_agent_map",
            "get_command_stats"
          ],
          "docstring": "Streamlined Discord bot for V2_SWARM agent coordination.",
          "base_classes": [
            "commands.Bot"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DiscordAgentBotManager": {
          "methods": [
            "__init__",
            "create_bot",
            "save_config",
            "load_config"
          ],
          "docstring": "Manager for Discord Agent Bot operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\discord_commander\\discord_agent_bot_backup": {
      "file_path": "src\\discord_commander\\discord_agent_bot_backup.py",
      "functions": [
        "get_discord_bot_manager",
        "get_discord_bot_manager",
        "__init__",
        "_load_config",
        "_load_agent_map",
        "get_command_stats",
        "get_command_stats",
        "__init__",
        "create_bot",
        "save_config",
        "load_config"
      ],
      "classes": {
        "DiscordAgentBot": {
          "methods": [
            "__init__",
            "_load_config",
            "_load_agent_map",
            "get_command_stats"
          ],
          "docstring": "Discord bot for interactive agent prompting and coordination.",
          "base_classes": [
            "commands.Bot"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DiscordAgentBotManager": {
          "methods": [
            "__init__",
            "create_bot",
            "save_config",
            "load_config"
          ],
          "docstring": "Manager for Discord Agent Bot operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\discord_commander\\handlers_agent_summary": {
      "file_path": "src\\discord_commander\\handlers_agent_summary.py",
      "functions": [
        "__init__"
      ],
      "classes": {
        "AgentSummary": {
          "methods": [
            "__init__"
          ],
          "docstring": "Discord cog for agent summary commands",
          "base_classes": [
            "commands.Cog"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\discord_commander\\discord_command_handlers": {
      "file_path": "src\\discord_commander\\discord_command_handlers.py",
      "functions": [
        "__init__"
      ],
      "classes": {
        "DiscordCommandHandlers": {
          "methods": [
            "__init__"
          ],
          "docstring": "Command processing and handling for Discord Agent Bot.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\discord_commander\\discord_dynamic_agent_commands": {
      "file_path": "src\\discord_commander\\discord_dynamic_agent_commands.py",
      "functions": [
        "_load_alias_map",
        "_mk_ok_embed",
        "_mk_err_embed"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\discord_commander\\discord_security_policies": {
      "file_path": "src\\discord_commander\\discord_security_policies.py",
      "functions": [
        "__init__",
        "_load_security_config",
        "is_channel_allowed",
        "is_guild_allowed",
        "is_user_allowed",
        "is_admin_user",
        "check_security_policies",
        "get_security_status",
        "update_security_config",
        "_save_security_config",
        "add_allowed_channel",
        "remove_allowed_channel",
        "add_admin_user",
        "remove_admin_user",
        "get_security_help"
      ],
      "classes": {
        "DiscordSecurityManager": {
          "methods": [
            "__init__",
            "_load_security_config",
            "is_channel_allowed",
            "is_guild_allowed",
            "is_user_allowed",
            "is_admin_user",
            "check_security_policies",
            "get_security_status",
            "update_security_config",
            "_save_security_config",
            "add_allowed_channel",
            "remove_allowed_channel",
            "add_admin_user",
            "remove_admin_user",
            "get_security_help"
          ],
          "docstring": "Security policies and access control for Discord Agent Bot.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\discord_commander\\messaging_gateway\\__init__": {
      "file_path": "src\\discord_commander\\messaging_gateway\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\discord_commander\\discord_agent_bot_core": {
      "file_path": "src\\discord_commander\\discord_agent_bot_core.py",
      "functions": [
        "__init__",
        "_initialize_messaging_gateway",
        "_load_config",
        "_load_agent_coordinates",
        "get_command_stats",
        "_register_basic_fallback_commands"
      ],
      "classes": {
        "DiscordAgentBot": {
          "methods": [
            "__init__",
            "_initialize_messaging_gateway",
            "_load_config",
            "_load_agent_coordinates",
            "get_command_stats",
            "_register_basic_fallback_commands"
          ],
          "docstring": "Streamlined Discord bot for V2_SWARM agent coordination.",
          "base_classes": [
            "commands.Bot"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\discord_commander\\discord_rate_limiting": {
      "file_path": "src\\discord_commander\\discord_rate_limiting.py",
      "functions": [
        "__init__",
        "release",
        "_fallback_acquire",
        "get_rate_limit_status",
        "reset_user_cooldown",
        "reset_all_cooldowns"
      ],
      "classes": {
        "DiscordRateLimiter": {
          "methods": [
            "__init__",
            "release",
            "_fallback_acquire",
            "get_rate_limit_status",
            "reset_user_cooldown",
            "reset_all_cooldowns"
          ],
          "docstring": "Rate limiting and throttling for Discord Agent Bot.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\discord_commander\\webhook\\__init__": {
      "file_path": "src\\discord_commander\\webhook\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\discord_commander\\communication_engine\\__init__": {
      "file_path": "src\\discord_commander\\communication_engine\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\domain\\domain_events": {
      "file_path": "src\\domain\\domain_events.py",
      "functions": [
        "event_type",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict"
      ],
      "classes": {
        "DomainEvent": {
          "methods": [
            "event_type",
            "to_dict"
          ],
          "docstring": "Base class for all domain events.\n\nDomain events are immutable and contain all necessary information\nabout what happened in the domain.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TaskCreated": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Event raised when a new task is created.",
          "base_classes": [
            "DomainEvent"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TaskAssigned": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Event raised when a task is assigned to an agent.",
          "base_classes": [
            "DomainEvent"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TaskCompleted": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Event raised when a task is completed.",
          "base_classes": [
            "DomainEvent"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentActivated": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Event raised when an agent becomes active.",
          "base_classes": [
            "DomainEvent"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentDeactivated": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Event raised when an agent becomes inactive.",
          "base_classes": [
            "DomainEvent"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\domain\\__init__": {
      "file_path": "src\\domain\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\discord_commander\\commands\\agent_shortcuts": {
      "file_path": "src\\discord_commander\\commands\\agent_shortcuts.py",
      "functions": [
        "get_shortcut_handler",
        "handle_agent_command",
        "handle_broadcast",
        "register_discord_commands",
        "__init__",
        "_setup_messaging_service",
        "_send_to_agent",
        "handle_agent_command",
        "handle_broadcast",
        "get_available_agents"
      ],
      "classes": {
        "AgentShortcutHandler": {
          "methods": [
            "__init__",
            "_setup_messaging_service",
            "_send_to_agent",
            "handle_agent_command",
            "handle_broadcast",
            "get_available_agents"
          ],
          "docstring": "Handler for Discord agent shortcut commands.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\domain\\entities\\task": {
      "file_path": "src\\domain\\entities\\task.py",
      "functions": [
        "__post_init__",
        "is_assigned",
        "is_completed",
        "is_pending",
        "assign_to",
        "unassign",
        "complete",
        "can_be_assigned_to"
      ],
      "classes": {
        "Task": {
          "methods": [
            "__post_init__",
            "is_assigned",
            "is_completed",
            "is_pending",
            "assign_to",
            "unassign",
            "complete",
            "can_be_assigned_to"
          ],
          "docstring": "Task entity representing work to be done by agents.\n\nBusiness Rules:\n- Tasks must have a unique identifier\n- Tasks can only be assigned to one agent at a time\n- Completed tasks cannot be reassigned\n- Tasks track their lifecycle (created, assigned, completed)",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\domain\\entities\\agent": {
      "file_path": "src\\domain\\entities\\agent.py",
      "functions": [
        "__post_init__",
        "current_task_count",
        "can_accept_more_tasks",
        "workload_percentage",
        "has_capability",
        "add_capability",
        "remove_capability",
        "assign_task",
        "complete_task",
        "deactivate",
        "reactivate",
        "update_activity"
      ],
      "classes": {
        "Agent": {
          "methods": [
            "__post_init__",
            "current_task_count",
            "can_accept_more_tasks",
            "workload_percentage",
            "has_capability",
            "add_capability",
            "remove_capability",
            "assign_task",
            "complete_task",
            "deactivate",
            "reactivate",
            "update_activity"
          ],
          "docstring": "Agent entity representing an autonomous agent in the system.\n\nBusiness Rules:\n- Agents must have unique identifiers\n- Agents have capabilities and roles\n- Agents can be active/inactive\n- Agents track their current task assignments",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\domain\\ports\\message_bus": {
      "file_path": "src\\domain\\ports\\message_bus.py",
      "functions": [
        "publish",
        "subscribe",
        "broadcast",
        "send_direct"
      ],
      "classes": {
        "MessageBus": {
          "methods": [
            "publish",
            "subscribe",
            "broadcast",
            "send_direct"
          ],
          "docstring": "Port for message publishing and event handling.\n\nThis protocol enables loose coupling between domain objects\nand external messaging infrastructure.",
          "base_classes": [
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\domain\\entities\\__init__": {
      "file_path": "src\\domain\\entities\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\domain\\ports\\logger": {
      "file_path": "src\\domain\\ports\\logger.py",
      "functions": [
        "debug",
        "info",
        "warning",
        "error",
        "critical",
        "log"
      ],
      "classes": {
        "LogLevel": {
          "methods": [],
          "docstring": "Log levels for different types of messages.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "Logger": {
          "methods": [
            "debug",
            "info",
            "warning",
            "error",
            "critical",
            "log"
          ],
          "docstring": "Port for logging operations.\n\nThis protocol allows domain objects to log events and debug information\nwithout depending on specific logging implementations.",
          "base_classes": [
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\domain\\ports\\__init__": {
      "file_path": "src\\domain\\ports\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\domain\\ports\\browser": {
      "file_path": "src\\domain\\ports\\browser.py",
      "functions": [
        "open",
        "goto",
        "send_and_wait",
        "close",
        "is_ready"
      ],
      "classes": {
        "PageReply": {
          "methods": [],
          "docstring": "Standardized response from browser interactions.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "Browser": {
          "methods": [
            "open",
            "goto",
            "send_and_wait",
            "close",
            "is_ready"
          ],
          "docstring": "Abstract browser interface for domain layer.",
          "base_classes": [
            "ABC"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\domain\\ports\\clock": {
      "file_path": "src\\domain\\ports\\clock.py",
      "functions": [
        "now",
        "utcnow",
        "from_timestamp",
        "to_timestamp"
      ],
      "classes": {
        "Clock": {
          "methods": [
            "now",
            "utcnow",
            "from_timestamp",
            "to_timestamp"
          ],
          "docstring": "Port for time operations.\n\nThis protocol allows the domain to work with time in a testable way.\nImplementations can provide real time or controlled/fixed time for testing.",
          "base_classes": [
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\domain\\ports\\task_repository": {
      "file_path": "src\\domain\\ports\\task_repository.py",
      "functions": [
        "get",
        "get_by_agent",
        "get_pending",
        "add",
        "save",
        "delete",
        "list_all"
      ],
      "classes": {
        "TaskRepository": {
          "methods": [
            "get",
            "get_by_agent",
            "get_pending",
            "add",
            "save",
            "delete",
            "list_all"
          ],
          "docstring": "Port for task persistence operations.\n\nThis protocol defines the interface that any task repository\nimplementation must provide. The domain layer depends only on this\nabstraction, not on concrete implementations.",
          "base_classes": [
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\domain\\services\\assignment_service": {
      "file_path": "src\\domain\\services\\assignment_service.py",
      "functions": [
        "__init__",
        "find_best_agent_for_task",
        "validate_assignment",
        "_can_agent_handle_task",
        "_calculate_agent_score"
      ],
      "classes": {
        "AssignmentService": {
          "methods": [
            "__init__",
            "find_best_agent_for_task",
            "validate_assignment",
            "_can_agent_handle_task",
            "_calculate_agent_score"
          ],
          "docstring": "Domain service for task assignment logic.\n\nThis service contains business rules for assigning tasks to agents\nthat involve multiple entities and complex logic.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\domain\\services\\__init__": {
      "file_path": "src\\domain\\services\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\domain\\value_objects\\ids": {
      "file_path": "src\\domain\\value_objects\\ids.py",
      "functions": [
        "__post_init__",
        "__str__",
        "__post_init__",
        "__str__",
        "__post_init__",
        "__str__",
        "__post_init__",
        "__str__"
      ],
      "classes": {
        "TaskIdentifier": {
          "methods": [
            "__post_init__",
            "__str__"
          ],
          "docstring": "Value object for task identification.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentIdentifier": {
          "methods": [
            "__post_init__",
            "__str__"
          ],
          "docstring": "Value object for agent identification.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MessageIdentifier": {
          "methods": [
            "__post_init__",
            "__str__"
          ],
          "docstring": "Value object for message identification.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "FSMStateIdentifier": {
          "methods": [
            "__post_init__",
            "__str__"
          ],
          "docstring": "Value object for FSM state identification.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\gaming\\performance_validation": {
      "file_path": "src\\gaming\\performance_validation.py",
      "functions": [
        "__init__",
        "generate_performance_report"
      ],
      "classes": {
        "PerformanceMetrics": {
          "methods": [],
          "docstring": "Performance metrics for validation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "GamingPerformanceValidator": {
          "methods": [
            "__init__",
            "generate_performance_report"
          ],
          "docstring": "Performance validator for gaming infrastructure components.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\domain\\ports\\agent_repository": {
      "file_path": "src\\domain\\ports\\agent_repository.py",
      "functions": [
        "get",
        "get_by_capability",
        "get_active",
        "get_available",
        "add",
        "save",
        "delete",
        "list_all"
      ],
      "classes": {
        "AgentRepository": {
          "methods": [
            "get",
            "get_by_capability",
            "get_active",
            "get_available",
            "add",
            "save",
            "delete",
            "list_all"
          ],
          "docstring": "Port for agent persistence operations.\n\nThis protocol defines the interface that any agent repository\nimplementation must provide.",
          "base_classes": [
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\domain\\value_objects\\__init__": {
      "file_path": "src\\domain\\value_objects\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\gaming\\__init__": {
      "file_path": "src\\gaming\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\gaming\\gaming_integration_core": {
      "file_path": "src\\gaming\\gaming_integration_core.py",
      "functions": [
        "create_gaming_integration_core",
        "create_session",
        "get_session",
        "end_session",
        "get_active_sessions",
        "register_system",
        "get_system",
        "get_all_systems",
        "handle_event",
        "__init__",
        "to_dict",
        "__init__",
        "to_dict",
        "__init__",
        "create_session",
        "get_session",
        "end_session",
        "get_active_sessions",
        "__init__",
        "register_system",
        "get_system",
        "get_all_systems",
        "__init__",
        "handle_event",
        "_handle_create_session",
        "_handle_end_session",
        "_handle_get_session",
        "__init__",
        "_initialize_integration",
        "_setup_default_handlers",
        "_connect_to_systems",
        "create_game_session",
        "get_game_session",
        "end_game_session",
        "get_active_sessions",
        "register_entertainment_system",
        "get_entertainment_system",
        "get_all_entertainment_systems",
        "register_event_handler",
        "handle_event",
        "get_status",
        "is_connected",
        "get_core_health"
      ],
      "classes": {
        "IGameSessionManager": {
          "methods": [
            "create_session",
            "get_session",
            "end_session",
            "get_active_sessions"
          ],
          "docstring": "Interface for game session management (ISP: Segregated interface).",
          "base_classes": [
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "IEntertainmentSystemManager": {
          "methods": [
            "register_system",
            "get_system",
            "get_all_systems"
          ],
          "docstring": "Interface for entertainment system management (ISP: Segregated interface).",
          "base_classes": [
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "IIntegrationHandler": {
          "methods": [
            "handle_event"
          ],
          "docstring": "Interface for integration event handlers (ISP: Segregated interface).",
          "base_classes": [
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "IntegrationStatus": {
          "methods": [],
          "docstring": "Integration status states.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "GameType": {
          "methods": [],
          "docstring": "Game types.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "GameSession": {
          "methods": [
            "__init__",
            "to_dict"
          ],
          "docstring": "Simplified game session - Single Responsibility: Data container.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EntertainmentSystem": {
          "methods": [
            "__init__",
            "to_dict"
          ],
          "docstring": "Simplified entertainment system - Single Responsibility: Data container.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "GameSessionManager": {
          "methods": [
            "__init__",
            "create_session",
            "get_session",
            "end_session",
            "get_active_sessions"
          ],
          "docstring": "Game session manager - Single Responsibility: Session management.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EntertainmentSystemManager": {
          "methods": [
            "__init__",
            "register_system",
            "get_system",
            "get_all_systems"
          ],
          "docstring": "Entertainment system manager - Single Responsibility: System management.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "IntegrationEventHandler": {
          "methods": [
            "__init__",
            "handle_event",
            "_handle_create_session",
            "_handle_end_session",
            "_handle_get_session"
          ],
          "docstring": "Integration event handler - Single Responsibility: Event processing.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "GamingIntegrationCore": {
          "methods": [
            "__init__",
            "_initialize_integration",
            "_setup_default_handlers",
            "_connect_to_systems",
            "create_game_session",
            "get_game_session",
            "end_game_session",
            "get_active_sessions",
            "register_entertainment_system",
            "get_entertainment_system",
            "get_all_entertainment_systems",
            "register_event_handler",
            "handle_event",
            "get_status",
            "is_connected",
            "get_core_health"
          ],
          "docstring": "Gaming integration core - SOLID Compliant: Uses composition and interfaces.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\gaming\\models\\gaming_alert_models": {
      "file_path": "src\\gaming\\models\\gaming_alert_models.py",
      "functions": [],
      "classes": {
        "AlertSeverity": {
          "methods": [],
          "docstring": "Alert severity levels for gaming systems.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AlertType": {
          "methods": [],
          "docstring": "Types of alerts for gaming and entertainment systems.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "GamingAlert": {
          "methods": [],
          "docstring": "Represents a gaming system alert.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\gaming\\handlers\\gaming_alert_handlers": {
      "file_path": "src\\gaming\\handlers\\gaming_alert_handlers.py",
      "functions": [
        "handle_performance_alerts",
        "handle_system_health_alerts",
        "handle_alert_acknowledgment",
        "handle_alert_resolution"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\gaming\\models\\gaming_models": {
      "file_path": "src\\gaming\\models\\gaming_models.py",
      "functions": [],
      "classes": {
        "IntegrationStatus": {
          "methods": [],
          "docstring": "Status of gaming system integration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "GameType": {
          "methods": [],
          "docstring": "Types of games supported by the system.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "GameSession": {
          "methods": [],
          "docstring": "Represents an active gaming session.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EntertainmentSystem": {
          "methods": [],
          "docstring": "Represents an entertainment system component.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\gaming\\handlers\\__init__": {
      "file_path": "src\\gaming\\handlers\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\gaming\\integration\\__init__": {
      "file_path": "src\\gaming\\integration\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\gaming\\integration\\core": {
      "file_path": "src\\gaming\\integration\\core.py",
      "functions": [
        "__init__",
        "_initialize",
        "_setup_handlers",
        "create_game_session",
        "end_game_session",
        "get_active_sessions",
        "get_system_status",
        "_handle_session_management",
        "_handle_system_health",
        "process_event",
        "register_entertainment_system"
      ],
      "classes": {
        "GamingIntegrationCore": {
          "methods": [
            "__init__",
            "_initialize",
            "_setup_handlers",
            "create_game_session",
            "end_game_session",
            "get_active_sessions",
            "get_system_status",
            "_handle_session_management",
            "_handle_system_health",
            "process_event",
            "register_entertainment_system"
          ],
          "docstring": "Simplified gaming integration core used by tests and services.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\gaming\\models\\__init__": {
      "file_path": "src\\gaming\\models\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\gaming\\utils\\gaming_monitors": {
      "file_path": "src\\gaming\\utils\\gaming_monitors.py",
      "functions": [
        "monitor_fps",
        "monitor_memory",
        "monitor_cpu",
        "monitor_network"
      ],
      "classes": {
        "GamingPerformanceMonitors": {
          "methods": [
            "monitor_fps",
            "monitor_memory",
            "monitor_cpu",
            "monitor_network"
          ],
          "docstring": "Performance monitoring utilities for gaming systems.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\gaming\\integration\\models": {
      "file_path": "src\\gaming\\integration\\models.py",
      "functions": [],
      "classes": {
        "IntegrationStatus": {
          "methods": [],
          "docstring": "Status of gaming system integration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "GameType": {
          "methods": [],
          "docstring": "Types of games supported by the system.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "GameSession": {
          "methods": [],
          "docstring": "Represents an active gaming session.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EntertainmentSystem": {
          "methods": [],
          "docstring": "Represents an entertainment system component.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\gaming\\utils\\__init__": {
      "file_path": "src\\gaming\\utils\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\gaming\\utils\\gaming_alert_utils": {
      "file_path": "src\\gaming\\utils\\gaming_alert_utils.py",
      "functions": [
        "create_alert_id",
        "validate_alert_metadata",
        "format_alert_message",
        "calculate_alert_priority"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\infrastructure\\unified_logging_time": {
      "file_path": "src\\infrastructure\\unified_logging_time.py",
      "functions": [
        "create_logging_time_service",
        "debug",
        "info",
        "warning",
        "error",
        "critical",
        "log",
        "now",
        "utcnow",
        "from_timestamp",
        "to_timestamp",
        "__init__",
        "format",
        "__init__",
        "_setup_handlers",
        "_map_log_level",
        "debug",
        "info",
        "warning",
        "error",
        "critical",
        "log",
        "__init__",
        "_get_timezone",
        "now",
        "utcnow",
        "from_timestamp",
        "to_timestamp",
        "__init__",
        "format_time",
        "format_date",
        "format_datetime",
        "parse_time",
        "parse_date",
        "parse_datetime",
        "__init__",
        "add_days",
        "add_hours",
        "add_minutes",
        "time_diff_seconds",
        "time_diff_minutes",
        "time_diff_hours",
        "time_diff_days",
        "is_expired",
        "get_age_seconds",
        "__init__",
        "increment_stat",
        "get_stats",
        "reset_stats",
        "__init__",
        "get_logger",
        "debug",
        "info",
        "warning",
        "error",
        "critical",
        "now",
        "utcnow",
        "from_timestamp",
        "to_timestamp",
        "format_time",
        "format_date",
        "format_datetime",
        "parse_datetime",
        "add_days",
        "add_hours",
        "time_diff_seconds",
        "time_diff_minutes",
        "is_expired",
        "get_age_seconds",
        "get_log_stats",
        "reset_log_stats",
        "get_service_info"
      ],
      "classes": {
        "LogLevel": {
          "methods": [],
          "docstring": "Enumeration of log levels.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "LoggingConfig": {
          "methods": [],
          "docstring": "Configuration for logging operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TimeConfig": {
          "methods": [],
          "docstring": "Configuration for time operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "LoggerInterface": {
          "methods": [
            "debug",
            "info",
            "warning",
            "error",
            "critical",
            "log"
          ],
          "docstring": "Abstract interface for logging operations.",
          "base_classes": [
            "ABC"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ClockInterface": {
          "methods": [
            "now",
            "utcnow",
            "from_timestamp",
            "to_timestamp"
          ],
          "docstring": "Abstract interface for time operations.",
          "base_classes": [
            "ABC"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ColorFormatter": {
          "methods": [
            "__init__",
            "format"
          ],
          "docstring": "Logging formatter with color support.",
          "base_classes": [
            "logging.Formatter"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "UnifiedLogger": {
          "methods": [
            "__init__",
            "_setup_handlers",
            "_map_log_level",
            "debug",
            "info",
            "warning",
            "error",
            "critical",
            "log"
          ],
          "docstring": "Unified logger implementation combining multiple logging targets.",
          "base_classes": [
            "LoggerInterface"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SystemClock": {
          "methods": [
            "__init__",
            "_get_timezone",
            "now",
            "utcnow",
            "from_timestamp",
            "to_timestamp"
          ],
          "docstring": "System clock implementation with timezone support.",
          "base_classes": [
            "ClockInterface"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TimeFormatter": {
          "methods": [
            "__init__",
            "format_time",
            "format_date",
            "format_datetime",
            "parse_time",
            "parse_date",
            "parse_datetime"
          ],
          "docstring": "Utility class for time formatting operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TimeCalculator": {
          "methods": [
            "__init__",
            "add_days",
            "add_hours",
            "add_minutes",
            "time_diff_seconds",
            "time_diff_minutes",
            "time_diff_hours",
            "time_diff_days",
            "is_expired",
            "get_age_seconds"
          ],
          "docstring": "Utility class for time calculation operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "LogStatistics": {
          "methods": [
            "__init__",
            "increment_stat",
            "get_stats",
            "reset_stats"
          ],
          "docstring": "Provides statistics about logging operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "UnifiedLoggingTimeService": {
          "methods": [
            "__init__",
            "get_logger",
            "debug",
            "info",
            "warning",
            "error",
            "critical",
            "now",
            "utcnow",
            "from_timestamp",
            "to_timestamp",
            "format_time",
            "format_date",
            "format_datetime",
            "parse_datetime",
            "add_days",
            "add_hours",
            "time_diff_seconds",
            "time_diff_minutes",
            "is_expired",
            "get_age_seconds",
            "get_log_stats",
            "reset_log_stats",
            "get_service_info"
          ],
          "docstring": "Main unified logging and time service interface.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\infrastructure\\__init__": {
      "file_path": "src\\infrastructure\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\gaming\\utils\\gaming_handlers": {
      "file_path": "src\\gaming\\utils\\gaming_handlers.py",
      "functions": [
        "handle_session_management",
        "handle_performance_monitoring",
        "handle_system_health",
        "handle_user_interaction"
      ],
      "classes": {
        "GamingEventHandlers": {
          "methods": [
            "handle_session_management",
            "handle_performance_monitoring",
            "handle_system_health",
            "handle_user_interaction"
          ],
          "docstring": "Event handling utilities for gaming systems.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\infrastructure\\browser\\__init__": {
      "file_path": "src\\infrastructure\\browser\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\infrastructure\\browser\\thea_manager_profile": {
      "file_path": "src\\infrastructure\\browser\\thea_manager_profile.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\infrastructure\\unified_browser_service": {
      "file_path": "src\\infrastructure\\unified_browser_service.py",
      "functions": [
        "create_browser_service",
        "start",
        "stop",
        "navigate",
        "get_current_url",
        "get_title",
        "find_element",
        "find_elements",
        "execute_script",
        "is_running",
        "__init__",
        "start",
        "stop",
        "navigate",
        "get_current_url",
        "get_title",
        "find_element",
        "find_elements",
        "execute_script",
        "is_running",
        "get_cookies",
        "add_cookies",
        "__init__",
        "save_cookies",
        "load_cookies",
        "has_valid_session",
        "_persist_cookies",
        "_load_persisted_cookies",
        "__init__",
        "create_session",
        "can_make_request",
        "record_request",
        "wait_for_rate_limit_reset",
        "get_session_info",
        "get_rate_limit_status",
        "__init__",
        "navigate_to_conversation",
        "send_message",
        "wait_for_response_ready",
        "_is_input_available",
        "_verify_page_loaded",
        "get_page_status",
        "__init__",
        "start_browser",
        "stop_browser",
        "create_session",
        "navigate_to_conversation",
        "send_message",
        "wait_for_response",
        "save_cookies",
        "load_cookies",
        "can_make_request",
        "record_request",
        "get_session_info",
        "get_rate_limit_status",
        "get_page_status",
        "is_browser_running",
        "has_valid_session",
        "get_browser_info",
        "get_timeout_config"
      ],
      "classes": {
        "BrowserConfig": {
          "methods": [],
          "docstring": "Configuration for browser operations with enhanced config integration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TheaConfig": {
          "methods": [],
          "docstring": "Configuration for Thea Manager interactions with enhanced config integration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SessionInfo": {
          "methods": [],
          "docstring": "Session information.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RateLimitStatus": {
          "methods": [],
          "docstring": "Rate limit status information.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "BrowserAdapter": {
          "methods": [
            "start",
            "stop",
            "navigate",
            "get_current_url",
            "get_title",
            "find_element",
            "find_elements",
            "execute_script",
            "is_running"
          ],
          "docstring": "Abstract base class for browser adapters.",
          "base_classes": [
            "ABC"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ChromeBrowserAdapter": {
          "methods": [
            "__init__",
            "start",
            "stop",
            "navigate",
            "get_current_url",
            "get_title",
            "find_element",
            "find_elements",
            "execute_script",
            "is_running",
            "get_cookies",
            "add_cookies"
          ],
          "docstring": "Chrome browser adapter implementation.",
          "base_classes": [
            "BrowserAdapter"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CookieManager": {
          "methods": [
            "__init__",
            "save_cookies",
            "load_cookies",
            "has_valid_session",
            "_persist_cookies",
            "_load_persisted_cookies"
          ],
          "docstring": "Manages browser cookies for sessions.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SessionManager": {
          "methods": [
            "__init__",
            "create_session",
            "can_make_request",
            "record_request",
            "wait_for_rate_limit_reset",
            "get_session_info",
            "get_rate_limit_status"
          ],
          "docstring": "Manages browser sessions and rate limiting.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "BrowserOperations": {
          "methods": [
            "__init__",
            "navigate_to_conversation",
            "send_message",
            "wait_for_response_ready",
            "_is_input_available",
            "_verify_page_loaded",
            "get_page_status"
          ],
          "docstring": "Handles browser operations and interactions.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "UnifiedBrowserService": {
          "methods": [
            "__init__",
            "start_browser",
            "stop_browser",
            "create_session",
            "navigate_to_conversation",
            "send_message",
            "wait_for_response",
            "save_cookies",
            "load_cookies",
            "can_make_request",
            "record_request",
            "get_session_info",
            "get_rate_limit_status",
            "get_page_status",
            "is_browser_running",
            "has_valid_session",
            "get_browser_info"
          ],
          "docstring": "Main unified browser service interface.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "_FallbackConfig": {
          "methods": [
            "get_timeout_config"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Kiddie Script",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\infrastructure\\unified_persistence": {
      "file_path": "src\\infrastructure\\unified_persistence.py",
      "functions": [
        "create_persistence_service",
        "__init__",
        "get_connection",
        "execute_query",
        "execute_update",
        "create_tables",
        "__init__",
        "get",
        "save",
        "delete",
        "list_all",
        "__post_init__",
        "__post_init__",
        "__init__",
        "_ensure_schema",
        "get",
        "get_by_capability",
        "get_active",
        "get_available",
        "save",
        "delete",
        "list_all",
        "_row_to_agent",
        "_agent_to_row",
        "__init__",
        "_ensure_schema",
        "get",
        "get_by_agent",
        "get_pending",
        "save",
        "delete",
        "list_all",
        "_row_to_task",
        "_task_to_row",
        "__init__",
        "get_database_stats",
        "__init__",
        "save_agent",
        "get_agent",
        "delete_agent",
        "list_agents",
        "get_active_agents",
        "get_available_agents",
        "get_agents_by_capability",
        "save_task",
        "get_task",
        "delete_task",
        "list_tasks",
        "get_tasks_by_agent",
        "get_pending_tasks",
        "get_database_stats",
        "optimize_database",
        "backup_database"
      ],
      "classes": {
        "PersistenceConfig": {
          "methods": [],
          "docstring": "Configuration for persistence operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DatabaseConnection": {
          "methods": [
            "__init__",
            "get_connection",
            "execute_query",
            "execute_update",
            "create_tables"
          ],
          "docstring": "Manages database connections with proper cleanup and configuration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "BaseRepository": {
          "methods": [
            "__init__",
            "get",
            "save",
            "delete",
            "list_all"
          ],
          "docstring": "Abstract base class for repositories.",
          "base_classes": [
            "ABC",
            null
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "Agent": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Agent entity.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "Task": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Task entity.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentRepository": {
          "methods": [
            "__init__",
            "_ensure_schema",
            "get",
            "get_by_capability",
            "get_active",
            "get_available",
            "save",
            "delete",
            "list_all",
            "_row_to_agent",
            "_agent_to_row"
          ],
          "docstring": "Repository for Agent entities.",
          "base_classes": [
            null
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TaskRepository": {
          "methods": [
            "__init__",
            "_ensure_schema",
            "get",
            "get_by_agent",
            "get_pending",
            "save",
            "delete",
            "list_all",
            "_row_to_task",
            "_task_to_row"
          ],
          "docstring": "Repository for Task entities.",
          "base_classes": [
            null
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PersistenceStatistics": {
          "methods": [
            "__init__",
            "get_database_stats"
          ],
          "docstring": "Provides statistics about the persistence layer.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "UnifiedPersistenceService": {
          "methods": [
            "__init__",
            "save_agent",
            "get_agent",
            "delete_agent",
            "list_agents",
            "get_active_agents",
            "get_available_agents",
            "get_agents_by_capability",
            "save_task",
            "get_task",
            "delete_task",
            "list_tasks",
            "get_tasks_by_agent",
            "get_pending_tasks",
            "get_database_stats",
            "optimize_database",
            "backup_database"
          ],
          "docstring": "Main unified persistence service interface.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\infrastructure\\browser\\thea_modules\\__init__": {
      "file_path": "src\\infrastructure\\browser\\thea_modules\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\infrastructure\\logging\\__init__": {
      "file_path": "src\\infrastructure\\logging\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\infrastructure\\persistence\\__init__": {
      "file_path": "src\\infrastructure\\persistence\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\quality\\proof_ledger": {
      "file_path": "src\\quality\\proof_ledger.py",
      "functions": [
        "_git_head",
        "run_tdd_proof"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\quality\\__init__": {
      "file_path": "src\\quality\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\infrastructure\\time\\system_clock": {
      "file_path": "src\\infrastructure\\time\\system_clock.py",
      "functions": [
        "now",
        "utcnow",
        "from_timestamp",
        "to_timestamp"
      ],
      "classes": {
        "SystemClock": {
          "methods": [
            "now",
            "utcnow",
            "from_timestamp",
            "to_timestamp"
          ],
          "docstring": "System clock implementation using Python's datetime.\n\nThis adapter provides real system time for the domain layer.",
          "base_classes": [
            "Clock"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\trading_robot\\core\\dependency_injection": {
      "file_path": "src\\trading_robot\\core\\dependency_injection.py",
      "functions": [
        "get_trading_container",
        "reset_trading_container",
        "get_trading_repository",
        "get_trading_service",
        "__init__",
        "_register_defaults",
        "register_factory",
        "register_instance",
        "resolve",
        "_create_from_factory",
        "has_service",
        "clear_scope",
        "get_registered_services"
      ],
      "classes": {
        "DependencyInjectionError": {
          "methods": [],
          "docstring": "Custom exception for dependency injection errors.",
          "base_classes": [
            "Exception"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TradingDependencyContainer": {
          "methods": [
            "__init__",
            "_register_defaults",
            "register_factory",
            "register_instance",
            "resolve",
            "_create_from_factory",
            "has_service",
            "clear_scope",
            "get_registered_services"
          ],
          "docstring": "Dependency injection container for trading robot components.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\trading_robot\\repositories\\trading_repository": {
      "file_path": "src\\trading_robot\\repositories\\trading_repository.py",
      "functions": [
        "get_trading_repository",
        "__init__"
      ],
      "classes": {
        "TradingRepository": {
          "methods": [
            "__init__"
          ],
          "docstring": "Main trading repository that coordinates all trading data access.\n\nProvides unified interface for trade, position, and portfolio operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\trading_robot\\core\\__init__": {
      "file_path": "src\\trading_robot\\core\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\infrastructure\\time\\__init__": {
      "file_path": "src\\infrastructure\\time\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\trading_robot\\repositories\\__init__": {
      "file_path": "src\\trading_robot\\repositories\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\trading_robot\\repositories\\implementations\\__init__": {
      "file_path": "src\\trading_robot\\repositories\\implementations\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\trading_robot\\repositories\\interfaces\\portfolio_repository_interface": {
      "file_path": "src\\trading_robot\\repositories\\interfaces\\portfolio_repository_interface.py",
      "functions": [],
      "classes": {
        "PortfolioRepositoryInterface": {
          "methods": [],
          "docstring": "Abstract interface for portfolio data access with V2 compliance.\n\nV2 COMPLIANCE: Repository pattern with async operations and comprehensive error handling.\nDESIGN PATTERN: Repository pattern providing clean data access abstraction.",
          "base_classes": [
            "ABC"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\trading_robot\\repositories\\implementations\\in_memory_trading_repository": {
      "file_path": "src\\trading_robot\\repositories\\implementations\\in_memory_trading_repository.py",
      "functions": [
        "__init__"
      ],
      "classes": {
        "InMemoryTradingRepository": {
          "methods": [
            "__init__"
          ],
          "docstring": "In-memory implementation of trading repository with V2 compliance.\n\nV2 COMPLIANCE: Thread-safe async operations, comprehensive error handling, proper logging.",
          "base_classes": [
            "TradingRepositoryInterface"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\trading_robot\\repositories\\implementations\\trading_repository_impl": {
      "file_path": "src\\trading_robot\\repositories\\implementations\\trading_repository_impl.py",
      "functions": [
        "__init__"
      ],
      "classes": {
        "TradingRepositoryImpl": {
          "methods": [
            "__init__"
          ],
          "docstring": "In-memory implementation of trading repository with V2 compliance.\n\nV2 COMPLIANCE: Repository pattern with async operations and comprehensive error handling.\nDESIGN PATTERN: Repository pattern providing clean data access abstraction.",
          "base_classes": [
            "TradingRepositoryInterface"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\trading_robot\\repositories\\interfaces\\position_repository_interface": {
      "file_path": "src\\trading_robot\\repositories\\interfaces\\position_repository_interface.py",
      "functions": [],
      "classes": {
        "PositionRepositoryInterface": {
          "methods": [],
          "docstring": "Abstract interface for position data access with V2 compliance.\n\nV2 COMPLIANCE: Repository pattern with async operations and comprehensive error handling.\nDESIGN PATTERN: Repository pattern providing clean data access abstraction.",
          "base_classes": [
            "ABC"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\trading_robot\\repositories\\models\\trade": {
      "file_path": "src\\trading_robot\\repositories\\models\\trade.py",
      "functions": [
        "__post_init__",
        "get_value",
        "is_buy",
        "is_sell",
        "is_executed",
        "is_pending",
        "is_cancelled",
        "to_dict",
        "from_dict",
        "__str__",
        "__repr__"
      ],
      "classes": {
        "Trade": {
          "methods": [
            "__post_init__",
            "get_value",
            "is_buy",
            "is_sell",
            "is_executed",
            "is_pending",
            "is_cancelled",
            "to_dict",
            "from_dict",
            "__str__",
            "__repr__"
          ],
          "docstring": "Trade data structure with V2 compliance validation.\n\nV2 COMPLIANCE: Type-safe data structure with validation and metadata.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\trading_robot\\services\\trading_service": {
      "file_path": "src\\trading_robot\\services\\trading_service.py",
      "functions": [
        "create_trading_service",
        "__init__",
        "_validate_trade_inputs"
      ],
      "classes": {
        "TradingService": {
          "methods": [
            "__init__",
            "_validate_trade_inputs"
          ],
          "docstring": "Service layer for trading business logic.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\trading_robot\\repositories\\models\\position": {
      "file_path": "src\\trading_robot\\repositories\\models\\position.py",
      "functions": [
        "__post_init__",
        "get_market_value",
        "get_cost_basis",
        "get_unrealized_pnl",
        "get_unrealized_pnl_percentage",
        "is_long",
        "is_short",
        "is_flat",
        "is_profitable",
        "update_price",
        "add_quantity",
        "to_dict",
        "from_dict",
        "__str__",
        "__repr__"
      ],
      "classes": {
        "Position": {
          "methods": [
            "__post_init__",
            "get_market_value",
            "get_cost_basis",
            "get_unrealized_pnl",
            "get_unrealized_pnl_percentage",
            "is_long",
            "is_short",
            "is_flat",
            "is_profitable",
            "update_price",
            "add_quantity",
            "to_dict",
            "from_dict",
            "__str__",
            "__repr__"
          ],
          "docstring": "Position data structure with V2 compliance validation.\n\nV2 COMPLIANCE: Type-safe data structure with validation and metadata.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\trading_robot\\repositories\\interfaces\\trading_repository_interface": {
      "file_path": "src\\trading_robot\\repositories\\interfaces\\trading_repository_interface.py",
      "functions": [],
      "classes": {
        "TradingRepositoryInterface": {
          "methods": [],
          "docstring": "Abstract interface for trading data access with V2 compliance.\n\nV2 COMPLIANCE: Repository pattern with async operations and comprehensive error handling.\nDESIGN PATTERN: Repository pattern providing clean data access abstraction.",
          "base_classes": [
            "ABC"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\trading_robot\\services\\__init__": {
      "file_path": "src\\trading_robot\\services\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\trading_robot\\repositories\\interfaces\\__init__": {
      "file_path": "src\\trading_robot\\repositories\\interfaces\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\trading_robot\\repositories\\models\\portfolio": {
      "file_path": "src\\trading_robot\\repositories\\models\\portfolio.py",
      "functions": [
        "__post_init__",
        "add_position",
        "remove_position",
        "get_position",
        "has_position",
        "get_total_market_value",
        "get_total_cost_basis",
        "get_total_unrealized_pnl",
        "get_total_unrealized_pnl_percentage",
        "get_portfolio_value",
        "get_position_count",
        "get_long_positions",
        "get_short_positions",
        "get_flat_positions",
        "get_profitable_positions",
        "get_losing_positions",
        "update_position_prices",
        "_update_total_value",
        "get_portfolio_summary",
        "to_dict",
        "from_dict",
        "__str__",
        "__repr__"
      ],
      "classes": {
        "Portfolio": {
          "methods": [
            "__post_init__",
            "add_position",
            "remove_position",
            "get_position",
            "has_position",
            "get_total_market_value",
            "get_total_cost_basis",
            "get_total_unrealized_pnl",
            "get_total_unrealized_pnl_percentage",
            "get_portfolio_value",
            "get_position_count",
            "get_long_positions",
            "get_short_positions",
            "get_flat_positions",
            "get_profitable_positions",
            "get_losing_positions",
            "update_position_prices",
            "_update_total_value",
            "get_portfolio_summary",
            "to_dict",
            "from_dict",
            "__str__",
            "__repr__"
          ],
          "docstring": "Portfolio data structure with V2 compliance validation.\n\nV2 COMPLIANCE: Type-safe data structure with validation and metadata.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\trading_robot\\services\\trading_bi_analytics": {
      "file_path": "src\\trading_robot\\services\\trading_bi_analytics.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\trading_robot\\repositories\\models\\__init__": {
      "file_path": "src\\trading_robot\\repositories\\models\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\trading_robot\\services\\analytics\\risk_analysis_engine": {
      "file_path": "src\\trading_robot\\services\\analytics\\risk_analysis_engine.py",
      "functions": [
        "create_risk_analysis_engine",
        "__init__",
        "calculate_risk_metrics",
        "_calculate_returns_series",
        "_calculate_volatility",
        "_calculate_value_at_risk",
        "_calculate_expected_shortfall",
        "_calculate_beta_coefficient",
        "_assess_risk_level",
        "_calculate_max_position_size",
        "_create_default_risk_metrics"
      ],
      "classes": {
        "RiskAnalysisEngine": {
          "methods": [
            "__init__",
            "calculate_risk_metrics",
            "_calculate_returns_series",
            "_calculate_volatility",
            "_calculate_value_at_risk",
            "_calculate_expected_shortfall",
            "_calculate_beta_coefficient",
            "_assess_risk_level",
            "_calculate_max_position_size",
            "_create_default_risk_metrics"
          ],
          "docstring": "Risk analysis engine for trading portfolio risk assessment.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\trading_robot\\services\\analytics\\market_trend_engine": {
      "file_path": "src\\trading_robot\\services\\analytics\\market_trend_engine.py",
      "functions": [
        "create_market_trend_engine",
        "__init__",
        "analyze_market_trend",
        "_calculate_trend_direction",
        "_calculate_trend_confidence",
        "_calculate_predicted_change",
        "_create_default_trend",
        "get_trend_summary"
      ],
      "classes": {
        "MarketTrendEngine": {
          "methods": [
            "__init__",
            "analyze_market_trend",
            "_calculate_trend_direction",
            "_calculate_trend_confidence",
            "_calculate_predicted_change",
            "_create_default_trend",
            "get_trend_summary"
          ],
          "docstring": "Market trend analysis engine for trading market analysis.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\trading_robot\\repositories\\models\\trading_models": {
      "file_path": "src\\trading_robot\\repositories\\models\\trading_models.py",
      "functions": [
        "__post_init__",
        "is_completed",
        "calculate_value",
        "__post_init__",
        "update_pnl",
        "get_pnl_percentage",
        "is_long",
        "is_short"
      ],
      "classes": {
        "Trade": {
          "methods": [
            "__post_init__",
            "is_completed",
            "calculate_value"
          ],
          "docstring": "Trade data structure with V2 compliance validation.\n\nV2 COMPLIANCE: Type-safe data structure with validation and metadata.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "Position": {
          "methods": [
            "__post_init__",
            "update_pnl",
            "get_pnl_percentage",
            "is_long",
            "is_short"
          ],
          "docstring": "Position data structure with V2 compliance validation.\n\nV2 COMPLIANCE: Type-safe data structure with validation and performance metrics.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\trading_robot\\services\\analytics\\__init__": {
      "file_path": "src\\trading_robot\\services\\analytics\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\utils\\logger": {
      "file_path": "src\\utils\\logger.py",
      "functions": [
        "get_messaging_logger",
        "get_contract_logger",
        "get_core_logger",
        "get_logger",
        "format",
        "__init__",
        "_setup_file_handler",
        "debug",
        "info",
        "warning",
        "error",
        "critical",
        "_log"
      ],
      "classes": {
        "StructuredFormatter": {
          "methods": [
            "format"
          ],
          "docstring": "Custom formatter for structured JSON logging.",
          "base_classes": [
            "logging.Formatter"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "V2Logger": {
          "methods": [
            "__init__",
            "_setup_file_handler",
            "debug",
            "info",
            "warning",
            "error",
            "critical",
            "_log"
          ],
          "docstring": "V2 compliant logger with enhanced capabilities.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\trading_robot\\services\\analytics\\trading_bi_orchestrator": {
      "file_path": "src\\trading_robot\\services\\analytics\\trading_bi_orchestrator.py",
      "functions": [
        "create_trading_bi_analytics_orchestrator",
        "__init__",
        "get_engine_status"
      ],
      "classes": {
        "TradingBiAnalyticsOrchestrator": {
          "methods": [
            "__init__",
            "get_engine_status"
          ],
          "docstring": "Main orchestrator for trading BI analytics system.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\trading_robot\\services\\analytics\\performance_metrics_engine": {
      "file_path": "src\\trading_robot\\services\\analytics\\performance_metrics_engine.py",
      "functions": [
        "create_performance_metrics_engine",
        "__init__",
        "calculate_performance_metrics",
        "_calculate_total_return",
        "_calculate_sharpe_ratio",
        "_calculate_max_drawdown",
        "_calculate_peak_to_trough_drawdown",
        "_calculate_rolling_drawdown",
        "_calculate_win_rate",
        "_calculate_profit_factor",
        "_calculate_avg_trade_duration",
        "_calculate_returns_series",
        "_group_trades_by_symbol",
        "_create_default_performance_metrics"
      ],
      "classes": {
        "PerformanceMetricsEngine": {
          "methods": [
            "__init__",
            "calculate_performance_metrics",
            "_calculate_total_return",
            "_calculate_sharpe_ratio",
            "_calculate_max_drawdown",
            "_calculate_peak_to_trough_drawdown",
            "_calculate_rolling_drawdown",
            "_calculate_win_rate",
            "_calculate_profit_factor",
            "_calculate_avg_trade_duration",
            "_calculate_returns_series",
            "_group_trades_by_symbol",
            "_create_default_performance_metrics"
          ],
          "docstring": "Performance metrics engine for trading portfolio analysis.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\utils\\unified_utilities": {
      "file_path": "src\\utils\\unified_utilities.py",
      "functions": [
        "get_unified_utility",
        "get_logger",
        "get_project_root",
        "get_config_path",
        "ensure_directory",
        "__init__",
        "join_paths",
        "get_project_root",
        "get_config_path",
        "ensure_directory"
      ],
      "classes": {
        "UnifiedUtility": {
          "methods": [
            "__init__",
            "join_paths",
            "get_project_root",
            "get_config_path",
            "ensure_directory"
          ],
          "docstring": "Unified utility class providing common functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\trading_robot\\services\\analytics\\trading_bi_models": {
      "file_path": "src\\trading_robot\\services\\analytics\\trading_bi_models.py",
      "functions": [
        "__post_init__"
      ],
      "classes": {
        "RiskLevel": {
          "methods": [],
          "docstring": "Risk assessment levels for trading positions.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PerformanceMetrics": {
          "methods": [],
          "docstring": "Performance metrics data structure for trading analysis.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RiskMetrics": {
          "methods": [],
          "docstring": "Risk assessment metrics for portfolio analysis.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MarketTrend": {
          "methods": [],
          "docstring": "Market trend analysis data structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PnLResult": {
          "methods": [],
          "docstring": "P&L calculation result structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TrendAnalysisConfig": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Configuration for trend analysis.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RiskAssessmentConfig": {
          "methods": [],
          "docstring": "Configuration for risk assessment.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PerformanceConfig": {
          "methods": [],
          "docstring": "Configuration for performance metrics calculation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\utils\\confirm": {
      "file_path": "src\\utils\\confirm.py",
      "functions": [
        "confirm"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\utils\\consolidated_file_operations": {
      "file_path": "src\\utils\\consolidated_file_operations.py",
      "functions": [
        "ensure_dir",
        "read_json_file",
        "write_json_file",
        "create_backup",
        "execute",
        "clear_cache",
        "get_file_info",
        "file_exists",
        "is_readable",
        "is_writable",
        "calculate_hash",
        "ensure_directory",
        "get_directory_info",
        "find_files",
        "cleanup_directory",
        "read_json",
        "write_json",
        "read_yaml",
        "write_yaml",
        "create_backup",
        "restore_backup",
        "scan_directory",
        "find_duplicates"
      ],
      "classes": {
        "FileInfo": {
          "methods": [],
          "docstring": "Comprehensive file information.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DirectoryInfo": {
          "methods": [],
          "docstring": "Directory information with statistics.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "BackupResult": {
          "methods": [],
          "docstring": "Result of backup operation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ScanResult": {
          "methods": [],
          "docstring": "Result of file scanning operation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "FileOperation": {
          "methods": [
            "execute"
          ],
          "docstring": "Abstract base class for file operations.",
          "base_classes": [
            "ABC"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "FileMetadataOperations": {
          "methods": [
            "clear_cache",
            "get_file_info",
            "file_exists",
            "is_readable",
            "is_writable",
            "calculate_hash"
          ],
          "docstring": "Handles file metadata operations with caching and performance optimizations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DirectoryOperations": {
          "methods": [
            "ensure_directory",
            "get_directory_info",
            "find_files",
            "cleanup_directory"
          ],
          "docstring": "Directory management operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SerializationOperations": {
          "methods": [
            "read_json",
            "write_json",
            "read_yaml",
            "write_yaml"
          ],
          "docstring": "JSON/YAML serialization and deserialization operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "BackupOperations": {
          "methods": [
            "create_backup",
            "restore_backup"
          ],
          "docstring": "Backup and restore operations with progress tracking.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "FileScanner": {
          "methods": [
            "scan_directory",
            "find_duplicates"
          ],
          "docstring": "Advanced file scanning with filtering and performance optimizations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\onboarding\\__init__": {
      "file_path": "src\\onboarding\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\discord\\commands\\semantic_commands": {
      "file_path": "src\\discord\\commands\\semantic_commands.py",
      "functions": [
        "__init__",
        "__init__",
        "__init__"
      ],
      "classes": {
        "SemanticCommands": {
          "methods": [
            "__init__"
          ],
          "docstring": null,
          "base_classes": [
            "commands.Cog"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "discord": {
          "methods": [],
          "docstring": null,
          "base_classes": [],
          "maturity": "Kiddie Script",
          "agent_type": "Utility"
        },
        "app_commands": {
          "methods": [],
          "docstring": null,
          "base_classes": [],
          "maturity": "Kiddie Script",
          "agent_type": "Utility"
        },
        "commands": {
          "methods": [],
          "docstring": null,
          "base_classes": [],
          "maturity": "Kiddie Script",
          "agent_type": "Utility"
        },
        "Interaction": {
          "methods": [],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "command": {
          "methods": [
            "__init__"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Kiddie Script",
          "agent_type": "Utility"
        },
        "describe": {
          "methods": [
            "__init__"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Kiddie Script",
          "agent_type": "Utility"
        },
        "Cog": {
          "methods": [],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "Bot": {
          "methods": [],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "src\\onboarding\\onboarding_bridge\\__init__": {
      "file_path": "src\\onboarding\\onboarding_bridge\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\integration\\messaging_gateway": {
      "file_path": "src\\integration\\messaging_gateway.py",
      "functions": [
        "_import_symbol",
        "_first_ok",
        "to_dict",
        "__init__",
        "_basic_core",
        "_load_agent_coordinates",
        "_normalize_target",
        "list_available_agents",
        "get_agent_status",
        "request_agent_summary",
        "send_pyautogui",
        "send_message",
        "receive_message",
        "broadcast_message"
      ],
      "classes": {
        "DispatchResult": {
          "methods": [
            "to_dict"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "MessagingGateway": {
          "methods": [
            "__init__",
            "_basic_core",
            "_load_agent_coordinates",
            "_normalize_target",
            "list_available_agents",
            "get_agent_status",
            "request_agent_summary",
            "send_pyautogui"
          ],
          "docstring": "Routes messages to agents' UI via ConsolidatedMessagingService (PyAutoGUI channel).\n- Config-driven coordinates with normalization\n- Safe fallback core if CMS unavailable\n- Deterministic, structured DispatchResult responses",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "BasicMessagingCore": {
          "methods": [
            "send_message",
            "receive_message",
            "broadcast_message"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tools\\agent_checkin": {
      "file_path": "tools\\agent_checkin.py",
      "functions": [
        "_iso_now",
        "ensure_dirs",
        "load_json_arg",
        "validate_minimum",
        "append_jsonl",
        "atomic_write",
        "update_index",
        "main"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\utils\\__init__": {
      "file_path": "src\\utils\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "tools\\__init__": {
      "file_path": "tools\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "src\\utils\\consolidated_config_management": {
      "file_path": "src\\utils\\consolidated_config_management.py",
      "functions": [
        "scan_and_consolidate_config",
        "validate_configuration_setup",
        "scan_file",
        "get_pattern_types",
        "get_pattern_types",
        "scan_file",
        "get_pattern_types",
        "scan_file",
        "get_pattern_types",
        "scan_file",
        "get_pattern_types",
        "scan_file",
        "__init__",
        "_initialize_scanners",
        "add_scanner",
        "scan_configurations",
        "_scan_directory",
        "_scan_file",
        "consolidate_configurations",
        "_analyze_consolidation_opportunities",
        "_validate_configuration",
        "generate_config_file",
        "export_scan_results"
      ],
      "classes": {
        "ConfigPattern": {
          "methods": [],
          "docstring": "Represents a configuration pattern found in code.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ConfigValidationResult": {
          "methods": [],
          "docstring": "Result of configuration validation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ConfigConsolidationResult": {
          "methods": [],
          "docstring": "Result of configuration consolidation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ConfigurationScanner": {
          "methods": [
            "scan_file",
            "get_pattern_types"
          ],
          "docstring": "Abstract base class for configuration scanners.",
          "base_classes": [
            "ABC"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EnvironmentVariableScanner": {
          "methods": [
            "get_pattern_types",
            "scan_file"
          ],
          "docstring": "Scans for environment variable usage patterns.",
          "base_classes": [
            "ConfigurationScanner"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "HardcodedValueScanner": {
          "methods": [
            "get_pattern_types",
            "scan_file"
          ],
          "docstring": "Scans for hardcoded configuration values.",
          "base_classes": [
            "ConfigurationScanner"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ConfigConstantScanner": {
          "methods": [
            "get_pattern_types",
            "scan_file"
          ],
          "docstring": "Scans for configuration constants.",
          "base_classes": [
            "ConfigurationScanner"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SettingsPatternScanner": {
          "methods": [
            "get_pattern_types",
            "scan_file"
          ],
          "docstring": "Scans for settings.py style configuration patterns.",
          "base_classes": [
            "ConfigurationScanner"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "UnifiedConfigurationManager": {
          "methods": [
            "__init__",
            "_initialize_scanners",
            "add_scanner",
            "scan_configurations",
            "_scan_directory",
            "_scan_file",
            "consolidate_configurations",
            "_analyze_consolidation_opportunities",
            "_validate_configuration",
            "generate_config_file",
            "export_scan_results"
          ],
          "docstring": "Unified configuration management system.\n\nConsolidates all configuration-related functionality into a single,\ncohesive system for managing application configuration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tools\\generate_utils_catalog": {
      "file_path": "tools\\generate_utils_catalog.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "tools\\run_project_scan": {
      "file_path": "tools\\run_project_scan.py",
      "functions": [
        "run"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "tools\\check_snapshot_up_to_date": {
      "file_path": "tools\\check_snapshot_up_to_date.py",
      "functions": [
        "git_diff_has_changes",
        "main"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "tools\\test_coverage_improvement": {
      "file_path": "tools\\test_coverage_improvement.py",
      "functions": [
        "main",
        "__init__",
        "analyze_current_coverage",
        "_run_coverage_analysis",
        "_get_coverage_target",
        "_analyze_coverage_gaps",
        "_generate_recommendations",
        "improve_test_reliability",
        "_run_reliability_tests",
        "_analyze_and_fix_flaky_tests",
        "generate_ci_cd_integration",
        "_generate_github_actions_workflow",
        "save_report",
        "_get_timestamp",
        "run_full_analysis",
        "analyze_error_handling_coverage",
        "run_performance_benchmarking",
        "generate_intelligent_recommendations",
        "generate_html_report",
        "_calculate_overall_quality_score"
      ],
      "classes": {
        "TestCoverageImprover": {
          "methods": [
            "__init__",
            "analyze_current_coverage",
            "_run_coverage_analysis",
            "_get_coverage_target",
            "_analyze_coverage_gaps",
            "_generate_recommendations",
            "improve_test_reliability",
            "_run_reliability_tests",
            "_analyze_and_fix_flaky_tests",
            "generate_ci_cd_integration",
            "_generate_github_actions_workflow",
            "save_report",
            "_get_timestamp",
            "run_full_analysis",
            "analyze_error_handling_coverage",
            "run_performance_benchmarking",
            "generate_intelligent_recommendations",
            "generate_html_report",
            "_calculate_overall_quality_score"
          ],
          "docstring": "Tool for improving test coverage and reliability.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tools\\audit_cleanup": {
      "file_path": "tools\\audit_cleanup.py",
      "functions": [
        "load_config",
        "load_ignores",
        "path_ignored_by_patterns",
        "is_ignored_dir",
        "sha256_file",
        "list_files",
        "ext_of",
        "match_any",
        "git_available",
        "git_head_stats",
        "percent",
        "main",
        "top_exts"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "tools\\codemods\\__init__": {
      "file_path": "tools\\codemods\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\agent_scripts\\agent5_consolidation_execution": {
      "file_path": "docs\\archive\\agent_scripts\\agent5_consolidation_execution.py",
      "functions": [
        "main",
        "__init__",
        "execute_core_consolidation_validation",
        "execute_business_intelligence_analysis",
        "execute_consolidation_coordination",
        "create_agent5_status_report",
        "execute_consolidation_system"
      ],
      "classes": {
        "Agent5ConsolidationExecutor": {
          "methods": [
            "__init__",
            "execute_core_consolidation_validation",
            "execute_business_intelligence_analysis",
            "execute_consolidation_coordination",
            "create_agent5_status_report",
            "execute_consolidation_system"
          ],
          "docstring": "Agent-5 Consolidation Execution Coordinator",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "tools\\codemods\\migrate_orchestrators": {
      "file_path": "tools\\codemods\\migrate_orchestrators.py",
      "functions": [
        "load_map",
        "transform",
        "iter_py",
        "main"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\agent_scripts\\agent5_core_modules_coordinator": {
      "file_path": "docs\\archive\\agent_scripts\\agent5_core_modules_coordinator.py",
      "functions": [
        "main",
        "__init__",
        "analyze_core_modules_structure",
        "coordinate_messaging_consolidation",
        "coordinate_analytics_consolidation",
        "coordinate_configuration_consolidation",
        "calculate_business_metrics",
        "generate_coordination_report",
        "generate_recommendations",
        "execute_core_modules_coordination"
      ],
      "classes": {
        "Agent5CoreModulesCoordinator": {
          "methods": [
            "__init__",
            "analyze_core_modules_structure",
            "coordinate_messaging_consolidation",
            "coordinate_analytics_consolidation",
            "coordinate_configuration_consolidation",
            "calculate_business_metrics",
            "generate_coordination_report",
            "generate_recommendations",
            "execute_core_modules_coordination"
          ],
          "docstring": "Agent-5 Core Modules Consolidation Coordinator",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\agent_scripts\\agent6_documentation_consolidator": {
      "file_path": "docs\\archive\\agent_scripts\\agent6_documentation_consolidator.py",
      "functions": [
        "main",
        "__init__",
        "initialize_documentation_map",
        "create_api_documentation",
        "generate_api_documentation_content",
        "update_existing_documentation",
        "apply_consolidation_changes",
        "create_consolidation_summary",
        "execute_documentation_consolidation"
      ],
      "classes": {
        "Agent6DocumentationConsolidator": {
          "methods": [
            "__init__",
            "initialize_documentation_map",
            "create_api_documentation",
            "generate_api_documentation_content",
            "update_existing_documentation",
            "apply_consolidation_changes",
            "create_consolidation_summary",
            "execute_documentation_consolidation"
          ],
          "docstring": "Agent-6 Documentation Consolidator for Phase 2 consolidation",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\agent_scripts\\agent6_web_interface_coordinator": {
      "file_path": "docs\\archive\\agent_scripts\\agent6_web_interface_coordinator.py",
      "functions": [
        "main",
        "__init__",
        "initialize_web_interface_map",
        "analyze_static_assets",
        "create_web_interface_documentation",
        "generate_web_interface_documentation_content",
        "validate_web_interface_functionality",
        "create_web_interface_summary",
        "execute_web_interface_coordination"
      ],
      "classes": {
        "Agent6WebInterfaceCoordinator": {
          "methods": [
            "__init__",
            "initialize_web_interface_map",
            "analyze_static_assets",
            "create_web_interface_documentation",
            "generate_web_interface_documentation_content",
            "validate_web_interface_functionality",
            "create_web_interface_summary",
            "execute_web_interface_coordination"
          ],
          "docstring": "Agent-6 Web Interface Coordinator for Phase 2 consolidation",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\agent_scripts\\agent5_core_consolidation_validator": {
      "file_path": "docs\\archive\\agent_scripts\\agent5_core_consolidation_validator.py",
      "functions": [
        "main",
        "__init__",
        "validate_messaging_system_consolidation",
        "validate_analytics_engine_consolidation",
        "validate_configuration_system_consolidation",
        "validate_business_value_preservation",
        "validate_system_performance",
        "calculate_consolidation_metrics",
        "generate_consolidation_report",
        "generate_recommendations",
        "execute_consolidation_validation"
      ],
      "classes": {
        "Agent5CoreConsolidationValidator": {
          "methods": [
            "__init__",
            "validate_messaging_system_consolidation",
            "validate_analytics_engine_consolidation",
            "validate_configuration_system_consolidation",
            "validate_business_value_preservation",
            "validate_system_performance",
            "calculate_consolidation_metrics",
            "generate_consolidation_report",
            "generate_recommendations",
            "execute_consolidation_validation"
          ],
          "docstring": "Agent-5 Core Modules Consolidation Validator",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\agent_scripts\\agent5_core_modules_validator": {
      "file_path": "docs\\archive\\agent_scripts\\agent5_core_modules_validator.py",
      "functions": [
        "main",
        "__init__",
        "validate_messaging_system_consolidation",
        "validate_analytics_engine_consolidation",
        "validate_configuration_system_consolidation",
        "validate_coordination_system_consolidation",
        "validate_engine_system_consolidation",
        "validate_system_performance",
        "generate_validation_report",
        "generate_recommendations",
        "execute_comprehensive_validation"
      ],
      "classes": {
        "Agent5CoreModulesValidator": {
          "methods": [
            "__init__",
            "validate_messaging_system_consolidation",
            "validate_analytics_engine_consolidation",
            "validate_configuration_system_consolidation",
            "validate_coordination_system_consolidation",
            "validate_engine_system_consolidation",
            "validate_system_performance",
            "generate_validation_report",
            "generate_recommendations",
            "execute_comprehensive_validation"
          ],
          "docstring": "Agent-5 Core Modules Consolidation Validator",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\coordinator_interfaces": {
      "file_path": "docs\\archive\\consolidated_files\\coordinator_interfaces.py",
      "functions": [
        "info",
        "warning",
        "error",
        "name",
        "get_status",
        "shutdown",
        "register_coordinator",
        "get_coordinator",
        "get_all_coordinators",
        "unregister_coordinator",
        "get_coordinator_statuses",
        "shutdown_all_coordinators",
        "get_coordinator_count",
        "parse_status",
        "can_parse_status"
      ],
      "classes": {
        "ICoordinatorLogger": {
          "methods": [
            "info",
            "warning",
            "error"
          ],
          "docstring": "Interface for coordinator logging operations.",
          "base_classes": [
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ICoordinator": {
          "methods": [
            "name",
            "get_status",
            "shutdown"
          ],
          "docstring": "Interface for coordinator instances.",
          "base_classes": [
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ICoordinatorRegistry": {
          "methods": [
            "register_coordinator",
            "get_coordinator",
            "get_all_coordinators",
            "unregister_coordinator",
            "get_coordinator_statuses",
            "shutdown_all_coordinators",
            "get_coordinator_count"
          ],
          "docstring": "Abstract interface for coordinator registry operations.",
          "base_classes": [
            "ABC"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ICoordinatorStatusParser": {
          "methods": [
            "parse_status",
            "can_parse_status"
          ],
          "docstring": "Interface for parsing coordinator status.",
          "base_classes": [
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\coordinator_models": {
      "file_path": "docs\\archive\\consolidated_files\\coordinator_models.py",
      "functions": [
        "__post_init__",
        "update_metadata",
        "is_active",
        "to_dict",
        "to_dict",
        "to_dict",
        "__post_init__",
        "get",
        "update",
        "validate"
      ],
      "classes": {
        "CoordinationStatus": {
          "methods": [],
          "docstring": "Coordination status enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TargetType": {
          "methods": [],
          "docstring": "Coordination target type enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "Priority": {
          "methods": [],
          "docstring": "Priority level enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CoordinationTarget": {
          "methods": [
            "__post_init__",
            "update_metadata",
            "is_active",
            "to_dict"
          ],
          "docstring": "Represents a coordination target with enhanced metadata.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CoordinationResult": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Result of a coordination operation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CoordinatorStatus": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Comprehensive coordinator status information.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CoordinatorConfig": {
          "methods": [
            "__post_init__",
            "get",
            "update",
            "validate"
          ],
          "docstring": "Coordinator configuration with validation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\config_core": {
      "file_path": "docs\\archive\\consolidated_files\\config_core.py",
      "functions": [
        "get_config",
        "set_config",
        "reload_config",
        "validate_config",
        "get_all_config",
        "get_agent_config",
        "get_timeout_config",
        "get_threshold_config",
        "get_test_config",
        "validate_system_config",
        "initialize_config",
        "__init__",
        "_load_default_configs",
        "get",
        "set",
        "get_all_configs",
        "get_config_metadata",
        "reload_configs",
        "validate_configs"
      ],
      "classes": {
        "ConfigEnvironment": {
          "methods": [],
          "docstring": "Configuration environment types.",
          "base_classes": [
            "str",
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ConfigSource": {
          "methods": [],
          "docstring": "Configuration source types.",
          "base_classes": [
            "str",
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ConfigValue": {
          "methods": [],
          "docstring": "Configuration value with metadata.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "UnifiedConfigManager": {
          "methods": [
            "__init__",
            "_load_default_configs",
            "get",
            "set",
            "get_all_configs",
            "get_config_metadata",
            "reload_configs",
            "validate_configs"
          ],
          "docstring": "SINGLE SOURCE OF TRUTH for all configuration management.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\message_queue": {
      "file_path": "docs\\archive\\consolidated_files\\message_queue.py",
      "functions": [
        "__init__",
        "__init__",
        "enqueue",
        "enqueue_with_pyautogui",
        "enqueue_broadcast_with_pyautogui",
        "_calculate_priority_score",
        "dequeue",
        "mark_delivered",
        "mark_failed",
        "get_statistics",
        "cleanup_expired",
        "get_health_status",
        "get_pyautogui_delivery_stats",
        "__init__",
        "stop_processing",
        "_enqueue_operation",
        "_dequeue_operation",
        "_mark_delivered_operation",
        "_mark_failed_operation",
        "_get_statistics_operation",
        "_cleanup_operation",
        "_get_health_operation"
      ],
      "classes": {
        "QueueConfig": {
          "methods": [
            "__init__"
          ],
          "docstring": "Configuration for message queue.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MessageQueue": {
          "methods": [
            "__init__",
            "enqueue",
            "enqueue_with_pyautogui",
            "enqueue_broadcast_with_pyautogui",
            "_calculate_priority_score",
            "dequeue",
            "mark_delivered",
            "mark_failed",
            "get_statistics",
            "cleanup_expired",
            "get_health_status",
            "get_pyautogui_delivery_stats"
          ],
          "docstring": "SOLID-compliant message queue with dependency injection.\n\nProvides reliable message queuing with automatic retry and cleanup.\nFollows Single Responsibility Principle with separate persistence layer.",
          "base_classes": [
            "IMessageQueue"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AsyncQueueProcessor": {
          "methods": [
            "__init__",
            "stop_processing"
          ],
          "docstring": "SOLID-compliant asynchronous queue processor.\n\nProcesses queued messages with retry logic and error handling.\nFollows Single Responsibility Principle with focused processing logic.",
          "base_classes": [
            "IQueueProcessor"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\coordination_unified": {
      "file_path": "docs\\archive\\consolidated_files\\coordination_unified.py",
      "functions": [
        "create_coordination_engine",
        "create_swarm_orchestrator",
        "create_agent_strategy",
        "main",
        "initialize",
        "shutdown",
        "get_status",
        "get_info",
        "assign_task",
        "complete_task",
        "get_tasks",
        "register_agent",
        "unregister_agent",
        "get_agents",
        "get_agent",
        "create_swarm",
        "join_swarm",
        "leave_swarm",
        "get_swarm",
        "can_handle_task",
        "execute_task",
        "get_capabilities",
        "can_handle_task",
        "execute_task",
        "get_capabilities",
        "can_handle_task",
        "execute_task",
        "get_capabilities",
        "__init__",
        "start",
        "stop",
        "get_status",
        "__init__",
        "start",
        "stop",
        "get_status",
        "assign_task",
        "__init__",
        "start",
        "stop",
        "get_status",
        "record_metric",
        "get_metrics",
        "__init__",
        "initialize",
        "create_swarm",
        "join_swarm",
        "get_swarm_status"
      ],
      "classes": {
        "CoordinationStatus": {
          "methods": [],
          "docstring": "Coordination status enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TargetType": {
          "methods": [],
          "docstring": "Coordination target type enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TaskStatus": {
          "methods": [],
          "docstring": "Task status enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentStatus": {
          "methods": [],
          "docstring": "Agent status enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SwarmStatus": {
          "methods": [],
          "docstring": "Swarm status enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SwarmPhase": {
          "methods": [],
          "docstring": "Swarm phase enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CoordinatorInfo": {
          "methods": [],
          "docstring": "Coordinator information model.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TaskInfo": {
          "methods": [],
          "docstring": "Task information model.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentInfo": {
          "methods": [],
          "docstring": "Agent information model.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SwarmInfo": {
          "methods": [],
          "docstring": "Swarm information model.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "Coordinator": {
          "methods": [
            "initialize",
            "shutdown",
            "get_status",
            "get_info"
          ],
          "docstring": "Coordinator interface protocol.",
          "base_classes": [
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TaskCoordinator": {
          "methods": [
            "assign_task",
            "complete_task",
            "get_tasks"
          ],
          "docstring": "Task coordination interface.",
          "base_classes": [
            "Coordinator"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentCoordinator": {
          "methods": [
            "register_agent",
            "unregister_agent",
            "get_agents",
            "get_agent"
          ],
          "docstring": "Agent coordination interface.",
          "base_classes": [
            "Coordinator"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SwarmCoordinator": {
          "methods": [
            "create_swarm",
            "join_swarm",
            "leave_swarm",
            "get_swarm"
          ],
          "docstring": "Swarm coordination interface.",
          "base_classes": [
            "Coordinator"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentStrategy": {
          "methods": [
            "can_handle_task",
            "execute_task",
            "get_capabilities"
          ],
          "docstring": "Base agent strategy interface.",
          "base_classes": [
            "ABC"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ConsolidationStrategy": {
          "methods": [
            "can_handle_task",
            "execute_task",
            "get_capabilities"
          ],
          "docstring": "Consolidation strategy implementation.",
          "base_classes": [
            "AgentStrategy"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AnalysisStrategy": {
          "methods": [
            "can_handle_task",
            "execute_task",
            "get_capabilities"
          ],
          "docstring": "Analysis strategy implementation.",
          "base_classes": [
            "AgentStrategy"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CoordinationEngine": {
          "methods": [
            "__init__",
            "start",
            "stop",
            "get_status"
          ],
          "docstring": "Base coordination engine interface.",
          "base_classes": [
            "ABC"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TaskCoordinationEngine": {
          "methods": [
            "__init__",
            "start",
            "stop",
            "get_status",
            "assign_task"
          ],
          "docstring": "Task coordination engine implementation.",
          "base_classes": [
            "CoordinationEngine"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PerformanceMonitoringEngine": {
          "methods": [
            "__init__",
            "start",
            "stop",
            "get_status",
            "record_metric",
            "get_metrics"
          ],
          "docstring": "Performance monitoring engine implementation.",
          "base_classes": [
            "CoordinationEngine"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SwarmCoordinationOrchestrator": {
          "methods": [
            "__init__",
            "initialize",
            "create_swarm",
            "join_swarm",
            "get_swarm_status"
          ],
          "docstring": "Swarm coordination orchestrator implementation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\agent_scripts\\agent5_consolidation_coordination_manager": {
      "file_path": "docs\\archive\\agent_scripts\\agent5_consolidation_coordination_manager.py",
      "functions": [
        "main",
        "__init__",
        "initialize_consolidation_coordination",
        "coordinate_consolidation_chunks",
        "monitor_consolidation_progress",
        "track_business_value",
        "coordinate_agent_communication",
        "generate_coordination_report",
        "save_coordination_status",
        "execute_consolidation_coordination"
      ],
      "classes": {
        "Agent5ConsolidationCoordinationManager": {
          "methods": [
            "__init__",
            "initialize_consolidation_coordination",
            "coordinate_consolidation_chunks",
            "monitor_consolidation_progress",
            "track_business_value",
            "coordinate_agent_communication",
            "generate_coordination_report",
            "save_coordination_status",
            "execute_consolidation_coordination"
          ],
          "docstring": "Agent-5 Consolidation Coordination Manager",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\enhanced_communication_protocols": {
      "file_path": "docs\\archive\\consolidated_files\\enhanced_communication_protocols.py",
      "functions": [
        "get_enhanced_protocols",
        "send_enhanced_message",
        "broadcast_enhanced_message",
        "get_protocol_health",
        "initialize_enhanced_protocols",
        "update_success_rate",
        "record_success",
        "record_failure",
        "trip_circuit_breaker",
        "reset_circuit_breaker",
        "__init__",
        "_initialize_agent_health",
        "_start_delivery_workers",
        "_delivery_worker",
        "_process_message_delivery",
        "_is_agent_healthy",
        "_attempt_delivery_with_fallback",
        "_get_delivery_channels",
        "_deliver_via_channel",
        "_deliver_pyautogui",
        "_deliver_inbox",
        "_deliver_direct_api",
        "_deliver_broadcast",
        "send_message",
        "broadcast_message",
        "get_protocol_status",
        "reset_agent_health",
        "shutdown"
      ],
      "classes": {
        "CommunicationPriority": {
          "methods": [],
          "docstring": "Enhanced priority levels with SLA requirements.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DeliveryChannel": {
          "methods": [],
          "docstring": "Available delivery channels.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ProtocolMetrics": {
          "methods": [
            "update_success_rate"
          ],
          "docstring": "Communication protocol performance metrics.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentHealthStatus": {
          "methods": [
            "record_success",
            "record_failure",
            "trip_circuit_breaker",
            "reset_circuit_breaker"
          ],
          "docstring": "Agent health monitoring status.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EnhancedCommunicationProtocols": {
          "methods": [
            "__init__",
            "_initialize_agent_health",
            "_start_delivery_workers",
            "_delivery_worker",
            "_process_message_delivery",
            "_is_agent_healthy",
            "_attempt_delivery_with_fallback",
            "_get_delivery_channels",
            "_deliver_via_channel",
            "_deliver_pyautogui",
            "_deliver_inbox",
            "_deliver_direct_api",
            "_deliver_broadcast",
            "send_message",
            "broadcast_message",
            "get_protocol_status",
            "reset_agent_health",
            "shutdown"
          ],
          "docstring": "Enhanced communication protocols with advanced features.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\core_coordination": {
      "file_path": "docs\\archive\\consolidated_files\\core_coordination.py",
      "functions": [
        "create_agent_info",
        "create_task",
        "create_resource",
        "create_agent_coordinator",
        "create_task_coordinator",
        "create_resource_coordinator",
        "main",
        "is_online",
        "can_accept_task",
        "to_dict",
        "assign_to_agent",
        "start_task",
        "complete_task",
        "fail_task",
        "to_dict",
        "is_available",
        "allocate",
        "deallocate",
        "to_dict",
        "initialize",
        "start",
        "stop",
        "get_status",
        "cleanup",
        "register_agent",
        "unregister_agent",
        "get_agent",
        "list_agents",
        "get_available_agents",
        "create_task",
        "assign_task",
        "get_task",
        "list_tasks",
        "get_pending_tasks",
        "register_resource",
        "unregister_resource",
        "allocate_resource",
        "deallocate_resource",
        "get_available_resources",
        "__init__",
        "initialize",
        "start",
        "stop",
        "get_status",
        "cleanup",
        "register_agent",
        "unregister_agent",
        "get_agent",
        "list_agents",
        "get_available_agents",
        "__init__",
        "initialize",
        "start",
        "stop",
        "get_status",
        "cleanup",
        "create_task",
        "assign_task",
        "get_task",
        "list_tasks",
        "get_pending_tasks",
        "__init__",
        "initialize",
        "start",
        "stop",
        "get_status",
        "cleanup",
        "register_resource",
        "unregister_resource",
        "allocate_resource",
        "deallocate_resource",
        "get_available_resources"
      ],
      "classes": {
        "CoordinationStatus": {
          "methods": [],
          "docstring": "Coordination status enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TaskStatus": {
          "methods": [],
          "docstring": "Task status enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ResourceStatus": {
          "methods": [],
          "docstring": "Resource status enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentInfo": {
          "methods": [
            "is_online",
            "can_accept_task",
            "to_dict"
          ],
          "docstring": "Agent information structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "Task": {
          "methods": [
            "assign_to_agent",
            "start_task",
            "complete_task",
            "fail_task",
            "to_dict"
          ],
          "docstring": "Task structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "Resource": {
          "methods": [
            "is_available",
            "allocate",
            "deallocate",
            "to_dict"
          ],
          "docstring": "Resource structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ICoordinator": {
          "methods": [
            "initialize",
            "start",
            "stop",
            "get_status",
            "cleanup"
          ],
          "docstring": "Base coordinator interface.",
          "base_classes": [
            "ABC"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "IAgentCoordinator": {
          "methods": [
            "register_agent",
            "unregister_agent",
            "get_agent",
            "list_agents",
            "get_available_agents"
          ],
          "docstring": "Agent coordination interface.",
          "base_classes": [
            "ICoordinator"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ITaskCoordinator": {
          "methods": [
            "create_task",
            "assign_task",
            "get_task",
            "list_tasks",
            "get_pending_tasks"
          ],
          "docstring": "Task coordination interface.",
          "base_classes": [
            "ICoordinator"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "IResourceCoordinator": {
          "methods": [
            "register_resource",
            "unregister_resource",
            "allocate_resource",
            "deallocate_resource",
            "get_available_resources"
          ],
          "docstring": "Resource coordination interface.",
          "base_classes": [
            "ICoordinator"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentCoordinator": {
          "methods": [
            "__init__",
            "initialize",
            "start",
            "stop",
            "get_status",
            "cleanup",
            "register_agent",
            "unregister_agent",
            "get_agent",
            "list_agents",
            "get_available_agents"
          ],
          "docstring": "Agent coordination implementation.",
          "base_classes": [
            "IAgentCoordinator"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TaskCoordinator": {
          "methods": [
            "__init__",
            "initialize",
            "start",
            "stop",
            "get_status",
            "cleanup",
            "create_task",
            "assign_task",
            "get_task",
            "list_tasks",
            "get_pending_tasks"
          ],
          "docstring": "Task coordination implementation.",
          "base_classes": [
            "ITaskCoordinator"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ResourceCoordinator": {
          "methods": [
            "__init__",
            "initialize",
            "start",
            "stop",
            "get_status",
            "cleanup",
            "register_resource",
            "unregister_resource",
            "allocate_resource",
            "deallocate_resource",
            "get_available_resources"
          ],
          "docstring": "Resource coordination implementation.",
          "base_classes": [
            "IResourceCoordinator"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\message_queue_persistence": {
      "file_path": "docs\\archive\\consolidated_files\\message_queue_persistence.py",
      "functions": [
        "__init__",
        "load_entries",
        "save_entries",
        "atomic_operation",
        "__init__",
        "to_dict",
        "from_dict"
      ],
      "classes": {
        "FileQueuePersistence": {
          "methods": [
            "__init__",
            "load_entries",
            "save_entries",
            "atomic_operation"
          ],
          "docstring": "Handles file-based queue persistence operations.",
          "base_classes": [
            "IQueuePersistence"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "QueueEntry": {
          "methods": [
            "__init__",
            "to_dict",
            "from_dict"
          ],
          "docstring": "Queue entry data structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\core_configuration": {
      "file_path": "docs\\archive\\consolidated_files\\core_configuration.py",
      "functions": [
        "create_environment_config",
        "create_agent_config",
        "create_system_config",
        "create_validation_config",
        "create_unified_configuration",
        "create_configuration_manager",
        "main",
        "validate",
        "validate",
        "validate",
        "validate",
        "validate",
        "to_dict",
        "save_to_file",
        "load_from_file",
        "__init__",
        "load_config",
        "save_config",
        "get_config",
        "update_config",
        "validate_config",
        "get_config_summary"
      ],
      "classes": {
        "Environment": {
          "methods": [],
          "docstring": "Environment enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EnvironmentConfig": {
          "methods": [
            "validate"
          ],
          "docstring": "Environment configuration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentType": {
          "methods": [],
          "docstring": "Agent type enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentConfig": {
          "methods": [
            "validate"
          ],
          "docstring": "Agent configuration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SystemConfig": {
          "methods": [
            "validate"
          ],
          "docstring": "System configuration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ValidationLevel": {
          "methods": [],
          "docstring": "Validation level enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ValidationConfig": {
          "methods": [
            "validate"
          ],
          "docstring": "Validation configuration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "UnifiedConfiguration": {
          "methods": [
            "validate",
            "to_dict",
            "save_to_file",
            "load_from_file"
          ],
          "docstring": "Unified configuration system.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ConfigurationManager": {
          "methods": [
            "__init__",
            "load_config",
            "save_config",
            "get_config",
            "update_config",
            "validate_config",
            "get_config_summary"
          ],
          "docstring": "Configuration manager for unified configuration system.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\message_queue_pyautogui_integration": {
      "file_path": "docs\\archive\\consolidated_files\\message_queue_pyautogui_integration.py",
      "functions": [
        "get_message_queue_pyautogui_integration",
        "create_queue_pyautogui_delivery_callback",
        "get_queue_delivery_statistics",
        "reset_queue_delivery_statistics",
        "enqueue_message_with_pyautogui_delivery",
        "__init__",
        "create_pyautogui_delivery_callback",
        "_convert_to_unified_message",
        "_parse_message_type",
        "_parse_priority",
        "get_delivery_statistics",
        "reset_statistics",
        "pyautogui_delivery_callback"
      ],
      "classes": {
        "MessageQueuePyAutoGUIIntegration": {
          "methods": [
            "__init__",
            "create_pyautogui_delivery_callback",
            "_convert_to_unified_message",
            "_parse_message_type",
            "_parse_priority",
            "get_delivery_statistics",
            "reset_statistics"
          ],
          "docstring": "Integration layer between message queue and PyAutoGUI delivery.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\message_queue_interfaces": {
      "file_path": "docs\\archive\\consolidated_files\\message_queue_interfaces.py",
      "functions": [
        "info",
        "warning",
        "error",
        "message",
        "queue_id",
        "to_dict",
        "from_dict",
        "enqueue",
        "dequeue",
        "mark_delivered",
        "mark_failed",
        "get_statistics",
        "cleanup_expired",
        "load_entries",
        "save_entries",
        "atomic_operation",
        "stop_processing",
        "max_queue_size",
        "processing_batch_size",
        "max_age_days",
        "retry_base_delay",
        "retry_max_delay",
        "cleanup_interval"
      ],
      "classes": {
        "IMessageQueueLogger": {
          "methods": [
            "info",
            "warning",
            "error"
          ],
          "docstring": "Interface for message queue logging operations.",
          "base_classes": [
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "IQueueEntry": {
          "methods": [
            "message",
            "queue_id",
            "to_dict",
            "from_dict"
          ],
          "docstring": "Interface for queue entry objects.",
          "base_classes": [
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "IMessageQueue": {
          "methods": [
            "enqueue",
            "dequeue",
            "mark_delivered",
            "mark_failed",
            "get_statistics",
            "cleanup_expired"
          ],
          "docstring": "Abstract interface for message queue operations.",
          "base_classes": [
            "ABC"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "IQueuePersistence": {
          "methods": [
            "load_entries",
            "save_entries",
            "atomic_operation"
          ],
          "docstring": "Abstract interface for queue persistence operations.",
          "base_classes": [
            "ABC"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "IQueueProcessor": {
          "methods": [
            "stop_processing"
          ],
          "docstring": "Abstract interface for queue processing operations.",
          "base_classes": [
            "ABC"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "IQueueConfig": {
          "methods": [
            "max_queue_size",
            "processing_batch_size",
            "max_age_days",
            "retry_base_delay",
            "retry_max_delay",
            "cleanup_interval"
          ],
          "docstring": "Interface for queue configuration.",
          "base_classes": [
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\enhanced_config_system": {
      "file_path": "docs\\archive\\consolidated_files\\enhanced_config_system.py",
      "functions": [
        "get_enhanced_config_system",
        "initialize_enhanced_config",
        "__init__",
        "get",
        "put",
        "invalidate",
        "clear",
        "get_stats",
        "__init__",
        "_load_builtin_schemas",
        "add_schema",
        "validate",
        "validate_file",
        "__init__",
        "start",
        "stop",
        "add_file",
        "remove_file",
        "_monitor_files",
        "__init__",
        "_load_builtin_migrations",
        "migrate",
        "_migrate_unified_config_v1_to_v2",
        "_migrate_unified_config_v2_to_v2_1",
        "_migrate_coordinates_v1_to_v2",
        "add_migration",
        "__init__",
        "_setup_hot_reloading",
        "_on_config_changed",
        "load_config",
        "save_config",
        "migrate_config",
        "get_cache_stats",
        "start_hot_reload",
        "stop_hot_reload",
        "validate_all_configs"
      ],
      "classes": {
        "ConfigValidationError": {
          "methods": [],
          "docstring": "Configuration validation error.",
          "base_classes": [
            "Exception"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ConfigMigrationError": {
          "methods": [],
          "docstring": "Configuration migration error.",
          "base_classes": [
            "Exception"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ConfigMetadata": {
          "methods": [],
          "docstring": "Configuration file metadata for caching and validation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ValidationSchema": {
          "methods": [],
          "docstring": "JSON Schema validation specification.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ConfigCache": {
          "methods": [
            "__init__",
            "get",
            "put",
            "invalidate",
            "clear",
            "get_stats"
          ],
          "docstring": "High-performance configuration cache with compression.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ConfigValidator": {
          "methods": [
            "__init__",
            "_load_builtin_schemas",
            "add_schema",
            "validate",
            "validate_file"
          ],
          "docstring": "Advanced configuration validation with JSON Schema support.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ConfigHotReloader": {
          "methods": [
            "__init__",
            "start",
            "stop",
            "add_file",
            "remove_file",
            "_monitor_files"
          ],
          "docstring": "Hot-reloading system with file system monitoring.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ConfigMigrator": {
          "methods": [
            "__init__",
            "_load_builtin_migrations",
            "migrate",
            "_migrate_unified_config_v1_to_v2",
            "_migrate_unified_config_v2_to_v2_1",
            "_migrate_coordinates_v1_to_v2",
            "add_migration"
          ],
          "docstring": "Configuration migration tools for version upgrades.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EnhancedConfigSystem": {
          "methods": [
            "__init__",
            "_setup_hot_reloading",
            "_on_config_changed",
            "load_config",
            "save_config",
            "migrate_config",
            "get_cache_stats",
            "start_hot_reload",
            "stop_hot_reload",
            "validate_all_configs"
          ],
          "docstring": "Enhanced configuration management system with all optimizations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\enhanced_unified_config": {
      "file_path": "docs\\archive\\consolidated_files\\enhanced_unified_config.py",
      "functions": [
        "get_enhanced_config",
        "get_config",
        "get_agent_config",
        "get_system_config",
        "get_timeout_config",
        "get_threshold_config",
        "get_test_config",
        "set_config",
        "validate_configuration",
        "export_configuration",
        "get_config_logger",
        "validate_enhanced_config_system",
        "initialize_enhanced_config_system",
        "__init__",
        "load_env_file",
        "get_env_var",
        "__init__",
        "_initialize_configuration",
        "_load_agent_configurations",
        "_get_agent_timeout_config",
        "_load_core_configurations",
        "get_config",
        "get_agent_config",
        "get_system_config",
        "get_timeout_config",
        "get_threshold_config",
        "get_test_config",
        "set_config",
        "validate_configuration",
        "export_configuration"
      ],
      "classes": {
        "ConfigEnvironment": {
          "methods": [],
          "docstring": "Configuration environment types.",
          "base_classes": [
            "str",
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ConfigSource": {
          "methods": [],
          "docstring": "Configuration source types.",
          "base_classes": [
            "str",
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ConfigValue": {
          "methods": [],
          "docstring": "Configuration value with metadata.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentConfig": {
          "methods": [],
          "docstring": "Agent-specific configuration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SystemConfig": {
          "methods": [],
          "docstring": "System-wide configuration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EnvironmentLoader": {
          "methods": [
            "__init__",
            "load_env_file",
            "get_env_var"
          ],
          "docstring": "Loads and validates environment variables for unified configuration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EnhancedUnifiedConfig": {
          "methods": [
            "__init__",
            "_initialize_configuration",
            "_load_agent_configurations",
            "_get_agent_timeout_config",
            "_load_core_configurations",
            "get_config",
            "get_agent_config",
            "get_system_config",
            "get_timeout_config",
            "get_threshold_config",
            "get_test_config",
            "set_config",
            "validate_configuration",
            "export_configuration"
          ],
          "docstring": "Enhanced unified configuration system consolidating all configuration management.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\message_queue_statistics": {
      "file_path": "docs\\archive\\consolidated_files\\message_queue_statistics.py",
      "functions": [
        "calculate_statistics",
        "_get_empty_statistics",
        "_get_priority_bucket",
        "_get_retry_bucket",
        "_format_age_statistics",
        "_format_duration",
        "__init__",
        "assess_health",
        "_check_queue_size_health",
        "_check_processing_health",
        "_check_age_health",
        "_check_failure_health"
      ],
      "classes": {
        "QueueStatisticsCalculator": {
          "methods": [
            "calculate_statistics",
            "_get_empty_statistics",
            "_get_priority_bucket",
            "_get_retry_bucket",
            "_format_age_statistics",
            "_format_duration"
          ],
          "docstring": "Calculates comprehensive queue statistics.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "QueueHealthMonitor": {
          "methods": [
            "__init__",
            "assess_health",
            "_check_queue_size_health",
            "_check_processing_health",
            "_check_age_health",
            "_check_failure_health"
          ],
          "docstring": "Monitors queue health and provides recommendations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\message_archive": {
      "file_path": "docs\\archive\\consolidated_files\\message_archive.py",
      "functions": [
        "archive_coordination_message",
        "update_message_status",
        "get_archive_report",
        "__init__",
        "archive_message",
        "update_message_status",
        "get_messages_by_type",
        "get_messages_by_sender",
        "get_messages_by_priority",
        "get_recent_messages",
        "get_unprocessed_messages",
        "archive_coordination_message",
        "generate_archive_report",
        "cleanup_old_messages",
        "_save_to_file",
        "load_existing_archive"
      ],
      "classes": {
        "MessageType": {
          "methods": [],
          "docstring": "Message types for archiving",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MessagePriority": {
          "methods": [],
          "docstring": "Message priorities for archiving",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ArchivedMessage": {
          "methods": [],
          "docstring": "Archived message data structure",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MessageArchive": {
          "methods": [
            "__init__",
            "archive_message",
            "update_message_status",
            "get_messages_by_type",
            "get_messages_by_sender",
            "get_messages_by_priority",
            "get_recent_messages",
            "get_unprocessed_messages",
            "archive_coordination_message",
            "generate_archive_report",
            "cleanup_old_messages",
            "_save_to_file",
            "load_existing_archive"
          ],
          "docstring": "Comprehensive message archiving system",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\deployment\\deployment_models": {
      "file_path": "docs\\archive\\consolidated_files\\deployment\\deployment_models.py",
      "functions": [
        "__post_init__",
        "__post_init__",
        "duration",
        "success_rate",
        "update_efficiency_score",
        "__post_init__",
        "update_progress",
        "mark_completed",
        "mark_failed",
        "initialize",
        "deploy_to_target",
        "shutdown",
        "update_config"
      ],
      "classes": {
        "DeploymentPriority": {
          "methods": [],
          "docstring": "Deployment priority levels.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PatternType": {
          "methods": [],
          "docstring": "Types of patterns for deployment.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DeploymentConfig": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Configuration for deployment operations using unified config system.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MassDeploymentTarget": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Target for mass deployment operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DeploymentMetrics": {
          "methods": [
            "duration",
            "success_rate",
            "update_efficiency_score"
          ],
          "docstring": "Metrics for deployment operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MaximumEfficiencyDeploymentStatus": {
          "methods": [
            "__post_init__",
            "update_progress",
            "mark_completed",
            "mark_failed"
          ],
          "docstring": "Status of deployment for maximum efficiency tracking.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DeploymentCoordinator": {
          "methods": [
            "initialize",
            "deploy_to_target",
            "shutdown",
            "update_config"
          ],
          "docstring": "Coordinator for deployment operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\unified_messaging": {
      "file_path": "docs\\archive\\consolidated_files\\unified_messaging.py",
      "functions": [
        "__init__",
        "send_message",
        "receive_message",
        "broadcast_message"
      ],
      "classes": {
        "UnifiedMessagingSystem": {
          "methods": [
            "__init__",
            "send_message",
            "receive_message",
            "broadcast_message"
          ],
          "docstring": "Unified messaging system for all agent communication",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\deployment\\deployment_coordinator": {
      "file_path": "docs\\archive\\consolidated_files\\deployment\\deployment_coordinator.py",
      "functions": [
        "__init__",
        "track_deployment",
        "get_deployment_stats",
        "cleanup_completed_deployments"
      ],
      "classes": {
        "ExtendedDeploymentCoordinator": {
          "methods": [
            "__init__",
            "track_deployment",
            "get_deployment_stats",
            "cleanup_completed_deployments"
          ],
          "docstring": "Extended deployment coordinator with additional functionality.",
          "base_classes": [
            "BaseDeploymentCoordinator"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\deployment\\models\\config_models": {
      "file_path": "docs\\archive\\consolidated_files\\deployment\\models\\config_models.py",
      "functions": [
        "__post_init__",
        "__post_init__"
      ],
      "classes": {
        "DeploymentConfig": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Configuration for deployment operations using unified config system.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DeploymentCoordinatorConfig": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Configuration specific to deployment coordinator.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\deployment\\models\\factory_functions": {
      "file_path": "docs\\archive\\consolidated_files\\deployment\\models\\factory_functions.py",
      "functions": [
        "create_default_config",
        "create_deployment_target",
        "create_deployment_status",
        "create_deployment_metrics",
        "create_deployment_target_from_pattern",
        "create_batch_deployment_targets",
        "create_deployment_status_for_agent",
        "create_custom_config",
        "get_agent_domain",
        "get_priority_for_pattern",
        "get_all_agent_domains",
        "get_all_pattern_priorities"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\unified_config": {
      "file_path": "docs\\archive\\consolidated_files\\unified_config.py",
      "functions": [
        "get_unified_config",
        "reload_config",
        "get_timeout_config",
        "get_agent_config",
        "get_threshold_config",
        "get_browser_config",
        "get_test_config",
        "get_file_pattern_config",
        "get_report_config",
        "agent_ids",
        "project_patterns",
        "alert_rules",
        "benchmark_targets",
        "__post_init__",
        "validate",
        "get_config_summary"
      ],
      "classes": {
        "TimeoutConfig": {
          "methods": [],
          "docstring": "Centralized timeout configurations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentConfig": {
          "methods": [
            "agent_ids"
          ],
          "docstring": "Centralized agent configuration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "FilePatternConfig": {
          "methods": [
            "project_patterns"
          ],
          "docstring": "Centralized file pattern configurations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ThresholdConfig": {
          "methods": [
            "alert_rules",
            "benchmark_targets"
          ],
          "docstring": "Centralized threshold and alert configurations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "BrowserConfig": {
          "methods": [],
          "docstring": "Centralized browser interaction configuration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TestConfig": {
          "methods": [],
          "docstring": "Centralized test configuration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ReportConfig": {
          "methods": [],
          "docstring": "Centralized reporting configuration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "UnifiedConfig": {
          "methods": [
            "__post_init__",
            "validate",
            "get_config_summary"
          ],
          "docstring": "Unified configuration system consolidating all config.py files.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ReportFormat": {
          "methods": [],
          "docstring": null,
          "base_classes": [
            "str",
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\deployment\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\deployment\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\deployment\\deployment_orchestrator_engine": {
      "file_path": "docs\\archive\\consolidated_files\\deployment\\deployment_orchestrator_engine.py",
      "functions": [
        "__init__",
        "initialize_system",
        "deploy_to_agent",
        "mass_deploy",
        "get_deployment_status",
        "get_metrics",
        "get_agent_domains",
        "update_config",
        "shutdown",
        "_setup_agent_domains",
        "_validate_target"
      ],
      "classes": {
        "DeploymentOrchestratorEngine": {
          "methods": [
            "__init__",
            "initialize_system",
            "deploy_to_agent",
            "mass_deploy",
            "get_deployment_status",
            "get_metrics",
            "get_agent_domains",
            "update_config",
            "shutdown",
            "_setup_agent_domains",
            "_validate_target"
          ],
          "docstring": "Core engine for deployment orchestrator operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\deployment\\coordinators\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\deployment\\coordinators\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\deployment\\models\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\deployment\\models\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\deployment\\models\\enums": {
      "file_path": "docs\\archive\\consolidated_files\\deployment\\models\\enums.py",
      "functions": [],
      "classes": {
        "DeploymentPriority": {
          "methods": [],
          "docstring": "Deployment priority levels.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PatternType": {
          "methods": [],
          "docstring": "Types of patterns for deployment.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DeploymentStatus": {
          "methods": [],
          "docstring": "Deployment status values.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\deployment\\models\\data_models": {
      "file_path": "docs\\archive\\consolidated_files\\deployment\\models\\data_models.py",
      "functions": [
        "__post_init__",
        "duration",
        "success_rate",
        "update_efficiency_score",
        "__post_init__",
        "update_progress",
        "mark_completed",
        "mark_failed"
      ],
      "classes": {
        "MassDeploymentTarget": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Target for mass deployment operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DeploymentMetrics": {
          "methods": [
            "duration",
            "success_rate",
            "update_efficiency_score"
          ],
          "docstring": "Metrics for deployment operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MaximumEfficiencyDeploymentStatus": {
          "methods": [
            "__post_init__",
            "update_progress",
            "mark_completed",
            "mark_failed"
          ],
          "docstring": "Status of deployment for maximum efficiency tracking.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\deployment\\coordinators\\deployment_executor": {
      "file_path": "docs\\archive\\consolidated_files\\deployment\\coordinators\\deployment_executor.py",
      "functions": [
        "create_deployment_executor",
        "__init__",
        "execute_deployment",
        "_generate_deployment_id",
        "_process_deployment",
        "get_deployment_status",
        "get_deployment_summary",
        "clear_deployment_history",
        "get_status"
      ],
      "classes": {
        "DeploymentExecutor": {
          "methods": [
            "__init__",
            "execute_deployment",
            "_generate_deployment_id",
            "_process_deployment",
            "get_deployment_status",
            "get_deployment_summary",
            "clear_deployment_history",
            "get_status"
          ],
          "docstring": "Simple deployment executor.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\deployment\\engines\\deployment_metrics_engine": {
      "file_path": "docs\\archive\\consolidated_files\\deployment\\engines\\deployment_metrics_engine.py",
      "functions": [
        "__init__",
        "start_deployment_tracking",
        "update_target_completion",
        "finish_deployment_tracking",
        "get_current_metrics",
        "get_metrics_summary",
        "get_historical_metrics",
        "analyze_performance_trends"
      ],
      "classes": {
        "DeploymentMetricsEngine": {
          "methods": [
            "__init__",
            "start_deployment_tracking",
            "update_target_completion",
            "finish_deployment_tracking",
            "get_current_metrics",
            "get_metrics_summary",
            "get_historical_metrics",
            "analyze_performance_trends"
          ],
          "docstring": "Tracks and analyzes deployment metrics.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\deployment\\engines\\deployment_execution_engine": {
      "file_path": "docs\\archive\\consolidated_files\\deployment\\engines\\deployment_execution_engine.py",
      "functions": [
        "__init__",
        "execute_deployment",
        "_execute_pattern",
        "_execute_file_operation",
        "_execute_system_integration",
        "_execute_optimization",
        "get_active_deployments",
        "cancel_deployment"
      ],
      "classes": {
        "DeploymentExecutionEngine": {
          "methods": [
            "__init__",
            "execute_deployment",
            "_execute_pattern",
            "_execute_file_operation",
            "_execute_system_integration",
            "_execute_optimization",
            "get_active_deployments",
            "cancel_deployment"
          ],
          "docstring": "Handles the execution of deployment tasks.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\deployment\\engines\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\deployment\\engines\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\deployment\\coordinators\\metrics_tracker": {
      "file_path": "docs\\archive\\consolidated_files\\deployment\\coordinators\\metrics_tracker.py",
      "functions": [
        "__init__",
        "update_deployment_metrics",
        "update_agent_status",
        "get_agent_status",
        "get_deployment_metrics",
        "get_metrics_summary",
        "_calculate_efficiency_score",
        "get_target_analysis",
        "get_performance_report",
        "reset_metrics",
        "export_metrics"
      ],
      "classes": {
        "DeploymentMetricsTracker": {
          "methods": [
            "__init__",
            "update_deployment_metrics",
            "update_agent_status",
            "get_agent_status",
            "get_deployment_metrics",
            "get_metrics_summary",
            "_calculate_efficiency_score",
            "get_target_analysis",
            "get_performance_report",
            "reset_metrics",
            "export_metrics"
          ],
          "docstring": "Tracker for deployment metrics and status reporting.\n\nManages metrics collection, status tracking, and reporting.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\deployment\\coordinators\\target_discovery": {
      "file_path": "docs\\archive\\consolidated_files\\deployment\\coordinators\\target_discovery.py",
      "functions": [
        "create_target_discovery_engine",
        "__init__",
        "discover_targets",
        "_find_targets",
        "_prioritize_targets",
        "_filter_targets",
        "get_discovery_summary",
        "clear_discovery_history",
        "get_status"
      ],
      "classes": {
        "TargetDiscoveryEngine": {
          "methods": [
            "__init__",
            "discover_targets",
            "_find_targets",
            "_prioritize_targets",
            "_filter_targets",
            "get_discovery_summary",
            "clear_discovery_history",
            "get_status"
          ],
          "docstring": "Simple target discovery engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\agent_communication\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\agent_communication\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\agent_communication\\agent_communication_engine_core": {
      "file_path": "docs\\archive\\consolidated_files\\agent_communication\\agent_communication_engine_core.py",
      "functions": [
        "_create_inbox_message_content",
        "is_valid_agent",
        "get_all_agent_names"
      ],
      "classes": {
        "AgentCommunicationEngineCore": {
          "methods": [
            "_create_inbox_message_content",
            "is_valid_agent",
            "get_all_agent_names"
          ],
          "docstring": "Core agent communication operations for Discord commander",
          "base_classes": [
            "AgentCommunicationEngineBase"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\agent_communication\\agent_communication_engine_base": {
      "file_path": "docs\\archive\\consolidated_files\\agent_communication\\agent_communication_engine_base.py",
      "functions": [
        "__init__",
        "_setup_logger",
        "_get_unified_utility",
        "validate_agent_name",
        "format_timestamp",
        "create_message_metadata"
      ],
      "classes": {
        "AgentCommunicationEngineBase": {
          "methods": [
            "__init__",
            "_setup_logger",
            "_get_unified_utility",
            "validate_agent_name",
            "format_timestamp",
            "create_message_metadata"
          ],
          "docstring": "Base class for agent communication operations",
          "base_classes": [
            "ABC"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\deployment\\engines\\deployment_discovery_engine": {
      "file_path": "docs\\archive\\consolidated_files\\deployment\\engines\\deployment_discovery_engine.py",
      "functions": [
        "__init__",
        "discover_targets",
        "_discover_file_targets",
        "_discover_system_targets",
        "_discover_optimization_targets",
        "prioritize_targets",
        "get_discovered_targets",
        "filter_targets"
      ],
      "classes": {
        "DeploymentDiscoveryEngine": {
          "methods": [
            "__init__",
            "discover_targets",
            "_discover_file_targets",
            "_discover_system_targets",
            "_discover_optimization_targets",
            "prioritize_targets",
            "get_discovered_targets",
            "filter_targets"
          ],
          "docstring": "Discovers and prioritizes deployment targets.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\unified_analytics": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\unified_analytics.py",
      "functions": [
        "__init__",
        "analyze_data",
        "process_metrics"
      ],
      "classes": {
        "UnifiedAnalyticsFramework": {
          "methods": [
            "__init__",
            "analyze_data",
            "process_metrics"
          ],
          "docstring": "Unified analytics framework for all agent operations",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\agent_communication\\agent_communication_engine_operations": {
      "file_path": "docs\\archive\\consolidated_files\\agent_communication\\agent_communication_engine_operations.py",
      "functions": [
        "get_agent_status_file_path"
      ],
      "classes": {
        "AgentCommunicationEngineOperations": {
          "methods": [
            "get_agent_status_file_path"
          ],
          "docstring": "Extended agent communication operations for Discord commander",
          "base_classes": [
            "AgentCommunicationEngineBase"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\coordinators\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\coordinators\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\analytics_orchestrator": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\analytics_orchestrator.py",
      "functions": [
        "create_analytics_orchestrator",
        "__init__",
        "register_engine",
        "unregister_engine",
        "start_engine",
        "stop_engine",
        "process_data",
        "get_engine_status",
        "get_all_engine_statuses",
        "get_engine_capabilities"
      ],
      "classes": {
        "AnalyticsOrchestrator": {
          "methods": [
            "__init__",
            "register_engine",
            "unregister_engine",
            "start_engine",
            "stop_engine",
            "process_data",
            "get_engine_status",
            "get_all_engine_statuses",
            "get_engine_capabilities"
          ],
          "docstring": "Main orchestrator for unified analytics system.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\engines\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\engines\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\engines\\caching_engine": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\engines\\caching_engine.py",
      "functions": [
        "create_caching_engine",
        "__init__",
        "get",
        "set",
        "delete",
        "clear",
        "get_stats",
        "get_status"
      ],
      "classes": {
        "CachingEngine": {
          "methods": [
            "__init__",
            "get",
            "set",
            "delete",
            "clear",
            "get_stats",
            "get_status"
          ],
          "docstring": "Simple caching engine for analytics processing.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\engines\\batch_analytics_engine": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\engines\\batch_analytics_engine.py",
      "functions": [
        "create_batch_analytics_engine",
        "__init__",
        "process_batch",
        "_process_items",
        "_calculate_metrics",
        "get_stats",
        "clear_stats",
        "get_status"
      ],
      "classes": {
        "BatchAnalyticsEngine": {
          "methods": [
            "__init__",
            "process_batch",
            "_process_items",
            "_calculate_metrics",
            "get_stats",
            "clear_stats",
            "get_status"
          ],
          "docstring": "Simple batch analytics processing engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\engines\\metrics_engine": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\engines\\metrics_engine.py",
      "functions": [
        "create_metrics_engine",
        "__init__",
        "record_metric",
        "increment_metric",
        "get_metric",
        "get_all_metrics",
        "record_performance",
        "record_error",
        "get_performance_summary",
        "get_error_summary",
        "clear_metrics",
        "get_status"
      ],
      "classes": {
        "MetricsEngine": {
          "methods": [
            "__init__",
            "record_metric",
            "increment_metric",
            "get_metric",
            "get_all_metrics",
            "record_performance",
            "record_error",
            "get_performance_summary",
            "get_error_summary",
            "clear_metrics",
            "get_status"
          ],
          "docstring": "Simple metrics collection and monitoring engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\engines\\coordination_analytics_engine": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\engines\\coordination_analytics_engine.py",
      "functions": [
        "create_coordination_analytics_engine",
        "__init__",
        "collect_analytics",
        "_extract_metrics",
        "_generate_insights",
        "get_analytics_summary",
        "clear_analytics_history",
        "get_status"
      ],
      "classes": {
        "CoordinationAnalyticsEngine": {
          "methods": [
            "__init__",
            "collect_analytics",
            "_extract_metrics",
            "_generate_insights",
            "get_analytics_summary",
            "clear_analytics_history",
            "get_status"
          ],
          "docstring": "Simple coordination analytics engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\intelligence\\anomaly_detection_engine": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\intelligence\\anomaly_detection_engine.py",
      "functions": [
        "__init__",
        "detect_anomalies",
        "_detect_statistical_anomalies",
        "_detect_performance_anomalies",
        "get_anomaly_summary"
      ],
      "classes": {
        "AnomalyDetectionEngine": {
          "methods": [
            "__init__",
            "detect_anomalies",
            "_detect_statistical_anomalies",
            "_detect_performance_anomalies",
            "get_anomaly_summary"
          ],
          "docstring": "Simple anomaly detection engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\coordinators\\analytics_coordinator": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\coordinators\\analytics_coordinator.py",
      "functions": [
        "__init__",
        "register_engine",
        "register_callback",
        "get_status"
      ],
      "classes": {
        "AnalyticsCoordinator": {
          "methods": [
            "__init__",
            "register_engine",
            "register_callback",
            "get_status"
          ],
          "docstring": "Simple analytics coordinator.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\coordinators\\processing_coordinator": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\coordinators\\processing_coordinator.py",
      "functions": [
        "__init__",
        "register_processor",
        "get_processing_stats",
        "reset_stats"
      ],
      "classes": {
        "ProcessingCoordinator": {
          "methods": [
            "__init__",
            "register_processor",
            "get_processing_stats",
            "reset_stats"
          ],
          "docstring": "Simple processing coordinator.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\intelligence\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\intelligence\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\engines\\realtime_analytics_engine": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\engines\\realtime_analytics_engine.py",
      "functions": [
        "create_realtime_analytics_engine",
        "__init__",
        "add_data",
        "get_queue_size",
        "get_stats",
        "reset_stats",
        "get_status"
      ],
      "classes": {
        "RealtimeAnalyticsEngine": {
          "methods": [
            "__init__",
            "add_data",
            "get_queue_size",
            "get_stats",
            "reset_stats",
            "get_status"
          ],
          "docstring": "Simple real-time analytics processing engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\intelligence\\business_intelligence_engine": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\intelligence\\business_intelligence_engine.py",
      "functions": [
        "__init__"
      ],
      "classes": {
        "BusinessIntelligenceEngine": {
          "methods": [
            "__init__"
          ],
          "docstring": "Unified business intelligence engine with core and operations functionality.",
          "base_classes": [
            "BusinessIntelligenceEngineCore",
            "BusinessIntelligenceEngineOperations"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\intelligence\\business_intelligence_engine_operations": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\intelligence\\business_intelligence_engine_operations.py",
      "functions": [
        "__init__",
        "generate_dashboard_data",
        "_generate_summary",
        "_get_date_range",
        "_get_key_metrics",
        "_get_numeric_fields",
        "_generate_chart_data",
        "_generate_alerts",
        "export_insights",
        "_export_csv",
        "get_performance_metrics",
        "optimize_performance"
      ],
      "classes": {
        "BusinessIntelligenceEngineOperations": {
          "methods": [
            "__init__",
            "generate_dashboard_data",
            "_generate_summary",
            "_get_date_range",
            "_get_key_metrics",
            "_get_numeric_fields",
            "_generate_chart_data",
            "_generate_alerts",
            "export_insights",
            "_export_csv",
            "get_performance_metrics",
            "optimize_performance"
          ],
          "docstring": "Extended operations for business intelligence.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\intelligence\\business_intelligence_engine_core": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\intelligence\\business_intelligence_engine_core.py",
      "functions": [
        "__init__",
        "generate_insights",
        "_analyze_data",
        "_get_numeric_fields",
        "_analyze_field",
        "_generate_recommendations",
        "_calculate_kpis",
        "get_insights_history",
        "clear_insights",
        "get_metrics",
        "update_metrics"
      ],
      "classes": {
        "BusinessIntelligenceEngineCore": {
          "methods": [
            "__init__",
            "generate_insights",
            "_analyze_data",
            "_get_numeric_fields",
            "_analyze_field",
            "_generate_recommendations",
            "_calculate_kpis",
            "get_insights_history",
            "clear_insights",
            "get_metrics",
            "update_metrics"
          ],
          "docstring": "Core business intelligence engine functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\intelligence\\pattern_analysis\\anomaly_detector": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\intelligence\\pattern_analysis\\anomaly_detector.py",
      "functions": [
        "__init__",
        "detect_anomalies",
        "_detect_statistical_anomalies",
        "detect_outliers",
        "_detect_outliers_iqr",
        "_detect_outliers_zscore"
      ],
      "classes": {
        "AnomalyDetector": {
          "methods": [
            "__init__",
            "detect_anomalies",
            "_detect_statistical_anomalies",
            "detect_outliers",
            "_detect_outliers_iqr",
            "_detect_outliers_zscore"
          ],
          "docstring": "Anomaly detection functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\interfaces\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\interfaces\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\intelligence\\pattern_analysis\\pattern_extractor": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\intelligence\\pattern_analysis\\pattern_extractor.py",
      "functions": [
        "__init__",
        "extract_patterns",
        "_extract_frequency_patterns",
        "_extract_value_patterns",
        "_extract_temporal_patterns"
      ],
      "classes": {
        "PatternExtractor": {
          "methods": [
            "__init__",
            "extract_patterns",
            "_extract_frequency_patterns",
            "_extract_value_patterns",
            "_extract_temporal_patterns"
          ],
          "docstring": "Pattern extraction functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\intelligence\\pattern_analysis_engine": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\intelligence\\pattern_analysis_engine.py",
      "functions": [
        "create_pattern_analysis_engine",
        "__init__",
        "analyze_patterns",
        "get_analysis_summary",
        "clear_analysis_history",
        "get_status",
        "extract_patterns",
        "analyze_trends",
        "detect_anomalies",
        "detect_outliers"
      ],
      "classes": {
        "PatternAnalysisEngine": {
          "methods": [
            "__init__",
            "analyze_patterns",
            "get_analysis_summary",
            "clear_analysis_history",
            "get_status",
            "extract_patterns",
            "analyze_trends",
            "detect_anomalies",
            "detect_outliers"
          ],
          "docstring": "Simple pattern analysis engine - V2 compliant.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\intelligence\\pattern_analysis\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\intelligence\\pattern_analysis\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\interfaces\\analytics_interfaces": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\interfaces\\analytics_interfaces.py",
      "functions": [
        "__init__",
        "start",
        "stop",
        "process_data",
        "get_capabilities",
        "update_metrics",
        "__init__",
        "analyze_patterns",
        "detect_anomalies",
        "generate_insights",
        "__init__",
        "validate_data",
        "transform_data",
        "aggregate_results"
      ],
      "classes": {
        "AnalyticsEngine": {
          "methods": [
            "__init__",
            "start",
            "stop",
            "process_data",
            "get_capabilities",
            "update_metrics"
          ],
          "docstring": "Base analytics engine interface.",
          "base_classes": [
            "ABC"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "IntelligenceEngine": {
          "methods": [
            "__init__",
            "analyze_patterns",
            "detect_anomalies",
            "generate_insights"
          ],
          "docstring": "Intelligence analytics engine interface.",
          "base_classes": [
            "AnalyticsEngine"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ProcessingEngine": {
          "methods": [
            "__init__",
            "validate_data",
            "transform_data",
            "aggregate_results"
          ],
          "docstring": "Data processing analytics engine interface.",
          "base_classes": [
            "AnalyticsEngine"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\intelligence\\predictive_modeling_engine": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\intelligence\\predictive_modeling_engine.py",
      "functions": [
        "create_predictive_modeling_engine",
        "__init__",
        "create_model",
        "train_model",
        "predict",
        "_simulate_prediction",
        "get_model_info",
        "get_all_models",
        "delete_model",
        "get_predictions_summary",
        "get_status"
      ],
      "classes": {
        "PredictiveModelingEngine": {
          "methods": [
            "__init__",
            "create_model",
            "train_model",
            "predict",
            "_simulate_prediction",
            "get_model_info",
            "get_all_models",
            "delete_model",
            "get_predictions_summary",
            "get_status"
          ],
          "docstring": "Simple predictive modeling engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "SignalAgent"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\models\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\models\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\models\\coordination_analytics_models": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\models\\coordination_analytics_models.py",
      "functions": [
        "to_dict",
        "get_summary",
        "to_dict",
        "validate"
      ],
      "classes": {
        "AnalyticsMetric": {
          "methods": [],
          "docstring": "Analytics metric types.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "OptimizationRecommendation": {
          "methods": [],
          "docstring": "Optimization recommendation types.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CoordinationAnalyticsData": {
          "methods": [
            "to_dict",
            "get_summary"
          ],
          "docstring": "Coordination analytics data structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AnalyticsReport": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Analytics report structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AnalyticsConfig": {
          "methods": [
            "validate"
          ],
          "docstring": "Analytics configuration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\orchestrators\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\orchestrators\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\models\\analytics_models": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\models\\analytics_models.py",
      "functions": [],
      "classes": {
        "AnalyticsInfo": {
          "methods": [],
          "docstring": "Analytics information model.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AnalyticsData": {
          "methods": [],
          "docstring": "Analytics data model.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AnalyticsResult": {
          "methods": [],
          "docstring": "Analytics result model.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AnalyticsMetrics": {
          "methods": [],
          "docstring": "Analytics metrics model.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\models\\analytics_enums": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\models\\analytics_enums.py",
      "functions": [],
      "classes": {
        "AnalyticsStatus": {
          "methods": [],
          "docstring": "Analytics status enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AnalyticsType": {
          "methods": [],
          "docstring": "Analytics type enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "IntelligenceType": {
          "methods": [],
          "docstring": "Intelligence type enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ProcessingMode": {
          "methods": [],
          "docstring": "Processing mode enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\orchestrators\\coordination_analytics_orchestrator": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\orchestrators\\coordination_analytics_orchestrator.py",
      "functions": [
        "create_coordination_analytics_system",
        "__init__",
        "start",
        "stop",
        "process_analytics",
        "_generate_recommendations",
        "get_analytics_report",
        "get_status",
        "reset_stats"
      ],
      "classes": {
        "CoordinationAnalyticsSystem": {
          "methods": [
            "__init__",
            "start",
            "stop",
            "process_analytics",
            "_generate_recommendations",
            "get_analytics_report",
            "get_status",
            "reset_stats"
          ],
          "docstring": "Simple coordination analytics orchestrator.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\processors\\prediction\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\processors\\prediction\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\prediction\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\prediction\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\processors\\prediction_processor": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\processors\\prediction_processor.py",
      "functions": [
        "create_prediction_processor",
        "__init__",
        "process_prediction",
        "_validate_prediction",
        "batch_process_predictions",
        "get_processing_stats",
        "reset_stats",
        "get_status"
      ],
      "classes": {
        "PredictionProcessor": {
          "methods": [
            "__init__",
            "process_prediction",
            "_validate_prediction",
            "batch_process_predictions",
            "get_processing_stats",
            "reset_stats",
            "get_status"
          ],
          "docstring": "Simple prediction processor.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\processors\\prediction\\prediction_calculator": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\processors\\prediction\\prediction_calculator.py",
      "functions": [
        "__init__",
        "calculate_predicted_value",
        "calculate_confidence",
        "create_prediction_result"
      ],
      "classes": {
        "PredictionCalculator": {
          "methods": [
            "__init__",
            "calculate_predicted_value",
            "calculate_confidence",
            "create_prediction_result"
          ],
          "docstring": "Simple prediction calculator.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\processors\\prediction\\prediction_validator": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\processors\\prediction\\prediction_validator.py",
      "functions": [
        "__init__",
        "validate_input_data",
        "validate_prediction_result"
      ],
      "classes": {
        "PredictionValidator": {
          "methods": [
            "__init__",
            "validate_input_data",
            "validate_prediction_result"
          ],
          "docstring": "Simple prediction validator.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\prediction\\base_analyzer": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\prediction\\base_analyzer.py",
      "functions": [
        "normalize_probability",
        "confidence_label",
        "confidence_level"
      ],
      "classes": {
        "BasePredictionAnalyzer": {
          "methods": [
            "normalize_probability",
            "confidence_label",
            "confidence_level"
          ],
          "docstring": "Shared utilities for prediction analyzers (SSOT).",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\processors\\insight_processor": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\processors\\insight_processor.py",
      "functions": [
        "__init__",
        "process_insight",
        "_validate_insight",
        "batch_process_insights",
        "get_processing_stats",
        "reset_stats",
        "get_status"
      ],
      "classes": {
        "InsightProcessor": {
          "methods": [
            "__init__",
            "process_insight",
            "_validate_insight",
            "batch_process_insights",
            "get_processing_stats",
            "reset_stats",
            "get_status"
          ],
          "docstring": "Simple analytics insight processor.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\processors\\prediction\\prediction_analyzer": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\processors\\prediction\\prediction_analyzer.py",
      "functions": [
        "__init__",
        "analyze_prediction",
        "_calculate_quality_score",
        "_generate_recommendations"
      ],
      "classes": {
        "PredictionAnalyzer": {
          "methods": [
            "__init__",
            "analyze_prediction",
            "_calculate_quality_score",
            "_generate_recommendations"
          ],
          "docstring": "Simple prediction analyzer using SSOT utilities.",
          "base_classes": [
            "BasePredictionAnalyzer"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\analytics\\processors\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\analytics\\processors\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\dry_eliminator\\dry_eliminator_enums": {
      "file_path": "docs\\archive\\consolidated_files\\dry_eliminator\\dry_eliminator_enums.py",
      "functions": [],
      "classes": {
        "DRYViolationType": {
          "methods": [],
          "docstring": "Types of DRY violations.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EliminationStrategy": {
          "methods": [],
          "docstring": "DRY elimination strategies.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DRYScanMode": {
          "methods": [],
          "docstring": "DRY scanning modes.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ViolationSeverity": {
          "methods": [],
          "docstring": "Severity levels for DRY violations.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\dry_eliminator\\dry_elimination_engine": {
      "file_path": "docs\\archive\\consolidated_files\\dry_eliminator\\dry_elimination_engine.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\dry_eliminator\\engines\\elimination_strategy_engine": {
      "file_path": "docs\\archive\\consolidated_files\\dry_eliminator\\engines\\elimination_strategy_engine.py",
      "functions": [
        "create_elimination_strategy_engine",
        "__init__",
        "execute_elimination",
        "_select_strategy",
        "_apply_strategy",
        "_calculate_elimination_metrics",
        "get_elimination_summary",
        "clear_elimination_history",
        "get_status"
      ],
      "classes": {
        "EliminationStrategyEngine": {
          "methods": [
            "__init__",
            "execute_elimination",
            "_select_strategy",
            "_apply_strategy",
            "_calculate_elimination_metrics",
            "get_elimination_summary",
            "clear_elimination_history",
            "get_status"
          ],
          "docstring": "Simple elimination strategy engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\dry_eliminator\\dry_eliminator_orchestrator": {
      "file_path": "docs\\archive\\consolidated_files\\dry_eliminator\\dry_eliminator_orchestrator.py",
      "functions": [
        "get_advanced_dry_eliminator",
        "eliminate_advanced_dry_violations",
        "main",
        "__init__",
        "eliminate_advanced_dry_violations",
        "analyze_project_violations",
        "eliminate_specific_violations",
        "get_system_status",
        "reset_elimination_state",
        "get_performance_report",
        "export_results",
        "__init__",
        "run_elimination"
      ],
      "classes": {
        "AdvancedDRYEliminator": {
          "methods": [
            "__init__",
            "eliminate_advanced_dry_violations",
            "analyze_project_violations",
            "eliminate_specific_violations",
            "get_system_status",
            "reset_elimination_state",
            "get_performance_report",
            "export_results"
          ],
          "docstring": "Main orchestrator for advanced DRY violation elimination system.\n\nProvides unified interface to all DRY elimination capabilities while maintaining V2\ncompliance through modular architecture.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "UnifiedEntryPoint": {
          "methods": [
            "__init__",
            "run_elimination"
          ],
          "docstring": "Unified entry point for backward compatibility.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\dry_eliminator\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\dry_eliminator\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\dry_eliminator\\engines\\dry_elimination_engine_orchestrator": {
      "file_path": "docs\\archive\\consolidated_files\\dry_eliminator\\engines\\dry_elimination_engine_orchestrator.py",
      "functions": [
        "create_dry_elimination_engine_orchestrator",
        "__init__",
        "run_full_analysis",
        "_determine_elimination_strategy",
        "get_violations_summary",
        "get_elimination_summary",
        "generate_detailed_report",
        "export_results",
        "clear_analysis",
        "get_analysis_status"
      ],
      "classes": {
        "DRYEliminationEngineOrchestrator": {
          "methods": [
            "__init__",
            "run_full_analysis",
            "_determine_elimination_strategy",
            "get_violations_summary",
            "get_elimination_summary",
            "generate_detailed_report",
            "export_results",
            "clear_analysis",
            "get_analysis_status"
          ],
          "docstring": "Main orchestrator for DRY elimination system.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\dry_eliminator\\engines\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\dry_eliminator\\engines\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\dry_eliminator\\engines\\metrics_reporting_engine": {
      "file_path": "docs\\archive\\consolidated_files\\dry_eliminator\\engines\\metrics_reporting_engine.py",
      "functions": [
        "create_metrics_reporting_engine",
        "__init__",
        "start_analysis",
        "end_analysis",
        "update_file_metrics",
        "update_violation_metrics",
        "update_elimination_metrics",
        "generate_summary_report",
        "_get_violations_by_type",
        "_get_violations_by_severity",
        "generate_detailed_report",
        "export_metrics_to_file",
        "get_metrics_dict",
        "reset_metrics"
      ],
      "classes": {
        "MetricsReportingEngine": {
          "methods": [
            "__init__",
            "start_analysis",
            "end_analysis",
            "update_file_metrics",
            "update_violation_metrics",
            "update_elimination_metrics",
            "generate_summary_report",
            "_get_violations_by_type",
            "_get_violations_by_severity",
            "generate_detailed_report",
            "export_metrics_to_file",
            "get_metrics_dict",
            "reset_metrics"
          ],
          "docstring": "Metrics and reporting engine for DRY elimination system.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\dry_eliminator\\engines\\file_discovery_engine": {
      "file_path": "docs\\archive\\consolidated_files\\dry_eliminator\\engines\\file_discovery_engine.py",
      "functions": [
        "create_file_discovery_engine",
        "__init__",
        "discover_python_files",
        "_should_exclude_file",
        "_analyze_file_metadata",
        "get_file_statistics",
        "get_files_by_size",
        "get_files_by_line_count",
        "get_largest_files",
        "get_files_by_extension",
        "get_files_in_directory",
        "refresh_file_list",
        "get_file_metadata",
        "clear_cache",
        "validate_file"
      ],
      "classes": {
        "FileDiscoveryEngine": {
          "methods": [
            "__init__",
            "discover_python_files",
            "_should_exclude_file",
            "_analyze_file_metadata",
            "get_file_statistics",
            "get_files_by_size",
            "get_files_by_line_count",
            "get_largest_files",
            "get_files_by_extension",
            "get_files_in_directory",
            "refresh_file_list",
            "get_file_metadata",
            "clear_cache",
            "validate_file"
          ],
          "docstring": "File discovery engine for DRY elimination system.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\dry_eliminator\\dry_eliminator_models": {
      "file_path": "docs\\archive\\consolidated_files\\dry_eliminator\\dry_eliminator_models.py",
      "functions": [
        "create_dry_violation",
        "create_dry_analysis_result",
        "create_dry_configuration",
        "create_dry_metrics"
      ],
      "classes": {
        "DRYViolationType": {
          "methods": [],
          "docstring": "Types of DRY violations.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EliminationStrategy": {
          "methods": [],
          "docstring": "Elimination strategies.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ViolationSeverity": {
          "methods": [],
          "docstring": "Violation severity levels.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DRYViolation": {
          "methods": [],
          "docstring": "Simple DRY violation data structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DRYAnalysisResult": {
          "methods": [],
          "docstring": "Simple DRY analysis result.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DRYConfiguration": {
          "methods": [],
          "docstring": "Simple DRY configuration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DRYMetrics": {
          "methods": [],
          "docstring": "Simple DRY metrics.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\engine": {
      "file_path": "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\engine.py",
      "functions": [
        "__init__",
        "register_protocol",
        "register_handler",
        "detect_emergency",
        "respond_to_emergency",
        "_create_no_protocol_response",
        "_update_emergency_status",
        "get_active_emergencies",
        "get_metrics",
        "get_status",
        "clear_emergencies",
        "reset_metrics",
        "clear_resources"
      ],
      "classes": {
        "EmergencyInterventionEngine": {
          "methods": [
            "__init__",
            "register_protocol",
            "register_handler",
            "detect_emergency",
            "respond_to_emergency",
            "_create_no_protocol_response",
            "_update_emergency_status",
            "get_active_emergencies",
            "get_metrics",
            "get_status",
            "clear_emergencies",
            "reset_metrics",
            "clear_resources"
          ],
          "docstring": "Main engine for emergency intervention operations.\n\nCoordinates action execution, protocol management,\nand emergency response processing.",
          "base_classes": [
            "BaseEngine"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\dry_eliminator\\engines\\code_analysis_engine": {
      "file_path": "docs\\archive\\consolidated_files\\dry_eliminator\\engines\\code_analysis_engine.py",
      "functions": [
        "create_code_analysis_engine",
        "__init__",
        "analyze_code",
        "_extract_patterns",
        "_find_duplicates",
        "_calculate_metrics",
        "get_analysis_summary",
        "clear_analysis_history",
        "get_status"
      ],
      "classes": {
        "CodeAnalysisEngine": {
          "methods": [
            "__init__",
            "analyze_code",
            "_extract_patterns",
            "_find_duplicates",
            "_calculate_metrics",
            "get_analysis_summary",
            "clear_analysis_history",
            "get_status"
          ],
          "docstring": "Simple code analysis engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\orchestrator": {
      "file_path": "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\orchestrator.py",
      "functions": [
        "__init__",
        "_register_default_protocols",
        "detect_emergency",
        "analyze_emergency",
        "execute_intervention",
        "handle_emergency",
        "register_intervention_handler",
        "get_emergency_status",
        "get_active_emergencies",
        "get_emergency_history",
        "get_system_metrics",
        "get_protocol_summary",
        "get_system_health",
        "create_custom_protocol",
        "get_orchestrator_status",
        "shutdown"
      ],
      "classes": {
        "EmergencyInterventionOrchestrator": {
          "methods": [
            "__init__",
            "_register_default_protocols",
            "detect_emergency",
            "analyze_emergency",
            "execute_intervention",
            "handle_emergency",
            "register_intervention_handler",
            "get_emergency_status",
            "get_active_emergencies",
            "get_emergency_history",
            "get_system_metrics",
            "get_protocol_summary",
            "get_system_health",
            "create_custom_protocol",
            "get_orchestrator_status",
            "shutdown"
          ],
          "docstring": "Main orchestrator for emergency intervention operations.\n\nCoordinates emergency detection, analysis, intervention, and logging across all\nemergency components.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\dry_eliminator\\orchestrators\\elimination_coordinator": {
      "file_path": "docs\\archive\\consolidated_files\\dry_eliminator\\orchestrators\\elimination_coordinator.py",
      "functions": [
        "__init__",
        "eliminate_advanced_dry_violations",
        "analyze_project_violations",
        "eliminate_specific_violations",
        "_update_results_from_elimination",
        "_generate_elimination_summary",
        "get_coordinator_status",
        "reset_coordinator_state"
      ],
      "classes": {
        "EliminationCoordinator": {
          "methods": [
            "__init__",
            "eliminate_advanced_dry_violations",
            "analyze_project_violations",
            "eliminate_specific_violations",
            "_update_results_from_elimination",
            "_generate_elimination_summary",
            "get_coordinator_status",
            "reset_coordinator_state"
          ],
          "docstring": "Coordinates DRY violation elimination operations.\n\nHandles the core elimination workflow and coordination between different elimination\ncomponents.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\dry_eliminator\\orchestrators\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\dry_eliminator\\orchestrators\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\models_enums": {
      "file_path": "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\models_enums.py",
      "functions": [],
      "classes": {
        "EmergencySeverity": {
          "methods": [],
          "docstring": "Emergency severity levels.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EmergencyType": {
          "methods": [],
          "docstring": "Types of emergencies.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EmergencyStatus": {
          "methods": [],
          "docstring": "Emergency status states.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "InterventionAction": {
          "methods": [],
          "docstring": "Types of intervention actions.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "InterventionPriority": {
          "methods": [],
          "docstring": "Intervention priority levels.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AlertLevel": {
          "methods": [],
          "docstring": "Alert severity levels.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\protocols": {
      "file_path": "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\protocols.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\dry_eliminator\\orchestrators\\results_manager": {
      "file_path": "docs\\archive\\consolidated_files\\dry_eliminator\\orchestrators\\results_manager.py",
      "functions": [
        "__init__",
        "update_results",
        "_increment_result_counter",
        "_update_performance_metrics",
        "generate_summary_report",
        "_generate_summary_text",
        "get_results_status",
        "reset_results",
        "export_results"
      ],
      "classes": {
        "ResultsManager": {
          "methods": [
            "__init__",
            "update_results",
            "_increment_result_counter",
            "_update_performance_metrics",
            "generate_summary_report",
            "_generate_summary_text",
            "get_results_status",
            "reset_results",
            "export_results"
          ],
          "docstring": "Manages DRY elimination results and reporting.\n\nHandles result tracking, reporting, and status management for DRY elimination\noperations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\engines\\action_executor": {
      "file_path": "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\engines\\action_executor.py",
      "functions": [
        "__init__",
        "register_handler",
        "execute_action",
        "_default_action_handler",
        "_restart_service",
        "_scale_resources",
        "_isolate_system",
        "_rollback_changes",
        "_notify_admin",
        "_execute_script",
        "execute_multiple_actions",
        "get_available_actions",
        "get_registered_handlers",
        "clear_handlers",
        "has_handler"
      ],
      "classes": {
        "ActionExecutor": {
          "methods": [
            "__init__",
            "register_handler",
            "execute_action",
            "_default_action_handler",
            "_restart_service",
            "_scale_resources",
            "_isolate_system",
            "_rollback_changes",
            "_notify_admin",
            "_execute_script",
            "execute_multiple_actions",
            "get_available_actions",
            "get_registered_handlers",
            "clear_handlers",
            "has_handler"
          ],
          "docstring": "Executes emergency intervention actions.\n\nHandles action execution, default implementations, and result processing.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\engines\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\engines\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\handlers\\protocol_initializer": {
      "file_path": "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\handlers\\protocol_initializer.py",
      "functions": [
        "__init__",
        "initialize_default_protocols",
        "_initialize_system_failure_protocols",
        "_initialize_security_protocols",
        "_initialize_performance_protocols",
        "_initialize_data_protocols",
        "_initialize_network_protocols",
        "_initialize_resource_protocols",
        "get_initialized_protocol_count",
        "reinitialize_protocols"
      ],
      "classes": {
        "ProtocolInitializer": {
          "methods": [
            "__init__",
            "initialize_default_protocols",
            "_initialize_system_failure_protocols",
            "_initialize_security_protocols",
            "_initialize_performance_protocols",
            "_initialize_data_protocols",
            "_initialize_network_protocols",
            "_initialize_resource_protocols",
            "get_initialized_protocol_count",
            "reinitialize_protocols"
          ],
          "docstring": "Initializes default emergency protocols.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\models_metrics": {
      "file_path": "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\models_metrics.py",
      "functions": [],
      "classes": {
        "EmergencyMetrics": {
          "methods": [],
          "docstring": "Emergency response metrics.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EmergencyConfig": {
          "methods": [],
          "docstring": "Emergency intervention configuration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EmergencyAlert": {
          "methods": [],
          "docstring": "Emergency alert data structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EmergencyLog": {
          "methods": [],
          "docstring": "Emergency log entry.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EmergencyReport": {
          "methods": [],
          "docstring": "Emergency incident report.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\orchestrators\\emergency_orchestrator": {
      "file_path": "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\orchestrators\\emergency_orchestrator.py",
      "functions": [
        "__init__",
        "_register_default_protocols",
        "detect_emergency",
        "analyze_emergency",
        "execute_intervention",
        "handle_emergency",
        "register_intervention_handler",
        "get_emergency_status",
        "get_active_emergencies",
        "get_emergency_history",
        "get_system_metrics",
        "get_protocol_summary",
        "get_system_health",
        "create_custom_protocol",
        "get_orchestrator_status",
        "shutdown"
      ],
      "classes": {
        "EmergencyInterventionOrchestrator": {
          "methods": [
            "__init__",
            "_register_default_protocols",
            "detect_emergency",
            "analyze_emergency",
            "execute_intervention",
            "handle_emergency",
            "register_intervention_handler",
            "get_emergency_status",
            "get_active_emergencies",
            "get_emergency_history",
            "get_system_metrics",
            "get_protocol_summary",
            "get_system_health",
            "create_custom_protocol",
            "get_orchestrator_status",
            "shutdown"
          ],
          "docstring": "Main orchestrator for emergency intervention operations.\n\nCoordinates emergency detection, analysis, intervention, and logging across all\nemergency components.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\handlers\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\handlers\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\orchestrators\\emergency_analyzer": {
      "file_path": "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\orchestrators\\emergency_analyzer.py",
      "functions": [
        "__init__",
        "analyze_emergency",
        "_assess_risk",
        "_analyze_impact",
        "_assess_business_impact",
        "_estimate_downtime",
        "_generate_recommendations",
        "_calculate_priority_score",
        "get_analysis_history",
        "get_analysis_metrics",
        "clear_analysis_history",
        "export_analysis_data"
      ],
      "classes": {
        "EmergencyAnalyzer": {
          "methods": [
            "__init__",
            "analyze_emergency",
            "_assess_risk",
            "_analyze_impact",
            "_assess_business_impact",
            "_estimate_downtime",
            "_generate_recommendations",
            "_calculate_priority_score",
            "get_analysis_history",
            "get_analysis_metrics",
            "clear_analysis_history",
            "export_analysis_data"
          ],
          "docstring": "Analyzes emergency incidents and provides recommendations.\n\nHandles emergency analysis, risk assessment, and health monitoring.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\orchestrators\\emergency_logger": {
      "file_path": "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\orchestrators\\emergency_logger.py",
      "functions": [
        "__init__",
        "log_emergency_event",
        "get_emergency_history",
        "get_all_emergency_history",
        "get_system_events",
        "get_health_recommendations",
        "calculate_system_health",
        "get_emergency_statistics",
        "export_emergency_data",
        "clear_emergency_history",
        "get_logger_status"
      ],
      "classes": {
        "EmergencyLogger": {
          "methods": [
            "__init__",
            "log_emergency_event",
            "get_emergency_history",
            "get_all_emergency_history",
            "get_system_events",
            "get_health_recommendations",
            "calculate_system_health",
            "get_emergency_statistics",
            "export_emergency_data",
            "clear_emergency_history",
            "get_logger_status"
          ],
          "docstring": "Logs emergency events and maintains history.\n\nHandles emergency event logging, history management, and system health monitoring.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\engines\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\engines\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\handlers\\protocol_executor": {
      "file_path": "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\handlers\\protocol_executor.py",
      "functions": [
        "__init__",
        "execute_protocol",
        "_execute_action",
        "_restart_service",
        "_scale_resources",
        "_notify_admin",
        "_isolate_system",
        "_backup_restore",
        "_log_incident",
        "_escalate_to_human",
        "_clear_cache",
        "_optimize_queries",
        "get_execution_history",
        "get_active_executions",
        "cancel_execution"
      ],
      "classes": {
        "ProtocolExecutor": {
          "methods": [
            "__init__",
            "execute_protocol",
            "_execute_action",
            "_restart_service",
            "_scale_resources",
            "_notify_admin",
            "_isolate_system",
            "_backup_restore",
            "_log_incident",
            "_escalate_to_human",
            "_clear_cache",
            "_optimize_queries",
            "get_execution_history",
            "get_active_executions",
            "cancel_execution"
          ],
          "docstring": "Executes emergency intervention protocols.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\handlers\\protocol_registry": {
      "file_path": "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\handlers\\protocol_registry.py",
      "functions": [
        "__init__",
        "register_protocol",
        "get_protocol",
        "_severity_meets_threshold",
        "list_protocols",
        "remove_protocol",
        "get_protocol_count",
        "clear_protocols",
        "export_protocols",
        "import_protocols"
      ],
      "classes": {
        "ProtocolRegistry": {
          "methods": [
            "__init__",
            "register_protocol",
            "get_protocol",
            "_severity_meets_threshold",
            "list_protocols",
            "remove_protocol",
            "get_protocol_count",
            "clear_protocols",
            "export_protocols",
            "import_protocols"
          ],
          "docstring": "Manages registration and retrieval of emergency protocols.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\orchestrators\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\emergency_intervention\\unified_emergency\\orchestrators\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\engines\\analysis_core_engine": {
      "file_path": "docs\\archive\\consolidated_files\\engines\\analysis_core_engine.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "analyze",
        "extract_patterns",
        "detect_violations",
        "cleanup",
        "get_status"
      ],
      "classes": {
        "AnalysisCoreEngine": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "analyze",
            "extract_patterns",
            "detect_violations",
            "cleanup",
            "get_status"
          ],
          "docstring": "Core analysis engine - consolidates all analysis operations.",
          "base_classes": [
            "AnalysisEngine"
          ],
          "maturity": "Core Asset",
          "agent_type": "SignalAgent"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\engines\\engine_state": {
      "file_path": "docs\\archive\\consolidated_files\\engines\\engine_state.py",
      "functions": [
        "__init__",
        "transition_to",
        "can_transition_to",
        "get_valid_transitions",
        "is_stable_state",
        "is_error_state",
        "record_error",
        "reset_error_state",
        "_record_state_change",
        "get_state_summary"
      ],
      "classes": {
        "EngineState": {
          "methods": [],
          "docstring": "Engine lifecycle states.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EngineStateManager": {
          "methods": [
            "__init__",
            "transition_to",
            "can_transition_to",
            "get_valid_transitions",
            "is_stable_state",
            "is_error_state",
            "record_error",
            "reset_error_state",
            "_record_state_change",
            "get_state_summary"
          ],
          "docstring": "Manages engine state transitions and validation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\engines\\data_core_engine": {
      "file_path": "docs\\archive\\consolidated_files\\engines\\data_core_engine.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "_store_data",
        "_retrieve_data",
        "_query_data",
        "cleanup",
        "get_status"
      ],
      "classes": {
        "DataCoreEngine": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "_store_data",
            "_retrieve_data",
            "_query_data",
            "cleanup",
            "get_status"
          ],
          "docstring": "Core data engine - consolidates all data operations.",
          "base_classes": [
            "Engine"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\engines\\contracts": {
      "file_path": "docs\\archive\\consolidated_files\\engines\\contracts.py",
      "functions": [
        "initialize",
        "execute",
        "cleanup",
        "get_status",
        "train_model",
        "predict",
        "optimize",
        "analyze",
        "extract_patterns",
        "detect_violations",
        "connect",
        "sync",
        "transform",
        "coordinate",
        "schedule",
        "monitor",
        "process",
        "validate",
        "transform"
      ],
      "classes": {
        "EngineContext": {
          "methods": [],
          "docstring": "SSOT: shared context object for all engines (DIP).",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EngineResult": {
          "methods": [],
          "docstring": "Standard result format for all engines.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "Engine": {
          "methods": [
            "initialize",
            "execute",
            "cleanup",
            "get_status"
          ],
          "docstring": "Base engine protocol - all engines must implement this.",
          "base_classes": [
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MLEngine": {
          "methods": [
            "train_model",
            "predict",
            "optimize"
          ],
          "docstring": "ML operations engine protocol.",
          "base_classes": [
            "Engine"
          ],
          "maturity": "Core Asset",
          "agent_type": "SignalAgent"
        },
        "AnalysisEngine": {
          "methods": [
            "analyze",
            "extract_patterns",
            "detect_violations"
          ],
          "docstring": "Analysis operations engine protocol.",
          "base_classes": [
            "Engine"
          ],
          "maturity": "Core Asset",
          "agent_type": "SignalAgent"
        },
        "IntegrationEngine": {
          "methods": [
            "connect",
            "sync",
            "transform"
          ],
          "docstring": "Integration operations engine protocol.",
          "base_classes": [
            "Engine"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CoordinationEngine": {
          "methods": [
            "coordinate",
            "schedule",
            "monitor"
          ],
          "docstring": "Coordination operations engine protocol.",
          "base_classes": [
            "Engine"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "UtilityEngine": {
          "methods": [
            "process",
            "validate",
            "transform"
          ],
          "docstring": "Utility operations engine protocol.",
          "base_classes": [
            "Engine"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\engines\\coordination_core_engine": {
      "file_path": "docs\\archive\\consolidated_files\\engines\\coordination_core_engine.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "coordinate",
        "schedule",
        "monitor",
        "cleanup",
        "get_status"
      ],
      "classes": {
        "CoordinationCoreEngine": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "coordinate",
            "schedule",
            "monitor",
            "cleanup",
            "get_status"
          ],
          "docstring": "Core coordination engine - consolidates all coordination operations.",
          "base_classes": [
            "CoordinationEngine"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\engines\\communication_core_engine": {
      "file_path": "docs\\archive\\consolidated_files\\engines\\communication_core_engine.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "_send_message",
        "_receive_message",
        "_broadcast_message",
        "cleanup",
        "get_status"
      ],
      "classes": {
        "CommunicationCoreEngine": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "_send_message",
            "_receive_message",
            "_broadcast_message",
            "cleanup",
            "get_status"
          ],
          "docstring": "Core communication engine - consolidates all communication operations.",
          "base_classes": [
            "Engine"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\engines\\ml_core_engine": {
      "file_path": "docs\\archive\\consolidated_files\\engines\\ml_core_engine.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "train_model",
        "predict",
        "optimize",
        "cleanup",
        "get_status"
      ],
      "classes": {
        "MLCoreEngine": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "train_model",
            "predict",
            "optimize",
            "cleanup",
            "get_status"
          ],
          "docstring": "Core ML engine - consolidates all ML operations.",
          "base_classes": [
            "MLEngine"
          ],
          "maturity": "Core Asset",
          "agent_type": "SignalAgent"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\engines\\monitoring_core_engine": {
      "file_path": "docs\\archive\\consolidated_files\\engines\\monitoring_core_engine.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "_collect_metrics",
        "_check_health",
        "_create_alert",
        "cleanup",
        "get_status"
      ],
      "classes": {
        "MonitoringCoreEngine": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "_collect_metrics",
            "_check_health",
            "_create_alert",
            "cleanup",
            "get_status"
          ],
          "docstring": "Core monitoring engine - consolidates all monitoring operations.",
          "base_classes": [
            "Engine"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\engines\\integration_core_engine": {
      "file_path": "docs\\archive\\consolidated_files\\engines\\integration_core_engine.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "connect",
        "sync",
        "transform",
        "cleanup",
        "get_status"
      ],
      "classes": {
        "IntegrationCoreEngine": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "connect",
            "sync",
            "transform",
            "cleanup",
            "get_status"
          ],
          "docstring": "Core integration engine - consolidates all integration operations.",
          "base_classes": [
            "IntegrationEngine"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\engines\\engine_monitoring": {
      "file_path": "docs\\archive\\consolidated_files\\engines\\engine_monitoring.py",
      "functions": [
        "__init__",
        "record_operation",
        "_update_resource_usage",
        "get_metrics_summary",
        "__init__",
        "perform_health_check",
        "get_health_history",
        "is_healthy"
      ],
      "classes": {
        "EngineMetrics": {
          "methods": [
            "__init__",
            "record_operation",
            "_update_resource_usage",
            "get_metrics_summary"
          ],
          "docstring": "Tracks engine performance metrics.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EngineHealthMonitor": {
          "methods": [
            "__init__",
            "perform_health_check",
            "get_health_history",
            "is_healthy"
          ],
          "docstring": "Monitors engine health and provides diagnostics.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\engines\\engine_lifecycle": {
      "file_path": "docs\\archive\\consolidated_files\\engines\\engine_lifecycle.py",
      "functions": [
        "__init__",
        "initialize_engine",
        "shutdown_engine",
        "update_last_operation",
        "get_lifecycle_status"
      ],
      "classes": {
        "EngineLifecycleManager": {
          "methods": [
            "__init__",
            "initialize_engine",
            "shutdown_engine",
            "update_last_operation",
            "get_lifecycle_status"
          ],
          "docstring": "Manages engine lifecycle operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\engines\\configuration_core_engine": {
      "file_path": "docs\\archive\\consolidated_files\\engines\\configuration_core_engine.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "_load_config",
        "_save_config",
        "_get_setting",
        "cleanup",
        "get_status"
      ],
      "classes": {
        "ConfigurationCoreEngine": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "_load_config",
            "_save_config",
            "_get_setting",
            "cleanup",
            "get_status"
          ],
          "docstring": "Core configuration engine - consolidates all configuration operations.",
          "base_classes": [
            "Engine"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\engines\\utility_core_engine": {
      "file_path": "docs\\archive\\consolidated_files\\engines\\utility_core_engine.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "process",
        "validate",
        "transform",
        "cleanup",
        "get_status"
      ],
      "classes": {
        "UtilityCoreEngine": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "process",
            "validate",
            "transform",
            "cleanup",
            "get_status"
          ],
          "docstring": "Core utility engine - consolidates all utility operations.",
          "base_classes": [
            "UtilityEngine"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\engines\\orchestration_core_engine": {
      "file_path": "docs\\archive\\consolidated_files\\engines\\orchestration_core_engine.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "_orchestrate",
        "_execute_workflow",
        "_coordinate",
        "cleanup",
        "get_status"
      ],
      "classes": {
        "OrchestrationCoreEngine": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "_orchestrate",
            "_execute_workflow",
            "_coordinate",
            "cleanup",
            "get_status"
          ],
          "docstring": "Core orchestration engine - consolidates all orchestration operations.",
          "base_classes": [
            "Engine"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\engines\\security_core_engine": {
      "file_path": "docs\\archive\\consolidated_files\\engines\\security_core_engine.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "_authenticate",
        "_authorize",
        "_audit",
        "cleanup",
        "get_status"
      ],
      "classes": {
        "SecurityCoreEngine": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "_authenticate",
            "_authorize",
            "_audit",
            "cleanup",
            "get_status"
          ],
          "docstring": "Core security engine - consolidates all security operations.",
          "base_classes": [
            "Engine"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\engines\\registry": {
      "file_path": "docs\\archive\\consolidated_files\\engines\\registry.py",
      "functions": [
        "__init__",
        "_initialize_engines",
        "get_engine",
        "get_engine_types",
        "initialize_all",
        "cleanup_all",
        "get_all_status"
      ],
      "classes": {
        "EngineRegistry": {
          "methods": [
            "__init__",
            "_initialize_engines",
            "get_engine",
            "get_engine_types",
            "initialize_all",
            "cleanup_all",
            "get_all_status"
          ],
          "docstring": "Registry for all core engines - SSOT for engine management.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\engines\\performance_core_engine": {
      "file_path": "docs\\archive\\consolidated_files\\engines\\performance_core_engine.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "_benchmark",
        "_optimize",
        "_profile",
        "cleanup",
        "get_status"
      ],
      "classes": {
        "PerformanceCoreEngine": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "_benchmark",
            "_optimize",
            "_profile",
            "cleanup",
            "get_status"
          ],
          "docstring": "Core performance engine - consolidates all performance operations.",
          "base_classes": [
            "Engine"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\engines\\storage_core_engine": {
      "file_path": "docs\\archive\\consolidated_files\\engines\\storage_core_engine.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "_store",
        "_retrieve",
        "_cache",
        "cleanup",
        "get_status"
      ],
      "classes": {
        "StorageCoreEngine": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "_store",
            "_retrieve",
            "_cache",
            "cleanup",
            "get_status"
          ],
          "docstring": "Core storage engine - consolidates all storage operations.",
          "base_classes": [
            "Engine"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\engines\\validation_core_engine": {
      "file_path": "docs\\archive\\consolidated_files\\engines\\validation_core_engine.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "_validate_data",
        "_add_rule",
        "_check_compliance",
        "cleanup",
        "get_status"
      ],
      "classes": {
        "ValidationCoreEngine": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "_validate_data",
            "_add_rule",
            "_check_compliance",
            "cleanup",
            "get_status"
          ],
          "docstring": "Core validation engine - consolidates all validation operations.",
          "base_classes": [
            "Engine"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\engines\\processing_core_engine": {
      "file_path": "docs\\archive\\consolidated_files\\engines\\processing_core_engine.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "_process",
        "_batch_process",
        "_queue_job",
        "cleanup",
        "get_status"
      ],
      "classes": {
        "ProcessingCoreEngine": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "_process",
            "_batch_process",
            "_queue_job",
            "cleanup",
            "get_status"
          ],
          "docstring": "Core processing engine - consolidates all processing operations.",
          "base_classes": [
            "Engine"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\enhanced_integration\\engines\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\enhanced_integration\\engines\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\enhanced_integration\\coordinators\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\enhanced_integration\\coordinators\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\enhanced_integration\\coordinators\\enhanced_integration_coordinator": {
      "file_path": "docs\\archive\\consolidated_files\\enhanced_integration\\coordinators\\enhanced_integration_coordinator.py",
      "functions": [
        "__init__",
        "start_coordination",
        "stop_coordination",
        "get_integration_summary",
        "validate_required_fields",
        "__init__",
        "optimize_performance"
      ],
      "classes": {
        "EnhancedIntegrationCoordinator": {
          "methods": [
            "__init__",
            "start_coordination",
            "stop_coordination",
            "get_integration_summary"
          ],
          "docstring": "Main orchestrator for enhanced integration coordination system.\n\nProvides unified interface to all integration capabilities while maintaining V2\ncompliance through modular architecture.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EnhancedVectorDatabaseIntegration": {
          "methods": [
            "__init__",
            "optimize_performance"
          ],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\enhanced_integration\\engines\\integration_coordination_engine": {
      "file_path": "docs\\archive\\consolidated_files\\enhanced_integration\\engines\\integration_coordination_engine.py",
      "functions": [
        "__init__",
        "get_coordination_status",
        "cancel_task",
        "cleanup"
      ],
      "classes": {
        "IntegrationCoordinationEngine": {
          "methods": [
            "__init__",
            "get_coordination_status",
            "cancel_task",
            "cleanup"
          ],
          "docstring": "Handles coordination of multiple integration tasks.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\enhanced_integration\\engines\\integration_optimization_engine": {
      "file_path": "docs\\archive\\consolidated_files\\enhanced_integration\\engines\\integration_optimization_engine.py",
      "functions": [
        "__init__",
        "get_optimization_metrics",
        "clear_optimization_cache",
        "get_active_optimizations",
        "cancel_optimization"
      ],
      "classes": {
        "IntegrationOptimizationEngine": {
          "methods": [
            "__init__",
            "get_optimization_metrics",
            "clear_optimization_cache",
            "get_active_optimizations",
            "cancel_optimization"
          ],
          "docstring": "Handles optimization operations for enhanced integrations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\enhanced_integration\\orchestrators\\coordination_engine": {
      "file_path": "docs\\archive\\consolidated_files\\enhanced_integration\\orchestrators\\coordination_engine.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\enhanced_integration\\orchestrators\\coordination_engine_core": {
      "file_path": "docs\\archive\\consolidated_files\\enhanced_integration\\orchestrators\\coordination_engine_core.py",
      "functions": [
        "__init__",
        "determine_coordination_strategy",
        "allocate_resources",
        "_check_resource_availability",
        "release_resources",
        "get_resource_status",
        "optimize_coordination",
        "get_coordination_status"
      ],
      "classes": {
        "CoordinationEngineCore": {
          "methods": [
            "__init__",
            "determine_coordination_strategy",
            "allocate_resources",
            "_check_resource_availability",
            "release_resources",
            "get_resource_status",
            "optimize_coordination",
            "get_coordination_status"
          ],
          "docstring": "Core coordination engine functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\enhanced_integration\\engines\\integration_task_engine": {
      "file_path": "docs\\archive\\consolidated_files\\enhanced_integration\\engines\\integration_task_engine.py",
      "functions": [
        "__init__",
        "add_task",
        "get_next_task",
        "get_task_summary"
      ],
      "classes": {
        "IntegrationTaskEngine": {
          "methods": [
            "__init__",
            "add_task",
            "get_next_task",
            "get_task_summary"
          ],
          "docstring": "Engine for managing and executing integration tasks.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\enhanced_integration\\engines\\integration_performance_engine": {
      "file_path": "docs\\archive\\consolidated_files\\enhanced_integration\\engines\\integration_performance_engine.py",
      "functions": [
        "__init__",
        "start_monitoring",
        "stop_monitoring",
        "update_metrics",
        "_calculate_efficiency_score",
        "_monitoring_loop",
        "generate_performance_report",
        "get_performance_summary"
      ],
      "classes": {
        "IntegrationPerformanceEngine": {
          "methods": [
            "__init__",
            "start_monitoring",
            "stop_monitoring",
            "update_metrics",
            "_calculate_efficiency_score",
            "_monitoring_loop",
            "generate_performance_report",
            "get_performance_summary"
          ],
          "docstring": "Engine for monitoring and reporting integration performance.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\error_handling\\advanced_error_handler": {
      "file_path": "docs\\archive\\consolidated_files\\error_handling\\advanced_error_handler.py",
      "functions": [
        "get_advanced_error_handler",
        "create_advanced_error_handler",
        "get_all_error_handlers",
        "reset_all_error_handlers",
        "__init__",
        "should_degrade",
        "degrade_to_level",
        "_configure_degraded_features",
        "is_feature_enabled",
        "get_degradation_status",
        "__init__",
        "_setup_components",
        "execute_with_resilience",
        "_handle_degradation",
        "_attempt_recovery",
        "_should_attempt_recovery",
        "_execute_recovery_strategy",
        "get_resilience_status",
        "reset"
      ],
      "classes": {
        "DegradationLevel": {
          "methods": [],
          "docstring": "Levels of system degradation.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ResilienceConfig": {
          "methods": [],
          "docstring": "Configuration for resilient error handling.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ResilienceMetrics": {
          "methods": [],
          "docstring": "Metrics for system resilience.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "GracefulDegradationManager": {
          "methods": [
            "__init__",
            "should_degrade",
            "degrade_to_level",
            "_configure_degraded_features",
            "is_feature_enabled",
            "get_degradation_status"
          ],
          "docstring": "Manages graceful degradation of system functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AdvancedErrorHandler": {
          "methods": [
            "__init__",
            "_setup_components",
            "execute_with_resilience",
            "_handle_degradation",
            "_attempt_recovery",
            "_should_attempt_recovery",
            "_execute_recovery_strategy",
            "get_resilience_status",
            "reset"
          ],
          "docstring": "Advanced error handling orchestrator with comprehensive resilience features.\n\nFeatures:\n- Circuit breaker integration\n- Retry logic with exponential backoff\n- Graceful degradation management\n- Automated recovery procedures\n- Comprehensive metrics and monitoring",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\enhanced_integration\\orchestrators\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\enhanced_integration\\orchestrators\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\enhanced_integration\\orchestrators\\coordination_engine_operations": {
      "file_path": "docs\\archive\\consolidated_files\\enhanced_integration\\orchestrators\\coordination_engine_operations.py",
      "functions": [
        "__init__",
        "schedule_task",
        "determine_coordination_strategy",
        "allocate_resources",
        "_check_resource_availability",
        "monitor_task_progress",
        "get_task_queue_status",
        "optimize_task_scheduling",
        "get_performance_metrics",
        "get_resource_status"
      ],
      "classes": {
        "CoordinationEngineOperations": {
          "methods": [
            "__init__",
            "schedule_task",
            "determine_coordination_strategy",
            "allocate_resources",
            "_check_resource_availability",
            "monitor_task_progress",
            "get_task_queue_status",
            "optimize_task_scheduling",
            "get_performance_metrics",
            "get_resource_status"
          ],
          "docstring": "Extended operations for coordination engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\enhanced_integration\\orchestrators\\coordination_engine_refactored": {
      "file_path": "docs\\archive\\consolidated_files\\enhanced_integration\\orchestrators\\coordination_engine_refactored.py",
      "functions": [
        "__init__"
      ],
      "classes": {
        "CoordinationEngine": {
          "methods": [
            "__init__"
          ],
          "docstring": "Unified coordination engine with core and operations functionality.",
          "base_classes": [
            "CoordinationEngineCore",
            "CoordinationEngineOperations"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\error_handling\\circuit_breaker": {
      "file_path": "docs\\archive\\consolidated_files\\error_handling\\circuit_breaker.py",
      "functions": [
        "get_circuit_breaker",
        "list_circuit_breakers",
        "reset_circuit_breaker",
        "__init__",
        "call",
        "call_with_fallback",
        "call_with_retry",
        "is_available",
        "get_retry_after",
        "get_status",
        "state",
        "failure_count",
        "last_failure_time",
        "next_attempt_time"
      ],
      "classes": {
        "CircuitBreaker": {
          "methods": [
            "__init__",
            "call",
            "call_with_fallback",
            "call_with_retry",
            "is_available",
            "get_retry_after",
            "get_status",
            "state",
            "failure_count",
            "last_failure_time",
            "next_attempt_time"
          ],
          "docstring": "Circuit breaker implementation for fault tolerance - V2 compliant.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\error_handling\\coordination_error_handler": {
      "file_path": "docs\\archive\\consolidated_files\\error_handling\\coordination_error_handler.py",
      "functions": [
        "get_logger",
        "handle_errors",
        "handle_coordination_errors",
        "handle_errors",
        "__init__",
        "execute",
        "can_recover",
        "__init__",
        "__init__",
        "__init__",
        "register_retry_mechanism",
        "register_circuit_breaker",
        "execute_with_comprehensive_error_handling",
        "get_system_health_report",
        "get_component_status",
        "cleanup_stale_data",
        "reset_component",
        "__init__",
        "add_strategy",
        "attempt_recovery",
        "get_recovery_statistics",
        "__init__",
        "report_error",
        "cleanup_stale_data",
        "__init__",
        "execute_with_retry",
        "__init__",
        "call",
        "_should_attempt_reset",
        "_on_success",
        "_on_failure",
        "wrapper",
        "__init__",
        "execute",
        "can_recover",
        "_default_restart",
        "__init__",
        "execute",
        "can_recover",
        "_default_reset",
        "__init__",
        "_register_coordination_strategies",
        "execute_with_error_handling",
        "register_circuit_breaker",
        "register_retry_mechanism",
        "get_error_report",
        "get_system_health_report",
        "add_recovery_strategy",
        "get_component_status",
        "cleanup_stale_data",
        "reset_component",
        "decorator",
        "wrapper",
        "operation"
      ],
      "classes": {
        "RecoveryStrategy": {
          "methods": [
            "__init__",
            "execute",
            "can_recover"
          ],
          "docstring": "Base class for recovery strategies.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CircuitBreakerConfig": {
          "methods": [
            "__init__"
          ],
          "docstring": "Configuration for circuit breaker.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RetryConfig": {
          "methods": [
            "__init__"
          ],
          "docstring": "Configuration for retry mechanism.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ErrorHandlingOrchestrator": {
          "methods": [
            "__init__",
            "register_retry_mechanism",
            "register_circuit_breaker",
            "execute_with_comprehensive_error_handling",
            "get_system_health_report",
            "get_component_status",
            "cleanup_stale_data",
            "reset_component"
          ],
          "docstring": "Comprehensive error handling orchestrator with circuit breaker and retry patterns.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RecoveryManager": {
          "methods": [
            "__init__",
            "add_strategy",
            "attempt_recovery",
            "get_recovery_statistics"
          ],
          "docstring": "Manages error recovery strategies with circuit breaker integration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ErrorReporter": {
          "methods": [
            "__init__",
            "report_error",
            "cleanup_stale_data"
          ],
          "docstring": "Reports errors and manages error history.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CircuitState": {
          "methods": [],
          "docstring": "Circuit breaker states.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RetryHandler": {
          "methods": [
            "__init__",
            "execute_with_retry"
          ],
          "docstring": "Retry handler for failed operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CircuitBreaker": {
          "methods": [
            "__init__",
            "call",
            "_should_attempt_reset",
            "_on_success",
            "_on_failure"
          ],
          "docstring": "Circuit breaker for fault tolerance.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CoordinationServiceRestartStrategy": {
          "methods": [
            "__init__",
            "execute",
            "can_recover",
            "_default_restart"
          ],
          "docstring": "Strategy for restarting coordination services.",
          "base_classes": [
            "RecoveryStrategy"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CoordinationConfigResetStrategy": {
          "methods": [
            "__init__",
            "execute",
            "can_recover",
            "_default_reset"
          ],
          "docstring": "Strategy for resetting coordination configuration.",
          "base_classes": [
            "RecoveryStrategy"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CoordinationErrorHandler": {
          "methods": [
            "__init__",
            "_register_coordination_strategies",
            "execute_with_error_handling",
            "register_circuit_breaker",
            "register_retry_mechanism",
            "get_error_report",
            "get_system_health_report",
            "add_recovery_strategy",
            "get_component_status",
            "cleanup_stale_data",
            "reset_component"
          ],
          "docstring": "Main error handler for coordination and communication systems.\n\nThis class provides a comprehensive facade over the modular error handling\nsystem, achieving V2 compliance through component orchestration and\ncircuit breaker patterns.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\error_handling\\automated_recovery": {
      "file_path": "docs\\archive\\consolidated_files\\error_handling\\automated_recovery.py",
      "functions": [
        "get_recovery_manager",
        "create_recovery_manager",
        "get_all_recovery_managers",
        "reset_all_recovery_managers",
        "__init__",
        "register_health_check",
        "check_health",
        "check_all_health",
        "__init__",
        "register_recovery_action",
        "execute_strategy",
        "_default_restart_action",
        "_default_failover_action",
        "_default_notification_action",
        "__init__",
        "_setup_default_actions",
        "_start_proactive_monitoring",
        "register_component",
        "initiate_recovery",
        "_get_recovery_strategies",
        "_verify_recovery",
        "recover_and_retry",
        "get_recovery_status",
        "reset",
        "monitor_worker"
      ],
      "classes": {
        "RecoveryStrategy": {
          "methods": [],
          "docstring": "Types of recovery strategies.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RecoveryState": {
          "methods": [],
          "docstring": "States of the recovery process.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RecoveryConfig": {
          "methods": [],
          "docstring": "Configuration for automated recovery.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RecoveryMetrics": {
          "methods": [],
          "docstring": "Metrics for recovery operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "HealthChecker": {
          "methods": [
            "__init__",
            "register_health_check",
            "check_health",
            "check_all_health"
          ],
          "docstring": "Component health monitoring and verification.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RecoveryExecutor": {
          "methods": [
            "__init__",
            "register_recovery_action",
            "execute_strategy",
            "_default_restart_action",
            "_default_failover_action",
            "_default_notification_action"
          ],
          "docstring": "Executes recovery strategies for failed components.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AutomatedRecoveryManager": {
          "methods": [
            "__init__",
            "_setup_default_actions",
            "_start_proactive_monitoring",
            "register_component",
            "initiate_recovery",
            "_get_recovery_strategies",
            "_verify_recovery",
            "recover_and_retry",
            "get_recovery_status",
            "reset"
          ],
          "docstring": "Automated recovery manager with intelligent failure detection and recovery.\n\nFeatures:\n- Proactive health monitoring\n- Multi-strategy recovery execution\n- Recovery success verification\n- Comprehensive metrics collection\n- Configurable recovery policies",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\enhanced_integration\\orchestrators\\task_processor": {
      "file_path": "docs\\archive\\consolidated_files\\enhanced_integration\\orchestrators\\task_processor.py",
      "functions": [
        "__init__",
        "submit_integration_task",
        "get_task_queue_size",
        "get_active_tasks_count",
        "get_completed_tasks_count",
        "get_task_statistics",
        "clear_completed_tasks",
        "get_recent_tasks"
      ],
      "classes": {
        "IntegrationTaskProcessor": {
          "methods": [
            "__init__",
            "submit_integration_task",
            "get_task_queue_size",
            "get_active_tasks_count",
            "get_completed_tasks_count",
            "get_task_statistics",
            "clear_completed_tasks",
            "get_recent_tasks"
          ],
          "docstring": "Processor for integration tasks with queue management.\n\nHandles task submission, processing, and result collection.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\error_handling\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\error_handling\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\error_handling\\error_handling_orchestrator": {
      "file_path": "docs\\archive\\consolidated_files\\error_handling\\error_handling_orchestrator.py",
      "functions": [
        "get_error_handling_orchestrator",
        "__init__",
        "retry_operation",
        "safe_execute",
        "validate_and_execute",
        "handle_operation_error",
        "handle_file_operation_error",
        "handle_network_operation_error",
        "handle_database_operation_error",
        "handle_validation_error",
        "handle_configuration_error",
        "handle_agent_operation_error",
        "handle_coordination_error",
        "create_error_summary",
        "is_recoverable_error",
        "get_error_severity",
        "analyze_error_patterns",
        "get_recovery_recommendations",
        "assess_system_health"
      ],
      "classes": {
        "UnifiedErrorHandlingOrchestrator": {
          "methods": [
            "__init__",
            "retry_operation",
            "safe_execute",
            "validate_and_execute",
            "handle_operation_error",
            "handle_file_operation_error",
            "handle_network_operation_error",
            "handle_database_operation_error",
            "handle_validation_error",
            "handle_configuration_error",
            "handle_agent_operation_error",
            "handle_coordination_error",
            "create_error_summary",
            "is_recoverable_error",
            "get_error_severity",
            "analyze_error_patterns",
            "get_recovery_recommendations",
            "assess_system_health"
          ],
          "docstring": "Unified Error Handling Orchestrator - V2 Compliant\n\nOrchestrates all error handling functionality:\n- Retry operations and safety mechanisms\n- Specialized error handlers for different contexts\n- Error analysis and severity assessment\n- Recovery recommendations and system health monitoring",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\error_handling\\error_analysis_engine": {
      "file_path": "docs\\archive\\consolidated_files\\error_handling\\error_analysis_engine.py",
      "functions": [
        "__init__",
        "create_error_summary",
        "is_recoverable_error",
        "get_error_severity",
        "analyze_error_patterns",
        "calculate_error_trends",
        "get_recovery_recommendations",
        "assess_system_health"
      ],
      "classes": {
        "ErrorAnalysisEngine": {
          "methods": [
            "__init__",
            "create_error_summary",
            "is_recoverable_error",
            "get_error_severity",
            "analyze_error_patterns",
            "calculate_error_trends",
            "get_recovery_recommendations",
            "assess_system_health"
          ],
          "docstring": "Engine for error analysis and assessment.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\error_handling\\error_models_enums": {
      "file_path": "docs\\archive\\consolidated_files\\error_handling\\error_models_enums.py",
      "functions": [
        "__str__",
        "__lt__",
        "__le__",
        "__str__",
        "__str__",
        "__str__"
      ],
      "classes": {
        "ErrorSeverity": {
          "methods": [
            "__str__",
            "__lt__",
            "__le__"
          ],
          "docstring": "Error severity levels with V2 compliance.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CircuitState": {
          "methods": [
            "__str__"
          ],
          "docstring": "Circuit breaker states with V2 compliance.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ErrorType": {
          "methods": [
            "__str__"
          ],
          "docstring": "Error types with V2 compliance.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RetryStrategy": {
          "methods": [
            "__str__"
          ],
          "docstring": "Retry strategies with V2 compliance.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\error_handling\\error_models_core": {
      "file_path": "docs\\archive\\consolidated_files\\error_handling\\error_models_core.py",
      "functions": [
        "__post_init__",
        "__post_init__",
        "__post_init__"
      ],
      "classes": {
        "ErrorContext": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Error context with V2 compliance.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CircuitBreakerConfig": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Circuit breaker configuration with V2 compliance.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RetryConfig": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Retry configuration with V2 compliance.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\error_handling\\error_reporting_utilities": {
      "file_path": "docs\\archive\\consolidated_files\\error_handling\\error_reporting_utilities.py",
      "functions": [
        "get_error_reporter",
        "report_error",
        "get_error_report",
        "clear_error_reports",
        "get_error_statistics",
        "create_component_report"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\error_handling\\error_reporting_core": {
      "file_path": "docs\\archive\\consolidated_files\\error_handling\\error_reporting_core.py",
      "functions": [
        "__init__",
        "add_error",
        "get_summary",
        "get_detailed_report",
        "clear_errors",
        "get_error_count",
        "get_errors_by_severity"
      ],
      "classes": {
        "ErrorReport": {
          "methods": [
            "__init__",
            "add_error",
            "get_summary",
            "get_detailed_report",
            "clear_errors",
            "get_error_count",
            "get_errors_by_severity"
          ],
          "docstring": "Represents a comprehensive error report.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\error_handling\\error_handling_models": {
      "file_path": "docs\\archive\\consolidated_files\\error_handling\\error_handling_models.py",
      "functions": [
        "__post_init__",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "__post_init__",
        "to_dict",
        "__post_init__",
        "to_dict",
        "__init__",
        "calculate_delay"
      ],
      "classes": {
        "ErrorSeverity": {
          "methods": [],
          "docstring": "Error severity levels.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ErrorCategory": {
          "methods": [],
          "docstring": "Error category types.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ErrorContext": {
          "methods": [],
          "docstring": "Error context information.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "StandardErrorResponse": {
          "methods": [
            "__post_init__",
            "to_dict"
          ],
          "docstring": "Standardized error response format.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "FileErrorResponse": {
          "methods": [
            "to_dict"
          ],
          "docstring": "File operation error response.",
          "base_classes": [
            "StandardErrorResponse"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "NetworkErrorResponse": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Network operation error response.",
          "base_classes": [
            "StandardErrorResponse"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DatabaseErrorResponse": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Database operation error response.",
          "base_classes": [
            "StandardErrorResponse"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ValidationErrorResponse": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Validation error response.",
          "base_classes": [
            "StandardErrorResponse"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ConfigurationErrorResponse": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Configuration error response.",
          "base_classes": [
            "StandardErrorResponse"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentErrorResponse": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Agent operation error response.",
          "base_classes": [
            "StandardErrorResponse"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CoordinationErrorResponse": {
          "methods": [
            "__post_init__",
            "to_dict"
          ],
          "docstring": "Coordination error response.",
          "base_classes": [
            "StandardErrorResponse"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ErrorSummary": {
          "methods": [
            "__post_init__",
            "to_dict"
          ],
          "docstring": "Error summary statistics.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RecoverableErrors": {
          "methods": [],
          "docstring": "Recoverable error types.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ErrorSeverityMapping": {
          "methods": [],
          "docstring": "Error severity mapping.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RetryConfiguration": {
          "methods": [
            "__init__",
            "calculate_delay"
          ],
          "docstring": "Retry operation configuration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\error_handling\\retry_safety_engine": {
      "file_path": "docs\\archive\\consolidated_files\\error_handling\\retry_safety_engine.py",
      "functions": [
        "retry_operation",
        "safe_execute",
        "__init__",
        "_get_logger",
        "retry_operation",
        "safe_execute",
        "validate_and_execute",
        "execute_with_timeout",
        "circuit_breaker_execute",
        "timeout_handler"
      ],
      "classes": {
        "RetrySafetyEngine": {
          "methods": [
            "__init__",
            "_get_logger",
            "retry_operation",
            "safe_execute",
            "validate_and_execute",
            "execute_with_timeout",
            "circuit_breaker_execute"
          ],
          "docstring": "Engine for retry operations and safe execution.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\error_handling\\error_recovery": {
      "file_path": "docs\\archive\\consolidated_files\\error_handling\\error_recovery.py",
      "functions": [
        "get_logger",
        "with_error_recovery",
        "create_error_context",
        "attempt_error_recovery",
        "get_recovery_stats",
        "__init__",
        "__init__",
        "can_recover",
        "execute_recovery",
        "__init__",
        "can_recover",
        "execute_recovery",
        "_default_service_restart",
        "__init__",
        "can_recover",
        "execute_recovery",
        "_default_config_reset",
        "__init__",
        "can_recover",
        "execute_recovery",
        "_default_resource_cleanup",
        "__init__",
        "_initialize_default_strategies",
        "add_strategy",
        "attempt_recovery",
        "get_recovery_statistics",
        "get_available_strategies",
        "clear_history",
        "decorator",
        "wrapper"
      ],
      "classes": {
        "ErrorSeverity": {
          "methods": [],
          "docstring": "Error severity levels.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ErrorContext": {
          "methods": [
            "__init__"
          ],
          "docstring": "Context information for error recovery.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RecoveryStrategy": {
          "methods": [
            "__init__",
            "can_recover",
            "execute_recovery"
          ],
          "docstring": "Base class for error recovery strategies.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ServiceRestartStrategy": {
          "methods": [
            "__init__",
            "can_recover",
            "execute_recovery",
            "_default_service_restart"
          ],
          "docstring": "Strategy for restarting failed services.",
          "base_classes": [
            "RecoveryStrategy"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ConfigurationResetStrategy": {
          "methods": [
            "__init__",
            "can_recover",
            "execute_recovery",
            "_default_config_reset"
          ],
          "docstring": "Strategy for resetting configuration to defaults.",
          "base_classes": [
            "RecoveryStrategy"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ResourceCleanupStrategy": {
          "methods": [
            "__init__",
            "can_recover",
            "execute_recovery",
            "_default_resource_cleanup"
          ],
          "docstring": "Strategy for cleaning up stuck resources.",
          "base_classes": [
            "RecoveryStrategy"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ErrorRecoveryManager": {
          "methods": [
            "__init__",
            "_initialize_default_strategies",
            "add_strategy",
            "attempt_recovery",
            "get_recovery_statistics",
            "get_available_strategies",
            "clear_history"
          ],
          "docstring": "Manages error recovery strategies with comprehensive tracking.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\error_handling\\retry_mechanisms": {
      "file_path": "docs\\archive\\consolidated_files\\error_handling\\retry_mechanisms.py",
      "functions": [
        "retry_on_exception",
        "retry_on_failure",
        "with_exponential_backoff",
        "__init__",
        "_calculate_delay",
        "execute_with_retry",
        "decorator",
        "decorator",
        "__init__",
        "get_delay",
        "decorator",
        "wrapper",
        "wrapper",
        "wrapper",
        "execute",
        "execute"
      ],
      "classes": {
        "RetryConfig": {
          "methods": [],
          "docstring": "Configuration for retry mechanism.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RetryMechanism": {
          "methods": [
            "__init__",
            "_calculate_delay",
            "execute_with_retry"
          ],
          "docstring": "Retry mechanism with exponential backoff and jitter.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RetryException": {
          "methods": [],
          "docstring": "Exception raised to trigger retry.",
          "base_classes": [
            "Exception"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ExponentialBackoff": {
          "methods": [
            "__init__",
            "get_delay"
          ],
          "docstring": "Exponential backoff calculator.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\error_handling\\specialized_handlers": {
      "file_path": "docs\\archive\\consolidated_files\\error_handling\\specialized_handlers.py",
      "functions": [
        "create_specialized_error_handlers",
        "__init__",
        "handle_error",
        "handle_file_error",
        "handle_network_error",
        "handle_database_error",
        "handle_validation_error",
        "handle_agent_error",
        "get_error_summary",
        "cleanup"
      ],
      "classes": {
        "SpecializedErrorHandlers": {
          "methods": [
            "__init__",
            "handle_error",
            "handle_file_error",
            "handle_network_error",
            "handle_database_error",
            "handle_validation_error",
            "handle_agent_error",
            "get_error_summary",
            "cleanup"
          ],
          "docstring": "KISS Simplified Error Handlers.\n\nRemoved overengineering - focuses on essential error handling only.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\error_handling\\circuit_breaker\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\error_handling\\circuit_breaker\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\error_handling\\error_reporting_reporter": {
      "file_path": "docs\\archive\\consolidated_files\\error_handling\\error_reporting_reporter.py",
      "functions": [
        "__init__",
        "create_report",
        "get_report",
        "get_all_reports",
        "add_error_to_report",
        "get_global_summary",
        "clear_all_reports",
        "get_errors_by_component",
        "get_error_statistics"
      ],
      "classes": {
        "ErrorReporter": {
          "methods": [
            "__init__",
            "create_report",
            "get_report",
            "get_all_reports",
            "add_error_to_report",
            "get_global_summary",
            "clear_all_reports",
            "get_errors_by_component",
            "get_error_statistics"
          ],
          "docstring": "Centralized error reporting system.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\error_handling\\circuit_breaker\\core": {
      "file_path": "docs\\archive\\consolidated_files\\error_handling\\circuit_breaker\\core.py",
      "functions": [
        "__init__",
        "__init__",
        "_should_attempt_reset",
        "_record_success",
        "_record_failure",
        "get_status"
      ],
      "classes": {
        "CircuitState": {
          "methods": [],
          "docstring": "Circuit breaker states.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CircuitBreakerConfig": {
          "methods": [
            "__init__"
          ],
          "docstring": "Configuration for circuit breaker.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CircuitBreakerCore": {
          "methods": [
            "__init__",
            "_should_attempt_reset",
            "_record_success",
            "_record_failure",
            "get_status"
          ],
          "docstring": "Core circuit breaker functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\error_handling\\metrics\\error_reports": {
      "file_path": "docs\\archive\\consolidated_files\\error_handling\\metrics\\error_reports.py",
      "functions": [
        "__post_init__",
        "add_error_data",
        "add_recommendation",
        "get_average_resolution_time",
        "get_summary"
      ],
      "classes": {
        "ErrorReport": {
          "methods": [
            "__post_init__",
            "add_error_data",
            "add_recommendation",
            "get_average_resolution_time",
            "get_summary"
          ],
          "docstring": "Error report with V2 compliance.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\error_handling\\metrics\\error_alerts": {
      "file_path": "docs\\archive\\consolidated_files\\error_handling\\metrics\\error_alerts.py",
      "functions": [
        "__post_init__",
        "acknowledge",
        "add_recipient",
        "remove_recipient",
        "is_high_priority",
        "get_summary"
      ],
      "classes": {
        "ErrorAlert": {
          "methods": [
            "__post_init__",
            "acknowledge",
            "add_recipient",
            "remove_recipient",
            "is_high_priority",
            "get_summary"
          ],
          "docstring": "Error alert with V2 compliance.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\file_locking\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\file_locking\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\file_locking\\file_locking_engine_platform": {
      "file_path": "docs\\archive\\consolidated_files\\file_locking\\file_locking_engine_platform.py",
      "functions": [
        "__init__",
        "_acquire_windows_lock",
        "_acquire_unix_lock",
        "_is_lock_stale",
        "_remove_stale_lock"
      ],
      "classes": {
        "FileLockEnginePlatform": {
          "methods": [
            "__init__",
            "_acquire_windows_lock",
            "_acquire_unix_lock",
            "_is_lock_stale",
            "_remove_stale_lock"
          ],
          "docstring": "Platform-specific operations for file locking engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\error_handling\\metrics\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\error_handling\\metrics\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\error_handling\\metrics\\error_metrics": {
      "file_path": "docs\\archive\\consolidated_files\\error_handling\\metrics\\error_metrics.py",
      "functions": [
        "__post_init__",
        "add_error",
        "calculate_success_rate",
        "get_summary"
      ],
      "classes": {
        "ErrorMetrics": {
          "methods": [
            "__post_init__",
            "add_error",
            "calculate_success_rate",
            "get_summary"
          ],
          "docstring": "Error metrics with V2 compliance.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\file_locking\\file_locking_models": {
      "file_path": "docs\\archive\\consolidated_files\\file_locking\\file_locking_models.py",
      "functions": [
        "is_stale",
        "to_dict",
        "to_dict",
        "to_dict",
        "update_averages"
      ],
      "classes": {
        "LockStatus": {
          "methods": [],
          "docstring": "Status of file lock operations.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "LockConfig": {
          "methods": [],
          "docstring": "Configuration for file locking operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "LockInfo": {
          "methods": [
            "is_stale",
            "to_dict"
          ],
          "docstring": "Information about an active file lock.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "LockResult": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Result of file lock operation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "LockMetrics": {
          "methods": [
            "to_dict",
            "update_averages"
          ],
          "docstring": "Metrics for file locking operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\file_locking\\file_locking_orchestrator": {
      "file_path": "docs\\archive\\consolidated_files\\file_locking\\file_locking_orchestrator.py",
      "functions": [
        "get_file_lock_manager",
        "__init__",
        "create_file_lock",
        "acquire_lock",
        "release_lock",
        "is_locked",
        "get_lock_info",
        "force_release_lock",
        "extend_lock",
        "get_active_locks",
        "get_lock_metrics",
        "cleanup_expired_locks",
        "batch_acquire_locks",
        "batch_release_locks",
        "get_locks_by_process",
        "get_locks_by_thread",
        "get_locks_by_owner",
        "get_locks_by_type",
        "get_locks_by_duration",
        "get_locks_by_metadata",
        "get_lock_statistics",
        "find_conflicting_locks",
        "get_lock_health_status",
        "__init__",
        "__enter__",
        "__exit__"
      ],
      "classes": {
        "FileLockingOrchestrator": {
          "methods": [
            "__init__",
            "create_file_lock",
            "acquire_lock",
            "release_lock",
            "is_locked",
            "get_lock_info",
            "force_release_lock",
            "extend_lock",
            "get_active_locks",
            "get_lock_metrics",
            "cleanup_expired_locks",
            "batch_acquire_locks",
            "batch_release_locks",
            "get_locks_by_process",
            "get_locks_by_thread",
            "get_locks_by_owner",
            "get_locks_by_type",
            "get_locks_by_duration",
            "get_locks_by_metadata",
            "get_lock_statistics",
            "find_conflicting_locks",
            "get_lock_health_status"
          ],
          "docstring": "Main orchestrator for file locking operations - V2 compliant.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "FileLockContext": {
          "methods": [
            "__init__",
            "__enter__",
            "__exit__"
          ],
          "docstring": "Context manager for file locking.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\file_locking\\file_locking_manager": {
      "file_path": "docs\\archive\\consolidated_files\\file_locking\\file_locking_manager.py",
      "functions": [
        "__init__",
        "create_file_lock",
        "acquire_lock",
        "release_lock",
        "is_locked",
        "cleanup_stale_locks",
        "get_active_locks",
        "get_lock_info",
        "force_release_lock",
        "get_metrics",
        "reset_metrics",
        "get_lock_summary"
      ],
      "classes": {
        "FileLockManager": {
          "methods": [
            "__init__",
            "create_file_lock",
            "acquire_lock",
            "release_lock",
            "is_locked",
            "cleanup_stale_locks",
            "get_active_locks",
            "get_lock_info",
            "force_release_lock",
            "get_metrics",
            "reset_metrics",
            "get_lock_summary"
          ],
          "docstring": "High-level file locking manager.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\file_locking\\operations\\lock_queries": {
      "file_path": "docs\\archive\\consolidated_files\\file_locking\\operations\\lock_queries.py",
      "functions": [
        "__init__",
        "get_locks_by_process",
        "get_locks_by_thread",
        "get_locks_by_owner",
        "get_locks_by_type",
        "get_locks_by_duration",
        "get_locks_by_metadata",
        "get_lock_statistics",
        "find_conflicting_locks",
        "get_lock_health_status"
      ],
      "classes": {
        "LockQueries": {
          "methods": [
            "__init__",
            "get_locks_by_process",
            "get_locks_by_thread",
            "get_locks_by_owner",
            "get_locks_by_type",
            "get_locks_by_duration",
            "get_locks_by_metadata",
            "get_lock_statistics",
            "find_conflicting_locks",
            "get_lock_health_status"
          ],
          "docstring": "File locking query functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\file_locking\\operations\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\file_locking\\operations\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\file_locking\\file_locking_engine_operations": {
      "file_path": "docs\\archive\\consolidated_files\\file_locking\\file_locking_engine_operations.py",
      "functions": [
        "__init__",
        "acquire_lock",
        "release_lock",
        "cleanup_stale_locks"
      ],
      "classes": {
        "FileLockEngineOperations": {
          "methods": [
            "__init__",
            "acquire_lock",
            "release_lock",
            "cleanup_stale_locks"
          ],
          "docstring": "Core operations for file locking engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\file_locking\\operations\\lock_operations": {
      "file_path": "docs\\archive\\consolidated_files\\file_locking\\operations\\lock_operations.py",
      "functions": [
        "__init__",
        "create_file_lock",
        "acquire_lock",
        "release_lock",
        "is_locked",
        "get_lock_info",
        "force_release_lock",
        "extend_lock",
        "get_active_locks",
        "get_lock_metrics",
        "cleanup_expired_locks",
        "batch_acquire_locks",
        "batch_release_locks"
      ],
      "classes": {
        "LockOperations": {
          "methods": [
            "__init__",
            "create_file_lock",
            "acquire_lock",
            "release_lock",
            "is_locked",
            "get_lock_info",
            "force_release_lock",
            "extend_lock",
            "get_active_locks",
            "get_lock_metrics",
            "cleanup_expired_locks",
            "batch_acquire_locks",
            "batch_release_locks"
          ],
          "docstring": "Core file locking operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\integration\\analytics\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\integration\\analytics\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\integration\\analytics\\analytics_engine": {
      "file_path": "docs\\archive\\consolidated_files\\integration\\analytics\\analytics_engine.py",
      "functions": [
        "__init__",
        "analyze_performance_data",
        "get_trend_analysis",
        "get_performance_forecast",
        "get_optimization_recommendations",
        "get_analytics_summary",
        "clear_all_caches",
        "get_cached_trends",
        "get_cached_forecasts",
        "get_latest_recommendations",
        "validate_forecast_accuracy",
        "get_recommendations_by_priority",
        "get_recommendations_by_category"
      ],
      "classes": {
        "VectorIntegrationAnalyticsEngine": {
          "methods": [
            "__init__",
            "analyze_performance_data",
            "get_trend_analysis",
            "get_performance_forecast",
            "get_optimization_recommendations",
            "get_analytics_summary",
            "clear_all_caches",
            "get_cached_trends",
            "get_cached_forecasts",
            "get_latest_recommendations",
            "validate_forecast_accuracy",
            "get_recommendations_by_priority",
            "get_recommendations_by_category"
          ],
          "docstring": "Main analytics engine for vector integration analysis.\n\nCoordinates trend analysis, forecasting, and recommendation generation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\integration\\analytics\\forecast_generator": {
      "file_path": "docs\\archive\\consolidated_files\\integration\\analytics\\forecast_generator.py",
      "functions": [
        "__init__",
        "generate_forecast",
        "_generate_simple_forecast",
        "generate_multi_metric_forecast",
        "validate_forecast_accuracy",
        "get_forecast_summary",
        "get_cached_forecasts",
        "clear_forecast_cache"
      ],
      "classes": {
        "ForecastGenerator": {
          "methods": [
            "__init__",
            "generate_forecast",
            "_generate_simple_forecast",
            "generate_multi_metric_forecast",
            "validate_forecast_accuracy",
            "get_forecast_summary",
            "get_cached_forecasts",
            "clear_forecast_cache"
          ],
          "docstring": "Generator for performance forecasting and prediction.\n\nProvides forecasting capabilities using various statistical methods.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\integration\\analytics\\recommendation_engine_system": {
      "file_path": "docs\\archive\\consolidated_files\\integration\\analytics\\recommendation_engine_system.py",
      "functions": [
        "__init__",
        "_generate_system_recommendations",
        "_calculate_metric_summaries",
        "_check_resource_optimization",
        "_check_performance_optimization",
        "_check_scalability_optimization",
        "_create_metric_recommendation"
      ],
      "classes": {
        "RecommendationEngineSystem": {
          "methods": [
            "__init__",
            "_generate_system_recommendations",
            "_calculate_metric_summaries",
            "_check_resource_optimization",
            "_check_performance_optimization",
            "_check_scalability_optimization",
            "_create_metric_recommendation"
          ],
          "docstring": "System-wide recommendation functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\integration\\models\\data_models": {
      "file_path": "docs\\archive\\consolidated_files\\integration\\models\\data_models.py",
      "functions": [
        "__post_init__",
        "is_critical",
        "is_resolved",
        "__post_init__",
        "is_significant",
        "__post_init__",
        "is_expired",
        "__post_init__",
        "__post_init__",
        "is_valid"
      ],
      "classes": {
        "PerformanceAlert": {
          "methods": [
            "__post_init__",
            "is_critical",
            "is_resolved"
          ],
          "docstring": "Performance alert data structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "TrendAnalysis": {
          "methods": [
            "__post_init__",
            "is_significant"
          ],
          "docstring": "Trend analysis data structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PerformanceForecast": {
          "methods": [
            "__post_init__",
            "is_expired"
          ],
          "docstring": "Performance forecast data structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "OptimizationRecommendation": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Optimization recommendation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PerformanceMetrics": {
          "methods": [
            "__post_init__",
            "is_valid"
          ],
          "docstring": "Performance metrics data structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\integration_coordinators\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\integration_coordinators\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\integration\\models\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\integration\\models\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\integration\\analytics\\recommendation_engine_analysis": {
      "file_path": "docs\\archive\\consolidated_files\\integration\\analytics\\recommendation_engine_analysis.py",
      "functions": [
        "__init__",
        "_generate_metric_recommendations",
        "_analyze_metric_for_recommendations",
        "_calculate_metric_summaries",
        "_is_highly_volatile"
      ],
      "classes": {
        "RecommendationEngineAnalysis": {
          "methods": [
            "__init__",
            "_generate_metric_recommendations",
            "_analyze_metric_for_recommendations",
            "_calculate_metric_summaries",
            "_is_highly_volatile"
          ],
          "docstring": "Analysis functionality for recommendation engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\integration_coordinators\\unified_integration\\monitor_models": {
      "file_path": "docs\\archive\\consolidated_files\\integration_coordinators\\unified_integration\\monitor_models.py",
      "functions": [
        "__post_init__",
        "__post_init__"
      ],
      "classes": {
        "MonitoringConfig": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Configuration for integration monitoring.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MonitoringAlert": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Monitoring alert data structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MonitoringStats": {
          "methods": [],
          "docstring": "Monitoring statistics.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\integration_coordinators\\unified_integration\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\integration_coordinators\\unified_integration\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\integration_coordinators\\unified_integration\\models_config": {
      "file_path": "docs\\archive\\consolidated_files\\integration_coordinators\\unified_integration\\models_config.py",
      "functions": [
        "__post_init__",
        "__post_init__",
        "__post_init__",
        "__post_init__"
      ],
      "classes": {
        "IntegrationConfig": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Integration configuration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "IntegrationTask": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Integration task definition.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "IntegrationRequest": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Integration request data.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "IntegrationResponse": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Integration response data.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\integration_coordinators\\vector_database_coordinator": {
      "file_path": "docs\\archive\\consolidated_files\\integration_coordinators\\vector_database_coordinator.py",
      "functions": [
        "__init__",
        "get_unified_performance_report",
        "get_optimization_recommendations",
        "optimize_integration",
        "get_integration_status"
      ],
      "classes": {
        "VectorDatabaseCoordinator": {
          "methods": [
            "__init__",
            "get_unified_performance_report",
            "get_optimization_recommendations",
            "optimize_integration",
            "get_integration_status"
          ],
          "docstring": "Coordinates vector database integration optimization.",
          "base_classes": [
            "IIntegrationCoordinator"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\integration_coordinators\\unified_integration\\coordinators\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\integration_coordinators\\unified_integration\\coordinators\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\integration_coordinators\\unified_integration\\monitor": {
      "file_path": "docs\\archive\\consolidated_files\\integration_coordinators\\unified_integration\\monitor.py",
      "functions": [
        "create_integration_monitor",
        "__init__",
        "start_monitoring",
        "stop_monitoring",
        "add_callback",
        "remove_callback",
        "record_request",
        "get_metrics",
        "get_all_metrics",
        "is_monitoring_active",
        "get_monitoring_status",
        "cleanup"
      ],
      "classes": {
        "IntegrationMonitor": {
          "methods": [
            "__init__",
            "start_monitoring",
            "stop_monitoring",
            "add_callback",
            "remove_callback",
            "record_request",
            "get_metrics",
            "get_all_metrics",
            "is_monitoring_active",
            "get_monitoring_status",
            "cleanup"
          ],
          "docstring": "V2 Compliant Integration Monitor.\n\nUses specialized components to provide monitoring capabilities while maintaining\nclean, focused architecture.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\integration_coordinators\\unified_integration\\coordinators\\health_monitor": {
      "file_path": "docs\\archive\\consolidated_files\\integration_coordinators\\unified_integration\\coordinators\\health_monitor.py",
      "functions": [
        "__init__",
        "get_system_health",
        "_get_health_status_text",
        "_get_health_recommendations",
        "add_monitoring_callback",
        "set_alert_threshold",
        "get_alert_thresholds",
        "check_health_thresholds",
        "record_health_status",
        "get_health_trends",
        "get_monitor_status"
      ],
      "classes": {
        "HealthMonitor": {
          "methods": [
            "__init__",
            "get_system_health",
            "_get_health_status_text",
            "_get_health_recommendations",
            "add_monitoring_callback",
            "set_alert_threshold",
            "get_alert_thresholds",
            "check_health_thresholds",
            "record_health_status",
            "get_health_trends",
            "get_monitor_status"
          ],
          "docstring": "Handles system health monitoring and recommendations.\n\nManages health status tracking, recommendations, and system health analysis.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\integration_coordinators\\unified_integration\\models\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\integration_coordinators\\unified_integration\\models\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\integration_coordinators\\unified_integration\\coordinators\\config_manager": {
      "file_path": "docs\\archive\\consolidated_files\\integration_coordinators\\unified_integration\\coordinators\\config_manager.py",
      "functions": [
        "__init__",
        "export_configuration",
        "validate_configuration",
        "update_configuration",
        "get_configuration_summary",
        "get_configuration_history",
        "reset_configuration",
        "get_manager_status"
      ],
      "classes": {
        "ConfigManager": {
          "methods": [
            "__init__",
            "export_configuration",
            "validate_configuration",
            "update_configuration",
            "get_configuration_summary",
            "get_configuration_history",
            "reset_configuration",
            "get_manager_status"
          ],
          "docstring": "Handles configuration management and export.\n\nManages configuration settings, export functionality, and configuration validation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\integration_coordinators\\unified_integration\\monitor_engine": {
      "file_path": "docs\\archive\\consolidated_files\\integration_coordinators\\unified_integration\\monitor_engine.py",
      "functions": [
        "__init__",
        "start_monitoring",
        "stop_monitoring",
        "add_callback",
        "remove_callback",
        "get_metrics",
        "get_all_metrics",
        "get_stats",
        "check_integration_health",
        "update_metrics",
        "_monitoring_loop",
        "_perform_monitoring_cycle",
        "_trigger_alert",
        "_handle_monitoring_error",
        "_handle_callback_error"
      ],
      "classes": {
        "IntegrationMonitorEngine": {
          "methods": [
            "__init__",
            "start_monitoring",
            "stop_monitoring",
            "add_callback",
            "remove_callback",
            "get_metrics",
            "get_all_metrics",
            "get_stats",
            "check_integration_health",
            "update_metrics",
            "_monitoring_loop",
            "_perform_monitoring_cycle",
            "_trigger_alert",
            "_handle_monitoring_error",
            "_handle_callback_error"
          ],
          "docstring": "Core engine for integration monitoring operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\integration_coordinators\\unified_integration\\monitors\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\integration_coordinators\\unified_integration\\monitors\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\integration_coordinators\\unified_integration\\monitors\\monitoring_thread": {
      "file_path": "docs\\archive\\consolidated_files\\integration_coordinators\\unified_integration\\monitors\\monitoring_thread.py",
      "functions": [
        "__init__",
        "start_monitoring",
        "stop_monitoring",
        "_monitoring_loop",
        "is_monitoring_active",
        "get_monitoring_status",
        "set_monitoring_interval",
        "cleanup"
      ],
      "classes": {
        "MonitoringThread": {
          "methods": [
            "__init__",
            "start_monitoring",
            "stop_monitoring",
            "_monitoring_loop",
            "is_monitoring_active",
            "get_monitoring_status",
            "set_monitoring_interval",
            "cleanup"
          ],
          "docstring": "Manages monitoring thread operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\integration_coordinators\\unified_integration\\monitors\\metrics_collector": {
      "file_path": "docs\\archive\\consolidated_files\\integration_coordinators\\unified_integration\\monitors\\metrics_collector.py",
      "functions": [
        "__init__",
        "collect_metrics",
        "update_metrics",
        "get_metrics",
        "get_all_metrics",
        "reset_metrics",
        "cleanup"
      ],
      "classes": {
        "MetricsCollector": {
          "methods": [
            "__init__",
            "collect_metrics",
            "update_metrics",
            "get_metrics",
            "get_all_metrics",
            "reset_metrics",
            "cleanup"
          ],
          "docstring": "Collects and processes integration metrics.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\intelligent_context\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\intelligent_context\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\intelligent_context\\intelligent_context_models": {
      "file_path": "docs\\archive\\consolidated_files\\intelligent_context\\intelligent_context_models.py",
      "functions": [
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict"
      ],
      "classes": {
        "MissionPhase": {
          "methods": [],
          "docstring": "Mission phases.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentStatus": {
          "methods": [],
          "docstring": "Agent availability status.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RiskLevel": {
          "methods": [],
          "docstring": "Risk levels.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MissionContext": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Mission context structure for intelligent retrieval.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentCapability": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Agent capability structure for matching and optimization.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SearchResult": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Search result structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ContextRetrievalResult": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Result of context retrieval operation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EmergencyContext": {
          "methods": [],
          "docstring": "Emergency context structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "InterventionProtocol": {
          "methods": [],
          "docstring": "Intervention protocol structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentRecommendation": {
          "methods": [],
          "docstring": "Agent recommendation structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RiskAssessment": {
          "methods": [],
          "docstring": "Risk assessment structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SuccessPrediction": {
          "methods": [],
          "docstring": "Success prediction structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ContextMetrics": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Metrics for context retrieval operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\intelligent_context\\intelligent_context_engine": {
      "file_path": "docs\\archive\\consolidated_files\\intelligent_context\\intelligent_context_engine.py",
      "functions": [
        "__init__",
        "update_mission_context",
        "get_mission_context",
        "update_agent_capability",
        "get_agent_capabilities",
        "search_context",
        "get_emergency_context",
        "get_intervention_protocols",
        "optimize_agent_assignment",
        "analyze_success_patterns",
        "assess_mission_risks",
        "generate_success_predictions",
        "get_metrics",
        "_update_metrics"
      ],
      "classes": {
        "IntelligentContextEngine": {
          "methods": [
            "__init__",
            "update_mission_context",
            "get_mission_context",
            "update_agent_capability",
            "get_agent_capabilities",
            "search_context",
            "get_emergency_context",
            "get_intervention_protocols",
            "optimize_agent_assignment",
            "analyze_success_patterns",
            "assess_mission_risks",
            "generate_success_predictions",
            "get_metrics",
            "_update_metrics"
          ],
          "docstring": "Core engine for intelligent context retrieval operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\integration_coordinators\\unified_integration\\models\\factory": {
      "file_path": "docs\\archive\\consolidated_files\\integration_coordinators\\unified_integration\\models\\factory.py",
      "functions": [
        "create_integration_metrics",
        "create_optimization_config",
        "create_integration_config",
        "create_integration_task"
      ],
      "classes": {
        "IntegrationModels": {
          "methods": [
            "create_integration_metrics",
            "create_optimization_config",
            "create_integration_config",
            "create_integration_task"
          ],
          "docstring": "Factory class for creating integration models.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\intelligent_context\\intelligent_context_optimization_models": {
      "file_path": "docs\\archive\\consolidated_files\\intelligent_context\\intelligent_context_optimization_models.py",
      "functions": [],
      "classes": {
        "OptimizationResult": {
          "methods": [],
          "docstring": "Result of optimization operation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentScore": {
          "methods": [],
          "docstring": "Agent scoring data.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MissionAnalysis": {
          "methods": [],
          "docstring": "Mission analysis data.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RiskMitigation": {
          "methods": [],
          "docstring": "Risk mitigation strategy.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SuccessFactor": {
          "methods": [],
          "docstring": "Success factor analysis.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\intelligent_context\\intelligent_context_emergency": {
      "file_path": "docs\\archive\\consolidated_files\\intelligent_context\\intelligent_context_emergency.py",
      "functions": [
        "__init__",
        "get_emergency_context",
        "get_intervention_protocols",
        "_get_intervention_protocols",
        "create_emergency_protocol",
        "assess_emergency_severity",
        "get_emergency_agents",
        "calculate_emergency_response_time"
      ],
      "classes": {
        "IntelligentContextEmergency": {
          "methods": [
            "__init__",
            "get_emergency_context",
            "get_intervention_protocols",
            "_get_intervention_protocols",
            "create_emergency_protocol",
            "assess_emergency_severity",
            "get_emergency_agents",
            "calculate_emergency_response_time"
          ],
          "docstring": "Emergency operations for intelligent context retrieval.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\intelligent_context\\core\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\intelligent_context\\core\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\intelligent_context\\unified_intelligent_context\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\intelligent_context\\unified_intelligent_context\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\intelligent_context\\engines\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\intelligent_context\\engines\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\intelligent_context\\core\\context_core": {
      "file_path": "docs\\archive\\consolidated_files\\intelligent_context\\core\\context_core.py",
      "functions": [
        "__init__",
        "update_mission_context",
        "get_mission_context",
        "get_agent_capabilities",
        "search_context",
        "get_emergency_context",
        "get_intervention_protocols",
        "optimize_agent_assignment",
        "analyze_success_patterns",
        "assess_mission_risks",
        "generate_success_predictions",
        "get_context_metrics"
      ],
      "classes": {
        "ContextCore": {
          "methods": [
            "__init__",
            "update_mission_context",
            "get_mission_context",
            "get_agent_capabilities",
            "search_context",
            "get_emergency_context",
            "get_intervention_protocols",
            "optimize_agent_assignment",
            "analyze_success_patterns",
            "assess_mission_risks",
            "generate_success_predictions",
            "get_context_metrics"
          ],
          "docstring": "Core intelligent context functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\intelligent_context\\intelligent_context_search": {
      "file_path": "docs\\archive\\consolidated_files\\intelligent_context\\intelligent_context_search.py",
      "functions": [
        "__init__",
        "search_context",
        "search_missions",
        "search_agents",
        "search_by_skills",
        "search_by_mission_type"
      ],
      "classes": {
        "IntelligentContextSearch": {
          "methods": [
            "__init__",
            "search_context",
            "search_missions",
            "search_agents",
            "search_by_skills",
            "search_by_mission_type"
          ],
          "docstring": "Search operations for intelligent context retrieval.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\intelligent_context\\intelligent_context_orchestrator": {
      "file_path": "docs\\archive\\consolidated_files\\intelligent_context\\intelligent_context_orchestrator.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\intelligent_context\\unified_intelligent_context\\engine_search": {
      "file_path": "docs\\archive\\consolidated_files\\intelligent_context\\unified_intelligent_context\\engine_search.py",
      "functions": [
        "__init__"
      ],
      "classes": {
        "IntelligentContextEngineSearch": {
          "methods": [
            "__init__"
          ],
          "docstring": "Search functionality for intelligent context engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\intelligent_context\\unified_intelligent_context\\search_base": {
      "file_path": "docs\\archive\\consolidated_files\\intelligent_context\\unified_intelligent_context\\search_base.py",
      "functions": [
        "__init__",
        "get_search_history",
        "clear_search_history",
        "add_search_pattern",
        "get_search_patterns",
        "_record_search",
        "get_search_statistics"
      ],
      "classes": {
        "IntelligentContextSearchBase": {
          "methods": [
            "__init__",
            "get_search_history",
            "clear_search_history",
            "add_search_pattern",
            "get_search_patterns",
            "_record_search",
            "get_search_statistics"
          ],
          "docstring": "Base intelligent context search engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\intelligent_context\\engines\\risk_assessment_engine": {
      "file_path": "docs\\archive\\consolidated_files\\intelligent_context\\engines\\risk_assessment_engine.py",
      "functions": [
        "__init__",
        "assess_mission_risks",
        "_determine_risk_level",
        "_generate_risk_mitigations",
        "calculate_risk_score",
        "get_risk_summary",
        "get_engine_status"
      ],
      "classes": {
        "RiskAssessmentEngine": {
          "methods": [
            "__init__",
            "assess_mission_risks",
            "_determine_risk_level",
            "_generate_risk_mitigations",
            "calculate_risk_score",
            "get_risk_summary",
            "get_engine_status"
          ],
          "docstring": "Handles risk assessment and mitigation logic.\n\nManages risk analysis, mitigation generation, and risk level determination.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\intelligent_context\\unified_intelligent_context\\search_operations": {
      "file_path": "docs\\archive\\consolidated_files\\intelligent_context\\unified_intelligent_context\\search_operations.py",
      "functions": [
        "__init__",
        "search_contexts",
        "_preprocess_query",
        "_perform_search",
        "_create_mock_results",
        "search_with_pattern",
        "optimize_search_query"
      ],
      "classes": {
        "IntelligentContextSearchOperations": {
          "methods": [
            "__init__",
            "search_contexts",
            "_preprocess_query",
            "_perform_search",
            "_create_mock_results",
            "search_with_pattern",
            "optimize_search_query"
          ],
          "docstring": "Search operations for intelligent context search.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\base_manager": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\base_manager.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "_execute_operation",
        "cleanup",
        "get_status",
        "get_health_check",
        "update_configuration",
        "get_metrics",
        "_calculate_ops_per_hour",
        "_calculate_uptime",
        "reset_metrics",
        "__repr__"
      ],
      "classes": {
        "ManagerType": {
          "methods": [],
          "docstring": "Manager type enumeration for specialization.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ManagerState": {
          "methods": [],
          "docstring": "Manager lifecycle states.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "BaseManager": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "_execute_operation",
            "cleanup",
            "get_status",
            "get_health_check",
            "update_configuration",
            "get_metrics",
            "_calculate_ops_per_hour",
            "_calculate_uptime",
            "reset_metrics",
            "__repr__"
          ],
          "docstring": "Unified base class for all managers - SSOT implementation.\n\nConsolidates common functionality using Phase 1 shared utilities:\n- StatusManager: Centralized status reporting\n- ErrorHandler: Centralized error handling\n- LoggingManager: Centralized logging\n- ResultManager: Standardized result objects\n- ValidationManager: Unified validation\n- ConfigurationManager: Centralized configuration\n- InitializationManager: Standardized initialization\n- CleanupManager: Standardized cleanup",
          "base_classes": [
            "Manager",
            "ABC"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\intelligent_context\\engines\\agent_assignment_engine": {
      "file_path": "docs\\archive\\consolidated_files\\intelligent_context\\engines\\agent_assignment_engine.py",
      "functions": [
        "__init__",
        "optimize_agent_assignment",
        "_calculate_agent_score",
        "_calculate_specialization_match",
        "_estimate_completion_time",
        "_calculate_confidence_level",
        "get_agent_availability_summary",
        "get_engine_status"
      ],
      "classes": {
        "AgentAssignmentEngine": {
          "methods": [
            "__init__",
            "optimize_agent_assignment",
            "_calculate_agent_score",
            "_calculate_specialization_match",
            "_estimate_completion_time",
            "_calculate_confidence_level",
            "get_agent_availability_summary",
            "get_engine_status"
          ],
          "docstring": "Handles agent assignment optimization logic.\n\nManages agent scoring, recommendation generation, and assignment optimization.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\core_resource_manager": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\core_resource_manager.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "create_resource",
        "get_resource",
        "update_resource",
        "delete_resource",
        "cleanup",
        "get_status",
        "_handle_file_operation",
        "_handle_lock_operation",
        "_handle_context_operation",
        "_create_file",
        "_create_directory",
        "_create_context",
        "_read_file",
        "_write_file",
        "_load_locks",
        "_save_locks"
      ],
      "classes": {
        "CoreResourceManager": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "create_resource",
            "get_resource",
            "update_resource",
            "delete_resource",
            "cleanup",
            "get_status",
            "_handle_file_operation",
            "_handle_lock_operation",
            "_handle_context_operation",
            "_create_file",
            "_create_directory",
            "_create_context",
            "_read_file",
            "_write_file",
            "_load_locks",
            "_save_locks"
          ],
          "docstring": "Core resource manager - consolidates file, lock, and context operations.",
          "base_classes": [
            "ResourceManager"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\core_execution_manager": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\core_execution_manager.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "execute_task",
        "register_protocol",
        "get_execution_status",
        "cleanup",
        "get_status",
        "create_task",
        "execute_protocol",
        "get_task_status"
      ],
      "classes": {
        "CoreExecutionManager": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "execute_task",
            "register_protocol",
            "get_execution_status",
            "cleanup",
            "get_status",
            "create_task",
            "execute_protocol",
            "get_task_status"
          ],
          "docstring": "Core execution manager using specialized components for V2 compliance.",
          "base_classes": [
            "ExecutionManager"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\core_monitoring_manager": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\core_monitoring_manager.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "create_alert",
        "record_metric",
        "create_widget",
        "cleanup",
        "get_status",
        "_get_alerts",
        "_get_metrics",
        "_get_widgets",
        "_acknowledge_alert",
        "_resolve_alert",
        "_check_alert_rules",
        "_escalate_alert",
        "_notify_alert",
        "_auto_resolve_alert",
        "_setup_default_alert_rules",
        "_start_background_monitoring",
        "monitor"
      ],
      "classes": {
        "AlertLevel": {
          "methods": [],
          "docstring": "Alert severity levels.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MetricType": {
          "methods": [],
          "docstring": "Metric types.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "WidgetType": {
          "methods": [],
          "docstring": "Widget types.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CoreMonitoringManager": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "create_alert",
            "record_metric",
            "create_widget",
            "cleanup",
            "get_status",
            "_get_alerts",
            "_get_metrics",
            "_get_widgets",
            "_acknowledge_alert",
            "_resolve_alert",
            "_check_alert_rules",
            "_escalate_alert",
            "_notify_alert",
            "_auto_resolve_alert",
            "_setup_default_alert_rules",
            "_start_background_monitoring"
          ],
          "docstring": "Core monitoring manager - consolidates alerts, metrics, and widgets.",
          "base_classes": [
            "MonitoringManager"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\configuration_source_manager": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\configuration_source_manager.py",
      "functions": [
        "load_from_file",
        "save_to_file",
        "load_from_env"
      ],
      "classes": {
        "ConfigurationSourceManager": {
          "methods": [
            "load_from_file",
            "save_to_file",
            "load_from_env"
          ],
          "docstring": "Handles IO for configuration data.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\configuration_store": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\configuration_store.py",
      "functions": [
        "__init__",
        "set_config",
        "get_config",
        "delete_config",
        "get_all_configs",
        "clear"
      ],
      "classes": {
        "ConfigurationStore": {
          "methods": [
            "__init__",
            "set_config",
            "get_config",
            "delete_config",
            "get_all_configs",
            "clear"
          ],
          "docstring": "Provides SSOT for configuration data.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\core_onboarding_manager": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\core_onboarding_manager.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "cleanup",
        "get_status",
        "onboard_agent",
        "start_onboarding",
        "complete_onboarding",
        "get_onboarding_status"
      ],
      "classes": {
        "OnboardingSession": {
          "methods": [],
          "docstring": "Represents a single onboarding session.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CoreOnboardingManager": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "cleanup",
            "get_status",
            "onboard_agent",
            "start_onboarding",
            "complete_onboarding",
            "get_onboarding_status"
          ],
          "docstring": "Focuses solely on onboarding related operations.",
          "base_classes": [
            "Manager"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\core_recovery_manager": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\core_recovery_manager.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "cleanup",
        "get_status",
        "register_recovery_strategy",
        "recover_from_error",
        "get_recovery_strategies"
      ],
      "classes": {
        "CoreRecoveryManager": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "cleanup",
            "get_status",
            "register_recovery_strategy",
            "recover_from_error",
            "get_recovery_strategies"
          ],
          "docstring": "Provides recovery mechanisms for service operations.",
          "base_classes": [
            "Manager"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\contracts": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\contracts.py",
      "functions": [
        "initialize",
        "execute",
        "cleanup",
        "get_status",
        "create_resource",
        "get_resource",
        "update_resource",
        "delete_resource",
        "load_config",
        "save_config",
        "validate_config",
        "execute_task",
        "register_protocol",
        "get_execution_status",
        "create_alert",
        "record_metric",
        "create_widget",
        "onboard_agent",
        "recover_from_error",
        "process_results"
      ],
      "classes": {
        "ManagerContext": {
          "methods": [],
          "docstring": "SSOT: shared context object for all managers (DIP).",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ManagerResult": {
          "methods": [],
          "docstring": "Standard result object for all manager operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "Manager": {
          "methods": [
            "initialize",
            "execute",
            "cleanup",
            "get_status"
          ],
          "docstring": "Base manager protocol - stable contract (LSP).",
          "base_classes": [
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ResourceManager": {
          "methods": [
            "create_resource",
            "get_resource",
            "update_resource",
            "delete_resource"
          ],
          "docstring": "Resource management protocol - files, locks, contexts.",
          "base_classes": [
            "Manager",
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ConfigurationManager": {
          "methods": [
            "load_config",
            "save_config",
            "validate_config"
          ],
          "docstring": "Configuration management protocol - all config operations.",
          "base_classes": [
            "Manager",
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ExecutionManager": {
          "methods": [
            "execute_task",
            "register_protocol",
            "get_execution_status"
          ],
          "docstring": "Execution management protocol - tasks, protocols, execution.",
          "base_classes": [
            "Manager",
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MonitoringManager": {
          "methods": [
            "create_alert",
            "record_metric",
            "create_widget"
          ],
          "docstring": "Monitoring management protocol - alerts, metrics, widgets.",
          "base_classes": [
            "Manager",
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ServiceManager": {
          "methods": [
            "onboard_agent",
            "recover_from_error",
            "process_results"
          ],
          "docstring": "Service management protocol - onboarding, recovery, results.",
          "base_classes": [
            "Manager",
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\core_configuration_manager": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\core_configuration_manager.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "load_config",
        "save_config",
        "validate_config",
        "cleanup",
        "get_status",
        "_load_environment_vars",
        "_load_default_configs",
        "_setup_validation_rules",
        "_get_all_configs",
        "_export_config",
        "_import_config"
      ],
      "classes": {
        "CoreConfigurationManager": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "load_config",
            "save_config",
            "validate_config",
            "cleanup",
            "get_status",
            "_load_environment_vars",
            "_load_default_configs",
            "_setup_validation_rules",
            "_get_all_configs",
            "_export_config",
            "_import_config"
          ],
          "docstring": "Core configuration manager - consolidates all config operations.",
          "base_classes": [
            "ConfigurationManager"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\core_results_manager": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\core_results_manager.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "cleanup",
        "get_status",
        "process_results",
        "get_results"
      ],
      "classes": {
        "CoreResultsManager": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "cleanup",
            "get_status",
            "process_results",
            "get_results"
          ],
          "docstring": "Handles result processing operations.",
          "base_classes": [
            "Manager"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\monitoring\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\monitoring\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\unified_configuration_manager": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\unified_configuration_manager.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "cleanup",
        "get_status",
        "_load_config",
        "_save_config",
        "_get_all_configs"
      ],
      "classes": {
        "UnifiedConfigurationManager": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "cleanup",
            "get_status",
            "_load_config",
            "_save_config",
            "_get_all_configs"
          ],
          "docstring": "Aggregates configuration loading, validation and storage.",
          "base_classes": [
            "BaseManager"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\monitoring\\base_monitoring_manager": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\monitoring\\base_monitoring_manager.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "create_alert",
        "record_metric",
        "create_widget",
        "cleanup",
        "get_status",
        "_get_alerts",
        "_get_metrics",
        "_get_widgets",
        "_acknowledge_alert",
        "_resolve_alert",
        "_check_alert_rules",
        "_escalate_alert",
        "_notify_alert",
        "_auto_resolve_alert",
        "_setup_default_alert_rules",
        "_start_background_monitoring",
        "monitor"
      ],
      "classes": {
        "AlertLevel": {
          "methods": [],
          "docstring": "Alert severity levels.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MetricType": {
          "methods": [],
          "docstring": "Metric types.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "WidgetType": {
          "methods": [],
          "docstring": "Widget types.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "BaseMonitoringManager": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "create_alert",
            "record_metric",
            "create_widget",
            "cleanup",
            "get_status",
            "_get_alerts",
            "_get_metrics",
            "_get_widgets",
            "_acknowledge_alert",
            "_resolve_alert",
            "_check_alert_rules",
            "_escalate_alert",
            "_notify_alert",
            "_auto_resolve_alert",
            "_setup_default_alert_rules",
            "_start_background_monitoring"
          ],
          "docstring": "Base monitoring manager with common functionality.",
          "base_classes": [
            "MonitoringManager"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\core_service_coordinator": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\core_service_coordinator.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "cleanup",
        "get_status"
      ],
      "classes": {
        "CoreServiceCoordinator": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "cleanup",
            "get_status"
          ],
          "docstring": "Routes service operations to specialized managers.",
          "base_classes": [
            "Manager"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\core_service_manager": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\core_service_manager.py",
      "functions": [],
      "classes": {
        "CoreServiceManager": {
          "methods": [],
          "docstring": "Maintains historical import path for service manager.",
          "base_classes": [
            "CoreServiceCoordinator"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\registry": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\registry.py",
      "functions": [
        "get_manager_registry",
        "create_manager_registry",
        "__init__",
        "register_manager_type",
        "create_manager",
        "get_manager",
        "get_all_managers",
        "execute_operation",
        "cleanup_all",
        "get_status",
        "initialize_default_managers"
      ],
      "classes": {
        "ManagerRegistry": {
          "methods": [
            "__init__",
            "register_manager_type",
            "create_manager",
            "get_manager",
            "get_all_managers",
            "execute_operation",
            "cleanup_all",
            "get_status",
            "initialize_default_managers"
          ],
          "docstring": "DIP registry: high-level depends on abstraction, not concretion.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\execution\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\execution\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\execution\\base_execution_manager": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\execution\\base_execution_manager.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "execute_task",
        "register_protocol",
        "get_execution_status",
        "cleanup",
        "get_status",
        "_create_task",
        "_cancel_task",
        "_list_tasks",
        "_list_protocols",
        "_execute_task_thread",
        "_execute_file_task",
        "_execute_data_task",
        "_execute_api_task",
        "_get_execution_duration",
        "_register_default_protocols",
        "_start_task_processor",
        "processor"
      ],
      "classes": {
        "TaskStatus": {
          "methods": [],
          "docstring": "Task execution status.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ProtocolType": {
          "methods": [],
          "docstring": "Protocol types.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "BaseExecutionManager": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "execute_task",
            "register_protocol",
            "get_execution_status",
            "cleanup",
            "get_status",
            "_create_task",
            "_cancel_task",
            "_list_tasks",
            "_list_protocols",
            "_execute_task_thread",
            "_execute_file_task",
            "_execute_data_task",
            "_execute_api_task",
            "_get_execution_duration",
            "_register_default_protocols",
            "_start_task_processor"
          ],
          "docstring": "Base execution manager with common functionality.",
          "base_classes": [
            "ExecutionManager"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\execution\\execution_coordinator": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\execution\\execution_coordinator.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "cleanup",
        "get_status",
        "_sync_managers",
        "create_task",
        "execute_protocol",
        "get_task_status"
      ],
      "classes": {
        "ExecutionCoordinator": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "cleanup",
            "get_status",
            "_sync_managers",
            "create_task",
            "execute_protocol",
            "get_task_status"
          ],
          "docstring": "Coordinates execution operations between task and protocol managers.",
          "base_classes": [
            "BaseExecutionManager"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\results\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\results\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\adapters\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\adapters\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\results\\general_results_processor": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\results\\general_results_processor.py",
      "functions": [
        "_process_result_by_type",
        "_process_general_result",
        "_analyze_dict_data",
        "_analyze_list_data"
      ],
      "classes": {
        "GeneralResultsProcessor": {
          "methods": [
            "_process_result_by_type",
            "_process_general_result",
            "_analyze_dict_data",
            "_analyze_list_data"
          ],
          "docstring": "Processes general results for unknown types.",
          "base_classes": [
            "BaseResultsManager"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\orchestration\\core_orchestrator": {
      "file_path": "docs\\archive\\consolidated_files\\orchestration\\core_orchestrator.py",
      "functions": [
        "__init__",
        "plan",
        "execute",
        "report"
      ],
      "classes": {
        "CoreOrchestrator": {
          "methods": [
            "__init__",
            "plan",
            "execute",
            "report"
          ],
          "docstring": "Single SRP: execute a pipeline of Steps with events + metrics.",
          "base_classes": [
            "Orchestrator"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\orchestration\\contracts": {
      "file_path": "docs\\archive\\consolidated_files\\orchestration\\contracts.py",
      "functions": [
        "name",
        "run",
        "plan",
        "execute",
        "report"
      ],
      "classes": {
        "OrchestrationContext": {
          "methods": [],
          "docstring": "SSOT: shared context object injected everywhere (DIP).",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "OrchestrationResult": {
          "methods": [],
          "docstring": null,
          "base_classes": [],
          "maturity": "Prototype",
          "agent_type": "Utility"
        },
        "Step": {
          "methods": [
            "name",
            "run"
          ],
          "docstring": "Unit of orchestration work.",
          "base_classes": [
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "ActionAgent"
        },
        "Orchestrator": {
          "methods": [
            "plan",
            "execute",
            "report"
          ],
          "docstring": "Stable contract (LSP).",
          "base_classes": [
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\results\\validation_results_processor": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\results\\validation_results_processor.py",
      "functions": [
        "_process_result_by_type",
        "_process_validation_result"
      ],
      "classes": {
        "ValidationResultsProcessor": {
          "methods": [
            "_process_result_by_type",
            "_process_validation_result"
          ],
          "docstring": "Processes validation-specific results.",
          "base_classes": [
            "BaseResultsManager"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\monitoring\\metrics_manager": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\monitoring\\metrics_manager.py",
      "functions": [
        "execute",
        "_get_metric_aggregation",
        "_get_metric_trends",
        "_export_metrics",
        "get_status"
      ],
      "classes": {
        "MetricsManager": {
          "methods": [
            "execute",
            "_get_metric_aggregation",
            "_get_metric_trends",
            "_export_metrics",
            "get_status"
          ],
          "docstring": "Manages metrics operations.",
          "base_classes": [
            "BaseMonitoringManager"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\results\\integration_results_processor": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\results\\integration_results_processor.py",
      "functions": [
        "_process_result_by_type",
        "_process_integration_result",
        "_process_api_integration",
        "_process_database_integration",
        "_process_file_integration"
      ],
      "classes": {
        "IntegrationResultsProcessor": {
          "methods": [
            "_process_result_by_type",
            "_process_integration_result",
            "_process_api_integration",
            "_process_database_integration",
            "_process_file_integration"
          ],
          "docstring": "Processes integration-specific results.",
          "base_classes": [
            "BaseResultsManager"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\results\\performance_results_processor": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\results\\performance_results_processor.py",
      "functions": [
        "_process_result_by_type",
        "_process_performance_result",
        "_calculate_performance_score",
        "_analyze_performance_trends"
      ],
      "classes": {
        "PerformanceResultsProcessor": {
          "methods": [
            "_process_result_by_type",
            "_process_performance_result",
            "_calculate_performance_score",
            "_analyze_performance_trends"
          ],
          "docstring": "Processes performance-specific results.",
          "base_classes": [
            "BaseResultsManager"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\results\\base_results_manager": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\results\\base_results_manager.py",
      "functions": [
        "__init__",
        "initialize",
        "execute",
        "process_results",
        "cleanup",
        "get_status",
        "_get_results",
        "_archive_results",
        "_register_result_processor",
        "_process_result_by_type",
        "_validate_result",
        "_validate_rule",
        "_archive_old_results"
      ],
      "classes": {
        "ResultStatus": {
          "methods": [],
          "docstring": "Result processing status.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "BaseResultsManager": {
          "methods": [
            "__init__",
            "initialize",
            "execute",
            "process_results",
            "cleanup",
            "get_status",
            "_get_results",
            "_archive_results",
            "_register_result_processor",
            "_process_result_by_type",
            "_validate_result",
            "_validate_rule",
            "_archive_old_results"
          ],
          "docstring": "Base results manager with common functionality.",
          "base_classes": [
            "Manager"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\managers\\results\\analysis_results_processor": {
      "file_path": "docs\\archive\\consolidated_files\\managers\\results\\analysis_results_processor.py",
      "functions": [
        "_process_result_by_type",
        "_process_analysis_result"
      ],
      "classes": {
        "AnalysisResultsProcessor": {
          "methods": [
            "_process_result_by_type",
            "_process_analysis_result"
          ],
          "docstring": "Processes analysis-specific results.",
          "base_classes": [
            "BaseResultsManager"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\orchestration\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\orchestration\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\orchestration\\service_orchestrator": {
      "file_path": "docs\\archive\\consolidated_files\\orchestration\\service_orchestrator.py",
      "functions": [
        "__init__",
        "plan",
        "execute",
        "report"
      ],
      "classes": {
        "ServiceOrchestrator": {
          "methods": [
            "__init__",
            "plan",
            "execute",
            "report"
          ],
          "docstring": "Service-scope orchestration: IO, messaging, analytics service flows.",
          "base_classes": [
            "Orchestrator"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\orchestration\\registry": {
      "file_path": "docs\\archive\\consolidated_files\\orchestration\\registry.py",
      "functions": [
        "__init__",
        "register",
        "build"
      ],
      "classes": {
        "StepRegistry": {
          "methods": [
            "__init__",
            "register",
            "build"
          ],
          "docstring": "DIP registry: high-level depends on abstraction, not concretion.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\orchestration\\integration_orchestrator": {
      "file_path": "docs\\archive\\consolidated_files\\orchestration\\integration_orchestrator.py",
      "functions": [
        "__init__",
        "plan",
        "execute",
        "report"
      ],
      "classes": {
        "IntegrationOrchestrator": {
          "methods": [
            "__init__",
            "plan",
            "execute",
            "report"
          ],
          "docstring": "Integration-scope: external APIs, adapters, retries (kept simple = KISS).",
          "base_classes": [
            "Orchestrator"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\orchestration\\adapters\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\orchestration\\adapters\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\orchestration\\intent_subsystems\\debate_engine": {
      "file_path": "docs\\archive\\consolidated_files\\orchestration\\intent_subsystems\\debate_engine.py",
      "functions": [
        "create_debate_engine",
        "initialize_debate",
        "collect_arguments",
        "analyze_arguments",
        "conduct_voting",
        "reach_consensus",
        "initialize_debate",
        "collect_arguments",
        "analyze_arguments",
        "conduct_voting",
        "reach_consensus",
        "__init__",
        "create_debate",
        "submit_argument",
        "analyze_debate",
        "conduct_voting",
        "resolve_debate",
        "get_session_status",
        "list_active_sessions",
        "get_debate_history",
        "__init__",
        "name",
        "run"
      ],
      "classes": {
        "DebateStatus": {
          "methods": [],
          "docstring": "Debate status enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DebatePhase": {
          "methods": [],
          "docstring": "Debate phase enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DebateArgument": {
          "methods": [],
          "docstring": "Debate argument structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DebateSession": {
          "methods": [],
          "docstring": "Debate session container.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DebateStrategy": {
          "methods": [
            "initialize_debate",
            "collect_arguments",
            "analyze_arguments",
            "conduct_voting",
            "reach_consensus"
          ],
          "docstring": "Strategy pattern for debate management.",
          "base_classes": [
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SwarmDebateStrategy": {
          "methods": [
            "initialize_debate",
            "collect_arguments",
            "analyze_arguments",
            "conduct_voting",
            "reach_consensus"
          ],
          "docstring": "Swarm-optimized debate strategy.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DebateEngine": {
          "methods": [
            "__init__",
            "create_debate",
            "submit_argument",
            "analyze_debate",
            "conduct_voting",
            "resolve_debate",
            "get_session_status",
            "list_active_sessions",
            "get_debate_history"
          ],
          "docstring": "Debate Engine - Intent-Oriented Subsystem for debate coordination.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DebateOrchestrationStep": {
          "methods": [
            "__init__",
            "name",
            "run"
          ],
          "docstring": "Orchestration step for debate operations.",
          "base_classes": [
            "Step"
          ],
          "maturity": "Core Asset",
          "agent_type": "ActionAgent"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\orchestration\\intent_subsystems\\lifecycle_coordinator": {
      "file_path": "docs\\archive\\consolidated_files\\orchestration\\intent_subsystems\\lifecycle_coordinator.py",
      "functions": [
        "create_lifecycle_coordinator",
        "agent_id",
        "capabilities",
        "observe",
        "analyze",
        "debate",
        "decide",
        "act",
        "reflect",
        "get_status",
        "should_transition",
        "validate_transition",
        "handle_transition_error",
        "__init__",
        "should_transition",
        "validate_transition",
        "handle_transition_error",
        "__init__",
        "register_agent",
        "unregister_agent",
        "start_coordination",
        "stop_coordination",
        "execute_lifecycle_cycle",
        "force_transition",
        "get_agent_status",
        "get_coordination_stats",
        "_execute_phase",
        "_transition_agent",
        "_coordination_loop",
        "__init__",
        "name",
        "run"
      ],
      "classes": {
        "LifecyclePhase": {
          "methods": [],
          "docstring": "Agent lifecycle phases.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "LifecycleStatus": {
          "methods": [],
          "docstring": "Agent lifecycle status.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentCapability": {
          "methods": [],
          "docstring": "Standard agent capabilities.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentState": {
          "methods": [],
          "docstring": "Agent state representation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "LifecycleTransition": {
          "methods": [],
          "docstring": "Lifecycle transition record.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SwarmAgent": {
          "methods": [
            "agent_id",
            "capabilities",
            "observe",
            "analyze",
            "debate",
            "decide",
            "act",
            "reflect",
            "get_status"
          ],
          "docstring": "Standardized Swarm Agent interface with observe\u2192debate\u2192act contract.",
          "base_classes": [
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "SignalAgent"
        },
        "LifecycleStrategy": {
          "methods": [
            "should_transition",
            "validate_transition",
            "handle_transition_error"
          ],
          "docstring": "Strategy pattern for lifecycle management.",
          "base_classes": [
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SwarmLifecycleStrategy": {
          "methods": [
            "__init__",
            "should_transition",
            "validate_transition",
            "handle_transition_error"
          ],
          "docstring": "Swarm-optimized lifecycle strategy.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "LifecycleCoordinator": {
          "methods": [
            "__init__",
            "register_agent",
            "unregister_agent",
            "start_coordination",
            "stop_coordination",
            "execute_lifecycle_cycle",
            "force_transition",
            "get_agent_status",
            "get_coordination_stats",
            "_execute_phase",
            "_transition_agent",
            "_coordination_loop"
          ],
          "docstring": "Lifecycle Coordinator - Intent-Oriented Subsystem for agent lifecycle management.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "LifecycleOrchestrationStep": {
          "methods": [
            "__init__",
            "name",
            "run"
          ],
          "docstring": "Orchestration step for lifecycle operations.",
          "base_classes": [
            "Step"
          ],
          "maturity": "Core Asset",
          "agent_type": "ActionAgent"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\pattern_analysis\\pattern_analysis_orchestrator": {
      "file_path": "docs\\archive\\consolidated_files\\pattern_analysis\\pattern_analysis_orchestrator.py",
      "functions": [
        "get_pattern_analysis_system",
        "analyze_mission_patterns",
        "add_mission_pattern",
        "get_pattern_analysis_metrics",
        "__init__",
        "analyze_mission_patterns",
        "add_pattern",
        "get_pattern",
        "get_metrics",
        "clear_old_patterns",
        "analyze_success_patterns",
        "analyze_risk_patterns",
        "get_pattern_summary",
        "generate_strategic_insights"
      ],
      "classes": {
        "PatternAnalysisSystem": {
          "methods": [
            "__init__",
            "analyze_mission_patterns",
            "add_pattern",
            "get_pattern",
            "get_metrics",
            "clear_old_patterns",
            "analyze_success_patterns",
            "analyze_risk_patterns",
            "get_pattern_summary",
            "generate_strategic_insights"
          ],
          "docstring": "Main orchestrator for pattern analysis operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\performance\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\performance\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\pattern_analysis\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\pattern_analysis\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\pattern_analysis\\unified_pattern_analysis\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\pattern_analysis\\unified_pattern_analysis\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\performance\\coordination_performance_monitor": {
      "file_path": "docs\\archive\\consolidated_files\\performance\\coordination_performance_monitor.py",
      "functions": [
        "get_performance_monitor",
        "__init__",
        "_start_background_monitoring",
        "_record_system_health",
        "record_operation_start",
        "record_operation_completion",
        "get_performance_report",
        "get_system_health",
        "stop_monitoring",
        "monitor_loop"
      ],
      "classes": {
        "CoordinationPerformanceMonitor": {
          "methods": [
            "__init__",
            "_start_background_monitoring",
            "_record_system_health",
            "record_operation_start",
            "record_operation_completion",
            "get_performance_report",
            "get_system_health",
            "stop_monitoring"
          ],
          "docstring": "Main performance monitoring system for coordination and communication.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\orchestration\\intent_subsystems\\message_router": {
      "file_path": "docs\\archive\\consolidated_files\\orchestration\\intent_subsystems\\message_router.py",
      "functions": [
        "create_message_router",
        "can_handle",
        "handle",
        "matches",
        "get_delivery_method",
        "__init__",
        "matches",
        "get_delivery_method",
        "__init__",
        "matches",
        "get_delivery_method",
        "__init__",
        "_check_availability",
        "can_handle",
        "handle",
        "__init__",
        "can_handle",
        "handle",
        "_format_message_content",
        "__init__",
        "route_message",
        "send_message",
        "send_bulk_messages",
        "broadcast_message",
        "_process_message_queue",
        "get_delivery_status",
        "get_delivery_stats",
        "create_message",
        "__init__",
        "name",
        "run"
      ],
      "classes": {
        "MessagePriority": {
          "methods": [],
          "docstring": "Message priority levels.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MessageType": {
          "methods": [],
          "docstring": "Message type enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DeliveryMethod": {
          "methods": [],
          "docstring": "Message delivery method enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MessageStatus": {
          "methods": [],
          "docstring": "Message delivery status.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MessageTag": {
          "methods": [],
          "docstring": "Message tag structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MessageAttachment": {
          "methods": [],
          "docstring": "Message attachment structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "Message": {
          "methods": [],
          "docstring": "Unified message structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DeliveryResult": {
          "methods": [],
          "docstring": "Message delivery result.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MessageHandler": {
          "methods": [
            "can_handle",
            "handle"
          ],
          "docstring": "Protocol for message handlers.",
          "base_classes": [
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RoutingRule": {
          "methods": [
            "matches",
            "get_delivery_method"
          ],
          "docstring": "Protocol for routing rules.",
          "base_classes": [
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PriorityBasedRoutingRule": {
          "methods": [
            "__init__",
            "matches",
            "get_delivery_method"
          ],
          "docstring": "Routing rule based on message priority.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentBasedRoutingRule": {
          "methods": [
            "__init__",
            "matches",
            "get_delivery_method"
          ],
          "docstring": "Routing rule based on agent characteristics.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PyAutoGUIHandler": {
          "methods": [
            "__init__",
            "_check_availability",
            "can_handle",
            "handle"
          ],
          "docstring": "PyAutoGUI-based message delivery handler.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "InboxHandler": {
          "methods": [
            "__init__",
            "can_handle",
            "handle",
            "_format_message_content"
          ],
          "docstring": "Inbox-based message delivery handler.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MessageRouter": {
          "methods": [
            "__init__",
            "route_message",
            "send_message",
            "send_bulk_messages",
            "broadcast_message",
            "_process_message_queue",
            "get_delivery_status",
            "get_delivery_stats",
            "create_message"
          ],
          "docstring": "Message Router - Intent-Oriented Subsystem for message routing and delivery.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MessageRouterOrchestrationStep": {
          "methods": [
            "__init__",
            "name",
            "run"
          ],
          "docstring": "Orchestration step for message routing operations.",
          "base_classes": [
            "Step"
          ],
          "maturity": "Core Asset",
          "agent_type": "ActionAgent"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\orchestration\\intent_subsystems\\intervention_manager": {
      "file_path": "docs\\archive\\consolidated_files\\orchestration\\intent_subsystems\\intervention_manager.py",
      "functions": [
        "create_intervention_manager",
        "detect_intervention_needed",
        "execute_intervention",
        "validate_intervention_effectiveness",
        "__init__",
        "detect_intervention_needed",
        "execute_intervention",
        "validate_intervention_effectiveness",
        "_create_resource_protocol",
        "_create_agent_failure_protocol",
        "_create_communication_protocol",
        "_execute_action",
        "_collect_system_metrics",
        "_scale_resources",
        "_notify_admin",
        "_restart_agent",
        "_reset_communication",
        "_switch_backup_channel",
        "__init__",
        "register_protocol",
        "start_monitoring",
        "stop_monitoring",
        "trigger_intervention",
        "detect_and_trigger",
        "get_intervention_status",
        "get_intervention_stats",
        "_monitoring_loop",
        "_check_cooldown",
        "_check_execution_limits",
        "__init__",
        "name",
        "run"
      ],
      "classes": {
        "InterventionPriority": {
          "methods": [],
          "docstring": "Intervention priority levels.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "InterventionType": {
          "methods": [],
          "docstring": "Intervention type enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "InterventionStatus": {
          "methods": [],
          "docstring": "Intervention status enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "InterventionScope": {
          "methods": [],
          "docstring": "Intervention scope enumeration.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "InterventionTrigger": {
          "methods": [],
          "docstring": "Intervention trigger conditions.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "InterventionAction": {
          "methods": [],
          "docstring": "Intervention action definition.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "InterventionResult": {
          "methods": [],
          "docstring": "Result of intervention execution.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "InterventionProtocol": {
          "methods": [],
          "docstring": "Complete intervention protocol.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "InterventionStrategy": {
          "methods": [
            "detect_intervention_needed",
            "execute_intervention",
            "validate_intervention_effectiveness"
          ],
          "docstring": "Strategy pattern for intervention management.",
          "base_classes": [
            "Protocol"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SwarmInterventionStrategy": {
          "methods": [
            "__init__",
            "detect_intervention_needed",
            "execute_intervention",
            "validate_intervention_effectiveness",
            "_create_resource_protocol",
            "_create_agent_failure_protocol",
            "_create_communication_protocol",
            "_execute_action",
            "_collect_system_metrics",
            "_scale_resources",
            "_notify_admin",
            "_restart_agent",
            "_reset_communication",
            "_switch_backup_channel"
          ],
          "docstring": "Swarm-optimized intervention strategy.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "InterventionManager": {
          "methods": [
            "__init__",
            "register_protocol",
            "start_monitoring",
            "stop_monitoring",
            "trigger_intervention",
            "detect_and_trigger",
            "get_intervention_status",
            "get_intervention_stats",
            "_monitoring_loop",
            "_check_cooldown",
            "_check_execution_limits"
          ],
          "docstring": "Intervention Manager - Intent-Oriented Subsystem for emergency intervention handling.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "InterventionOrchestrationStep": {
          "methods": [
            "__init__",
            "name",
            "run"
          ],
          "docstring": "Orchestration step for intervention operations.",
          "base_classes": [
            "Step"
          ],
          "maturity": "Core Asset",
          "agent_type": "ActionAgent"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\pattern_analysis\\pattern_analysis_models": {
      "file_path": "docs\\archive\\consolidated_files\\pattern_analysis\\pattern_analysis_models.py",
      "functions": [
        "to_dict"
      ],
      "classes": {
        "PatternType": {
          "methods": [],
          "docstring": "Types of mission patterns.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RecommendationType": {
          "methods": [],
          "docstring": "Types of strategic recommendations.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ImpactLevel": {
          "methods": [],
          "docstring": "Impact levels for recommendations.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MissionPattern": {
          "methods": [],
          "docstring": "Mission pattern structure for analysis.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PatternCorrelation": {
          "methods": [],
          "docstring": "Pattern correlation structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MissionContext": {
          "methods": [],
          "docstring": "Mission context for pattern analysis.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "StrategicRecommendation": {
          "methods": [],
          "docstring": "Strategic recommendation structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PatternAnalysisResult": {
          "methods": [],
          "docstring": "Result of pattern analysis operation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PatternMetrics": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Metrics for pattern analysis performance.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PatternAnalysisConfig": {
          "methods": [],
          "docstring": "Configuration for pattern analysis operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\performance\\performance_cli": {
      "file_path": "docs\\archive\\consolidated_files\\performance\\performance_cli.py",
      "functions": [
        "main",
        "handle_monitor_command",
        "handle_optimize_command",
        "handle_dashboard_command"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\performance\\metrics\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\performance\\metrics\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\pattern_analysis\\unified_pattern_analysis\\analyzer": {
      "file_path": "docs\\archive\\consolidated_files\\pattern_analysis\\unified_pattern_analysis\\analyzer.py",
      "functions": [
        "_create_pattern",
        "detect_performance_patterns",
        "detect_coordination_patterns",
        "detect_anomaly_patterns",
        "__init__",
        "initialize",
        "analyze_performance_patterns",
        "analyze_coordination_patterns",
        "generate_optimization_recommendations",
        "get_analysis_summary",
        "shutdown"
      ],
      "classes": {
        "PatternAnalysis": {
          "methods": [],
          "docstring": "Simple pattern analysis result used across modules.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PatternAnalyzer": {
          "methods": [
            "__init__",
            "initialize",
            "analyze_performance_patterns",
            "analyze_coordination_patterns",
            "generate_optimization_recommendations",
            "get_analysis_summary",
            "shutdown"
          ],
          "docstring": "Pattern analysis functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\performance\\performance_collector": {
      "file_path": "docs\\archive\\consolidated_files\\performance\\performance_collector.py",
      "functions": [
        "__init__",
        "record_metric",
        "record_timer",
        "record_counter",
        "get_metrics",
        "get_latest_metric"
      ],
      "classes": {
        "PerformanceCollector": {
          "methods": [
            "__init__",
            "record_metric",
            "record_timer",
            "record_counter",
            "get_metrics",
            "get_latest_metric"
          ],
          "docstring": "Collects and stores performance metrics.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\performance\\performance_dashboard": {
      "file_path": "docs\\archive\\consolidated_files\\performance\\performance_dashboard.py",
      "functions": [
        "get_performance_dashboard"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\performance\\performance_monitoring_system": {
      "file_path": "docs\\archive\\consolidated_files\\performance\\performance_monitoring_system.py",
      "functions": [
        "create_performance_monitoring_system",
        "get_performance_monitor",
        "to_dict",
        "to_dict",
        "__init__",
        "start_monitoring",
        "stop_monitoring",
        "collect_metrics",
        "generate_report",
        "get_system_status",
        "get_metrics_summary",
        "cleanup"
      ],
      "classes": {
        "PerformanceMetric": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Simple performance metric.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PerformanceReport": {
          "methods": [
            "to_dict"
          ],
          "docstring": "Simple performance report.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PerformanceMonitoringSystem": {
          "methods": [
            "__init__",
            "start_monitoring",
            "stop_monitoring",
            "collect_metrics",
            "generate_report",
            "get_system_status",
            "get_metrics_summary",
            "cleanup"
          ],
          "docstring": "KISS Simplified Performance Monitoring System.\n\nRemoved overengineering - focuses on essential monitoring only.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\performance\\unified_dashboard\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\performance\\unified_dashboard\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\performance\\metrics\\types": {
      "file_path": "docs\\archive\\consolidated_files\\performance\\metrics\\types.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\performance\\unified_dashboard\\engine": {
      "file_path": "docs\\archive\\consolidated_files\\performance\\unified_dashboard\\engine.py",
      "functions": [
        "__init__",
        "add_metric",
        "get_metric",
        "get_metrics_by_type",
        "update_metric",
        "remove_metric",
        "get_all_metrics",
        "add_widget",
        "get_widget",
        "get_all_widgets",
        "update_widget",
        "remove_widget",
        "add_config",
        "get_config",
        "get_all_configs",
        "update_config",
        "remove_config",
        "add_alert",
        "get_alert",
        "get_all_alerts",
        "remove_alert",
        "add_report",
        "get_report",
        "get_all_reports",
        "remove_report",
        "get_status",
        "get_summary",
        "clear_resources"
      ],
      "classes": {
        "DashboardEngine": {
          "methods": [
            "__init__",
            "add_metric",
            "get_metric",
            "get_metrics_by_type",
            "update_metric",
            "remove_metric",
            "get_all_metrics",
            "add_widget",
            "get_widget",
            "get_all_widgets",
            "update_widget",
            "remove_widget",
            "add_config",
            "get_config",
            "get_all_configs",
            "update_config",
            "remove_config",
            "add_alert",
            "get_alert",
            "get_all_alerts",
            "remove_alert",
            "add_report",
            "get_report",
            "get_all_reports",
            "remove_report",
            "get_status",
            "get_summary",
            "clear_resources"
          ],
          "docstring": "Simplified core dashboard engine - V2 compliant.",
          "base_classes": [
            "BaseEngine"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\performance\\performance_decorators": {
      "file_path": "docs\\archive\\consolidated_files\\performance\\performance_decorators.py",
      "functions": [
        "monitor_performance",
        "decorator",
        "wrapper"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\performance\\unified_dashboard\\widget_manager": {
      "file_path": "docs\\archive\\consolidated_files\\performance\\unified_dashboard\\widget_manager.py",
      "functions": [
        "__init__",
        "add_widget",
        "get_widget",
        "get_all_widgets",
        "update_widget",
        "remove_widget",
        "add_config",
        "get_config",
        "get_all_configs",
        "update_config",
        "remove_config",
        "get_widgets_count",
        "get_configs_count",
        "clear_all",
        "get_summary"
      ],
      "classes": {
        "WidgetManager": {
          "methods": [
            "__init__",
            "add_widget",
            "get_widget",
            "get_all_widgets",
            "update_widget",
            "remove_widget",
            "add_config",
            "get_config",
            "get_all_configs",
            "update_config",
            "remove_config",
            "get_widgets_count",
            "get_configs_count",
            "clear_all",
            "get_summary"
          ],
          "docstring": "Widget management functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\performance\\unified_dashboard\\reporter": {
      "file_path": "docs\\archive\\consolidated_files\\performance\\unified_dashboard\\reporter.py",
      "functions": [
        "__init__",
        "initialize",
        "generate_metrics_report",
        "generate_alerts_report",
        "generate_performance_report",
        "_calculate_system_health",
        "export_report",
        "get_report_history",
        "cleanup_old_reports",
        "get_reporter_stats",
        "shutdown"
      ],
      "classes": {
        "DashboardReporter": {
          "methods": [
            "__init__",
            "initialize",
            "generate_metrics_report",
            "generate_alerts_report",
            "generate_performance_report",
            "_calculate_system_health",
            "export_report",
            "get_report_history",
            "cleanup_old_reports",
            "get_reporter_stats",
            "shutdown"
          ],
          "docstring": "Simplified dashboard reporting functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\refactoring\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\refactoring\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\performance\\unified_dashboard\\metric_manager": {
      "file_path": "docs\\archive\\consolidated_files\\performance\\unified_dashboard\\metric_manager.py",
      "functions": [
        "__init__",
        "add_metric",
        "get_metric",
        "get_metrics_by_type",
        "update_metric",
        "remove_metric",
        "get_all_metrics",
        "get_metrics_count",
        "clear_metrics",
        "get_metrics_summary"
      ],
      "classes": {
        "MetricManager": {
          "methods": [
            "__init__",
            "add_metric",
            "get_metric",
            "get_metrics_by_type",
            "update_metric",
            "remove_metric",
            "get_all_metrics",
            "get_metrics_count",
            "clear_metrics",
            "get_metrics_summary"
          ],
          "docstring": "Metric management functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\refactoring\\analysis_tools": {
      "file_path": "docs\\archive\\consolidated_files\\refactoring\\analysis_tools.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\refactoring\\analysis_tools_models": {
      "file_path": "docs\\archive\\consolidated_files\\refactoring\\analysis_tools_models.py",
      "functions": [],
      "classes": {
        "ArchitecturePattern": {
          "methods": [],
          "docstring": "Represents an identified architecture pattern - simplified.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "FileAnalysis": {
          "methods": [],
          "docstring": "Analysis results for a single file - simplified.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DuplicateFile": {
          "methods": [],
          "docstring": "Represents duplicate file information - simplified.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RefactoringSuggestion": {
          "methods": [],
          "docstring": "Represents a refactoring suggestion - simplified.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AnalysisReport": {
          "methods": [],
          "docstring": "Complete analysis report - simplified.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\refactoring\\analysis_tools_core": {
      "file_path": "docs\\archive\\consolidated_files\\refactoring\\analysis_tools_core.py",
      "functions": [
        "__init__",
        "analyze_file",
        "find_duplicates",
        "identify_patterns",
        "generate_suggestions",
        "_extract_classes",
        "_extract_functions",
        "_extract_imports",
        "_calculate_complexity"
      ],
      "classes": {
        "ArchitectureAnalyzer": {
          "methods": [
            "__init__",
            "analyze_file",
            "find_duplicates",
            "identify_patterns",
            "generate_suggestions",
            "_extract_classes",
            "_extract_functions",
            "_extract_imports",
            "_calculate_complexity"
          ],
          "docstring": "Simplified architecture analyzer - KISS principle applied.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\refactoring\\pattern_detection": {
      "file_path": "docs\\archive\\consolidated_files\\refactoring\\pattern_detection.py",
      "functions": [
        "analyze_architecture_patterns",
        "_detect_mvc_patterns",
        "_detect_repository_patterns",
        "_detect_factory_patterns",
        "_detect_observer_patterns",
        "_detect_singleton_patterns"
      ],
      "classes": {
        "ArchitecturePattern": {
          "methods": [],
          "docstring": "Represents an identified architecture pattern.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\refactoring\\file_analysis": {
      "file_path": "docs\\archive\\consolidated_files\\refactoring\\file_analysis.py",
      "functions": [
        "analyze_file_for_extraction",
        "_calculate_complexity"
      ],
      "classes": {
        "FileAnalysis": {
          "methods": [],
          "docstring": "Analysis results for a single file.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\refactoring\\duplicate_analysis": {
      "file_path": "docs\\archive\\consolidated_files\\refactoring\\duplicate_analysis.py",
      "functions": [
        "find_duplicate_files",
        "_normalize_content"
      ],
      "classes": {
        "DuplicateFile": {
          "methods": [],
          "docstring": "Represents duplicate file information.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\refactoring\\toolkit": {
      "file_path": "docs\\archive\\consolidated_files\\refactoring\\toolkit.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\refactoring\\tools\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\refactoring\\tools\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\refactoring\\refactor_tools": {
      "file_path": "docs\\archive\\consolidated_files\\refactoring\\refactor_tools.py",
      "functions": [
        "get_refactor_tools",
        "create_extraction_plan",
        "execute_extraction",
        "create_consolidation_plan",
        "execute_consolidation",
        "find_duplicate_files",
        "create_optimization_plan",
        "execute_optimization",
        "create_extraction_plan",
        "perform_extraction",
        "create_consolidation_plan",
        "perform_consolidation",
        "create_optimization_plan",
        "perform_optimization",
        "perform_optimization",
        "_extract_models",
        "_extract_utils",
        "_extract_core",
        "_apply_optimization_rules",
        "_remove_unused_imports",
        "_optimize_class_structure",
        "__init__",
        "create_extraction_plan",
        "execute_extraction",
        "create_consolidation_plan",
        "execute_consolidation",
        "find_duplicate_files",
        "analyze_duplicates",
        "create_optimization_plan",
        "execute_optimization",
        "get_tool_status",
        "analyze_file",
        "refactor_file"
      ],
      "classes": {
        "ExtractionPlan": {
          "methods": [],
          "docstring": "Plan for extracting code from a file.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RefactorTools": {
          "methods": [
            "__init__",
            "create_extraction_plan",
            "execute_extraction",
            "create_consolidation_plan",
            "execute_consolidation",
            "find_duplicate_files",
            "analyze_duplicates",
            "create_optimization_plan",
            "execute_optimization",
            "get_tool_status",
            "analyze_file",
            "refactor_file"
          ],
          "docstring": "V2-compliant refactoring tools - modular architecture.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ConsolidationPlan": {
          "methods": [],
          "docstring": "Plan for consolidating duplicate code.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "OptimizationPlan": {
          "methods": [],
          "docstring": "Plan for optimizing code structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\validation\\coordination_validator": {
      "file_path": "docs\\archive\\consolidated_files\\validation\\coordination_validator.py",
      "functions": [
        "__init__",
        "_load_validation_rules",
        "validate_message_structure",
        "validate_coordination_system",
        "validate_performance_metrics",
        "validate_security_compliance",
        "run_comprehensive_validation",
        "_calculate_compliance_score",
        "get_validation_report"
      ],
      "classes": {
        "ValidationSeverity": {
          "methods": [],
          "docstring": "Validation severity levels.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ValidationResult": {
          "methods": [],
          "docstring": "Validation result types.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ValidationIssue": {
          "methods": [],
          "docstring": "Individual validation issue.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CoordinationValidator": {
          "methods": [
            "__init__",
            "_load_validation_rules",
            "validate_message_structure",
            "validate_coordination_system",
            "validate_performance_metrics",
            "validate_security_compliance",
            "run_comprehensive_validation",
            "_calculate_compliance_score",
            "get_validation_report"
          ],
          "docstring": "Comprehensive validation engine for coordination systems.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\refactoring\\tools\\optimization_tools": {
      "file_path": "docs\\archive\\consolidated_files\\refactoring\\tools\\optimization_tools.py",
      "functions": [
        "__init__",
        "create_optimization_plan",
        "execute_optimization",
        "_identify_optimization_targets",
        "_generate_optimization_rules",
        "_identify_performance_improvements",
        "_identify_v2_compliance_improvements",
        "_apply_optimizations",
        "_apply_file_splitting",
        "_apply_class_extraction",
        "_apply_function_extraction",
        "_apply_import_consolidation",
        "_apply_list_comprehension_optimization",
        "_apply_ternary_operator_optimization",
        "_apply_exception_handling_optimization",
        "_apply_file_size_reduction"
      ],
      "classes": {
        "OptimizationPlan": {
          "methods": [],
          "docstring": "Plan for optimizing code structure.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "OptimizationTools": {
          "methods": [
            "__init__",
            "create_optimization_plan",
            "execute_optimization",
            "_identify_optimization_targets",
            "_generate_optimization_rules",
            "_identify_performance_improvements",
            "_identify_v2_compliance_improvements",
            "_apply_optimizations",
            "_apply_file_splitting",
            "_apply_class_extraction",
            "_apply_function_extraction",
            "_apply_import_consolidation",
            "_apply_list_comprehension_optimization",
            "_apply_ternary_operator_optimization",
            "_apply_exception_handling_optimization",
            "_apply_file_size_reduction"
          ],
          "docstring": "Optimization tools for refactoring.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\refactoring\\metrics\\definitions": {
      "file_path": "docs\\archive\\consolidated_files\\refactoring\\metrics\\definitions.py",
      "functions": [
        "update_metrics",
        "__init__",
        "update_metrics",
        "get_metrics",
        "reset_metrics"
      ],
      "classes": {
        "RefactoringMetrics": {
          "methods": [],
          "docstring": "Refactoring performance metrics.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MetricsManager": {
          "methods": [
            "__init__",
            "update_metrics",
            "get_metrics",
            "reset_metrics"
          ],
          "docstring": "Manages refactoring metrics collection and reporting.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\validation\\unified_validation_orchestrator": {
      "file_path": "docs\\archive\\consolidated_files\\validation\\unified_validation_orchestrator.py",
      "functions": [
        "get_unified_validator",
        "__init__",
        "validate_hasattr",
        "validate_type",
        "validate_not_none",
        "validate_not_empty",
        "validate_range",
        "validate_regex",
        "validate_custom"
      ],
      "classes": {
        "UnifiedValidationOrchestrator": {
          "methods": [
            "__init__",
            "validate_hasattr",
            "validate_type",
            "validate_not_none",
            "validate_not_empty",
            "validate_range",
            "validate_regex",
            "validate_custom"
          ],
          "docstring": "Unified validation orchestrator.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\validation\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\validation\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\refactoring\\tools\\extraction_tools": {
      "file_path": "docs\\archive\\consolidated_files\\refactoring\\tools\\extraction_tools.py",
      "functions": [
        "__init__",
        "create_extraction_plan",
        "execute_extraction",
        "_determine_target_files",
        "_generate_extraction_rules",
        "_extract_models",
        "_extract_utils",
        "_extract_core"
      ],
      "classes": {
        "ExtractionPlan": {
          "methods": [],
          "docstring": "Plan for extracting code from a file.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ExtractionTools": {
          "methods": [
            "__init__",
            "create_extraction_plan",
            "execute_extraction",
            "_determine_target_files",
            "_generate_extraction_rules",
            "_extract_models",
            "_extract_utils",
            "_extract_core"
          ],
          "docstring": "Extraction tools for refactoring.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\validation\\validation_coordinator": {
      "file_path": "docs\\archive\\consolidated_files\\validation\\validation_coordinator.py",
      "functions": [
        "get_validation_coordinator",
        "__init__",
        "register_engine",
        "validate",
        "get_available_engines"
      ],
      "classes": {
        "ValidationCoordinator": {
          "methods": [
            "__init__",
            "register_engine",
            "validate",
            "get_available_engines"
          ],
          "docstring": "Coordinates different validation engines.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\refactoring\\tools\\consolidation_tools": {
      "file_path": "docs\\archive\\consolidated_files\\refactoring\\tools\\consolidation_tools.py",
      "functions": [
        "__init__",
        "create_consolidation_plan",
        "execute_consolidation",
        "_find_duplicate_files",
        "analyze_duplicates"
      ],
      "classes": {
        "ConsolidationPlan": {
          "methods": [],
          "docstring": "Plan for consolidating duplicate code.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ConsolidationTools": {
          "methods": [
            "__init__",
            "create_consolidation_plan",
            "execute_consolidation",
            "_find_duplicate_files",
            "analyze_duplicates"
          ],
          "docstring": "Consolidation tools for refactoring.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\refactoring\\metrics\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\refactoring\\metrics\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\validation\\unified_validation_system": {
      "file_path": "docs\\archive\\consolidated_files\\validation\\unified_validation_system.py",
      "functions": [
        "get_unified_validator"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\validation\\performance_benchmark\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\validation\\performance_benchmark\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\vector_strategic_oversight\\simple_oversight": {
      "file_path": "docs\\archive\\consolidated_files\\vector_strategic_oversight\\simple_oversight.py",
      "functions": [
        "__init__",
        "create_report",
        "get_reports",
        "analyze_performance",
        "generate_insights"
      ],
      "classes": {
        "SimpleStrategicOversight": {
          "methods": [
            "__init__",
            "create_report",
            "get_reports",
            "analyze_performance",
            "generate_insights"
          ],
          "docstring": "Simple strategic oversight utilities.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\analyzer_core": {
      "file_path": "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\analyzer_core.py",
      "functions": [
        "__init__",
        "initialize",
        "analyze_swarm_coordination",
        "analyze_agent_performance",
        "generate_strategic_recommendations",
        "analyze_system_health",
        "get_analysis_summary"
      ],
      "classes": {
        "StrategicOversightAnalyzer": {
          "methods": [
            "__init__",
            "initialize",
            "analyze_swarm_coordination",
            "analyze_agent_performance",
            "generate_strategic_recommendations",
            "analyze_system_health",
            "get_analysis_summary"
          ],
          "docstring": "Strategic oversight analysis functionality.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\validation\\performance_benchmark\\benchmark_runner_operations": {
      "file_path": "docs\\archive\\consolidated_files\\validation\\performance_benchmark\\benchmark_runner_operations.py",
      "functions": [
        "__init__",
        "run_parallel_benchmarks",
        "run_benchmark",
        "run_stress_test",
        "compare_benchmarks",
        "export_results",
        "get_performance_trends",
        "run_single_benchmark"
      ],
      "classes": {
        "BenchmarkRunnerOperations": {
          "methods": [
            "__init__",
            "run_parallel_benchmarks",
            "run_benchmark",
            "run_stress_test",
            "compare_benchmarks",
            "export_results",
            "get_performance_trends"
          ],
          "docstring": "Extended operations for benchmark execution.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\engine_core_recommendations": {
      "file_path": "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\engine_core_recommendations.py",
      "functions": [
        "__init__",
        "add_recommendation",
        "get_recommendation",
        "get_recommendations"
      ],
      "classes": {
        "StrategicOversightEngineCoreRecommendations": {
          "methods": [
            "__init__",
            "add_recommendation",
            "get_recommendation",
            "get_recommendations"
          ],
          "docstring": "Recommendation management for strategic oversight engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\vector_strategic_oversight\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\vector_strategic_oversight\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\engine_core_metrics": {
      "file_path": "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\engine_core_metrics.py",
      "functions": [
        "__init__",
        "add_agent_metrics",
        "get_agent_metrics",
        "get_all_agent_metrics",
        "add_coordination_status",
        "get_coordination_status",
        "get_latest_coordination_status"
      ],
      "classes": {
        "StrategicOversightEngineCoreMetrics": {
          "methods": [
            "__init__",
            "add_agent_metrics",
            "get_agent_metrics",
            "get_all_agent_metrics",
            "add_coordination_status",
            "get_coordination_status",
            "get_latest_coordination_status"
          ],
          "docstring": "Metrics management for strategic oversight engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\analyzer_orchestrator": {
      "file_path": "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\analyzer_orchestrator.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\validation\\performance_benchmark\\benchmark_runner_core": {
      "file_path": "docs\\archive\\consolidated_files\\validation\\performance_benchmark\\benchmark_runner_core.py",
      "functions": [
        "__init__",
        "add_suite",
        "run_benchmark",
        "run_suite",
        "run_all_suites",
        "get_metrics_summary",
        "generate_report",
        "clear_metrics",
        "get_benchmark_history"
      ],
      "classes": {
        "BenchmarkRunnerCore": {
          "methods": [
            "__init__",
            "add_suite",
            "run_benchmark",
            "run_suite",
            "run_all_suites",
            "get_metrics_summary",
            "generate_report",
            "clear_metrics",
            "get_benchmark_history"
          ],
          "docstring": "Core benchmark execution engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\engine_core_insights": {
      "file_path": "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\engine_core_insights.py",
      "functions": [
        "__init__",
        "add_insight",
        "get_insight",
        "get_insights"
      ],
      "classes": {
        "StrategicOversightEngineCoreInsights": {
          "methods": [
            "__init__",
            "add_insight",
            "get_insight",
            "get_insights"
          ],
          "docstring": "Insight management for strategic oversight engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\engine_core_missions": {
      "file_path": "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\engine_core_missions.py",
      "functions": [
        "__init__",
        "add_mission",
        "get_mission",
        "get_missions"
      ],
      "classes": {
        "StrategicOversightEngineCoreMissions": {
          "methods": [
            "__init__",
            "add_mission",
            "get_mission",
            "get_missions"
          ],
          "docstring": "Mission management for strategic oversight engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\engine_core_reports": {
      "file_path": "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\engine_core_reports.py",
      "functions": [
        "__init__",
        "add_report",
        "get_report",
        "get_reports"
      ],
      "classes": {
        "StrategicOversightEngineCoreReports": {
          "methods": [
            "__init__",
            "add_report",
            "get_report",
            "get_reports"
          ],
          "docstring": "Report management for strategic oversight engine.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\analyzers\\swarm_analyzer": {
      "file_path": "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\analyzers\\swarm_analyzer.py",
      "functions": [
        "__init__"
      ],
      "classes": {
        "SwarmCoordinationAnalyzer": {
          "methods": [
            "__init__"
          ],
          "docstring": "Analyzes swarm coordination patterns and agent collaboration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\factory_core": {
      "file_path": "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\factory_core.py",
      "functions": [
        "create_strategic_oversight_report",
        "create_swarm_coordination_insight",
        "create_strategic_recommendation",
        "create_agent_performance_metrics",
        "create_swarm_coordination_status",
        "create_strategic_mission"
      ],
      "classes": {
        "StrategicOversightFactoryCore": {
          "methods": [
            "create_strategic_oversight_report",
            "create_swarm_coordination_insight",
            "create_strategic_recommendation",
            "create_agent_performance_metrics",
            "create_swarm_coordination_status",
            "create_strategic_mission"
          ],
          "docstring": "Core factory methods for strategic oversight models.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\factories\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\factories\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\extended_models": {
      "file_path": "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\extended_models.py",
      "functions": [
        "__post_init__",
        "__post_init__",
        "__post_init__",
        "__post_init__",
        "__post_init__",
        "__post_init__",
        "__post_init__",
        "__post_init__"
      ],
      "classes": {
        "AgentCapabilities": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Agent capabilities data.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PatternAnalysis": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Pattern analysis data.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "SuccessPrediction": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Success prediction data.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "RiskAssessment": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Risk assessment data.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "InterventionHistory": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Intervention history data.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "EmergencyAlert": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Emergency alert data.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PerformanceTrend": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Performance trend data.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CoordinationPattern": {
          "methods": [
            "__post_init__"
          ],
          "docstring": "Coordination pattern data.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\analyzers\\prediction_analyzer": {
      "file_path": "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\analyzers\\prediction_analyzer.py",
      "functions": [
        "__init__",
        "_calculate_base_probability",
        "_calculate_historical_success_rate",
        "_identify_key_factors",
        "_identify_risk_factors",
        "_generate_recommendations",
        "add_historical_data",
        "get_prediction_summary",
        "_calculate_average_confidence"
      ],
      "classes": {
        "SuccessPrediction": {
          "methods": [],
          "docstring": "Success prediction result.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PredictionAnalyzer": {
          "methods": [
            "__init__",
            "_calculate_base_probability",
            "_calculate_historical_success_rate",
            "_identify_key_factors",
            "_identify_risk_factors",
            "_generate_recommendations",
            "add_historical_data",
            "get_prediction_summary",
            "_calculate_average_confidence"
          ],
          "docstring": "Analyzes and predicts task success probabilities using SSOT utilities.",
          "base_classes": [
            "BasePredictionAnalyzer"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\factory_extended": {
      "file_path": "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\factory_extended.py",
      "functions": [
        "create_vector_database_metrics",
        "create_system_health_metrics",
        "create_comprehensive_report",
        "create_emergency_insight",
        "create_high_priority_recommendation",
        "create_mission_batch"
      ],
      "classes": {
        "StrategicOversightFactoryExtended": {
          "methods": [
            "create_vector_database_metrics",
            "create_system_health_metrics",
            "create_comprehensive_report",
            "create_emergency_insight",
            "create_high_priority_recommendation",
            "create_mission_batch"
          ],
          "docstring": "Extended factory methods for strategic oversight models.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\factory_methods": {
      "file_path": "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\factory_methods.py",
      "functions": [
        "get_strategic_oversight_factory",
        "create_oversight_report",
        "create_swarm_insight",
        "create_strategic_recommendation",
        "create_agent_performance_metrics",
        "create_swarm_coordination_status",
        "create_strategic_mission",
        "create_vector_database_metrics",
        "create_system_health_metrics",
        "__init__",
        "create_oversight_report",
        "create_swarm_insight",
        "create_strategic_recommendation",
        "create_agent_performance_metrics",
        "create_swarm_coordination_status",
        "create_vector_database_metrics",
        "create_system_health_metrics",
        "create_strategic_mission",
        "create_quick_mission",
        "create_emergency_mission"
      ],
      "classes": {
        "StrategicOversightFactory": {
          "methods": [
            "__init__",
            "create_oversight_report",
            "create_swarm_insight",
            "create_strategic_recommendation",
            "create_agent_performance_metrics",
            "create_swarm_coordination_status",
            "create_vector_database_metrics",
            "create_system_health_metrics",
            "create_strategic_mission",
            "create_quick_mission",
            "create_emergency_mission"
          ],
          "docstring": "Factory class for creating strategic oversight data models - V2 compliant.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\analyzers\\__init__": {
      "file_path": "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\analyzers\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\factories\\metrics_factory": {
      "file_path": "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\factories\\metrics_factory.py",
      "functions": [
        "create_agent_performance_metrics",
        "create_swarm_coordination_status",
        "create_vector_database_metrics",
        "create_system_health_metrics"
      ],
      "classes": {
        "MetricsFactory": {
          "methods": [
            "create_agent_performance_metrics",
            "create_swarm_coordination_status",
            "create_vector_database_metrics",
            "create_system_health_metrics"
          ],
          "docstring": "Factory class for creating strategic oversight metrics.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\factories\\mission_factory": {
      "file_path": "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\factories\\mission_factory.py",
      "functions": [
        "create_strategic_mission",
        "create_quick_mission",
        "create_emergency_mission"
      ],
      "classes": {
        "MissionFactory": {
          "methods": [
            "create_strategic_mission",
            "create_quick_mission",
            "create_emergency_mission"
          ],
          "docstring": "Factory class for creating strategic missions.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\demos\\demo_health_monitoring_system": {
      "file_path": "docs\\archive\\demos\\demo_health_monitoring_system.py",
      "functions": [
        "demo_health_monitoring",
        "demo_quick_start"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\factories\\report_factory": {
      "file_path": "docs\\archive\\consolidated_files\\vector_strategic_oversight\\unified_strategic_oversight\\factories\\report_factory.py",
      "functions": [
        "create_oversight_report",
        "create_swarm_insight",
        "create_strategic_recommendation"
      ],
      "classes": {
        "ReportFactory": {
          "methods": [
            "create_oversight_report",
            "create_swarm_insight",
            "create_strategic_recommendation"
          ],
          "docstring": "Factory class for creating strategic oversight reports.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\demos\\demo_onboarding_sequence": {
      "file_path": "docs\\archive\\demos\\demo_onboarding_sequence.py",
      "functions": [
        "main"
      ],
      "classes": {},
      "estimated_dependencies": []
    },
    "examples\\quickstart_demo\\dashboard_demo": {
      "file_path": "examples\\quickstart_demo\\dashboard_demo.py",
      "functions": [
        "get_agent_status",
        "display_dashboard"
      ],
      "classes": {
        "AgentStatus": {
          "methods": [],
          "docstring": "Represents the possible statuses of an agent.",
          "base_classes": [
            "Enum"
          ],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "docs\\archive\\demos\\demo_swarm": {
      "file_path": "docs\\archive\\demos\\demo_swarm.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "examples\\quickstart_demo\\workflow_demo": {
      "file_path": "examples\\quickstart_demo\\workflow_demo.py",
      "functions": [
        "run_demo",
        "greet"
      ],
      "classes": {
        "Agent": {
          "methods": [
            "greet"
          ],
          "docstring": "Simple agent representation used for demonstration purposes.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "scripts\\consolidated_execution_manager": {
      "file_path": "scripts\\consolidated_execution_manager.py",
      "functions": [
        "main",
        "__init__",
        "list_targets",
        "validate_target",
        "execute_target",
        "run_admin_commander",
        "run_discord_bot",
        "execute_ssot_integration",
        "run_all_targets",
        "get_status"
      ],
      "classes": {
        "ExecutionTarget": {
          "methods": [],
          "docstring": "Represents an execution target.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "ExecutionManager": {
          "methods": [
            "__init__",
            "list_targets",
            "validate_target",
            "execute_target",
            "run_admin_commander",
            "run_discord_bot",
            "execute_ssot_integration",
            "run_all_targets",
            "get_status"
          ],
          "docstring": "Unified execution manager for system components.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "examples\\quickstart_demo\\__init__": {
      "file_path": "examples\\quickstart_demo\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "scripts\\agent_cycle": {
      "file_path": "scripts\\agent_cycle.py",
      "functions": [
        "main",
        "__init__",
        "start_cycle",
        "complete_cycle",
        "run_validation",
        "run_duplication_scan"
      ],
      "classes": {
        "CycleConfig": {
          "methods": [],
          "docstring": "Configuration for agent cycle",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "CycleResult": {
          "methods": [],
          "docstring": "Result of an agent cycle execution.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "AgentCycleManager": {
          "methods": [
            "__init__",
            "start_cycle",
            "complete_cycle",
            "run_validation",
            "run_duplication_scan"
          ],
          "docstring": "Manages agent cycle automation and coordination.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "scripts\\consolidated_discord_utility": {
      "file_path": "scripts\\consolidated_discord_utility.py",
      "functions": [
        "main",
        "__init__",
        "setup_bot",
        "configure_webhooks",
        "test_bot",
        "test_enhanced_discord",
        "run_discord_bot",
        "get_status"
      ],
      "classes": {
        "DiscordConfig": {
          "methods": [],
          "docstring": "Discord bot configuration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "DiscordUtility": {
          "methods": [
            "__init__",
            "setup_bot",
            "configure_webhooks",
            "test_bot",
            "test_enhanced_discord",
            "run_discord_bot",
            "get_status"
          ],
          "docstring": "Unified Discord utility for bot management.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "scripts\\doxygen_generator": {
      "file_path": "scripts\\doxygen_generator.py",
      "functions": [
        "main",
        "__init__",
        "check_dependencies",
        "install_instructions",
        "generate_documentation",
        "create_documentation_index",
        "_count_documented_files",
        "_count_documented_classes",
        "_count_documented_functions",
        "run_full_generation"
      ],
      "classes": {
        "DoxygenGenerator": {
          "methods": [
            "__init__",
            "check_dependencies",
            "install_instructions",
            "generate_documentation",
            "create_documentation_index",
            "_count_documented_files",
            "_count_documented_classes",
            "_count_documented_functions",
            "run_full_generation"
          ],
          "docstring": "@brief Manages automated Doxygen documentation generation.\n\nThis class handles the complete documentation generation process\nfor the Agent Cellphone V2 swarm coordination system.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "scripts\\execution\\__init__": {
      "file_path": "scripts\\execution\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "scripts\\messaging\\__init__": {
      "file_path": "scripts\\messaging\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "scripts\\utilities\\__init__": {
      "file_path": "scripts\\utilities\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "scripts\\enforce_python_standards": {
      "file_path": "scripts\\enforce_python_standards.py",
      "functions": [
        "main",
        "__init__",
        "check_file"
      ],
      "classes": {
        "Violation": {
          "methods": [],
          "docstring": "Represents a coding standard violation.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "PythonStandardEnforcer": {
          "methods": [
            "__init__",
            "check_file"
          ],
          "docstring": "Enforces Python coding standards including LOC limits.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "scripts\\consolidated_utility_manager": {
      "file_path": "scripts\\consolidated_utility_manager.py",
      "functions": [
        "main",
        "__init__",
        "find_large_files",
        "cleanup_v2_compliance",
        "setup_discord_bot",
        "run_duplication_scan",
        "validate_workspace_coords",
        "get_system_status"
      ],
      "classes": {
        "FileInfo": {
          "methods": [],
          "docstring": "Information about a file.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "UtilityManager": {
          "methods": [
            "__init__",
            "find_large_files",
            "cleanup_v2_compliance",
            "setup_discord_bot",
            "run_duplication_scan",
            "validate_workspace_coords",
            "get_system_status"
          ],
          "docstring": "Unified utility manager for system operations.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "scripts\\thea\\__init__": {
      "file_path": "scripts\\thea\\__init__.py",
      "functions": [],
      "classes": {},
      "estimated_dependencies": []
    },
    "scripts\\consolidated_messaging_utility": {
      "file_path": "scripts\\consolidated_messaging_utility.py",
      "functions": [
        "main",
        "__init__",
        "list_systems",
        "validate_registry",
        "generate_docs",
        "generate_stubs",
        "run_doctor"
      ],
      "classes": {
        "MessagingSystem": {
          "methods": [],
          "docstring": "Represents a messaging system configuration.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        },
        "MessagingUtility": {
          "methods": [
            "__init__",
            "list_systems",
            "validate_registry",
            "generate_docs",
            "generate_stubs",
            "run_doctor"
          ],
          "docstring": "Unified messaging utility for agent coordination.",
          "base_classes": [],
          "maturity": "Core Asset",
          "agent_type": "Utility"
        }
      },
      "estimated_dependencies": []
    },
    "scripts\\thea\\commander_thea_consultation": {
      "file_path": "scripts\\thea\\commander_thea_consultation.py",
      "functions": [
        "main"
      ],
      "classes": {},
      "estimated_dependencies": []
    }
  }
}