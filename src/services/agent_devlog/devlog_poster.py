#!/usr/bin/env python3
"""
Agent Devlog Poster
===================

Main devlog posting service for Agent Devlog Posting Service
V2 Compliant: ≤400 lines, focused posting logic
"""

import asyncio
import logging
from datetime import datetime
from typing import Any

from .agent_validation import AgentValidator
from .models import DevlogEntry, DevlogStatus
from .storage import DevlogStorage


class AgentDevlogPoster:
    """Agent devlog posting service with LOCAL FILE storage AND Discord integration"""

    def __init__(self, devlogs_dir: str = "devlogs"):
        """Initialize agent devlog poster"""
        self.storage = DevlogStorage(devlogs_dir)
        self.validator = AgentValidator()

        # Configure logging
        logging.basicConfig(
            level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
        )
        self.logger = logging.getLogger(__name__)

        self.logger.info(
            "AgentDevlogPoster initialized - Local file storage AND Discord integration"
        )

    def create_devlog_content(
        self, agent_flag: str, action: str, status: str = "completed", details: str = ""
    ) -> str:
        """Create formatted devlog content for local file storage"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")
        agent_info = self.validator.get_agent_info(agent_flag)

        content = f"""# 🤖 Agent Devlog - {agent_flag}

## 📅 Timestamp
{timestamp}

## 🎯 Agent Information
- **Agent ID:** {agent_flag}
- **Role:** {agent_info.get('role', 'Specialist') if agent_info else 'Specialist'}
- **Status:** {status}

## 📝 Action Details
**Action:** {action}

## 🔧 Technical Details
- **Devlog Type:** Agent Action
- **Posting Method:** Local File Storage
- **Storage Type:** JSON File
- **Timestamp:** {timestamp}

## 📋 Additional Details
{details if details else "No additional details provided"}

## 🐝 Swarm Coordination
- **System:** Agent Devlog Posting Service
- **Storage:** Local File System
- **Format:** JSON
- **Backup:** Enabled

---
*Generated by Agent Devlog Posting Service - Local Storage Only*
"""

        return content

    def post_to_discord(self, content: str, agent_id: str) -> bool:
        """Post devlog content to Discord."""
        try:
            # Import Discord service
            from src.services.discord_devlog_service import DiscordDevlogService

            # Initialize Discord service
            discord_service = DiscordDevlogService()

            # Post to Discord using synchronous wrapper
            result = self._post_to_discord_sync(discord_service, content, agent_id)
            return result
        except Exception as e:
            self.logger.error(f"Discord posting failed: {e}")
            return False

    def _post_to_discord_sync(self, discord_service, content: str, agent_id: str) -> bool:
        """Synchronous wrapper for Discord posting."""
        try:
            # Create new event loop for this operation
            import threading

            result = [False]  # Use list to allow modification in nested function

            def run_async():
                try:
                    # Create new event loop in thread
                    new_loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(new_loop)

                    # Run the async function
                    result[0] = new_loop.run_until_complete(
                        discord_service.post_devlog_to_discord(content, agent_id)
                    )

                    new_loop.close()
                except Exception as e:
                    self.logger.error(f"Async Discord posting failed: {e}")
                    result[0] = False

            # Run in separate thread to avoid event loop conflicts
            thread = threading.Thread(target=run_async, daemon=True)
            thread.start()
            thread.join(timeout=10)  # 10 second timeout

            if thread.is_alive():
                self.logger.warning("Discord posting timed out")
                return False

            return result[0]

        except Exception as e:
            self.logger.error(f"Sync Discord posting failed: {e}")
            return False

    def post_devlog(
        self,
        agent_flag: str,
        action: str,
        status: str = "completed",
        details: str = "",
        dry_run: bool = False,
    ) -> dict[str, Any]:
        """Post devlog entry"""
        # Validate agent flag
        if not self.validator.validate_agent_flag(agent_flag):
            return {
                "success": False,
                "error": f"Invalid agent flag: {agent_flag}. Must be Agent-1 through Agent-8",
            }

        # Validate action
        if not self.validator.validate_action(action):
            return {"success": False, "error": "Invalid action. Must be 3-500 characters long"}

        # Validate status
        if not self.validator.validate_status(status):
            return {
                "success": False,
                "error": f"Invalid status: {status}. Must be one of: completed, in_progress, failed, pending",
            }

        # Validate details
        if not self.validator.validate_details(details):
            return {"success": False, "error": "Details too long. Maximum 2000 characters allowed"}

        # Create devlog entry
        timestamp = datetime.now().isoformat()
        devlog_type = self.validator.suggest_devlog_type(action, status)

        devlog_entry = DevlogEntry(
            agent_id=agent_flag,
            action=action,
            status=DevlogStatus(status),
            details=details,
            timestamp=timestamp,
            devlog_type=devlog_type,
            metadata={"posting_method": "local_file", "storage_type": "json", "dry_run": dry_run},
        )

        if dry_run:
            return {
                "success": True,
                "message": "Dry run completed successfully",
                "devlog_entry": {
                    "agent_id": devlog_entry.agent_id,
                    "action": devlog_entry.action,
                    "status": devlog_entry.status.value,
                    "details": devlog_entry.details,
                    "timestamp": devlog_entry.timestamp,
                    "devlog_type": devlog_entry.devlog_type.value,
                },
            }

        # Save devlog
        success = self.storage.save_devlog(devlog_entry)

        if success:
            # Also post to Discord
            discord_success = self.post_to_discord(
                self.create_devlog_content(agent_flag, action, status, details), agent_flag
            )

            self.logger.info(f"✅ Devlog posted successfully for {agent_flag}")
            if discord_success:
                self.logger.info(f"✅ Devlog posted to Discord for {agent_flag}")
            else:
                self.logger.warning(f"⚠️ Discord posting failed for {agent_flag}")

            return {
                "success": True,
                "message": f"Devlog posted successfully for {agent_flag}",
                "agent_id": agent_flag,
                "action": action,
                "status": status,
                "timestamp": timestamp,
                "discord_posted": discord_success,
            }
        else:
            return {"success": False, "error": "Failed to save devlog to file"}

    def search_devlogs(
        self,
        query: str,
        agent_id: str | None = None,
        status: str | None = None,
        limit: int = 50,
    ) -> dict[str, Any]:
        """Search devlogs"""
        try:
            results = self.storage.search_devlogs(query, agent_id, status, limit)

            return {
                "success": True,
                "query": query,
                "results": results,
                "total_matches": len(results),
                "filters": {"agent_id": agent_id, "status": status, "limit": limit},
            }
        except Exception as e:
            return {"success": False, "error": str(e), "query": query}

    def get_devlog_stats(self) -> dict[str, Any]:
        """Get devlog statistics"""
        try:
            stats = self.storage.get_devlog_stats()
            file_info = self.storage.get_file_info()

            return {
                "success": True,
                "stats": {
                    "total_devlogs": stats.total_devlogs,
                    "agent_counts": stats.agent_counts,
                    "status_counts": stats.status_counts,
                    "type_counts": stats.type_counts,
                    "recent_activity": stats.recent_activity,
                },
                "file_info": file_info,
            }
        except Exception as e:
            return {"success": False, "error": str(e)}

    def cleanup_old_devlogs(self, days_to_keep: int = 30) -> dict[str, Any]:
        """Cleanup old devlog files"""
        try:
            deleted_count = self.storage.cleanup_old_files(days_to_keep)

            return {
                "success": True,
                "message": f"Cleaned up {deleted_count} old devlog files",
                "deleted_files": deleted_count,
                "days_kept": days_to_keep,
            }
        except Exception as e:
            return {"success": False, "error": str(e)}

    def get_agent_info(self, agent_id: str) -> dict[str, Any]:
        """Get agent information"""
        agent_info = self.validator.get_agent_info(agent_id)

        if agent_info:
            return {
                "success": True,
                "agent_info": {
                    "agent_id": agent_info.agent_id,
                    "role": agent_info.role,
                    "status": agent_info.status,
                    "capabilities": agent_info.capabilities,
                    "is_captain": self.validator.is_captain_agent(agent_id),
                },
            }
        else:
            return {"success": False, "error": f"Invalid agent ID: {agent_id}"}

    def get_all_agents(self) -> dict[str, Any]:
        """Get all agents information"""
        agents = self.validator.get_all_agents()
        agent_stats = self.validator.get_agent_statistics()

        return {
            "success": True,
            "agents": agents,
            "agent_stats": agent_stats,
            "total_agents": len(agents),
        }
