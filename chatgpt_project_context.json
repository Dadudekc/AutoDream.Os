{
    "project_root": "D:\\Agent_Cellphone_V2_Repository",
    "num_files_analyzed": 51,
    "analysis_details": {
        "tools\\git_commit_verifier.py": {
            "language": ".py",
            "functions": [
                "run_git_command",
                "check_commits_today",
                "verify_work_exists",
                "check_file_exists"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tools\\v2_compliance_batch_checker.py": {
            "language": ".py",
            "functions": [
                "check_file_compliance",
                "batch_check",
                "print_report"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tools\\test_pyramid_analyzer.py": {
            "language": ".py",
            "functions": [
                "count_tests_in_file",
                "analyze_pyramid",
                "print_pyramid_report"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tools\\coverage_validator.py": {
            "language": ".py",
            "functions": [
                "parse_jest_coverage_summary",
                "validate_coverage"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tools\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tools\\documentation_assistant.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "create_mission_doc",
                "create_completion_report",
                "create_milestone_doc",
                "create_enhancement_request",
                "create_status_snapshot",
                "_count_active_agents",
                "_list_recent_missions",
                "_list_recent_milestones"
            ],
            "classes": {
                "DocumentationAssistant": {
                    "methods": [
                        "__init__",
                        "create_mission_doc",
                        "create_completion_report",
                        "create_milestone_doc",
                        "create_enhancement_request",
                        "create_status_snapshot",
                        "_count_active_agents",
                        "_list_recent_missions",
                        "_list_recent_milestones"
                    ],
                    "docstring": "Helper tool for generating consistent documentation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 19
        },
        "tools\\git_work_verifier.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "verify_claim",
                "_get_git_evidence",
                "_parse_git_log",
                "verify_multiple_claims",
                "generate_report"
            ],
            "classes": {
                "WorkClaim": {
                    "methods": [],
                    "docstring": "A claim of work completed",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "GitEvidence": {
                    "methods": [],
                    "docstring": "Git evidence for work",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VerificationResult": {
                    "methods": [],
                    "docstring": "Result of verifying a work claim",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "GitWorkVerifier": {
                    "methods": [
                        "__init__",
                        "verify_claim",
                        "_get_git_evidence",
                        "_parse_git_log",
                        "verify_multiple_claims",
                        "generate_report"
                    ],
                    "docstring": "Verify work claims against git history",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 13
        },
        "tools\\toolbelt_registry.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_build_flag_map",
                "get_tool_for_flag",
                "get_tool_by_name",
                "list_tools",
                "get_all_flags"
            ],
            "classes": {
                "ToolRegistry": {
                    "methods": [
                        "__init__",
                        "_build_flag_map",
                        "get_tool_for_flag",
                        "get_tool_by_name",
                        "list_tools",
                        "get_all_flags"
                    ],
                    "docstring": "Tool registry for CLI Toolbelt.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "tools\\memory_leak_scanner.py": {
            "language": ".py",
            "functions": [
                "scan_file",
                "scan_directory",
                "print_report",
                "__init__"
            ],
            "classes": {
                "MemoryLeakPattern": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Memory leak pattern detector.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "tools\\qa_validation_checklist.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "check",
                "run_git_command",
                "verify_git_commits_exist",
                "verify_files_exist",
                "run_validation",
                "print_summary"
            ],
            "classes": {
                "QAChecklist": {
                    "methods": [
                        "__init__",
                        "check",
                        "run_git_command",
                        "verify_git_commits_exist",
                        "verify_files_exist",
                        "run_validation",
                        "print_summary"
                    ],
                    "docstring": "QA validation checklist.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "tools\\swarm_status_broadcaster.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "broadcast",
                "broadcast_c055_status",
                "broadcast_v2_progress",
                "broadcast_achievement",
                "_send_to_agent",
                "broadcast_with_template"
            ],
            "classes": {
                "BroadcastMessage": {
                    "methods": [],
                    "docstring": "A message to broadcast to agents",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SwarmStatusBroadcaster": {
                    "methods": [
                        "__init__",
                        "broadcast",
                        "broadcast_c055_status",
                        "broadcast_v2_progress",
                        "broadcast_achievement",
                        "_send_to_agent",
                        "broadcast_with_template"
                    ],
                    "docstring": "Broadcast status messages to multiple agents",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "tools\\agent_toolbelt.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_create_parser",
                "_add_vector_parser",
                "_add_messaging_parser",
                "_add_analysis_parser",
                "_add_v2_parser",
                "_add_agent_parser",
                "_add_consolidation_parser",
                "_add_refactor_parser",
                "_add_compliance_parser",
                "execute"
            ],
            "classes": {
                "AgentToolbeltCLI": {
                    "methods": [
                        "__init__",
                        "_create_parser",
                        "_add_vector_parser",
                        "_add_messaging_parser",
                        "_add_analysis_parser",
                        "_add_v2_parser",
                        "_add_agent_parser",
                        "_add_consolidation_parser",
                        "_add_refactor_parser",
                        "_add_compliance_parser",
                        "execute"
                    ],
                    "docstring": "CLI interface for Agent Toolbelt V2.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 23
        },
        "tools\\agent_toolbelt_executors.py": {
            "language": ".py",
            "functions": [
                "execute",
                "execute",
                "execute",
                "execute",
                "execute",
                "execute",
                "execute",
                "execute"
            ],
            "classes": {
                "VectorExecutor": {
                    "methods": [
                        "execute"
                    ],
                    "docstring": "Execute vector database operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessagingExecutor": {
                    "methods": [
                        "execute"
                    ],
                    "docstring": "Execute messaging operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AnalysisExecutor": {
                    "methods": [
                        "execute"
                    ],
                    "docstring": "Execute analysis operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "V2Executor": {
                    "methods": [
                        "execute"
                    ],
                    "docstring": "Execute V2 compliance operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentExecutor": {
                    "methods": [
                        "execute"
                    ],
                    "docstring": "Execute agent operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ConsolidationExecutor": {
                    "methods": [
                        "execute"
                    ],
                    "docstring": "Execute consolidation operations (learned from Agent-7's session).",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "RefactorExecutor": {
                    "methods": [
                        "execute"
                    ],
                    "docstring": "Execute refactoring operations (patterns learned from Agent-7's session).",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ComplianceExecutor": {
                    "methods": [
                        "execute"
                    ],
                    "docstring": "Execute compliance checking operations (tools from Agent-7's refactor session).",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "tools\\autonomous_task_engine.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "discover_tasks",
                "get_optimal_task_for_agent",
                "get_top_n_tasks_for_agent",
                "claim_task",
                "start_task",
                "complete_task",
                "generate_autonomous_report",
                "_discover_v2_violations",
                "_discover_tech_debt",
                "_discover_code_todos",
                "_discover_optimizations",
                "_discover_test_gaps",
                "_calculate_skill_matches",
                "_score_task_for_agent",
                "_get_or_create_agent_profile",
                "_has_unmet_blockers",
                "_find_task",
                "_update_agent_profile",
                "_load_tasks",
                "_save_tasks",
                "_load_agent_profiles",
                "_save_agent_profiles"
            ],
            "classes": {
                "Task": {
                    "methods": [],
                    "docstring": "A discovered task opportunity",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentProfile": {
                    "methods": [],
                    "docstring": "Agent's capabilities and history",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskRecommendation": {
                    "methods": [],
                    "docstring": "Personalized task recommendation for an agent",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AutonomousTaskEngine": {
                    "methods": [
                        "__init__",
                        "discover_tasks",
                        "get_optimal_task_for_agent",
                        "get_top_n_tasks_for_agent",
                        "claim_task",
                        "start_task",
                        "complete_task",
                        "generate_autonomous_report",
                        "_discover_v2_violations",
                        "_discover_tech_debt",
                        "_discover_code_todos",
                        "_discover_optimizations",
                        "_discover_test_gaps",
                        "_calculate_skill_matches",
                        "_score_task_for_agent",
                        "_get_or_create_agent_profile",
                        "_has_unmet_blockers",
                        "_find_task",
                        "_update_agent_profile",
                        "_load_tasks",
                        "_save_tasks",
                        "_load_agent_profiles",
                        "_save_agent_profiles"
                    ],
                    "docstring": "The Masterpiece Tool - Autonomous Task Discovery & Selection Engine\n\nEnables agents to:\n1. Discover optimal tasks autonomously\n2. Get personalized recommendations based on skills\n3. Calculate ROI and impact automatically\n4. Claim and track tasks without Captain intervention\n5. Coordinate with other agents intelligently",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 47
        },
        "tools\\swarm_orchestrator.py": {
            "language": ".py",
            "functions": [
                "run_orchestrator",
                "__init__",
                "_discover_agents",
                "get_agent_status",
                "scan_all_opportunities",
                "_scan_linter_errors",
                "_scan_v2_violations",
                "_scan_memory_leaks",
                "_scan_test_coverage",
                "_scan_todo_comments",
                "_scan_duplication",
                "_scan_complexity",
                "calculate_roi",
                "match_to_agent",
                "create_inbox_task",
                "send_gas_message",
                "run_cycle"
            ],
            "classes": {
                "SwarmOrchestrator": {
                    "methods": [
                        "__init__",
                        "_discover_agents",
                        "get_agent_status",
                        "scan_all_opportunities",
                        "_scan_linter_errors",
                        "_scan_v2_violations",
                        "_scan_memory_leaks",
                        "_scan_test_coverage",
                        "_scan_todo_comments",
                        "_scan_duplication",
                        "_scan_complexity",
                        "calculate_roi",
                        "match_to_agent",
                        "create_inbox_task",
                        "send_gas_message",
                        "run_cycle"
                    ],
                    "docstring": "The Gas Station - Autonomous Swarm Coordinator.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 33
        },
        "tools\\integrity_validator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "validate_task_completion",
                "validate_agent_status",
                "validate_points_claim",
                "generate_integrity_report"
            ],
            "classes": {
                "IntegrityCheck": {
                    "methods": [],
                    "docstring": "Result of integrity validation",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "IntegrityValidator": {
                    "methods": [
                        "__init__",
                        "validate_task_completion",
                        "validate_agent_status",
                        "validate_points_claim",
                        "generate_integrity_report"
                    ],
                    "docstring": "Validate agent task claims against evidence",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "tools\\work_attribution_tool.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "get_agent_work",
                "get_all_agents_work",
                "verify_agent_did_work",
                "who_worked_on_file",
                "generate_attribution_report",
                "_parse_git_log"
            ],
            "classes": {
                "WorkItem": {
                    "methods": [],
                    "docstring": "A piece of work done by an agent",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "WorkAttributionTool": {
                    "methods": [
                        "__init__",
                        "get_agent_work",
                        "get_all_agents_work",
                        "verify_agent_did_work",
                        "who_worked_on_file",
                        "generate_attribution_report",
                        "_parse_git_log"
                    ],
                    "docstring": "Attribution tool to properly credit agents for their work",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "tools\\projectscanner_core.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_cache",
                "save_cache",
                "scan_project",
                "_process_file",
                "generate_init_files",
                "export_chatgpt_context",
                "generate_modular_reports",
                "categorize_agents",
                "_maturity_level",
                "_agent_type"
            ],
            "classes": {
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "load_cache",
                        "save_cache",
                        "scan_project",
                        "_process_file",
                        "generate_init_files",
                        "export_chatgpt_context",
                        "generate_modular_reports",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type"
                    ],
                    "docstring": "A universal project scanner that:\n  - Identifies Python, Rust, JS, TS files.\n  - Extracts functions, classes, routes, complexity.\n  - Caches file hashes to skip unchanged files.\n  - Detects moved files by matching file hashes.\n  - Merges new analysis into existing project_analysis.json (preserving old entries).\n  - Exports a merged ChatGPT context if requested (preserving old context data).\n  - Processes files asynchronously with BotWorker threads.\n  - Auto-generates __init__.py files for Python packages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 22
        },
        "tools_v2\\tool_registry.py": {
            "language": ".py",
            "functions": [
                "get_tool_registry",
                "__init__",
                "resolve",
                "list_tools",
                "list_by_category",
                "export_lock"
            ],
            "classes": {
                "ToolRegistry": {
                    "methods": [
                        "__init__",
                        "resolve",
                        "list_tools",
                        "list_by_category",
                        "export_lock"
                    ],
                    "docstring": "Central registry for tool resolution and caching.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "tools_v2\\categories\\config_tools.py": {
            "language": ".py",
            "functions": [
                "get_spec",
                "get_help",
                "validate",
                "execute",
                "get_spec",
                "get_help",
                "validate",
                "execute",
                "get_spec",
                "get_help",
                "validate",
                "execute"
            ],
            "classes": {
                "ValidateConfigSSOTAdapter": {
                    "methods": [
                        "get_spec",
                        "get_help",
                        "validate",
                        "execute"
                    ],
                    "docstring": "Validate that config follows SSOT principle.",
                    "base_classes": [
                        "IToolAdapter"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ListConfigSourcesAdapter": {
                    "methods": [
                        "get_spec",
                        "get_help",
                        "validate",
                        "execute"
                    ],
                    "docstring": "List all configuration sources in project.",
                    "base_classes": [
                        "IToolAdapter"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CheckConfigImportsAdapter": {
                    "methods": [
                        "get_spec",
                        "get_help",
                        "validate",
                        "execute"
                    ],
                    "docstring": "Check what imports config files.",
                    "base_classes": [
                        "IToolAdapter"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 24
        },
        "tools_v2\\categories\\integration_tools.py": {
            "language": ".py",
            "functions": [
                "get_spec",
                "get_help",
                "validate",
                "execute",
                "get_spec",
                "get_help",
                "validate",
                "execute",
                "get_spec",
                "get_help",
                "validate",
                "execute",
                "get_spec",
                "get_help",
                "validate",
                "execute"
            ],
            "classes": {
                "FindSSOTViolationsAdapter": {
                    "methods": [
                        "get_spec",
                        "get_help",
                        "validate",
                        "execute"
                    ],
                    "docstring": "Find potential SSOT (Single Source of Truth) violations.",
                    "base_classes": [
                        "IToolAdapter"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FindDuplicateFunctionalityAdapter": {
                    "methods": [
                        "get_spec",
                        "get_help",
                        "validate",
                        "execute"
                    ],
                    "docstring": "Find duplicate functionality across services/modules.",
                    "base_classes": [
                        "IToolAdapter"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FindIntegrationOpportunitiesAdapter": {
                    "methods": [
                        "get_spec",
                        "get_help",
                        "validate",
                        "execute"
                    ],
                    "docstring": "Analyze codebase for integration opportunities.",
                    "base_classes": [
                        "IToolAdapter"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CheckImportDependenciesAdapter": {
                    "methods": [
                        "get_spec",
                        "get_help",
                        "validate",
                        "execute"
                    ],
                    "docstring": "Check import dependencies for circular imports or heavy dependencies.",
                    "base_classes": [
                        "IToolAdapter"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 32
        },
        "tools_v2\\categories\\coordination_tools.py": {
            "language": ".py",
            "functions": [
                "get_spec",
                "get_help",
                "validate",
                "execute",
                "get_spec",
                "get_help",
                "validate",
                "execute",
                "get_spec",
                "get_help",
                "validate",
                "execute"
            ],
            "classes": {
                "FindDomainExpertAdapter": {
                    "methods": [
                        "get_spec",
                        "get_help",
                        "validate",
                        "execute"
                    ],
                    "docstring": "Find which agent has expertise in a given domain.",
                    "base_classes": [
                        "IToolAdapter"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "RequestExpertReviewAdapter": {
                    "methods": [
                        "get_spec",
                        "get_help",
                        "validate",
                        "execute"
                    ],
                    "docstring": "Request expert review using Pattern #5 coordination.",
                    "base_classes": [
                        "IToolAdapter"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CheckCoordinationPatternsAdapter": {
                    "methods": [
                        "get_spec",
                        "get_help",
                        "validate",
                        "execute"
                    ],
                    "docstring": "Check swarm brain for coordination patterns.",
                    "base_classes": [
                        "IToolAdapter"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 24
        },
        "scripts\\terminal_completion_monitor.py": {
            "language": ".py",
            "functions": [
                "parse_args",
                "main",
                "to_json",
                "__init__",
                "_emit",
                "poll",
                "watch"
            ],
            "classes": {
                "CompletionEvent": {
                    "methods": [
                        "to_json"
                    ],
                    "docstring": "Structured event emitted when a completion signal is detected.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TerminalCompletionMonitor": {
                    "methods": [
                        "__init__",
                        "_emit",
                        "poll",
                        "watch"
                    ],
                    "docstring": "Tail log files and emit events when completion signals appear.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "src\\core\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\core\\messaging_core.py": {
            "language": ".py",
            "functions": [
                "get_messaging_core",
                "send_message",
                "send_message_object",
                "broadcast_message",
                "generate_onboarding_message",
                "show_message_history",
                "list_agents",
                "get_messaging_logger",
                "validate_messaging_system",
                "initialize_messaging_system",
                "__init__",
                "_initialize_subsystems",
                "send_message",
                "send_message_object",
                "send_message_to_inbox",
                "show_message_history",
                "generate_onboarding_message",
                "broadcast_message",
                "list_agents"
            ],
            "classes": {
                "UnifiedMessagingCore": {
                    "methods": [
                        "__init__",
                        "_initialize_subsystems",
                        "send_message",
                        "send_message_object",
                        "send_message_to_inbox",
                        "show_message_history",
                        "generate_onboarding_message",
                        "broadcast_message",
                        "list_agents"
                    ],
                    "docstring": "SINGLE SOURCE OF TRUTH for all messaging functionality.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 28
        },
        "src\\core\\analytics\\framework\\predictive_modeling_metrics.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "calculate_ensemble",
                "calculate_forecast_confidence",
                "calculate_forecast_accuracy"
            ],
            "classes": {
                "PredictiveModelingMetrics": {
                    "methods": [
                        "__init__",
                        "calculate_ensemble",
                        "calculate_forecast_confidence",
                        "calculate_forecast_accuracy"
                    ],
                    "docstring": "Handles forecast ensemble and accuracy calculations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "src\\core\\analytics\\framework\\predictive_modeling_forecasters.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "forecast_moving_average",
                "forecast_exponential_smoothing",
                "forecast_linear_trend"
            ],
            "classes": {
                "PredictiveModelingForecasters": {
                    "methods": [
                        "__init__",
                        "forecast_moving_average",
                        "forecast_exponential_smoothing",
                        "forecast_linear_trend"
                    ],
                    "docstring": "Implements time-series forecasting methods.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "src\\core\\analytics\\framework\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\core\\analytics\\framework\\predictive_modeling_engine.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "forecast",
                "_convert_to_numeric",
                "forecast_moving_average",
                "forecast_exponential_smoothing",
                "forecast_linear_trend",
                "detect_seasonality",
                "calculate_forecast_accuracy"
            ],
            "classes": {
                "PredictiveModelingEngine": {
                    "methods": [
                        "__init__",
                        "forecast",
                        "_convert_to_numeric",
                        "forecast_moving_average",
                        "forecast_exponential_smoothing",
                        "forecast_linear_trend",
                        "detect_seasonality",
                        "calculate_forecast_accuracy"
                    ],
                    "docstring": "Implements time-series and forecasting models.\n\nCoordinates forecasting methods, ensemble calculations,\nand seasonal pattern detection without external dependencies.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "src\\core\\analytics\\framework\\predictive_modeling_seasonality.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "detect_seasonality"
            ],
            "classes": {
                "PredictiveModelingSeasonality": {
                    "methods": [
                        "__init__",
                        "detect_seasonality"
                    ],
                    "docstring": "Handles seasonal pattern detection and analysis.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "src\\core\\intelligent_context\\mission_models.py": {
            "language": ".py",
            "functions": [
                "to_dict"
            ],
            "classes": {
                "MissionContext": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Mission context structure for intelligent retrieval.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "src\\core\\intelligent_context\\context_results.py": {
            "language": ".py",
            "functions": [
                "to_dict",
                "to_dict"
            ],
            "classes": {
                "SearchResult": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Search result structure.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ContextRetrievalResult": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Result of context retrieval operation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "src\\core\\intelligent_context\\emergency_models.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "EmergencyContext": {
                    "methods": [],
                    "docstring": "Emergency context structure.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "InterventionProtocol": {
                    "methods": [],
                    "docstring": "Intervention protocol structure.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "src\\core\\intelligent_context\\agent_models.py": {
            "language": ".py",
            "functions": [
                "to_dict"
            ],
            "classes": {
                "AgentCapability": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Agent capability structure for matching and optimization.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentRecommendation": {
                    "methods": [],
                    "docstring": "Agent recommendation structure.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "src\\core\\intelligent_context\\analysis_models.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "RiskAssessment": {
                    "methods": [],
                    "docstring": "Risk assessment structure.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SuccessPrediction": {
                    "methods": [],
                    "docstring": "Success prediction structure.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "src\\core\\intelligent_context\\context_enums.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "MissionPhase": {
                    "methods": [],
                    "docstring": "Mission phases.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentStatus": {
                    "methods": [],
                    "docstring": "Agent availability status.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "RiskLevel": {
                    "methods": [],
                    "docstring": "Risk levels.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "src\\core\\intelligent_context\\metrics_models.py": {
            "language": ".py",
            "functions": [
                "to_dict"
            ],
            "classes": {
                "ContextMetrics": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Metrics for context retrieval operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "src\\core\\intelligent_context\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\core\\intelligent_context\\intelligent_context_models.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\services\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\services\\cursor_db.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_connect",
                "get_task",
                "task_exists"
            ],
            "classes": {
                "CursorTask": {
                    "methods": [],
                    "docstring": "Record representing an agent task stored in the Cursor database.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CursorTaskRepository": {
                    "methods": [
                        "__init__",
                        "_connect",
                        "get_task",
                        "task_exists"
                    ],
                    "docstring": "Repository providing read access to Cursor task records.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "src\\services\\chatgpt\\navigator_messaging.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "NavigatorMessaging": {
                    "methods": [],
                    "docstring": "Handles message sending and response waiting for ChatGPT navigator.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "src\\services\\handlers\\hard_onboarding_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "can_handle",
                "handle"
            ],
            "classes": {
                "HardOnboardingHandler": {
                    "methods": [
                        "__init__",
                        "can_handle",
                        "handle"
                    ],
                    "docstring": "Handles hard onboarding commands for messaging CLI.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "src\\services\\chatgpt\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\services\\chatgpt\\session_persistence.py": {
            "language": ".py",
            "functions": [
                "clear_session_files"
            ],
            "classes": {
                "SessionPersistence": {
                    "methods": [
                        "clear_session_files"
                    ],
                    "docstring": "Handles session data persistence operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "src\\services\\chatgpt\\session.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "clear_session",
                "get_session_info",
                "is_session_valid",
                "get_unified_config",
                "get_logger"
            ],
            "classes": {
                "BrowserSessionManager": {
                    "methods": [
                        "__init__",
                        "clear_session",
                        "get_session_info",
                        "is_session_valid"
                    ],
                    "docstring": "Browser session management for ChatGPT.\n\nProvides session persistence, cookie management, and authentication\nhandling for ChatGPT browser automation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "src\\services\\chatgpt\\navigator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_active_page",
                "get_navigation_info",
                "get_unified_config",
                "get_logger"
            ],
            "classes": {
                "ChatGPTNavigator": {
                    "methods": [
                        "__init__",
                        "get_active_page",
                        "get_navigation_info"
                    ],
                    "docstring": "ChatGPT browser navigation helper.\n\nProvides navigation capabilities for ChatGPT conversations\nwith integration to V2's browser infrastructure.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "UnifiedBrowserService": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "src\\discord_commander\\discord_embeds.py": {
            "language": ".py",
            "functions": [
                "create_devlog_embed",
                "create_agent_status_embed",
                "create_coordination_embed"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "src\\web\\vector_database\\unified_middleware.py": {
            "language": ".py",
            "functions": [
                "error_handler",
                "json_required",
                "log_request",
                "rate_limit",
                "add_cors_headers",
                "cache_response",
                "validate_request",
                "validate_pagination",
                "decorated_function",
                "decorated_function",
                "decorated_function",
                "decorator",
                "decorated_function",
                "decorator",
                "decorator",
                "decorated_function",
                "decorated_function",
                "decorated_function",
                "decorated_function"
            ],
            "classes": {
                "UnifiedVectorMiddleware": {
                    "methods": [
                        "error_handler",
                        "json_required",
                        "log_request",
                        "rate_limit",
                        "add_cors_headers",
                        "cache_response",
                        "validate_request",
                        "validate_pagination"
                    ],
                    "docstring": "Unified middleware providing error handling, request/response processing,\nand validation decorators for vector database operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 27
        },
        "src\\web\\vector_database\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\web\\vector_database\\handlers.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        }
    }
}