//@version=5
indicator("TSLA Signal Stack - Complete Confirmation System", overlay=true, max_boxes_count=500, max_lines_count=500)

// ============================================================================
// INPUT PARAMETERS
// ============================================================================

// RSI Settings
rsi_length = input.int(14, "RSI Length", minval=1)
rsi_overbought = input.int(60, "RSI Overbought Level", minval=50, maxval=100)
rsi_oversold = input.int(40, "RSI Oversold Level", minval=0, maxval=50)

// MACD Settings
macd_fast = input.int(12, "MACD Fast Length", minval=1)
macd_slow = input.int(26, "MACD Slow Length", minval=1)
macd_signal = input.int(9, "MACD Signal Length", minval=1)

// EMA Settings
ema20_length = input.int(20, "EMA 20 Length", minval=1)
ema50_length = input.int(50, "EMA 50 Length", minval=1)

// VWAP Settings
vwap_source = input.source(hlc3, "VWAP Source")
vwap_anchor = input.session("0930-1600", "VWAP Session")

// Volume Settings
volume_ma_length = input.int(20, "Volume MA Length", minval=1)
volume_spike_multiplier = input.float(1.2, "Volume Spike Multiplier", minval=1.0)

// Alert Levels
rug_pull_level = input.float(439.50, "Rug Pull Watch Level")
breakdown_level = input.float(434.50, "Breakdown Level")
fakeout_recovery = input.float(435.50, "Fakeout Recovery Level")

// ============================================================================
// CALCULATIONS
// ============================================================================

// RSI Calculation
rsi = ta.rsi(close, rsi_length)

// MACD Calculation
[macd_line, signal_line, histogram] = ta.macd(close, macd_fast, macd_slow, macd_signal)

// EMA Calculations
ema20 = ta.ema(close, ema20_length)
ema50 = ta.ema(close, ema50_length)

// VWAP Calculation
vwap_value = ta.vwap(vwap_source)

// Volume Analysis
volume_ma = ta.sma(volume, volume_ma_length)
volume_spike = volume > volume_ma * volume_spike_multiplier

// ============================================================================
// SIGNAL STACK CONDITIONS
// ============================================================================

// 1. VWAP Alignment (Below VWAP = Bearish)
vwap_bearish = close < vwap_value
vwap_bullish = close > vwap_value

// 2. EMA Cross (20 below 50 = Bearish)
ema_bearish_cross = ta.crossunder(ema20, ema50)
ema_bullish_cross = ta.crossover(ema20, ema50)
ema_bearish_alignment = ema20 < ema50

// 3. QQQ Correlation (Simplified - would need QQQ data in real implementation)
// For now, using SPY as proxy
spy_symbol = request.security("SPY", timeframe.period, close)
spy_correlation = ta.correlation(close, spy_symbol, 20)
qqq_divergence = spy_correlation < 0.3  // Low correlation suggests divergence

// 4. Timeframe Sync (Multi-timeframe analysis)
htf_trend = request.security(syminfo.tickerid, "30", close) > request.security(syminfo.tickerid, "30", close[1])
mtf_bearish = not htf_trend

// ============================================================================
// ALERT CONDITIONS
// ============================================================================

// Rug Pull Watch
rug_pull_conditions = close >= rug_pull_level and 
                     rsi > rsi_overbought and 
                     histogram < histogram[1] and 
                     histogram[1] < histogram[2] and
                     volume_spike and
                     vwap_bearish and
                     ema_bearish_alignment

// Bear Confirmed
bear_confirmed_conditions = close < breakdown_level and
                           volume_spike and
                           rsi < rsi_oversold and
                           ta.crossunder(macd_line, signal_line) and
                           vwap_bearish and
                           ema_bearish_alignment and
                           mtf_bearish

// Fakeout Filter
var float fakeout_low = na
var bool fakeout_detected = false

if close < breakdown_level and na(fakeout_low)
    fakeout_low := low

if not na(fakeout_low) and close > fakeout_recovery
    fakeout_detected := true
    fakeout_low := na

// Reset fakeout on new day
if ta.change(time("1D"))
    fakeout_detected := false
    fakeout_low := na

// MACD Signal Warning
macd_warning = histogram < 0 and 
              histogram < histogram[1] and 
              close > 435.0 and
              vwap_bearish

// ============================================================================
// VISUAL INDICATORS
// ============================================================================

// Plot EMAs
plot(ema20, "EMA 20", color=color.blue, linewidth=2)
plot(ema50, "EMA 50", color=color.red, linewidth=2)

// Plot VWAP
plot(vwap_value, "VWAP", color=color.purple, linewidth=2)

// Plot Key Levels
hline(rug_pull_level, "Rug Pull Level", color=color.orange, linestyle=hline.style_dashed)
hline(breakdown_level, "Breakdown Level", color=color.red, linestyle=hline.style_dashed)
hline(fakeout_recovery, "Fakeout Recovery", color=color.yellow, linestyle=hline.style_dotted)

// Background Colors
bgcolor(rug_pull_conditions ? color.new(color.orange, 90) : na, title="Rug Pull Zone")
bgcolor(bear_confirmed_conditions ? color.new(color.red, 90) : na, title="Bear Confirmed Zone")
bgcolor(fakeout_detected ? color.new(color.yellow, 90) : na, title="Fakeout Zone")

// ============================================================================
// ALERTS
// ============================================================================

// Rug Pull Watch Alert
if rug_pull_conditions
    alert("🚨 TSLA RUG PULL WATCH\n" +
          "Price: " + str.tostring(close, "#.##") + "\n" +
          "RSI: " + str.tostring(rsi, "#.##") + "\n" +
          "MACD Hist: " + str.tostring(histogram, "#.####") + "\n" +
          "Volume: " + str.tostring(volume, "#") + "\n" +
          "VWAP Alignment: " + (vwap_bearish ? "BEARISH" : "BULLISH") + "\n" +
          "EMA Alignment: " + (ema_bearish_alignment ? "BEARISH" : "BULLISH"), 
          alert.freq_once_per_bar)

// Bear Confirmed Alert
if bear_confirmed_conditions
    alert("💀 TSLA BEAR CONFIRMED\n" +
          "Price: " + str.tostring(close, "#.##") + "\n" +
          "RSI: " + str.tostring(rsi, "#.##") + "\n" +
          "Volume Spike: " + str.tostring(volume / volume_ma, "#.##") + "x\n" +
          "MACD Cross: BEARISH\n" +
          "VWAP: " + str.tostring(vwap_value, "#.##") + "\n" +
          "Signal Stack: ALL BEARISH", 
          alert.freq_once_per_bar)

// Fakeout Filter Alert
if fakeout_detected
    alert("🧩 TSLA FAKEOUT DETECTED\n" +
          "Price: " + str.tostring(close, "#.##") + "\n" +
          "Fakeout Low: " + str.tostring(fakeout_low, "#.##") + "\n" +
          "Recovery Above: " + str.tostring(fakeout_recovery, "#.##") + "\n" +
          "Action: CANCEL OPEN POSITIONS", 
          alert.freq_once_per_bar)

// MACD Warning Alert
if macd_warning
    alert("⚠️ TSLA MACD WARNING\n" +
          "Price: " + str.tostring(close, "#.##") + "\n" +
          "MACD Hist: " + str.tostring(histogram, "#.####") + "\n" +
          "VWAP: " + str.tostring(vwap_value, "#.##") + "\n" +
          "Wait for candle close confirmation", 
          alert.freq_once_per_bar)

// ============================================================================
// TABLE DISPLAY
// ============================================================================

if barstate.islast
    var table info_table = table.new(position.top_right, 2, 8, bgcolor=color.white, border_width=1)
    
    table.cell(info_table, 0, 0, "Signal Stack", text_color=color.black, text_size=size.small)
    table.cell(info_table, 1, 0, "Status", text_color=color.black, text_size=size.small)
    
    table.cell(info_table, 0, 1, "VWAP", text_color=color.black, text_size=size.tiny)
    table.cell(info_table, 1, 1, vwap_bearish ? "BEARISH" : "BULLISH", 
               text_color=vwap_bearish ? color.red : color.green, text_size=size.tiny)
    
    table.cell(info_table, 0, 2, "EMA Cross", text_color=color.black, text_size=size.tiny)
    table.cell(info_table, 1, 2, ema_bearish_alignment ? "BEARISH" : "BULLISH", 
               text_color=ema_bearish_alignment ? color.red : color.green, text_size=size.tiny)
    
    table.cell(info_table, 0, 3, "RSI", text_color=color.black, text_size=size.tiny)
    table.cell(info_table, 1, 3, str.tostring(rsi, "#.##"), 
               text_color=rsi > rsi_overbought ? color.red : rsi < rsi_oversold ? color.green : color.gray, 
               text_size=size.tiny)
    
    table.cell(info_table, 0, 4, "MACD", text_color=color.black, text_size=size.tiny)
    table.cell(info_table, 1, 4, histogram < 0 ? "BEARISH" : "BULLISH", 
               text_color=histogram < 0 ? color.red : color.green, text_size=size.tiny)
    
    table.cell(info_table, 0, 5, "Volume", text_color=color.black, text_size=size.tiny)
    table.cell(info_table, 1, 5, volume_spike ? "SPIKE" : "NORMAL", 
               text_color=volume_spike ? color.orange : color.gray, text_size=size.tiny)
    
    table.cell(info_table, 0, 6, "Correlation", text_color=color.black, text_size=size.tiny)
    table.cell(info_table, 1, 6, str.tostring(spy_correlation, "#.##"), 
               text_color=qqq_divergence ? color.orange : color.gray, text_size=size.tiny)
    
    table.cell(info_table, 0, 7, "HTF Trend", text_color=color.black, text_size=size.tiny)
    table.cell(info_table, 1, 7, mtf_bearish ? "BEARISH" : "BULLISH", 
               text_color=mtf_bearish ? color.red : color.green, text_size=size.tiny)