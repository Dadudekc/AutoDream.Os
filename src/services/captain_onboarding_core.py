#!/usr/bin/env python3
"""
Captain Onboarding Core
======================

Core functionality for Captain onboarding system.

Author: Agent-7 (Web Development Expert / Implementation Specialist)
V2 Compliance: ≤400 lines, ≤5 classes, ≤10 functions
"""

import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Any

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class CaptainOnboardingCore:
    """Core Captain onboarding functionality."""

    def __init__(self):
        self.project_root = Path(__file__).parent.parent.parent
        self.onboarding_data = {
            "captain_role": "Strategic oversight and agent coordination",
            "responsibilities": [
                "Agent status monitoring and management",
                "High-priority messaging and coordination",
                "Strategic directive creation and execution",
                "Quality assurance oversight",
                "Crisis management and emergency response",
            ],
            "tools_available": [
                "Captain CLI tools",
                "Directive Manager",
                "Agent Workflow Manager",
                "Swarm Coordination Tool",
                "THEA Strategic Consultation",
            ],
        }
        logger.info("CaptainOnboardingCore initialized")

    def create_basic_onboarding(self) -> dict[str, str]:
        """Create basic Captain onboarding guide."""
        try:
            guide_content = self._generate_basic_guide()

            # Save basic guide
            guide_path = self.project_root / "docs/BASIC_CAPTAIN_ONBOARDING.md"
            guide_path.parent.mkdir(parents=True, exist_ok=True)

            with open(guide_path, "w", encoding="utf-8") as f:
                f.write(guide_content)

            logger.info(f"Basic Captain onboarding created: {guide_path}")

            return {
                "status": "success",
                "file_path": str(guide_path),
                "message": "Basic Captain onboarding created successfully",
            }

        except Exception as e:
            logger.error(f"Error creating basic onboarding: {e}")
            return {"status": "error", "message": f"Failed to create basic onboarding: {e}"}

    def _generate_basic_guide(self) -> str:
        """Generate basic Captain onboarding guide."""
        return f"""# 🎯 Basic Captain Onboarding Guide

**Agent-4 | Captain | Strategic Coordinator**
**Generated**: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
**Version**: 1.0 - Basic Edition

---

## 🚀 **QUICK START**

### **Your Role as Captain**
- **Strategic oversight** and agent coordination
- **High-priority messaging** and task assignment
- **Quality assurance** and compliance monitoring
- **Crisis management** and emergency response

### **Essential Tools**
- `tools/captain_cli.py` - Agent status and messaging
- `tools/captain_directive_manager.py` - Directive creation
- `tools/agent_workflow_manager.py` - Workflow coordination
- `tools/swarm_coordination_tool.py` - Swarm coordination

---

## 🛠️ **BASIC COMMANDS**

### **Check Agent Status**
```bash
python tools/captain_cli.py status
```

### **Send Message to Agent**
```bash
python tools/captain_cli.py high-priority --agent Agent-7 --message "Task assignment"
```

### **Create Directive**
```bash
python tools/captain_directive_manager.py directive create "Test Directive" tactical "Test the system" 0 "1 cycle"
```

---

## 📊 **MONITORING**

### **System Health**
- **Project Health**: `python tools/simple_project_scanner.py`
- **Quality Health**: `python quality_gates.py`
- **Agent Health**: `python tools/captain_cli.py status`

### **Key Metrics**
- **Agent Response Time**: Target < 5 minutes
- **Task Completion Rate**: Target > 95%
- **Quality Score**: Target > 90%
- **System Health**: Target > 85%

---

## 🚨 **EMERGENCY PROCEDURES**

### **System Issues**
1. Run system health check
2. Identify critical problems
3. Reassign tasks if needed
4. Communicate status to agents

### **Agent Problems**
1. Check agent status
2. Attempt recovery
3. Reassign tasks
4. Update coordination plans

---

**🐝 WE ARE SWARM** - Basic Captain onboarding complete!

**Generated by**: Agent-7 (Web Development Expert / Implementation Specialist)
**Status**: ✅ **READY FOR BASIC CAPTAIN OPERATIONS**
"""

    def setup_captain_workspace(self) -> dict[str, Any]:
        """Set up Captain workspace directory."""
        try:
            captain_workspace = self.project_root / "agent_workspaces/Agent-4"
            captain_workspace.mkdir(parents=True, exist_ok=True)

            # Create basic status file
            status_file = captain_workspace / "status.json"
            basic_status = {
                "agent_id": "Agent-4",
                "agent_name": "Captain",
                "status": "ACTIVE",
                "role": "CAPTAIN",
                "last_updated": datetime.now().isoformat(),
                "capabilities": [
                    "Strategic oversight",
                    "Agent coordination",
                    "Quality assurance",
                    "Crisis management",
                ],
            }

            with open(status_file, "w", encoding="utf-8") as f:
                json.dump(basic_status, f, indent=2)

            logger.info(f"Captain workspace created: {captain_workspace}")

            return {
                "status": "success",
                "workspace_path": str(captain_workspace),
                "status_file": str(status_file),
                "message": "Captain workspace setup complete",
            }

        except Exception as e:
            logger.error(f"Error setting up Captain workspace: {e}")
            return {"status": "error", "message": f"Failed to setup workspace: {e}"}

    def validate_captain_tools(self) -> dict[str, Any]:
        """Validate that all Captain tools are accessible."""
        try:
            captain_tools = [
                "tools/captain_cli.py",
                "tools/captain_directive_manager.py",
                "tools/agent_workflow_manager.py",
                "tools/swarm_coordination_tool.py",
            ]

            tool_status = {}
            all_available = True

            for tool in captain_tools:
                tool_path = self.project_root / tool
                available = tool_path.exists()
                tool_status[tool] = available
                if not available:
                    all_available = False

            logger.info(f"Captain tools validation: {tool_status}")

            return {
                "status": "success" if all_available else "warning",
                "tools": tool_status,
                "all_available": all_available,
                "message": "All tools available" if all_available else "Some tools missing",
            }

        except Exception as e:
            logger.error(f"Error validating Captain tools: {e}")
            return {"status": "error", "message": f"Failed to validate tools: {e}"}


def main():
    """Main function for Captain onboarding core."""
    print("🎯 Captain Onboarding Core")
    print("=" * 30)

    onboarding_core = CaptainOnboardingCore()

    # Create basic onboarding
    print("📚 Creating basic onboarding guide...")
    guide_result = onboarding_core.create_basic_onboarding()
    print(f"Result: {guide_result['message']}")

    # Setup workspace
    print("📂 Setting up Captain workspace...")
    workspace_result = onboarding_core.setup_captain_workspace()
    print(f"Result: {workspace_result['message']}")

    # Validate tools
    print("🛠️ Validating Captain tools...")
    tools_result = onboarding_core.validate_captain_tools()
    print(f"Result: {tools_result['message']}")

    print("\n✅ Captain onboarding core setup complete!")


if __name__ == "__main__":
    main()

