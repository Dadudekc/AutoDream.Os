import logging
from pathlib import Path
from typing import List

logger = logging.getLogger(__name__)


class DatasetPreparer:
    """Prepare test datasets by discovering and generating test files."""

    def __init__(self, test_dir: str):
        self.test_dir = Path(test_dir)
        self.generated_tests: List[str] = []

    def discover_tests(self) -> List[str]:
        """Return a list of discovered test files."""
        tests = [str(p) for p in self.test_dir.rglob('test_*.py') if p.is_file()]
        logger.info("Discovered %d test files", len(tests))
        return tests

    def generate_test_file(self, name: str = "test_generated.py") -> str:
        """Generate a simple passing test file for evaluation."""
        path = self.test_dir / name
        path.parent.mkdir(parents=True, exist_ok=True)
        path.write_text("import pytest\n\n\ndef test_placeholder():\n    assert True\n")
        self.generated_tests.append(str(path))
        logger.info("Generated test file: %s", path)
        return str(path)

    def generate_tests_for_file(self, source_file: str, test_framework: str = "pytest") -> str:
        """Create a placeholder test module for a given source file."""
        source_path = Path(source_file)
        if not source_path.exists():
            logger.error("Source file not found: %s", source_file)
            return ""

        test_file = self.test_dir / f"test_{source_path.stem}.py"
        test_file.parent.mkdir(parents=True, exist_ok=True)
        test_file.write_text(self._generate_test_content(test_framework))
        self.generated_tests.append(str(test_file))
        logger.info("Generated test file: %s", test_file)
        return str(test_file)

    def _generate_test_content(self, test_framework: str) -> str:
        """Return placeholder test content for the specified framework."""
        return f'''"""Auto-generated tests
Generated by DatasetPreparer
Framework: {test_framework}
"""

import pytest


class TestGenerated:
    def test_placeholder(self):
        assert True
'''
