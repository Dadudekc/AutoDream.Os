V2 LOC Refactor Plan
==================================================

SUMMARY:
Files analyzed: 771
Total violations: 695

CRITICAL Syntax errors: 3
CRITICAL File LOC violations: 102
MAJOR Class LOC violations: 321
MINOR Function LOC violations: 269

REFACTOR ACTIONS:

FUNCTION demo_health_monitoring_system.py:28:
  Function 'demo_health_monitoring': 106 LOC (limit: 50)
  Excess: 56 LOC
  Recommendation: Split into smaller functions

ERROR error_handling_demo.py:
  Parse error

FILE performance_benchmark.py:
  File: 426 LOC (limit: 400)
  Excess: 26 LOC
  Suggested splits:
    - performance_benchmark_core.py - Core classes: PerformanceBenchmark
    - performance_benchmark_utils.py - Utility functions: main, __init__, setup_test_data
    - performance_benchmark_types.py - Type definitions and imports

CLASS performance_benchmark.py:29:
  Class 'PerformanceBenchmark': 343 LOC (limit: 100)
  Excess: 243 LOC
  Suggested splits:
    - PerformanceBenchmarkCore - Core methods: setup_test_data, benchmark_database_performance, benchmark_memory_usage, benchmark_api_simulation, benchmark_cache_performance
    - PerformanceBenchmarkUtils - Utility methods: run_full_benchmark, print_results, simulate_api_call

FUNCTION performance_benchmark.py:55:
  Function 'benchmark_database_performance': 71 LOC (limit: 50)
  Excess: 21 LOC
  Recommendation: Split into smaller functions

FUNCTION performance_benchmark.py:127:
  Function 'benchmark_memory_usage': 51 LOC (limit: 50)
  Excess: 1 LOC
  Recommendation: Split into smaller functions

FUNCTION performance_benchmark.py:179:
  Function 'benchmark_api_simulation': 60 LOC (limit: 50)
  Excess: 10 LOC
  Recommendation: Split into smaller functions

FUNCTION performance_benchmark.py:240:
  Function 'benchmark_cache_performance': 52 LOC (limit: 50)
  Excess: 2 LOC
  Recommendation: Split into smaller functions

FUNCTION performance_benchmark.py:312:
  Function 'print_results': 60 LOC (limit: 50)
  Excess: 10 LOC
  Recommendation: Split into smaller functions

FUNCTION simple_performance_test.py:22:
  Function 'test_performance_optimizations': 87 LOC (limit: 50)
  Excess: 37 LOC
  Recommendation: Split into smaller functions

CLASS test_hard_onboarding.py:29:
  Class 'HardOnboardingTester': 218 LOC (limit: 100)
  Excess: 118 LOC
  Suggested splits:
    - HardOnboardingTesterCore - Core methods: log_test_result, test_hard_onboarding_flag_parsing, test_hard_onboarding_validation, test_role_assignment_parsing, test_onboarding_handler_integration
    - HardOnboardingTesterUtils - Utility methods: test_dry_run_mode, run_all_tests

FUNCTION create_cleanup_messages.py:7:
  Function 'create_cleanup_messages': 72 LOC (limit: 50)
  Excess: 22 LOC
  Recommendation: Split into smaller functions

CLASS validate_contract_system.py:17:
  Class 'ContractSystemValidator': 212 LOC (limit: 100)
  Excess: 112 LOC
  Suggested splits:
    - ContractSystemValidatorCore - Core methods: validate_contract_system
    - ContractSystemValidatorUtils - Utility methods:

FUNCTION test_a2a_format.py:11:
  Function 'test_a2a_format': 51 LOC (limit: 50)
  Excess: 1 LOC
  Recommendation: Split into smaller functions

FILE agent5_consolidation_coordination_manager.py:
  File: 464 LOC (limit: 400)
  Excess: 64 LOC
  Suggested splits:
    - agent5_consolidation_coordination_manager_core.py - Core classes: Agent5ConsolidationCoordinationManager
    - agent5_consolidation_coordination_manager_utils.py - Utility functions: main, __init__, initialize_consolidation_coordination
    - agent5_consolidation_coordination_manager_types.py - Type definitions and imports

CLASS agent5_consolidation_coordination_manager.py:32:
  Class 'Agent5ConsolidationCoordinationManager': 404 LOC (limit: 100)
  Excess: 304 LOC
  Suggested splits:
    - Agent5ConsolidationCoordinationManagerCore - Core methods: initialize_consolidation_coordination, coordinate_consolidation_chunks, monitor_consolidation_progress, track_business_value, coordinate_agent_communication
    - Agent5ConsolidationCoordinationManagerUtils - Utility methods: generate_coordination_report, save_coordination_status, execute_consolidation_coordination

FUNCTION agent5_consolidation_coordination_manager.py:35:
  Function '__init__': 75 LOC (limit: 50)
  Excess: 25 LOC
  Recommendation: Split into smaller functions

FUNCTION agent5_consolidation_coordination_manager.py:158:
  Function 'monitor_consolidation_progress': 53 LOC (limit: 50)
  Excess: 3 LOC
  Recommendation: Split into smaller functions

FUNCTION agent5_consolidation_coordination_manager.py:212:
  Function 'track_business_value': 55 LOC (limit: 50)
  Excess: 5 LOC
  Recommendation: Split into smaller functions

FUNCTION agent5_consolidation_coordination_manager.py:303:
  Function 'generate_coordination_report': 54 LOC (limit: 50)
  Excess: 4 LOC
  Recommendation: Split into smaller functions

FUNCTION agent5_consolidation_coordination_manager.py:377:
  Function 'execute_consolidation_coordination': 59 LOC (limit: 50)
  Excess: 9 LOC
  Recommendation: Split into smaller functions

CLASS agent5_consolidation_execution.py:29:
  Class 'Agent5ConsolidationExecutor': 204 LOC (limit: 100)
  Excess: 104 LOC
  Suggested splits:
    - Agent5ConsolidationExecutorCore - Core methods: execute_core_consolidation_validation, execute_business_intelligence_analysis, execute_consolidation_coordination, create_agent5_status_report, execute_consolidation_system
    - Agent5ConsolidationExecutorUtils - Utility methods:

FUNCTION agent5_consolidation_execution.py:114:
  Function 'create_agent5_status_report': 56 LOC (limit: 50)
  Excess: 6 LOC
  Recommendation: Split into smaller functions

FUNCTION agent5_consolidation_execution.py:171:
  Function 'execute_consolidation_system': 62 LOC (limit: 50)
  Excess: 12 LOC
  Recommendation: Split into smaller functions

FILE agent5_core_consolidation_validator.py:
  File: 517 LOC (limit: 400)
  Excess: 117 LOC
  Suggested splits:
    - agent5_core_consolidation_validator_core.py - Core classes: Agent5CoreConsolidationValidator
    - agent5_core_consolidation_validator_utils.py - Utility functions: main, __init__, validate_messaging_system_consolidation
    - agent5_core_consolidation_validator_types.py - Type definitions and imports

CLASS agent5_core_consolidation_validator.py:33:
  Class 'Agent5CoreConsolidationValidator': 456 LOC (limit: 100)
  Excess: 356 LOC
  Suggested splits:
    - Agent5CoreConsolidationValidatorCore - Core methods: validate_messaging_system_consolidation, validate_analytics_engine_consolidation, validate_configuration_system_consolidation, validate_business_value_preservation, validate_system_performance
    - Agent5CoreConsolidationValidatorUtils - Utility methods: calculate_consolidation_metrics, generate_consolidation_report, generate_recommendations, execute_consolidation_validation

FUNCTION agent5_core_consolidation_validator.py:76:
  Function 'validate_messaging_system_consolidation': 51 LOC (limit: 50)
  Excess: 1 LOC
  Recommendation: Split into smaller functions

FUNCTION agent5_core_consolidation_validator.py:172:
  Function 'validate_configuration_system_consolidation': 51 LOC (limit: 50)
  Excess: 1 LOC
  Recommendation: Split into smaller functions

FUNCTION agent5_core_consolidation_validator.py:324:
  Function 'generate_consolidation_report': 70 LOC (limit: 50)
  Excess: 20 LOC
  Recommendation: Split into smaller functions

FUNCTION agent5_core_consolidation_validator.py:430:
  Function 'execute_consolidation_validation': 59 LOC (limit: 50)
  Excess: 9 LOC
  Recommendation: Split into smaller functions

FILE agent5_core_modules_coordinator.py:
  File: 434 LOC (limit: 400)
  Excess: 34 LOC
  Suggested splits:
    - agent5_core_modules_coordinator_core.py - Core classes: Agent5CoreModulesCoordinator
    - agent5_core_modules_coordinator_utils.py - Utility functions: main, __init__, analyze_core_modules_structure
    - agent5_core_modules_coordinator_types.py - Type definitions and imports

CLASS agent5_core_modules_coordinator.py:29:
  Class 'Agent5CoreModulesCoordinator': 377 LOC (limit: 100)
  Excess: 277 LOC
  Suggested splits:
    - Agent5CoreModulesCoordinatorCore - Core methods: analyze_core_modules_structure, coordinate_messaging_consolidation, coordinate_analytics_consolidation, coordinate_configuration_consolidation, calculate_business_metrics
    - Agent5CoreModulesCoordinatorUtils - Utility methods: generate_coordination_report, generate_recommendations, execute_core_modules_coordination

FUNCTION agent5_core_modules_coordinator.py:345:
  Function 'execute_core_modules_coordination': 61 LOC (limit: 50)
  Excess: 11 LOC
  Recommendation: Split into smaller functions

FILE agent5_core_modules_validator.py:
  File: 609 LOC (limit: 400)
  Excess: 209 LOC
  Suggested splits:
    - agent5_core_modules_validator_core.py - Core classes: Agent5CoreModulesValidator
    - agent5_core_modules_validator_utils.py - Utility functions: main, __init__, validate_messaging_system_consolidation
    - agent5_core_modules_validator_types.py - Type definitions and imports

CLASS agent5_core_modules_validator.py:29:
  Class 'Agent5CoreModulesValidator': 552 LOC (limit: 100)
  Excess: 452 LOC
  Suggested splits:
    - Agent5CoreModulesValidatorCore - Core methods: validate_messaging_system_consolidation, validate_analytics_engine_consolidation, validate_configuration_system_consolidation, validate_coordination_system_consolidation, validate_engine_system_consolidation
    - Agent5CoreModulesValidatorUtils - Utility methods: validate_system_performance, generate_validation_report, generate_recommendations, execute_comprehensive_validation

FUNCTION agent5_core_modules_validator.py:32:
  Function '__init__': 63 LOC (limit: 50)
  Excess: 13 LOC
  Recommendation: Split into smaller functions

FUNCTION agent5_core_modules_validator.py:96:
  Function 'validate_messaging_system_consolidation': 56 LOC (limit: 50)
  Excess: 6 LOC
  Recommendation: Split into smaller functions

FUNCTION agent5_core_modules_validator.py:153:
  Function 'validate_analytics_engine_consolidation': 61 LOC (limit: 50)
  Excess: 11 LOC
  Recommendation: Split into smaller functions

FUNCTION agent5_core_modules_validator.py:262:
  Function 'validate_coordination_system_consolidation': 54 LOC (limit: 50)
  Excess: 4 LOC
  Recommendation: Split into smaller functions

FUNCTION agent5_core_modules_validator.py:317:
  Function 'validate_engine_system_consolidation': 53 LOC (limit: 50)
  Excess: 3 LOC
  Recommendation: Split into smaller functions

FUNCTION agent5_core_modules_validator.py:410:
  Function 'generate_validation_report': 66 LOC (limit: 50)
  Excess: 16 LOC
  Recommendation: Split into smaller functions

FUNCTION agent5_core_modules_validator.py:518:
  Function 'execute_comprehensive_validation': 63 LOC (limit: 50)
  Excess: 13 LOC
  Recommendation: Split into smaller functions

FILE agent6_documentation_consolidator.py:
  File: 466 LOC (limit: 400)
  Excess: 66 LOC
  Suggested splits:
    - agent6_documentation_consolidator_core.py - Core classes: Agent6DocumentationConsolidator
    - agent6_documentation_consolidator_utils.py - Utility functions: main, __init__, initialize_documentation_map
    - agent6_documentation_consolidator_types.py - Type definitions and imports

CLASS agent6_documentation_consolidator.py:32:
  Class 'Agent6DocumentationConsolidator': 406 LOC (limit: 100)
  Excess: 306 LOC
  Suggested splits:
    - Agent6DocumentationConsolidatorCore - Core methods: initialize_documentation_map, create_api_documentation, generate_api_documentation_content, update_existing_documentation, apply_consolidation_changes
    - Agent6DocumentationConsolidatorUtils - Utility methods: create_consolidation_summary, execute_documentation_consolidation

FUNCTION agent6_documentation_consolidator.py:41:
  Function 'initialize_documentation_map': 116 LOC (limit: 50)
  Excess: 66 LOC
  Recommendation: Split into smaller functions

FUNCTION agent6_documentation_consolidator.py:182:
  Function 'generate_api_documentation_content': 104 LOC (limit: 50)
  Excess: 54 LOC
  Recommendation: Split into smaller functions

FILE agent6_web_interface_coordinator.py:
  File: 467 LOC (limit: 400)
  Excess: 67 LOC
  Suggested splits:
    - agent6_web_interface_coordinator_core.py - Core classes: Agent6WebInterfaceCoordinator
    - agent6_web_interface_coordinator_utils.py - Utility functions: main, __init__, initialize_web_interface_map
    - agent6_web_interface_coordinator_types.py - Type definitions and imports

CLASS agent6_web_interface_coordinator.py:32:
  Class 'Agent6WebInterfaceCoordinator': 407 LOC (limit: 100)
  Excess: 307 LOC
  Suggested splits:
    - Agent6WebInterfaceCoordinatorCore - Core methods: initialize_web_interface_map, analyze_static_assets, create_web_interface_documentation, generate_web_interface_documentation_content, validate_web_interface_functionality
    - Agent6WebInterfaceCoordinatorUtils - Utility methods: create_web_interface_summary, execute_web_interface_coordination

FUNCTION agent6_web_interface_coordinator.py:81:
  Function 'analyze_static_assets': 57 LOC (limit: 50)
  Excess: 7 LOC
  Recommendation: Split into smaller functions

FUNCTION agent6_web_interface_coordinator.py:165:
  Function 'generate_web_interface_documentation_content': 109 LOC (limit: 50)
  Excess: 59 LOC
  Recommendation: Split into smaller functions

FUNCTION agent6_web_interface_coordinator.py:275:
  Function 'validate_web_interface_functionality': 65 LOC (limit: 50)
  Excess: 15 LOC
  Recommendation: Split into smaller functions

FUNCTION agent6_web_interface_coordinator.py:382:
  Function 'execute_web_interface_coordination': 57 LOC (limit: 50)
  Excess: 7 LOC
  Recommendation: Split into smaller functions

FILE comprehensive_project_analyzer.py:
  File: 670 LOC (limit: 400)
  Excess: 270 LOC
  Suggested splits:
    - comprehensive_project_analyzer_core.py - Core classes: ProjectAnalyzer
    - comprehensive_project_analyzer_utils.py - Utility functions: main, __init__, analyze_python_file
    - comprehensive_project_analyzer_types.py - Type definitions and imports

CLASS comprehensive_project_analyzer.py:17:
  Class 'ProjectAnalyzer': 623 LOC (limit: 100)
  Excess: 523 LOC
  Suggested splits:
    - ProjectAnalyzerCore - Core methods: analyze_python_file, analyze_js_file, analyze_md_file, analyze_yaml_file, analyze_file
    - ProjectAnalyzerUtils - Utility methods: get_project_structure, analyze_directory_chunk, identify_consolidation_opportunity, get_consolidation_reason, get_consolidation_priority

FUNCTION comprehensive_project_analyzer.py:27:
  Function 'analyze_python_file': 98 LOC (limit: 50)
  Excess: 48 LOC
  Recommendation: Split into smaller functions

FUNCTION comprehensive_project_analyzer.py:126:
  Function 'analyze_js_file': 65 LOC (limit: 50)
  Excess: 15 LOC
  Recommendation: Split into smaller functions

FUNCTION comprehensive_project_analyzer.py:192:
  Function 'analyze_md_file': 55 LOC (limit: 50)
  Excess: 5 LOC
  Recommendation: Split into smaller functions

FUNCTION comprehensive_project_analyzer.py:355:
  Function 'analyze_directory_chunk': 89 LOC (limit: 50)
  Excess: 39 LOC
  Recommendation: Split into smaller functions

FUNCTION comprehensive_project_analyzer.py:489:
  Function 'generate_chunk_reports': 59 LOC (limit: 50)
  Excess: 9 LOC
  Recommendation: Split into smaller functions

FUNCTION comprehensive_project_analyzer.py:549:
  Function 'generate_consolidation_summary': 91 LOC (limit: 50)
  Excess: 41 LOC
  Recommendation: Split into smaller functions

FUNCTION operational_quality_analysis.py:15:
  Function 'analyze_code_quality': 218 LOC (limit: 50)
  Excess: 168 LOC
  Recommendation: Split into smaller functions

FUNCTION test_message_queue_pyautogui_integration.py:35:
  Function 'test_message_queue_pyautogui_integration': 141 LOC (limit: 50)
  Excess: 91 LOC
  Recommendation: Split into smaller functions

FUNCTION test_backwards_compatibility.py:19:
  Function 'test_backwards_compatibility': 90 LOC (limit: 50)
  Excess: 40 LOC
  Recommendation: Split into smaller functions

CLASS trading_robot\backtesting\backtester.py:95:
  Class 'Backtester': 205 LOC (limit: 100)
  Excess: 105 LOC
  Suggested splits:
    - BacktesterCore - Core methods: run_backtest, run_walk_forward_optimization
    - BacktesterUtils - Utility methods:

FUNCTION trading_robot\backtesting\backtester.py:106:
  Function 'run_backtest': 62 LOC (limit: 50)
  Excess: 12 LOC
  Recommendation: Split into smaller functions

FUNCTION trading_robot\backtesting\backtester.py:169:
  Function '_execute_trade': 61 LOC (limit: 50)
  Excess: 11 LOC
  Recommendation: Split into smaller functions

CLASS trading_robot\core\alpaca_client.py:14:
  Class 'AlpacaClient': 236 LOC (limit: 100)
  Excess: 136 LOC
  Suggested splits:
    - AlpacaClientCore - Core methods: connect, is_connected, get_account_info, get_positions, get_orders
    - AlpacaClientUtils - Utility methods: get_historical_data, submit_market_order, submit_limit_order, cancel_order, get_market_clock

FUNCTION trading_robot\core\alpaca_client.py:112:
  Function 'get_historical_data': 51 LOC (limit: 50)
  Excess: 1 LOC
  Recommendation: Split into smaller functions

CLASS trading_robot\core\risk_manager.py:12:
  Class 'RiskManager': 263 LOC (limit: 100)
  Excess: 163 LOC
  Suggested splits:
    - RiskManagerCore - Core methods: validate_trade, calculate_position_size, update_portfolio_value, record_trade, get_portfolio_risk_metrics
    - RiskManagerUtils - Utility methods: check_market_hours, calculate_stop_loss_price, calculate_take_profit_price, reset_daily_counters, get_risk_report

CLASS trading_robot\core\trading_engine.py:12:
  Class 'TradingEngine': 246 LOC (limit: 100)
  Excess: 146 LOC
  Suggested splits:
    - TradingEngineCore - Core methods: is_market_open, can_trade_symbol
    - TradingEngineUtils - Utility methods:

CLASS trading_robot\execution\live_executor.py:16:
  Class 'LiveExecutor': 311 LOC (limit: 100)
  Excess: 211 LOC
  Suggested splits:
    - LiveExecutorCore - Core methods: add_symbol, remove_symbol, get_trading_symbols, get_executor_status
    - LiveExecutorUtils - Utility methods:

FUNCTION trading_robot\execution\live_executor.py:127:
  Function '_execute_signal': 56 LOC (limit: 50)
  Excess: 6 LOC
  Recommendation: Split into smaller functions

CLASS trading_robot\strategies\indicators.py:9:
  Class 'TechnicalIndicators': 187 LOC (limit: 100)
  Excess: 87 LOC
  Suggested splits:
    - TechnicalIndicatorsCore - Core methods: sma, ema, rsi, macd, bollinger_bands
    - TechnicalIndicatorsUtils - Utility methods: stochastic_oscillator, atr, williams_r, cci, momentum

FILE trading_robot\web\dashboard.py:
  File: 409 LOC (limit: 400)
  Excess: 9 LOC
  Suggested splits:
    - dashboard_core.py - Core classes: TradingDashboard
    - dashboard_utils.py - Utility functions: create_templates, __init__, _setup_routes
    - dashboard_types.py - Type definitions and imports

CLASS trading_robot\web\dashboard.py:17:
  Class 'TradingDashboard': 180 LOC (limit: 100)
  Excess: 80 LOC
  Suggested splits:
    - TradingDashboardCore - Core methods:
    - TradingDashboardUtils - Utility methods:

FUNCTION trading_robot\web\dashboard.py:30:
  Function '_setup_routes': 96 LOC (limit: 50)
  Excess: 46 LOC
  Recommendation: Split into smaller functions

CLASS consolidation_tasks\agent2_service_simplification.py:18:
  Class 'ServiceSimplificationAgent': 159 LOC (limit: 100)
  Excess: 59 LOC
  Suggested splits:
    - ServiceSimplificationAgentCore - Core methods: consolidate_integration_coordinators, consolidate_ml_optimizer, create_backup, run_consolidation
    - ServiceSimplificationAgentUtils - Utility methods:

FUNCTION consolidation_tasks\agent2_service_simplification.py:26:
  Function 'consolidate_integration_coordinators': 58 LOC (limit: 50)
  Excess: 8 LOC
  Recommendation: Split into smaller functions

FUNCTION consolidation_tasks\agent2_service_simplification.py:85:
  Function 'consolidate_ml_optimizer': 62 LOC (limit: 50)
  Excess: 12 LOC
  Recommendation: Split into smaller functions

FILE consolidation_tasks\agent1_core_consolidation.py:
  File: 428 LOC (limit: 400)
  Excess: 28 LOC
  Suggested splits:
    - agent1_core_consolidation_core.py - Core classes: CoreConsolidationAgent
    - agent1_core_consolidation_utils.py - Utility functions: __init__, create_backup, consolidate_managers_directory
    - agent1_core_consolidation_types.py - Type definitions and imports

CLASS consolidation_tasks\agent1_core_consolidation.py:18:
  Class 'CoreConsolidationAgent': 406 LOC (limit: 100)
  Excess: 306 LOC
  Suggested splits:
    - CoreConsolidationAgentCore - Core methods: create_backup, consolidate_managers_directory, extract_essential_functions, generate_consolidated_managers, consolidate_analytics_directory
    - CoreConsolidationAgentUtils - Utility methods: run_consolidation, rollback_changes, restore_from_backup, validate_rollback

FUNCTION consolidation_tasks\agent1_core_consolidation.py:98:
  Function 'generate_consolidated_managers': 68 LOC (limit: 50)
  Excess: 18 LOC
  Recommendation: Split into smaller functions

FUNCTION consolidation_tasks\agent1_core_consolidation.py:167:
  Function '_generate_consolidated_function': 115 LOC (limit: 50)
  Excess: 65 LOC
  Recommendation: Split into smaller functions

FUNCTION consolidation_tasks\agent1_core_consolidation.py:283:
  Function 'consolidate_analytics_directory': 52 LOC (limit: 50)
  Excess: 2 LOC
  Recommendation: Split into smaller functions

FUNCTION templates\onboarding_roles.py:26:
  Function 'build_role_message': 76 LOC (limit: 50)
  Excess: 26 LOC
  Recommendation: Split into smaller functions

FUNCTION templates\onboarding_roles.py:104:
  Function 'f_get_role_specific_tasks': 100 LOC (limit: 50)
  Excess: 50 LOC
  Recommendation: Split into smaller functions

FILE src\web\simple_monitoring_dashboard.py:
  File: 548 LOC (limit: 400)
  Excess: 148 LOC
  Suggested splits:
    - simple_monitoring_dashboard_core.py - Core classes: SwarmMonitoringHandler, SimpleSwarmDashboard
    - simple_monitoring_dashboard_utils.py - Utility functions: __init__, do_GET, serve_dashboard
    - simple_monitoring_dashboard_types.py - Type definitions and imports

CLASS src\web\simple_monitoring_dashboard.py:17:
  Class 'SwarmMonitoringHandler': 481 LOC (limit: 100)
  Excess: 381 LOC
  Suggested splits:
    - SwarmMonitoringHandlerCore - Core methods: do_GET, serve_dashboard, serve_agents_status, serve_system_status, serve_consolidation_progress
    - SwarmMonitoringHandlerUtils - Utility methods: serve_static_file, send_json_response, get_agents_status, calculate_consolidation_progress, generate_dashboard_html

FUNCTION src\web\simple_monitoring_dashboard.py:98:
  Function 'get_agents_status': 51 LOC (limit: 50)
  Excess: 1 LOC
  Recommendation: Split into smaller functions

FUNCTION src\web\simple_monitoring_dashboard.py:188:
  Function 'generate_dashboard_html': 306 LOC (limit: 50)
  Excess: 256 LOC
  Recommendation: Split into smaller functions

FILE src\web\swarm_monitoring_dashboard.py:
  File: 996 LOC (limit: 400)
  Excess: 596 LOC
  Suggested splits:
    - swarm_monitoring_dashboard_core.py - Core classes: AgentStatus, Alert
    - swarm_monitoring_dashboard_utils.py - Utility functions: __init__, _setup_routes, _get_all_agents_status
    - swarm_monitoring_dashboard_types.py - Type definitions and imports

CLASS src\web\swarm_monitoring_dashboard.py:79:
  Class 'SwarmMonitoringDashboard': 913 LOC (limit: 100)
  Excess: 813 LOC
  Suggested splits:
    - SwarmMonitoringDashboardCore - Core methods: start_monitoring, stop_monitoring, create_html_template, run
    - SwarmMonitoringDashboardUtils - Utility methods:

FUNCTION src\web\swarm_monitoring_dashboard.py:123:
  Function '_setup_routes': 106 LOC (limit: 50)
  Excess: 56 LOC
  Recommendation: Split into smaller functions

FUNCTION src\web\swarm_monitoring_dashboard.py:230:
  Function '_get_all_agents_status': 58 LOC (limit: 50)
  Excess: 8 LOC
  Recommendation: Split into smaller functions

FUNCTION src\web\swarm_monitoring_dashboard.py:476:
  Function 'create_html_template': 496 LOC (limit: 50)
  Excess: 446 LOC
  Recommendation: Split into smaller functions

FILE src\web\analytics_dashboard.py:
  File: 876 LOC (limit: 400)
  Excess: 476 LOC
  Suggested splits:
    - analytics_dashboard_core.py - Core classes: AnalyticsDashboardWeb
    - analytics_dashboard_utils.py - Utility functions: main, __init__, _setup_routes
    - analytics_dashboard_types.py - Type definitions and imports

CLASS src\web\analytics_dashboard.py:30:
  Class 'AnalyticsDashboardWeb': 825 LOC (limit: 100)
  Excess: 725 LOC
  Suggested splits:
    - AnalyticsDashboardWebCore - Core methods: start, create_default_templates
    - AnalyticsDashboardWebUtils - Utility methods:

FUNCTION src\web\analytics_dashboard.py:45:
  Function '_setup_routes': 96 LOC (limit: 50)
  Excess: 46 LOC
  Recommendation: Split into smaller functions

FUNCTION src\web\analytics_dashboard.py:153:
  Function 'create_default_templates': 702 LOC (limit: 50)
  Excess: 652 LOC
  Recommendation: Split into smaller functions

FUNCTION src\web\vector_database\search_utils.py:17:
  Function 'simulate_vector_search': 53 LOC (limit: 50)
  Excess: 3 LOC
  Recommendation: Split into smaller functions

CLASS src\web\vector_database\document_utils.py:17:
  Class 'DocumentUtils': 101 LOC (limit: 100)
  Excess: 1 LOC
  Suggested splits:
    - DocumentUtilsCore - Core methods: simulate_get_documents, simulate_add_document, simulate_get_document, simulate_update_document, simulate_delete_document
    - DocumentUtilsUtils - Utility methods:

FUNCTION src\web\vector_database\document_utils.py:20:
  Function 'simulate_get_documents': 55 LOC (limit: 50)
  Excess: 5 LOC
  Recommendation: Split into smaller functions

FUNCTION src\services\message_identity_clarification.py:22:
  Function 'format_message_with_identity_clarification': 51 LOC (limit: 50)
  Excess: 1 LOC
  Recommendation: Split into smaller functions

CLASS src\services\agent_vector_integration_core.py:13:
  Class 'AgentVectorIntegrationCore': 121 LOC (limit: 100)
  Excess: 21 LOC
  Suggested splits:
    - AgentVectorIntegrationCoreCore - Core methods: get_agent_context, get_task_recommendations, store_agent_knowledge, search_agent_patterns, get_agent_status
    - AgentVectorIntegrationCoreUtils - Utility methods:

CLASS src\services\architectural_principles.py:14:
  Class 'PrincipleDefinitions': 269 LOC (limit: 100)
  Excess: 169 LOC
  Suggested splits:
    - PrincipleDefinitionsCore - Core methods: get_all_principles
    - PrincipleDefinitionsUtils - Utility methods:

FUNCTION src\services\architectural_principles.py:18:
  Function 'get_all_principles': 265 LOC (limit: 50)
  Excess: 215 LOC
  Recommendation: Split into smaller functions

FILE src\services\swarm_intelligence_manager.py:
  File: 596 LOC (limit: 400)
  Excess: 196 LOC
  Suggested splits:
    - swarm_intelligence_manager_core.py - Core classes: SwarmIntelligenceManager
    - swarm_intelligence_manager_utils.py - Utility functions: __init__, _load_config, get_swarm_intelligence
    - swarm_intelligence_manager_types.py - Type definitions and imports

CLASS src\services\swarm_intelligence_manager.py:19:
  Class 'SwarmIntelligenceManager': 578 LOC (limit: 100)
  Excess: 478 LOC
  Suggested splits:
    - SwarmIntelligenceManagerCore - Core methods: get_swarm_intelligence, sync_with_swarm
    - SwarmIntelligenceManagerUtils - Utility methods:

CLASS src\services\agent_status_manager.py:20:
  Class 'AgentStatusManager': 139 LOC (limit: 100)
  Excess: 39 LOC
  Suggested splits:
    - AgentStatusManagerCore - Core methods: get_agent_status, get_integration_stats
    - AgentStatusManagerUtils - Utility methods:

CLASS src\services\command_handler_module.py:16:
  Class 'CommandHandler': 113 LOC (limit: 100)
  Excess: 13 LOC
  Suggested splits:
    - CommandHandlerCore - Core methods: process_command, get_agent_status, assign_task_to_agent, coordinate_with_agent, create_task
    - CommandHandlerUtils - Utility methods: update_task, complete_task, get_system_status, restart_system_component, check_system_health

CLASS src\services\compliance_validator.py:14:
  Class 'ComplianceValidator': 105 LOC (limit: 100)
  Excess: 5 LOC
  Suggested splits:
    - ComplianceValidatorCore - Core methods: validate_agent_compliance
    - ComplianceValidatorUtils - Utility methods:

CLASS src\services\consolidated_agent_management_service.py:33:
  Class 'ConsolidatedAgentManagementService': 292 LOC (limit: 100)
  Excess: 192 LOC
  Suggested splits:
    - ConsolidatedAgentManagementServiceCore - Core methods: get_agent_principle, assign_principle, get_all_assignments, get_agents_by_principle, get_agent_status
    - ConsolidatedAgentManagementServiceUtils - Utility methods: get_integration_stats, index_agent_work, search_agent_work, get_agent_context, get_agent_config

FILE src\services\consolidated_architectural_service.py:
  File: 630 LOC (limit: 400)
  Excess: 230 LOC
  Suggested splits:
    - consolidated_architectural_service_core.py - Core classes: AgentAssignmentManager, ArchitecturalPrinciple
    - consolidated_architectural_service_utils.py - Utility functions: __init__, get_all_principles, __init__
    - consolidated_architectural_service_types.py - Type definitions and imports

CLASS src\services\consolidated_architectural_service.py:89:
  Class 'PrincipleDefinitions': 269 LOC (limit: 100)
  Excess: 169 LOC
  Suggested splits:
    - PrincipleDefinitionsCore - Core methods: get_all_principles
    - PrincipleDefinitionsUtils - Utility methods:

CLASS src\services\consolidated_architectural_service.py:435:
  Class 'ConsolidatedArchitecturalService': 115 LOC (limit: 100)
  Excess: 15 LOC
  Suggested splits:
    - ConsolidatedArchitecturalServiceCore - Core methods: get_principle_guidance, get_all_principles, get_agent_principle, assign_principle, validate_agent_compliance
    - ConsolidatedArchitecturalServiceUtils - Utility methods: onboard_agent, get_agent_onboarding_status, generate_onboarding_message, get_comprehensive_principle_report, get_system_architecture_summary

FUNCTION src\services\consolidated_architectural_service.py:93:
  Function 'get_all_principles': 265 LOC (limit: 50)
  Excess: 215 LOC
  Recommendation: Split into smaller functions

FILE src\services\consolidated_coordination_service.py:
  File: 531 LOC (limit: 400)
  Excess: 131 LOC
  Suggested splits:
    - consolidated_coordination_service_core.py - Core classes: ConsolidatedCoordinationService
    - consolidated_coordination_service_utils.py - Utility functions: __init__, _initialize_coordination_rules, _initialize_routing_table
    - consolidated_coordination_service_types.py - Type definitions and imports

CLASS src\services\consolidated_coordination_service.py:32:
  Class 'ConsolidatedCoordinationService': 500 LOC (limit: 100)
  Excess: 400 LOC
  Suggested splits:
    - ConsolidatedCoordinationServiceCore - Core methods: determine_coordination_strategy, apply_coordination_rules, can_handle_command, get_status, get_name
    - ConsolidatedCoordinationServiceUtils - Utility methods: get_command_stats, process_message, process_bulk_messages, validate_message, determine_coordination_strategy

FUNCTION src\services\consolidated_coordination_service.py:132:
  Function 'process_command': 51 LOC (limit: 50)
  Excess: 1 LOC
  Recommendation: Split into smaller functions

FUNCTION src\services\consolidated_coordination_service.py:295:
  Function 'process_message': 74 LOC (limit: 50)
  Excess: 24 LOC
  Recommendation: Split into smaller functions

CLASS src\services\consolidated_debate_service.py:84:
  Class 'ConsolidatedDebateService': 261 LOC (limit: 100)
  Excess: 161 LOC
  Suggested splits:
    - ConsolidatedDebateServiceCore - Core methods: get_debate_status, invite_all_agents, notify_pending_agents, get_arguments_summary, save_debate_state
    - ConsolidatedDebateServiceUtils - Utility methods:

FUNCTION src\services\consolidated_debate_service.py:118:
  Function '_load_debate_data': 68 LOC (limit: 50)
  Excess: 18 LOC
  Recommendation: Split into smaller functions

CLASS src\services\consolidated_handler_service.py:28:
  Class 'ConsolidatedHandlerService': 113 LOC (limit: 100)
  Excess: 13 LOC
  Suggested splits:
    - ConsolidatedHandlerServiceCore - Core methods: can_handle_command, get_available_commands, get_command_help
    - ConsolidatedHandlerServiceUtils - Utility methods:

CLASS src\services\consolidated_miscellaneous_service.py:29:
  Class 'ConsolidatedMiscellaneousService': 187 LOC (limit: 100)
  Excess: 87 LOC
  Suggested splits:
    - ConsolidatedMiscellaneousServiceCore - Core methods: execute_query, get_agent_data, update_agent_data, get_learning_recommendations, get_task_recommendations
    - ConsolidatedMiscellaneousServiceUtils - Utility methods: generate_insights, create_task_context, get_task_context, update_task_context, index_work_item

CLASS src\services\consolidated_utility_service.py:28:
  Class 'ConsolidatedUtilityService': 337 LOC (limit: 100)
  Excess: 237 LOC
  Suggested splits:
    - ConsolidatedUtilityServiceCore - Core methods: list_agents, get_agent_info, get_agent_coordinates, get_agent_inbox, register_agent
    - ConsolidatedUtilityServiceUtils - Utility methods: record_performance_metric, get_performance_summary, analyze_performance_trends, get_performance_recommendations, validate_agent_compliance

CLASS src\services\consolidated_vector_service.py:36:
  Class 'ConsolidatedVectorService': 249 LOC (limit: 100)
  Excess: 149 LOC
  Suggested splits:
    - ConsolidatedVectorServiceCore - Core methods: generate_embeddings, add_document, search_documents, get_document, delete_document
    - ConsolidatedVectorServiceUtils - Utility methods: get_collection_stats, create_collection, delete_collection, list_collections, get_task_context

FILE src\services\handlers_orchestrator.py:
  File: 509 LOC (limit: 400)
  Excess: 109 LOC
  Suggested splits:
    - handlers_orchestrator_core.py - Core classes: HandlerType, HandlerPriority
    - handlers_orchestrator_utils.py - Utility functions: create_unified_handlers_orchestrator, __init__, _initialize_handlers
    - handlers_orchestrator_types.py - Type definitions and imports

CLASS src\services\handlers_orchestrator.py:87:
  Class 'UnifiedHandlersOrchestrator': 401 LOC (limit: 100)
  Excess: 301 LOC
  Suggested splits:
    - UnifiedHandlersOrchestratorCore - Core methods: process_request, submit_request, get_request_status, schedule_overnight_task, process_overnight_batch
    - UnifiedHandlersOrchestratorUtils - Utility methods: perform_overnight_maintenance, assign_task_to_agent, get_agent_status, update_agent_status, check_agent_health

CLASS src\services\learning_recommender.py:18:
  Class 'LearningRecommender': 192 LOC (limit: 100)
  Excess: 92 LOC
  Suggested splits:
    - LearningRecommenderCore - Core methods: get_learning_recommendations
    - LearningRecommenderUtils - Utility methods:

CLASS src\services\onboarding_service.py:21:
  Class 'OnboardingService': 133 LOC (limit: 100)
  Excess: 33 LOC
  Suggested splits:
    - OnboardingServiceCore - Core methods: generate_onboarding_message, get_service_status
    - OnboardingServiceUtils - Utility methods:

CLASS src\services\performance_analyzer.py:20:
  Class 'PerformanceAnalyzer': 353 LOC (limit: 100)
  Excess: 253 LOC
  Suggested splits:
    - PerformanceAnalyzerCore - Core methods: analyze_agent_performance, get_integration_health
    - PerformanceAnalyzerUtils - Utility methods:

CLASS src\services\recommendation_engine.py:19:
  Class 'RecommendationEngine': 203 LOC (limit: 100)
  Excess: 103 LOC
  Suggested splits:
    - RecommendationEngineCore - Core methods: get_agent_recommendations, optimize_workflow
    - RecommendationEngineUtils - Utility methods:

FILE src\services\simple_onboarding.py:
  File: 464 LOC (limit: 400)
  Excess: 64 LOC
  Suggested splits:
    - simple_onboarding_core.py - Core classes: SimpleOnboarding
    - simple_onboarding_utils.py - Utility functions: __init__, execute, _should_process_agent
    - simple_onboarding_types.py - Type definitions and imports

CLASS src\services\simple_onboarding.py:44:
  Class 'SimpleOnboarding': 421 LOC (limit: 100)
  Excess: 321 LOC
  Suggested splits:
    - SimpleOnboardingCore - Core methods: execute
    - SimpleOnboardingUtils - Utility methods:

FUNCTION src\services\simple_onboarding.py:232:
  Function '_onboard_agent': 65 LOC (limit: 50)
  Excess: 15 LOC
  Recommendation: Split into smaller functions

CLASS src\services\unified_vector_integration.py:52:
  Class 'UnifiedVectorIntegration': 157 LOC (limit: 100)
  Excess: 57 LOC
  Suggested splits:
    - UnifiedVectorIntegrationCore - Core methods:
    - UnifiedVectorIntegrationUtils - Utility methods:

CLASS src\services\work_indexer.py:19:
  Class 'WorkIndexer': 132 LOC (limit: 100)
  Excess: 32 LOC
  Suggested splits:
    - WorkIndexerCore - Core methods: index_agent_work, index_inbox_messages
    - WorkIndexerUtils - Utility methods:

FUNCTION src\services\work_indexer.py:36:
  Function 'index_agent_work': 54 LOC (limit: 50)
  Excess: 4 LOC
  Recommendation: Split into smaller functions

FUNCTION src\services\work_indexer.py:91:
  Function 'index_inbox_messages': 60 LOC (limit: 50)
  Excess: 10 LOC
  Recommendation: Split into smaller functions

FILE src\services\advanced_analytics_service.py:
  File: 840 LOC (limit: 400)
  Excess: 440 LOC
  Suggested splits:
    - advanced_analytics_service_core.py - Core classes: MetricDataPoint, AnalyticsResult
    - advanced_analytics_service_utils.py - Utility functions: get_analytics_service, __init__, collect_metric
    - advanced_analytics_service_types.py - Type definitions and imports

CLASS src\services\advanced_analytics_service.py:56:
  Class 'MetricsCollector': 109 LOC (limit: 100)
  Excess: 9 LOC
  Suggested splits:
    - MetricsCollectorCore - Core methods: collect_metric, get_metric_data, get_metric_stats, get_all_metric_names, get_collection_stats
    - MetricsCollectorUtils - Utility methods:

CLASS src\services\advanced_analytics_service.py:167:
  Class 'UsageAnalyticsEngine': 186 LOC (limit: 100)
  Excess: 86 LOC
  Suggested splits:
    - UsageAnalyticsEngineCore - Core methods: analyze_agent_usage, analyze_system_usage
    - UsageAnalyticsEngineUtils - Utility methods:

CLASS src\services\advanced_analytics_service.py:355:
  Class 'PerformanceDashboard': 199 LOC (limit: 100)
  Excess: 99 LOC
  Suggested splits:
    - PerformanceDashboardCore - Core methods: generate_dashboard_data
    - PerformanceDashboardUtils - Utility methods:

CLASS src\services\advanced_analytics_service.py:556:
  Class 'AutomatedReportingSystem': 164 LOC (limit: 100)
  Excess: 64 LOC
  Suggested splits:
    - AutomatedReportingSystemCore - Core methods: generate_business_intelligence_report
    - AutomatedReportingSystemUtils - Utility methods:

CLASS src\services\advanced_analytics_service.py:722:
  Class 'AdvancedAnalyticsService': 108 LOC (limit: 100)
  Excess: 8 LOC
  Suggested splits:
    - AdvancedAnalyticsServiceCore - Core methods: start, stop, get_dashboard_data, get_usage_analytics, generate_report
    - AdvancedAnalyticsServiceUtils - Utility methods: collect_custom_metric, get_metrics_stats, get_service_status

FUNCTION src\services\advanced_analytics_service.py:215:
  Function 'analyze_system_usage': 56 LOC (limit: 50)
  Excess: 6 LOC
  Recommendation: Split into smaller functions

FILE src\services\consolidated_messaging_service.py:
  File: 1641 LOC (limit: 400)
  Excess: 1241 LOC
  Suggested splits:
    - consolidated_messaging_service_core.py - Core classes: ConsolidatedMessagingService, DeliveryMethod
    - consolidated_messaging_service_utils.py - Utility functions: get_coordinate_loader, get_messaging_core, main
    - consolidated_messaging_service_types.py - Type definitions and imports

CLASS src\services\consolidated_messaging_service.py:499:
  Class 'ConsolidatedMessagingService': 1133 LOC (limit: 100)
  Excess: 1033 LOC
  Suggested splits:
    - ConsolidatedMessagingServiceCore - Core methods: load_coordinates_from_json, send_message_pyautogui, send_message_unified, broadcast_message_swarm, list_available_agents
    - ConsolidatedMessagingServiceUtils - Utility methods: show_message_history, run_cli_interface, broadcast_message, list_agents, show_message_history

FUNCTION src\services\consolidated_messaging_service.py:205:
  Function 'deliver_message_pyautogui': 55 LOC (limit: 50)
  Excess: 5 LOC
  Recommendation: Split into smaller functions

FUNCTION src\services\consolidated_messaging_service.py:312:
  Function 'send_message_inbox': 59 LOC (limit: 50)
  Excess: 9 LOC
  Recommendation: Split into smaller functions

FUNCTION src\services\consolidated_messaging_service.py:528:
  Function 'send_message_pyautogui': 78 LOC (limit: 50)
  Excess: 28 LOC
  Recommendation: Split into smaller functions

FUNCTION src\services\consolidated_messaging_service.py:683:
  Function 'run_cli_interface': 219 LOC (limit: 50)
  Excess: 169 LOC
  Recommendation: Split into smaller functions

FUNCTION src\services\consolidated_messaging_service.py:1045:
  Function 'handle_task_assistance': 53 LOC (limit: 50)
  Excess: 3 LOC
  Recommendation: Split into smaller functions

FUNCTION src\services\consolidated_messaging_service.py:1139:
  Function 'handle_thea_communication': 68 LOC (limit: 50)
  Excess: 18 LOC
  Recommendation: Split into smaller functions

FUNCTION src\services\consolidated_messaging_service.py:1208:
  Function 'show_current_coordinates': 63 LOC (limit: 50)
  Excess: 13 LOC
  Recommendation: Split into smaller functions

FUNCTION src\services\consolidated_messaging_service.py:1272:
  Function 'handle_claim_task': 56 LOC (limit: 50)
  Excess: 6 LOC
  Recommendation: Split into smaller functions

FUNCTION src\services\consolidated_messaging_service.py:1329:
  Function 'handle_complete_task': 76 LOC (limit: 50)
  Excess: 26 LOC
  Recommendation: Split into smaller functions

FUNCTION src\services\consolidated_messaging_service.py:1406:
  Function 'handle_hard_onboarding': 75 LOC (limit: 50)
  Excess: 25 LOC
  Recommendation: Split into smaller functions

FUNCTION src\services\consolidated_messaging_service.py:1482:
  Function '_get_next_available_task': 150 LOC (limit: 50)
  Excess: 100 LOC
  Recommendation: Split into smaller functions

FILE src\services\messaging_cli_refactored.py:
  File: 468 LOC (limit: 400)
  Excess: 68 LOC
  Suggested splits:
    - messaging_cli_refactored_core.py - Core classes: MessageCoordinator, MessagingCLI
    - messaging_cli_refactored_utils.py - Utility functions: main, send_to_agent, broadcast_to_all
    - messaging_cli_refactored_types.py - Type definitions and imports

CLASS src\services\messaging_cli_refactored.py:240:
  Class 'MessagingCLI': 216 LOC (limit: 100)
  Excess: 116 LOC
  Suggested splits:
    - MessagingCLICore - Core methods: execute
    - MessagingCLIUtils - Utility methods:

FUNCTION src\services\messaging_cli_refactored.py:246:
  Function '_create_parser': 82 LOC (limit: 50)
  Excess: 32 LOC
  Recommendation: Split into smaller functions

FILE src\services\unified_database_services.py:
  File: 553 LOC (limit: 400)
  Excess: 153 LOC
  Suggested splits:
    - unified_database_services_core.py - Core classes: DatabaseConnectionError, SQLQueryBuilder
    - unified_database_services_utils.py - Utility functions: create_unified_database_service, validate_table_name, __init__
    - unified_database_services_types.py - Type definitions and imports

CLASS src\services\unified_database_services.py:345:
  Class 'UnifiedDatabaseService': 181 LOC (limit: 100)
  Excess: 81 LOC
  Suggested splits:
    - UnifiedDatabaseServiceCore - Core methods: register_model, create_tables, insert, select, update
    - UnifiedDatabaseServiceUtils - Utility methods: delete, execute_raw_query, backup_database, get_stats, cleanup

CLASS src\services\coordination\stats_tracker.py:18:
  Class 'StatsTracker': 220 LOC (limit: 100)
  Excess: 120 LOC
  Suggested splits:
    - StatsTrackerCore - Core methods: update_coordination_stats, get_coordination_stats, get_detailed_stats, get_performance_summary, reset_stats
    - StatsTrackerUtils - Utility methods: get_tracker_status

FUNCTION src\services\coordination\stats_tracker.py:87:
  Function '_update_detailed_stats': 53 LOC (limit: 50)
  Excess: 3 LOC
  Recommendation: Split into smaller functions

CLASS src\services\coordination\bulk_coordinator.py:21:
  Class 'BulkCoordinator': 149 LOC (limit: 100)
  Excess: 49 LOC
  Suggested splits:
    - BulkCoordinatorCore - Core methods: coordinate_bulk_messages, coordinate_messages_by_priority, coordinate_messages_by_type, coordinate_messages_by_sender, get_bulk_coordinator_status
    - BulkCoordinatorUtils - Utility methods:

CLASS src\services\coordination\strategy_coordinator.py:24:
  Class 'StrategyCoordinator': 163 LOC (limit: 100)
  Excess: 63 LOC
  Suggested splits:
    - StrategyCoordinatorCore - Core methods: determine_coordination_strategy, apply_coordination_rules, get_coordination_rules, get_routing_table, update_coordination_rule
    - StrategyCoordinatorUtils - Utility methods: update_routing_config, get_coordinator_status

CLASS src\services\handlers\command_handler.py:19:
  Class 'CommandHandler': 145 LOC (limit: 100)
  Excess: 45 LOC
  Suggested splits:
    - CommandHandlerCore - Core methods: can_handle, get_command_statistics
    - CommandHandlerUtils - Utility methods:

CLASS src\services\handlers\onboarding_handler.py:37:
  Class 'OnboardingHandler': 207 LOC (limit: 100)
  Excess: 107 LOC
  Suggested splits:
    - OnboardingHandlerCore - Core methods: can_handle, handle, handle_onboarding_commands
    - OnboardingHandlerUtils - Utility methods:

FUNCTION src\services\handlers\onboarding_handler.py:103:
  Function '_handle_hard_onboarding': 141 LOC (limit: 50)
  Excess: 91 LOC
  Recommendation: Split into smaller functions

CLASS src\services\handlers\utility_handler.py:25:
  Class 'UtilityHandler': 180 LOC (limit: 100)
  Excess: 80 LOC
  Suggested splits:
    - UtilityHandlerCore - Core methods: check_status, list_agents, get_coordinates, get_history
    - UtilityHandlerUtils - Utility methods:

FUNCTION src\services\handlers\utility_handler.py:32:
  Function 'check_status': 55 LOC (limit: 50)
  Excess: 5 LOC
  Recommendation: Split into smaller functions

CLASS src\services\protocol\routers\route_analyzer.py:29:
  Class 'RouteAnalyzer': 160 LOC (limit: 100)
  Excess: 60 LOC
  Suggested splits:
    - RouteAnalyzerCore - Core methods: analyze_route_options, update_route_performance, get_route_performance_summary, get_route_usage_stats, clear_performance_data
    - RouteAnalyzerUtils - Utility methods: get_analyzer_status

FUNCTION src\services\protocol\routers\route_analyzer.py:86:
  Function '_calculate_route_score': 52 LOC (limit: 50)
  Excess: 2 LOC
  Recommendation: Split into smaller functions

CLASS src\services\thea\core\thea_communication_manager.py:23:
  Class 'TheaCommunicationManager': 232 LOC (limit: 100)
  Excess: 132 LOC
  Suggested splits:
    - TheaCommunicationManagerCore - Core methods: initialize, run_communication_cycle, create_response_analysis, send_quick_message, get_status
    - TheaCommunicationManagerUtils - Utility methods: cleanup

FUNCTION src\services\thea\core\thea_communication_manager.py:51:
  Function 'run_communication_cycle': 89 LOC (limit: 50)
  Excess: 39 LOC
  Recommendation: Split into smaller functions

CLASS src\services\thea\authentication\thea_authentication_service.py:162:
  Class 'TheaAuthenticationService': 109 LOC (limit: 100)
  Excess: 9 LOC
  Suggested splits:
    - TheaAuthenticationServiceCore - Core methods: ensure_authenticated, save_session_cookies, check_login_status, clear_authentication
    - TheaAuthenticationServiceUtils - Utility methods:

CLASS src\services\thea\browser\thea_browser_service.py:26:
  Class 'TheaBrowserService': 233 LOC (limit: 100)
  Excess: 133 LOC
  Suggested splits:
    - TheaBrowserServiceCore - Core methods: initialize_driver, navigate_to_thea, navigate_to_chatgpt, get_current_url, wait_for_element
    - TheaBrowserServiceUtils - Utility methods: find_input_field, send_message_to_input, get_cookies, add_cookies, refresh_page

CLASS src\services\thea\messaging\thea_messaging_service.py:32:
  Class 'TheaMessagingService': 138 LOC (limit: 100)
  Excess: 38 LOC
  Suggested splits:
    - TheaMessagingServiceCore - Core methods: send_message, wait_for_response, get_default_message, load_message_template
    - TheaMessagingServiceUtils - Utility methods:

CLASS src\services\thea\responses\thea_response_service.py:32:
  Class 'TheaResponseService': 204 LOC (limit: 100)
  Excess: 104 LOC
  Suggested splits:
    - TheaResponseServiceCore - Core methods: wait_for_response, capture_response
    - TheaResponseServiceUtils - Utility methods:

FUNCTION src\services\thea\responses\thea_response_service.py:170:
  Function '_create_conversation_log': 66 LOC (limit: 50)
  Excess: 16 LOC
  Recommendation: Split into smaller functions

CLASS src\services\thea\config\thea_config.py:19:
  Class 'TheaConfig': 110 LOC (limit: 100)
  Excess: 10 LOC
  Suggested splits:
    - TheaConfigCore - Core methods: from_env, from_args, to_dict
    - TheaConfigUtils - Utility methods:

FUNCTION src\services\messaging\cli.py:71:
  Function 'main': 67 LOC (limit: 50)
  Excess: 17 LOC
  Recommendation: Split into smaller functions

CLASS src\core\documentation_indexing_service.py:9:
  Class 'DocumentationIndexingService': 170 LOC (limit: 100)
  Excess: 70 LOC
  Suggested splits:
    - DocumentationIndexingServiceCore - Core methods: index_project_documentation, index_specific_files, index_directory, reindex_file, get_indexing_status
    - DocumentationIndexingServiceUtils - Utility methods:

FUNCTION src\core\documentation_indexing_service.py:26:
  Function 'index_project_documentation': 51 LOC (limit: 50)
  Excess: 1 LOC
  Recommendation: Split into smaller functions

CLASS src\core\search_history_service.py:9:
  Class 'SearchHistoryService': 150 LOC (limit: 100)
  Excess: 50 LOC
  Suggested splits:
    - SearchHistoryServiceCore - Core methods: add_search, get_search_suggestions, get_agent_search_history, clear_history, get_statistics
    - SearchHistoryServiceUtils - Utility methods:

FUNCTION src\core\search_history_service.py:47:
  Function 'get_search_suggestions': 60 LOC (limit: 50)
  Excess: 10 LOC
  Recommendation: Split into smaller functions

CLASS src\core\unified_import_system.py:20:
  Class 'UnifiedImportSystem': 242 LOC (limit: 100)
  Excess: 142 LOC
  Suggested splits:
    - UnifiedImportSystemCore - Core methods: os, sys, json, logging, threading
    - UnifiedImportSystemUtils - Utility methods: time, re, datetime, Path, Any

CLASS src\core\message_queue_pyautogui_integration.py:35:
  Class 'MessageQueuePyAutoGUIIntegration': 156 LOC (limit: 100)
  Excess: 56 LOC
  Suggested splits:
    - MessageQueuePyAutoGUIIntegrationCore - Core methods: create_pyautogui_delivery_callback, get_delivery_statistics, reset_statistics, pyautogui_delivery_callback
    - MessageQueuePyAutoGUIIntegrationUtils - Utility methods:

FUNCTION src\core\message_queue_pyautogui_integration.py:92:
  Function '_convert_to_unified_message': 57 LOC (limit: 50)
  Excess: 7 LOC
  Recommendation: Split into smaller functions

CLASS src\core\agent_context_manager.py:21:
  Class 'AgentContextManager': 118 LOC (limit: 100)
  Excess: 18 LOC
  Suggested splits:
    - AgentContextManagerCore - Core methods: set_agent_context, get_agent_context, update_agent_context, remove_agent_context, list_agents
    - AgentContextManagerUtils - Utility methods: agent_contexts, get_context_summary

FILE src\core\agent_coordination.py:
  File: 569 LOC (limit: 400)
  Excess: 169 LOC
  Suggested splits:
    - agent_coordination_core.py - Core classes: AgentStatus, AgentCapability
    - agent_coordination_utils.py - Utility functions: create_agent_info, create_agent_task, create_agent_context
    - agent_coordination_types.py - Type definitions and imports

CLASS src\core\agent_coordination.py:372:
  Class 'AgentCoordinationManager': 115 LOC (limit: 100)
  Excess: 15 LOC
  Suggested splits:
    - AgentCoordinationManagerCore - Core methods: register_agent, create_task, assign_task, execute_task, get_agent_context
    - AgentCoordinationManagerUtils - Utility methods: get_coordination_status

FILE src\core\analytics_unified.py:
  File: 748 LOC (limit: 400)
  Excess: 348 LOC
  Suggested splits:
    - analytics_unified_core.py - Core classes: AnalyticsStatus, AnalyticsType
    - analytics_unified_utils.py - Utility functions: create_intelligence_engine, create_processing_engine, create_analytics_coordinator
    - analytics_unified_types.py - Type definitions and imports

CLASS src\core\analytics_unified.py:232:
  Class 'PatternRecognitionEngine': 107 LOC (limit: 100)
  Excess: 7 LOC
  Suggested splits:
    - PatternRecognitionEngineCore - Core methods: start, stop, process_data, get_capabilities, analyze_patterns
    - PatternRecognitionEngineUtils - Utility methods: detect_anomalies

FILE src\core\automated_health_check_system.py:
  File: 1056 LOC (limit: 400)
  Excess: 656 LOC
  Suggested splits:
    - automated_health_check_system_core.py - Core classes: HealthCheckType, HealthStatus
    - automated_health_check_system_utils.py - Utility functions: main, to_dict, should_run
    - automated_health_check_system_types.py - Type definitions and imports

CLASS src\core\automated_health_check_system.py:130:
  Class 'AutomatedHealthCheckSystem': 849 LOC (limit: 100)
  Excess: 749 LOC
  Suggested splits:
    - AutomatedHealthCheckSystemCore - Core methods: start_monitoring, stop_monitoring, get_health_status_summary, get_detailed_health_report, export_health_check_snapshot
    - AutomatedHealthCheckSystemUtils - Utility methods: acknowledge_alert, get_consolidation_readiness_status

FUNCTION src\core\automated_health_check_system.py:981:
  Function 'main': 72 LOC (limit: 50)
  Excess: 22 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\automated_health_check_system.py:172:
  Function '_initialize_system_health_checks': 53 LOC (limit: 50)
  Excess: 3 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\automated_health_check_system.py:267:
  Function '_initialize_consolidation_health_checks': 53 LOC (limit: 50)
  Excess: 3 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\automated_health_check_system.py:439:
  Function '_execute_system_health_check': 88 LOC (limit: 50)
  Excess: 38 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\automated_health_check_system.py:528:
  Function '_execute_application_health_check': 81 LOC (limit: 50)
  Excess: 31 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\automated_health_check_system.py:610:
  Function '_execute_consolidation_health_check': 89 LOC (limit: 50)
  Excess: 39 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\automated_health_check_system.py:700:
  Function '_execute_security_health_check': 59 LOC (limit: 50)
  Excess: 9 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\automated_health_check_system.py:832:
  Function 'get_health_status_summary': 58 LOC (limit: 50)
  Excess: 8 LOC
  Recommendation: Split into smaller functions

CLASS src\core\config_core.py:58:
  Class 'UnifiedConfigManager': 128 LOC (limit: 100)
  Excess: 28 LOC
  Suggested splits:
    - UnifiedConfigManagerCore - Core methods: get, set, get_all_configs, get_config_metadata, reload_configs
    - UnifiedConfigManagerUtils - Utility methods: validate_configs

FUNCTION src\core\config_core.py:69:
  Function '_load_default_configs': 56 LOC (limit: 50)
  Excess: 6 LOC
  Recommendation: Split into smaller functions

FILE src\core\coordination_unified.py:
  File: 584 LOC (limit: 400)
  Excess: 184 LOC
  Suggested splits:
    - coordination_unified_core.py - Core classes: CoordinationStatus, TargetType
    - coordination_unified_utils.py - Utility functions: create_coordination_engine, create_swarm_orchestrator, create_agent_strategy
    - coordination_unified_types.py - Type definitions and imports

FUNCTION src\core\coordination_unified.py:529:
  Function 'main': 51 LOC (limit: 50)
  Excess: 1 LOC
  Recommendation: Split into smaller functions

FILE src\core\core_configuration.py:
  File: 511 LOC (limit: 400)
  Excess: 111 LOC
  Suggested splits:
    - core_configuration_core.py - Core classes: Environment, EnvironmentConfig
    - core_configuration_utils.py - Utility functions: create_environment_config, create_agent_config, create_system_config
    - core_configuration_types.py - Type definitions and imports

CLASS src\core\core_configuration.py:205:
  Class 'UnifiedConfiguration': 158 LOC (limit: 100)
  Excess: 58 LOC
  Suggested splits:
    - UnifiedConfigurationCore - Core methods: validate, to_dict, save_to_file, load_from_file
    - UnifiedConfigurationUtils - Utility methods:

FUNCTION src\core\core_configuration.py:286:
  Function 'load_from_file': 77 LOC (limit: 50)
  Excess: 27 LOC
  Recommendation: Split into smaller functions

FILE src\core\core_coordination.py:
  File: 688 LOC (limit: 400)
  Excess: 288 LOC
  Suggested splits:
    - core_coordination_core.py - Core classes: CoordinationStatus, TaskStatus
    - core_coordination_utils.py - Utility functions: create_agent_info, create_task, create_resource
    - core_coordination_types.py - Type definitions and imports

FILE src\core\core_interfaces.py:
  File: 612 LOC (limit: 400)
  Excess: 212 LOC
  Suggested splits:
    - core_interfaces_core.py - Core classes: CoordinatorStatus, CoordinatorInfo
    - core_interfaces_utils.py - Utility functions: create_coordinator_info, create_message, create_agent_info
    - core_interfaces_types.py - Type definitions and imports

FILE src\core\core_manager_system.py:
  File: 571 LOC (limit: 400)
  Excess: 171 LOC
  Suggested splits:
    - core_manager_system_core.py - Core classes: AgentContextManager, DocumentationService
    - core_manager_system_utils.py - Utility functions: create_agent_context_manager, create_documentation_service, create_message_queue_manager
    - core_manager_system_types.py - Type definitions and imports

CLASS src\core\core_manager_system.py:194:
  Class 'MessageQueueManager': 105 LOC (limit: 100)
  Excess: 5 LOC
  Suggested splits:
    - MessageQueueManagerCore - Core methods: enqueue, dequeue, mark_completed, mark_failed, retry_entry
    - MessageQueueManagerUtils - Utility methods: get_queue_status, cleanup_expired

FILE src\core\core_unified_system.py:
  File: 669 LOC (limit: 400)
  Excess: 269 LOC
  Suggested splits:
    - core_unified_system_core.py - Core classes: BaseUtility, CleanupManager
    - core_unified_system_utils.py - Utility functions: create_cleanup_manager, create_configuration_manager, create_error_handler
    - core_unified_system_types.py - Type definitions and imports

FILE src\core\core_utilities.py:
  File: 584 LOC (limit: 400)
  Excess: 184 LOC
  Suggested splits:
    - core_utilities_core.py - Core classes:
    - core_utilities_utils.py - Utility functions: read_file, write_file, copy_file
    - core_utilities_types.py - Type definitions and imports

FUNCTION src\core\core_utilities.py:515:
  Function 'main': 63 LOC (limit: 50)
  Excess: 13 LOC
  Recommendation: Split into smaller functions

FILE src\core\core_validation.py:
  File: 552 LOC (limit: 400)
  Excess: 152 LOC
  Suggested splits:
    - core_validation_core.py - Core classes: ValidationType, ValidationLevel
    - core_validation_utils.py - Utility functions: create_validation_rule, create_validation_schema, create_type_validator
    - core_validation_types.py - Type definitions and imports

CLASS src\core\core_validation.py:311:
  Class 'ValidationOrchestrator': 120 LOC (limit: 100)
  Excess: 20 LOC
  Suggested splits:
    - ValidationOrchestratorCore - Core methods: register_validator, register_schema, validate, get_validation_stats, clear_history
    - ValidationOrchestratorUtils - Utility methods:

FILE src\core\emergency_unified.py:
  File: 634 LOC (limit: 400)
  Excess: 234 LOC
  Suggested splits:
    - emergency_unified_core.py - Core classes: EmergencyStatus, EmergencyType
    - emergency_unified_utils.py - Utility functions: create_emergency_handler, create_emergency_monitor, create_emergency_orchestrator
    - emergency_unified_types.py - Type definitions and imports

CLASS src\core\emergency_unified.py:442:
  Class 'EmergencyOrchestrator': 102 LOC (limit: 100)
  Excess: 2 LOC
  Suggested splits:
    - EmergencyOrchestratorCore - Core methods: register_handler, register_monitor, start_monitoring, stop_monitoring, detect_emergencies
    - EmergencyOrchestratorUtils - Utility methods: handle_emergency, get_emergency_status

FILE src\core\engines_unified.py:
  File: 703 LOC (limit: 400)
  Excess: 303 LOC
  Suggested splits:
    - engines_unified_core.py - Core classes: EngineStatus, EngineType
    - engines_unified_utils.py - Utility functions: create_engine, create_engine_registry, main
    - engines_unified_types.py - Type definitions and imports

FILE src\core\enhanced_communication_protocols.py:
  File: 491 LOC (limit: 400)
  Excess: 91 LOC
  Suggested splits:
    - enhanced_communication_protocols_core.py - Core classes: CommunicationPriority, DeliveryChannel
    - enhanced_communication_protocols_utils.py - Utility functions: get_enhanced_protocols, send_enhanced_message, broadcast_enhanced_message
    - enhanced_communication_protocols_types.py - Type definitions and imports

CLASS src\core\enhanced_communication_protocols.py:114:
  Class 'EnhancedCommunicationProtocols': 309 LOC (limit: 100)
  Excess: 209 LOC
  Suggested splits:
    - EnhancedCommunicationProtocolsCore - Core methods: send_message, broadcast_message, get_protocol_status, reset_agent_health, shutdown
    - EnhancedCommunicationProtocolsUtils - Utility methods:

FILE src\core\enhanced_unified_config.py:
  File: 573 LOC (limit: 400)
  Excess: 173 LOC
  Suggested splits:
    - enhanced_unified_config_core.py - Core classes: ConfigEnvironment, ConfigSource
    - enhanced_unified_config_utils.py - Utility functions: get_enhanced_config, get_config, get_agent_config
    - enhanced_unified_config_types.py - Type definitions and imports

CLASS src\core\enhanced_unified_config.py:169:
  Class 'EnhancedUnifiedConfig': 257 LOC (limit: 100)
  Excess: 157 LOC
  Suggested splits:
    - EnhancedUnifiedConfigCore - Core methods: get_config, get_agent_config, get_system_config, get_timeout_config, get_threshold_config
    - EnhancedUnifiedConfigUtils - Utility methods: get_test_config, set_config, validate_configuration, export_configuration

FUNCTION src\core\enhanced_unified_config.py:249:
  Function '_load_core_configurations': 70 LOC (limit: 50)
  Excess: 20 LOC
  Recommendation: Split into smaller functions

CLASS src\core\env_loader.py:23:
  Class 'EnvironmentLoader': 252 LOC (limit: 100)
  Excess: 152 LOC
  Suggested splits:
    - EnvironmentLoaderCore - Core methods: load_env_file, get_env_var, validate_critical_settings, load_unified_config_from_env, get_environment_summary
    - EnvironmentLoaderUtils - Utility methods:

FUNCTION src\core\env_loader.py:130:
  Function 'load_unified_config_from_env': 136 LOC (limit: 50)
  Excess: 86 LOC
  Recommendation: Split into smaller functions

FILE src\core\error_handling_unified.py:
  File: 674 LOC (limit: 400)
  Excess: 274 LOC
  Suggested splits:
    - error_handling_unified_core.py - Core classes: ErrorSeverity, ErrorType
    - error_handling_unified_utils.py - Utility functions: create_error_handler, create_error_recovery, create_error_orchestrator
    - error_handling_unified_types.py - Type definitions and imports

FUNCTION src\core\error_handling_unified.py:611:
  Function 'main': 59 LOC (limit: 50)
  Excess: 9 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\error_handling_unified.py:351:
  Function 'recover': 75 LOC (limit: 50)
  Excess: 25 LOC
  Recommendation: Split into smaller functions

FILE src\core\integration_unified.py:
  File: 561 LOC (limit: 400)
  Excess: 161 LOC
  Suggested splits:
    - integration_unified_core.py - Core classes: IntegrationStatus, IntegrationType
    - integration_unified_utils.py - Utility functions: create_integration_connector, create_integration_manager, main
    - integration_unified_types.py - Type definitions and imports

FILE src\core\managers_unified.py:
  File: 730 LOC (limit: 400)
  Excess: 330 LOC
  Suggested splits:
    - managers_unified_core.py - Core classes: ManagerStatus, ManagerType
    - managers_unified_utils.py - Utility functions: create_manager, create_manager_registry, main
    - managers_unified_types.py - Type definitions and imports

FILE src\core\message_queue.py:
  File: 487 LOC (limit: 400)
  Excess: 87 LOC
  Suggested splits:
    - message_queue_core.py - Core classes: QueueConfig, MessageQueue
    - message_queue_utils.py - Utility functions: __init__, __init__, enqueue
    - message_queue_types.py - Type definitions and imports

CLASS src\core\message_queue.py:70:
  Class 'MessageQueue': 323 LOC (limit: 100)
  Excess: 223 LOC
  Suggested splits:
    - MessageQueueCore - Core methods: enqueue, enqueue_with_pyautogui, enqueue_broadcast_with_pyautogui, dequeue, mark_delivered
    - MessageQueueUtils - Utility methods: mark_failed, get_statistics, cleanup_expired, get_health_status, get_pyautogui_delivery_stats

FUNCTION src\core\message_queue.py:109:
  Function 'enqueue': 63 LOC (limit: 50)
  Excess: 13 LOC
  Recommendation: Split into smaller functions

CLASS src\core\message_queue_statistics.py:15:
  Class 'QueueStatisticsCalculator': 150 LOC (limit: 100)
  Excess: 50 LOC
  Suggested splits:
    - QueueStatisticsCalculatorCore - Core methods: calculate_statistics
    - QueueStatisticsCalculatorUtils - Utility methods:

FUNCTION src\core\message_queue_statistics.py:18:
  Function 'calculate_statistics': 78 LOC (limit: 50)
  Excess: 28 LOC
  Recommendation: Split into smaller functions

CLASS src\core\onboarding_service.py:13:
  Class 'OnboardingService': 170 LOC (limit: 100)
  Excess: 70 LOC
  Suggested splits:
    - OnboardingServiceCore - Core methods: generate_onboarding_message, validate_onboarding, create_agent_workspace
    - OnboardingServiceUtils - Utility methods:

FUNCTION src\core\onboarding_service.py:20:
  Function '_load_onboarding_templates': 56 LOC (limit: 50)
  Excess: 6 LOC
  Recommendation: Split into smaller functions

FILE src\core\operational_monitoring_baseline.py:
  File: 950 LOC (limit: 400)
  Excess: 550 LOC
  Suggested splits:
    - operational_monitoring_baseline_core.py - Core classes: MonitoringPriority, SLATier
    - operational_monitoring_baseline_utils.py - Utility functions: main, __init__, _initialize_baseline
    - operational_monitoring_baseline_types.py - Type definitions and imports

CLASS src\core\operational_monitoring_baseline.py:84:
  Class 'OperationalMonitoringBaseline': 796 LOC (limit: 100)
  Excess: 696 LOC
  Suggested splits:
    - OperationalMonitoringBaselineCore - Core methods: collect_operational_metrics, perform_system_health_check, generate_operational_report, save_baseline_snapshot, export_operational_dashboard_data
    - OperationalMonitoringBaselineUtils - Utility methods: get_consolidation_safety_status

FUNCTION src\core\operational_monitoring_baseline.py:882:
  Function 'main': 65 LOC (limit: 50)
  Excess: 15 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\operational_monitoring_baseline.py:364:
  Function '_collect_system_metrics': 57 LOC (limit: 50)
  Excess: 7 LOC
  Recommendation: Split into smaller functions

FILE src\core\performance_monitoring_dashboard.py:
  File: 1149 LOC (limit: 400)
  Excess: 749 LOC
  Suggested splits:
    - performance_monitoring_dashboard_core.py - Core classes: DashboardType, MetricType
    - performance_monitoring_dashboard_utils.py - Utility functions: main, __init__, _initialize_dashboards
    - performance_monitoring_dashboard_types.py - Type definitions and imports

CLASS src\core\performance_monitoring_dashboard.py:86:
  Class 'PerformanceMonitoringDashboard': 978 LOC (limit: 100)
  Excess: 878 LOC
  Suggested splits:
    - PerformanceMonitoringDashboardCore - Core methods: start_monitoring, stop_monitoring, get_dashboard_data, export_dashboard_snapshot, get_all_dashboards_summary
    - PerformanceMonitoringDashboardUtils - Utility methods:

FUNCTION src\core\performance_monitoring_dashboard.py:1066:
  Function 'main': 80 LOC (limit: 50)
  Excess: 30 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\performance_monitoring_dashboard.py:131:
  Function '_create_operational_dashboard': 104 LOC (limit: 50)
  Excess: 54 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\performance_monitoring_dashboard.py:236:
  Function '_create_consolidation_dashboard': 128 LOC (limit: 50)
  Excess: 78 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\performance_monitoring_dashboard.py:365:
  Function '_create_performance_dashboard': 126 LOC (limit: 50)
  Excess: 76 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\performance_monitoring_dashboard.py:492:
  Function '_create_sla_dashboard': 87 LOC (limit: 50)
  Excess: 37 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\performance_monitoring_dashboard.py:580:
  Function '_create_alert_dashboard': 87 LOC (limit: 50)
  Excess: 37 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\performance_monitoring_dashboard.py:721:
  Function '_collect_system_metrics': 66 LOC (limit: 50)
  Excess: 16 LOC
  Recommendation: Split into smaller functions

FILE src\core\performance_unified.py:
  File: 691 LOC (limit: 400)
  Excess: 291 LOC
  Suggested splits:
    - performance_unified_core.py - Core classes: PerformanceStatus, PerformanceMetric
    - performance_unified_utils.py - Utility functions: create_performance_monitor, create_performance_dashboard, create_performance_manager
    - performance_unified_types.py - Type definitions and imports

FUNCTION src\core\performance_unified.py:633:
  Function 'main': 54 LOC (limit: 50)
  Excess: 4 LOC
  Recommendation: Split into smaller functions

FILE src\core\refactoring_unified.py:
  File: 680 LOC (limit: 400)
  Excess: 280 LOC
  Suggested splits:
    - refactoring_unified_core.py - Core classes: RefactoringType, RefactoringStatus
    - refactoring_unified_utils.py - Utility functions: create_refactoring_tool, create_code_analyzer, create_refactoring_orchestrator
    - refactoring_unified_types.py - Type definitions and imports

CLASS src\core\refactoring_unified.py:466:
  Class 'RefactoringOrchestrator': 115 LOC (limit: 100)
  Excess: 15 LOC
  Suggested splits:
    - RefactoringOrchestratorCore - Core methods: register_tool, register_analyzer, create_task, execute_task, analyze_file
    - RefactoringOrchestratorUtils - Utility methods: get_refactoring_status

FUNCTION src\core\refactoring_unified.py:624:
  Function 'main': 52 LOC (limit: 50)
  Excess: 2 LOC
  Recommendation: Split into smaller functions

FILE src\core\ssot_unified.py:
  File: 714 LOC (limit: 400)
  Excess: 314 LOC
  Suggested splits:
    - ssot_unified_core.py - Core classes: SSOTStatus, SSOTType
    - ssot_unified_utils.py - Utility functions: create_ssot_manager, create_ssot_validator, create_ssot_coordinator
    - ssot_unified_types.py - Type definitions and imports

CLASS src\core\ssot_unified.py:216:
  Class 'ConfigurationSSOTManager': 110 LOC (limit: 100)
  Excess: 10 LOC
  Suggested splits:
    - ConfigurationSSOTManagerCore - Core methods: start, stop, create_record, read_record, update_record
    - ConfigurationSSOTManagerUtils - Utility methods: delete_record, get_capabilities

CLASS src\core\ssot_unified.py:328:
  Class 'DataSSOTManager': 108 LOC (limit: 100)
  Excess: 8 LOC
  Suggested splits:
    - DataSSOTManagerCore - Core methods: start, stop, create_record, read_record, update_record
    - DataSSOTManagerUtils - Utility methods: delete_record, get_capabilities

CLASS src\core\ssot_unified.py:513:
  Class 'SSOTCoordinator': 104 LOC (limit: 100)
  Excess: 4 LOC
  Suggested splits:
    - SSOTCoordinatorCore - Core methods: register_manager, register_validator, start_all_managers, stop_all_managers, create_record
    - SSOTCoordinatorUtils - Utility methods: read_record, update_record, delete_record, validate_record, get_ssot_status

FUNCTION src\core\ssot_unified.py:656:
  Function 'main': 54 LOC (limit: 50)
  Excess: 4 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\ssot_unified.py:449:
  Function 'validate_record': 53 LOC (limit: 50)
  Excess: 3 LOC
  Recommendation: Split into smaller functions

FILE src\core\swarm_coordination.py:
  File: 568 LOC (limit: 400)
  Excess: 168 LOC
  Suggested splits:
    - swarm_coordination_core.py - Core classes: SwarmStatus, SwarmPhase
    - swarm_coordination_utils.py - Utility functions: create_swarm_agent, create_swarm_task, create_performance_monitoring_engine
    - swarm_coordination_types.py - Type definitions and imports

FILE src\core\unified_config.py:
  File: 495 LOC (limit: 400)
  Excess: 95 LOC
  Suggested splits:
    - unified_config_core.py - Core classes: TimeoutConfig, AgentConfig
    - unified_config_utils.py - Utility functions: get_unified_config, reload_config, get_timeout_config
    - unified_config_types.py - Type definitions and imports

CLASS src\core\unified_config.py:331:
  Class 'UnifiedConfig': 113 LOC (limit: 100)
  Excess: 13 LOC
  Suggested splits:
    - UnifiedConfigCore - Core methods: validate, get_config_summary
    - UnifiedConfigUtils - Utility methods:

FUNCTION src\core\unified_config.py:347:
  Function 'validate': 67 LOC (limit: 50)
  Excess: 17 LOC
  Recommendation: Split into smaller functions

FILE src\core\unified_monitoring_coordinator.py:
  File: 494 LOC (limit: 400)
  Excess: 94 LOC
  Suggested splits:
    - unified_monitoring_coordinator_core.py - Core classes: MonitoringAlertLevel, SwarmComponent
    - unified_monitoring_coordinator_utils.py - Utility functions: get_monitoring_coordinator, __init__, _initialize_monitoring_systems
    - unified_monitoring_coordinator_types.py - Type definitions and imports

CLASS src\core\unified_monitoring_coordinator.py:108:
  Class 'UnifiedMonitoringCoordinator': 365 LOC (limit: 100)
  Excess: 265 LOC
  Suggested splits:
    - UnifiedMonitoringCoordinatorCore - Core methods: start_monitoring, stop_monitoring, get_monitoring_report, resolve_alert
    - UnifiedMonitoringCoordinatorUtils - Utility methods:

FILE src\core\validation_unified.py:
  File: 721 LOC (limit: 400)
  Excess: 321 LOC
  Suggested splits:
    - validation_unified_core.py - Core classes: ValidationStatus, ValidationType
    - validation_unified_utils.py - Utility functions: create_validator, create_schema_validator, create_validation_manager
    - validation_unified_types.py - Type definitions and imports

CLASS src\core\validation_unified.py:204:
  Class 'DataTypeValidator': 132 LOC (limit: 100)
  Excess: 32 LOC
  Suggested splits:
    - DataTypeValidatorCore - Core methods: validate, get_capabilities
    - DataTypeValidatorUtils - Utility methods:

CLASS src\core\validation_unified.py:338:
  Class 'ConstraintValidator': 116 LOC (limit: 100)
  Excess: 16 LOC
  Suggested splits:
    - ConstraintValidatorCore - Core methods: validate, get_capabilities
    - ConstraintValidatorUtils - Utility methods:

FUNCTION src\core\validation_unified.py:663:
  Function 'main': 54 LOC (limit: 50)
  Excess: 4 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\validation_unified.py:210:
  Function 'validate': 60 LOC (limit: 50)
  Excess: 10 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\validation_unified.py:344:
  Function 'validate': 101 LOC (limit: 50)
  Excess: 51 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\validation_unified.py:467:
  Function 'validate_schema': 67 LOC (limit: 50)
  Excess: 17 LOC
  Recommendation: Split into smaller functions

FILE src\core\vector_unified.py:
  File: 637 LOC (limit: 400)
  Excess: 237 LOC
  Suggested splits:
    - vector_unified_core.py - Core classes: VectorStatus, VectorType
    - vector_unified_utils.py - Utility functions: create_vector_engine, create_vector_coordinator, main
    - vector_unified_types.py - Type definitions and imports

CLASS src\core\vector_unified.py:273:
  Class 'VectorAnalyticsEngine': 138 LOC (limit: 100)
  Excess: 38 LOC
  Suggested splits:
    - VectorAnalyticsEngineCore - Core methods: start, stop, add_vector, search_vectors, get_capabilities
    - VectorAnalyticsEngineUtils - Utility methods: perform_clustering

FUNCTION src\core\vector_unified.py:353:
  Function 'perform_clustering': 58 LOC (limit: 50)
  Excess: 8 LOC
  Recommendation: Split into smaller functions

FILE src\core\config_monitor.py:
  File: 480 LOC (limit: 400)
  Excess: 80 LOC
  Suggested splits:
    - config_monitor_core.py - Core classes: ConfigHealthMetrics, ConfigAlert
    - config_monitor_utils.py - Utility functions: get_config_monitor, start_config_monitoring, stop_config_monitoring
    - config_monitor_types.py - Type definitions and imports

CLASS src\core\config_monitor.py:76:
  Class 'ConfigMonitor': 377 LOC (limit: 100)
  Excess: 277 LOC
  Suggested splits:
    - ConfigMonitorCore - Core methods: start_monitoring, stop_monitoring, take_snapshot, get_health_status, get_alerts
    - ConfigMonitorUtils - Utility methods: get_performance_report, generate_health_report

FUNCTION src\core\config_monitor.py:388:
  Function 'generate_health_report': 65 LOC (limit: 50)
  Excess: 15 LOC
  Recommendation: Split into smaller functions

FILE src\core\enhanced_config_system.py:
  File: 686 LOC (limit: 400)
  Excess: 286 LOC
  Suggested splits:
    - enhanced_config_system_core.py - Core classes: ConfigValidationError, ConfigMigrationError
    - enhanced_config_system_utils.py - Utility functions: get_enhanced_config_system, initialize_enhanced_config, __init__
    - enhanced_config_system_types.py - Type definitions and imports

CLASS src\core\enhanced_config_system.py:154:
  Class 'ConfigValidator': 143 LOC (limit: 100)
  Excess: 43 LOC
  Suggested splits:
    - ConfigValidatorCore - Core methods: add_schema, validate, validate_file
    - ConfigValidatorUtils - Utility methods:

CLASS src\core\enhanced_config_system.py:374:
  Class 'ConfigMigrator': 105 LOC (limit: 100)
  Excess: 5 LOC
  Suggested splits:
    - ConfigMigratorCore - Core methods: migrate, add_migration
    - ConfigMigratorUtils - Utility methods:

CLASS src\core\enhanced_config_system.py:481:
  Class 'EnhancedConfigSystem': 186 LOC (limit: 100)
  Excess: 86 LOC
  Suggested splits:
    - EnhancedConfigSystemCore - Core methods: load_config, save_config, migrate_config, get_cache_stats, start_hot_reload
    - EnhancedConfigSystemUtils - Utility methods: stop_hot_reload, validate_all_configs

FUNCTION src\core\enhanced_config_system.py:161:
  Function '_load_builtin_schemas': 90 LOC (limit: 50)
  Excess: 40 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\enhanced_config_system.py:522:
  Function 'load_config': 52 LOC (limit: 50)
  Excess: 2 LOC
  Recommendation: Split into smaller functions

CLASS src\core\analytics\engines\coordination_analytics_engine.py:19:
  Class 'CoordinationAnalyticsEngine': 107 LOC (limit: 100)
  Excess: 7 LOC
  Suggested splits:
    - CoordinationAnalyticsEngineCore - Core methods: collect_analytics, get_analytics_summary, clear_analytics_history, get_status
    - CoordinationAnalyticsEngineUtils - Utility methods:

CLASS src\core\analytics\engines\metrics_engine.py:21:
  Class 'MetricsEngine': 128 LOC (limit: 100)
  Excess: 28 LOC
  Suggested splits:
    - MetricsEngineCore - Core methods: record_metric, increment_metric, get_metric, get_all_metrics, record_performance
    - MetricsEngineUtils - Utility methods: record_error, get_performance_summary, get_error_summary, clear_metrics, get_status

CLASS src\core\analytics\intelligence\anomaly_detection_engine.py:20:
  Class 'AnomalyDetectionEngine': 101 LOC (limit: 100)
  Excess: 1 LOC
  Suggested splits:
    - AnomalyDetectionEngineCore - Core methods: detect_anomalies, get_anomaly_summary
    - AnomalyDetectionEngineUtils - Utility methods:

CLASS src\core\analytics\intelligence\business_intelligence_engine_core.py:20:
  Class 'BusinessIntelligenceEngineCore': 147 LOC (limit: 100)
  Excess: 47 LOC
  Suggested splits:
    - BusinessIntelligenceEngineCoreCore - Core methods: generate_insights, get_insights_history, clear_insights, get_metrics, update_metrics
    - BusinessIntelligenceEngineCoreUtils - Utility methods:

CLASS src\core\analytics\intelligence\predictive_modeling_engine.py:20:
  Class 'PredictiveModelingEngine': 140 LOC (limit: 100)
  Excess: 40 LOC
  Suggested splits:
    - PredictiveModelingEngineCore - Core methods: create_model, train_model, predict, get_model_info, get_all_models
    - PredictiveModelingEngineUtils - Utility methods: delete_model, get_predictions_summary, get_status

CLASS src\core\analytics\intelligence\business_intelligence_engine_operations.py:20:
  Class 'BusinessIntelligenceEngineOperations': 190 LOC (limit: 100)
  Excess: 90 LOC
  Suggested splits:
    - BusinessIntelligenceEngineOperationsCore - Core methods: generate_dashboard_data, export_insights, get_performance_metrics, optimize_performance
    - BusinessIntelligenceEngineOperationsUtils - Utility methods:

CLASS src\core\analytics\intelligence\pattern_analysis\anomaly_detector.py:20:
  Class 'AnomalyDetector': 148 LOC (limit: 100)
  Excess: 48 LOC
  Suggested splits:
    - AnomalyDetectorCore - Core methods: detect_anomalies, detect_outliers
    - AnomalyDetectorUtils - Utility methods:

CLASS src\core\analytics\orchestrators\coordination_analytics_orchestrator.py:19:
  Class 'CoordinationAnalyticsSystem': 120 LOC (limit: 100)
  Excess: 20 LOC
  Suggested splits:
    - CoordinationAnalyticsSystemCore - Core methods: start, stop, process_analytics, get_analytics_report, get_status
    - CoordinationAnalyticsSystemUtils - Utility methods: reset_stats

CLASS src\core\analytics\processors\insight_processor.py:19:
  Class 'InsightProcessor': 118 LOC (limit: 100)
  Excess: 18 LOC
  Suggested splits:
    - InsightProcessorCore - Core methods: process_insight, batch_process_insights, get_processing_stats, reset_stats, get_status
    - InsightProcessorUtils - Utility methods:

CLASS src\core\analytics\processors\prediction_processor.py:19:
  Class 'PredictionProcessor': 115 LOC (limit: 100)
  Excess: 15 LOC
  Suggested splits:
    - PredictionProcessorCore - Core methods: process_prediction, batch_process_predictions, get_processing_stats, reset_stats, get_status
    - PredictionProcessorUtils - Utility methods:

CLASS src\core\consolidation\utility_consolidation\utility_consolidation_engine.py:19:
  Class 'UtilityConsolidationEngine': 128 LOC (limit: 100)
  Excess: 28 LOC
  Suggested splits:
    - UtilityConsolidationEngineCore - Core methods: consolidate_utilities, get_consolidation_summary, clear_consolidation_history, get_status
    - UtilityConsolidationEngineUtils - Utility methods:

CLASS src\core\consolidation\utility_consolidation\utility_consolidation_orchestrator.py:22:
  Class 'UtilityConsolidationOrchestrator': 127 LOC (limit: 100)
  Excess: 27 LOC
  Suggested splits:
    - UtilityConsolidationOrchestratorCore - Core methods: run_consolidation_analysis, generate_consolidation_report, execute_consolidation, save_report, get_opportunities_summary
    - UtilityConsolidationOrchestratorUtils - Utility methods:

CLASS src\core\coordination\swarm\engines\performance_monitoring_engine.py:21:
  Class 'PerformanceMonitoringEngine': 148 LOC (limit: 100)
  Excess: 48 LOC
  Suggested splits:
    - PerformanceMonitoringEngineCore - Core methods: update_metrics, get_performance_summary, get_efficiency_trend, reset_metrics, get_metrics_export
    - PerformanceMonitoringEngineUtils - Utility methods:

CLASS src\core\coordination\swarm\engines\task_coordination_engine.py:28:
  Class 'TaskCoordinationEngine': 169 LOC (limit: 100)
  Excess: 69 LOC
  Suggested splits:
    - TaskCoordinationEngineCore - Core methods: get_task_summary, get_next_task, clear_completed_tasks
    - TaskCoordinationEngineUtils - Utility methods:

CLASS src\core\coordination\swarm\orchestrators\swarm_coordination_orchestrator.py:57:
  Class 'SwarmCoordinationEnhancer': 131 LOC (limit: 100)
  Excess: 31 LOC
  Suggested splits:
    - SwarmCoordinationEnhancerCore - Core methods: start_coordination, stop_coordination, get_coordination_summary, get_performance_metrics, reset_metrics
    - SwarmCoordinationEnhancerUtils - Utility methods:

CLASS src\core\data_optimization\data_optimization_engine.py:19:
  Class 'DataOptimizationEngine': 130 LOC (limit: 100)
  Excess: 30 LOC
  Suggested splits:
    - DataOptimizationEngineCore - Core methods: optimize_data, get_optimization_summary, clear_optimization_history, get_status
    - DataOptimizationEngineUtils - Utility methods:

CLASS src\core\deployment\deployment_orchestrator_engine.py:26:
  Class 'DeploymentOrchestratorEngine': 123 LOC (limit: 100)
  Excess: 23 LOC
  Suggested splits:
    - DeploymentOrchestratorEngineCore - Core methods: initialize_system, deploy_to_agent, mass_deploy, get_deployment_status, get_metrics
    - DeploymentOrchestratorEngineUtils - Utility methods: get_agent_domains, update_config, shutdown

CLASS src\core\deployment\coordinators\target_discovery.py:19:
  Class 'TargetDiscoveryEngine': 123 LOC (limit: 100)
  Excess: 23 LOC
  Suggested splits:
    - TargetDiscoveryEngineCore - Core methods: discover_targets, get_discovery_summary, clear_discovery_history, get_status
    - TargetDiscoveryEngineUtils - Utility methods:

CLASS src\core\deployment\coordinators\metrics_tracker.py:25:
  Class 'DeploymentMetricsTracker': 168 LOC (limit: 100)
  Excess: 68 LOC
  Suggested splits:
    - DeploymentMetricsTrackerCore - Core methods: update_deployment_metrics, update_agent_status, get_agent_status, get_deployment_metrics, get_metrics_summary
    - DeploymentMetricsTrackerUtils - Utility methods: get_target_analysis, get_performance_report, reset_metrics, export_metrics

CLASS src\core\deployment\engines\deployment_discovery_engine.py:25:
  Class 'DeploymentDiscoveryEngine': 162 LOC (limit: 100)
  Excess: 62 LOC
  Suggested splits:
    - DeploymentDiscoveryEngineCore - Core methods: discover_targets, prioritize_targets, get_discovered_targets, filter_targets
    - DeploymentDiscoveryEngineUtils - Utility methods:

CLASS src\core\deployment\engines\deployment_metrics_engine.py:25:
  Class 'DeploymentMetricsEngine': 179 LOC (limit: 100)
  Excess: 79 LOC
  Suggested splits:
    - DeploymentMetricsEngineCore - Core methods: start_deployment_tracking, update_target_completion, finish_deployment_tracking, get_current_metrics, get_metrics_summary
    - DeploymentMetricsEngineUtils - Utility methods: get_historical_metrics, analyze_performance_trends

CLASS src\core\dry_eliminator\engines\code_analysis_engine.py:19:
  Class 'CodeAnalysisEngine': 138 LOC (limit: 100)
  Excess: 38 LOC
  Suggested splits:
    - CodeAnalysisEngineCore - Core methods: analyze_code, get_analysis_summary, clear_analysis_history, get_status
    - CodeAnalysisEngineUtils - Utility methods:

CLASS src\core\dry_eliminator\engines\elimination_strategy_engine.py:19:
  Class 'EliminationStrategyEngine': 113 LOC (limit: 100)
  Excess: 13 LOC
  Suggested splits:
    - EliminationStrategyEngineCore - Core methods: execute_elimination, get_elimination_summary, clear_elimination_history, get_status
    - EliminationStrategyEngineUtils - Utility methods:

CLASS src\core\dry_eliminator\engines\dry_elimination_engine_orchestrator.py:32:
  Class 'DRYEliminationEngineOrchestrator': 171 LOC (limit: 100)
  Excess: 71 LOC
  Suggested splits:
    - DRYEliminationEngineOrchestratorCore - Core methods: run_full_analysis, get_violations_summary, get_elimination_summary, generate_detailed_report, export_results
    - DRYEliminationEngineOrchestratorUtils - Utility methods: clear_analysis, get_analysis_status

FUNCTION src\core\dry_eliminator\engines\dry_elimination_engine_orchestrator.py:54:
  Function 'run_full_analysis': 65 LOC (limit: 50)
  Excess: 15 LOC
  Recommendation: Split into smaller functions

CLASS src\core\dry_eliminator\engines\file_discovery_engine.py:20:
  Class 'FileDiscoveryEngine': 162 LOC (limit: 100)
  Excess: 62 LOC
  Suggested splits:
    - FileDiscoveryEngineCore - Core methods: discover_python_files, get_file_statistics, get_files_by_size, get_files_by_line_count, get_largest_files
    - FileDiscoveryEngineUtils - Utility methods: get_files_by_extension, get_files_in_directory, refresh_file_list, get_file_metadata, clear_cache

CLASS src\core\dry_eliminator\engines\metrics_reporting_engine.py:23:
  Class 'MetricsReportingEngine': 230 LOC (limit: 100)
  Excess: 130 LOC
  Suggested splits:
    - MetricsReportingEngineCore - Core methods: start_analysis, end_analysis, update_file_metrics, update_violation_metrics, update_elimination_metrics
    - MetricsReportingEngineUtils - Utility methods: generate_summary_report, generate_detailed_report, export_metrics_to_file, get_metrics_dict, reset_metrics

FUNCTION src\core\dry_eliminator\engines\metrics_reporting_engine.py:148:
  Function 'generate_detailed_report': 70 LOC (limit: 50)
  Excess: 20 LOC
  Recommendation: Split into smaller functions

CLASS src\core\dry_eliminator\orchestrators\elimination_coordinator.py:28:
  Class 'EliminationCoordinator': 198 LOC (limit: 100)
  Excess: 98 LOC
  Suggested splits:
    - EliminationCoordinatorCore - Core methods: eliminate_advanced_dry_violations, analyze_project_violations, eliminate_specific_violations, get_coordinator_status, reset_coordinator_state
    - EliminationCoordinatorUtils - Utility methods:

CLASS src\core\dry_eliminator\orchestrators\results_manager.py:25:
  Class 'ResultsManager': 229 LOC (limit: 100)
  Excess: 129 LOC
  Suggested splits:
    - ResultsManagerCore - Core methods: update_results, generate_summary_report, get_results_status, reset_results, export_results
    - ResultsManagerUtils - Utility methods:

CLASS src\core\emergency_intervention\unified_emergency\orchestrator.py:31:
  Class 'EmergencyInterventionOrchestrator': 213 LOC (limit: 100)
  Excess: 113 LOC
  Suggested splits:
    - EmergencyInterventionOrchestratorCore - Core methods: detect_emergency, analyze_emergency, execute_intervention, handle_emergency, register_intervention_handler
    - EmergencyInterventionOrchestratorUtils - Utility methods: get_emergency_status, get_active_emergencies, get_emergency_history, get_system_metrics, get_protocol_summary

CLASS src\core\emergency_intervention\unified_emergency\engine.py:36:
  Class 'EmergencyInterventionEngine': 159 LOC (limit: 100)
  Excess: 59 LOC
  Suggested splits:
    - EmergencyInterventionEngineCore - Core methods: register_protocol, register_handler, detect_emergency, respond_to_emergency, get_active_emergencies
    - EmergencyInterventionEngineUtils - Utility methods: get_metrics, get_status, clear_emergencies, reset_metrics, clear_resources

CLASS src\core\emergency_intervention\unified_emergency\engines\action_executor.py:21:
  Class 'ActionExecutor': 146 LOC (limit: 100)
  Excess: 46 LOC
  Suggested splits:
    - ActionExecutorCore - Core methods: register_handler, execute_action, execute_multiple_actions, get_available_actions, get_registered_handlers
    - ActionExecutorUtils - Utility methods: clear_handlers, has_handler

CLASS src\core\emergency_intervention\unified_emergency\handlers\protocol_executor.py:18:
  Class 'ProtocolExecutor': 218 LOC (limit: 100)
  Excess: 118 LOC
  Suggested splits:
    - ProtocolExecutorCore - Core methods: execute_protocol, get_execution_history, get_active_executions, cancel_execution
    - ProtocolExecutorUtils - Utility methods:

FUNCTION src\core\emergency_intervention\unified_emergency\handlers\protocol_executor.py:26:
  Function 'execute_protocol': 81 LOC (limit: 50)
  Excess: 31 LOC
  Recommendation: Split into smaller functions

CLASS src\core\emergency_intervention\unified_emergency\handlers\protocol_initializer.py:21:
  Class 'ProtocolInitializer': 200 LOC (limit: 100)
  Excess: 100 LOC
  Suggested splits:
    - ProtocolInitializerCore - Core methods: initialize_default_protocols, get_initialized_protocol_count, reinitialize_protocols
    - ProtocolInitializerUtils - Utility methods:

CLASS src\core\emergency_intervention\unified_emergency\handlers\protocol_registry.py:25:
  Class 'ProtocolRegistry': 127 LOC (limit: 100)
  Excess: 27 LOC
  Suggested splits:
    - ProtocolRegistryCore - Core methods: register_protocol, get_protocol, list_protocols, remove_protocol, get_protocol_count
    - ProtocolRegistryUtils - Utility methods: clear_protocols, export_protocols, import_protocols

CLASS src\core\emergency_intervention\unified_emergency\orchestrators\emergency_logger.py:18:
  Class 'EmergencyLogger': 148 LOC (limit: 100)
  Excess: 48 LOC
  Suggested splits:
    - EmergencyLoggerCore - Core methods: log_emergency_event, get_emergency_history, get_all_emergency_history, get_system_events, get_health_recommendations
    - EmergencyLoggerUtils - Utility methods: calculate_system_health, get_emergency_statistics, export_emergency_data, clear_emergency_history, get_logger_status

CLASS src\core\emergency_intervention\unified_emergency\orchestrators\emergency_analyzer.py:20:
  Class 'EmergencyAnalyzer': 196 LOC (limit: 100)
  Excess: 96 LOC
  Suggested splits:
    - EmergencyAnalyzerCore - Core methods: analyze_emergency, get_analysis_history, get_analysis_metrics, clear_analysis_history, export_analysis_data
    - EmergencyAnalyzerUtils - Utility methods:

CLASS src\core\emergency_intervention\unified_emergency\orchestrators\emergency_orchestrator.py:31:
  Class 'EmergencyInterventionOrchestrator': 213 LOC (limit: 100)
  Excess: 113 LOC
  Suggested splits:
    - EmergencyInterventionOrchestratorCore - Core methods: detect_emergency, analyze_emergency, execute_intervention, handle_emergency, register_intervention_handler
    - EmergencyInterventionOrchestratorUtils - Utility methods: get_emergency_status, get_active_emergencies, get_emergency_history, get_system_metrics, get_protocol_summary

CLASS src\core\engines\communication_core_engine.py:8:
  Class 'CommunicationCoreEngine': 124 LOC (limit: 100)
  Excess: 24 LOC
  Suggested splits:
    - CommunicationCoreEngineCore - Core methods: initialize, execute, cleanup, get_status
    - CommunicationCoreEngineUtils - Utility methods:

CLASS src\core\engines\configuration_core_engine.py:8:
  Class 'ConfigurationCoreEngine': 126 LOC (limit: 100)
  Excess: 26 LOC
  Suggested splits:
    - ConfigurationCoreEngineCore - Core methods: initialize, execute, cleanup, get_status
    - ConfigurationCoreEngineUtils - Utility methods:

CLASS src\core\engines\coordination_core_engine.py:8:
  Class 'CoordinationCoreEngine': 136 LOC (limit: 100)
  Excess: 36 LOC
  Suggested splits:
    - CoordinationCoreEngineCore - Core methods: initialize, execute, coordinate, schedule, monitor
    - CoordinationCoreEngineUtils - Utility methods: cleanup, get_status

CLASS src\core\engines\integration_core_engine.py:8:
  Class 'IntegrationCoreEngine': 138 LOC (limit: 100)
  Excess: 38 LOC
  Suggested splits:
    - IntegrationCoreEngineCore - Core methods: initialize, execute, connect, sync, transform
    - IntegrationCoreEngineUtils - Utility methods: cleanup, get_status

CLASS src\core\engines\ml_core_engine.py:8:
  Class 'MLCoreEngine': 121 LOC (limit: 100)
  Excess: 21 LOC
  Suggested splits:
    - MLCoreEngineCore - Core methods: initialize, execute, train_model, predict, optimize
    - MLCoreEngineUtils - Utility methods: cleanup, get_status

CLASS src\core\engines\monitoring_core_engine.py:8:
  Class 'MonitoringCoreEngine': 124 LOC (limit: 100)
  Excess: 24 LOC
  Suggested splits:
    - MonitoringCoreEngineCore - Core methods: initialize, execute, cleanup, get_status
    - MonitoringCoreEngineUtils - Utility methods:

CLASS src\core\engines\orchestration_core_engine.py:8:
  Class 'OrchestrationCoreEngine': 126 LOC (limit: 100)
  Excess: 26 LOC
  Suggested splits:
    - OrchestrationCoreEngineCore - Core methods: initialize, execute, cleanup, get_status
    - OrchestrationCoreEngineUtils - Utility methods:

CLASS src\core\engines\processing_core_engine.py:8:
  Class 'ProcessingCoreEngine': 127 LOC (limit: 100)
  Excess: 27 LOC
  Suggested splits:
    - ProcessingCoreEngineCore - Core methods: initialize, execute, cleanup, get_status
    - ProcessingCoreEngineUtils - Utility methods:

CLASS src\core\engines\storage_core_engine.py:8:
  Class 'StorageCoreEngine': 120 LOC (limit: 100)
  Excess: 20 LOC
  Suggested splits:
    - StorageCoreEngineCore - Core methods: initialize, execute, cleanup, get_status
    - StorageCoreEngineUtils - Utility methods:

CLASS src\core\engines\utility_core_engine.py:8:
  Class 'UtilityCoreEngine': 140 LOC (limit: 100)
  Excess: 40 LOC
  Suggested splits:
    - UtilityCoreEngineCore - Core methods: initialize, execute, process, validate, transform
    - UtilityCoreEngineUtils - Utility methods: cleanup, get_status

CLASS src\core\engines\validation_core_engine.py:8:
  Class 'ValidationCoreEngine': 138 LOC (limit: 100)
  Excess: 38 LOC
  Suggested splits:
    - ValidationCoreEngineCore - Core methods: initialize, execute, cleanup, get_status
    - ValidationCoreEngineUtils - Utility methods:

CLASS src\core\engines\analysis_core_engine.py:8:
  Class 'AnalysisCoreEngine': 153 LOC (limit: 100)
  Excess: 53 LOC
  Suggested splits:
    - AnalysisCoreEngineCore - Core methods: initialize, execute, analyze, extract_patterns, detect_violations
    - AnalysisCoreEngineUtils - Utility methods: cleanup, get_status

CLASS src\core\engines\data_core_engine.py:8:
  Class 'DataCoreEngine': 110 LOC (limit: 100)
  Excess: 10 LOC
  Suggested splits:
    - DataCoreEngineCore - Core methods: initialize, execute, cleanup, get_status
    - DataCoreEngineUtils - Utility methods:

CLASS src\core\engines\performance_core_engine.py:8:
  Class 'PerformanceCoreEngine': 133 LOC (limit: 100)
  Excess: 33 LOC
  Suggested splits:
    - PerformanceCoreEngineCore - Core methods: initialize, execute, cleanup, get_status
    - PerformanceCoreEngineUtils - Utility methods:

CLASS src\core\engines\security_core_engine.py:8:
  Class 'SecurityCoreEngine': 117 LOC (limit: 100)
  Excess: 17 LOC
  Suggested splits:
    - SecurityCoreEngineCore - Core methods: initialize, execute, cleanup, get_status
    - SecurityCoreEngineUtils - Utility methods:

FUNCTION src\core\engines\engine_monitoring.py:116:
  Function 'perform_health_check': 69 LOC (limit: 50)
  Excess: 19 LOC
  Recommendation: Split into smaller functions

CLASS src\core\engines\engine_state.py:28:
  Class 'EngineStateManager': 112 LOC (limit: 100)
  Excess: 12 LOC
  Suggested splits:
    - EngineStateManagerCore - Core methods: transition_to, can_transition_to, get_valid_transitions, is_stable_state, is_error_state
    - EngineStateManagerUtils - Utility methods: record_error, reset_error_state, get_state_summary

CLASS src\core\enhanced_integration\coordinators\enhanced_integration_coordinator.py:43:
  Class 'EnhancedIntegrationCoordinator': 145 LOC (limit: 100)
  Excess: 45 LOC
  Suggested splits:
    - EnhancedIntegrationCoordinatorCore - Core methods: start_coordination, stop_coordination, get_integration_summary
    - EnhancedIntegrationCoordinatorUtils - Utility methods:

CLASS src\core\enhanced_integration\engines\integration_coordination_engine.py:28:
  Class 'IntegrationCoordinationEngine': 242 LOC (limit: 100)
  Excess: 142 LOC
  Suggested splits:
    - IntegrationCoordinationEngineCore - Core methods: get_coordination_status, cancel_task, cleanup
    - IntegrationCoordinationEngineUtils - Utility methods:

CLASS src\core\enhanced_integration\engines\integration_performance_engine.py:26:
  Class 'IntegrationPerformanceEngine': 120 LOC (limit: 100)
  Excess: 20 LOC
  Suggested splits:
    - IntegrationPerformanceEngineCore - Core methods: start_monitoring, stop_monitoring, update_metrics, generate_performance_report, get_performance_summary
    - IntegrationPerformanceEngineUtils - Utility methods:

CLASS src\core\enhanced_integration\engines\integration_task_engine.py:21:
  Class 'IntegrationTaskEngine': 110 LOC (limit: 100)
  Excess: 10 LOC
  Suggested splits:
    - IntegrationTaskEngineCore - Core methods: add_task, get_next_task, get_task_summary
    - IntegrationTaskEngineUtils - Utility methods:

CLASS src\core\enhanced_integration\engines\integration_optimization_engine.py:28:
  Class 'IntegrationOptimizationEngine': 176 LOC (limit: 100)
  Excess: 76 LOC
  Suggested splits:
    - IntegrationOptimizationEngineCore - Core methods: get_optimization_metrics, clear_optimization_cache, get_active_optimizations, cancel_optimization
    - IntegrationOptimizationEngineUtils - Utility methods:

CLASS src\core\enhanced_integration\orchestrators\coordination_engine_core.py:19:
  Class 'CoordinationEngineCore': 174 LOC (limit: 100)
  Excess: 74 LOC
  Suggested splits:
    - CoordinationEngineCoreCore - Core methods: determine_coordination_strategy, allocate_resources, release_resources, get_resource_status, optimize_coordination
    - CoordinationEngineCoreUtils - Utility methods: get_coordination_status

CLASS src\core\enhanced_integration\orchestrators\coordination_engine_operations.py:19:
  Class 'CoordinationEngineOperations': 259 LOC (limit: 100)
  Excess: 159 LOC
  Suggested splits:
    - CoordinationEngineOperationsCore - Core methods: schedule_task, determine_coordination_strategy, allocate_resources, monitor_task_progress, get_task_queue_status
    - CoordinationEngineOperationsUtils - Utility methods: optimize_task_scheduling, get_performance_metrics, get_resource_status

CLASS src\core\enhanced_integration\orchestrators\task_processor.py:23:
  Class 'IntegrationTaskProcessor': 191 LOC (limit: 100)
  Excess: 91 LOC
  Suggested splits:
    - IntegrationTaskProcessorCore - Core methods: submit_integration_task, get_task_queue_size, get_active_tasks_count, get_completed_tasks_count, get_task_statistics
    - IntegrationTaskProcessorUtils - Utility methods: clear_completed_tasks, get_recent_tasks

CLASS src\core\error_handling\error_analysis_engine.py:23:
  Class 'ErrorAnalysisEngine': 210 LOC (limit: 100)
  Excess: 110 LOC
  Suggested splits:
    - ErrorAnalysisEngineCore - Core methods: create_error_summary, is_recoverable_error, get_error_severity, analyze_error_patterns, calculate_error_trends
    - ErrorAnalysisEngineUtils - Utility methods: get_recovery_recommendations, assess_system_health

CLASS src\core\error_handling\error_handling_orchestrator.py:23:
  Class 'UnifiedErrorHandlingOrchestrator': 176 LOC (limit: 100)
  Excess: 76 LOC
  Suggested splits:
    - UnifiedErrorHandlingOrchestratorCore - Core methods: retry_operation, safe_execute, validate_and_execute, handle_operation_error, handle_file_operation_error
    - UnifiedErrorHandlingOrchestratorUtils - Utility methods: handle_network_operation_error, handle_database_operation_error, handle_validation_error, handle_configuration_error, handle_agent_operation_error

CLASS src\core\error_handling\retry_safety_engine.py:21:
  Class 'RetrySafetyEngine': 208 LOC (limit: 100)
  Excess: 108 LOC
  Suggested splits:
    - RetrySafetyEngineCore - Core methods: retry_operation, safe_execute, validate_and_execute, execute_with_timeout, circuit_breaker_execute
    - RetrySafetyEngineUtils - Utility methods: timeout_handler

FUNCTION src\core\error_handling\retry_safety_engine.py:37:
  Function 'retry_operation': 52 LOC (limit: 50)
  Excess: 2 LOC
  Recommendation: Split into smaller functions

CLASS src\core\error_handling\coordination_error_handler.py:194:
  Class 'CoordinationErrorHandler': 106 LOC (limit: 100)
  Excess: 6 LOC
  Suggested splits:
    - CoordinationErrorHandlerCore - Core methods: execute_with_error_handling, register_circuit_breaker, register_retry_mechanism, get_error_report, add_recovery_strategy
    - CoordinationErrorHandlerUtils - Utility methods: get_component_status, cleanup_stale_data, reset_component, restart_coordination_service, reset_coordination_config

FILE src\core\error_handling\advanced_error_handler.py:
  File: 403 LOC (limit: 400)
  Excess: 3 LOC
  Suggested splits:
    - advanced_error_handler_core.py - Core classes: DegradationLevel, ResilienceConfig
    - advanced_error_handler_utils.py - Utility functions: get_advanced_error_handler, create_advanced_error_handler, get_all_error_handlers
    - advanced_error_handler_types.py - Type definitions and imports

CLASS src\core\error_handling\advanced_error_handler.py:152:
  Class 'AdvancedErrorHandler': 217 LOC (limit: 100)
  Excess: 117 LOC
  Suggested splits:
    - AdvancedErrorHandlerCore - Core methods: execute_with_resilience, get_resilience_status, reset
    - AdvancedErrorHandlerUtils - Utility methods:

FUNCTION src\core\error_handling\advanced_error_handler.py:196:
  Function 'execute_with_resilience': 51 LOC (limit: 50)
  Excess: 1 LOC
  Recommendation: Split into smaller functions

FILE src\core\error_handling\automated_recovery.py:
  File: 487 LOC (limit: 400)
  Excess: 87 LOC
  Suggested splits:
    - automated_recovery_core.py - Core classes: RecoveryStrategy, RecoveryState
    - automated_recovery_utils.py - Utility functions: get_recovery_manager, create_recovery_manager, get_all_recovery_managers
    - automated_recovery_types.py - Type definitions and imports

CLASS src\core\error_handling\automated_recovery.py:184:
  Class 'AutomatedRecoveryManager': 269 LOC (limit: 100)
  Excess: 169 LOC
  Suggested splits:
    - AutomatedRecoveryManagerCore - Core methods: register_component, initiate_recovery, recover_and_retry, get_recovery_status, reset
    - AutomatedRecoveryManagerUtils - Utility methods: monitor_worker

FUNCTION src\core\error_handling\automated_recovery.py:277:
  Function 'initiate_recovery': 85 LOC (limit: 50)
  Excess: 35 LOC
  Recommendation: Split into smaller functions

CLASS src\core\file_locking\file_locking_engine_operations.py:17:
  Class 'FileLockEngineOperations': 113 LOC (limit: 100)
  Excess: 13 LOC
  Suggested splits:
    - FileLockEngineOperationsCore - Core methods: acquire_lock, release_lock, cleanup_stale_locks
    - FileLockEngineOperationsUtils - Utility methods:

CLASS src\core\file_locking\file_locking_manager.py:20:
  Class 'FileLockManager': 121 LOC (limit: 100)
  Excess: 21 LOC
  Suggested splits:
    - FileLockManagerCore - Core methods: create_file_lock, acquire_lock, release_lock, is_locked, cleanup_stale_locks
    - FileLockManagerUtils - Utility methods: get_active_locks, get_lock_info, force_release_lock, get_metrics, reset_metrics

CLASS src\core\file_locking\operations\lock_queries.py:19:
  Class 'LockQueries': 107 LOC (limit: 100)
  Excess: 7 LOC
  Suggested splits:
    - LockQueriesCore - Core methods: get_locks_by_process, get_locks_by_thread, get_locks_by_owner, get_locks_by_type, get_locks_by_duration
    - LockQueriesUtils - Utility methods: get_locks_by_metadata, get_lock_statistics, find_conflicting_locks, get_lock_health_status

CLASS src\core\import_system\import_core.py:29:
  Class 'ImportSystemCore': 132 LOC (limit: 100)
  Excess: 32 LOC
  Suggested splits:
    - ImportSystemCoreCore - Core methods: os, sys, json, logging, threading
    - ImportSystemCoreUtils - Utility methods: time, re, datetime, Path, Any

CLASS src\core\import_system\import_utilities.py:17:
  Class 'ImportUtilities': 106 LOC (limit: 100)
  Excess: 6 LOC
  Suggested splits:
    - ImportUtilitiesCore - Core methods: get_module_path, is_module_available, get_import_path, resolve_relative_import, get_package_root
    - ImportUtilitiesUtils - Utility methods: list_module_contents, get_module_docstring, validate_import_syntax, get_import_dependencies, create_import_alias

CLASS src\core\import_system\import_registry.py:18:
  Class 'ImportRegistry': 107 LOC (limit: 100)
  Excess: 7 LOC
  Suggested splits:
    - ImportRegistryCore - Core methods: register_import, get_import, has_import, remove_import, clear_cache
    - ImportRegistryUtils - Utility methods: get_cache_stats, mark_failed_import, is_failed_import, clear_failed_imports, get_import_history

CLASS src\core\integration\analytics\analytics_engine.py:31:
  Class 'VectorIntegrationAnalyticsEngine': 136 LOC (limit: 100)
  Excess: 36 LOC
  Suggested splits:
    - VectorIntegrationAnalyticsEngineCore - Core methods: analyze_performance_data, get_trend_analysis, get_performance_forecast, get_optimization_recommendations, get_analytics_summary
    - VectorIntegrationAnalyticsEngineUtils - Utility methods: clear_all_caches, get_cached_trends, get_cached_forecasts, get_latest_recommendations, validate_forecast_accuracy

CLASS src\core\integration\analytics\forecast_generator.py:26:
  Class 'ForecastGenerator': 203 LOC (limit: 100)
  Excess: 103 LOC
  Suggested splits:
    - ForecastGeneratorCore - Core methods: generate_forecast, generate_multi_metric_forecast, validate_forecast_accuracy, get_forecast_summary, get_cached_forecasts
    - ForecastGeneratorUtils - Utility methods: clear_forecast_cache

FUNCTION src\core\integration\analytics\forecast_generator.py:79:
  Function '_generate_simple_forecast': 67 LOC (limit: 50)
  Excess: 17 LOC
  Recommendation: Split into smaller functions

CLASS src\core\integration\analytics\recommendation_engine_analysis.py:23:
  Class 'RecommendationEngineAnalysis': 128 LOC (limit: 100)
  Excess: 28 LOC
  Suggested splits:
    - RecommendationEngineAnalysisCore - Core methods:
    - RecommendationEngineAnalysisUtils - Utility methods:

CLASS src\core\integration\analytics\recommendation_engine_system.py:23:
  Class 'RecommendationEngineSystem': 166 LOC (limit: 100)
  Excess: 66 LOC
  Suggested splits:
    - RecommendationEngineSystemCore - Core methods:
    - RecommendationEngineSystemUtils - Utility methods:

CLASS src\core\integration_coordinators\unified_integration\monitor_engine.py:22:
  Class 'IntegrationMonitorEngine': 158 LOC (limit: 100)
  Excess: 58 LOC
  Suggested splits:
    - IntegrationMonitorEngineCore - Core methods: start_monitoring, stop_monitoring, add_callback, remove_callback, get_metrics
    - IntegrationMonitorEngineUtils - Utility methods: get_all_metrics, get_stats, check_integration_health, update_metrics

FUNCTION src\core\integration_coordinators\unified_integration\monitor_engine.py:74:
  Function 'check_integration_health': 51 LOC (limit: 50)
  Excess: 1 LOC
  Recommendation: Split into smaller functions

CLASS src\core\integration_coordinators\unified_integration\coordinators\config_manager.py:21:
  Class 'ConfigManager': 155 LOC (limit: 100)
  Excess: 55 LOC
  Suggested splits:
    - ConfigManagerCore - Core methods: export_configuration, validate_configuration, update_configuration, get_configuration_summary, get_configuration_history
    - ConfigManagerUtils - Utility methods: reset_configuration, get_manager_status

CLASS src\core\integration_coordinators\unified_integration\coordinators\health_monitor.py:21:
  Class 'HealthMonitor': 143 LOC (limit: 100)
  Excess: 43 LOC
  Suggested splits:
    - HealthMonitorCore - Core methods: get_system_health, add_monitoring_callback, set_alert_threshold, get_alert_thresholds, check_health_thresholds
    - HealthMonitorUtils - Utility methods: record_health_status, get_health_trends, get_monitor_status

CLASS src\core\intelligent_context\intelligent_context_emergency.py:17:
  Class 'IntelligentContextEmergency': 108 LOC (limit: 100)
  Excess: 8 LOC
  Suggested splits:
    - IntelligentContextEmergencyCore - Core methods: get_emergency_context, get_intervention_protocols, create_emergency_protocol, assess_emergency_severity, get_emergency_agents
    - IntelligentContextEmergencyUtils - Utility methods: calculate_emergency_response_time

CLASS src\core\intelligent_context\intelligent_context_engine.py:30:
  Class 'IntelligentContextEngine': 110 LOC (limit: 100)
  Excess: 10 LOC
  Suggested splits:
    - IntelligentContextEngineCore - Core methods: update_mission_context, get_mission_context, update_agent_capability, get_agent_capabilities, search_context
    - IntelligentContextEngineUtils - Utility methods: get_emergency_context, get_intervention_protocols, optimize_agent_assignment, analyze_success_patterns, assess_mission_risks

CLASS src\core\intelligent_context\intelligent_context_search.py:17:
  Class 'IntelligentContextSearch': 116 LOC (limit: 100)
  Excess: 16 LOC
  Suggested splits:
    - IntelligentContextSearchCore - Core methods: search_context, search_missions, search_agents, search_by_skills, search_by_mission_type
    - IntelligentContextSearchUtils - Utility methods:

CLASS src\core\intelligent_context\engines\agent_assignment_engine.py:26:
  Class 'AgentAssignmentEngine': 151 LOC (limit: 100)
  Excess: 51 LOC
  Suggested splits:
    - AgentAssignmentEngineCore - Core methods: optimize_agent_assignment, get_agent_availability_summary, get_engine_status
    - AgentAssignmentEngineUtils - Utility methods:

CLASS src\core\intelligent_context\engines\risk_assessment_engine.py:20:
  Class 'RiskAssessmentEngine': 122 LOC (limit: 100)
  Excess: 22 LOC
  Suggested splits:
    - RiskAssessmentEngineCore - Core methods: assess_mission_risks, calculate_risk_score, get_risk_summary, get_engine_status
    - RiskAssessmentEngineUtils - Utility methods:

CLASS src\core\intelligent_context\unified_intelligent_context\engine_search.py:17:
  Class 'IntelligentContextEngineSearch': 165 LOC (limit: 100)
  Excess: 65 LOC
  Suggested splits:
    - IntelligentContextEngineSearchCore - Core methods:
    - IntelligentContextEngineSearchUtils - Utility methods:

CLASS src\core\intelligent_context\unified_intelligent_context\search_operations.py:18:
  Class 'IntelligentContextSearchOperations': 167 LOC (limit: 100)
  Excess: 67 LOC
  Suggested splits:
    - IntelligentContextSearchOperationsCore - Core methods: search_contexts, search_with_pattern, optimize_search_query
    - IntelligentContextSearchOperationsUtils - Utility methods:

FILE src\core\managers\core_configuration_manager.py:
  File: 413 LOC (limit: 400)
  Excess: 13 LOC
  Suggested splits:
    - core_configuration_manager_core.py - Core classes: CoreConfigurationManager
    - core_configuration_manager_utils.py - Utility functions: __init__, initialize, execute
    - core_configuration_manager_types.py - Type definitions and imports

CLASS src\core\managers\core_configuration_manager.py:22:
  Class 'CoreConfigurationManager': 392 LOC (limit: 100)
  Excess: 292 LOC
  Suggested splits:
    - CoreConfigurationManagerCore - Core methods: initialize, execute, load_config, save_config, validate_config
    - CoreConfigurationManagerUtils - Utility methods: cleanup, get_status

FUNCTION src\core\managers\core_configuration_manager.py:161:
  Function 'validate_config': 51 LOC (limit: 50)
  Excess: 1 LOC
  Recommendation: Split into smaller functions

FILE src\core\managers\core_resource_manager.py:
  File: 523 LOC (limit: 400)
  Excess: 123 LOC
  Suggested splits:
    - core_resource_manager_core.py - Core classes: CoreResourceManager
    - core_resource_manager_utils.py - Utility functions: __init__, initialize, execute
    - core_resource_manager_types.py - Type definitions and imports

CLASS src\core\managers\core_resource_manager.py:24:
  Class 'CoreResourceManager': 500 LOC (limit: 100)
  Excess: 400 LOC
  Suggested splits:
    - CoreResourceManagerCore - Core methods: initialize, execute, create_resource, get_resource, update_resource
    - CoreResourceManagerUtils - Utility methods: delete_resource, cleanup, get_status

FUNCTION src\core\managers\core_resource_manager.py:253:
  Function '_handle_file_operation': 58 LOC (limit: 50)
  Excess: 8 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\managers\core_resource_manager.py:357:
  Function '_handle_context_operation': 86 LOC (limit: 50)
  Excess: 36 LOC
  Recommendation: Split into smaller functions

FILE src\core\managers\base_manager.py:
  File: 474 LOC (limit: 400)
  Excess: 74 LOC
  Suggested splits:
    - base_manager_core.py - Core classes: ManagerType, ManagerState
    - base_manager_utils.py - Utility functions: __init__, initialize, execute
    - base_manager_types.py - Type definitions and imports

CLASS src\core\managers\base_manager.py:61:
  Class 'BaseManager': 414 LOC (limit: 100)
  Excess: 314 LOC
  Suggested splits:
    - BaseManagerCore - Core methods: initialize, execute, cleanup, get_status, get_health_check
    - BaseManagerUtils - Utility methods: update_configuration, get_metrics, reset_metrics

FUNCTION src\core\managers\base_manager.py:112:
  Function 'initialize': 70 LOC (limit: 50)
  Excess: 20 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\managers\base_manager.py:183:
  Function 'execute': 74 LOC (limit: 50)
  Excess: 24 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\managers\base_manager.py:269:
  Function 'cleanup': 58 LOC (limit: 50)
  Excess: 8 LOC
  Recommendation: Split into smaller functions

FILE src\core\managers\core_monitoring_manager.py:
  File: 548 LOC (limit: 400)
  Excess: 148 LOC
  Suggested splits:
    - core_monitoring_manager_core.py - Core classes: AlertLevel, MetricType
    - core_monitoring_manager_utils.py - Utility functions: __init__, initialize, execute
    - core_monitoring_manager_types.py - Type definitions and imports

CLASS src\core\managers\core_monitoring_manager.py:51:
  Class 'CoreMonitoringManager': 498 LOC (limit: 100)
  Excess: 398 LOC
  Suggested splits:
    - CoreMonitoringManagerCore - Core methods: initialize, execute, create_alert, record_metric, create_widget
    - CoreMonitoringManagerUtils - Utility methods: cleanup, get_status, monitor

FUNCTION src\core\managers\core_monitoring_manager.py:157:
  Function 'record_metric': 59 LOC (limit: 50)
  Excess: 9 LOC
  Recommendation: Split into smaller functions

FILE src\core\managers\execution\base_execution_manager.py:
  File: 552 LOC (limit: 400)
  Excess: 152 LOC
  Suggested splits:
    - base_execution_manager_core.py - Core classes: TaskStatus, ProtocolType
    - base_execution_manager_utils.py - Utility functions: __init__, initialize, execute
    - base_execution_manager_types.py - Type definitions and imports

CLASS src\core\managers\execution\base_execution_manager.py:42:
  Class 'BaseExecutionManager': 511 LOC (limit: 100)
  Excess: 411 LOC
  Suggested splits:
    - BaseExecutionManagerCore - Core methods: initialize, execute, execute_task, register_protocol, get_execution_status
    - BaseExecutionManagerUtils - Utility methods: cleanup, get_status, processor

FUNCTION src\core\managers\execution\base_execution_manager.py:104:
  Function 'execute_task': 62 LOC (limit: 50)
  Excess: 12 LOC
  Recommendation: Split into smaller functions

CLASS src\core\managers\execution\execution_coordinator.py:21:
  Class 'ExecutionCoordinator': 151 LOC (limit: 100)
  Excess: 51 LOC
  Suggested splits:
    - ExecutionCoordinatorCore - Core methods: initialize, execute, cleanup, get_status, create_task
    - ExecutionCoordinatorUtils - Utility methods: execute_protocol, get_task_status

CLASS src\core\managers\monitoring\metrics_manager.py:21:
  Class 'MetricsManager': 285 LOC (limit: 100)
  Excess: 185 LOC
  Suggested splits:
    - MetricsManagerCore - Core methods: execute, get_status
    - MetricsManagerUtils - Utility methods:

FUNCTION src\core\managers\monitoring\metrics_manager.py:45:
  Function '_get_metric_aggregation': 97 LOC (limit: 50)
  Excess: 47 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\managers\monitoring\metrics_manager.py:143:
  Function '_get_metric_trends': 90 LOC (limit: 50)
  Excess: 40 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\managers\monitoring\metrics_manager.py:234:
  Function '_export_metrics': 55 LOC (limit: 50)
  Excess: 5 LOC
  Recommendation: Split into smaller functions

FILE src\core\managers\monitoring\base_monitoring_manager.py:
  File: 530 LOC (limit: 400)
  Excess: 130 LOC
  Suggested splits:
    - base_monitoring_manager_core.py - Core classes: AlertLevel, MetricType
    - base_monitoring_manager_utils.py - Utility functions: __init__, initialize, execute
    - base_monitoring_manager_types.py - Type definitions and imports

CLASS src\core\managers\monitoring\base_monitoring_manager.py:49:
  Class 'BaseMonitoringManager': 482 LOC (limit: 100)
  Excess: 382 LOC
  Suggested splits:
    - BaseMonitoringManagerCore - Core methods: initialize, execute, create_alert, record_metric, create_widget
    - BaseMonitoringManagerUtils - Utility methods: cleanup, get_status, monitor

FUNCTION src\core\managers\monitoring\base_monitoring_manager.py:149:
  Function 'record_metric': 53 LOC (limit: 50)
  Excess: 3 LOC
  Recommendation: Split into smaller functions

CLASS src\core\managers\results\performance_results_processor.py:18:
  Class 'PerformanceResultsProcessor': 114 LOC (limit: 100)
  Excess: 14 LOC
  Suggested splits:
    - PerformanceResultsProcessorCore - Core methods:
    - PerformanceResultsProcessorUtils - Utility methods:

CLASS src\core\managers\results\base_results_manager.py:32:
  Class 'BaseResultsManager': 309 LOC (limit: 100)
  Excess: 209 LOC
  Suggested splits:
    - BaseResultsManagerCore - Core methods: initialize, execute, process_results, cleanup, get_status
    - BaseResultsManagerUtils - Utility methods:

FUNCTION src\core\managers\results\base_results_manager.py:77:
  Function 'process_results': 74 LOC (limit: 50)
  Excess: 24 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\managers\results\analysis_results_processor.py:29:
  Function '_process_analysis_result': 54 LOC (limit: 50)
  Excess: 4 LOC
  Recommendation: Split into smaller functions

CLASS src\core\orchestration\intent_subsystems\debate_engine.py:196:
  Class 'DebateEngine': 117 LOC (limit: 100)
  Excess: 17 LOC
  Suggested splits:
    - DebateEngineCore - Core methods: create_debate, submit_argument, analyze_debate, conduct_voting, resolve_debate
    - DebateEngineUtils - Utility methods: get_session_status, list_active_sessions, get_debate_history

FILE src\core\orchestration\intent_subsystems\intervention_manager.py:
  File: 614 LOC (limit: 400)
  Excess: 214 LOC
  Suggested splits:
    - intervention_manager_core.py - Core classes: InterventionPriority, InterventionType
    - intervention_manager_utils.py - Utility functions: create_intervention_manager, detect_intervention_needed, execute_intervention
    - intervention_manager_types.py - Type definitions and imports

CLASS src\core\orchestration\intent_subsystems\intervention_manager.py:137:
  Class 'SwarmInterventionStrategy': 222 LOC (limit: 100)
  Excess: 122 LOC
  Suggested splits:
    - SwarmInterventionStrategyCore - Core methods: detect_intervention_needed, execute_intervention, validate_intervention_effectiveness
    - SwarmInterventionStrategyUtils - Utility methods:

CLASS src\core\orchestration\intent_subsystems\intervention_manager.py:361:
  Class 'InterventionManager': 182 LOC (limit: 100)
  Excess: 82 LOC
  Suggested splits:
    - InterventionManagerCore - Core methods: register_protocol, start_monitoring, stop_monitoring, trigger_intervention, detect_and_trigger
    - InterventionManagerUtils - Utility methods: get_intervention_status, get_intervention_stats

FILE src\core\orchestration\intent_subsystems\lifecycle_coordinator.py:
  File: 669 LOC (limit: 400)
  Excess: 269 LOC
  Suggested splits:
    - lifecycle_coordinator_core.py - Core classes: LifecyclePhase, LifecycleStatus
    - lifecycle_coordinator_utils.py - Utility functions: create_lifecycle_coordinator, agent_id, capabilities
    - lifecycle_coordinator_types.py - Type definitions and imports

CLASS src\core\orchestration\intent_subsystems\lifecycle_coordinator.py:152:
  Class 'SwarmLifecycleStrategy': 105 LOC (limit: 100)
  Excess: 5 LOC
  Suggested splits:
    - SwarmLifecycleStrategyCore - Core methods: should_transition, validate_transition, handle_transition_error
    - SwarmLifecycleStrategyUtils - Utility methods:

CLASS src\core\orchestration\intent_subsystems\lifecycle_coordinator.py:259:
  Class 'LifecycleCoordinator': 331 LOC (limit: 100)
  Excess: 231 LOC
  Suggested splits:
    - LifecycleCoordinatorCore - Core methods: register_agent, unregister_agent, start_coordination, stop_coordination, execute_lifecycle_cycle
    - LifecycleCoordinatorUtils - Utility methods: force_transition, get_agent_status, get_coordination_stats

FUNCTION src\core\orchestration\intent_subsystems\lifecycle_coordinator.py:484:
  Function '_transition_agent': 69 LOC (limit: 50)
  Excess: 19 LOC
  Recommendation: Split into smaller functions

FILE src\core\orchestration\intent_subsystems\message_router.py:
  File: 650 LOC (limit: 400)
  Excess: 250 LOC
  Suggested splits:
    - message_router_core.py - Core classes: MessagePriority, MessageType
    - message_router_utils.py - Utility functions: create_message_router, can_handle, handle
    - message_router_types.py - Type definitions and imports

CLASS src\core\orchestration\intent_subsystems\message_router.py:178:
  Class 'PyAutoGUIHandler': 101 LOC (limit: 100)
  Excess: 1 LOC
  Suggested splits:
    - PyAutoGUIHandlerCore - Core methods: can_handle, handle
    - PyAutoGUIHandlerUtils - Utility methods:

CLASS src\core\orchestration\intent_subsystems\message_router.py:376:
  Class 'MessageRouter': 202 LOC (limit: 100)
  Excess: 102 LOC
  Suggested splits:
    - MessageRouterCore - Core methods: route_message, send_message, send_bulk_messages, broadcast_message, get_delivery_status
    - MessageRouterUtils - Utility methods: get_delivery_stats, create_message

FUNCTION src\core\orchestration\intent_subsystems\message_router.py:206:
  Function 'handle': 73 LOC (limit: 50)
  Excess: 23 LOC
  Recommendation: Split into smaller functions

CLASS src\core\pattern_analysis\unified_pattern_analysis\analyzer.py:147:
  Class 'PatternAnalyzer': 145 LOC (limit: 100)
  Excess: 45 LOC
  Suggested splits:
    - PatternAnalyzerCore - Core methods: initialize, analyze_performance_patterns, analyze_coordination_patterns, generate_optimization_recommendations, get_analysis_summary
    - PatternAnalyzerUtils - Utility methods: shutdown

CLASS src\core\performance\performance_monitoring_system.py:61:
  Class 'PerformanceMonitoringSystem': 173 LOC (limit: 100)
  Excess: 73 LOC
  Suggested splits:
    - PerformanceMonitoringSystemCore - Core methods: start_monitoring, stop_monitoring, collect_metrics, generate_report, get_system_status
    - PerformanceMonitoringSystemUtils - Utility methods: get_metrics_summary, cleanup

FUNCTION src\core\performance\performance_monitoring_system.py:99:
  Function 'collect_metrics': 51 LOC (limit: 50)
  Excess: 1 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\performance\performance_cli.py:145:
  Function 'handle_dashboard_command': 53 LOC (limit: 50)
  Excess: 3 LOC
  Recommendation: Split into smaller functions

CLASS src\core\performance\unified_dashboard\reporter.py:22:
  Class 'DashboardReporter': 229 LOC (limit: 100)
  Excess: 129 LOC
  Suggested splits:
    - DashboardReporterCore - Core methods: initialize, generate_metrics_report, generate_alerts_report, generate_performance_report, export_report
    - DashboardReporterUtils - Utility methods: get_report_history, cleanup_old_reports, get_reporter_stats, shutdown

CLASS src\core\performance\unified_dashboard\engine.py:31:
  Class 'DashboardEngine': 184 LOC (limit: 100)
  Excess: 84 LOC
  Suggested splits:
    - DashboardEngineCore - Core methods: add_metric, get_metric, get_metrics_by_type, update_metric, remove_metric
    - DashboardEngineUtils - Utility methods: get_all_metrics, add_widget, get_widget, get_all_widgets, update_widget

CLASS src\core\performance\unified_dashboard\widget_manager.py:22:
  Class 'WidgetManager': 139 LOC (limit: 100)
  Excess: 39 LOC
  Suggested splits:
    - WidgetManagerCore - Core methods: add_widget, get_widget, get_all_widgets, update_widget, remove_widget
    - WidgetManagerUtils - Utility methods: add_config, get_config, get_all_configs, update_config, remove_config

CLASS src\core\refactoring\analysis_tools_core.py:25:
  Class 'ArchitectureAnalyzer': 173 LOC (limit: 100)
  Excess: 73 LOC
  Suggested splits:
    - ArchitectureAnalyzerCore - Core methods: analyze_file, find_duplicates, identify_patterns, generate_suggestions
    - ArchitectureAnalyzerUtils - Utility methods:

FUNCTION src\core\refactoring\file_analysis.py:20:
  Function 'analyze_file_for_extraction': 54 LOC (limit: 50)
  Excess: 4 LOC
  Recommendation: Split into smaller functions

FILE src\core\refactoring\refactor_tools.py:
  File: 494 LOC (limit: 400)
  Excess: 94 LOC
  Suggested splits:
    - refactor_tools_core.py - Core classes: ExtractionPlan, RefactorTools
    - refactor_tools_utils.py - Utility functions: get_refactor_tools, create_extraction_plan, execute_extraction
    - refactor_tools_types.py - Type definitions and imports

CLASS src\core\refactoring\tools\consolidation_tools.py:29:
  Class 'ConsolidationTools': 106 LOC (limit: 100)
  Excess: 6 LOC
  Suggested splits:
    - ConsolidationToolsCore - Core methods: create_consolidation_plan, execute_consolidation, analyze_duplicates
    - ConsolidationToolsUtils - Utility methods:

FILE src\core\refactoring\tools\extraction_tools.py:
  File: 454 LOC (limit: 400)
  Excess: 54 LOC
  Suggested splits:
    - extraction_tools_core.py - Core classes: ExtractionPlan, ExtractionTools
    - extraction_tools_utils.py - Utility functions: __init__, create_extraction_plan, execute_extraction
    - extraction_tools_types.py - Type definitions and imports

CLASS src\core\refactoring\tools\extraction_tools.py:30:
  Class 'ExtractionTools': 425 LOC (limit: 100)
  Excess: 325 LOC
  Suggested splits:
    - ExtractionToolsCore - Core methods: create_extraction_plan, execute_extraction
    - ExtractionToolsUtils - Utility methods:

FUNCTION src\core\refactoring\tools\extraction_tools.py:117:
  Function '_extract_models': 62 LOC (limit: 50)
  Excess: 12 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\refactoring\tools\extraction_tools.py:180:
  Function '_extract_utils': 113 LOC (limit: 50)
  Excess: 63 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\refactoring\tools\extraction_tools.py:294:
  Function '_extract_core': 161 LOC (limit: 50)
  Excess: 111 LOC
  Recommendation: Split into smaller functions

CLASS src\core\refactoring\tools\optimization_tools.py:27:
  Class 'OptimizationTools': 275 LOC (limit: 100)
  Excess: 175 LOC
  Suggested splits:
    - OptimizationToolsCore - Core methods: create_optimization_plan, execute_optimization
    - OptimizationToolsUtils - Utility methods:

CLASS src\core\ssot\unified_ssot\execution\task_executor.py:20:
  Class 'TaskExecutor': 125 LOC (limit: 100)
  Excess: 25 LOC
  Suggested splits:
    - TaskExecutorCore - Core methods:
    - TaskExecutorUtils - Utility methods:

CLASS src\core\ssot\unified_ssot\validators\basic_validator.py:17:
  Class 'BasicValidator': 109 LOC (limit: 100)
  Excess: 9 LOC
  Suggested splits:
    - BasicValidatorCore - Core methods: validate_basic_fields, validate_component_metadata, get_validation_score
    - BasicValidatorUtils - Utility methods:

CLASS src\core\ssot\unified_ssot\validators\standard_validator.py:18:
  Class 'StandardValidator': 144 LOC (limit: 100)
  Excess: 44 LOC
  Suggested splits:
    - StandardValidatorCore - Core methods: validate_standard_fields, validate_component_relationships, get_validation_score
    - StandardValidatorUtils - Utility methods:

CLASS src\core\ssot\unified_ssot\validators\strict_validator.py:17:
  Class 'StrictValidator': 190 LOC (limit: 100)
  Excess: 90 LOC
  Suggested splits:
    - StrictValidatorCore - Core methods: validate_strict_requirements, validate_component_integrity, get_validation_score
    - StrictValidatorUtils - Utility methods:

CLASS src\core\utils\message_queue_utils.py:13:
  Class 'MessageQueueUtils': 202 LOC (limit: 100)
  Excess: 102 LOC
  Suggested splits:
    - MessageQueueUtilsCore - Core methods: calculate_priority_score, calculate_retry_delay, is_entry_ready_for_retry, is_entry_expired, build_priority_heap
    - MessageQueueUtilsUtils - Utility methods: get_next_entries_for_processing, update_entry_for_retry, mark_entry_delivered, mark_entry_failed, mark_entry_processing

CLASS src\core\utils\agent_matching.py:22:
  Class 'AgentMatchingUtils': 131 LOC (limit: 100)
  Excess: 31 LOC
  Suggested splits:
    - AgentMatchingUtilsCore - Core methods: calculate_agent_match_score, get_agent_type_match_score, rank_agents_by_capability, get_best_agent_for_task
    - AgentMatchingUtilsUtils - Utility methods:

CLASS src\core\validation\coordination_validator.py:51:
  Class 'CoordinationValidator': 256 LOC (limit: 100)
  Excess: 156 LOC
  Suggested splits:
    - CoordinationValidatorCore - Core methods: validate_message_structure, validate_coordination_system, validate_performance_metrics, validate_security_compliance, run_comprehensive_validation
    - CoordinationValidatorUtils - Utility methods: get_validation_report

CLASS src\core\validation\performance_benchmark\benchmark_runner_core.py:22:
  Class 'BenchmarkRunnerCore': 113 LOC (limit: 100)
  Excess: 13 LOC
  Suggested splits:
    - BenchmarkRunnerCoreCore - Core methods: add_suite, run_benchmark, run_suite, run_all_suites, get_metrics_summary
    - BenchmarkRunnerCoreUtils - Utility methods: generate_report, clear_metrics, get_benchmark_history

FUNCTION src\core\validation\performance_benchmark\benchmark_runner_core.py:35:
  Function 'run_benchmark': 58 LOC (limit: 50)
  Excess: 8 LOC
  Recommendation: Split into smaller functions

CLASS src\core\validation\performance_benchmark\benchmark_runner_operations.py:23:
  Class 'BenchmarkRunnerOperations': 224 LOC (limit: 100)
  Excess: 124 LOC
  Suggested splits:
    - BenchmarkRunnerOperationsCore - Core methods: run_parallel_benchmarks, run_benchmark, run_stress_test, compare_benchmarks, export_results
    - BenchmarkRunnerOperationsUtils - Utility methods: get_performance_trends, run_single_benchmark

FUNCTION src\core\validation\performance_benchmark\benchmark_runner_operations.py:59:
  Function 'run_benchmark': 58 LOC (limit: 50)
  Excess: 8 LOC
  Recommendation: Split into smaller functions

CLASS src\core\vector_strategic_oversight\unified_strategic_oversight\analyzer_core.py:29:
  Class 'StrategicOversightAnalyzer': 189 LOC (limit: 100)
  Excess: 89 LOC
  Suggested splits:
    - StrategicOversightAnalyzerCore - Core methods: initialize, analyze_swarm_coordination, analyze_agent_performance, generate_strategic_recommendations, analyze_system_health
    - StrategicOversightAnalyzerUtils - Utility methods: get_analysis_summary

CLASS src\core\vector_strategic_oversight\unified_strategic_oversight\factory_core.py:35:
  Class 'StrategicOversightFactoryCore': 133 LOC (limit: 100)
  Excess: 33 LOC
  Suggested splits:
    - StrategicOversightFactoryCoreCore - Core methods: create_strategic_oversight_report, create_swarm_coordination_insight, create_strategic_recommendation, create_agent_performance_metrics, create_swarm_coordination_status
    - StrategicOversightFactoryCoreUtils - Utility methods: create_strategic_mission

CLASS src\core\vector_strategic_oversight\unified_strategic_oversight\factory_extended.py:34:
  Class 'StrategicOversightFactoryExtended': 140 LOC (limit: 100)
  Excess: 40 LOC
  Suggested splits:
    - StrategicOversightFactoryExtendedCore - Core methods: create_vector_database_metrics, create_system_health_metrics, create_comprehensive_report, create_emergency_insight, create_high_priority_recommendation
    - StrategicOversightFactoryExtendedUtils - Utility methods: create_mission_batch

CLASS src\core\vector_strategic_oversight\unified_strategic_oversight\factory_methods.py:34:
  Class 'StrategicOversightFactory': 190 LOC (limit: 100)
  Excess: 90 LOC
  Suggested splits:
    - StrategicOversightFactoryCore - Core methods: create_oversight_report, create_swarm_insight, create_strategic_recommendation, create_agent_performance_metrics, create_swarm_coordination_status
    - StrategicOversightFactoryUtils - Utility methods: create_vector_database_metrics, create_system_health_metrics, create_strategic_mission, create_quick_mission, create_emergency_mission

CLASS src\core\vector_strategic_oversight\unified_strategic_oversight\analyzers\prediction_analyzer.py:33:
  Class 'PredictionAnalyzer': 155 LOC (limit: 100)
  Excess: 55 LOC
  Suggested splits:
    - PredictionAnalyzerCore - Core methods: add_historical_data, get_prediction_summary
    - PredictionAnalyzerUtils - Utility methods:

CLASS src\core\vector_strategic_oversight\unified_strategic_oversight\analyzers\swarm_analyzer.py:17:
  Class 'SwarmCoordinationAnalyzer': 133 LOC (limit: 100)
  Excess: 33 LOC
  Suggested splits:
    - SwarmCoordinationAnalyzerCore - Core methods:
    - SwarmCoordinationAnalyzerUtils - Utility methods:

CLASS src\core\quality\quality_assurance_system.py:27:
  Class 'QualityAssuranceSystem': 339 LOC (limit: 100)
  Excess: 239 LOC
  Suggested splits:
    - QualityAssuranceSystemCore - Core methods: run_comprehensive_quality_check
    - QualityAssuranceSystemUtils - Utility methods:

FILE src\core\quality\quality_gates.py:
  File: 617 LOC (limit: 400)
  Excess: 217 LOC
  Suggested splits:
    - quality_gates_core.py - Core classes: GateStatus, QualityGate
    - quality_gates_utils.py - Utility functions: main, __init__, run_quality_gate_suite
    - quality_gates_types.py - Type definitions and imports

CLASS src\core\quality\quality_gates.py:49:
  Class 'QualityGates': 533 LOC (limit: 100)
  Excess: 433 LOC
  Suggested splits:
    - QualityGatesCore - Core methods: run_quality_gate_suite
    - QualityGatesUtils - Utility methods:

FUNCTION src\core\quality\quality_gates.py:71:
  Function 'run_quality_gate_suite': 62 LOC (limit: 50)
  Excess: 12 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\quality\quality_gates.py:134:
  Function '_check_test_coverage': 54 LOC (limit: 50)
  Excess: 4 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\quality\quality_gates.py:378:
  Function '_check_documentation': 73 LOC (limit: 50)
  Excess: 23 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\quality\quality_gates.py:452:
  Function '_check_complexity': 57 LOC (limit: 50)
  Excess: 7 LOC
  Recommendation: Split into smaller functions

FILE src\core\quality\testing_coordinator.py:
  File: 586 LOC (limit: 400)
  Excess: 186 LOC
  Suggested splits:
    - testing_coordinator_core.py - Core classes: TestType, TestResult
    - testing_coordinator_utils.py - Utility functions: main, __init__, run_comprehensive_test_suite
    - testing_coordinator_types.py - Type definitions and imports

CLASS src\core\quality\testing_coordinator.py:54:
  Class 'TestingCoordinator': 494 LOC (limit: 100)
  Excess: 394 LOC
  Suggested splits:
    - TestingCoordinatorCore - Core methods: run_comprehensive_test_suite
    - TestingCoordinatorUtils - Utility methods:

FUNCTION src\core\quality\testing_coordinator.py:109:
  Function '_run_unit_tests': 54 LOC (limit: 50)
  Excess: 4 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\quality\testing_coordinator.py:317:
  Function '_run_security_tests': 63 LOC (limit: 50)
  Excess: 13 LOC
  Recommendation: Split into smaller functions

FILE src\core\quality\v2_compliance_executor.py:
  File: 472 LOC (limit: 400)
  Excess: 72 LOC
  Suggested splits:
    - v2_compliance_executor_core.py - Core classes: V2Violation, ModularizationPlan
    - v2_compliance_executor_utils.py - Utility functions: main, __init__, execute_v2_compliance_audit
    - v2_compliance_executor_types.py - Type definitions and imports

CLASS src\core\quality\v2_compliance_executor.py:37:
  Class 'V2ComplianceExecutor': 387 LOC (limit: 100)
  Excess: 287 LOC
  Suggested splits:
    - V2ComplianceExecutorCore - Core methods: execute_v2_compliance_audit, execute_automated_modularization
    - V2ComplianceExecutorUtils - Utility methods:

FUNCTION src\core\quality\v2_compliance_executor.py:103:
  Function '_analyze_modularization_opportunities': 67 LOC (limit: 50)
  Excess: 17 LOC
  Recommendation: Split into smaller functions

CLASS src\core\agent_communication\agent_communication_engine_operations.py:37:
  Class 'AgentCommunicationEngineOperations': 107 LOC (limit: 100)
  Excess: 7 LOC
  Suggested splits:
    - AgentCommunicationEngineOperationsCore - Core methods: get_agent_status_file_path
    - AgentCommunicationEngineOperationsUtils - Utility methods:

CLASS src\core\semantic\semantic_router.py:12:
  Class 'SemanticRouter': 108 LOC (limit: 100)
  Excess: 8 LOC
  Suggested splits:
    - SemanticRouterCore - Core methods: route
    - SemanticRouterUtils - Utility methods:

FILE src\core\health\monitoring\health_alerting.py:
  File: 721 LOC (limit: 400)
  Excess: 321 LOC
  Suggested splits:
    - health_alerting_core.py - Core classes: AlertChannel, AlertPriority
    - health_alerting_utils.py - Utility functions: __init__, _load_configuration, _create_default_configuration
    - health_alerting_types.py - Type definitions and imports

CLASS src\core\health\monitoring\health_alerting.py:114:
  Class 'HealthAlertingSystem': 608 LOC (limit: 100)
  Excess: 508 LOC
  Suggested splits:
    - HealthAlertingSystemCore - Core methods: start_alerting, stop_alerting, process_health_event, resolve_alert, get_alert_statistics
    - HealthAlertingSystemUtils - Utility methods: export_alert_data

FUNCTION src\core\health\monitoring\health_alerting.py:436:
  Function '_handle_email_alert': 54 LOC (limit: 50)
  Excess: 4 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\health\monitoring\health_alerting.py:491:
  Function '_handle_slack_alert': 51 LOC (limit: 50)
  Excess: 1 LOC
  Recommendation: Split into smaller functions

FILE src\core\health\monitoring\health_dashboard.py:
  File: 636 LOC (limit: 400)
  Excess: 236 LOC
  Suggested splits:
    - health_dashboard_core.py - Core classes: DashboardWidget, DashboardLayout
    - health_dashboard_utils.py - Utility functions: __init__, _create_default_layout, _setup_routes
    - health_dashboard_types.py - Type definitions and imports

CLASS src\core\health\monitoring\health_dashboard.py:56:
  Class 'HealthMonitoringDashboard': 581 LOC (limit: 100)
  Excess: 481 LOC
  Suggested splits:
    - HealthMonitoringDashboardCore - Core methods: start_dashboard, stop_dashboard, dashboard, get_health_data, get_metrics
    - HealthMonitoringDashboardUtils - Utility methods: get_alerts, get_metric_history, get_services, export_data

FUNCTION src\core\health\monitoring\health_dashboard.py:89:
  Function '_create_default_layout': 53 LOC (limit: 50)
  Excess: 3 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\health\monitoring\health_dashboard.py:143:
  Function '_setup_routes': 80 LOC (limit: 50)
  Excess: 30 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\health\monitoring\health_dashboard.py:263:
  Function '_get_dashboard_html': 340 LOC (limit: 50)
  Excess: 290 LOC
  Recommendation: Split into smaller functions

FILE src\core\health\monitoring\health_monitoring_service.py:
  File: 639 LOC (limit: 400)
  Excess: 239 LOC
  Suggested splits:
    - health_monitoring_service_core.py - Core classes: ServiceType, AlertSeverity
    - health_monitoring_service_utils.py - Utility functions: __init__, _initialize_components, _load_configuration
    - health_monitoring_service_types.py - Type definitions and imports

CLASS src\core\health\monitoring\health_monitoring_service.py:138:
  Class 'HealthMonitoringService': 502 LOC (limit: 100)
  Excess: 402 LOC
  Suggested splits:
    - HealthMonitoringServiceCore - Core methods: start_monitoring, stop_monitoring, add_alert_handler, get_health_snapshot, export_health_data
    - HealthMonitoringServiceUtils - Utility methods:

FUNCTION src\core\health\monitoring\health_monitoring_service.py:395:
  Function '_collect_system_metrics': 54 LOC (limit: 50)
  Excess: 4 LOC
  Recommendation: Split into smaller functions

FILE src\core\health\monitoring\health_monitoring_system.py:
  File: 437 LOC (limit: 400)
  Excess: 37 LOC
  Suggested splits:
    - health_monitoring_system_core.py - Core classes: HealthMonitoringSystem
    - health_monitoring_system_utils.py - Utility functions: main, __init__, _initialize_components
    - health_monitoring_system_types.py - Type definitions and imports

CLASS src\core\health\monitoring\health_monitoring_system.py:45:
  Class 'HealthMonitoringSystem': 332 LOC (limit: 100)
  Excess: 232 LOC
  Suggested splits:
    - HealthMonitoringSystemCore - Core methods: start, stop, start_dashboard, stop_dashboard, get_health_snapshot
    - HealthMonitoringSystemUtils - Utility methods: get_system_status, export_system_data, get_component_status, configure_alert_channel, create_custom_alert_rule

FUNCTION src\core\health\monitoring\health_monitoring_system.py:379:
  Function 'main': 55 LOC (limit: 50)
  Excess: 5 LOC
  Recommendation: Split into smaller functions

FILE src\core\backup_disaster_recovery\backup_system_core.py:
  File: 712 LOC (limit: 400)
  Excess: 312 LOC
  Suggested splits:
    - backup_system_core_core.py - Core classes: BackupSystemCore
    - backup_system_core_utils.py - Utility functions: create_backup_system, __init__, _load_config
    - backup_system_core_types.py - Type definitions and imports

CLASS src\core\backup_disaster_recovery\backup_system_core.py:46:
  Class 'BackupSystemCore': 657 LOC (limit: 100)
  Excess: 557 LOC
  Suggested splits:
    - BackupSystemCoreCore - Core methods:
    - BackupSystemCoreUtils - Utility methods:

FUNCTION src\core\backup_disaster_recovery\backup_system_core.py:67:
  Function '_load_config': 57 LOC (limit: 50)
  Excess: 7 LOC
  Recommendation: Split into smaller functions

FILE src\core\backup_disaster_recovery\backup_scheduler.py:
  File: 456 LOC (limit: 400)
  Excess: 56 LOC
  Suggested splits:
    - backup_scheduler_core.py - Core classes: BackupScheduler
    - backup_scheduler_utils.py - Utility functions: create_backup_scheduler, __init__, _load_config
    - backup_scheduler_types.py - Type definitions and imports

CLASS src\core\backup_disaster_recovery\backup_scheduler.py:38:
  Class 'BackupScheduler': 409 LOC (limit: 100)
  Excess: 309 LOC
  Suggested splits:
    - BackupSchedulerCore - Core methods: stop
    - BackupSchedulerUtils - Utility methods:

FUNCTION src\core\backup_disaster_recovery\backup_scheduler.py:53:
  Function '_load_config': 58 LOC (limit: 50)
  Excess: 8 LOC
  Recommendation: Split into smaller functions

FILE src\core\backup_disaster_recovery\business_continuity_planner.py:
  File: 886 LOC (limit: 400)
  Excess: 486 LOC
  Suggested splits:
    - business_continuity_planner_core.py - Core classes: DisasterType, RecoveryPriority
    - business_continuity_planner_utils.py - Utility functions: create_business_continuity_planner, __init__, _load_config
    - business_continuity_planner_types.py - Type definitions and imports

CLASS src\core\backup_disaster_recovery\business_continuity_planner.py:61:
  Class 'BusinessContinuityPlanner': 816 LOC (limit: 100)
  Excess: 716 LOC
  Suggested splits:
    - BusinessContinuityPlannerCore - Core methods:
    - BusinessContinuityPlannerUtils - Utility methods:

FUNCTION src\core\backup_disaster_recovery\business_continuity_planner.py:76:
  Function '_load_config': 160 LOC (limit: 50)
  Excess: 110 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\backup_disaster_recovery\business_continuity_planner.py:487:
  Function '_create_recovery_phases': 61 LOC (limit: 50)
  Excess: 11 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\backup_disaster_recovery\business_continuity_planner.py:608:
  Function '_create_testing_procedures': 54 LOC (limit: 50)
  Excess: 4 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\backup_disaster_recovery\business_continuity_planner.py:663:
  Function 'execute_recovery_plan': 52 LOC (limit: 50)
  Excess: 2 LOC
  Recommendation: Split into smaller functions

FILE src\core\backup_disaster_recovery\backup_monitoring.py:
  File: 1050 LOC (limit: 400)
  Excess: 650 LOC
  Suggested splits:
    - backup_monitoring_core.py - Core classes: BackupMonitoringSystem
    - backup_monitoring_utils.py - Utility functions: create_backup_monitoring_system, __init__, _load_config
    - backup_monitoring_types.py - Type definitions and imports

CLASS src\core\backup_disaster_recovery\backup_monitoring.py:40:
  Class 'BackupMonitoringSystem': 1001 LOC (limit: 100)
  Excess: 901 LOC
  Suggested splits:
    - BackupMonitoringSystemCore - Core methods:
    - BackupMonitoringSystemUtils - Utility methods:

FUNCTION src\core\backup_disaster_recovery\backup_monitoring.py:56:
  Function '_load_config': 94 LOC (limit: 50)
  Excess: 44 LOC
  Recommendation: Split into smaller functions

FUNCTION src\core\backup_disaster_recovery\backup_monitoring.py:151:
  Function '_init_monitoring_database': 63 LOC (limit: 50)
  Excess: 13 LOC
  Recommendation: Split into smaller functions

FILE src\core\backup_disaster_recovery\backup_cli.py:
  File: 610 LOC (limit: 400)
  Excess: 210 LOC
  Suggested splits:
    - backup_cli_core.py - Core classes: BackupCLI
    - backup_cli_utils.py - Utility functions: main, __init__, run
    - backup_cli_types.py - Type definitions and imports

CLASS src\core\backup_disaster_recovery\backup_cli.py:46:
  Class 'BackupCLI': 555 LOC (limit: 100)
  Excess: 455 LOC
  Suggested splits:
    - BackupCLICore - Core methods:
    - BackupCLIUtils - Utility methods:

CLASS src\application\use_cases\assign_task_uc.py:40:
  Class 'AssignTaskUseCase': 102 LOC (limit: 100)
  Excess: 2 LOC
  Suggested splits:
    - AssignTaskUseCaseCore - Core methods: execute
    - AssignTaskUseCaseUtils - Utility methods:

FUNCTION src\application\use_cases\assign_task_uc.py:62:
  Function 'execute': 80 LOC (limit: 50)
  Excess: 30 LOC
  Recommendation: Split into smaller functions

FUNCTION src\application\use_cases\complete_task_uc.py:59:
  Function 'execute': 69 LOC (limit: 50)
  Excess: 19 LOC
  Recommendation: Split into smaller functions

CLASS src\architecture\unified_architecture_core.py:56:
  Class 'UnifiedArchitectureCore': 102 LOC (limit: 100)
  Excess: 2 LOC
  Suggested splits:
    - UnifiedArchitectureCoreCore - Core methods: register_component, get_component, list_components, update_component_metrics, get_architecture_health
    - UnifiedArchitectureCoreUtils - Utility methods: consolidate_architecture

CLASS src\automation\ui_onboarding.py:66:
  Class 'UIOnboarder': 125 LOC (limit: 100)
  Excess: 25 LOC
  Suggested splits:
    - UIOnboarderCore - Core methods: perform
    - UIOnboarderUtils - Utility methods:

CLASS src\discord_commander\agent_communication_engine_operations.py:25:
  Class 'AgentCommunicationEngineOperations': 107 LOC (limit: 100)
  Excess: 7 LOC
  Suggested splits:
    - AgentCommunicationEngineOperationsCore - Core methods: get_agent_status_file_path
    - AgentCommunicationEngineOperationsUtils - Utility methods:

CLASS src\discord_commander\command_router.py:24:
  Class 'CommandRouter': 189 LOC (limit: 100)
  Excess: 89 LOC
  Suggested splits:
    - CommandRouterCore - Core methods: parse_command, validate_command, get_command_metadata, get_all_commands, generate_command_id
    - CommandRouterUtils - Utility methods: sanitize_content, create_command_context

FUNCTION src\discord_commander\command_router.py:27:
  Function '__init__': 56 LOC (limit: 50)
  Excess: 6 LOC
  Recommendation: Split into smaller functions

FILE src\discord_commander\discord_agent_bot.py:
  File: 661 LOC (limit: 400)
  Excess: 261 LOC
  Suggested splits:
    - discord_agent_bot_core.py - Core classes: DiscordAgentBot, DiscordAgentBotManager
    - discord_agent_bot_utils.py - Utility functions: get_discord_bot_manager, start_discord_agent_bot, test_discord_bot_connection
    - discord_agent_bot_types.py - Type definitions and imports

CLASS src\discord_commander\discord_agent_bot.py:93:
  Class 'DiscordAgentBot': 440 LOC (limit: 100)
  Excess: 340 LOC
  Suggested splits:
    - DiscordAgentBotCore - Core methods: get_command_stats
    - DiscordAgentBotUtils - Utility methods:

FUNCTION src\discord_commander\discord_agent_bot.py:96:
  Function '__init__': 54 LOC (limit: 50)
  Excess: 4 LOC
  Recommendation: Split into smaller functions

FUNCTION src\discord_commander\discord_agent_bot.py:229:
  Function '_send_startup_notification': 63 LOC (limit: 50)
  Excess: 13 LOC
  Recommendation: Split into smaller functions

FUNCTION src\discord_commander\discord_agent_bot.py:334:
  Function 'process_command': 154 LOC (limit: 50)
  Excess: 104 LOC
  Recommendation: Split into smaller functions

FILE src\discord_commander\discord_agent_bot_backup.py:
  File: 718 LOC (limit: 400)
  Excess: 318 LOC
  Suggested splits:
    - discord_agent_bot_backup_core.py - Core classes: DiscordAgentBot, DiscordAgentBotManager
    - discord_agent_bot_backup_utils.py - Utility functions: get_discord_bot_manager, start_discord_agent_bot, test_discord_bot_connection
    - discord_agent_bot_backup_types.py - Type definitions and imports

CLASS src\discord_commander\discord_agent_bot_backup.py:55:
  Class 'DiscordAgentBot': 257 LOC (limit: 100)
  Excess: 157 LOC
  Suggested splits:
    - DiscordAgentBotCore - Core methods: get_command_stats
    - DiscordAgentBotUtils - Utility methods:

FUNCTION src\discord_commander\discord_agent_bot_backup.py:169:
  Function 'process_command': 132 LOC (limit: 50)
  Excess: 82 LOC
  Recommendation: Split into smaller functions

FUNCTION src\discord_commander\discord_agent_bot_backup.py:415:
  Function '_handle_swarm_command': 52 LOC (limit: 50)
  Excess: 2 LOC
  Recommendation: Split into smaller functions

FILE src\discord_commander\discord_agent_bot_clean.py:
  File: 436 LOC (limit: 400)
  Excess: 36 LOC
  Suggested splits:
    - discord_agent_bot_clean_core.py - Core classes: DiscordAgentBot, DiscordAgentBotManager
    - discord_agent_bot_clean_utils.py - Utility functions: get_discord_bot_manager, start_discord_agent_bot, test_discord_bot_connection
    - discord_agent_bot_clean_types.py - Type definitions and imports

CLASS src\discord_commander\discord_agent_bot_clean.py:51:
  Class 'DiscordAgentBot': 257 LOC (limit: 100)
  Excess: 157 LOC
  Suggested splits:
    - DiscordAgentBotCore - Core methods: get_command_stats
    - DiscordAgentBotUtils - Utility methods:

FUNCTION src\discord_commander\discord_agent_bot_clean.py:165:
  Function 'process_command': 132 LOC (limit: 50)
  Excess: 82 LOC
  Recommendation: Split into smaller functions

CLASS src\discord_commander\discord_commander.py:26:
  Class 'DiscordCommander': 249 LOC (limit: 100)
  Excess: 149 LOC
  Suggested splits:
    - DiscordCommanderCore - Core methods: stop_monitoring
    - DiscordCommanderUtils - Utility methods:

FILE src\discord_commander\discord_webhook_integration.py:
  File: 672 LOC (limit: 400)
  Excess: 272 LOC
  Suggested splits:
    - discord_webhook_integration_core.py - Core classes: DiscordWebhookIntegration
    - discord_webhook_integration_utils.py - Utility functions: __init__, _load_webhook_url, send_devlog_notification
    - discord_webhook_integration_types.py - Type definitions and imports

CLASS src\discord_commander\discord_webhook_integration.py:31:
  Class 'DiscordWebhookIntegration': 642 LOC (limit: 100)
  Excess: 542 LOC
  Suggested splits:
    - DiscordWebhookIntegrationCore - Core methods: send_devlog_notification, send_agent_status_notification, send_swarm_coordination_notification, send_contract_assignment_notification, send_mission_progress_notification
    - DiscordWebhookIntegrationUtils - Utility methods: send_error_recovery_notification, send_coordination_event_notification, get_coordination_status, update_agent_status_cache, clear_coordination_cache

FILE src\discord_commander\embeds.py:
  File: 526 LOC (limit: 400)
  Excess: 126 LOC
  Suggested splits:
    - embeds_core.py - Core classes: EmbedBuilder, EmbedManager
    - embeds_utils.py - Utility functions: create_embed_builder, create_embed_manager, create_base_embed
    - embeds_types.py - Type definitions and imports

CLASS src\discord_commander\embeds.py:25:
  Class 'EmbedBuilder': 431 LOC (limit: 100)
  Excess: 331 LOC
  Suggested splits:
    - EmbedBuilderCore - Core methods: create_base_embed, add_footer, create_prompt_embed, update_prompt_embed_success, update_prompt_embed_error
    - EmbedBuilderUtils - Utility methods: create_direct_agent_embed, create_urgent_broadcast_embed, create_status_embed, update_status_embed, create_swarm_embed

FUNCTION src\discord_commander\embeds.py:318:
  Function 'create_help_embed': 92 LOC (limit: 50)
  Excess: 42 LOC
  Recommendation: Split into smaller functions

CLASS src\discord_commander\handlers_agent_summary.py:19:
  Class 'AgentSummary': 122 LOC (limit: 100)
  Excess: 22 LOC
  Suggested splits:
    - AgentSummaryCore - Core methods:
    - AgentSummaryUtils - Utility methods:

CLASS src\discord_commander\handlers_agents.py:32:
  Class 'AgentCommandHandlers': 341 LOC (limit: 100)
  Excess: 241 LOC
  Suggested splits:
    - AgentCommandHandlersCore - Core methods: get_active_command_count, get_agent_command_stats
    - AgentCommandHandlersUtils - Utility methods:

FUNCTION src\discord_commander\handlers_agents.py:267:
  Function 'handle_direct_agent_command': 65 LOC (limit: 50)
  Excess: 15 LOC
  Recommendation: Split into smaller functions

FILE src\discord_commander\handlers_swarm.py:
  File: 436 LOC (limit: 400)
  Excess: 36 LOC
  Suggested splits:
    - handlers_swarm_core.py - Core classes: SwarmCommandHandlers
    - handlers_swarm_utils.py - Utility functions: create_swarm_command_handlers, __init__, handle_swarm_command
    - handlers_swarm_types.py - Type definitions and imports

CLASS src\discord_commander\handlers_swarm.py:30:
  Class 'SwarmCommandHandlers': 395 LOC (limit: 100)
  Excess: 295 LOC
  Suggested splits:
    - SwarmCommandHandlersCore - Core methods: get_swarm_agent_list, get_swarm_stats, get_active_broadcast_count, get_broadcast_stats
    - SwarmCommandHandlersUtils - Utility methods:

FUNCTION src\discord_commander\handlers_swarm.py:243:
  Function 'execute_urgent_broadcast': 71 LOC (limit: 50)
  Excess: 21 LOC
  Recommendation: Split into smaller functions

FUNCTION src\discord_commander\handlers_swarm.py:331:
  Function 'coordinate_swarm_action': 58 LOC (limit: 50)
  Excess: 8 LOC
  Recommendation: Split into smaller functions

FUNCTION src\discord_commander\discord_dynamic_agent_commands.py:148:
  Function 'setup_dynamic_agent_commands': 173 LOC (limit: 50)
  Excess: 123 LOC
  Recommendation: Split into smaller functions

FILE src\discord_commander\enhanced_discord_integration.py:
  File: 1012 LOC (limit: 400)
  Excess: 612 LOC
  Suggested splits:
    - enhanced_discord_integration_core.py - Core classes: AgentChannel, DiscordChannelConfig
    - enhanced_discord_integration_utils.py - Utility functions: get_enhanced_discord_commander, start_enhanced_discord_monitoring, send_devlog_to_discord
    - enhanced_discord_integration_types.py - Type definitions and imports

CLASS src\discord_commander\enhanced_discord_integration.py:103:
  Class 'EnhancedDiscordWebhookManager': 276 LOC (limit: 100)
  Excess: 176 LOC
  Suggested splits:
    - EnhancedDiscordWebhookManagerCore - Core methods: set_channel_webhook, get_channel_config, send_to_channel, test_channel_webhook, get_all_channels
    - EnhancedDiscordWebhookManagerUtils - Utility methods: get_agent_channel

CLASS src\discord_commander\enhanced_discord_integration.py:381:
  Class 'AgentChannelCoordinator': 171 LOC (limit: 100)
  Excess: 71 LOC
  Suggested splits:
    - AgentChannelCoordinatorCore - Core methods: create_agent_notification_embed
    - AgentChannelCoordinatorUtils - Utility methods:

CLASS src\discord_commander\enhanced_discord_integration.py:554:
  Class 'EnhancedDevLogMonitor': 166 LOC (limit: 100)
  Excess: 66 LOC
  Suggested splits:
    - EnhancedDevLogMonitorCore - Core methods: stop_monitoring
    - EnhancedDevLogMonitorUtils - Utility methods:

CLASS src\discord_commander\enhanced_discord_integration.py:722:
  Class 'EnhancedDiscordCommander': 156 LOC (limit: 100)
  Excess: 56 LOC
  Suggested splits:
    - EnhancedDiscordCommanderCore - Core methods: configure_channel_webhook, get_channel_info
    - EnhancedDiscordCommanderUtils - Utility methods:

FUNCTION src\discord_commander\enhanced_discord_integration.py:910:
  Function 'send_devlog_to_discord': 94 LOC (limit: 50)
  Excess: 44 LOC
  Recommendation: Split into smaller functions

FUNCTION src\discord_commander\enhanced_discord_integration.py:130:
  Function '_create_default_channels': 61 LOC (limit: 50)
  Excess: 11 LOC
  Recommendation: Split into smaller functions

FUNCTION src\discord_commander\enhanced_discord_integration.py:265:
  Function '_send_via_channel_id': 95 LOC (limit: 50)
  Excess: 45 LOC
  Recommendation: Split into smaller functions

FUNCTION src\discord_commander\enhanced_discord_integration.py:291:
  Function 'send_discord_message': 62 LOC (limit: 50)
  Excess: 12 LOC
  Recommendation: Split into smaller functions

FUNCTION src\discord_commander\enhanced_discord_integration.py:296:
  Function 'on_ready': 57 LOC (limit: 50)
  Excess: 7 LOC
  Recommendation: Split into smaller functions

CLASS src\domain\entities\agent.py:16:
  Class 'Agent': 107 LOC (limit: 100)
  Excess: 7 LOC
  Suggested splits:
    - AgentCore - Core methods: current_task_count, can_accept_more_tasks, workload_percentage, has_capability, add_capability
    - AgentUtils - Utility methods: remove_capability, assign_task, complete_task, deactivate, reactivate

CLASS src\domain\services\assignment_service.py:14:
  Class 'AssignmentService': 117 LOC (limit: 100)
  Excess: 17 LOC
  Suggested splits:
    - AssignmentServiceCore - Core methods: find_best_agent_for_task, validate_assignment
    - AssignmentServiceUtils - Utility methods:

CLASS src\gaming\performance_validation.py:31:
  Class 'GamingPerformanceValidator': 195 LOC (limit: 100)
  Excess: 95 LOC
  Suggested splits:
    - GamingPerformanceValidatorCore - Core methods: generate_performance_report
    - GamingPerformanceValidatorUtils - Utility methods:

CLASS src\gaming\gaming_integration_core.py:238:
  Class 'GamingIntegrationCore': 113 LOC (limit: 100)
  Excess: 13 LOC
  Suggested splits:
    - GamingIntegrationCoreCore - Core methods: create_game_session, get_game_session, end_game_session, get_active_sessions, register_entertainment_system
    - GamingIntegrationCoreUtils - Utility methods: get_entertainment_system, get_all_entertainment_systems, register_event_handler, handle_event, get_status

FUNCTION src\gaming\handlers\gaming_alert_handlers.py:13:
  Function 'handle_performance_alerts': 59 LOC (limit: 50)
  Excess: 9 LOC
  Recommendation: Split into smaller functions

CLASS src\gaming\integration\core.py:15:
  Class 'GamingIntegrationCore': 119 LOC (limit: 100)
  Excess: 19 LOC
  Suggested splits:
    - GamingIntegrationCoreCore - Core methods: create_game_session, end_game_session, get_active_sessions, get_system_status, process_event
    - GamingIntegrationCoreUtils - Utility methods: register_entertainment_system

FILE src\infrastructure\unified_browser_service.py:
  File: 670 LOC (limit: 400)
  Excess: 270 LOC
  Suggested splits:
    - unified_browser_service_core.py - Core classes: BrowserConfig, TheaConfig
    - unified_browser_service_utils.py - Utility functions: create_browser_service, start, stop
    - unified_browser_service_types.py - Type definitions and imports

CLASS src\infrastructure\unified_browser_service.py:134:
  Class 'ChromeBrowserAdapter': 122 LOC (limit: 100)
  Excess: 22 LOC
  Suggested splits:
    - ChromeBrowserAdapterCore - Core methods: start, stop, navigate, get_current_url, get_title
    - ChromeBrowserAdapterUtils - Utility methods: find_element, find_elements, execute_script, is_running, get_cookies

CLASS src\infrastructure\unified_browser_service.py:435:
  Class 'BrowserOperations': 105 LOC (limit: 100)
  Excess: 5 LOC
  Suggested splits:
    - BrowserOperationsCore - Core methods: navigate_to_conversation, send_message, wait_for_response_ready, get_page_status
    - BrowserOperationsUtils - Utility methods:

FILE src\infrastructure\unified_logging_time.py:
  File: 572 LOC (limit: 400)
  Excess: 172 LOC
  Suggested splits:
    - unified_logging_time_core.py - Core classes: LogLevel, LoggingConfig
    - unified_logging_time_utils.py - Utility functions: create_logging_time_service, debug, info
    - unified_logging_time_types.py - Type definitions and imports

CLASS src\infrastructure\unified_logging_time.py:156:
  Class 'UnifiedLogger': 101 LOC (limit: 100)
  Excess: 1 LOC
  Suggested splits:
    - UnifiedLoggerCore - Core methods: debug, info, warning, error, critical
    - UnifiedLoggerUtils - Utility methods: log

CLASS src\infrastructure\unified_logging_time.py:407:
  Class 'UnifiedLoggingTimeService': 127 LOC (limit: 100)
  Excess: 27 LOC
  Suggested splits:
    - UnifiedLoggingTimeServiceCore - Core methods: get_logger, debug, info, warning, error
    - UnifiedLoggingTimeServiceUtils - Utility methods: critical, now, utcnow, from_timestamp, to_timestamp

FILE src\infrastructure\unified_persistence.py:
  File: 703 LOC (limit: 400)
  Excess: 303 LOC
  Suggested splits:
    - unified_persistence_core.py - Core classes: PersistenceConfig, DatabaseConnection
    - unified_persistence_utils.py - Utility functions: create_persistence_service, __init__, get_connection
    - unified_persistence_types.py - Type definitions and imports

CLASS src\infrastructure\unified_persistence.py:170:
  Class 'AgentRepository': 171 LOC (limit: 100)
  Excess: 71 LOC
  Suggested splits:
    - AgentRepositoryCore - Core methods: get, get_by_capability, get_active, get_available, save
    - AgentRepositoryUtils - Utility methods: delete, list_all

CLASS src\infrastructure\unified_persistence.py:343:
  Class 'TaskRepository': 149 LOC (limit: 100)
  Excess: 49 LOC
  Suggested splits:
    - TaskRepositoryCore - Core methods: get, get_by_agent, get_pending, save, delete
    - TaskRepositoryUtils - Utility methods: list_all

CLASS src\infrastructure\unified_persistence.py:561:
  Class 'UnifiedPersistenceService': 105 LOC (limit: 100)
  Excess: 5 LOC
  Suggested splits:
    - UnifiedPersistenceServiceCore - Core methods: save_agent, get_agent, delete_agent, list_agents, get_active_agents
    - UnifiedPersistenceServiceUtils - Utility methods: get_available_agents, get_agents_by_capability, save_task, get_task, delete_task

FUNCTION src\infrastructure\unified_persistence.py:501:
  Function 'get_database_stats': 58 LOC (limit: 50)
  Excess: 8 LOC
  Recommendation: Split into smaller functions

FILE src\infrastructure\infrastructure_monitoring_integration.py:
  File: 492 LOC (limit: 400)
  Excess: 92 LOC
  Suggested splits:
    - infrastructure_monitoring_integration_core.py - Core classes: InfrastructureHealthMetrics, InfrastructureServiceStatus
    - infrastructure_monitoring_integration_utils.py - Utility functions: get_infrastructure_monitor, start_infrastructure_monitoring, stop_infrastructure_monitoring
    - infrastructure_monitoring_integration_types.py - Type definitions and imports

CLASS src\infrastructure\infrastructure_monitoring_integration.py:113:
  Class 'InfrastructureMonitoringIntegration': 356 LOC (limit: 100)
  Excess: 256 LOC
  Suggested splits:
    - InfrastructureMonitoringIntegrationCore - Core methods: start_monitoring, stop_monitoring, get_infrastructure_health
    - InfrastructureMonitoringIntegrationUtils - Utility methods:

CLASS src\infrastructure\browser\thea_modules\browser_ops.py:19:
  Class 'TheaBrowserOperations': 184 LOC (limit: 100)
  Excess: 84 LOC
  Suggested splits:
    - TheaBrowserOperationsCore - Core methods: navigate_to_conversation, send_message, wait_for_response_ready, get_page_status
    - TheaBrowserOperationsUtils - Utility methods:

CLASS src\infrastructure\browser\thea_modules\content_scraper.py:39:
  Class 'TheaContentScraper': 180 LOC (limit: 100)
  Excess: 80 LOC
  Suggested splits:
    - TheaContentScraperCore - Core methods: scrape_content, validate_content
    - TheaContentScraperUtils - Utility methods:

FUNCTION src\infrastructure\browser\thea_modules\content_scraper.py:131:
  Function '_calculate_quality_score': 54 LOC (limit: 50)
  Excess: 4 LOC
  Recommendation: Split into smaller functions

CLASS src\infrastructure\browser\thea_modules\profile.py:24:
  Class 'TheaManagerProfile': 242 LOC (limit: 100)
  Excess: 142 LOC
  Suggested splits:
    - TheaManagerProfileCore - Core methods: initialize, send_message_and_wait, get_status, scrape_current_content, validate_setup
    - TheaManagerProfileUtils - Utility methods: cleanup

CLASS src\infrastructure\browser\thea_modules\response_collector.py:19:
  Class 'TheaResponseCollector': 167 LOC (limit: 100)
  Excess: 67 LOC
  Suggested splits:
    - TheaResponseCollectorCore - Core methods: collect_full_response, poll_for_completion, wait_for_response_start, get_response_metadata
    - TheaResponseCollectorUtils - Utility methods:

FUNCTION src\infrastructure\browser\thea_modules\response_collector.py:34:
  Function 'collect_full_response': 56 LOC (limit: 50)
  Excess: 6 LOC
  Recommendation: Split into smaller functions

FILE src\infrastructure\logging\unified_logging_system.py:
  File: 455 LOC (limit: 400)
  Excess: 55 LOC
  Suggested splits:
    - unified_logging_system_core.py - Core classes: LogLevel, LogFormat
    - unified_logging_system_utils.py - Utility functions: get_unified_logger, configure_logging, set_correlation_id
    - unified_logging_system_types.py - Type definitions and imports

CLASS src\infrastructure\logging\unified_logging_system.py:129:
  Class 'UnifiedLogger': 184 LOC (limit: 100)
  Excess: 84 LOC
  Suggested splits:
    - UnifiedLoggerCore - Core methods: configure, get_logger, set_correlation_id, get_correlation_id, add_swarm_context
    - UnifiedLoggerUtils - Utility methods: get_swarm_context, log_performance_metric, shutdown

CLASS src\infrastructure\persistence\sqlite_agent_repo.py:18:
  Class 'SqliteAgentRepository': 273 LOC (limit: 100)
  Excess: 173 LOC
  Suggested splits:
    - SqliteAgentRepositoryCore - Core methods: get, get_by_capability, get_active, get_available, add
    - SqliteAgentRepositoryUtils - Utility methods: save, delete, list_all

CLASS src\infrastructure\persistence\sqlite_task_repo.py:18:
  Class 'SqliteTaskRepository': 254 LOC (limit: 100)
  Excess: 154 LOC
  Suggested splits:
    - SqliteTaskRepositoryCore - Core methods: get, get_by_agent, get_pending, add, save
    - SqliteTaskRepositoryUtils - Utility methods: delete, list_all

FILE src\infrastructure\persistence\optimized_sqlite_task_repo.py:
  File: 439 LOC (limit: 400)
  Excess: 39 LOC
  Suggested splits:
    - optimized_sqlite_task_repo_core.py - Core classes: QueryCache, OptimizedSqliteTaskRepository
    - optimized_sqlite_task_repo_utils.py - Utility functions: get_optimized_task_repository, __init__, get
    - optimized_sqlite_task_repo_types.py - Type definitions and imports

CLASS src\infrastructure\persistence\optimized_sqlite_task_repo.py:64:
  Class 'OptimizedSqliteTaskRepository': 364 LOC (limit: 100)
  Excess: 264 LOC
  Suggested splits:
    - OptimizedSqliteTaskRepositoryCore - Core methods: get, get_by_agent, get_pending, add, update
    - OptimizedSqliteTaskRepositoryUtils - Utility methods: delete, get_all, clear_cache, get_cache_stats

FUNCTION src\quality\proof_ledger.py:18:
  Function 'run_tdd_proof': 66 LOC (limit: 50)
  Excess: 16 LOC
  Recommendation: Split into smaller functions

CLASS src\trading_robot\core\dependency_injection.py:19:
  Class 'TradingDependencyContainer': 198 LOC (limit: 100)
  Excess: 98 LOC
  Suggested splits:
    - TradingDependencyContainerCore - Core methods: register_factory, register_instance, resolve, has_service, clear_scope
    - TradingDependencyContainerUtils - Utility methods: get_registered_services

FUNCTION src\trading_robot\core\dependency_injection.py:102:
  Function 'resolve': 57 LOC (limit: 50)
  Excess: 7 LOC
  Recommendation: Split into smaller functions

CLASS src\trading_robot\repositories\trading_repository.py:26:
  Class 'TradingRepository': 161 LOC (limit: 100)
  Excess: 61 LOC
  Suggested splits:
    - TradingRepositoryCore - Core methods:
    - TradingRepositoryUtils - Utility methods:

CLASS src\trading_robot\repositories\implementations\in_memory_trading_repository.py:21:
  Class 'InMemoryTradingRepository': 279 LOC (limit: 100)
  Excess: 179 LOC
  Suggested splits:
    - InMemoryTradingRepositoryCore - Core methods:
    - InMemoryTradingRepositoryUtils - Utility methods:

CLASS src\trading_robot\repositories\implementations\trading_repository_impl.py:21:
  Class 'TradingRepositoryImpl': 265 LOC (limit: 100)
  Excess: 165 LOC
  Suggested splits:
    - TradingRepositoryImplCore - Core methods:
    - TradingRepositoryImplUtils - Utility methods:

CLASS src\trading_robot\repositories\interfaces\position_repository_interface.py:19:
  Class 'PositionRepositoryInterface': 138 LOC (limit: 100)
  Excess: 38 LOC
  Suggested splits:
    - PositionRepositoryInterfaceCore - Core methods:
    - PositionRepositoryInterfaceUtils - Utility methods:

CLASS src\trading_robot\repositories\interfaces\trading_repository_interface.py:19:
  Class 'TradingRepositoryInterface': 125 LOC (limit: 100)
  Excess: 25 LOC
  Suggested splits:
    - TradingRepositoryInterfaceCore - Core methods:
    - TradingRepositoryInterfaceUtils - Utility methods:

CLASS src\trading_robot\repositories\models\portfolio.py:22:
  Class 'Portfolio': 163 LOC (limit: 100)
  Excess: 63 LOC
  Suggested splits:
    - PortfolioCore - Core methods: add_position, remove_position, get_position, has_position, get_total_market_value
    - PortfolioUtils - Utility methods: get_total_cost_basis, get_total_unrealized_pnl, get_total_unrealized_pnl_percentage, get_portfolio_value, get_position_count

CLASS src\trading_robot\repositories\models\position.py:20:
  Class 'Position': 123 LOC (limit: 100)
  Excess: 23 LOC
  Suggested splits:
    - PositionCore - Core methods: get_market_value, get_cost_basis, get_unrealized_pnl, get_unrealized_pnl_percentage, is_long
    - PositionUtils - Utility methods: is_short, is_flat, is_profitable, update_price, add_quantity

CLASS src\trading_robot\services\trading_service.py:26:
  Class 'TradingService': 251 LOC (limit: 100)
  Excess: 151 LOC
  Suggested splits:
    - TradingServiceCore - Core methods:
    - TradingServiceUtils - Utility methods:

FUNCTION src\trading_robot\services\trading_service.py:34:
  Function 'execute_trade': 57 LOC (limit: 50)
  Excess: 7 LOC
  Recommendation: Split into smaller functions

FUNCTION src\trading_robot\services\trading_service.py:209:
  Function '_update_position_from_trade': 68 LOC (limit: 50)
  Excess: 18 LOC
  Recommendation: Split into smaller functions

CLASS src\trading_robot\services\analytics\market_trend_engine.py:22:
  Class 'MarketTrendEngine': 182 LOC (limit: 100)
  Excess: 82 LOC
  Suggested splits:
    - MarketTrendEngineCore - Core methods: analyze_market_trend, get_trend_summary
    - MarketTrendEngineUtils - Utility methods:

CLASS src\trading_robot\services\analytics\risk_analysis_engine.py:21:
  Class 'RiskAnalysisEngine': 143 LOC (limit: 100)
  Excess: 43 LOC
  Suggested splits:
    - RiskAnalysisEngineCore - Core methods: calculate_risk_metrics
    - RiskAnalysisEngineUtils - Utility methods:

CLASS src\trading_robot\services\analytics\trading_bi_orchestrator.py:31:
  Class 'TradingBiAnalyticsOrchestrator': 156 LOC (limit: 100)
  Excess: 56 LOC
  Suggested splits:
    - TradingBiAnalyticsOrchestratorCore - Core methods: get_engine_status
    - TradingBiAnalyticsOrchestratorUtils - Utility methods:

CLASS src\trading_robot\services\analytics\performance_metrics_engine.py:21:
  Class 'PerformanceMetricsEngine': 224 LOC (limit: 100)
  Excess: 124 LOC
  Suggested splits:
    - PerformanceMetricsEngineCore - Core methods: calculate_performance_metrics
    - PerformanceMetricsEngineUtils - Utility methods:

FILE src\utils\consolidated_config_management.py:
  File: 494 LOC (limit: 400)
  Excess: 94 LOC
  Suggested splits:
    - consolidated_config_management_core.py - Core classes: ConfigPattern, ConfigValidationResult
    - consolidated_config_management_utils.py - Utility functions: scan_and_consolidate_config, validate_configuration_setup, scan_file
    - consolidated_config_management_types.py - Type definitions and imports

CLASS src\utils\consolidated_config_management.py:236:
  Class 'UnifiedConfigurationManager': 239 LOC (limit: 100)
  Excess: 139 LOC
  Suggested splits:
    - UnifiedConfigurationManagerCore - Core methods: add_scanner, scan_configurations, consolidate_configurations, generate_config_file, export_scan_results
    - UnifiedConfigurationManagerUtils - Utility methods:

FILE src\utils\consolidated_file_operations.py:
  File: 641 LOC (limit: 400)
  Excess: 241 LOC
  Suggested splits:
    - consolidated_file_operations_core.py - Core classes: FileInfo, DirectoryInfo
    - consolidated_file_operations_utils.py - Utility functions: ensure_dir, read_json_file, write_json_file
    - consolidated_file_operations_types.py - Type definitions and imports

CLASS src\utils\consolidated_file_operations.py:193:
  Class 'DirectoryOperations': 105 LOC (limit: 100)
  Excess: 5 LOC
  Suggested splits:
    - DirectoryOperationsCore - Core methods: ensure_directory, get_directory_info, find_files, cleanup_directory
    - DirectoryOperationsUtils - Utility methods:

CLASS src\utils\consolidated_file_operations.py:362:
  Class 'BackupOperations': 147 LOC (limit: 100)
  Excess: 47 LOC
  Suggested splits:
    - BackupOperationsCore - Core methods: create_backup, restore_backup
    - BackupOperationsUtils - Utility methods:

FUNCTION src\utils\consolidated_file_operations.py:366:
  Function 'create_backup': 84 LOC (limit: 50)
  Excess: 34 LOC
  Recommendation: Split into smaller functions

FUNCTION src\utils\consolidated_file_operations.py:452:
  Function 'restore_backup': 57 LOC (limit: 50)
  Excess: 7 LOC
  Recommendation: Split into smaller functions

FUNCTION src\utils\consolidated_file_operations.py:515:
  Function 'scan_directory': 71 LOC (limit: 50)
  Excess: 21 LOC
  Recommendation: Split into smaller functions

CLASS src\integration\messaging_gateway.py:88:
  Class 'MessagingGateway': 206 LOC (limit: 100)
  Excess: 106 LOC
  Suggested splits:
    - MessagingGatewayCore - Core methods: list_available_agents, get_agent_status, request_agent_summary, send_pyautogui, send_message
    - MessagingGatewayUtils - Utility methods: receive_message, broadcast_message

FILE tools\duplication_analyzer.py:
  File: 463 LOC (limit: 400)
  Excess: 63 LOC
  Suggested splits:
    - duplication_analyzer_core.py - Core classes: DuplicationAnalyzer
    - duplication_analyzer_utils.py - Utility functions: main, __init__, scan_codebase
    - duplication_analyzer_types.py - Type definitions and imports

CLASS tools\duplication_analyzer.py:29:
  Class 'DuplicationAnalyzer': 379 LOC (limit: 100)
  Excess: 279 LOC
  Suggested splits:
    - DuplicationAnalyzerCore - Core methods: scan_codebase, analyze_duplicates, generate_report
    - DuplicationAnalyzerUtils - Utility methods:

FUNCTION tools\duplication_analyzer.py:45:
  Function 'scan_codebase': 55 LOC (limit: 50)
  Excess: 5 LOC
  Recommendation: Split into smaller functions

FUNCTION tools\duplication_analyzer.py:265:
  Function '_generate_consolidation_plan': 53 LOC (limit: 50)
  Excess: 3 LOC
  Recommendation: Split into smaller functions

FUNCTION tools\duplication_analyzer.py:332:
  Function 'generate_report': 76 LOC (limit: 50)
  Excess: 26 LOC
  Recommendation: Split into smaller functions

FILE tools\analysis_cli.py:
  File: 505 LOC (limit: 400)
  Excess: 105 LOC
  Suggested splits:
    - analysis_cli_core.py - Core classes:
    - analysis_cli_utils.py - Utility functions: should_exclude_file, count_lines, analyze_python_file
    - analysis_cli_types.py - Type definitions and imports

FUNCTION tools\analysis_cli.py:72:
  Function 'analyze_python_file': 128 LOC (limit: 50)
  Excess: 78 LOC
  Recommendation: Split into smaller functions

FUNCTION tools\analysis_cli.py:318:
  Function 'generate_refactor_suggestions': 68 LOC (limit: 50)
  Excess: 18 LOC
  Recommendation: Split into smaller functions

FUNCTION tools\analysis_cli.py:388:
  Function 'format_refactor_report': 51 LOC (limit: 50)
  Excess: 1 LOC
  Recommendation: Split into smaller functions

FUNCTION tools\analysis_cli.py:441:
  Function 'main': 58 LOC (limit: 50)
  Excess: 8 LOC
  Recommendation: Split into smaller functions

FUNCTION tools\audit_cleanup.py:176:
  Function 'main': 130 LOC (limit: 50)
  Excess: 80 LOC
  Recommendation: Split into smaller functions

FILE tools\functionality_verification.py:
  File: 480 LOC (limit: 400)
  Excess: 80 LOC
  Suggested splits:
    - functionality_verification_core.py - Core classes: FunctionalityVerifier
    - functionality_verification_utils.py - Utility functions: main, __init__, generate_functionality_signature
    - functionality_verification_types.py - Type definitions and imports

CLASS tools\functionality_verification.py:28:
  Class 'FunctionalityVerifier': 357 LOC (limit: 100)
  Excess: 257 LOC
  Suggested splits:
    - FunctionalityVerifierCore - Core methods: generate_functionality_signature, save_baseline, load_baseline, compare_with_baseline, run_agent_specific_verification
    - FunctionalityVerifierUtils - Utility methods: generate_verification_report

FUNCTION tools\functionality_verification.py:387:
  Function 'main': 90 LOC (limit: 50)
  Excess: 40 LOC
  Recommendation: Split into smaller functions

FUNCTION tools\functionality_verification.py:140:
  Function 'compare_with_baseline': 68 LOC (limit: 50)
  Excess: 18 LOC
  Recommendation: Split into smaller functions

FUNCTION tools\functionality_verification.py:209:
  Function 'run_agent_specific_verification': 56 LOC (limit: 50)
  Excess: 6 LOC
  Recommendation: Split into smaller functions

FUNCTION tools\functionality_verification.py:310:
  Function 'generate_verification_report': 75 LOC (limit: 50)
  Excess: 25 LOC
  Recommendation: Split into smaller functions

FILE tools\projectscanner.py:
  File: 1179 LOC (limit: 400)
  Excess: 779 LOC
  Suggested splits:
    - projectscanner_core.py - Core classes: LanguageAnalyzer, BotWorker
    - projectscanner_utils.py - Utility functions: main, __init__, _init_tree_sitter_language
    - projectscanner_types.py - Type definitions and imports

CLASS tools\projectscanner.py:39:
  Class 'LanguageAnalyzer': 257 LOC (limit: 100)
  Excess: 157 LOC
  Suggested splits:
    - LanguageAnalyzerCore - Core methods: analyze_file, get_node_text
    - LanguageAnalyzerUtils - Utility methods:

CLASS tools\projectscanner.py:356:
  Class 'FileProcessor': 127 LOC (limit: 100)
  Excess: 27 LOC
  Suggested splits:
    - FileProcessorCore - Core methods: hash_file, should_exclude, process_file
    - FileProcessorUtils - Utility methods:

CLASS tools\projectscanner.py:488:
  Class 'ModularReportGenerator': 286 LOC (limit: 100)
  Excess: 186 LOC
  Suggested splits:
    - ModularReportGeneratorCore - Core methods: generate_modular_reports
    - ModularReportGeneratorUtils - Utility methods:

CLASS tools\projectscanner.py:777:
  Class 'ReportGenerator': 157 LOC (limit: 100)
  Excess: 57 LOC
  Suggested splits:
    - ReportGeneratorCore - Core methods: load_existing_report, save_report, generate_init_files, load_existing_chatgpt_context, export_chatgpt_context
    - ReportGeneratorUtils - Utility methods:

CLASS tools\projectscanner.py:939:
  Class 'ProjectScanner': 186 LOC (limit: 100)
  Excess: 86 LOC
  Suggested splits:
    - ProjectScannerCore - Core methods: load_cache, save_cache, scan_project, generate_init_files, export_chatgpt_context
    - ProjectScannerUtils - Utility methods: generate_modular_reports, categorize_agents

FUNCTION tools\projectscanner.py:107:
  Function '_analyze_python': 72 LOC (limit: 50)
  Excess: 22 LOC
  Recommendation: Split into smaller functions

FUNCTION tools\projectscanner.py:228:
  Function '_analyze_javascript': 68 LOC (limit: 50)
  Excess: 18 LOC
  Recommendation: Split into smaller functions

FUNCTION tools\projectscanner.py:378:
  Function 'should_exclude': 84 LOC (limit: 50)
  Excess: 34 LOC
  Recommendation: Split into smaller functions

FUNCTION tools\projectscanner.py:632:
  Function '_generate_complexity_analysis': 58 LOC (limit: 50)
  Excess: 8 LOC
  Recommendation: Split into smaller functions

FUNCTION tools\projectscanner.py:878:
  Function 'export_chatgpt_context': 56 LOC (limit: 50)
  Excess: 6 LOC
  Recommendation: Split into smaller functions

FUNCTION tools\projectscanner.py:982:
  Function 'scan_project': 90 LOC (limit: 50)
  Excess: 40 LOC
  Recommendation: Split into smaller functions

FILE tools\analytics_cli.py:
  File: 437 LOC (limit: 400)
  Excess: 37 LOC

ERROR tools\analytics_cli.py:
  Parse error

FILE tools\auto_remediate_loc.py:
  File: 680 LOC (limit: 400)
  Excess: 280 LOC
  Suggested splits:
    - auto_remediate_loc_core.py - Core classes:
    - auto_remediate_loc_utils.py - Utility functions: should_exclude, count_lines, analyze_file_loc
    - auto_remediate_loc_types.py - Type definitions and imports

FUNCTION tools\auto_remediate_loc.py:283:
  Function 'auto_remediate_class_loc': 57 LOC (limit: 50)
  Excess: 7 LOC
  Recommendation: Split into smaller functions

FUNCTION tools\auto_remediate_loc.py:423:
  Function 'generate_refactor_plan': 56 LOC (limit: 50)
  Excess: 6 LOC
  Recommendation: Split into smaller functions

FUNCTION tools\auto_remediate_loc.py:553:
  Function 'generate_text_report': 56 LOC (limit: 50)
  Excess: 6 LOC
  Recommendation: Split into smaller functions

FUNCTION tools\auto_remediate_loc.py:611:
  Function 'main': 66 LOC (limit: 50)
  Excess: 16 LOC
  Recommendation: Split into smaller functions

FILE tools\test_coverage_improvement.py:
  File: 848 LOC (limit: 400)
  Excess: 448 LOC
  Suggested splits:
    - test_coverage_improvement_core.py - Core classes: TestCoverageImprover
    - test_coverage_improvement_utils.py - Utility functions: main, __init__, analyze_current_coverage
    - test_coverage_improvement_types.py - Type definitions and imports

CLASS tools\test_coverage_improvement.py:29:
  Class 'TestCoverageImprover': 779 LOC (limit: 100)
  Excess: 679 LOC
  Suggested splits:
    - TestCoverageImproverCore - Core methods: analyze_current_coverage, improve_test_reliability, generate_ci_cd_integration, save_report, run_full_analysis
    - TestCoverageImproverUtils - Utility methods: analyze_error_handling_coverage, run_performance_benchmarking, generate_intelligent_recommendations, generate_html_report

FUNCTION tools\test_coverage_improvement.py:146:
  Function '_generate_recommendations': 81 LOC (limit: 50)
  Excess: 31 LOC
  Recommendation: Split into smaller functions

FUNCTION tools\test_coverage_improvement.py:459:
  Function 'analyze_error_handling_coverage': 58 LOC (limit: 50)
  Excess: 8 LOC
  Recommendation: Split into smaller functions

FUNCTION tools\test_coverage_improvement.py:561:
  Function 'generate_intelligent_recommendations': 99 LOC (limit: 50)
  Excess: 49 LOC
  Recommendation: Split into smaller functions

FUNCTION tools\test_coverage_improvement.py:661:
  Function 'generate_html_report': 114 LOC (limit: 50)
  Excess: 64 LOC
  Recommendation: Split into smaller functions

FUNCTION tools\codemods\migrate_managers.py:56:
  Function 'main': 57 LOC (limit: 50)
  Excess: 7 LOC
  Recommendation: Split into smaller functions

FUNCTION tools\codemods\replace_prints_with_logger.py:31:
  Function 'transform_file': 71 LOC (limit: 50)
  Excess: 21 LOC
  Recommendation: Split into smaller functions

CLASS agent_workspaces\Agent-4\cleanup_workspace.py:14:
  Class 'WorkspaceCleanup': 122 LOC (limit: 100)
  Excess: 22 LOC
  Suggested splits:
    - WorkspaceCleanupCore - Core methods: categorize_file, move_file, cleanup_inbox, show_workspace_status
    - WorkspaceCleanupUtils - Utility methods:

CLASS agent_workspaces\Agent-7\agent7_vector_database_integration.py:47:
  Class 'Agent7VectorDatabaseIntegration': 211 LOC (limit: 100)
  Excess: 111 LOC
  Suggested splits:
    - Agent7VectorDatabaseIntegrationCore - Core methods: index_agent7_status, index_agent7_capabilities, search_agent7_context, get_integration_status
    - Agent7VectorDatabaseIntegrationUtils - Utility methods:

FUNCTION agent_workspaces\Agent-7\agent7_vector_database_integration.py:63:
  Function 'index_agent7_status': 94 LOC (limit: 50)
  Excess: 44 LOC
  Recommendation: Split into smaller functions

FUNCTION agent_workspaces\Agent-7\agent7_vector_database_integration.py:158:
  Function 'index_agent7_capabilities': 67 LOC (limit: 50)
  Excess: 17 LOC
  Recommendation: Split into smaller functions

CLASS scripts\enforce_python_standards.py:38:
  Class 'PythonStandardEnforcer': 297 LOC (limit: 100)
  Excess: 197 LOC
  Suggested splits:
    - PythonStandardEnforcerCore - Core methods: enforce_standards
    - PythonStandardEnforcerUtils - Utility methods:

FUNCTION scripts\enforce_python_standards.py:182:
  Function '_check_comment_formatting': 65 LOC (limit: 50)
  Excess: 15 LOC
  Recommendation: Split into smaller functions

FUNCTION scripts\fix_and_ingest_vector_database.py:18:
  Function 'fix_encoding_and_reingest': 65 LOC (limit: 50)
  Excess: 15 LOC
  Recommendation: Split into smaller functions

CLASS scripts\index_v2_refactoring.py:19:
  Class 'V2RefactoringIndexer': 343 LOC (limit: 100)
  Excess: 243 LOC
  Suggested splits:
    - V2RefactoringIndexerCore - Core methods: index_refactoring_work
    - V2RefactoringIndexerUtils - Utility methods:

FUNCTION scripts\index_v2_refactoring.py:22:
  Function '__init__': 180 LOC (limit: 50)
  Excess: 130 LOC
  Recommendation: Split into smaller functions

FUNCTION scripts\index_v2_refactoring.py:284:
  Function '_index_revolutionary_pattern': 78 LOC (limit: 50)
  Excess: 28 LOC
  Recommendation: Split into smaller functions

FILE scripts\agent_cycle.py:
  File: 596 LOC (limit: 400)
  Excess: 196 LOC
  Suggested splits:
    - agent_cycle_core.py - Core classes: CycleConfig, CycleResult
    - agent_cycle_utils.py - Utility functions: main, __init__, execute_cycle
    - agent_cycle_types.py - Type definitions and imports

CLASS scripts\agent_cycle.py:61:
  Class 'AgentCycleAutomation': 485 LOC (limit: 100)
  Excess: 385 LOC
  Suggested splits:
    - AgentCycleAutomationCore - Core methods: execute_cycle
    - AgentCycleAutomationUtils - Utility methods:

FUNCTION scripts\agent_cycle.py:77:
  Function 'execute_cycle': 74 LOC (limit: 50)
  Excess: 24 LOC
  Recommendation: Split into smaller functions

ERROR scripts\agent_onboarding.py:
  Parse error

CLASS scripts\cleanup_v2_compliance.py:21:
  Class 'V2ComplianceChecker': 183 LOC (limit: 100)
  Excess: 83 LOC
  Suggested splits:
    - V2ComplianceCheckerCore - Core methods: analyze_file_sizes, analyze_code_structure, generate_report, save_report
    - V2ComplianceCheckerUtils - Utility methods:

FUNCTION scripts\cleanup_v2_compliance.py:104:
  Function 'generate_report': 93 LOC (limit: 50)
  Excess: 43 LOC
  Recommendation: Split into smaller functions

CLASS scripts\dup_scan.py:36:
  Class 'DuplicationScanner': 312 LOC (limit: 100)
  Excess: 212 LOC
  Suggested splits:
    - DuplicationScannerCore - Core methods: scan_directory, save_report
    - DuplicationScannerUtils - Utility methods:

CLASS scripts\setup_enhanced_discord.py:20:
  Class 'EnhancedDiscordSetup': 281 LOC (limit: 100)
  Excess: 181 LOC
  Suggested splits:
    - EnhancedDiscordSetupCore - Core methods: run_setup, check_prerequisites, create_configuration, setup_coordination, create_helper_scripts
    - EnhancedDiscordSetupUtils - Utility methods: show_final_instructions

FUNCTION scripts\setup_enhanced_discord.py:136:
  Function 'setup_coordination': 54 LOC (limit: 50)
  Excess: 4 LOC
  Recommendation: Split into smaller functions

FUNCTION scripts\setup_enhanced_discord.py:191:
  Function 'create_helper_scripts': 78 LOC (limit: 50)
  Excess: 28 LOC
  Recommendation: Split into smaller functions

CLASS scripts\test_discord_agent_bot.py:31:
  Class 'DiscordAgentBotTester': 194 LOC (limit: 100)
  Excess: 94 LOC
  Suggested splits:
    - DiscordAgentBotTesterCore - Core methods: test_command_parsing, test_agent_validation, test_agent_list, test_config_loading, run_all_tests
    - DiscordAgentBotTesterUtils - Utility methods:

FUNCTION scripts\v2_release_summary.py:13:
  Function 'main': 78 LOC (limit: 50)
  Excess: 28 LOC
  Recommendation: Split into smaller functions

FUNCTION scripts\activate_vector_database_integration.py:21:
  Function 'activate_vector_database_integration': 111 LOC (limit: 50)
  Excess: 61 LOC
  Recommendation: Split into smaller functions

CLASS scripts\cleanup_overnight_sequence.py:62:
  Class 'CleanupSequenceCoordinator': 253 LOC (limit: 100)
  Excess: 153 LOC
  Suggested splits:
    - CleanupSequenceCoordinatorCore - Core methods: log_sequence_event, execute_messaging_command, send_phase_notification, assign_contract_to_agent, execute_phase
    - CleanupSequenceCoordinatorUtils - Utility methods: check_phase_completion, run_full_sequence, save_sequence_log

FUNCTION scripts\cleanup_overnight_sequence.py:317:
  Function 'main': 71 LOC (limit: 50)
  Excess: 21 LOC
  Recommendation: Split into smaller functions

FILE scripts\send_devlog_unified.py:
  File: 483 LOC (limit: 400)
  Excess: 83 LOC
  Suggested splits:
    - send_devlog_unified_core.py - Core classes:
    - send_devlog_unified_utils.py - Utility functions: load_discord_config, get_channel_config, parse_devlog_content
    - send_devlog_unified_types.py - Type definitions and imports

FUNCTION scripts\send_devlog_unified.py:139:
  Function 'send_to_discord_webhook': 71 LOC (limit: 50)
  Excess: 21 LOC
  Recommendation: Split into smaller functions

FUNCTION scripts\send_devlog_unified.py:212:
  Function 'send_to_discord_channel': 119 LOC (limit: 50)
  Excess: 69 LOC
  Recommendation: Split into smaller functions

FUNCTION scripts\send_devlog_unified.py:355:
  Function 'main': 125 LOC (limit: 50)
  Excess: 75 LOC
  Recommendation: Split into smaller functions

CLASS scripts\test_devlog_sender.py:60:
  Class 'TestDevlogSender': 175 LOC (limit: 100)
  Excess: 75 LOC
  Suggested splits:
    - TestDevlogSenderCore - Core methods: setup, teardown, create_test_devlog
    - TestDevlogSenderUtils - Utility methods:

CLASS scripts\test_enhanced_discord.py:22:
  Class 'EnhancedDiscordTester': 311 LOC (limit: 100)
  Excess: 211 LOC
  Suggested splits:
    - EnhancedDiscordTesterCore - Core methods: show_test_results, all_tests_passed
    - EnhancedDiscordTesterUtils - Utility methods:

FUNCTION scripts\test_enhanced_discord.py:62:
  Function 'check_prerequisites': 58 LOC (limit: 50)
  Excess: 8 LOC
  Recommendation: Split into smaller functions

FUNCTION scripts\test_enhanced_discord.py:247:
  Function 'show_test_results': 75 LOC (limit: 50)
  Excess: 25 LOC
  Recommendation: Split into smaller functions

FUNCTION scripts\utilities\setup_discord_bot.py:55:
  Function 'setup_environment': 105 LOC (limit: 50)
  Excess: 55 LOC
  Recommendation: Split into smaller functions
