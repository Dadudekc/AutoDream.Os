{
  "agent8_coordination_interface.py": {
    "language": ".py",
    "functions": [
      "send_coordination_message",
      "broadcast_coordination_message"
    ],
    "classes": {},
    "routes": [],
    "complexity": 2
  },
  "simple_messaging_system.py": {
    "language": ".py",
    "functions": [
      "load_coordinates",
      "send_message",
      "main"
    ],
    "classes": {},
    "routes": [],
    "complexity": 3
  },
  "run_discord_agent_bot.py": {
    "language": ".py",
    "functions": [
      "setup_commands",
      "__init__",
      "_load_agent_coordinates"
    ],
    "classes": {
      "SimpleDiscordAgentBot": {
        "methods": [
          "__init__",
          "_load_agent_coordinates"
        ],
        "docstring": "Simple Discord agent bot for testing and coordination.",
        "base_classes": [
          "commands.Bot"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 5
  },
  "integrated_onboarding_coordination_system.py": {
    "language": ".py",
    "functions": [
      "main",
      "__init__",
      "to_dict",
      "__init__",
      "transition_to",
      "get_state_info",
      "__init__",
      "load_persistent_state",
      "save_persistent_state",
      "load_coordinates",
      "get_chat_coordinates",
      "get_onboarding_coordinates",
      "create_onboarding_contract",
      "create_contract",
      "perform_agent_onboarding",
      "create_onboarding_message",
      "_get_role_onboarding_guidance",
      "onboard_all_agents",
      "get_agent_specific_prompt",
      "_get_agent1_instructions",
      "_get_agent2_instructions",
      "_get_agent3_instructions",
      "_get_agent4_instructions",
      "_get_agent5_instructions",
      "_get_agent6_instructions",
      "_get_agent7_instructions",
      "_get_agent8_instructions",
      "send_enhanced_cycle_message",
      "run_enhanced_cycle",
      "run_cli"
    ],
    "classes": {
      "AgentState": {
        "methods": [],
        "docstring": "Finite State Machine states for agents.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ContractType": {
        "methods": [],
        "docstring": "Types of contracts agents can enter.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "AgentContract": {
        "methods": [
          "__init__",
          "to_dict"
        ],
        "docstring": "Contract system for agent task commitments.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "AgentFSM": {
        "methods": [
          "__init__",
          "transition_to",
          "get_state_info"
        ],
        "docstring": "Finite State Machine for agent state management.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IntegratedOnboardingCoordinationSystem": {
        "methods": [
          "__init__",
          "load_persistent_state",
          "save_persistent_state",
          "load_coordinates",
          "get_chat_coordinates",
          "get_onboarding_coordinates",
          "create_onboarding_contract",
          "create_contract",
          "perform_agent_onboarding",
          "create_onboarding_message",
          "_get_role_onboarding_guidance",
          "onboard_all_agents",
          "get_agent_specific_prompt",
          "_get_agent1_instructions",
          "_get_agent2_instructions",
          "_get_agent3_instructions",
          "_get_agent4_instructions",
          "_get_agent5_instructions",
          "_get_agent6_instructions",
          "_get_agent7_instructions",
          "_get_agent8_instructions",
          "send_enhanced_cycle_message",
          "run_enhanced_cycle",
          "run_cli"
        ],
        "docstring": "Integrated system combining onboarding, contracts, FSM, and cycle coordination.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 59
  },
  "tests\\test_reporting_core.py": {
    "language": ".py",
    "functions": [
      "coverage_reporter",
      "progress_tracker",
      "track_test_progress",
      "__init__",
      "generate_coverage_report",
      "generate_csv_report",
      "_calculate_summary",
      "_calculate_agent_breakdown",
      "_generate_recommendations",
      "__init__",
      "record_test_result",
      "get_progress_summary",
      "generate_progress_report",
      "finalize",
      "test_coverage_reporter_initialization",
      "test_coverage_report_generation",
      "test_progress_tracker",
      "test_progress_report_generation"
    ],
    "classes": {
      "CoverageReporter": {
        "methods": [
          "__init__",
          "generate_coverage_report",
          "generate_csv_report",
          "_calculate_summary",
          "_calculate_agent_breakdown",
          "_generate_recommendations"
        ],
        "docstring": "Comprehensive test coverage reporting system.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ProgressTracker": {
        "methods": [
          "__init__",
          "record_test_result",
          "get_progress_summary",
          "generate_progress_report"
        ],
        "docstring": "Track test execution progress and provide updates.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TestReportingSystemCore": {
        "methods": [
          "test_coverage_reporter_initialization",
          "test_coverage_report_generation",
          "test_progress_tracker",
          "test_progress_report_generation"
        ],
        "docstring": "Test the core reporting system functionality.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 32
  },
  "tests\\swarm_testing_framework_core.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "discover_components",
      "_discover_directory",
      "_is_testable_file",
      "_get_component_name",
      "_analyze_dependencies",
      "__init__",
      "find_test_files",
      "create_basic_unit_tests",
      "_generate_basic_test_content",
      "calculate_coverage",
      "calculate_overall_coverage"
    ],
    "classes": {
      "TestingComponent": {
        "methods": [],
        "docstring": "Represents a testable component in the swarm system.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SwarmTestingReport": {
        "methods": [],
        "docstring": "Comprehensive testing report for the swarm system.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ComponentDiscovery": {
        "methods": [
          "__init__",
          "discover_components",
          "_discover_directory",
          "_is_testable_file",
          "_get_component_name",
          "_analyze_dependencies"
        ],
        "docstring": "Handles discovery and analysis of testable components.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TestFileManager": {
        "methods": [
          "__init__",
          "find_test_files",
          "create_basic_unit_tests",
          "_generate_basic_test_content"
        ],
        "docstring": "Manages test file creation and organization.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "CoverageCalculator": {
        "methods": [
          "calculate_coverage",
          "calculate_overall_coverage"
        ],
        "docstring": "Calculates and tracks test coverage metrics.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 24
  },
  "tests\\swarm_testing_framework_reporting.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "generate_testing_report",
      "_generate_markdown_report",
      "print_summary",
      "generate_analytics_report",
      "_analyze_components"
    ],
    "classes": {
      "ReportGenerator": {
        "methods": [
          "__init__",
          "generate_testing_report",
          "_generate_markdown_report",
          "print_summary",
          "generate_analytics_report",
          "_analyze_components"
        ],
        "docstring": "Handles report generation and analytics.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 12
  },
  "tests\\swarm_testing_framework_main.py": {
    "language": ".py",
    "functions": [
      "main",
      "__init__",
      "discover_components",
      "run_comprehensive_testing",
      "test_specific_component",
      "get_component_status",
      "validate_framework"
    ],
    "classes": {
      "SwarmTestingFramework": {
        "methods": [
          "__init__",
          "discover_components",
          "run_comprehensive_testing",
          "test_specific_component",
          "get_component_status",
          "validate_framework"
        ],
        "docstring": "Main orchestration class for the swarm testing framework.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 13
  },
  "tests\\test_architecture_core.py": {
    "language": ".py",
    "functions": [
      "run_core_architectural_tests",
      "test_single_responsibility_principle",
      "test_open_closed_principle",
      "test_liskov_substitution_principle",
      "test_interface_segregation_principle",
      "test_dependency_inversion_principle",
      "test_constructor_injection",
      "test_service_locator_pattern",
      "test_factory_pattern_implementation",
      "test_dependency_injection_container",
      "test_inversion_of_control"
    ],
    "classes": {
      "TestSOLIDPrinciplesCompliance": {
        "methods": [
          "test_single_responsibility_principle",
          "test_open_closed_principle",
          "test_liskov_substitution_principle",
          "test_interface_segregation_principle",
          "test_dependency_inversion_principle"
        ],
        "docstring": "Comprehensive SOLID principles validation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TestDependencyInjectionPatterns": {
        "methods": [
          "test_constructor_injection",
          "test_service_locator_pattern",
          "test_factory_pattern_implementation",
          "test_dependency_injection_container",
          "test_inversion_of_control"
        ],
        "docstring": "Test dependency injection implementations.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 21
  },
  "tests\\test_commandresult_advanced.py": {
    "language": ".py",
    "functions": [
      "test_message_sending_workflow",
      "test_database_operation_workflow",
      "test_swarm_coordination_workflow",
      "test_performance_monitoring",
      "test_error_handling_patterns",
      "test_batch_processing_workflow",
      "test_retry_mechanism_workflow",
      "send_message",
      "save_user_data",
      "coordinate_task",
      "execute_with_performance_tracking",
      "sample_operation",
      "risky_operation",
      "process_batch",
      "operation_with_retry"
    ],
    "classes": {
      "TestCommandResultIntegration": {
        "methods": [
          "test_message_sending_workflow",
          "test_database_operation_workflow",
          "test_swarm_coordination_workflow",
          "test_performance_monitoring",
          "test_error_handling_patterns",
          "test_batch_processing_workflow",
          "test_retry_mechanism_workflow"
        ],
        "docstring": "Integration tests for CommandResult in real-world scenarios.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 22
  },
  "tests\\test_architecture_advanced.py": {
    "language": ".py",
    "functions": [
      "run_advanced_architectural_tests",
      "test_repository_pattern",
      "test_facade_pattern",
      "test_adapter_pattern",
      "test_singleton_pattern",
      "test_observer_pattern",
      "test_module_coupling_analysis",
      "test_layer_separation",
      "test_dependency_direction",
      "test_interface_consistency",
      "test_exception_hierarchy",
      "test_error_recovery_patterns",
      "test_circuit_breaker_pattern",
      "test_graceful_degradation"
    ],
    "classes": {
      "TestArchitecturalPatterns": {
        "methods": [
          "test_repository_pattern",
          "test_facade_pattern",
          "test_adapter_pattern",
          "test_singleton_pattern",
          "test_observer_pattern"
        ],
        "docstring": "Test architectural pattern implementations.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TestArchitecturalIntegrity": {
        "methods": [
          "test_module_coupling_analysis",
          "test_layer_separation",
          "test_dependency_direction",
          "test_interface_consistency"
        ],
        "docstring": "Test overall architectural integrity and consistency.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TestErrorHandlingArchitecture": {
        "methods": [
          "test_exception_hierarchy",
          "test_error_recovery_patterns",
          "test_circuit_breaker_pattern",
          "test_graceful_degradation"
        ],
        "docstring": "Test error handling architectural patterns.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 27
  },
  "tests\\test_commandresult_core.py": {
    "language": ".py",
    "functions": [
      "test_success_result_creation",
      "test_failure_result_creation",
      "test_minimal_result_creation",
      "test_result_with_none_values",
      "test_result_immutability",
      "test_result_serialization",
      "test_result_parametrized",
      "test_result_with_complex_data",
      "test_result_with_empty_strings",
      "test_result_with_zero_values",
      "test_result_with_boolean_data",
      "test_result_with_list_data",
      "test_result_equality",
      "test_result_string_representation",
      "test_result_repr"
    ],
    "classes": {
      "TestCommandResultCore": {
        "methods": [
          "test_success_result_creation",
          "test_failure_result_creation",
          "test_minimal_result_creation",
          "test_result_with_none_values",
          "test_result_immutability",
          "test_result_serialization",
          "test_result_parametrized",
          "test_result_with_complex_data",
          "test_result_with_empty_strings",
          "test_result_with_zero_values",
          "test_result_with_boolean_data",
          "test_result_with_list_data",
          "test_result_equality",
          "test_result_string_representation",
          "test_result_repr"
        ],
        "docstring": "Unit tests for CommandResult core functionality.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 30
  },
  "tests\\test_consolidated_messaging_service_advanced.py": {
    "language": ".py",
    "functions": [
      "test_cli_argument_parsing",
      "test_cli_help_and_version",
      "setup_method",
      "teardown_method",
      "test_full_messaging_workflow",
      "test_service_component_interaction",
      "test_service_initialization_performance",
      "test_message_sending_performance",
      "test_broadcast_performance",
      "test_error_recovery_workflow",
      "test_concurrent_message_handling",
      "test_service_state_consistency",
      "test_service_cleanup_and_reset",
      "test_service_with_mock_dependencies",
      "send_message",
      "__init__",
      "load_coordinates_from_json",
      "send_message_pyautogui",
      "broadcast_message",
      "list_agents",
      "show_message_history"
    ],
    "classes": {
      "TestMessagingCLIInterface": {
        "methods": [
          "test_cli_argument_parsing",
          "test_cli_help_and_version"
        ],
        "docstring": "Test CLI interface functionality.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TestMessagingServiceIntegration": {
        "methods": [
          "setup_method",
          "teardown_method",
          "test_full_messaging_workflow",
          "test_service_component_interaction",
          "test_service_initialization_performance",
          "test_message_sending_performance",
          "test_broadcast_performance",
          "test_error_recovery_workflow",
          "test_concurrent_message_handling",
          "test_service_state_consistency",
          "test_service_cleanup_and_reset",
          "test_service_with_mock_dependencies"
        ],
        "docstring": "Integration tests for consolidated messaging service.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ConsolidatedMessagingService": {
        "methods": [
          "__init__",
          "load_coordinates_from_json",
          "send_message_pyautogui",
          "broadcast_message",
          "list_agents",
          "show_message_history"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 41
  },
  "tests\\swarm_testing_framework_execution.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "run_comprehensive_testing",
      "_test_component",
      "_run_unit_tests",
      "_run_integration_tests",
      "_check_documentation",
      "_add_example_usage",
      "_generate_example_usage",
      "_generate_module_docstring"
    ],
    "classes": {
      "TestExecutor": {
        "methods": [
          "__init__",
          "run_comprehensive_testing",
          "_test_component",
          "_run_unit_tests",
          "_run_integration_tests",
          "_check_documentation",
          "_add_example_usage",
          "_generate_example_usage",
          "_generate_module_docstring"
        ],
        "docstring": "Handles test execution and progress tracking.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 18
  },
  "tests\\test_consolidated_vector_service_advanced.py": {
    "language": ".py",
    "functions": [
      "setup_method",
      "teardown_method",
      "test_embedding_generation_performance",
      "test_error_handling_engine_operations",
      "test_full_vector_workflow",
      "test_model_switching_workflow",
      "test_batch_operations",
      "test_large_scale_embedding_generation",
      "test_concurrent_operations",
      "test_memory_usage_optimization",
      "test_error_recovery_mechanisms",
      "test_advanced_search_filters",
      "test_embedding_model_comparison",
      "test_document_versioning",
      "test_collection_isolation",
      "test_advanced_error_scenarios",
      "test_full_vector_workflow_integration",
      "test_model_switching_workflow_integration",
      "test_batch_operations_integration",
      "store_document",
      "get_document"
    ],
    "classes": {
      "TestConsolidatedVectorServiceAdvanced": {
        "methods": [
          "setup_method",
          "teardown_method",
          "test_embedding_generation_performance",
          "test_error_handling_engine_operations",
          "test_full_vector_workflow",
          "test_model_switching_workflow",
          "test_batch_operations",
          "test_large_scale_embedding_generation",
          "test_concurrent_operations",
          "test_memory_usage_optimization",
          "test_error_recovery_mechanisms",
          "test_advanced_search_filters",
          "test_embedding_model_comparison",
          "test_document_versioning",
          "test_collection_isolation",
          "test_advanced_error_scenarios"
        ],
        "docstring": "Test suite for advanced consolidated vector service functionality",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TestVectorServiceIntegration": {
        "methods": [
          "test_full_vector_workflow_integration",
          "test_model_switching_workflow_integration",
          "test_batch_operations_integration"
        ],
        "docstring": "Integration tests for consolidated vector service",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 40
  },
  "tests\\test_consolidated_messaging_service_core.py": {
    "language": ".py",
    "functions": [
      "setup_method",
      "teardown_method",
      "test_service_initialization",
      "test_coordinate_loading_without_messaging",
      "test_coordinate_loading_with_messaging",
      "test_coordinate_loading_with_invalid_agent",
      "test_send_message_pyautogui_dry_run",
      "test_send_message_pyautogui_without_pyautogui",
      "test_send_message_pyautogui_with_mocking",
      "test_send_message_pyautogui_invalid_agent",
      "test_broadcast_message_dry_run",
      "test_broadcast_message_with_messaging",
      "test_list_agents_functionality",
      "test_show_message_history_without_messaging",
      "test_show_message_history_with_messaging",
      "test_error_handling_coordinate_loader_failure",
      "test_constants_and_configuration",
      "test_service_availability_flags",
      "test_message_priority_and_tags",
      "test_message_content_validation",
      "test_service_integration_with_file_operations",
      "__init__",
      "load_coordinates_from_json",
      "send_message_pyautogui",
      "broadcast_message",
      "list_agents",
      "show_message_history"
    ],
    "classes": {
      "TestConsolidatedMessagingServiceCore": {
        "methods": [
          "setup_method",
          "teardown_method",
          "test_service_initialization",
          "test_coordinate_loading_without_messaging",
          "test_coordinate_loading_with_messaging",
          "test_coordinate_loading_with_invalid_agent",
          "test_send_message_pyautogui_dry_run",
          "test_send_message_pyautogui_without_pyautogui",
          "test_send_message_pyautogui_with_mocking",
          "test_send_message_pyautogui_invalid_agent",
          "test_broadcast_message_dry_run",
          "test_broadcast_message_with_messaging",
          "test_list_agents_functionality",
          "test_show_message_history_without_messaging",
          "test_show_message_history_with_messaging",
          "test_error_handling_coordinate_loader_failure",
          "test_constants_and_configuration",
          "test_service_availability_flags",
          "test_message_priority_and_tags",
          "test_message_content_validation",
          "test_service_integration_with_file_operations"
        ],
        "docstring": "Core test suite for consolidated messaging service.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ConsolidatedMessagingService": {
        "methods": [
          "__init__",
          "load_coordinates_from_json",
          "send_message_pyautogui",
          "broadcast_message",
          "list_agents",
          "show_message_history"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 54
  },
  "tests\\test_reporting_advanced.py": {
    "language": ".py",
    "functions": [
      "generate_html_report",
      "_create_html_report",
      "generate_detailed_report",
      "_calculate_file_breakdown",
      "_calculate_coverage_trends",
      "generate_analytics_report",
      "_generate_performance_recommendations",
      "export_results_to_json",
      "test_html_report_generation",
      "test_detailed_report_generation",
      "test_analytics_report_generation",
      "test_results_export"
    ],
    "classes": {
      "AdvancedCoverageReporter": {
        "methods": [
          "generate_html_report",
          "_create_html_report",
          "generate_detailed_report",
          "_calculate_file_breakdown",
          "_calculate_coverage_trends"
        ],
        "docstring": "Advanced coverage reporter with HTML generation and enhanced features.",
        "base_classes": [
          "CoverageReporter"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "AdvancedProgressTracker": {
        "methods": [
          "generate_analytics_report",
          "_generate_performance_recommendations",
          "export_results_to_json"
        ],
        "docstring": "Advanced progress tracker with enhanced reporting and analytics.",
        "base_classes": [
          "ProgressTracker"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TestReportingSystemAdvanced": {
        "methods": [
          "test_html_report_generation",
          "test_detailed_report_generation",
          "test_analytics_report_generation",
          "test_results_export"
        ],
        "docstring": "Test the advanced reporting system functionality.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 24
  },
  "tests\\test_consolidated_vector_service_core.py": {
    "language": ".py",
    "functions": [
      "setup_method",
      "teardown_method",
      "test_service_initialization",
      "test_embedding_generation_sentence_transformers",
      "test_embedding_generation_openai",
      "test_embedding_generation_model_switching",
      "test_embedding_generation_unsupported_model",
      "test_embedding_generation_missing_dependencies",
      "test_vector_document_creation",
      "test_store_document_with_embeddings",
      "test_store_document_engine_failure",
      "test_search_documents",
      "test_delete_document",
      "test_get_document",
      "test_get_stats",
      "test_collection_management",
      "test_engine_initialization_failure",
      "test_empty_text_embedding",
      "test_multiple_text_embedding",
      "test_search_query_validation",
      "test_document_type_handling",
      "test_configuration_validation",
      "test_service_state_management",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "generate_embeddings",
      "store_document",
      "get_document",
      "delete_document",
      "search_documents",
      "get_stats",
      "create_collection",
      "list_collections"
    ],
    "classes": {
      "TestConsolidatedVectorServiceCore": {
        "methods": [
          "setup_method",
          "teardown_method",
          "test_service_initialization",
          "test_embedding_generation_sentence_transformers",
          "test_embedding_generation_openai",
          "test_embedding_generation_model_switching",
          "test_embedding_generation_unsupported_model",
          "test_embedding_generation_missing_dependencies",
          "test_vector_document_creation",
          "test_store_document_with_embeddings",
          "test_store_document_engine_failure",
          "test_search_documents",
          "test_delete_document",
          "test_get_document",
          "test_get_stats",
          "test_collection_management",
          "test_engine_initialization_failure",
          "test_empty_text_embedding",
          "test_multiple_text_embedding",
          "test_search_query_validation",
          "test_document_type_handling",
          "test_configuration_validation",
          "test_service_state_management"
        ],
        "docstring": "Test suite for core consolidated vector service functionality",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "EmbeddingModel": {
        "methods": [],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "DocumentType": {
        "methods": [],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "VectorDocument": {
        "methods": [
          "__init__"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "VectorDatabaseConfig": {
        "methods": [
          "__init__"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "VectorDatabaseResult": {
        "methods": [
          "__init__"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "VectorDatabaseStats": {
        "methods": [
          "__init__"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "SearchQuery": {
        "methods": [
          "__init__"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "SearchResult": {
        "methods": [
          "__init__"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "CollectionConfig": {
        "methods": [
          "__init__"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "ConsolidatedVectorService": {
        "methods": [
          "__init__",
          "generate_embeddings",
          "store_document",
          "get_document",
          "delete_document",
          "search_documents",
          "get_stats",
          "create_collection",
          "list_collections"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 78
  },
  "tests\\operational\\test_stability_core.py": {
    "language": ".py",
    "functions": [
      "test_continuous_monitoring_stability",
      "test_messaging_system_endurance",
      "test_memory_usage_stability",
      "test_cpu_usage_stability",
      "test_disk_io_stability",
      "test_concurrent_monitoring_stability",
      "test_concurrent_messaging_stability",
      "cpu_intensive_task",
      "monitoring_worker",
      "messaging_worker",
      "get_system_metrics",
      "send_message",
      "log_event"
    ],
    "classes": {
      "TestLongRunningOperations": {
        "methods": [
          "test_continuous_monitoring_stability",
          "test_messaging_system_endurance"
        ],
        "docstring": "Test stability of long-running operations.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TestResourceUsageStability": {
        "methods": [
          "test_memory_usage_stability",
          "test_cpu_usage_stability",
          "test_disk_io_stability"
        ],
        "docstring": "Test stability of resource usage patterns.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TestConcurrentOperationStability": {
        "methods": [
          "test_concurrent_monitoring_stability",
          "test_concurrent_messaging_stability"
        ],
        "docstring": "Test stability under concurrent operations.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "PerformanceMonitoringDashboard": {
        "methods": [
          "get_system_metrics"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "UnifiedMessagingCore": {
        "methods": [
          "send_message"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "UnifiedLoggingSystem": {
        "methods": [
          "log_event"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 23
  },
  "tests\\operational\\test_error_handling_advanced.py": {
    "language": ".py",
    "functions": [
      "test_network_error_recovery",
      "test_file_system_error_recovery",
      "test_resource_error_recovery",
      "test_error_aggregation",
      "test_error_trending_analysis",
      "test_null_and_empty_value_handling",
      "test_extreme_value_handling",
      "test_cross_component_error_propagation",
      "test_error_recovery_integration",
      "component_a",
      "component_b",
      "failing_operation",
      "handle_error",
      "log_error",
      "log_error"
    ],
    "classes": {
      "TestErrorRecoveryScenarios": {
        "methods": [
          "test_network_error_recovery",
          "test_file_system_error_recovery",
          "test_resource_error_recovery"
        ],
        "docstring": "Test various error recovery scenarios.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TestErrorReportingAndMonitoring": {
        "methods": [
          "test_error_aggregation",
          "test_error_trending_analysis"
        ],
        "docstring": "Test error reporting and monitoring systems.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TestBoundaryConditionHandling": {
        "methods": [
          "test_null_and_empty_value_handling",
          "test_extreme_value_handling"
        ],
        "docstring": "Test handling of boundary conditions and edge cases.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TestErrorHandlingIntegration": {
        "methods": [
          "test_cross_component_error_propagation",
          "test_error_recovery_integration"
        ],
        "docstring": "Integration tests for error handling system.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "UnifiedErrorHandler": {
        "methods": [
          "handle_error",
          "log_error"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "UnifiedLoggingSystem": {
        "methods": [
          "log_error"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 27
  },
  "tests\\operational\\test_stability_advanced.py": {
    "language": ".py",
    "functions": [
      "test_gradual_load_increase",
      "test_burst_load_handling",
      "test_service_restart_resilience",
      "test_error_recovery_stability",
      "_simulate_recovery",
      "test_extended_operation_stability",
      "test_memory_leak_detection",
      "test_full_system_stability_integration",
      "get_system_metrics",
      "send_message",
      "log_event"
    ],
    "classes": {
      "TestLoadTestingScenarios": {
        "methods": [
          "test_gradual_load_increase",
          "test_burst_load_handling"
        ],
        "docstring": "Test system stability under various load conditions.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TestRecoveryAndResilience": {
        "methods": [
          "test_service_restart_resilience",
          "test_error_recovery_stability",
          "_simulate_recovery"
        ],
        "docstring": "Test system recovery and resilience capabilities.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TestSystemEndurance": {
        "methods": [
          "test_extended_operation_stability",
          "test_memory_leak_detection"
        ],
        "docstring": "Test long-term system endurance and sustainability.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TestStabilityIntegrationScenarios": {
        "methods": [
          "test_full_system_stability_integration"
        ],
        "docstring": "Integration tests for system stability.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "PerformanceMonitoringDashboard": {
        "methods": [
          "get_system_metrics"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "UnifiedMessagingCore": {
        "methods": [
          "send_message"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "UnifiedLoggingSystem": {
        "methods": [
          "log_event"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 22
  },
  "tests\\operational\\test_error_handling_core.py": {
    "language": ".py",
    "functions": [
      "test_error_classification",
      "test_error_logging",
      "test_error_recovery_mechanisms",
      "test_graceful_degradation",
      "test_exception_chaining",
      "test_custom_exception_hierarchy",
      "test_error_context_preservation",
      "test_service_degradation_handling",
      "test_circuit_breaker_pattern",
      "test_fallback_mechanisms",
      "failing_operation",
      "operation_with_context",
      "unreliable_service",
      "failing_operation",
      "primary_operation",
      "fallback_operation",
      "handle_error",
      "log_error",
      "log_error",
      "__init__",
      "call",
      "_on_success",
      "_on_failure"
    ],
    "classes": {
      "TestUnifiedErrorHandler": {
        "methods": [
          "test_error_classification",
          "test_error_logging",
          "test_error_recovery_mechanisms",
          "test_graceful_degradation"
        ],
        "docstring": "Test unified error handling system.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TestExceptionManagement": {
        "methods": [
          "test_exception_chaining",
          "test_custom_exception_hierarchy",
          "test_error_context_preservation"
        ],
        "docstring": "Test comprehensive exception management.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TestSystemResilience": {
        "methods": [
          "test_service_degradation_handling",
          "test_circuit_breaker_pattern",
          "test_fallback_mechanisms"
        ],
        "docstring": "Test system resilience and fault tolerance.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "UnifiedErrorHandler": {
        "methods": [
          "handle_error",
          "log_error"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "UnifiedLoggingSystem": {
        "methods": [
          "log_error"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "SwarmException": {
        "methods": [],
        "docstring": "Base exception for swarm system.",
        "base_classes": [
          "Exception"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "OperationalException": {
        "methods": [],
        "docstring": "Operational error.",
        "base_classes": [
          "SwarmException"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ConfigurationException": {
        "methods": [],
        "docstring": "Configuration error.",
        "base_classes": [
          "SwarmException"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "CircuitBreaker": {
        "methods": [
          "__init__",
          "call",
          "_on_success",
          "_on_failure"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 40
  },
  "tests\\api\\test_api_documentation_core.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "generate_spec",
      "__init__",
      "render",
      "test_openapi_spec_structure",
      "test_api_endpoints_documentation",
      "test_request_response_schemas",
      "test_security_schemes",
      "test_openapi_spec_validation",
      "test_swagger_ui_html_generation",
      "test_swagger_ui_customization",
      "test_interactive_api_testing",
      "test_swagger_ui_responsive_design"
    ],
    "classes": {
      "MockOpenAPISpec": {
        "methods": [
          "__init__",
          "generate_spec"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "MockSwaggerUI": {
        "methods": [
          "__init__",
          "render"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "TestOpenAPISpecification": {
        "methods": [
          "test_openapi_spec_structure",
          "test_api_endpoints_documentation",
          "test_request_response_schemas",
          "test_security_schemes",
          "test_openapi_spec_validation"
        ],
        "docstring": "Test OpenAPI specification generation and validation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TestSwaggerUIIntegration": {
        "methods": [
          "test_swagger_ui_html_generation",
          "test_swagger_ui_customization",
          "test_interactive_api_testing",
          "test_swagger_ui_responsive_design"
        ],
        "docstring": "Test Swagger UI integration and rendering.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 26
  },
  "tests\\api\\test_agent_api_suite_core.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "setup_method",
      "teardown_method",
      "test_agent_registration_api",
      "test_agent_retrieval_api",
      "test_agent_update_api",
      "test_agent_deletion_api",
      "_validate_agent_data_structure",
      "_validate_coordinates_structure",
      "_create_test_agent_data",
      "__init__",
      "validate_api_endpoint",
      "__init__"
    ],
    "classes": {
      "TestAgentAPISuiteCore": {
        "methods": [
          "__init__",
          "setup_method",
          "teardown_method",
          "test_agent_registration_api",
          "test_agent_retrieval_api",
          "test_agent_update_api",
          "test_agent_deletion_api",
          "_validate_agent_data_structure",
          "_validate_coordinates_structure",
          "_create_test_agent_data"
        ],
        "docstring": "Core API testing suite for agent management endpoints",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IntegrationTestFramework": {
        "methods": [
          "__init__",
          "validate_api_endpoint"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "TestResult": {
        "methods": [
          "__init__"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "TestStatus": {
        "methods": [],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 26
  },
  "tests\\api\\test_api_documentation_advanced.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "get_version",
      "__init__",
      "generate_docs",
      "test_semantic_versioning",
      "test_url_based_versioning",
      "test_version_compatibility",
      "test_deprecation_headers",
      "test_migration_guides",
      "test_api_examples_generation",
      "test_code_samples_interactive",
      "test_api_changelog",
      "test_developer_resources",
      "test_search_and_navigation",
      "test_documentation_completeness",
      "test_documentation_accuracy",
      "test_documentation_consistency",
      "test_performance_documentation"
    ],
    "classes": {
      "MockAPIVersioning": {
        "methods": [
          "__init__",
          "get_version"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "MockDeveloperPortal": {
        "methods": [
          "__init__",
          "generate_docs"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "TestAPIVersioningStrategy": {
        "methods": [
          "test_semantic_versioning",
          "test_url_based_versioning",
          "test_version_compatibility",
          "test_deprecation_headers",
          "test_migration_guides"
        ],
        "docstring": "Test API versioning strategy implementation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TestDeveloperPortal": {
        "methods": [
          "test_api_examples_generation",
          "test_code_samples_interactive",
          "test_api_changelog",
          "test_developer_resources",
          "test_search_and_navigation"
        ],
        "docstring": "Test developer portal functionality.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TestAPIQualityAssurance": {
        "methods": [
          "test_documentation_completeness",
          "test_documentation_accuracy",
          "test_documentation_consistency",
          "test_performance_documentation"
        ],
        "docstring": "Test API documentation quality assurance.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 36
  },
  "tests\\api\\test_agent_api_suite_advanced.py": {
    "language": ".py",
    "functions": [
      "agent_api_suite_advanced",
      "api_framework",
      "run_agent_api_advanced_test_suite",
      "__init__",
      "setup_method",
      "teardown_method",
      "test_agent_status_api",
      "test_agent_coordination_api",
      "test_agent_api_error_handling",
      "test_agent_api_performance",
      "test_agent_api_security",
      "_test_status_monitoring",
      "_test_coordination_api",
      "_test_concurrent_requests",
      "_test_pagination_performance",
      "_test_sql_injection_protection",
      "_test_xss_protection",
      "_test_rate_limiting",
      "_create_test_agent_for_advanced_tests",
      "_validate_api_response_structure",
      "_measure_api_response_time"
    ],
    "classes": {
      "TestAgentAPISuiteAdvanced": {
        "methods": [
          "__init__",
          "setup_method",
          "teardown_method",
          "test_agent_status_api",
          "test_agent_coordination_api",
          "test_agent_api_error_handling",
          "test_agent_api_performance",
          "test_agent_api_security",
          "_test_status_monitoring",
          "_test_coordination_api",
          "_test_concurrent_requests",
          "_test_pagination_performance",
          "_test_sql_injection_protection",
          "_test_xss_protection",
          "_test_rate_limiting",
          "_create_test_agent_for_advanced_tests",
          "_validate_api_response_structure",
          "_measure_api_response_time"
        ],
        "docstring": "Advanced API testing suite for agent management endpoints",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 39
  },
  "tests\\deployment\\deployment_verification_advanced.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "run_advanced_deployment_verification",
      "verify_performance_metrics",
      "verify_security_measures",
      "verify_load_capacity",
      "verify_integration_flows",
      "verify_monitoring_configuration",
      "_check_response_times",
      "_check_throughput",
      "_check_memory_usage",
      "_check_cpu_usage",
      "_check_database_performance",
      "_check_ssl_configuration",
      "_check_authentication",
      "_check_authorization",
      "_check_data_encryption",
      "_check_security_headers",
      "_test_concurrent_users",
      "_test_rate_limiting",
      "_test_database_connections",
      "_test_memory_stress",
      "_test_network_bandwidth",
      "_test_user_registration",
      "_test_message_processing",
      "_test_agent_coordination",
      "_test_data_synchronization",
      "_test_error_handling",
      "_check_health_monitoring",
      "_check_performance_monitoring",
      "_check_error_tracking",
      "_check_log_aggregation",
      "_check_alert_configuration",
      "_generate_advanced_failure_report",
      "_generate_advanced_recommendations",
      "generate_advanced_deployment_report"
    ],
    "classes": {
      "DeploymentVerificationAdvanced": {
        "methods": [
          "__init__",
          "run_advanced_deployment_verification",
          "verify_performance_metrics",
          "verify_security_measures",
          "verify_load_capacity",
          "verify_integration_flows",
          "verify_monitoring_configuration",
          "_check_response_times",
          "_check_throughput",
          "_check_memory_usage",
          "_check_cpu_usage",
          "_check_database_performance",
          "_check_ssl_configuration",
          "_check_authentication",
          "_check_authorization",
          "_check_data_encryption",
          "_check_security_headers",
          "_test_concurrent_users",
          "_test_rate_limiting",
          "_test_database_connections",
          "_test_memory_stress",
          "_test_network_bandwidth",
          "_test_user_registration",
          "_test_message_processing",
          "_test_agent_coordination",
          "_test_data_synchronization",
          "_test_error_handling",
          "_check_health_monitoring",
          "_check_performance_monitoring",
          "_check_error_tracking",
          "_check_log_aggregation",
          "_check_alert_configuration",
          "_generate_advanced_failure_report",
          "_generate_advanced_recommendations",
          "generate_advanced_deployment_report"
        ],
        "docstring": "Advanced deployment verification functionality.\n\nExtends core verification with advanced features.",
        "base_classes": [
          "DeploymentVerificationCore"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 70
  },
  "tests\\contracts\\__init__.py": {
    "language": ".py",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "tests\\deployment\\deployment_verification_core.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "make_request",
      "__init__",
      "_get_environment_url",
      "run_full_deployment_verification",
      "verify_system_health",
      "verify_service_availability",
      "verify_api_endpoints",
      "verify_database_connectivity",
      "verify_configuration_integrity",
      "_check_environment_variables",
      "_check_configuration_files",
      "_check_database_config",
      "_check_api_config",
      "_check_security_config",
      "_generate_failure_report",
      "_generate_recommendations",
      "generate_deployment_report",
      "__init__"
    ],
    "classes": {
      "IntegrationTestFramework": {
        "methods": [
          "__init__",
          "make_request"
        ],
        "docstring": "Mock integration test framework for V2 compliance.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TestStatus": {
        "methods": [],
        "docstring": "Test status constants.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "DeploymentVerificationCore": {
        "methods": [
          "__init__",
          "_get_environment_url",
          "run_full_deployment_verification",
          "verify_system_health",
          "verify_service_availability",
          "verify_api_endpoints",
          "verify_database_connectivity",
          "verify_configuration_integrity",
          "_check_environment_variables",
          "_check_configuration_files",
          "_check_database_config",
          "_check_api_config",
          "_check_security_config",
          "_generate_failure_report",
          "_generate_recommendations",
          "generate_deployment_report"
        ],
        "docstring": "Core deployment verification functionality.\n\nV2 Compliance: Extracted from monolithic file.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "MockResponse": {
        "methods": [
          "__init__"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 38
  },
  "tests\\contracts\\test_contract_execution.py": {
    "language": ".py",
    "functions": [
      "test_progress_tracking",
      "test_completion_criteria_validation",
      "test_partial_completion_handling",
      "test_contract_timeout_handling",
      "test_contract_quality_assessment",
      "test_contract_rollback_mechanism",
      "test_contract_dependency_management",
      "test_contract_performance_monitoring"
    ],
    "classes": {
      "TestContractExecution": {
        "methods": [
          "test_progress_tracking",
          "test_completion_criteria_validation",
          "test_partial_completion_handling",
          "test_contract_timeout_handling",
          "test_contract_quality_assessment",
          "test_contract_rollback_mechanism",
          "test_contract_dependency_management",
          "test_contract_performance_monitoring"
        ],
        "docstring": "Test contract execution and completion tracking.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 16
  },
  "tests\\contracts\\test_contract_creation.py": {
    "language": ".py",
    "functions": [
      "test_contract_structure_validation",
      "test_contract_priority_levels",
      "test_contract_scope_validation",
      "test_contract_xp_reward_calculation",
      "test_contract_deadline_validation",
      "test_contract_agent_assignment",
      "test_contract_requirements_validation",
      "test_contract_metadata_validation"
    ],
    "classes": {
      "TestContractCreation": {
        "methods": [
          "test_contract_structure_validation",
          "test_contract_priority_levels",
          "test_contract_scope_validation",
          "test_contract_xp_reward_calculation",
          "test_contract_deadline_validation",
          "test_contract_agent_assignment",
          "test_contract_requirements_validation",
          "test_contract_metadata_validation"
        ],
        "docstring": "Test contract creation and validation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 16
  },
  "tests\\contracts\\test_contract_rewards.py": {
    "language": ".py",
    "functions": [
      "test_xp_calculation_and_distribution",
      "test_xp_award_process",
      "test_xp_leaderboard_and_analytics",
      "test_xp_penalty_system",
      "test_xp_bonus_system",
      "test_xp_milestone_system",
      "test_xp_transfer_system",
      "test_xp_audit_trail",
      "test_xp_analytics_and_reporting"
    ],
    "classes": {
      "TestXPRewards": {
        "methods": [
          "test_xp_calculation_and_distribution",
          "test_xp_award_process",
          "test_xp_leaderboard_and_analytics",
          "test_xp_penalty_system",
          "test_xp_bonus_system",
          "test_xp_milestone_system",
          "test_xp_transfer_system",
          "test_xp_audit_trail",
          "test_xp_analytics_and_reporting"
        ],
        "docstring": "Test XP reward distribution and tracking.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 18
  },
  "tests\\swarm_testing_framework\\__init__.py": {
    "language": ".py",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "tests\\architectural_patterns\\test_design_patterns.py": {
    "language": ".py",
    "functions": [
      "test_repository_pattern_implementation",
      "test_factory_pattern_implementation",
      "test_service_layer_pattern_implementation",
      "test_singleton_pattern_implementation",
      "test_observer_pattern_implementation",
      "test_strategy_pattern_implementation",
      "test_design_patterns_integration"
    ],
    "classes": {
      "TestDesignPatternsComprehensive": {
        "methods": [
          "test_repository_pattern_implementation",
          "test_factory_pattern_implementation",
          "test_service_layer_pattern_implementation",
          "test_singleton_pattern_implementation",
          "test_observer_pattern_implementation",
          "test_strategy_pattern_implementation",
          "test_design_patterns_integration"
        ],
        "docstring": "Comprehensive design pattern validation across all modules.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 14
  },
  "tests\\architectural_patterns\\test_solid_principles.py": {
    "language": ".py",
    "functions": [
      "test_single_responsibility_principle_comprehensive",
      "test_open_closed_principle_comprehensive",
      "test_liskov_substitution_principle_comprehensive",
      "test_interface_segregation_principle_comprehensive",
      "test_dependency_inversion_principle_comprehensive",
      "test_solid_principles_integration",
      "send_priority_message",
      "get_message_history",
      "send_message",
      "get_agent_ids",
      "__init__",
      "load",
      "get_agent_ids",
      "get_coords",
      "validate_all",
      "new_feature",
      "__init__",
      "is_all_ok"
    ],
    "classes": {
      "TestSOLIDPrinciplesComprehensive": {
        "methods": [
          "test_single_responsibility_principle_comprehensive",
          "test_open_closed_principle_comprehensive",
          "test_liskov_substitution_principle_comprehensive",
          "test_interface_segregation_principle_comprehensive",
          "test_dependency_inversion_principle_comprehensive",
          "test_solid_principles_integration"
        ],
        "docstring": "Comprehensive SOLID principles validation across all modules.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ExtendedMessagingService": {
        "methods": [
          "send_priority_message",
          "get_message_history"
        ],
        "docstring": "Extended service that adds new functionality without modifying base.",
        "base_classes": [
          "ConsolidatedMessagingService"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "MockMessagingService": {
        "methods": [
          "send_message",
          "get_agent_ids"
        ],
        "docstring": "Mock service that maintains LSP contract.",
        "base_classes": [
          "ConsolidatedMessagingService"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "MockCoordinateLoader": {
        "methods": [
          "__init__",
          "load",
          "get_agent_ids",
          "get_coords",
          "validate_all"
        ],
        "docstring": "Mock coordinate loader for testing DIP.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ExtendedService": {
        "methods": [
          "new_feature"
        ],
        "docstring": null,
        "base_classes": [
          "ConsolidatedMessagingService"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "MockCoords": {
        "methods": [
          "__init__"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "MockValidationReport": {
        "methods": [
          "is_all_ok"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 36
  },
  "tests\\coordination\\test_coordination_service_core.py": {
    "language": ".py",
    "functions": [
      "setup_method",
      "teardown_method",
      "test_service_initialization",
      "test_coordination_rules_initialization",
      "test_routing_table_initialization",
      "test_process_message_basic",
      "test_process_message_urgent",
      "test_process_message_with_routing",
      "test_get_routing_config",
      "test_command_history_tracking",
      "test_get_command_stats",
      "test_update_coordination_rules",
      "test_message_validation",
      "test_error_handling_processing_failure",
      "test_service_reset_functionality",
      "test_routing_table_validation",
      "__init__",
      "__init__",
      "process_message",
      "determine_coordination_strategy",
      "get_routing_config",
      "_determine_status",
      "validate_message",
      "get_command_stats",
      "update_coordination_rule",
      "get_coordination_rules",
      "get_service_status",
      "validate_routing_table",
      "reset_service"
    ],
    "classes": {
      "TestConsolidatedCoordinationService": {
        "methods": [
          "setup_method",
          "teardown_method",
          "test_service_initialization",
          "test_coordination_rules_initialization",
          "test_routing_table_initialization",
          "test_process_message_basic",
          "test_process_message_urgent",
          "test_process_message_with_routing",
          "test_get_routing_config",
          "test_command_history_tracking",
          "test_get_command_stats",
          "test_update_coordination_rules",
          "test_message_validation",
          "test_error_handling_processing_failure",
          "test_service_reset_functionality",
          "test_routing_table_validation"
        ],
        "docstring": "Test suite for ConsolidatedCoordinationService core functionality.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "MockUnifiedMessage": {
        "methods": [
          "__init__"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "MockUnifiedMessageType": {
        "methods": [],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "MockUnifiedMessagePriority": {
        "methods": [],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "MockSenderType": {
        "methods": [],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "MockConsolidatedCoordinationService": {
        "methods": [
          "__init__",
          "process_message",
          "determine_coordination_strategy",
          "get_routing_config",
          "_determine_status",
          "validate_message",
          "get_command_stats",
          "update_coordination_rule",
          "get_coordination_rules",
          "get_service_status",
          "validate_routing_table",
          "reset_service"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 58
  },
  "tests\\architectural_patterns\\__init__.py": {
    "language": ".py",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "tests\\coordination\\__init__.py": {
    "language": ".py",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "tests\\architectural_patterns\\test_architecture_validation.py": {
    "language": ".py",
    "functions": [
      "test_module_structure_validation",
      "test_dependency_management_validation",
      "test_error_handling_validation",
      "test_performance_validation",
      "test_security_validation",
      "test_maintainability_validation",
      "test_architecture_quality_metrics"
    ],
    "classes": {
      "TestArchitectureValidationComprehensive": {
        "methods": [
          "test_module_structure_validation",
          "test_dependency_management_validation",
          "test_error_handling_validation",
          "test_performance_validation",
          "test_security_validation",
          "test_maintainability_validation",
          "test_architecture_quality_metrics"
        ],
        "docstring": "Comprehensive architecture validation across all modules.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 14
  },
  "tests\\coordination\\test_coordination_service_advanced.py": {
    "language": ".py",
    "functions": [
      "setup_method",
      "teardown_method",
      "test_bulk_message_processing",
      "test_coordination_service_status",
      "test_message_priority_handling",
      "test_message_type_routing",
      "test_message_processing_performance",
      "test_edge_case_empty_messages",
      "setup_method",
      "teardown_method",
      "test_full_coordination_workflow",
      "test_multi_agent_coordination_scenario",
      "test_error_recovery_and_retry_logic",
      "mock_routing_failure",
      "__init__",
      "__init__",
      "process_message",
      "determine_coordination_strategy",
      "get_routing_config",
      "_determine_status",
      "validate_message",
      "get_command_stats",
      "update_coordination_rule",
      "get_coordination_rules",
      "get_service_status",
      "validate_routing_table",
      "reset_service"
    ],
    "classes": {
      "TestCoordinationServiceAdvanced": {
        "methods": [
          "setup_method",
          "teardown_method",
          "test_bulk_message_processing",
          "test_coordination_service_status",
          "test_message_priority_handling",
          "test_message_type_routing",
          "test_message_processing_performance",
          "test_edge_case_empty_messages"
        ],
        "docstring": "Advanced tests for ConsolidatedCoordinationService.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TestCoordinationServiceIntegration": {
        "methods": [
          "setup_method",
          "teardown_method",
          "test_full_coordination_workflow",
          "test_multi_agent_coordination_scenario",
          "test_error_recovery_and_retry_logic"
        ],
        "docstring": "Integration tests for ConsolidatedCoordinationService.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "MockUnifiedMessage": {
        "methods": [
          "__init__"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "MockUnifiedMessageType": {
        "methods": [],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "MockUnifiedMessagePriority": {
        "methods": [],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "MockSenderType": {
        "methods": [],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "MockConsolidatedCoordinationService": {
        "methods": [
          "__init__",
          "process_message",
          "determine_coordination_strategy",
          "get_routing_config",
          "_determine_status",
          "validate_message",
          "get_command_stats",
          "update_coordination_rule",
          "get_coordination_rules",
          "get_service_status",
          "validate_routing_table",
          "reset_service"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 53
  },
  "src\\web\\swarm_monitoring_ui.py": {
    "language": ".py",
    "functions": [
      "create_monitoring_app",
      "__init__",
      "disconnect",
      "__init__",
      "_setup_routes",
      "_start_background_tasks",
      "get_app"
    ],
    "classes": {
      "WebSocketManager": {
        "methods": [
          "__init__",
          "disconnect"
        ],
        "docstring": "WebSocket connection manager.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SwarmMonitoringUI": {
        "methods": [
          "__init__",
          "_setup_routes",
          "_start_background_tasks",
          "get_app"
        ],
        "docstring": "Swarm monitoring web interface.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 13
  },
  "src\\web\\simple_monitoring_dashboard_advanced.py": {
    "language": ".py",
    "functions": [
      "generate_dashboard_html",
      "__init__",
      "start",
      "stop"
    ],
    "classes": {
      "AdvancedSwarmMonitoringHandler": {
        "methods": [
          "generate_dashboard_html"
        ],
        "docstring": "Advanced HTTP request handler with enhanced HTML generation",
        "base_classes": [
          "SwarmMonitoringHandler"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SimpleSwarmDashboard": {
        "methods": [
          "__init__",
          "start",
          "stop"
        ],
        "docstring": "Simple SWARM monitoring dashboard using only standard library",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 8
  },
  "src\\web\\swarm_monitoring_data.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "_init_database",
      "save_agent_status",
      "get_agent_status_history",
      "save_alert",
      "get_alerts",
      "resolve_alert",
      "save_system_metrics",
      "get_metrics_history",
      "get_agent_statistics",
      "cleanup_old_data",
      "get_database_stats"
    ],
    "classes": {
      "SwarmMonitoringData": {
        "methods": [
          "__init__",
          "_init_database",
          "save_agent_status",
          "get_agent_status_history",
          "save_alert",
          "get_alerts",
          "resolve_alert",
          "save_system_metrics",
          "get_metrics_history",
          "get_agent_statistics",
          "cleanup_old_data",
          "get_database_stats"
        ],
        "docstring": "Data persistence and management for swarm monitoring.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 24
  },
  "src\\web\\swarm_monitoring_core.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "load_agent_status",
      "update_agent_status",
      "get_system_metrics",
      "create_alert",
      "resolve_alert",
      "get_active_alerts",
      "get_agent_summary",
      "get_metrics_summary",
      "_calculate_trends",
      "cleanup_old_data",
      "get_health_status",
      "avg_metric"
    ],
    "classes": {
      "AgentStatus": {
        "methods": [],
        "docstring": "Agent status model.",
        "base_classes": [
          "BaseModel"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "Alert": {
        "methods": [],
        "docstring": "Alert model.",
        "base_classes": [
          "BaseModel"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SystemMetrics": {
        "methods": [],
        "docstring": "System metrics model.",
        "base_classes": [
          "BaseModel"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SwarmMonitoringCore": {
        "methods": [
          "__init__",
          "load_agent_status",
          "update_agent_status",
          "get_system_metrics",
          "create_alert",
          "resolve_alert",
          "get_active_alerts",
          "get_agent_summary",
          "get_metrics_summary",
          "_calculate_trends",
          "cleanup_old_data",
          "get_health_status"
        ],
        "docstring": "Core swarm monitoring functionality.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 25
  },
  "src\\web\\simple_monitoring_dashboard_core.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "do_GET",
      "serve_dashboard",
      "serve_agents_status",
      "serve_system_status",
      "serve_consolidation_progress",
      "serve_static_file",
      "send_json_response",
      "get_agents_status",
      "calculate_consolidation_progress",
      "generate_dashboard_html",
      "log_message"
    ],
    "classes": {
      "SwarmMonitoringHandler": {
        "methods": [
          "__init__",
          "do_GET",
          "serve_dashboard",
          "serve_agents_status",
          "serve_system_status",
          "serve_consolidation_progress",
          "serve_static_file",
          "send_json_response",
          "get_agents_status",
          "calculate_consolidation_progress",
          "generate_dashboard_html",
          "log_message"
        ],
        "docstring": "HTTP request handler for the SWARM monitoring dashboard",
        "base_classes": [
          "http.server.BaseHTTPRequestHandler"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 24
  },
  "src\\web\\static\\js\\dashboard-new.js": {
    "language": ".js",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "src\\web\\static\\js\\dashboard-utils-new.js": {
    "language": ".js",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "src\\web\\static\\js\\unified-frontend-utilities.js": {
    "language": ".js",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "src\\web\\static\\js\\api.js": {
    "language": ".js",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "src\\web\\static\\js\\app.js": {
    "language": ".js",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "src\\web\\static\\js\\performance\\performance-optimization-report.js": {
    "language": ".js",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "src\\web\\static\\js\\trading-robot\\chart-validation\\module.js": {
    "language": ".js",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "src\\web\\static\\js\\components\\dashboard.js": {
    "language": ".js",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "src\\web\\static\\js\\components\\navigation.js": {
    "language": ".js",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "src\\web\\vector_database\\analytics_utils.py": {
    "language": ".py",
    "functions": [
      "simulate_get_analytics",
      "process_analytics"
    ],
    "classes": {
      "AnalyticsUtils": {
        "methods": [
          "simulate_get_analytics",
          "process_analytics"
        ],
        "docstring": "Utility functions for analytics operations.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 4
  },
  "src\\web\\vector_database\\document_utils.py": {
    "language": ".py",
    "functions": [
      "simulate_get_documents",
      "simulate_add_document",
      "simulate_delete_document"
    ],
    "classes": {
      "DocumentUtils": {
        "methods": [
          "simulate_get_documents",
          "simulate_add_document",
          "simulate_delete_document"
        ],
        "docstring": "Utility functions for document operations.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 6
  },
  "src\\web\\vector_database\\collection_utils.py": {
    "language": ".py",
    "functions": [
      "simulate_get_collections",
      "simulate_export_data"
    ],
    "classes": {
      "CollectionUtils": {
        "methods": [
          "simulate_get_collections",
          "simulate_export_data"
        ],
        "docstring": "Utility functions for collection operations.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 4
  },
  "src\\web\\vector_database\\middleware.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "error_handler_decorator",
      "json_required_decorator",
      "validate_request_decorator",
      "log_request_decorator",
      "cors_headers_decorator",
      "rate_limit_decorator",
      "cache_response_decorator",
      "validate_pagination_decorator"
    ],
    "classes": {
      "VectorDatabaseMiddleware": {
        "methods": [
          "__init__",
          "error_handler_decorator",
          "json_required_decorator",
          "validate_request_decorator",
          "log_request_decorator",
          "cors_headers_decorator",
          "rate_limit_decorator",
          "cache_response_decorator",
          "validate_pagination_decorator"
        ],
        "docstring": "Main middleware orchestrator for vector database operations.\n\n    V2 Compliance: < 100 lines, facade pattern, single responsibility.\n    This class orchestrates all middleware components.\n\nEXAMPLE USAGE:\n==============\n\n# Basic usage example\nfrom src.web.vector_database.middleware import Middleware\n\n# Initialize and use\ninstance = Middleware()\nresult = instance.execute()\nlogger.info(f\"Execution result: {result}\")\n\n# Advanced configuration\nconfig = {\n    \"option1\": \"value1\",\n    \"option2\": True\n}\n\ninstance = Middleware(config)\nadvanced_result = instance.execute_advanced()\nlogger.info(f\"Advanced result: {advanced_result}\")",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 18
  },
  "src\\web\\dashboard\\models.py": {
    "language": ".py",
    "functions": [],
    "classes": {
      "AgentStatus": {
        "methods": [],
        "docstring": "Agent status model.",
        "base_classes": [
          "BaseModel"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SystemMetrics": {
        "methods": [],
        "docstring": "System metrics model.",
        "base_classes": [
          "BaseModel"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SwarmMetrics": {
        "methods": [],
        "docstring": "Swarm metrics model.",
        "base_classes": [
          "BaseModel"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "DashboardData": {
        "methods": [],
        "docstring": "Complete dashboard data model.",
        "base_classes": [
          "BaseModel"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 0
  },
  "src\\services\\consolidated_agent_management_service.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "_load_assignments",
      "_create_vector_integration",
      "_save_assignments",
      "get_agent_principle",
      "assign_principle",
      "get_all_assignments",
      "get_agents_by_principle",
      "get_agent_status",
      "get_integration_stats",
      "_get_recent_work_count",
      "_get_pending_tasks_count",
      "_get_last_activity",
      "_get_total_documents",
      "_get_agent_documents",
      "index_agent_work",
      "search_agent_work",
      "get_agent_context",
      "get_agent_config",
      "reload_config",
      "get_comprehensive_agent_report"
    ],
    "classes": {
      "ArchitecturalPrinciple": {
        "methods": [],
        "docstring": "Temporary architectural principle model.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ConsolidatedAgentManagementService": {
        "methods": [
          "__init__",
          "_load_assignments",
          "_create_vector_integration",
          "_save_assignments",
          "get_agent_principle",
          "assign_principle",
          "get_all_assignments",
          "get_agents_by_principle",
          "get_agent_status",
          "get_integration_stats",
          "_get_recent_work_count",
          "_get_pending_tasks_count",
          "_get_last_activity",
          "_get_total_documents",
          "_get_agent_documents",
          "index_agent_work",
          "search_agent_work",
          "get_agent_context",
          "get_agent_config",
          "reload_config",
          "get_comprehensive_agent_report"
        ],
        "docstring": "Unified agent management service combining assignment, status, and vector integration.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 42
  },
  "src\\web\\dashboard\\metrics_collector.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "get_system_metrics",
      "get_agent_statuses",
      "get_swarm_metrics"
    ],
    "classes": {
      "MetricsCollector": {
        "methods": [
          "__init__",
          "get_system_metrics",
          "get_agent_statuses",
          "get_swarm_metrics"
        ],
        "docstring": "Collects system and swarm metrics.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 8
  },
  "src\\services\\consolidated_onboarding_service.py": {
    "language": ".py",
    "functions": [
      "get_phase_2_status",
      "get_agent_assignments",
      "get_targets",
      "is_phase_2_active"
    ],
    "classes": {},
    "routes": [],
    "complexity": 4
  },
  "src\\services\\coordination\\bulk_coordinator.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "coordinate_bulk_messages",
      "_coordinate_single_message",
      "_group_messages_by_strategy",
      "coordinate_messages_by_priority",
      "coordinate_messages_by_type",
      "coordinate_messages_by_sender",
      "get_bulk_coordinator_status"
    ],
    "classes": {
      "BulkCoordinator": {
        "methods": [
          "__init__",
          "coordinate_bulk_messages",
          "_coordinate_single_message",
          "_group_messages_by_strategy",
          "coordinate_messages_by_priority",
          "coordinate_messages_by_type",
          "coordinate_messages_by_sender",
          "get_bulk_coordinator_status"
        ],
        "docstring": "Handles bulk message coordination and grouping.\n\n    Manages bulk message processing, grouping by strategy, and batch coordination.\n\nEXAMPLE USAGE:\n==============\n\n# Import the service\nfrom src.services.coordination.bulk_coordinator import Bulk_CoordinatorService\n\n# Initialize service\nservice = Bulk_CoordinatorService()\n\n# Basic service operation\nresponse = service.handle_request(request_data)\nlogger.info(f\"Service response: {response}\")\n\n# Service with dependency injection\nfrom src.core.dependency_container import Container\n\ncontainer = Container()\nservice = container.get(Bulk_CoordinatorService)\n\n# Execute service method\nresult = service.execute_operation(input_data, context)\nlogger.info(f\"Operation result: {result}\")",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 16
  },
  "src\\services\\__init__.py": {
    "language": ".py",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "src\\services\\handlers_orchestrator.py": {
    "language": ".py",
    "functions": [
      "create_unified_handlers_orchestrator",
      "__init__",
      "_initialize_handlers",
      "process_request",
      "submit_request",
      "get_request_status",
      "_handle_role_command",
      "_handle_coordinator_command",
      "_handle_specialist_command",
      "_handle_analyst_command",
      "_handle_overnight",
      "schedule_overnight_task",
      "process_overnight_batch",
      "perform_overnight_maintenance",
      "_handle_agent_assignment",
      "assign_task_to_agent",
      "_handle_agent_status",
      "get_agent_status",
      "update_agent_status",
      "check_agent_health",
      "create_task",
      "update_task",
      "complete_task",
      "get_system_status",
      "coordinate_agents",
      "assign_tasks",
      "analyze_domain",
      "provide_expertise",
      "generate_report",
      "analyze_data",
      "_log_request",
      "get_status"
    ],
    "classes": {
      "HandlerType": {
        "methods": [],
        "docstring": null,
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "HandlerPriority": {
        "methods": [],
        "docstring": null,
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "HandlerStatus": {
        "methods": [],
        "docstring": null,
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "HandlerRequest": {
        "methods": [],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "UnifiedHandlersOrchestrator": {
        "methods": [
          "__init__",
          "_initialize_handlers",
          "process_request",
          "submit_request",
          "get_request_status",
          "_handle_role_command",
          "_handle_coordinator_command",
          "_handle_specialist_command",
          "_handle_analyst_command",
          "_handle_overnight",
          "schedule_overnight_task",
          "process_overnight_batch",
          "perform_overnight_maintenance",
          "_handle_agent_assignment",
          "assign_task_to_agent",
          "_handle_agent_status",
          "get_agent_status",
          "update_agent_status",
          "check_agent_health",
          "create_task",
          "update_task",
          "complete_task",
          "get_system_status",
          "coordinate_agents",
          "assign_tasks",
          "analyze_domain",
          "provide_expertise",
          "generate_report",
          "analyze_data",
          "_log_request",
          "get_status"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 63
  },
  "src\\services\\coordination\\stats_tracker.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "update_coordination_stats",
      "_update_detailed_stats",
      "_update_category_stats",
      "get_coordination_stats",
      "get_detailed_stats",
      "get_performance_summary",
      "reset_stats",
      "get_tracker_status"
    ],
    "classes": {
      "StatsTracker": {
        "methods": [
          "__init__",
          "update_coordination_stats",
          "_update_detailed_stats",
          "_update_category_stats",
          "get_coordination_stats",
          "get_detailed_stats",
          "get_performance_summary",
          "reset_stats",
          "get_tracker_status"
        ],
        "docstring": "Handles coordination statistics tracking and reporting.\n\n    Manages statistics collection, calculation, and reporting for coordination\n    operations.\n\nEXAMPLE USAGE:\n==============\n\n# Import the service\nfrom src.services.coordination.stats_tracker import Stats_TrackerService\n\n# Initialize service\nservice = Stats_TrackerService()\n\n# Basic service operation\nresponse = service.handle_request(request_data)\nlogger.info(f\"Service response: {response}\")\n\n# Service with dependency injection\nfrom src.core.dependency_container import Container\n\ncontainer = Container()\nservice = container.get(Stats_TrackerService)\n\n# Execute service method\nresult = service.execute_operation(input_data, context)\nlogger.info(f\"Operation result: {result}\")",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 18
  },
  "src\\services\\unified_onboarding_service.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "to_dict",
      "__init__",
      "create_onboarding_contract",
      "create_onboarding_message",
      "_get_role_onboarding_guidance",
      "get_agent_state",
      "get_agent_contract",
      "save_onboarding_state",
      "load_onboarding_state",
      "__init__"
    ],
    "classes": {
      "AgentState": {
        "methods": [],
        "docstring": "Finite State Machine states for agents.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ContractType": {
        "methods": [],
        "docstring": "Types of contracts agents can enter.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "AgentContract": {
        "methods": [
          "__init__",
          "to_dict"
        ],
        "docstring": "Contract system for agent task commitments.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "UnifiedOnboardingService": {
        "methods": [
          "__init__",
          "create_onboarding_contract",
          "create_onboarding_message",
          "_get_role_onboarding_guidance",
          "get_agent_state",
          "get_agent_contract",
          "save_onboarding_state",
          "load_onboarding_state"
        ],
        "docstring": "Unified onboarding service consolidating all onboarding implementations.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "DiscordOnboardingIntegration": {
        "methods": [
          "__init__"
        ],
        "docstring": "Discord Commander integration for onboarding notifications.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 22
  },
  "src\\services\\unified_coordination_service.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "coordinate_bulk_operation",
      "get_coordination_statistics",
      "apply_coordination_strategy",
      "__init__",
      "record_coordination_stats",
      "get_current_stats",
      "reset_stats",
      "__init__",
      "determine_strategy",
      "apply_strategy",
      "_default_strategy",
      "_priority_strategy",
      "_batch_strategy",
      "__init__",
      "coordinate_messages",
      "_coordinate_group"
    ],
    "classes": {
      "UnifiedCoordinationService": {
        "methods": [
          "__init__",
          "coordinate_bulk_operation",
          "get_coordination_statistics",
          "apply_coordination_strategy"
        ],
        "docstring": "Unified coordination service combining all coordination functionality.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "StatsTracker": {
        "methods": [
          "__init__",
          "record_coordination_stats",
          "get_current_stats",
          "reset_stats"
        ],
        "docstring": "Handles coordination statistics tracking and reporting.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "StrategyCoordinator": {
        "methods": [
          "__init__",
          "determine_strategy",
          "apply_strategy",
          "_default_strategy",
          "_priority_strategy",
          "_batch_strategy"
        ],
        "docstring": "Handles coordination strategy determination and application.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "BulkCoordinator": {
        "methods": [
          "__init__",
          "coordinate_messages",
          "_coordinate_group"
        ],
        "docstring": "Handles bulk message coordination and grouping.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 34
  },
  "src\\services\\coordination\\strategy_coordinator.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "_initialize_coordination_rules",
      "_initialize_routing_table",
      "determine_coordination_strategy",
      "apply_coordination_rules",
      "_estimate_delivery_time",
      "get_coordination_rules",
      "get_routing_table",
      "update_coordination_rule",
      "update_routing_config",
      "get_coordinator_status"
    ],
    "classes": {
      "StrategyCoordinator": {
        "methods": [
          "__init__",
          "_initialize_coordination_rules",
          "_initialize_routing_table",
          "determine_coordination_strategy",
          "apply_coordination_rules",
          "_estimate_delivery_time",
          "get_coordination_rules",
          "get_routing_table",
          "update_coordination_rule",
          "update_routing_config",
          "get_coordinator_status"
        ],
        "docstring": "Handles coordination strategy determination and application.\n\n    Manages strategy selection, rule application, and coordination execution.\n\nEXAMPLE USAGE:\n==============\n\n# Import the service\nfrom src.services.coordination.strategy_coordinator import Strategy_CoordinatorService\n\n# Initialize service\nservice = Strategy_CoordinatorService()\n\n# Basic service operation\nresponse = service.handle_request(request_data)\nlogger.info(f\"Service response: {response}\")\n\n# Service with dependency injection\nfrom src.core.dependency_container import Container\n\ncontainer = Container()\nservice = container.get(Strategy_CoordinatorService)\n\n# Execute service method\nresult = service.execute_operation(input_data, context)\nlogger.info(f\"Operation result: {result}\")",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 22
  },
  "src\\services\\consolidated_messaging_service.py": {
    "language": ".py",
    "functions": [
      "build_parser",
      "main",
      "__init__",
      "send_message",
      "broadcast_message",
      "_format_a2a_message",
      "_paste_to_coords",
      "get_status"
    ],
    "classes": {
      "ConsolidatedMessagingService": {
        "methods": [
          "__init__",
          "send_message",
          "broadcast_message",
          "_format_a2a_message",
          "_paste_to_coords",
          "get_status"
        ],
        "docstring": "Consolidated messaging service with PyAutoGUI automation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 14
  },
  "src\\services\\models\\vector_models.py": {
    "language": ".py",
    "functions": [
      "create_vector_document",
      "from_dict",
      "to_dict"
    ],
    "classes": {
      "EmbeddingModel": {
        "methods": [],
        "docstring": "Supported embedding models.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "DocumentType": {
        "methods": [],
        "docstring": "Types of documents in the vector database.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "VectorDocumentType": {
        "methods": [],
        "docstring": "Document types for vector database.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SearchType": {
        "methods": [],
        "docstring": "Search types for vector database.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "VectorDocument": {
        "methods": [
          "from_dict",
          "to_dict"
        ],
        "docstring": "Vector document representation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "EmbeddingResult": {
        "methods": [],
        "docstring": "Result of embedding operation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SearchQuery": {
        "methods": [],
        "docstring": "Search query for vector database.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SearchResult": {
        "methods": [],
        "docstring": "Result of vector database search.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SimilaritySearchResult": {
        "methods": [],
        "docstring": "Result of similarity search.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "CollectionConfig": {
        "methods": [],
        "docstring": "Configuration for vector collection.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 5
  },
  "src\\services\\utils\\vector_config_utils.py": {
    "language": ".py",
    "functions": [
      "load_simple_config"
    ],
    "classes": {},
    "routes": [],
    "complexity": 1
  },
  "src\\services\\protocol\\routers\\route_analyzer.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "analyze_route_options",
      "_select_fastest_route",
      "_calculate_route_score",
      "_generate_route_key",
      "update_route_performance",
      "get_route_performance_summary",
      "get_route_usage_stats",
      "clear_performance_data",
      "get_analyzer_status"
    ],
    "classes": {
      "RouteAnalyzer": {
        "methods": [
          "__init__",
          "analyze_route_options",
          "_select_fastest_route",
          "_calculate_route_score",
          "_generate_route_key",
          "update_route_performance",
          "get_route_performance_summary",
          "get_route_usage_stats",
          "clear_performance_data",
          "get_analyzer_status"
        ],
        "docstring": "Analyzes route options and calculates scores.\n\n    Handles route analysis, scoring, and selection logic for message routing decisions.\n\nEXAMPLE USAGE:\n==============\n\n# Import the service\nfrom src.services.protocol.routers.route_analyzer import Route_AnalyzerService\n\n# Initialize service\nservice = Route_AnalyzerService()\n\n# Basic service operation\nresponse = service.handle_request(request_data)\nlogger.info(f\"Service response: {response}\")\n\n# Service with dependency injection\nfrom src.core.dependency_container import Container\n\ncontainer = Container()\nservice = container.get(Route_AnalyzerService)\n\n# Execute service method\nresult = service.execute_operation(input_data, context)\nlogger.info(f\"Operation result: {result}\")",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 20
  },
  "src\\services\\vector_database\\status_indexer.py": {
    "language": ".py",
    "functions": [
      "load_status",
      "index_all_statuses"
    ],
    "classes": {},
    "routes": [],
    "complexity": 2
  },
  "src\\services\\thea\\browser\\thea_browser_service.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "_check_selenium_availability",
      "initialize_driver",
      "_create_chrome_options",
      "navigate_to_thea",
      "navigate_to_chatgpt",
      "get_current_url",
      "wait_for_element",
      "find_input_field",
      "send_message_to_input",
      "get_cookies",
      "add_cookies",
      "refresh_page",
      "execute_script",
      "driver_context",
      "cleanup",
      "__enter__",
      "__exit__"
    ],
    "classes": {
      "BrowserMode": {
        "methods": [],
        "docstring": "Browser automation modes.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TheaBrowserService": {
        "methods": [
          "__init__",
          "_check_selenium_availability",
          "initialize_driver",
          "_create_chrome_options",
          "navigate_to_thea",
          "navigate_to_chatgpt",
          "get_current_url",
          "wait_for_element",
          "find_input_field",
          "send_message_to_input",
          "get_cookies",
          "add_cookies",
          "refresh_page",
          "execute_script",
          "driver_context",
          "cleanup",
          "__enter__",
          "__exit__"
        ],
        "docstring": "Browser service for Thea automation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 36
  },
  "src\\services\\thea\\responses\\thea_response_service.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "wait_for_response",
      "_wait_for_response_manual",
      "capture_response",
      "_extract_response_text",
      "_take_screenshot",
      "_create_response_metadata",
      "_find_latest_sent_message",
      "_create_conversation_log"
    ],
    "classes": {
      "ResponseStatus": {
        "methods": [],
        "docstring": "Response detection status.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TheaResponseService": {
        "methods": [
          "__init__",
          "wait_for_response",
          "_wait_for_response_manual",
          "capture_response",
          "_extract_response_text",
          "_take_screenshot",
          "_create_response_metadata",
          "_find_latest_sent_message",
          "_create_conversation_log"
        ],
        "docstring": "Service for handling Thea responses.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 18
  },
  "src\\services\\thea\\authentication\\thea_authentication_service.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "save_cookies",
      "load_cookies",
      "has_valid_cookies",
      "clear_cookies",
      "__init__",
      "is_logged_in",
      "__init__",
      "ensure_authenticated",
      "_try_cookie_authentication",
      "_manual_authentication",
      "save_session_cookies",
      "check_login_status",
      "clear_authentication"
    ],
    "classes": {
      "AuthStatus": {
        "methods": [],
        "docstring": "Authentication status.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TheaCookieManager": {
        "methods": [
          "__init__",
          "save_cookies",
          "load_cookies",
          "has_valid_cookies",
          "clear_cookies"
        ],
        "docstring": "Manages cookie persistence for Thea authentication.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TheaLoginDetector": {
        "methods": [
          "__init__",
          "is_logged_in"
        ],
        "docstring": "Detects login status on ChatGPT pages.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TheaAuthenticationService": {
        "methods": [
          "__init__",
          "ensure_authenticated",
          "_try_cookie_authentication",
          "_manual_authentication",
          "save_session_cookies",
          "check_login_status",
          "clear_authentication"
        ],
        "docstring": "Handles authentication for Thea services.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 28
  },
  "src\\services\\thea\\core\\thea_communication_manager.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "initialize",
      "run_communication_cycle",
      "_print_success_summary",
      "create_response_analysis",
      "send_quick_message",
      "get_status",
      "cleanup",
      "__enter__",
      "__exit__"
    ],
    "classes": {
      "TheaCommunicationManager": {
        "methods": [
          "__init__",
          "initialize",
          "run_communication_cycle",
          "_print_success_summary",
          "create_response_analysis",
          "send_quick_message",
          "get_status",
          "cleanup",
          "__enter__",
          "__exit__"
        ],
        "docstring": "Main orchestrator for Thea communication system.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 20
  },
  "src\\services\\messaging\\delivery\\fallback.py": {
    "language": ".py",
    "functions": [
      "send_with_fallback",
      "broadcast"
    ],
    "classes": {},
    "routes": [],
    "complexity": 2
  },
  "src\\services\\messaging\\task_handlers.py": {
    "language": ".py",
    "functions": [
      "claim_task",
      "handle_claim",
      "handle_complete"
    ],
    "classes": {},
    "routes": [],
    "complexity": 3
  },
  "src\\services\\messaging\\thea_handlers.py": {
    "language": ".py",
    "functions": [
      "send_to_thea"
    ],
    "classes": {},
    "routes": [],
    "complexity": 1
  },
  "src\\services\\thea\\commander\\thea_response_processor.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "__init__",
      "process_thea_response",
      "generate_commander_thea_analysis",
      "_extract_text_from_screenshot",
      "_structure_response_content",
      "_extract_key_insights",
      "_extract_action_items",
      "_calculate_confidence_metrics",
      "_calculate_quality_score",
      "_generate_enhanced_analysis"
    ],
    "classes": {
      "ResponseAnalysisResult": {
        "methods": [
          "__init__"
        ],
        "docstring": "Result of response analysis with structured data.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "CommanderTheaResponseProcessor": {
        "methods": [
          "__init__",
          "process_thea_response",
          "generate_commander_thea_analysis",
          "_extract_text_from_screenshot",
          "_structure_response_content",
          "_extract_key_insights",
          "_extract_action_items",
          "_calculate_confidence_metrics",
          "_calculate_quality_score",
          "_generate_enhanced_analysis"
        ],
        "docstring": "Advanced response processor for Commander THEA consultations.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 22
  },
  "src\\services\\thea\\commander\\thea_commander_manager.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "initialize",
      "run_enhanced_consultation",
      "run_quick_analysis",
      "get_analysis_history",
      "_create_enhanced_conversation_log",
      "_display_analysis_summary",
      "_cleanup_resources"
    ],
    "classes": {
      "CommanderTheaManager": {
        "methods": [
          "__init__",
          "initialize",
          "run_enhanced_consultation",
          "run_quick_analysis",
          "get_analysis_history",
          "_create_enhanced_conversation_log",
          "_display_analysis_summary",
          "_cleanup_resources"
        ],
        "docstring": "Enhanced Commander THEA communication manager with advanced analysis capabilities.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 16
  },
  "src\\services\\messaging\\providers\\fallback_provider\\__init__.py": {
    "language": ".py",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "src\\services\\messaging\\cli\\messaging_cli.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "create_parser",
      "run_cli_interface",
      "_handle_send_message",
      "_handle_broadcast_message",
      "_handle_show_history",
      "_handle_show_status",
      "_handle_list_agents",
      "_handle_start_onboarding"
    ],
    "classes": {
      "MessagingCLI": {
        "methods": [
          "__init__",
          "create_parser",
          "run_cli_interface",
          "_handle_send_message",
          "_handle_broadcast_message",
          "_handle_show_history",
          "_handle_show_status",
          "_handle_list_agents",
          "_handle_start_onboarding"
        ],
        "docstring": "Command-line interface for messaging system.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 18
  },
  "src\\services\\thea\\messaging\\thea_messaging_service.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "send_message",
      "_send_via_selenium",
      "_send_via_manual",
      "wait_for_response",
      "_wait_for_response_manual",
      "_save_message",
      "get_default_message",
      "load_message_template"
    ],
    "classes": {
      "MessageStatus": {
        "methods": [],
        "docstring": "Message sending status.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TheaMessagingService": {
        "methods": [
          "__init__",
          "send_message",
          "_send_via_selenium",
          "_send_via_manual",
          "wait_for_response",
          "_wait_for_response_manual",
          "_save_message",
          "get_default_message",
          "load_message_template"
        ],
        "docstring": "Handles message sending and receiving for Thea communication.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 18
  },
  "src\\services\\messaging\\cli\\messaging_cli_clean.py": {
    "language": ".py",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "src\\services\\messaging\\history_service\\__init__.py": {
    "language": ".py",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "src\\services\\messaging\\broadcast_service\\__init__.py": {
    "language": ".py",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "src\\services\\analytics\\advanced_analytics_service.py": {
    "language": ".py",
    "functions": [
      "get_advanced_analytics_service",
      "__init__",
      "start",
      "stop",
      "_initialize_ml_models",
      "generate_predictive_report",
      "_generate_predictions",
      "_analyze_anomalies",
      "_analyze_trends",
      "_calculate_ml_confidence",
      "add_real_time_data",
      "get_anomaly_alerts",
      "get_advanced_stats",
      "get_service_status"
    ],
    "classes": {
      "AdvancedAnalyticsService": {
        "methods": [
          "__init__",
          "start",
          "stop",
          "_initialize_ml_models",
          "generate_predictive_report",
          "_generate_predictions",
          "_analyze_anomalies",
          "_analyze_trends",
          "_calculate_ml_confidence",
          "add_real_time_data",
          "get_anomaly_alerts",
          "get_advanced_stats",
          "get_service_status"
        ],
        "docstring": "Advanced analytics service with ML capabilities.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 27
  },
  "src\\services\\analytics\\intelligent_caching_system.py": {
    "language": ".py",
    "functions": [
      "get_intelligent_cache",
      "get_predictive_cache_manager",
      "__init__",
      "is_expired",
      "access",
      "__init__",
      "get",
      "set",
      "_evict_lru",
      "preload",
      "clear",
      "get_stats",
      "__init__",
      "get_with_prediction",
      "set_with_analysis",
      "__init__",
      "record_access",
      "predict_next_accesses",
      "__init__",
      "schedule_preload",
      "start_scheduler",
      "_scheduler_loop"
    ],
    "classes": {
      "CacheEntry": {
        "methods": [
          "__init__",
          "is_expired",
          "access"
        ],
        "docstring": "Cache entry with metadata.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IntelligentCache": {
        "methods": [
          "__init__",
          "get",
          "set",
          "_evict_lru",
          "preload",
          "clear",
          "get_stats"
        ],
        "docstring": "Intelligent caching system with predictive preloading.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "PredictiveCacheManager": {
        "methods": [
          "__init__",
          "get_with_prediction",
          "set_with_analysis"
        ],
        "docstring": "Predictive cache manager with intelligent preloading.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "AccessPatternAnalyzer": {
        "methods": [
          "__init__",
          "record_access",
          "predict_next_accesses"
        ],
        "docstring": "Analyzes access patterns for predictive caching.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "PreloadScheduler": {
        "methods": [
          "__init__",
          "schedule_preload",
          "start_scheduler",
          "_scheduler_loop"
        ],
        "docstring": "Schedules predictive preloading.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 42
  },
  "src\\services\\analytics\\analytics_performance_optimizer.py": {
    "language": ".py",
    "functions": [
      "get_analytics_performance_optimizer",
      "__init__",
      "record_metric",
      "get_metric_stats",
      "__init__",
      "get",
      "set",
      "_evict_least_used",
      "optimize_cache",
      "_calculate_hit_rate",
      "__init__",
      "optimize_query",
      "_calculate_optimization_score",
      "__init__",
      "check_resource_availability",
      "allocate_resources",
      "release_resources",
      "__init__",
      "optimize_analytics_operation",
      "get_performance_report",
      "_generate_performance_recommendations"
    ],
    "classes": {
      "PerformanceMetrics": {
        "methods": [
          "__init__",
          "record_metric",
          "get_metric_stats"
        ],
        "docstring": "Performance metrics tracking.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "CacheOptimizer": {
        "methods": [
          "__init__",
          "get",
          "set",
          "_evict_least_used",
          "optimize_cache",
          "_calculate_hit_rate"
        ],
        "docstring": "Cache optimization engine.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "QueryOptimizer": {
        "methods": [
          "__init__",
          "optimize_query",
          "_calculate_optimization_score"
        ],
        "docstring": "Query optimization engine.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ResourceManager": {
        "methods": [
          "__init__",
          "check_resource_availability",
          "allocate_resources",
          "release_resources"
        ],
        "docstring": "Resource management for analytics operations.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "AnalyticsPerformanceOptimizer": {
        "methods": [
          "__init__",
          "optimize_analytics_operation",
          "get_performance_report",
          "_generate_performance_recommendations"
        ],
        "docstring": "Main analytics performance optimizer.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 41
  },
  "src\\services\\analytics\\advanced_data_analysis_engine.py": {
    "language": ".py",
    "functions": [
      "get_advanced_data_analysis_engine",
      "__init__",
      "analyze_distribution",
      "_calculate_percentile",
      "_calculate_skewness",
      "_calculate_kurtosis",
      "_detect_outliers",
      "__init__",
      "identify_trends",
      "_linear_regression",
      "_detect_seasonality",
      "__init__",
      "generate_insights",
      "_generate_statistical_insights",
      "_generate_distribution_alerts",
      "_generate_trend_recommendations",
      "_generate_trend_predictions",
      "_generate_seasonality_recommendations",
      "__init__",
      "analyze_data",
      "get_engine_stats"
    ],
    "classes": {
      "StatisticalAnalyzer": {
        "methods": [
          "__init__",
          "analyze_distribution",
          "_calculate_percentile",
          "_calculate_skewness",
          "_calculate_kurtosis",
          "_detect_outliers"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "PatternRecognizer": {
        "methods": [
          "__init__",
          "identify_trends",
          "_linear_regression",
          "_detect_seasonality"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "InsightsGenerator": {
        "methods": [
          "__init__",
          "generate_insights",
          "_generate_statistical_insights",
          "_generate_distribution_alerts",
          "_generate_trend_recommendations",
          "_generate_trend_predictions",
          "_generate_seasonality_recommendations"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "AdvancedDataAnalysisEngine": {
        "methods": [
          "__init__",
          "analyze_data",
          "get_engine_stats"
        ],
        "docstring": "Main advanced data analysis engine.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 41
  },
  "src\\services\\analytics\\business_intelligence_orchestrator.py": {
    "language": ".py",
    "functions": [
      "get_business_intelligence_orchestrator",
      "__init__",
      "initialize",
      "shutdown",
      "generate_comprehensive_report",
      "_generate_advanced_report",
      "_generate_optimized_report",
      "_generate_ml_insights",
      "_generate_system_metrics",
      "_get_ml_predictions",
      "_get_anomaly_analysis",
      "_assess_model_performance",
      "_calculate_prediction_accuracy",
      "_assess_integration_health",
      "_analyze_anomaly_severity",
      "get_orchestration_status",
      "process_real_time_data"
    ],
    "classes": {
      "BusinessIntelligenceOrchestrator": {
        "methods": [
          "__init__",
          "initialize",
          "shutdown",
          "generate_comprehensive_report",
          "_generate_advanced_report",
          "_generate_optimized_report",
          "_generate_ml_insights",
          "_generate_system_metrics",
          "_get_ml_predictions",
          "_get_anomaly_analysis",
          "_assess_model_performance",
          "_calculate_prediction_accuracy",
          "_assess_integration_health",
          "_analyze_anomaly_severity",
          "get_orchestration_status",
          "process_real_time_data"
        ],
        "docstring": "Unified business intelligence orchestrator.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 33
  },
  "src\\services\\analytics\\machine_learning_engine.py": {
    "language": ".py",
    "functions": [
      "get_machine_learning_engine",
      "__init__",
      "fit",
      "predict",
      "get_accuracy",
      "__init__",
      "add_data_point",
      "_update_trend",
      "_update_seasonality",
      "predict_next",
      "get_accuracy",
      "__init__",
      "add_data_point",
      "_update_statistics",
      "detect_anomaly",
      "get_anomaly_threshold",
      "__init__",
      "train_linear_regression",
      "predict_with_model",
      "setup_time_series_prediction",
      "add_time_series_data",
      "predict_time_series",
      "setup_anomaly_detection",
      "detect_anomaly",
      "get_ml_stats"
    ],
    "classes": {
      "MLModel": {
        "methods": [],
        "docstring": "Machine learning model definition.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "PredictionResult": {
        "methods": [],
        "docstring": "Prediction result.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SimpleLinearRegression": {
        "methods": [
          "__init__",
          "fit",
          "predict",
          "get_accuracy"
        ],
        "docstring": "Simple linear regression implementation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "SignalAgent"
      },
      "TimeSeriesPredictor": {
        "methods": [
          "__init__",
          "add_data_point",
          "_update_trend",
          "_update_seasonality",
          "predict_next",
          "get_accuracy"
        ],
        "docstring": "Time series prediction using moving averages and trend analysis.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "AnomalyDetector": {
        "methods": [
          "__init__",
          "add_data_point",
          "_update_statistics",
          "detect_anomaly",
          "get_anomaly_threshold"
        ],
        "docstring": "Anomaly detection using statistical methods.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "MachineLearningEngine": {
        "methods": [
          "__init__",
          "train_linear_regression",
          "predict_with_model",
          "setup_time_series_prediction",
          "add_time_series_data",
          "predict_time_series",
          "setup_anomaly_detection",
          "detect_anomaly",
          "get_ml_stats"
        ],
        "docstring": "Main machine learning engine for business intelligence.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 49
  },
  "src\\services\\analytics\\bi_dashboard_service.py": {
    "language": ".py",
    "functions": [
      "get_bi_dashboard_service",
      "__init__",
      "initialize",
      "generate_dashboard",
      "_generate_system_overview",
      "_generate_performance_metrics",
      "_generate_analytics_insights",
      "_generate_real_time_monitoring",
      "_generate_alerts_notifications",
      "_generate_bi_summary",
      "_calculate_performance_score",
      "get_dashboard_stats",
      "shutdown"
    ],
    "classes": {
      "BIDashboardService": {
        "methods": [
          "__init__",
          "initialize",
          "generate_dashboard",
          "_generate_system_overview",
          "_generate_performance_metrics",
          "_generate_analytics_insights",
          "_generate_real_time_monitoring",
          "_generate_alerts_notifications",
          "_generate_bi_summary",
          "_calculate_performance_score",
          "get_dashboard_stats",
          "shutdown"
        ],
        "docstring": "Business Intelligence Dashboard Service.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 25
  },
  "src\\services\\analytics\\optimized_analytics_service.py": {
    "language": ".py",
    "functions": [
      "get_optimized_analytics_service",
      "__init__",
      "start",
      "stop",
      "generate_optimized_report",
      "_generate_report_with_parallel_processing",
      "get_optimized_dashboard_data",
      "collect_optimized_metric",
      "get_optimization_stats",
      "get_service_status",
      "collect_metrics",
      "analyze_usage",
      "generate_dashboard_data",
      "process_metric"
    ],
    "classes": {
      "OptimizedAnalyticsService": {
        "methods": [
          "__init__",
          "start",
          "stop",
          "generate_optimized_report",
          "_generate_report_with_parallel_processing",
          "get_optimized_dashboard_data",
          "collect_optimized_metric",
          "get_optimization_stats",
          "get_service_status"
        ],
        "docstring": "Optimized analytics service with intelligent caching and parallel processing.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 23
  },
  "src\\services\\analytics\\parallel_processing_engine.py": {
    "language": ".py",
    "functions": [
      "get_parallel_processing_engine",
      "get_data_processing_pipeline",
      "__post_init__",
      "__init__",
      "start",
      "stop",
      "submit_task",
      "process_tasks",
      "_execute_task",
      "get_stats",
      "__init__",
      "add_stage",
      "process_data",
      "get_pipeline_stats",
      "__init__",
      "get_engine",
      "get_least_loaded_engine",
      "get_balance_stats",
      "stage1",
      "stage2"
    ],
    "classes": {
      "ProcessingTask": {
        "methods": [
          "__post_init__"
        ],
        "docstring": "Processing task definition.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ProcessingResult": {
        "methods": [],
        "docstring": "Processing result.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ParallelProcessingEngine": {
        "methods": [
          "__init__",
          "start",
          "stop",
          "submit_task",
          "process_tasks",
          "_execute_task",
          "get_stats"
        ],
        "docstring": "Parallel processing engine with load balancing.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "DataProcessingPipeline": {
        "methods": [
          "__init__",
          "add_stage",
          "process_data",
          "get_pipeline_stats"
        ],
        "docstring": "Data processing pipeline with parallel stages.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "LoadBalancer": {
        "methods": [
          "__init__",
          "get_engine",
          "get_least_loaded_engine",
          "get_balance_stats"
        ],
        "docstring": "Load balancer for parallel processing.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 36
  },
  "src\\services\\communication\\consolidated_communication.py": {
    "language": ".py",
    "functions": [
      "get_consolidated_communication_system",
      "to_dict",
      "from_dict",
      "can_handle",
      "__init__",
      "get_protocol",
      "__init__",
      "get_protocol",
      "__init__",
      "get_protocol",
      "__init__",
      "_initialize_default_channels",
      "register_channel",
      "register_handler",
      "unregister_channel",
      "_update_message_stats",
      "get_communication_status",
      "shutdown"
    ],
    "classes": {
      "MessageType": {
        "methods": [],
        "docstring": null,
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "MessagePriority": {
        "methods": [],
        "docstring": null,
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "CommunicationProtocol": {
        "methods": [],
        "docstring": null,
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "Message": {
        "methods": [
          "to_dict",
          "from_dict"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "MessageResult": {
        "methods": [],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "IMessageHandler": {
        "methods": [
          "can_handle"
        ],
        "docstring": null,
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ICommunicationChannel": {
        "methods": [
          "__init__",
          "get_protocol"
        ],
        "docstring": null,
        "base_classes": [
          "ABC"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "InternalCommunicationChannel": {
        "methods": [
          "__init__",
          "get_protocol"
        ],
        "docstring": null,
        "base_classes": [
          "ICommunicationChannel"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "FileBasedCommunicationChannel": {
        "methods": [
          "__init__",
          "get_protocol"
        ],
        "docstring": null,
        "base_classes": [
          "ICommunicationChannel"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "MessageStatistics": {
        "methods": [],
        "docstring": "Statistics for message operations.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ConsolidatedCommunicationSystem": {
        "methods": [
          "__init__",
          "_initialize_default_channels",
          "register_channel",
          "register_handler",
          "unregister_channel",
          "_update_message_stats",
          "get_communication_status",
          "shutdown"
        ],
        "docstring": "Main consolidated communication system.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 35
  },
  "src\\services\\contracts\\contract_management_service.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "create_contract",
      "start_contract",
      "update_contract_progress",
      "complete_contract",
      "cancel_contract",
      "get_contract_status",
      "get_active_contracts",
      "get_contract_history",
      "get_contract_metrics",
      "validate_contract_dependencies",
      "can_start_contract",
      "get_contracts_by_type",
      "get_contracts_by_status",
      "_finalize_contract",
      "_update_contract_metrics"
    ],
    "classes": {
      "ContractManagementService": {
        "methods": [
          "__init__",
          "create_contract",
          "start_contract",
          "update_contract_progress",
          "complete_contract",
          "cancel_contract",
          "get_contract_status",
          "get_active_contracts",
          "get_contract_history",
          "get_contract_metrics",
          "validate_contract_dependencies",
          "can_start_contract",
          "get_contracts_by_type",
          "get_contracts_by_status",
          "_finalize_contract",
          "_update_contract_metrics"
        ],
        "docstring": "Service for contract creation, tracking, and management.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 32
  },
  "src\\core\\core_interface_repository.py": {
    "language": ".py",
    "functions": [
      "get_interface",
      "save_interface",
      "delete_interface",
      "list_interfaces",
      "__init__",
      "get_interface",
      "save_interface",
      "delete_interface",
      "list_interfaces",
      "get_metadata",
      "__init__",
      "get_interface",
      "save_interface",
      "delete_interface",
      "list_interfaces"
    ],
    "classes": {
      "IInterfaceRepository": {
        "methods": [
          "get_interface",
          "save_interface",
          "delete_interface",
          "list_interfaces"
        ],
        "docstring": "Repository interface for core system interfaces.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "InMemoryInterfaceRepository": {
        "methods": [
          "__init__",
          "get_interface",
          "save_interface",
          "delete_interface",
          "list_interfaces",
          "get_metadata"
        ],
        "docstring": "In-memory implementation of interface repository.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "FileBasedInterfaceRepository": {
        "methods": [
          "__init__",
          "get_interface",
          "save_interface",
          "delete_interface",
          "list_interfaces"
        ],
        "docstring": "File-based implementation of interface repository.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 30
  },
  "src\\core\\agent5_phase1_bi_support_advanced.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "implement_quality_assurance_monitoring",
      "_analyze_quality_metrics",
      "_generate_quality_report",
      "_generate_quality_recommendations",
      "generate_business_intelligence_report",
      "_generate_bi_recommendations",
      "_save_bi_report",
      "coordinate_with_agents",
      "_coordinate_chunk_001",
      "_coordinate_chunk_002",
      "get_phase1_bi_status",
      "get_quality_metrics_summary",
      "get_coordination_summary",
      "get_report_history",
      "generate_comprehensive_summary"
    ],
    "classes": {
      "Agent5Phase1BISupportAdvanced": {
        "methods": [
          "__init__",
          "implement_quality_assurance_monitoring",
          "_analyze_quality_metrics",
          "_generate_quality_report",
          "_generate_quality_recommendations",
          "generate_business_intelligence_report",
          "_generate_bi_recommendations",
          "_save_bi_report",
          "coordinate_with_agents",
          "_coordinate_chunk_001",
          "_coordinate_chunk_002",
          "get_phase1_bi_status",
          "get_quality_metrics_summary",
          "get_coordination_summary",
          "get_report_history",
          "generate_comprehensive_summary"
        ],
        "docstring": "Advanced business intelligence support extending core functionality.",
        "base_classes": [
          "Agent5Phase1BISupportCore"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 32
  },
  "src\\core\\agent5_phase1_bi_support_core.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "_create_mock_bi_system",
      "_create_mock_performance_monitor",
      "_create_mock_data_optimizer",
      "_create_mock_bi_coordinator",
      "deploy_performance_metrics_analysis",
      "_generate_overall_performance_metrics",
      "_record_performance_metrics",
      "track_consolidation_progress",
      "_track_chunk_progress",
      "get_bi_systems_status",
      "get_focus_areas_status",
      "get_chunk_coordination_status",
      "update_chunk_progress",
      "get_performance_summary",
      "get_consolidation_summary",
      "record_agent_metric",
      "update_consolidation_progress",
      "get_agent_performance_summary",
      "get_active_alerts",
      "optimize_data",
      "coordinate_bi_activities"
    ],
    "classes": {
      "Agent5Phase1BISupportCore": {
        "methods": [
          "__init__",
          "_create_mock_bi_system",
          "_create_mock_performance_monitor",
          "_create_mock_data_optimizer",
          "_create_mock_bi_coordinator",
          "deploy_performance_metrics_analysis",
          "_generate_overall_performance_metrics",
          "_record_performance_metrics",
          "track_consolidation_progress",
          "_track_chunk_progress",
          "get_bi_systems_status",
          "get_focus_areas_status",
          "get_chunk_coordination_status",
          "update_chunk_progress",
          "get_performance_summary",
          "get_consolidation_summary"
        ],
        "docstring": "Core business intelligence support for Phase 1 consolidation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "MockBISystem": {
        "methods": [
          "record_agent_metric",
          "update_consolidation_progress"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "MockPerformanceMonitor": {
        "methods": [
          "get_agent_performance_summary",
          "get_active_alerts"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "MockDataOptimizer": {
        "methods": [
          "optimize_data"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "MockBICoordinator": {
        "methods": [
          "coordinate_bi_activities"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 44
  },
  "src\\core\\consolidated_workflow_engine.py": {
    "language": ".py",
    "functions": [
      "get_consolidated_workflow_engine",
      "__init__",
      "to_dict",
      "__init__",
      "to_dict",
      "__init__",
      "_create_error_result",
      "_update_metrics",
      "_calculate_efficiency",
      "optimize_data",
      "_compress_data",
      "_cache_data",
      "_calculate_optimization_metrics",
      "consolidate_utilities",
      "_merge_utilities",
      "_find_duplicates",
      "_optimize_utilities",
      "get_task_summary",
      "get_next_task",
      "get_performance_summary",
      "get_optimization_summary",
      "get_consolidation_summary",
      "clear_history",
      "get_status"
    ],
    "classes": {
      "WorkflowTask": {
        "methods": [
          "__init__",
          "to_dict"
        ],
        "docstring": "Represents a workflow task.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "WorkflowMetrics": {
        "methods": [
          "__init__",
          "to_dict"
        ],
        "docstring": "Workflow performance metrics.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ConsolidatedWorkflowEngine": {
        "methods": [
          "__init__",
          "_create_error_result",
          "_update_metrics",
          "_calculate_efficiency",
          "optimize_data",
          "_compress_data",
          "_cache_data",
          "_calculate_optimization_metrics",
          "consolidate_utilities",
          "_merge_utilities",
          "_find_duplicates",
          "_optimize_utilities",
          "get_task_summary",
          "get_next_task",
          "get_performance_summary",
          "get_optimization_summary",
          "get_consolidation_summary",
          "clear_history",
          "get_status"
        ],
        "docstring": "Consolidated workflow engine for unified operations.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 47
  },
  "src\\core\\core_interface_service.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "create_interface",
      "get_interface",
      "update_interface",
      "delete_interface",
      "list_interfaces",
      "get_available_interface_types",
      "create_interface_with_builder",
      "validate_interface",
      "get_interface_statistics"
    ],
    "classes": {
      "CoreInterfaceService": {
        "methods": [
          "__init__",
          "create_interface",
          "get_interface",
          "update_interface",
          "delete_interface",
          "list_interfaces",
          "get_available_interface_types",
          "create_interface_with_builder",
          "validate_interface",
          "get_interface_statistics"
        ],
        "docstring": "Service layer for core system interfaces.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 20
  },
  "src\\core\\configuration_coordination_interfaces.py": {
    "language": ".py",
    "functions": [
      "get_config",
      "set_config",
      "has_config",
      "get_all_config",
      "reload_config",
      "validate_config",
      "get_validation_errors",
      "is_valid",
      "coordinate",
      "get_status",
      "is_active",
      "register_coordinator",
      "unregister_coordinator",
      "get_coordinator",
      "list_coordinators",
      "create_coordinator",
      "get_supported_types",
      "register_coordinator_type",
      "create_system",
      "get_supported_types",
      "register_system_type",
      "register_system",
      "unregister_system",
      "get_system",
      "list_systems"
    ],
    "classes": {
      "IConfigurationProvider": {
        "methods": [
          "get_config",
          "set_config",
          "has_config",
          "get_all_config",
          "reload_config"
        ],
        "docstring": "Interface for configuration providers.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IConfigurationValidator": {
        "methods": [
          "validate_config",
          "get_validation_errors",
          "is_valid"
        ],
        "docstring": "Interface for configuration validation.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ICoordinator": {
        "methods": [
          "coordinate",
          "get_status",
          "is_active"
        ],
        "docstring": "Abstract base class for coordination components.",
        "base_classes": [
          "ABC"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ICoordinatorRegistry": {
        "methods": [
          "register_coordinator",
          "unregister_coordinator",
          "get_coordinator",
          "list_coordinators"
        ],
        "docstring": "Interface for coordinator registry.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ICoordinatorFactory": {
        "methods": [
          "create_coordinator",
          "get_supported_types",
          "register_coordinator_type"
        ],
        "docstring": "Interface for coordinator factory.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ICoreSystemFactory": {
        "methods": [
          "create_system",
          "get_supported_types",
          "register_system_type"
        ],
        "docstring": "Interface for core system factory.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ICoreSystemRegistry": {
        "methods": [
          "register_system",
          "unregister_system",
          "get_system",
          "list_systems"
        ],
        "docstring": "Interface for core system registry.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 50
  },
  "src\\core\\core_interface_factory.py": {
    "language": ".py",
    "functions": [
      "register_interface",
      "register_interface",
      "create_interface",
      "get_available_interfaces",
      "is_interface_registered",
      "__init__",
      "with_config",
      "with_parameter",
      "build",
      "decorator"
    ],
    "classes": {
      "CoreInterfaceFactory": {
        "methods": [
          "register_interface",
          "create_interface",
          "get_available_interfaces",
          "is_interface_registered"
        ],
        "docstring": "Factory for creating core system interfaces.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "InterfaceBuilder": {
        "methods": [
          "__init__",
          "with_config",
          "with_parameter",
          "build"
        ],
        "docstring": "Builder pattern for complex interface construction.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 18
  },
  "src\\core\\communication_interfaces.py": {
    "language": ".py",
    "functions": [
      "handle_message",
      "can_handle",
      "get_supported_types",
      "send",
      "receive",
      "is_connected",
      "connect",
      "disconnect",
      "register_channel",
      "unregister_channel",
      "send_message",
      "broadcast_message",
      "get_available_channels"
    ],
    "classes": {
      "IMessageHandler": {
        "methods": [
          "handle_message",
          "can_handle",
          "get_supported_types"
        ],
        "docstring": "Interface for message handling components.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ICommunicationChannel": {
        "methods": [
          "send",
          "receive",
          "is_connected",
          "connect",
          "disconnect"
        ],
        "docstring": "Abstract base class for communication channels.",
        "base_classes": [
          "ABC"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ICommunicationSystem": {
        "methods": [
          "register_channel",
          "unregister_channel",
          "send_message",
          "broadcast_message",
          "get_available_channels"
        ],
        "docstring": "Interface for communication systems.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 26
  },
  "src\\core\\unified_progress_tracking_core.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "_create_agent_milestones",
      "_create_system_milestones",
      "update_agent_progress",
      "update_system_progress",
      "_update_agent_milestones",
      "_update_system_milestones",
      "update_superiority_benchmark"
    ],
    "classes": {
      "ProgressPhase": {
        "methods": [],
        "docstring": "Architecture consolidation phases.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SuperiorityBenchmark": {
        "methods": [],
        "docstring": "Superiority benchmark categories.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ProgressMilestone": {
        "methods": [],
        "docstring": "Individual progress milestone.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "AgentProgress": {
        "methods": [],
        "docstring": "Progress tracking for individual agents.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SystemProgress": {
        "methods": [],
        "docstring": "Progress tracking for system components.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SuperiorityMetrics": {
        "methods": [],
        "docstring": "Superiority benchmark metrics.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "UnifiedProgressDashboard": {
        "methods": [],
        "docstring": "Complete unified progress tracking dashboard.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ProgressTrackerCore": {
        "methods": [
          "__init__",
          "_create_agent_milestones",
          "_create_system_milestones",
          "update_agent_progress",
          "update_system_progress",
          "_update_agent_milestones",
          "_update_system_milestones",
          "update_superiority_benchmark"
        ],
        "docstring": "Core progress tracking functionality.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 16
  },
  "src\\core\\minimal_coordination.py": {
    "language": ".py",
    "functions": [
      "get_coordination",
      "__init__",
      "get_current_task",
      "set_current_task",
      "complete_task",
      "check_inbox",
      "process_message",
      "_handle_completion",
      "_handle_blocker",
      "_handle_critical",
      "run_cycle",
      "get_efficiency_metrics"
    ],
    "classes": {
      "MinimalCoordination": {
        "methods": [
          "__init__",
          "get_current_task",
          "set_current_task",
          "complete_task",
          "check_inbox",
          "process_message",
          "_handle_completion",
          "_handle_blocker",
          "_handle_critical",
          "run_cycle",
          "get_efficiency_metrics"
        ],
        "docstring": "Single coordination system for maximum efficiency.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 23
  },
  "src\\core\\consolidated_automation_system.py": {
    "language": ".py",
    "functions": [
      "get_consolidated_automation_system",
      "__init__",
      "mark_processed",
      "to_dict",
      "__init__",
      "is_claimable",
      "can_be_claimed_by",
      "to_dict",
      "__init__",
      "scan_inbox",
      "process_message",
      "_extract_message_info",
      "_process_a2a_message",
      "_process_directive_message",
      "_process_coordination_message",
      "_process_generic_message",
      "_summarize_content",
      "_move_to_processed",
      "_load_working_tasks",
      "_save_working_tasks",
      "_load_future_tasks",
      "_save_future_tasks",
      "get_current_task",
      "has_current_task",
      "get_available_tasks",
      "_validate_task_dependencies",
      "_select_best_task",
      "claim_task",
      "_execute_task_claim",
      "process_all_messages",
      "get_metrics",
      "generate_report",
      "task_score"
    ],
    "classes": {
      "AutomationMessage": {
        "methods": [
          "__init__",
          "mark_processed",
          "to_dict"
        ],
        "docstring": "Represents an automation message.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "AutomationTask": {
        "methods": [
          "__init__",
          "is_claimable",
          "can_be_claimed_by",
          "to_dict"
        ],
        "docstring": "Represents an automation task.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ConsolidatedAutomationSystem": {
        "methods": [
          "__init__",
          "scan_inbox",
          "process_message",
          "_extract_message_info",
          "_process_a2a_message",
          "_process_directive_message",
          "_process_coordination_message",
          "_process_generic_message",
          "_summarize_content",
          "_move_to_processed",
          "_load_working_tasks",
          "_save_working_tasks",
          "_load_future_tasks",
          "_save_future_tasks",
          "get_current_task",
          "has_current_task",
          "get_available_tasks",
          "_validate_task_dependencies",
          "_select_best_task",
          "claim_task",
          "_execute_task_claim",
          "process_all_messages",
          "get_metrics",
          "generate_report"
        ],
        "docstring": "Consolidated automation system for mailbox processing and task claiming.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 64
  },
  "src\\core\\core_system_interfaces.py": {
    "language": ".py",
    "functions": [
      "system_name",
      "version",
      "initialize",
      "shutdown",
      "get_status",
      "configure",
      "get_config",
      "validate_config",
      "add_observer",
      "remove_observer",
      "notify_observers",
      "update",
      "metadata",
      "get_capabilities",
      "is_operational"
    ],
    "classes": {
      "ICoreSystem": {
        "methods": [
          "system_name",
          "version",
          "initialize",
          "shutdown",
          "get_status"
        ],
        "docstring": "Core system interface for all major system components.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IConfigurable": {
        "methods": [
          "configure",
          "get_config",
          "validate_config"
        ],
        "docstring": "Interface for configurable components.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IObservable": {
        "methods": [
          "add_observer",
          "remove_observer",
          "notify_observers"
        ],
        "docstring": "Interface for observable components.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IObserver": {
        "methods": [
          "update"
        ],
        "docstring": "Interface for observer components.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "CoreSystemMetadata": {
        "methods": [],
        "docstring": "Metadata for core system components.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IUnifiedCoreSystem": {
        "methods": [
          "metadata",
          "get_capabilities",
          "is_operational"
        ],
        "docstring": "Unified interface combining all core system capabilities.",
        "base_classes": [
          "ICoreSystem",
          "IConfigurable",
          "IObservable",
          "ILifecycleAware",
          "IHealthCheck",
          "IMonitor"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 30
  },
  "src\\core\\lifecycle_monitoring_interfaces.py": {
    "language": ".py",
    "functions": [
      "start",
      "stop",
      "pause",
      "resume",
      "restart",
      "is_running",
      "initialize",
      "is_initialized",
      "dispose",
      "is_disposed",
      "start_monitoring",
      "stop_monitoring",
      "get_metrics",
      "is_monitoring",
      "health_check",
      "is_healthy",
      "get_health_status"
    ],
    "classes": {
      "ILifecycleAware": {
        "methods": [
          "start",
          "stop",
          "pause",
          "resume",
          "restart",
          "is_running"
        ],
        "docstring": "Interface for components with lifecycle management.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IInitializable": {
        "methods": [
          "initialize",
          "is_initialized"
        ],
        "docstring": "Interface for components that can be initialized.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IDisposable": {
        "methods": [
          "dispose",
          "is_disposed"
        ],
        "docstring": "Interface for components that can be disposed.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IMonitor": {
        "methods": [
          "start_monitoring",
          "stop_monitoring",
          "get_metrics",
          "is_monitoring"
        ],
        "docstring": "Interface for monitoring components.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IHealthCheck": {
        "methods": [
          "health_check",
          "is_healthy",
          "get_health_status"
        ],
        "docstring": "Interface for health check capabilities.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 34
  },
  "src\\core\\data_processing_interfaces.py": {
    "language": ".py",
    "functions": [
      "process",
      "can_process",
      "get_supported_types",
      "get_processing_stats",
      "validate",
      "get_validation_errors",
      "clear_errors",
      "is_valid",
      "execute_async",
      "cancel_task",
      "get_task_status",
      "is_task_complete",
      "submit_task",
      "get_task_result",
      "get_active_tasks",
      "get_completed_tasks",
      "cleanup_completed_tasks"
    ],
    "classes": {
      "IDataProcessor": {
        "methods": [
          "process",
          "can_process",
          "get_supported_types",
          "get_processing_stats"
        ],
        "docstring": "Interface for data processing components.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IDataValidator": {
        "methods": [
          "validate",
          "get_validation_errors",
          "clear_errors",
          "is_valid"
        ],
        "docstring": "Interface for data validation components.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IAsyncTask": {
        "methods": [
          "execute_async",
          "cancel_task",
          "get_task_status",
          "is_task_complete"
        ],
        "docstring": "Interface for asynchronous task components.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IAsyncTaskManager": {
        "methods": [
          "submit_task",
          "get_task_result",
          "get_active_tasks",
          "get_completed_tasks",
          "cleanup_completed_tasks"
        ],
        "docstring": "Interface for asynchronous task management.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 34
  },
  "src\\core\\error_handling_basic_examples.py": {
    "language": ".py",
    "functions": [
      "example_basic_error_handling",
      "create_error_orchestrator",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "__init__"
    ],
    "classes": {
      "SystemErrorHandler": {
        "methods": [
          "__init__"
        ],
        "docstring": "System error handler",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "NetworkErrorHandler": {
        "methods": [
          "__init__"
        ],
        "docstring": "Network error handler",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ValidationErrorHandler": {
        "methods": [
          "__init__"
        ],
        "docstring": "Validation error handler",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ErrorType": {
        "methods": [],
        "docstring": "Error type enumeration",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ErrorSeverity": {
        "methods": [],
        "docstring": "Error severity enumeration",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ErrorStatus": {
        "methods": [],
        "docstring": "Error status enumeration",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ErrorInfo": {
        "methods": [
          "__init__"
        ],
        "docstring": "Error information container",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ErrorContext": {
        "methods": [
          "__init__"
        ],
        "docstring": "Error context container",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 12
  },
  "src\\core\\progress_phases_enums.py": {
    "language": ".py",
    "functions": [],
    "classes": {
      "ProgressPhase": {
        "methods": [],
        "docstring": "Architecture consolidation phases.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SuperiorityBenchmark": {
        "methods": [],
        "docstring": "Superiority benchmark categories.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 0
  },
  "src\\core\\progress_models.py": {
    "language": ".py",
    "functions": [],
    "classes": {
      "ProgressMilestone": {
        "methods": [],
        "docstring": "Progress milestone definition.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "AgentProgress": {
        "methods": [],
        "docstring": "Agent progress tracking.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SystemProgress": {
        "methods": [],
        "docstring": "System-wide progress tracking.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SuperiorityMetrics": {
        "methods": [],
        "docstring": "Superiority benchmark metrics.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 0
  },
  "src\\core\\progress_dashboard.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "initialize_dashboard",
      "add_agent_progress",
      "update_milestone",
      "get_dashboard_data",
      "_update_overall_progress",
      "_notify_observers",
      "add_observer",
      "remove_observer"
    ],
    "classes": {
      "UnifiedProgressDashboard": {
        "methods": [
          "__init__",
          "initialize_dashboard",
          "add_agent_progress",
          "update_milestone",
          "get_dashboard_data",
          "_update_overall_progress",
          "_notify_observers",
          "add_observer",
          "remove_observer"
        ],
        "docstring": "Unified progress tracking dashboard.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 18
  },
  "src\\core\\radical_simplification.py": {
    "language": ".py",
    "functions": [
      "get_simplified_agent",
      "__init__",
      "phase_1_check",
      "phase_2_execute",
      "phase_3_report",
      "_process_messages",
      "_execute_task",
      "_handle_task_assignment",
      "_handle_blocker",
      "_handle_critical",
      "_send_to_captain",
      "run_cycle",
      "complete_task",
      "block_task",
      "get_efficiency_metrics"
    ],
    "classes": {
      "RadicalSimplification": {
        "methods": [
          "__init__",
          "phase_1_check",
          "phase_2_execute",
          "phase_3_report",
          "_process_messages",
          "_execute_task",
          "_handle_task_assignment",
          "_handle_blocker",
          "_handle_critical",
          "_send_to_captain",
          "run_cycle",
          "complete_task",
          "block_task",
          "get_efficiency_metrics"
        ],
        "docstring": "Ultra-simplified 3-phase agent cycle.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 29
  },
  "src\\core\\progress_tracking_system.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "start_tracking",
      "stop_tracking",
      "add_agent_progress",
      "update_milestone",
      "get_system_status",
      "create_milestone",
      "calculate_metrics"
    ],
    "classes": {
      "UnifiedProgressTrackingSystem": {
        "methods": [
          "__init__",
          "start_tracking",
          "stop_tracking",
          "add_agent_progress",
          "update_milestone",
          "get_system_status",
          "create_milestone"
        ],
        "docstring": "Unified progress tracking system.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SuperiorityMetricsCalculator": {
        "methods": [
          "calculate_metrics"
        ],
        "docstring": "Calculator for superiority benchmark metrics.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 16
  },
  "src\\core\\test_standard_message_reminder.py": {
    "language": ".py",
    "functions": [
      "test_message_reminder_initialization",
      "test_task_completion_message",
      "test_status_update_message",
      "test_blocker_escalation_message",
      "test_coordination_message",
      "test_message_validation",
      "test_reminder_addition",
      "test_report_generation",
      "main"
    ],
    "classes": {},
    "routes": [],
    "complexity": 9
  },
  "src\\core\\self_validation_protocol.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "to_dict",
      "__init__",
      "validate",
      "__str__",
      "__init__",
      "validate",
      "__init__",
      "validate",
      "__init__",
      "validate",
      "__init__",
      "add_rule",
      "remove_rule",
      "get_rule",
      "list_rules",
      "validate_all",
      "validate_rule",
      "get_validation_history",
      "clear_history",
      "generate_report"
    ],
    "classes": {
      "ValidationResult": {
        "methods": [
          "__init__",
          "to_dict"
        ],
        "docstring": "Validation result container.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ValidationRule": {
        "methods": [
          "__init__",
          "validate",
          "__str__"
        ],
        "docstring": "Base validation rule class.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "FileExistenceRule": {
        "methods": [
          "__init__",
          "validate"
        ],
        "docstring": "Validation rule for file existence.",
        "base_classes": [
          "ValidationRule"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "FileSizeRule": {
        "methods": [
          "__init__",
          "validate"
        ],
        "docstring": "Validation rule for file size limits.",
        "base_classes": [
          "ValidationRule"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TaskCompletionRule": {
        "methods": [
          "__init__",
          "validate"
        ],
        "docstring": "Validation rule for task completion.",
        "base_classes": [
          "ValidationRule"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SelfValidationProtocol": {
        "methods": [
          "__init__",
          "add_rule",
          "remove_rule",
          "get_rule",
          "list_rules",
          "validate_all",
          "validate_rule",
          "get_validation_history",
          "clear_history",
          "generate_report"
        ],
        "docstring": "Self-validation protocol framework.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 42
  },
  "src\\core\\swarm_communication_enums.py": {
    "language": ".py",
    "functions": [],
    "classes": {
      "SwarmDecisionType": {
        "methods": [],
        "docstring": "Types of decisions that can be made by the swarm",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "QCStandard": {
        "methods": [],
        "docstring": "Quality control standards for the swarm",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SwarmAgentStatus": {
        "methods": [],
        "docstring": "Status of swarm agents",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "DecisionStatus": {
        "methods": [],
        "docstring": "Status of swarm decisions",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SwarmAgent": {
        "methods": [],
        "docstring": "Represents a swarm agent",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SwarmDecision": {
        "methods": [],
        "docstring": "Represents a swarm decision",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "QCStandardResult": {
        "methods": [],
        "docstring": "Result of a quality control standard check",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SwarmCommunicationMetrics": {
        "methods": [],
        "docstring": "Metrics for swarm communication",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 0
  },
  "src\\core\\test_system_integration.py": {
    "language": ".py",
    "functions": [
      "test_messaging_callback",
      "test_coordinate_callback",
      "test_swarm_callback",
      "test_autonomous_loop_system_integration",
      "main"
    ],
    "classes": {},
    "routes": [],
    "complexity": 5
  },
  "src\\core\\unified_onboarding_coordinates.py": {
    "language": ".py",
    "functions": [
      "get_unified_onboarding_coordinates",
      "get_onboarding_coordinates",
      "get_chat_coordinates",
      "get_input_coordinates",
      "__init__",
      "_load_coordinates",
      "get_onboarding_coordinates",
      "get_chat_coordinates",
      "get_input_coordinates",
      "set_coordinates",
      "_save_coordinates",
      "get_all_agents",
      "get_agent_coordinates",
      "validate_coordinates",
      "get_coordinate_summary",
      "backup_coordinates",
      "restore_coordinates"
    ],
    "classes": {
      "UnifiedOnboardingCoordinates": {
        "methods": [
          "__init__",
          "_load_coordinates",
          "get_onboarding_coordinates",
          "get_chat_coordinates",
          "get_input_coordinates",
          "set_coordinates",
          "_save_coordinates",
          "get_all_agents",
          "get_agent_coordinates",
          "validate_coordinates",
          "get_coordinate_summary",
          "backup_coordinates",
          "restore_coordinates"
        ],
        "docstring": "Unified onboarding coordinates management.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 30
  },
  "src\\core\\test_execution_engine.py": {
    "language": ".py",
    "functions": [
      "test_execution_engine_initialization",
      "test_current_task_validation",
      "test_v2_compliance_validation",
      "test_file_system_validation",
      "test_comprehensive_validation",
      "test_execution_report",
      "test_execution_status",
      "main"
    ],
    "classes": {},
    "routes": [],
    "complexity": 8
  },
  "src\\core\\streamlined_message_system.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "format_completion",
      "format_blocker",
      "format_critical",
      "validate_message",
      "get_efficiency_metrics",
      "generate_report"
    ],
    "classes": {
      "StreamlinedMessageSystem": {
        "methods": [
          "__init__",
          "format_completion",
          "format_blocker",
          "format_critical",
          "validate_message",
          "get_efficiency_metrics",
          "generate_report"
        ],
        "docstring": "Minimal message system for maximum efficiency.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 14
  },
  "src\\core\\agent5_phase2_agent1_coordination.py": {
    "language": ".py",
    "functions": [
      "main",
      "__init__",
      "get_coordination_metrics",
      "provide_bi_analytics_consolidation_support",
      "coordinate_service_integration_support",
      "provide_data_optimization_coordination",
      "setup_performance_monitoring_integration",
      "get_phase2_agent1_coordination_status",
      "_send_message_to_agent"
    ],
    "classes": {
      "Phase2Agent1CoordinationMetrics": {
        "methods": [],
        "docstring": "Metrics for Phase 2 Agent-1 coordination.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "Agent5Phase2Agent1Coordination": {
        "methods": [
          "__init__",
          "get_coordination_metrics",
          "provide_bi_analytics_consolidation_support",
          "coordinate_service_integration_support",
          "provide_data_optimization_coordination",
          "setup_performance_monitoring_integration",
          "get_phase2_agent1_coordination_status",
          "_send_message_to_agent"
        ],
        "docstring": "Agent-5's Phase 2 coordination with Agent-1 Integration Specialist.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 17
  },
  "src\\core\\unified_autonomous_loop.py": {
    "language": ".py",
    "functions": [
      "get_autonomous_loop",
      "__init__",
      "_initialize_status",
      "_save_status",
      "_load_status",
      "run_cycle",
      "_check_phase",
      "_execute_phase",
      "_report_phase",
      "_process_messages",
      "_execute_task",
      "_handle_task_assignment",
      "_handle_blocker",
      "_handle_critical",
      "complete_task",
      "block_task",
      "_report_completion",
      "_send_to_captain",
      "get_status",
      "get_efficiency_metrics",
      "run_continuous"
    ],
    "classes": {
      "UnifiedAutonomousLoop": {
        "methods": [
          "__init__",
          "_initialize_status",
          "_save_status",
          "_load_status",
          "run_cycle",
          "_check_phase",
          "_execute_phase",
          "_report_phase",
          "_process_messages",
          "_execute_task",
          "_handle_task_assignment",
          "_handle_blocker",
          "_handle_critical",
          "complete_task",
          "block_task",
          "_report_completion",
          "_send_to_captain",
          "get_status",
          "get_efficiency_metrics",
          "run_continuous"
        ],
        "docstring": "Unified autonomous loop system - single source of truth.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 41
  },
  "src\\core\\agent5_phase2_task3_data_integration.py": {
    "language": ".py",
    "functions": [
      "main",
      "__init__",
      "analyze_data_integration_files",
      "_analyze_data_integration_file",
      "_extract_data_access_patterns",
      "_extract_database_utilities",
      "_extract_integration_functions",
      "_extract_data_types",
      "identify_data_access_pattern_unification",
      "identify_database_utilities_consolidation",
      "identify_integration_functions_consolidation",
      "generate_data_integration_consolidation_plan",
      "get_task3_status"
    ],
    "classes": {
      "DataIntegrationFile": {
        "methods": [],
        "docstring": "Data integration file information.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "DataIntegrationCandidate": {
        "methods": [],
        "docstring": "Candidate for data integration consolidation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "Agent5Phase2Task3DataIntegration": {
        "methods": [
          "__init__",
          "analyze_data_integration_files",
          "_analyze_data_integration_file",
          "_extract_data_access_patterns",
          "_extract_database_utilities",
          "_extract_integration_functions",
          "_extract_data_types",
          "identify_data_access_pattern_unification",
          "identify_database_utilities_consolidation",
          "identify_integration_functions_consolidation",
          "generate_data_integration_consolidation_plan",
          "get_task3_status"
        ],
        "docstring": "Agent-5's Task 3: Data integration optimization.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 25
  },
  "src\\core\\agent5_phase1_bi_support.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "deploy_performance_metrics_analysis",
      "_generate_overall_performance_metrics",
      "_record_performance_metrics",
      "track_consolidation_progress",
      "_track_chunk_progress",
      "implement_quality_assurance_monitoring",
      "_analyze_quality_metrics",
      "_generate_quality_report",
      "_generate_quality_recommendations",
      "generate_business_intelligence_report",
      "_generate_bi_recommendations",
      "_save_bi_report",
      "coordinate_with_agents",
      "_coordinate_chunk_001",
      "_coordinate_chunk_002",
      "get_phase1_bi_status"
    ],
    "classes": {
      "Agent5Phase1BISupport": {
        "methods": [
          "__init__",
          "deploy_performance_metrics_analysis",
          "_generate_overall_performance_metrics",
          "_record_performance_metrics",
          "track_consolidation_progress",
          "_track_chunk_progress",
          "implement_quality_assurance_monitoring",
          "_analyze_quality_metrics",
          "_generate_quality_report",
          "_generate_quality_recommendations",
          "generate_business_intelligence_report",
          "_generate_bi_recommendations",
          "_save_bi_report",
          "coordinate_with_agents",
          "_coordinate_chunk_001",
          "_coordinate_chunk_002",
          "get_phase1_bi_status"
        ],
        "docstring": "Comprehensive business intelligence support for Phase 1 consolidation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 34
  },
  "src\\core\\agent5_phase2_bi_integration.py": {
    "language": ".py",
    "functions": [
      "main",
      "__init__",
      "get_phase2_metrics",
      "analyze_consolidation_opportunities",
      "deploy_analytics_consolidation",
      "implement_data_integration",
      "setup_performance_monitoring",
      "coordinate_with_agent2",
      "get_phase2_bi_support_status",
      "_send_message_to_agent"
    ],
    "classes": {
      "Phase2IntegrationMetrics": {
        "methods": [],
        "docstring": "Metrics for Phase 2 system integration.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "Agent5Phase2BIIntegration": {
        "methods": [
          "__init__",
          "get_phase2_metrics",
          "analyze_consolidation_opportunities",
          "deploy_analytics_consolidation",
          "implement_data_integration",
          "setup_performance_monitoring",
          "coordinate_with_agent2",
          "get_phase2_bi_support_status",
          "_send_message_to_agent"
        ],
        "docstring": "Agent-5's Phase 2 Business Intelligence Integration Support.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 19
  },
  "src\\core\\error_handling_examples.py": {
    "language": ".py",
    "functions": [
      "example_basic_error_handling",
      "example_circuit_breaker_pattern",
      "example_fallback_recovery",
      "example_error_metrics_monitoring",
      "example_custom_error_handler",
      "main",
      "__init__",
      "can_handle",
      "handle_error",
      "get_capabilities"
    ],
    "classes": {
      "DatabaseErrorHandler": {
        "methods": [
          "__init__",
          "can_handle",
          "handle_error",
          "get_capabilities"
        ],
        "docstring": "Custom error handler for database-specific errors.",
        "base_classes": [
          "ErrorHandler"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 14
  },
  "src\\core\\agent5_phase2_task1_analytics_consolidation.py": {
    "language": ".py",
    "functions": [
      "main",
      "__init__",
      "analyze_analytics_files",
      "_analyze_single_file",
      "_extract_functions",
      "_extract_classes",
      "_extract_imports",
      "_extract_dependencies",
      "identify_duplicate_modules",
      "identify_similar_data_processing_functions",
      "generate_consolidation_plan",
      "get_task1_status"
    ],
    "classes": {
      "AnalyticsFile": {
        "methods": [],
        "docstring": "Analytics file information.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ConsolidationCandidate": {
        "methods": [],
        "docstring": "Candidate for consolidation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "Agent5Phase2Task1AnalyticsConsolidation": {
        "methods": [
          "__init__",
          "analyze_analytics_files",
          "_analyze_single_file",
          "_extract_functions",
          "_extract_classes",
          "_extract_imports",
          "_extract_dependencies",
          "identify_duplicate_modules",
          "identify_similar_data_processing_functions",
          "generate_consolidation_plan",
          "get_task1_status"
        ],
        "docstring": "Agent-5's Task 1: Analytics file consolidation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 23
  },
  "src\\core\\agent5_phase2_task2_performance_monitoring.py": {
    "language": ".py",
    "functions": [
      "main",
      "__init__",
      "analyze_monitoring_files",
      "_analyze_monitoring_file",
      "_extract_monitoring_functions",
      "_extract_dashboard_components",
      "_extract_metrics_collected",
      "_determine_monitoring_type",
      "identify_monitoring_utilities_consolidation",
      "identify_dashboard_components_consolidation",
      "identify_metrics_collection_consolidation",
      "generate_monitoring_consolidation_plan",
      "get_task2_status"
    ],
    "classes": {
      "MonitoringFile": {
        "methods": [],
        "docstring": "Performance monitoring file information.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "MonitoringConsolidationCandidate": {
        "methods": [],
        "docstring": "Candidate for monitoring consolidation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "Agent5Phase2Task2PerformanceMonitoring": {
        "methods": [
          "__init__",
          "analyze_monitoring_files",
          "_analyze_monitoring_file",
          "_extract_monitoring_functions",
          "_extract_dashboard_components",
          "_extract_metrics_collected",
          "_determine_monitoring_type",
          "identify_monitoring_utilities_consolidation",
          "identify_dashboard_components_consolidation",
          "identify_metrics_collection_consolidation",
          "generate_monitoring_consolidation_plan",
          "get_task2_status"
        ],
        "docstring": "Agent-5's Task 2: Performance monitoring integration.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 25
  },
  "src\\core\\shared_utilities.py": {
    "language": ".py",
    "functions": [
      "create_cleanup_manager",
      "create_configuration_manager",
      "create_error_handler",
      "create_initialization_manager",
      "create_logging_manager",
      "create_result_manager",
      "create_status_manager",
      "create_validation_manager",
      "__init__",
      "initialize",
      "cleanup",
      "__init__",
      "initialize",
      "cleanup",
      "register_handler",
      "__init__",
      "initialize",
      "cleanup",
      "set_config",
      "get_config",
      "__init__",
      "initialize",
      "cleanup",
      "handle_error",
      "get_error_summary",
      "__init__",
      "initialize",
      "cleanup",
      "is_initialized",
      "get_init_time",
      "__init__",
      "initialize",
      "cleanup",
      "set_log_level",
      "log_info",
      "log_error",
      "__init__",
      "initialize",
      "cleanup",
      "add_result",
      "get_results",
      "get_last_result",
      "clear_results",
      "__init__",
      "initialize",
      "cleanup",
      "set_status",
      "get_status",
      "get_status_history",
      "__init__",
      "initialize",
      "cleanup",
      "add_validation_rule",
      "validate",
      "get_validation_results"
    ],
    "classes": {
      "BaseUtility": {
        "methods": [
          "__init__",
          "initialize",
          "cleanup"
        ],
        "docstring": "Base class for all shared utilities with common functionality.",
        "base_classes": [
          "ABC"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "CleanupManager": {
        "methods": [
          "__init__",
          "initialize",
          "cleanup",
          "register_handler"
        ],
        "docstring": "Manages cleanup operations with LIFO handler execution.",
        "base_classes": [
          "BaseUtility"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ConfigurationManager": {
        "methods": [
          "__init__",
          "initialize",
          "cleanup",
          "set_config",
          "get_config"
        ],
        "docstring": "Manages configuration with key-value storage and defaults.",
        "base_classes": [
          "BaseUtility"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ErrorHandler": {
        "methods": [
          "__init__",
          "initialize",
          "cleanup",
          "handle_error",
          "get_error_summary"
        ],
        "docstring": "Handles errors with tracking, logging, and summary statistics.",
        "base_classes": [
          "BaseUtility"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "InitializationManager": {
        "methods": [
          "__init__",
          "initialize",
          "cleanup",
          "is_initialized",
          "get_init_time"
        ],
        "docstring": "Manages initialization with state and timestamp tracking.",
        "base_classes": [
          "BaseUtility"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "LoggingManager": {
        "methods": [
          "__init__",
          "initialize",
          "cleanup",
          "set_log_level",
          "log_info",
          "log_error"
        ],
        "docstring": "Manages logging configuration and operations.",
        "base_classes": [
          "BaseUtility"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ResultManager": {
        "methods": [
          "__init__",
          "initialize",
          "cleanup",
          "add_result",
          "get_results",
          "get_last_result",
          "clear_results"
        ],
        "docstring": "Manages results with type safety and list management.",
        "base_classes": [
          "BaseUtility",
          null
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "StatusManager": {
        "methods": [
          "__init__",
          "initialize",
          "cleanup",
          "set_status",
          "get_status",
          "get_status_history"
        ],
        "docstring": "Manages status transitions with history tracking.",
        "base_classes": [
          "BaseUtility"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ValidationManager": {
        "methods": [
          "__init__",
          "initialize",
          "cleanup",
          "add_validation_rule",
          "validate",
          "get_validation_results"
        ],
        "docstring": "Manages validation operations with rule-based validation.",
        "base_classes": [
          "BaseUtility"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 102
  },
  "src\\core\\agent5_phase2_coordination_support.py": {
    "language": ".py",
    "functions": [
      "main",
      "__init__",
      "get_coordination_metrics",
      "provide_analytics_consolidation_support",
      "provide_data_integration_support",
      "provide_performance_monitoring_support",
      "coordinate_task_assignments",
      "get_phase2_coordination_status",
      "_send_message_to_agent"
    ],
    "classes": {
      "Phase2CoordinationMetrics": {
        "methods": [],
        "docstring": "Metrics for Phase 2 coordination support.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "Agent5Phase2CoordinationSupport": {
        "methods": [
          "__init__",
          "get_coordination_metrics",
          "provide_analytics_consolidation_support",
          "provide_data_integration_support",
          "provide_performance_monitoring_support",
          "coordinate_task_assignments",
          "get_phase2_coordination_status",
          "_send_message_to_agent"
        ],
        "docstring": "Agent-5's Phase 2 coordination support for Agent-2.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 17
  },
  "src\\core\\print_statement_cleanup.py": {
    "language": ".py",
    "functions": [
      "main",
      "__init__",
      "should_skip_file",
      "clean_file",
      "_remove_debug_prints",
      "_replace_prints_with_logging",
      "_ensure_logging_import",
      "run_cleanup"
    ],
    "classes": {
      "PrintStatementCleanup": {
        "methods": [
          "__init__",
          "should_skip_file",
          "clean_file",
          "_remove_debug_prints",
          "_replace_prints_with_logging",
          "_ensure_logging_import",
          "run_cleanup"
        ],
        "docstring": "Clean up remaining print statements and implement logging patterns.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 15
  },
  "src\\core\\consolidated_process_monitoring.py": {
    "language": ".py",
    "functions": [
      "get_consolidated_process_monitoring",
      "__post_init__",
      "__post_init__",
      "__init__",
      "register_health_check",
      "perform_health_check",
      "get_health_summary",
      "__init__",
      "record_error",
      "get_error_analysis",
      "get_reliability_score",
      "__init__",
      "register_recovery_strategy",
      "attempt_recovery",
      "get_recovery_stats",
      "__init__",
      "_register_default_health_checks",
      "_register_default_recovery_strategies",
      "start_monitoring",
      "stop_monitoring",
      "_monitoring_loop",
      "record_component_activity",
      "_check_performance_alerts",
      "_create_alert",
      "resolve_alert",
      "get_component_status",
      "get_active_alerts",
      "get_component_performance_summary",
      "_calculate_component_performance_score",
      "generate_system_health_report",
      "get_reliability_report",
      "_generate_reliability_recommendations",
      "save_monitoring_data",
      "get_system_status",
      "system_health_check",
      "database_health_check",
      "cache_health_check",
      "system_recovery",
      "database_recovery",
      "cache_recovery"
    ],
    "classes": {
      "MonitoringStatus": {
        "methods": [],
        "docstring": "Monitoring status enumeration.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "AlertLevel": {
        "methods": [],
        "docstring": "Alert level enumeration.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ComponentStatus": {
        "methods": [],
        "docstring": "Component status enumeration.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "PerformanceAlert": {
        "methods": [
          "__post_init__"
        ],
        "docstring": "Performance alert data structure.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ComponentSnapshot": {
        "methods": [
          "__post_init__"
        ],
        "docstring": "Component performance snapshot.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SystemHealthReport": {
        "methods": [],
        "docstring": "Comprehensive system health report.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "HealthChecker": {
        "methods": [
          "__init__",
          "register_health_check",
          "perform_health_check",
          "get_health_summary"
        ],
        "docstring": "Health checking system for components.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ErrorTracker": {
        "methods": [
          "__init__",
          "record_error",
          "get_error_analysis",
          "get_reliability_score"
        ],
        "docstring": "Error tracking and analysis system.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "RecoveryManager": {
        "methods": [
          "__init__",
          "register_recovery_strategy",
          "attempt_recovery",
          "get_recovery_stats"
        ],
        "docstring": "Recovery management system for components.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ConsolidatedProcessMonitoring": {
        "methods": [
          "__init__",
          "_register_default_health_checks",
          "_register_default_recovery_strategies",
          "start_monitoring",
          "stop_monitoring",
          "_monitoring_loop",
          "record_component_activity",
          "_check_performance_alerts",
          "_create_alert",
          "resolve_alert",
          "get_component_status",
          "get_active_alerts",
          "get_component_performance_summary",
          "_calculate_component_performance_score",
          "generate_system_health_report",
          "get_reliability_report",
          "_generate_reliability_recommendations",
          "save_monitoring_data",
          "get_system_status"
        ],
        "docstring": "Consolidated process monitoring system.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 73
  },
  "src\\core\\self_validation_execution_engine.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "_setup_default_rules",
      "_load_working_tasks",
      "_load_future_tasks",
      "validate_current_task",
      "validate_v2_compliance",
      "validate_file_system_integrity",
      "execute_comprehensive_validation",
      "generate_execution_report",
      "get_execution_status"
    ],
    "classes": {
      "SelfValidationExecutionEngine": {
        "methods": [
          "__init__",
          "_setup_default_rules",
          "_load_working_tasks",
          "_load_future_tasks",
          "validate_current_task",
          "validate_v2_compliance",
          "validate_file_system_integrity",
          "execute_comprehensive_validation",
          "generate_execution_report",
          "get_execution_status"
        ],
        "docstring": "Execution engine for self-validation protocol.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 20
  },
  "src\\core\\swarm_quality_manager.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "_initialize_qc_standards",
      "perform_qc_check",
      "_check_standard",
      "_check_v2_compliance",
      "_check_solid_principles",
      "_check_test_coverage",
      "_check_performance_metrics",
      "_check_security_audit",
      "_check_code_review",
      "get_qc_status",
      "get_qc_summary",
      "get_failed_standards",
      "get_metrics"
    ],
    "classes": {
      "SwarmQualityManager": {
        "methods": [
          "__init__",
          "_initialize_qc_standards",
          "perform_qc_check",
          "_check_standard",
          "_check_v2_compliance",
          "_check_solid_principles",
          "_check_test_coverage",
          "_check_performance_metrics",
          "_check_security_audit",
          "_check_code_review",
          "get_qc_status",
          "get_qc_summary",
          "get_failed_standards",
          "get_metrics"
        ],
        "docstring": "Manages quality control standards and monitoring for the swarm",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 28
  },
  "src\\core\\test_mailbox_automation.py": {
    "language": ".py",
    "functions": [
      "test_mailbox_processor_initialization",
      "test_mailbox_message",
      "test_message_processing",
      "test_message_info_extraction",
      "test_processing_metrics",
      "main"
    ],
    "classes": {},
    "routes": [],
    "complexity": 6
  },
  "src\\core\\swarm_communication_coordinator_core.py": {
    "language": ".py",
    "functions": [
      "get_swarm_communication_coordinator_core",
      "__init__",
      "start",
      "stop",
      "metadata",
      "get_capabilities",
      "get_dependencies",
      "get_coordination_status",
      "create_mission_assignment_decision",
      "vote_on_decision",
      "get_system_metrics",
      "get_status_report"
    ],
    "classes": {
      "SwarmCommunicationCoordinatorCore": {
        "methods": [
          "__init__",
          "start",
          "stop",
          "metadata",
          "get_capabilities",
          "get_dependencies",
          "get_coordination_status",
          "create_mission_assignment_decision",
          "vote_on_decision",
          "get_system_metrics",
          "get_status_report"
        ],
        "docstring": "Core swarm communication coordinator with modular components",
        "base_classes": [
          "IUnifiedCoreSystem"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 23
  },
  "src\\core\\swarm_business_intelligence.py": {
    "language": ".py",
    "functions": [
      "__post_init__",
      "__post_init__",
      "__post_init__",
      "__init__",
      "_load_agent_coordinates",
      "record_agent_metric",
      "update_consolidation_progress",
      "calculate_swarm_efficiency",
      "generate_health_report",
      "_generate_recommendations",
      "get_analytics_dashboard_data",
      "save_metrics",
      "load_metrics"
    ],
    "classes": {
      "SwarmMetricType": {
        "methods": [],
        "docstring": "Swarm-specific metric types for business intelligence.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ConsolidationPhase": {
        "methods": [],
        "docstring": "Consolidation phase tracking.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SwarmMetric": {
        "methods": [
          "__post_init__"
        ],
        "docstring": "Swarm business intelligence metric.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ConsolidationProgress": {
        "methods": [
          "__post_init__"
        ],
        "docstring": "Consolidation progress tracking.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SwarmHealthReport": {
        "methods": [
          "__post_init__"
        ],
        "docstring": "Comprehensive swarm health report.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SwarmBusinessIntelligence": {
        "methods": [
          "__init__",
          "_load_agent_coordinates",
          "record_agent_metric",
          "update_consolidation_progress",
          "calculate_swarm_efficiency",
          "generate_health_report",
          "_generate_recommendations",
          "get_analytics_dashboard_data",
          "save_metrics",
          "load_metrics"
        ],
        "docstring": "Swarm business intelligence and analytics system.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 26
  },
  "src\\core\\swarm_data_optimizer.py": {
    "language": ".py",
    "functions": [
      "__post_init__",
      "__post_init__",
      "__init__",
      "optimize_data",
      "_get_default_strategies",
      "_apply_strategy",
      "_apply_caching",
      "_apply_compression",
      "_apply_indexing",
      "_apply_deduplication",
      "_apply_batch_processing",
      "_apply_lazy_loading",
      "_manage_cache_size",
      "_update_optimization_stats",
      "get_cache_statistics",
      "get_optimization_report",
      "clear_cache",
      "save_optimization_data"
    ],
    "classes": {
      "OptimizationStrategy": {
        "methods": [],
        "docstring": "Data optimization strategies.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "DataType": {
        "methods": [],
        "docstring": "Data types for optimization.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "OptimizationResult": {
        "methods": [
          "__post_init__"
        ],
        "docstring": "Result of data optimization operation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "CacheEntry": {
        "methods": [
          "__post_init__"
        ],
        "docstring": "Cache entry for optimized data.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SwarmDataOptimizer": {
        "methods": [
          "__init__",
          "optimize_data",
          "_get_default_strategies",
          "_apply_strategy",
          "_apply_caching",
          "_apply_compression",
          "_apply_indexing",
          "_apply_deduplication",
          "_apply_batch_processing",
          "_apply_lazy_loading",
          "_manage_cache_size",
          "_update_optimization_stats",
          "get_cache_statistics",
          "get_optimization_report",
          "clear_cache",
          "save_optimization_data"
        ],
        "docstring": "Data optimization system for swarm efficiency.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 36
  },
  "src\\core\\swarm_decision_manager.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "create_decision",
      "vote_on_decision",
      "_check_decision_finalization",
      "_finalize_decision",
      "get_decision",
      "get_decisions_by_status",
      "get_pending_decisions",
      "get_voting_decisions",
      "get_decision_summary",
      "cleanup_old_decisions",
      "get_metrics"
    ],
    "classes": {
      "SwarmDecisionManager": {
        "methods": [
          "__init__",
          "create_decision",
          "vote_on_decision",
          "_check_decision_finalization",
          "_finalize_decision",
          "get_decision",
          "get_decisions_by_status",
          "get_pending_decisions",
          "get_voting_decisions",
          "get_decision_summary",
          "cleanup_old_decisions",
          "get_metrics"
        ],
        "docstring": "Manages swarm decisions and democratic voting process",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 24
  },
  "src\\core\\swarm_data_optimizer_core.py": {
    "language": ".py",
    "functions": [
      "__post_init__",
      "__post_init__",
      "__init__",
      "optimize_data",
      "_get_default_strategies",
      "_apply_strategy",
      "_apply_caching",
      "_apply_compression",
      "_apply_indexing",
      "_apply_deduplication",
      "_apply_batch_processing",
      "_apply_lazy_loading",
      "_manage_cache_size",
      "_update_optimization_stats",
      "get_cache_statistics",
      "clear_cache"
    ],
    "classes": {
      "OptimizationStrategy": {
        "methods": [],
        "docstring": "Data optimization strategies.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "DataType": {
        "methods": [],
        "docstring": "Data types for optimization.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "OptimizationResult": {
        "methods": [
          "__post_init__"
        ],
        "docstring": "Result of data optimization operation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "CacheEntry": {
        "methods": [
          "__post_init__"
        ],
        "docstring": "Cache entry for optimized data.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SwarmDataOptimizerCore": {
        "methods": [
          "__init__",
          "optimize_data",
          "_get_default_strategies",
          "_apply_strategy",
          "_apply_caching",
          "_apply_compression",
          "_apply_indexing",
          "_apply_deduplication",
          "_apply_batch_processing",
          "_apply_lazy_loading",
          "_manage_cache_size",
          "_update_optimization_stats",
          "get_cache_statistics",
          "clear_cache"
        ],
        "docstring": "Core data optimization system for swarm efficiency.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 32
  },
  "src\\core\\test_task_claiming_automation.py": {
    "language": ".py",
    "functions": [
      "test_task_claiming_automation_initialization",
      "test_task_class",
      "test_task_claiming_with_temp_files",
      "test_dependency_validation",
      "test_metrics_and_reporting",
      "main"
    ],
    "classes": {},
    "routes": [],
    "complexity": 6
  },
  "src\\core\\simplified_messaging.py": {
    "language": ".py",
    "functions": [
      "create_simple_message",
      "__init__",
      "format_task_completion",
      "format_blocker",
      "format_coordination",
      "format_status_update",
      "validate_message",
      "get_message_stats"
    ],
    "classes": {
      "SimplifiedMessaging": {
        "methods": [
          "__init__",
          "format_task_completion",
          "format_blocker",
          "format_coordination",
          "format_status_update",
          "validate_message",
          "get_message_stats"
        ],
        "docstring": "Simplified messaging system - no templates, no overhead.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 15
  },
  "src\\core\\swarm_bi_coordinator.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "_load_agent_coordinates",
      "coordinate_agent_bi",
      "_process_agent_metrics",
      "_process_agent_performance",
      "_optimize_agent_data",
      "_determine_data_type",
      "_record_coordination_activity",
      "get_swarm_bi_status",
      "generate_coordination_report",
      "_generate_coordination_recommendations",
      "save_coordination_data"
    ],
    "classes": {
      "CoordinationStatus": {
        "methods": [],
        "docstring": "BI coordination status.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SwarmBICoordinationReport": {
        "methods": [],
        "docstring": "Comprehensive swarm BI coordination report.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SwarmBICoordinator": {
        "methods": [
          "__init__",
          "_load_agent_coordinates",
          "coordinate_agent_bi",
          "_process_agent_metrics",
          "_process_agent_performance",
          "_optimize_agent_data",
          "_determine_data_type",
          "_record_coordination_activity",
          "get_swarm_bi_status",
          "generate_coordination_report",
          "_generate_coordination_recommendations",
          "save_coordination_data"
        ],
        "docstring": "Central coordinator for swarm business intelligence systems.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 24
  },
  "src\\core\\swarm_agent_manager.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "initialize_swarm_agents",
      "_get_agent_capabilities",
      "get_agent",
      "get_agents_by_status",
      "get_active_agents",
      "update_agent_status",
      "assign_mission",
      "update_performance_metrics",
      "get_agent_summary",
      "get_metrics"
    ],
    "classes": {
      "SwarmAgentManager": {
        "methods": [
          "__init__",
          "initialize_swarm_agents",
          "_get_agent_capabilities",
          "get_agent",
          "get_agents_by_status",
          "get_active_agents",
          "update_agent_status",
          "assign_mission",
          "update_performance_metrics",
          "get_agent_summary",
          "get_metrics"
        ],
        "docstring": "Manages swarm agents and their states",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 22
  },
  "src\\core\\test_self_validation_protocol.py": {
    "language": ".py",
    "functions": [
      "test_validation_result",
      "test_validation_rules",
      "test_self_validation_protocol",
      "test_integration_scenario",
      "main"
    ],
    "classes": {},
    "routes": [],
    "complexity": 5
  },
  "src\\core\\swarm_data_optimizer_advanced.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "_initialize_analytics_engine",
      "optimize_data_advanced",
      "_track_optimization_analytics",
      "_update_advanced_stats",
      "_monitor_performance",
      "_calculate_efficiency_score",
      "get_optimization_report",
      "_get_analytics_stats",
      "_get_efficiency_summary",
      "_get_performance_summary",
      "save_optimization_data",
      "get_optimization_recommendations",
      "clear_all_data",
      "track_event",
      "get_analytics_statistics"
    ],
    "classes": {
      "SwarmDataOptimizerAdvanced": {
        "methods": [
          "__init__",
          "_initialize_analytics_engine",
          "optimize_data_advanced",
          "_track_optimization_analytics",
          "_update_advanced_stats",
          "_monitor_performance",
          "_calculate_efficiency_score",
          "get_optimization_report",
          "_get_analytics_stats",
          "_get_efficiency_summary",
          "_get_performance_summary",
          "save_optimization_data",
          "get_optimization_recommendations",
          "clear_all_data"
        ],
        "docstring": "Advanced data optimization system with analytics integration and reporting.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "MockAnalyticsEngine": {
        "methods": [
          "track_event",
          "get_analytics_statistics"
        ],
        "docstring": "Mock analytics engine for when real engine is not available.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 32
  },
  "src\\core\\unified_progress_tracking_advanced.py": {
    "language": ".py",
    "functions": [
      "get_unified_progress_tracking_system",
      "__init__",
      "_initialize_agents",
      "_initialize_systems",
      "_initialize_superiority_benchmarks",
      "calculate_overall_progress",
      "calculate_overall_qc_compliance",
      "calculate_coordination_efficiency",
      "generate_progress_report",
      "_generate_alerts_and_recommendations",
      "export_progress_data",
      "shutdown"
    ],
    "classes": {
      "UnifiedProgressTrackingSystem": {
        "methods": [
          "__init__",
          "_initialize_agents",
          "_initialize_systems",
          "_initialize_superiority_benchmarks",
          "calculate_overall_progress",
          "calculate_overall_qc_compliance",
          "calculate_coordination_efficiency",
          "generate_progress_report",
          "_generate_alerts_and_recommendations",
          "export_progress_data",
          "shutdown"
        ],
        "docstring": "Unified progress tracking system for Phase 3 architecture coordination.",
        "base_classes": [
          "ProgressTrackerCore"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 23
  },
  "src\\core\\unified_core_interfaces_advanced.py": {
    "language": ".py",
    "functions": [
      "create_interface_contract",
      "validate_interface_implementation",
      "on_start",
      "on_stop",
      "on_restart",
      "is_running",
      "initialize",
      "is_initialized",
      "dispose",
      "is_disposed",
      "start_monitoring",
      "stop_monitoring",
      "get_metrics",
      "reset_metrics",
      "check_health",
      "is_healthy",
      "get_health_status",
      "process",
      "can_process",
      "get_supported_formats",
      "validate",
      "get_validation_rules",
      "cancel",
      "is_cancelled",
      "get_status",
      "submit_task",
      "get_task_status",
      "cancel_task",
      "get_task_result",
      "metadata",
      "get_capabilities",
      "get_dependencies",
      "integrate_with_system",
      "get_integration_status",
      "create_system",
      "get_supported_systems",
      "validate_system_config",
      "register_system",
      "get_system",
      "list_systems",
      "unregister_system",
      "get_systems_by_capability"
    ],
    "classes": {
      "ILifecycleAware": {
        "methods": [
          "on_start",
          "on_stop",
          "on_restart",
          "is_running"
        ],
        "docstring": "Interface for components with lifecycle management.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IInitializable": {
        "methods": [
          "initialize",
          "is_initialized"
        ],
        "docstring": "Interface for initializable components.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IDisposable": {
        "methods": [
          "dispose",
          "is_disposed"
        ],
        "docstring": "Interface for disposable components.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IMonitor": {
        "methods": [
          "start_monitoring",
          "stop_monitoring",
          "get_metrics",
          "reset_metrics"
        ],
        "docstring": "Interface for monitoring components.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IHealthCheck": {
        "methods": [
          "check_health",
          "is_healthy",
          "get_health_status"
        ],
        "docstring": "Interface for health check components.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IDataProcessor": {
        "methods": [
          "process",
          "can_process",
          "get_supported_formats"
        ],
        "docstring": "Interface for data processing components.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IDataValidator": {
        "methods": [
          "validate",
          "get_validation_rules"
        ],
        "docstring": "Interface for data validation components.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IAsyncTask": {
        "methods": [
          "cancel",
          "is_cancelled",
          "get_status"
        ],
        "docstring": "Interface for async tasks.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IAsyncTaskManager": {
        "methods": [
          "submit_task",
          "get_task_status",
          "cancel_task",
          "get_task_result"
        ],
        "docstring": "Interface for async task managers.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "CoreSystemMetadata": {
        "methods": [],
        "docstring": "Metadata for core systems.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IUnifiedCoreSystem": {
        "methods": [
          "metadata",
          "get_capabilities",
          "get_dependencies",
          "integrate_with_system",
          "get_integration_status"
        ],
        "docstring": "Unified interface for all core systems combining multiple interface contracts.",
        "base_classes": [
          "ICoreSystem",
          "IConfigurable",
          "IObservable",
          "ILifecycleAware",
          "IHealthCheck",
          "IMonitor"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ICoreSystemFactory": {
        "methods": [
          "create_system",
          "get_supported_systems",
          "validate_system_config"
        ],
        "docstring": "Factory interface for creating core systems.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ICoreSystemRegistry": {
        "methods": [
          "register_system",
          "get_system",
          "list_systems",
          "unregister_system",
          "get_systems_by_capability"
        ],
        "docstring": "Registry interface for core systems.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "CombinedInterface": {
        "methods": [],
        "docstring": "Combined interface from multiple interface types.",
        "base_classes": [
          null
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 82
  },
  "src\\core\\consolidation\\base.py": {
    "language": ".py",
    "functions": [
      "consolidate_directories",
      "_consolidate_directory",
      "_get_consolidated_path",
      "_should_consolidate_file",
      "_consolidate_file"
    ],
    "classes": {
      "ConsolidationBase": {
        "methods": [
          "consolidate_directories",
          "_consolidate_directory",
          "_get_consolidated_path",
          "_should_consolidate_file",
          "_consolidate_file"
        ],
        "docstring": "Reusable helpers for consolidation workflows.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 10
  },
  "src\\core\\unified_core_system.py": {
    "language": ".py",
    "functions": [
      "get_unified_system",
      "initialize_core_system",
      "cleanup_core_system",
      "__init__",
      "initialize",
      "cleanup",
      "get_status",
      "set_status",
      "__init__",
      "initialize",
      "cleanup",
      "add_document",
      "search_documents",
      "__init__",
      "initialize",
      "cleanup",
      "register_agent",
      "coordinate_task",
      "__init__",
      "initialize",
      "cleanup",
      "register_health_check",
      "run_health_checks",
      "collect_metrics",
      "__init__",
      "initialize",
      "cleanup",
      "set_config",
      "get_config",
      "load_env_vars",
      "__init__",
      "_initialize_components",
      "initialize",
      "cleanup",
      "get_component",
      "get_system_status"
    ],
    "classes": {
      "SystemStatus": {
        "methods": [],
        "docstring": "System status enumeration.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SystemMetrics": {
        "methods": [],
        "docstring": "System metrics data structure.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "BaseCoreComponent": {
        "methods": [
          "__init__",
          "initialize",
          "cleanup",
          "get_status",
          "set_status"
        ],
        "docstring": "Base class for all core system components.",
        "base_classes": [
          "ABC"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "DocumentationManager": {
        "methods": [
          "__init__",
          "initialize",
          "cleanup",
          "add_document",
          "search_documents"
        ],
        "docstring": "Unified documentation management system.",
        "base_classes": [
          "BaseCoreComponent"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "AgentCoordinationManager": {
        "methods": [
          "__init__",
          "initialize",
          "cleanup",
          "register_agent",
          "coordinate_task"
        ],
        "docstring": "Unified agent coordination system.",
        "base_classes": [
          "BaseCoreComponent"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "MonitoringSystem": {
        "methods": [
          "__init__",
          "initialize",
          "cleanup",
          "register_health_check",
          "run_health_checks",
          "collect_metrics"
        ],
        "docstring": "Unified monitoring and health check system.",
        "base_classes": [
          "BaseCoreComponent"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ConfigurationManager": {
        "methods": [
          "__init__",
          "initialize",
          "cleanup",
          "set_config",
          "get_config",
          "load_env_vars"
        ],
        "docstring": "Unified configuration management system.",
        "base_classes": [
          "BaseCoreComponent"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "UnifiedCoreSystem": {
        "methods": [
          "__init__",
          "_initialize_components",
          "initialize",
          "cleanup",
          "get_component",
          "get_system_status"
        ],
        "docstring": "Main unified core system consolidating all core functionality.\n\nThis system replaces 50+ broken/empty files with a single,\nwell-structured, working implementation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 69
  },
  "src\\core\\unified_core_interfaces_basic.py": {
    "language": ".py",
    "functions": [
      "system_name",
      "version",
      "initialize",
      "shutdown",
      "get_status",
      "configure",
      "get_configuration",
      "validate_configuration",
      "add_observer",
      "remove_observer",
      "notify_observers",
      "on_event",
      "get",
      "set",
      "has",
      "get_section",
      "reload",
      "validate",
      "get_schema",
      "coordinator_id",
      "get_coordinator_type",
      "register_coordinator",
      "get_coordinator",
      "unregister_coordinator",
      "list_coordinators",
      "create_coordinator",
      "can_handle",
      "channel_id",
      "get_protocol",
      "register_channel",
      "register_handler"
    ],
    "classes": {
      "ICoreSystem": {
        "methods": [
          "system_name",
          "version",
          "initialize",
          "shutdown",
          "get_status"
        ],
        "docstring": "Core system interface for all major system components.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IConfigurable": {
        "methods": [
          "configure",
          "get_configuration",
          "validate_configuration"
        ],
        "docstring": "Interface for configurable components.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IObservable": {
        "methods": [
          "add_observer",
          "remove_observer",
          "notify_observers"
        ],
        "docstring": "Interface for observable components (Observer pattern).",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IObserver": {
        "methods": [
          "on_event"
        ],
        "docstring": "Interface for observer components.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IConfigurationProvider": {
        "methods": [
          "get",
          "set",
          "has",
          "get_section",
          "reload"
        ],
        "docstring": "Interface for configuration providers.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IConfigurationValidator": {
        "methods": [
          "validate",
          "get_schema"
        ],
        "docstring": "Interface for configuration validators.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ICoordinator": {
        "methods": [
          "coordinator_id",
          "get_coordinator_type"
        ],
        "docstring": "Abstract base class for all coordinators.",
        "base_classes": [
          "ABC"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ICoordinatorRegistry": {
        "methods": [
          "register_coordinator",
          "get_coordinator",
          "unregister_coordinator",
          "list_coordinators"
        ],
        "docstring": "Interface for coordinator registries.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ICoordinatorFactory": {
        "methods": [
          "create_coordinator"
        ],
        "docstring": "Interface for coordinator factories.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IMessageHandler": {
        "methods": [
          "can_handle"
        ],
        "docstring": "Interface for message handlers.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ICommunicationChannel": {
        "methods": [
          "channel_id",
          "get_protocol"
        ],
        "docstring": "Abstract base class for communication channels.",
        "base_classes": [
          "ABC"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ICommunicationSystem": {
        "methods": [
          "register_channel",
          "register_handler"
        ],
        "docstring": "Interface for communication systems.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 62
  },
  "src\\core\\coordination\\fsm_system.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "transition_to",
      "get_state_info"
    ],
    "classes": {
      "AgentState": {
        "methods": [],
        "docstring": "Finite State Machine states for agents.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "AgentFSM": {
        "methods": [
          "__init__",
          "transition_to",
          "get_state_info"
        ],
        "docstring": "Finite State Machine for agent state management.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 6
  },
  "src\\core\\coordination\\onboarding_coordinator.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "load_coordinates",
      "get_chat_coordinates",
      "get_onboarding_coordinates",
      "create_onboarding_contract",
      "create_contract",
      "perform_agent_onboarding",
      "_execute_onboarding_sequence",
      "create_onboarding_message",
      "get_onboarding_status",
      "get_agent_fsm",
      "get_active_contract"
    ],
    "classes": {
      "OnboardingCoordinator": {
        "methods": [
          "__init__",
          "load_coordinates",
          "get_chat_coordinates",
          "get_onboarding_coordinates",
          "create_onboarding_contract",
          "create_contract",
          "perform_agent_onboarding",
          "_execute_onboarding_sequence",
          "create_onboarding_message",
          "get_onboarding_status",
          "get_agent_fsm",
          "get_active_contract"
        ],
        "docstring": "Onboarding coordinator for agent initialization and workspace setup.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 24
  },
  "src\\core\\coordination\\contract_system.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "to_dict"
    ],
    "classes": {
      "ContractType": {
        "methods": [],
        "docstring": "Types of contracts agents can enter.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "AgentContract": {
        "methods": [
          "__init__",
          "to_dict"
        ],
        "docstring": "Contract system for agent task commitments.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 4
  },
  "src\\core\\ssot\\ssot_models.py": {
    "language": ".py",
    "functions": [
      "get_example_usage",
      "to_dict",
      "to_dict",
      "to_dict",
      "to_dict",
      "__init__",
      "record_component_registration",
      "record_task_creation",
      "record_task_completion",
      "record_report_generation",
      "to_dict"
    ],
    "classes": {
      "SSOTComponentType": {
        "methods": [],
        "docstring": "SSOT component types - consolidated from multiple files.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SSOTExecutionPhase": {
        "methods": [],
        "docstring": "Execution phases for SSOT operations.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SSOTValidationLevel": {
        "methods": [],
        "docstring": "SSOT validation levels - consolidated from multiple files.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SSOTComponent": {
        "methods": [
          "to_dict"
        ],
        "docstring": "SSOT component representation.\n\nDRY COMPLIANCE: Single component model for all SSOT operations.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SSOTIntegrationResult": {
        "methods": [
          "to_dict"
        ],
        "docstring": "Result of SSOT integration operation.\n\nDRY COMPLIANCE: Single result model for all SSOT operations.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SSOTExecutionTask": {
        "methods": [
          "to_dict"
        ],
        "docstring": "SSOT execution task.\n\nDRY COMPLIANCE: Single task model for all SSOT execution operations.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SSOTValidationReport": {
        "methods": [
          "to_dict"
        ],
        "docstring": "SSOT validation report.\n\nDRY COMPLIANCE: Single validation report for all SSOT validation operations.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SSOTMetrics": {
        "methods": [
          "__init__",
          "record_component_registration",
          "record_task_creation",
          "record_task_completion",
          "record_report_generation",
          "to_dict"
        ],
        "docstring": "Metrics tracking for SSOT operations.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 21
  },
  "src\\core\\semantic\\status_cli.py": {
    "language": ".py",
    "functions": [
      "load_cfg",
      "main"
    ],
    "classes": {},
    "routes": [],
    "complexity": 2
  },
  "src\\core\\semantic\\utils.py": {
    "language": ".py",
    "functions": [
      "flatten_json",
      "json_to_text",
      "_walk",
      "__init__",
      "simulate_vector_search",
      "simulate_get_documents",
      "simulate_add_document",
      "simulate_get_document",
      "simulate_update_document",
      "simulate_delete_document",
      "simulate_get_analytics",
      "simulate_get_collections",
      "simulate_export_data",
      "__init__",
      "flatten_json",
      "json_to_text",
      "simulate_vector_search",
      "simulate_get_documents",
      "simulate_add_document",
      "simulate_get_document",
      "simulate_update_document",
      "simulate_delete_document",
      "simulate_get_analytics",
      "simulate_get_collections",
      "simulate_export_data"
    ],
    "classes": {
      "VectorDatabaseUtils": {
        "methods": [
          "__init__",
          "simulate_vector_search",
          "simulate_get_documents",
          "simulate_add_document",
          "simulate_get_document",
          "simulate_update_document",
          "simulate_delete_document",
          "simulate_get_analytics",
          "simulate_get_collections",
          "simulate_export_data"
        ],
        "docstring": "Main utility orchestrator for vector database operations.\n\nV2 Compliance: < 100 lines, facade pattern, single responsibility.\nThis class orchestrates all utility components.\n\nEXAMPLE USAGE:\n==============\n\n# Basic usage example\nfrom src.core.semantic.utils import VectorDatabaseUtils\n\n# Initialize and use\ninstance = VectorDatabaseUtils()\nresult = instance.simulate_vector_search(request)\nlogger.info(f\"Execution result: {result}\")\n\n# Advanced configuration\nconfig = {\n    \"option1\": \"value1\",\n    \"option2\": True\n}\n\ninstance = VectorDatabaseUtils()\nadvanced_result = instance.simulate_get_analytics(\"7d\")\nlogger.info(f\"Advanced result: {advanced_result}\")",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ConsolidatedUtils": {
        "methods": [
          "__init__",
          "flatten_json",
          "json_to_text",
          "simulate_vector_search",
          "simulate_get_documents",
          "simulate_add_document",
          "simulate_get_document",
          "simulate_update_document",
          "simulate_delete_document",
          "simulate_get_analytics",
          "simulate_get_collections",
          "simulate_export_data"
        ],
        "docstring": "Consolidated utilities interface providing both semantic and vector database functionality.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 47
  },
  "src\\core\\backup_disaster_recovery\\__init__.py": {
    "language": ".py",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "src\\core\\deployment\\models\\factory_functions.py": {
    "language": ".py",
    "functions": [
      "create_default_config",
      "create_deployment_status",
      "create_deployment_metrics",
      "create_coordinator_config",
      "create_agent_domain_mapping",
      "validate_deployment_config",
      "create_deployment_summary"
    ],
    "classes": {},
    "routes": [],
    "complexity": 7
  },
  "src\\core\\messaging\\health_check.py": {
    "language": ".py",
    "functions": [
      "check_imports",
      "check_critical_systems",
      "assert_all_importable",
      "get_health_summary",
      "print_health_report"
    ],
    "classes": {
      "HealthCheckResult": {
        "methods": [],
        "docstring": "Result of a health check for a single system.",
        "base_classes": [
          "NamedTuple"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 5
  },
  "src\\core\\quality\\v2_compliance_validator.py": {
    "language": ".py",
    "functions": [
      "get_v2_compliance_validator",
      "__init__",
      "_is_analyzable_file",
      "_determine_compliance_level",
      "_get_violation_type",
      "_get_severity",
      "_get_recommendations",
      "_calculate_compliance_score",
      "_calculate_structure_score",
      "_calculate_documentation_score",
      "_calculate_performance_score",
      "_calculate_security_score",
      "_generate_validation_report",
      "_generate_global_recommendations",
      "_notify_web_interface",
      "add_web_interface_callback",
      "get_validation_summary"
    ],
    "classes": {
      "ComplianceLevel": {
        "methods": [],
        "docstring": "V2 compliance levels.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "QualityStandard": {
        "methods": [],
        "docstring": "Quality standards for validation.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ComplianceViolation": {
        "methods": [],
        "docstring": "V2 compliance violation details.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "QualityMetrics": {
        "methods": [],
        "docstring": "Quality metrics for files.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "V2ComplianceValidator": {
        "methods": [
          "__init__",
          "_is_analyzable_file",
          "_determine_compliance_level",
          "_get_violation_type",
          "_get_severity",
          "_get_recommendations",
          "_calculate_compliance_score",
          "_calculate_structure_score",
          "_calculate_documentation_score",
          "_calculate_performance_score",
          "_calculate_security_score",
          "_generate_validation_report",
          "_generate_global_recommendations",
          "_notify_web_interface",
          "add_web_interface_callback",
          "get_validation_summary"
        ],
        "docstring": "V2 compliance validator with quality standards enforcement.\n\nV2 Compliance: Comprehensive validation framework for core systems.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 33
  },
  "src\\core\\quality\\v2_compliance_validator_core.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "_is_analyzable_file",
      "_determine_compliance_level",
      "_get_violation_type",
      "_get_severity",
      "_get_recommendations",
      "_calculate_compliance_score",
      "_calculate_structure_score",
      "_calculate_documentation_score",
      "_calculate_performance_score",
      "_calculate_security_score",
      "_generate_validation_report",
      "_generate_global_recommendations"
    ],
    "classes": {
      "ComplianceLevel": {
        "methods": [],
        "docstring": "V2 compliance levels.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "QualityStandard": {
        "methods": [],
        "docstring": "Quality standards for validation.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ComplianceViolation": {
        "methods": [],
        "docstring": "V2 compliance violation details.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "QualityMetrics": {
        "methods": [],
        "docstring": "Quality metrics for files.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "V2ComplianceValidatorCore": {
        "methods": [
          "__init__",
          "_is_analyzable_file",
          "_determine_compliance_level",
          "_get_violation_type",
          "_get_severity",
          "_get_recommendations",
          "_calculate_compliance_score",
          "_calculate_structure_score",
          "_calculate_documentation_score",
          "_calculate_performance_score",
          "_calculate_security_score",
          "_generate_validation_report",
          "_generate_global_recommendations"
        ],
        "docstring": "Core V2 compliance validator with basic validation functionality.\n\nV2 Compliance: Core validation framework for compliance checking.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 26
  },
  "src\\core\\swarm\\swarm_communication_core.py": {
    "language": ".py",
    "functions": [
      "get_swarm_communication_core",
      "__init__",
      "_monitor_swarm_communication",
      "_update_agent_statuses",
      "_process_pending_decisions",
      "_finalize_decision",
      "_update_web_interface",
      "_notify_web_interface",
      "register_agent",
      "update_agent_status",
      "create_decision",
      "cast_vote",
      "get_swarm_status",
      "add_web_interface_callback"
    ],
    "classes": {
      "SwarmDecisionType": {
        "methods": [],
        "docstring": "Types of swarm decisions that require democratic voting.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SwarmAgentStatus": {
        "methods": [],
        "docstring": "Status of swarm agents.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SwarmAgent": {
        "methods": [],
        "docstring": "Represents a swarm agent with its capabilities and status.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SwarmDecision": {
        "methods": [],
        "docstring": "Represents a democratic decision in the swarm.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "SwarmCommunicationCore": {
        "methods": [
          "__init__",
          "_monitor_swarm_communication",
          "_update_agent_statuses",
          "_process_pending_decisions",
          "_finalize_decision",
          "_update_web_interface",
          "_notify_web_interface",
          "register_agent",
          "update_agent_status",
          "create_decision",
          "cast_vote",
          "get_swarm_status",
          "add_web_interface_callback"
        ],
        "docstring": "Core swarm communication functionality.\n\nV2 Compliance: Extracted from monolithic 762-line file.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 27
  },
  "src\\core\\error_handling\\error_factory.py": {
    "language": ".py",
    "functions": [
      "get_error_handling_service",
      "__init__",
      "can_handle",
      "handle",
      "get_recovery_suggestions",
      "__init__",
      "can_handle",
      "handle",
      "get_recovery_suggestions",
      "__init__",
      "can_handle",
      "handle",
      "get_recovery_suggestions",
      "__init__",
      "can_handle",
      "handle",
      "get_recovery_suggestions",
      "__init__",
      "can_handle",
      "handle",
      "get_recovery_suggestions",
      "__init__",
      "_initialize_handlers",
      "get_handler",
      "register_handler",
      "create_handler",
      "handle_error",
      "_create_generic_error_details",
      "get_handler_statistics",
      "reset_statistics",
      "__init__",
      "handle_error",
      "_log_error",
      "_notify_web_interface",
      "get_error_statistics",
      "clear_error_log"
    ],
    "classes": {
      "ErrorType": {
        "methods": [],
        "docstring": "Types of errors that can be handled.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ErrorSeverity": {
        "methods": [],
        "docstring": "Severity levels for errors.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ErrorContext": {
        "methods": [],
        "docstring": "Context information for error handling.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ErrorDetails": {
        "methods": [],
        "docstring": "Detailed error information.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "BaseErrorHandler": {
        "methods": [
          "__init__",
          "can_handle",
          "handle",
          "get_recovery_suggestions"
        ],
        "docstring": "Base class for error handlers.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ValidationErrorHandler": {
        "methods": [
          "__init__",
          "can_handle",
          "handle",
          "get_recovery_suggestions"
        ],
        "docstring": "Handler for validation errors.",
        "base_classes": [
          "BaseErrorHandler"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "NetworkErrorHandler": {
        "methods": [
          "__init__",
          "can_handle",
          "handle",
          "get_recovery_suggestions"
        ],
        "docstring": "Handler for network errors.",
        "base_classes": [
          "BaseErrorHandler"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "DatabaseErrorHandler": {
        "methods": [
          "__init__",
          "can_handle",
          "handle",
          "get_recovery_suggestions"
        ],
        "docstring": "Handler for database errors.",
        "base_classes": [
          "BaseErrorHandler"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "AuthenticationErrorHandler": {
        "methods": [
          "__init__",
          "can_handle",
          "handle",
          "get_recovery_suggestions"
        ],
        "docstring": "Handler for authentication errors.",
        "base_classes": [
          "BaseErrorHandler"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ErrorHandlerFactory": {
        "methods": [
          "__init__",
          "_initialize_handlers",
          "get_handler",
          "register_handler",
          "create_handler",
          "handle_error",
          "_create_generic_error_details",
          "get_handler_statistics",
          "reset_statistics"
        ],
        "docstring": "Factory for creating error handlers.\n\nV2 Compliance: Factory pattern implementation for error handling.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ErrorHandlingService": {
        "methods": [
          "__init__",
          "handle_error",
          "_log_error",
          "_notify_web_interface",
          "get_error_statistics",
          "clear_error_log"
        ],
        "docstring": "Service layer for error handling operations.\n\nV2 Compliance: Service layer pattern implementation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 71
  },
  "src\\core\\quality\\v2_compliance_validator_advanced.py": {
    "language": ".py",
    "functions": [
      "get_v2_compliance_validator",
      "reset_global_validator",
      "__init__",
      "_notify_web_interface",
      "add_web_interface_callback",
      "get_validation_summary",
      "get_detailed_violations_report",
      "get_quality_metrics_summary",
      "export_validation_report",
      "clear_validation_data",
      "get_compliance_trends",
      "_calculate_current_compliance_rate"
    ],
    "classes": {
      "V2ComplianceValidatorAdvanced": {
        "methods": [
          "__init__",
          "_notify_web_interface",
          "add_web_interface_callback",
          "get_validation_summary",
          "get_detailed_violations_report",
          "get_quality_metrics_summary",
          "export_validation_report",
          "clear_validation_data",
          "get_compliance_trends",
          "_calculate_current_compliance_rate"
        ],
        "docstring": "Advanced V2 compliance validator with web interface integration.\n\nV2 Compliance: Advanced validation framework with web interface support.",
        "base_classes": [
          "V2ComplianceValidatorCore"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 22
  },
  "src\\core\\quality\\coordinate_consolidation_validator.py": {
    "language": ".py",
    "functions": [
      "get_coordinate_consolidation_validator",
      "__init__",
      "_determine_file_type",
      "_calculate_priority",
      "_determine_consolidation_phase",
      "_calculate_initial_quality_score",
      "_identify_dependencies",
      "_generate_consolidation_notes",
      "_notify_web_interface",
      "add_web_interface_callback",
      "get_consolidation_status"
    ],
    "classes": {
      "ConsolidationPhase": {
        "methods": [],
        "docstring": "Coordinate consolidation phases.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "QualityMetric": {
        "methods": [],
        "docstring": "Quality metrics for consolidation.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ConsolidationTarget": {
        "methods": [],
        "docstring": "Target file for consolidation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ConsolidationMetrics": {
        "methods": [],
        "docstring": "Metrics for consolidation progress.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "CoordinateConsolidationValidator": {
        "methods": [
          "__init__",
          "_determine_file_type",
          "_calculate_priority",
          "_determine_consolidation_phase",
          "_calculate_initial_quality_score",
          "_identify_dependencies",
          "_generate_consolidation_notes",
          "_notify_web_interface",
          "add_web_interface_callback",
          "get_consolidation_status"
        ],
        "docstring": "Quality assurance validator for coordinate system consolidation.\n\nV2 Compliance: Comprehensive validation framework for 4-step consolidation strategy.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 21
  },
  "src\\core\\repository\\core_repository.py": {
    "language": ".py",
    "functions": [
      "get_core_system_service",
      "system_name",
      "version",
      "status",
      "get_metadata",
      "__init__",
      "_is_cached",
      "_matches_criteria",
      "get_repository_statistics",
      "_get_systems_by_type",
      "_get_systems_by_status",
      "_calculate_cache_hit_ratio",
      "clear_cache",
      "__init__",
      "get_service_statistics",
      "add_web_interface_callback",
      "_notify_web_interface"
    ],
    "classes": {
      "SystemStatus": {
        "methods": [],
        "docstring": "System status enumeration.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ComponentType": {
        "methods": [],
        "docstring": "Component type enumeration.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "CoreSystemMetadata": {
        "methods": [],
        "docstring": "Metadata for core system components.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ICoreSystem": {
        "methods": [
          "system_name",
          "version",
          "status",
          "get_metadata"
        ],
        "docstring": "Core system interface for all major system components.",
        "base_classes": [
          "Protocol"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IRepository": {
        "methods": [],
        "docstring": "Base repository interface for data access abstraction.",
        "base_classes": [
          "ABC"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "CoreSystemRepository": {
        "methods": [
          "__init__",
          "_is_cached",
          "_matches_criteria",
          "get_repository_statistics",
          "_get_systems_by_type",
          "_get_systems_by_status",
          "_calculate_cache_hit_ratio",
          "clear_cache"
        ],
        "docstring": "Repository for core system components.\n\nV2 Compliance: Repository pattern implementation for core interfaces.",
        "base_classes": [
          "IRepository"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "CoreSystemService": {
        "methods": [
          "__init__",
          "get_service_statistics",
          "add_web_interface_callback",
          "_notify_web_interface"
        ],
        "docstring": "Service layer for core system operations.\n\nV2 Compliance: Service layer pattern implementation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 33
  },
  "src\\core\\services\\progress_tracking_core.py": {
    "language": ".py",
    "functions": [
      "get_progress_tracking_core",
      "__init__",
      "_monitor_quality_metrics",
      "_update_quality_metrics",
      "_update_quality_metric",
      "_calculate_consolidation_efficiency",
      "_calculate_qc_compliance",
      "_calculate_integration_success",
      "_calculate_progress_velocity",
      "_calculate_blocker_resolution",
      "_check_quality_thresholds",
      "update_progress",
      "get_progress_summary",
      "_calculate_overall_status"
    ],
    "classes": {
      "ProgressPhase": {
        "methods": [],
        "docstring": "Architecture consolidation phases.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "QualityBenchmark": {
        "methods": [],
        "docstring": "Quality benchmark categories.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ProgressMetrics": {
        "methods": [],
        "docstring": "Progress tracking metrics.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "QualityMetrics": {
        "methods": [],
        "docstring": "Quality assurance metrics.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ProgressTrackingCore": {
        "methods": [
          "__init__",
          "_monitor_quality_metrics",
          "_update_quality_metrics",
          "_update_quality_metric",
          "_calculate_consolidation_efficiency",
          "_calculate_qc_compliance",
          "_calculate_integration_success",
          "_calculate_progress_velocity",
          "_calculate_blocker_resolution",
          "_check_quality_thresholds",
          "update_progress",
          "get_progress_summary",
          "_calculate_overall_status"
        ],
        "docstring": "Core progress tracking functionality.\n\nV2 Compliance: Core service layer pattern implementation with quality monitoring.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 27
  },
  "src\\core\\services\\progress_tracking_advanced.py": {
    "language": ".py",
    "functions": [
      "get_progress_tracking_advanced",
      "__init__",
      "_monitor_web_interface",
      "_update_web_interface_data",
      "_process_pending_notifications",
      "_process_notifications",
      "_send_notification",
      "add_web_interface_callback",
      "remove_web_interface_callback",
      "queue_notification",
      "update_progress_with_notifications",
      "get_web_interface_data",
      "get_comprehensive_summary",
      "configure_web_interface",
      "get_web_interface_config"
    ],
    "classes": {
      "WebInterfaceData": {
        "methods": [],
        "docstring": "Web interface data structure.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "NotificationEvent": {
        "methods": [],
        "docstring": "Notification event structure.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ProgressTrackingAdvanced": {
        "methods": [
          "__init__",
          "_monitor_web_interface",
          "_update_web_interface_data",
          "_process_pending_notifications",
          "_process_notifications",
          "_send_notification",
          "add_web_interface_callback",
          "remove_web_interface_callback",
          "queue_notification",
          "update_progress_with_notifications",
          "get_web_interface_data",
          "get_comprehensive_summary",
          "configure_web_interface",
          "get_web_interface_config"
        ],
        "docstring": "Advanced progress tracking functionality with web interface integration.\n\nV2 Compliance: Advanced service layer pattern implementation with web interface.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 29
  },
  "src\\core\\services\\progress_tracking_service.py": {
    "language": ".py",
    "functions": [
      "get_progress_tracking_service",
      "__init__",
      "_monitor_quality_metrics",
      "_update_quality_metrics",
      "_update_quality_metric",
      "_calculate_consolidation_efficiency",
      "_calculate_qc_compliance",
      "_calculate_integration_success",
      "_calculate_progress_velocity",
      "_calculate_blocker_resolution",
      "_check_quality_thresholds",
      "_update_web_interface",
      "_calculate_overall_status",
      "_notify_web_interface",
      "update_progress",
      "get_progress_summary",
      "add_web_interface_callback"
    ],
    "classes": {
      "ProgressPhase": {
        "methods": [],
        "docstring": "Architecture consolidation phases.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "QualityBenchmark": {
        "methods": [],
        "docstring": "Quality benchmark categories.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ProgressMetrics": {
        "methods": [],
        "docstring": "Progress tracking metrics.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "QualityMetrics": {
        "methods": [],
        "docstring": "Quality assurance metrics.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ProgressTrackingService": {
        "methods": [
          "__init__",
          "_monitor_quality_metrics",
          "_update_quality_metrics",
          "_update_quality_metric",
          "_calculate_consolidation_efficiency",
          "_calculate_qc_compliance",
          "_calculate_integration_success",
          "_calculate_progress_velocity",
          "_calculate_blocker_resolution",
          "_check_quality_thresholds",
          "_update_web_interface",
          "_calculate_overall_status",
          "_notify_web_interface",
          "update_progress",
          "get_progress_summary",
          "add_web_interface_callback"
        ],
        "docstring": "Service layer for progress tracking operations.\n\nV2 Compliance: Service layer pattern implementation with quality monitoring.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 33
  },
  "src\\discord_commander\\discord_command_handlers.py": {
    "language": ".py",
    "functions": [
      "__init__"
    ],
    "classes": {
      "DiscordCommandHandlers": {
        "methods": [
          "__init__"
        ],
        "docstring": "Command processing and handling for Discord Agent Bot.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 2
  },
  "src\\discord_commander\\handlers_agents.py": {
    "language": ".py",
    "functions": [
      "create_agent_command_handlers",
      "__init__",
      "get_active_command_count",
      "get_agent_command_stats"
    ],
    "classes": {
      "AgentCommandHandlers": {
        "methods": [
          "__init__",
          "get_active_command_count",
          "get_agent_command_stats"
        ],
        "docstring": "Handles agent-specific commands (prompt, status).",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 7
  },
  "src\\discord_commander\\discord_agent_bot_core.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "_initialize_messaging_gateway",
      "_load_config",
      "_load_agent_coordinates",
      "get_command_stats",
      "_register_basic_fallback_commands"
    ],
    "classes": {
      "DiscordAgentBot": {
        "methods": [
          "__init__",
          "_initialize_messaging_gateway",
          "_load_config",
          "_load_agent_coordinates",
          "get_command_stats",
          "_register_basic_fallback_commands"
        ],
        "docstring": "Streamlined Discord bot for V2_SWARM agent coordination.",
        "base_classes": [
          "commands.Bot"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 12
  },
  "src\\discord_commander\\discord_rate_limiting.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "release",
      "_fallback_acquire",
      "get_rate_limit_status",
      "reset_user_cooldown",
      "reset_all_cooldowns"
    ],
    "classes": {
      "DiscordRateLimiter": {
        "methods": [
          "__init__",
          "release",
          "_fallback_acquire",
          "get_rate_limit_status",
          "reset_user_cooldown",
          "reset_all_cooldowns"
        ],
        "docstring": "Rate limiting and throttling for Discord Agent Bot.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 12
  },
  "src\\discord_commander\\handlers_agent_summary.py": {
    "language": ".py",
    "functions": [
      "__init__"
    ],
    "classes": {
      "AgentSummary": {
        "methods": [
          "__init__"
        ],
        "docstring": "Discord cog for agent summary commands",
        "base_classes": [
          "commands.Cog"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 2
  },
  "src\\discord_commander\\discord_security_policies.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "_load_security_config",
      "is_channel_allowed",
      "is_guild_allowed",
      "is_user_allowed",
      "is_admin_user",
      "check_security_policies",
      "get_security_status",
      "update_security_config",
      "_save_security_config",
      "add_allowed_channel",
      "remove_allowed_channel",
      "add_admin_user",
      "remove_admin_user",
      "get_security_help"
    ],
    "classes": {
      "DiscordSecurityManager": {
        "methods": [
          "__init__",
          "_load_security_config",
          "is_channel_allowed",
          "is_guild_allowed",
          "is_user_allowed",
          "is_admin_user",
          "check_security_policies",
          "get_security_status",
          "update_security_config",
          "_save_security_config",
          "add_allowed_channel",
          "remove_allowed_channel",
          "add_admin_user",
          "remove_admin_user",
          "get_security_help"
        ],
        "docstring": "Security policies and access control for Discord Agent Bot.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 30
  },
  "src\\discord_commander\\discord_dynamic_agent_commands.py": {
    "language": ".py",
    "functions": [
      "_load_alias_map",
      "_mk_ok_embed",
      "_mk_err_embed"
    ],
    "classes": {},
    "routes": [],
    "complexity": 3
  },
  "src\\discord_commander\\discord_agent_bot_refactored.py": {
    "language": ".py",
    "functions": [
      "get_discord_bot_manager",
      "__init__",
      "get_system_status",
      "__init__",
      "create_bot"
    ],
    "classes": {
      "DiscordAgentBotRefactored": {
        "methods": [
          "__init__",
          "get_system_status"
        ],
        "docstring": "Refactored Discord Agent Bot with modular architecture.",
        "base_classes": [
          "DiscordAgentBot"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "DiscordAgentBotManager": {
        "methods": [
          "__init__",
          "create_bot"
        ],
        "docstring": "Manager for Discord Agent Bot operations.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 9
  },
  "src\\discord_commander\\communication_engine\\__init__.py": {
    "language": ".py",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "src\\discord_commander\\discord_commander.py": {
    "language": ".py",
    "functions": [
      "get_discord_commander",
      "__init__",
      "_find_new_devlogs",
      "_parse_devlog_filename",
      "_extract_devlog_summary",
      "stop_monitoring",
      "setup_onboarding_integration",
      "add_command_handler"
    ],
    "classes": {
      "DiscordCommander": {
        "methods": [
          "__init__",
          "_find_new_devlogs",
          "_parse_devlog_filename",
          "_extract_devlog_summary",
          "stop_monitoring",
          "setup_onboarding_integration",
          "add_command_handler"
        ],
        "docstring": "Main Discord commander for V2_SWARM DevLog integration.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 15
  },
  "src\\discord_commander\\messaging_gateway\\__init__.py": {
    "language": ".py",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "src\\discord_commander\\onboarding_integration.py": {
    "language": ".py",
    "functions": [
      "integrate_onboarding_with_discord_commander",
      "__init__",
      "_get_help_message"
    ],
    "classes": {
      "DiscordOnboardingIntegration": {
        "methods": [
          "__init__",
          "_get_help_message"
        ],
        "docstring": "Discord Commander integration for unified onboarding service.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 5
  },
  "src\\discord_commander\\agent_communication_engine.py": {
    "language": ".py",
    "functions": [
      "create_agent_communication_engine",
      "__init__",
      "_setup_logger",
      "_get_unified_utility",
      "validate_agent_name",
      "format_timestamp",
      "create_message_metadata",
      "_create_inbox_message_content",
      "is_valid_agent",
      "get_all_agent_names",
      "get_agent_status_file_path"
    ],
    "classes": {
      "AgentCommunicationEngine": {
        "methods": [
          "__init__",
          "_setup_logger",
          "_get_unified_utility",
          "validate_agent_name",
          "format_timestamp",
          "create_message_metadata",
          "_create_inbox_message_content",
          "is_valid_agent",
          "get_all_agent_names",
          "get_agent_status_file_path"
        ],
        "docstring": "Consolidated agent communication engine for Discord commander",
        "base_classes": [
          "ABC"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 21
  },
  "src\\discord_commander\\handlers_swarm.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "get_active_broadcast_count",
      "__init__"
    ],
    "classes": {
      "SwarmCommandHandlers": {
        "methods": [
          "__init__",
          "get_active_broadcast_count"
        ],
        "docstring": "Handlers for swarm-wide Discord commands.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "CommandResult": {
        "methods": [
          "__init__"
        ],
        "docstring": "Result of a command execution.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 6
  },
  "src\\discord_commander\\webhook\\__init__.py": {
    "language": ".py",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "src\\infrastructure\\browser\\thea_login_handler.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "ensure_authenticated",
      "_is_authenticated"
    ],
    "classes": {
      "TheaLoginConfig": {
        "methods": [],
        "docstring": "Configuration for Thea login.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TheaLoginHandler": {
        "methods": [
          "__init__",
          "ensure_authenticated",
          "_is_authenticated"
        ],
        "docstring": "Basic login handler stub.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 6
  },
  "src\\infrastructure\\browser\\thea_session_manager.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "start",
      "stop",
      "create_session",
      "can_make_request",
      "record_request",
      "wait_for_rate_limit_reset",
      "handle_rate_limit_error",
      "get_session_info",
      "get_rate_limit_status"
    ],
    "classes": {
      "RateLimitConfig": {
        "methods": [],
        "docstring": "Configuration for rate limiting.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "TheaSessionManager": {
        "methods": [
          "__init__",
          "start",
          "stop",
          "create_session",
          "can_make_request",
          "record_request",
          "wait_for_rate_limit_reset",
          "handle_rate_limit_error",
          "get_session_info",
          "get_rate_limit_status"
        ],
        "docstring": "Basic session manager stub.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 20
  },
  "src\\infrastructure\\monitoring\\components\\__init__.py": {
    "language": ".py",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "src\\infrastructure\\monitoring\\__init__.py": {
    "language": ".py",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "src\\infrastructure\\monitoring\\infrastructure_monitoring_integration.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "start_monitoring",
      "stop_monitoring",
      "_monitoring_loop",
      "_update_health_service",
      "_add_infrastructure_metrics",
      "get_health_snapshot",
      "get_infrastructure_status",
      "get_performance_summary",
      "record_operation_metrics",
      "record_cache_metrics",
      "record_resource_usage",
      "__init__",
      "__init__",
      "__init__",
      "__init__",
      "add_service",
      "get_health_snapshot",
      "add_alert_handler"
    ],
    "classes": {
      "InfrastructureMonitoringIntegration": {
        "methods": [
          "__init__",
          "start_monitoring",
          "stop_monitoring",
          "_monitoring_loop",
          "_update_health_service",
          "_add_infrastructure_metrics",
          "get_health_snapshot",
          "get_infrastructure_status",
          "get_performance_summary",
          "record_operation_metrics",
          "record_cache_metrics",
          "record_resource_usage"
        ],
        "docstring": "Integrates infrastructure components with health monitoring dashboard.\n\nMonitors:\n- File system health and usage\n- Logging system performance\n- Configuration management status\n- Backup system health\n- Cache performance\n- Operation error rates",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ServiceType": {
        "methods": [],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "AlertSeverity": {
        "methods": [],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "ServiceEndpoint": {
        "methods": [
          "__init__"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "HealthMetric": {
        "methods": [
          "__init__"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "SystemHealthSnapshot": {
        "methods": [
          "__init__"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "HealthMonitoringService": {
        "methods": [
          "__init__",
          "add_service",
          "get_health_snapshot",
          "add_alert_handler"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 38
  },
  "src\\infrastructure\\monitoring\\components\\infrastructure_services.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "monitor_file_system",
      "monitor_logging_system",
      "monitor_configuration_system",
      "_get_directory_size",
      "get_infrastructure_status"
    ],
    "classes": {
      "InfrastructureServices": {
        "methods": [
          "__init__",
          "monitor_file_system",
          "monitor_logging_system",
          "monitor_configuration_system",
          "_get_directory_size",
          "get_infrastructure_status"
        ],
        "docstring": "Infrastructure services monitoring and management.\n\nMonitors file system health, logging system performance,\nand configuration management status.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 12
  },
  "src\\infrastructure\\monitoring\\components\\monitoring_components.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "register_services",
      "start_monitoring",
      "stop_monitoring",
      "_monitoring_loop",
      "_collect_health_metrics",
      "_update_health_service",
      "__init__",
      "__init__",
      "add_service",
      "get_health_snapshot",
      "add_alert_handler"
    ],
    "classes": {
      "InfrastructureHealthMetrics": {
        "methods": [],
        "docstring": "Infrastructure-specific health metrics.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "MonitoringComponents": {
        "methods": [
          "__init__",
          "register_services",
          "start_monitoring",
          "stop_monitoring",
          "_monitoring_loop",
          "_collect_health_metrics",
          "_update_health_service"
        ],
        "docstring": "Core monitoring components for infrastructure health monitoring.\n\nProvides health monitoring integration, service endpoint management,\nand alert system integration.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ServiceType": {
        "methods": [],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "AlertSeverity": {
        "methods": [],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "ServiceEndpoint": {
        "methods": [
          "__init__"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "HealthMetric": {
        "methods": [],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "SystemHealthSnapshot": {
        "methods": [],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "HealthMonitoringService": {
        "methods": [
          "__init__",
          "add_service",
          "get_health_snapshot",
          "add_alert_handler"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 24
  },
  "src\\infrastructure\\monitoring\\components\\performance_metrics.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "record_response_time",
      "record_error",
      "record_cache_hit",
      "record_cache_miss",
      "record_resource_usage",
      "get_average_response_time",
      "get_error_rate",
      "get_cache_hit_rate",
      "get_resource_usage_stats",
      "get_performance_summary",
      "get_health_metrics",
      "reset_metrics"
    ],
    "classes": {
      "PerformanceMetrics": {
        "methods": [],
        "docstring": "Performance metrics data structure.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "PerformanceMetricsCollector": {
        "methods": [
          "__init__",
          "record_response_time",
          "record_error",
          "record_cache_hit",
          "record_cache_miss",
          "record_resource_usage",
          "get_average_response_time",
          "get_error_rate",
          "get_cache_hit_rate",
          "get_resource_usage_stats",
          "get_performance_summary",
          "get_health_metrics",
          "reset_metrics"
        ],
        "docstring": "Performance metrics collector for infrastructure monitoring.\n\nCollects and tracks performance metrics including response times,\nerror rates, cache performance, and resource usage.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "HealthMetric": {
        "methods": [],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 26
  },
  "src\\utils\\config_management\\config_scanner.py": {
    "language": ".py",
    "functions": [
      "scan_file",
      "get_pattern_types",
      "get_pattern_types",
      "scan_file",
      "get_pattern_types",
      "scan_file",
      "get_pattern_types",
      "scan_file",
      "get_pattern_types",
      "scan_file",
      "__init__",
      "get_scanner",
      "get_all_scanners",
      "scan_file",
      "get_pattern_summary"
    ],
    "classes": {
      "ConfigPattern": {
        "methods": [],
        "docstring": "Represents a configuration pattern found in code.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ConfigurationScanner": {
        "methods": [
          "scan_file",
          "get_pattern_types"
        ],
        "docstring": "Abstract base class for configuration scanners.",
        "base_classes": [
          "ABC"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "EnvironmentVariableScanner": {
        "methods": [
          "get_pattern_types",
          "scan_file"
        ],
        "docstring": "Scans for environment variable usage patterns.",
        "base_classes": [
          "ConfigurationScanner"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "JSONConfigScanner": {
        "methods": [
          "get_pattern_types",
          "scan_file"
        ],
        "docstring": "Scans for JSON configuration patterns.",
        "base_classes": [
          "ConfigurationScanner"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "YAMLConfigScanner": {
        "methods": [
          "get_pattern_types",
          "scan_file"
        ],
        "docstring": "Scans for YAML configuration patterns.",
        "base_classes": [
          "ConfigurationScanner"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ConfigFileScanner": {
        "methods": [
          "get_pattern_types",
          "scan_file"
        ],
        "docstring": "Scans for configuration file patterns.",
        "base_classes": [
          "ConfigurationScanner"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ConfigurationScannerRegistry": {
        "methods": [
          "__init__",
          "get_scanner",
          "get_all_scanners",
          "scan_file",
          "get_pattern_summary"
        ],
        "docstring": "Registry for configuration scanners.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 30
  },
  "src\\utils\\config_management\\config_consolidator.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "consolidate_patterns",
      "_group_patterns",
      "_consolidate_pattern_group",
      "_merge_metadata",
      "_generate_consolidation_suggestions",
      "get_consolidated_config",
      "get_config_summary",
      "export_consolidated_config",
      "add_consolidation_rule",
      "apply_custom_rules"
    ],
    "classes": {
      "ConfigConsolidationResult": {
        "methods": [],
        "docstring": "Result of configuration consolidation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ConfigurationConsolidator": {
        "methods": [
          "__init__",
          "consolidate_patterns",
          "_group_patterns",
          "_consolidate_pattern_group",
          "_merge_metadata",
          "_generate_consolidation_suggestions",
          "get_consolidated_config",
          "get_config_summary",
          "export_consolidated_config",
          "add_consolidation_rule",
          "apply_custom_rules"
        ],
        "docstring": "Consolidates configuration patterns and provides unified management.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 22
  },
  "src\\utils\\file_operations\\file_backup.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "create_backup",
      "_backup_file",
      "_backup_directory_full",
      "_backup_directory_incremental",
      "_count_backup_contents",
      "restore_backup",
      "list_backups",
      "delete_backup",
      "cleanup_old_backups",
      "verify_backup",
      "get_backup_info",
      "get_backup_history",
      "clear_backup_history"
    ],
    "classes": {
      "BackupResult": {
        "methods": [],
        "docstring": "Result of backup operation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ScanResult": {
        "methods": [],
        "docstring": "Result of file scanning operation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "FileBackupOperations": {
        "methods": [
          "__init__",
          "create_backup",
          "_backup_file",
          "_backup_directory_full",
          "_backup_directory_incremental",
          "_count_backup_contents",
          "restore_backup",
          "list_backups",
          "delete_backup",
          "cleanup_old_backups",
          "verify_backup",
          "get_backup_info",
          "get_backup_history",
          "clear_backup_history"
        ],
        "docstring": "Handles file backup and restore operations.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 28
  },
  "src\\utils\\file_operations\\file_metadata.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "get_file_info",
      "_calculate_file_hash",
      "_detect_mime_type",
      "_detect_encoding",
      "get_directory_info",
      "compare_files",
      "find_duplicate_files",
      "get_file_statistics",
      "cache_file_info",
      "get_cached_file_info",
      "clear_cache"
    ],
    "classes": {
      "FileInfo": {
        "methods": [],
        "docstring": "Comprehensive file information.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "DirectoryInfo": {
        "methods": [],
        "docstring": "Directory information with statistics.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "FileMetadataOperations": {
        "methods": [
          "__init__",
          "get_file_info",
          "_calculate_file_hash",
          "_detect_mime_type",
          "_detect_encoding",
          "get_directory_info",
          "compare_files",
          "find_duplicate_files",
          "get_file_statistics",
          "cache_file_info",
          "get_cached_file_info",
          "clear_cache"
        ],
        "docstring": "Handles file metadata operations and analysis.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 24
  },
  "src\\utils\\config_management\\config_validator.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "validate_patterns",
      "_validate_pattern_type",
      "_validate_environment_patterns",
      "_validate_json_patterns",
      "_validate_yaml_patterns",
      "_validate_config_file_patterns",
      "set_required_env_vars",
      "set_optional_env_vars",
      "add_config_rule",
      "validate_custom_rules",
      "generate_validation_report"
    ],
    "classes": {
      "ConfigValidationResult": {
        "methods": [],
        "docstring": "Result of configuration validation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ConfigurationValidator": {
        "methods": [
          "__init__",
          "validate_patterns",
          "_validate_pattern_type",
          "_validate_environment_patterns",
          "_validate_json_patterns",
          "_validate_yaml_patterns",
          "_validate_config_file_patterns",
          "set_required_env_vars",
          "set_optional_env_vars",
          "add_config_rule",
          "validate_custom_rules",
          "generate_validation_report"
        ],
        "docstring": "Validates configuration patterns and settings.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 24
  },
  "src\\utils\\file_operations\\__init__.py": {
    "language": ".py",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "src\\utils\\config_management\\__init__.py": {
    "language": ".py",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "src\\integration\\unified_onboarding_demo.py": {
    "language": ".py",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "src\\onboarding\\onboarding_bridge\\__init__.py": {
    "language": ".py",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "src\\coordination\\coordination_factory.py": {
    "language": ".py",
    "functions": [
      "main",
      "__init__",
      "create_coordination_service",
      "create_onboarding_coordinator",
      "create_agent_instructions",
      "create_integrated_system",
      "__init__",
      "onboard_all_agents",
      "start_enhanced_cycles",
      "_start_agent_cycle",
      "get_contract_status",
      "get_system_status",
      "get_agent_statistics",
      "cleanup_expired_contracts",
      "reset_agent_state",
      "validate_system",
      "run"
    ],
    "classes": {
      "CoordinationFactory": {
        "methods": [
          "__init__",
          "create_coordination_service",
          "create_onboarding_coordinator",
          "create_agent_instructions",
          "create_integrated_system"
        ],
        "docstring": "Factory for creating coordination system components.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "IntegratedOnboardingCoordinationSystem": {
        "methods": [
          "__init__",
          "onboard_all_agents",
          "start_enhanced_cycles",
          "_start_agent_cycle",
          "get_contract_status",
          "get_system_status",
          "get_agent_statistics",
          "cleanup_expired_contracts",
          "reset_agent_state",
          "validate_system",
          "run"
        ],
        "docstring": "Main integrated system orchestrator.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "ActionAgent"
      }
    },
    "routes": [],
    "complexity": 33
  },
  "src\\utils\\file_operations\\file_serialization.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "save_json",
      "load_json",
      "save_yaml",
      "load_yaml",
      "save_text",
      "load_text",
      "save_binary",
      "load_binary",
      "append_text",
      "append_json",
      "load_json_lines",
      "save_json_lines",
      "validate_json",
      "validate_yaml",
      "convert_json_to_yaml",
      "convert_yaml_to_json",
      "get_file_encoding",
      "set_default_encoding",
      "set_json_indent",
      "set_yaml_flow_style"
    ],
    "classes": {
      "FileSerializationOperations": {
        "methods": [
          "__init__",
          "save_json",
          "load_json",
          "save_yaml",
          "load_yaml",
          "save_text",
          "load_text",
          "save_binary",
          "load_binary",
          "append_text",
          "append_json",
          "load_json_lines",
          "save_json_lines",
          "validate_json",
          "validate_yaml",
          "convert_json_to_yaml",
          "convert_yaml_to_json",
          "get_file_encoding",
          "set_default_encoding",
          "set_json_indent",
          "set_yaml_flow_style"
        ],
        "docstring": "Handles file serialization and deserialization operations.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 42
  },
  "src\\onboarding\\__init__.py": {
    "language": ".py",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "src\\coordination\\agent_instructions.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "get_agent_instructions",
      "_get_agent1_instructions",
      "_get_agent2_instructions",
      "_get_agent3_instructions",
      "_get_agent4_instructions",
      "_get_agent5_instructions",
      "_get_agent6_instructions",
      "_get_agent7_instructions",
      "_get_agent8_instructions",
      "_get_generic_instructions"
    ],
    "classes": {
      "AgentInstructions": {
        "methods": [
          "__init__",
          "get_agent_instructions",
          "_get_agent1_instructions",
          "_get_agent2_instructions",
          "_get_agent3_instructions",
          "_get_agent4_instructions",
          "_get_agent5_instructions",
          "_get_agent6_instructions",
          "_get_agent7_instructions",
          "_get_agent8_instructions",
          "_get_generic_instructions"
        ],
        "docstring": "Handles agent-specific instructions and prompts.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 22
  },
  "src\\coordination\\cycle_coordinator.py": {
    "language": ".py",
    "functions": [
      "main",
      "__init__",
      "get_agent_specific_prompt",
      "_get_role_focus",
      "start_cycles",
      "resume_agent_cycle",
      "get_contract_status",
      "run_cli"
    ],
    "classes": {
      "CycleCoordinator": {
        "methods": [
          "__init__",
          "get_agent_specific_prompt",
          "_get_role_focus",
          "start_cycles",
          "resume_agent_cycle",
          "get_contract_status",
          "run_cli"
        ],
        "docstring": "Main cycle coordination system.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 15
  },
  "src\\coordination\\onboarding_coordinator.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "to_dict",
      "__init__",
      "perform_agent_onboarding",
      "create_onboarding_contract",
      "create_onboarding_message",
      "_get_role_onboarding_guidance",
      "onboard_all_agents",
      "get_agent_specific_prompt",
      "_get_agent1_instructions",
      "_get_agent2_instructions",
      "_get_agent3_instructions",
      "_get_agent4_instructions",
      "_get_agent5_instructions",
      "_get_agent6_instructions",
      "_get_agent7_instructions",
      "_get_agent8_instructions"
    ],
    "classes": {
      "AgentState": {
        "methods": [],
        "docstring": "Finite State Machine states for agents.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ContractType": {
        "methods": [],
        "docstring": "Types of contracts agents can enter.",
        "base_classes": [
          "Enum"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "AgentContract": {
        "methods": [
          "__init__",
          "to_dict"
        ],
        "docstring": "Contract system for agent task commitments.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "OnboardingCoordinator": {
        "methods": [
          "__init__",
          "perform_agent_onboarding",
          "create_onboarding_contract",
          "create_onboarding_message",
          "_get_role_onboarding_guidance",
          "onboard_all_agents",
          "get_agent_specific_prompt",
          "_get_agent1_instructions",
          "_get_agent2_instructions",
          "_get_agent3_instructions",
          "_get_agent4_instructions",
          "_get_agent5_instructions",
          "_get_agent6_instructions",
          "_get_agent7_instructions",
          "_get_agent8_instructions"
        ],
        "docstring": "Coordinates agent onboarding process.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 34
  },
  "src\\coordination\\coordination_service.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "transition_to",
      "get_state_info",
      "__init__",
      "load_persistent_state",
      "save_persistent_state",
      "load_coordinates",
      "get_chat_coordinates",
      "get_onboarding_coordinates",
      "create_contract",
      "get_contract",
      "update_contract_status",
      "get_agent_fsm",
      "transition_agent_state",
      "get_agent_state",
      "get_all_agent_states",
      "get_contract_status",
      "is_agent_onboarded",
      "get_onboarded_agents",
      "get_agent_coordinates_summary",
      "validate_coordinates",
      "get_system_status",
      "cleanup_expired_contracts",
      "reset_agent_state",
      "get_agent_statistics"
    ],
    "classes": {
      "AgentFSM": {
        "methods": [
          "__init__",
          "transition_to",
          "get_state_info"
        ],
        "docstring": "Finite State Machine for agent state management.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "CoordinationService": {
        "methods": [
          "__init__",
          "load_persistent_state",
          "save_persistent_state",
          "load_coordinates",
          "get_chat_coordinates",
          "get_onboarding_coordinates",
          "create_contract",
          "get_contract",
          "update_contract_status",
          "get_agent_fsm",
          "transition_agent_state",
          "get_agent_state",
          "get_all_agent_states",
          "get_contract_status",
          "is_agent_onboarded",
          "get_onboarded_agents",
          "get_agent_coordinates_summary",
          "validate_coordinates",
          "get_system_status",
          "cleanup_expired_contracts",
          "reset_agent_state",
          "get_agent_statistics"
        ],
        "docstring": "Service for coordination and state management.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 50
  },
  "tools\\triple_check_protocols.py": {
    "language": ".py",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "src\\coordination\\__init__.py": {
    "language": ".py",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "tools\\duplication_analyzer.py": {
    "language": ".py",
    "functions": [
      "main",
      "__init__",
      "scan_codebase",
      "_should_include_file",
      "_get_function_hash",
      "_get_class_hash",
      "_get_node_content",
      "_clean_code_content",
      "analyze_duplicates",
      "_categorize_function_duplicates",
      "_categorize_class_duplicates",
      "_get_file_domain",
      "_are_contents_identical",
      "_are_contents_similar",
      "_calculate_similarity",
      "_generate_consolidation_plan",
      "_choose_target_file",
      "generate_report"
    ],
    "classes": {
      "DuplicationAnalyzer": {
        "methods": [
          "__init__",
          "scan_codebase",
          "_should_include_file",
          "_get_function_hash",
          "_get_class_hash",
          "_get_node_content",
          "_clean_code_content",
          "analyze_duplicates",
          "_categorize_function_duplicates",
          "_categorize_class_duplicates",
          "_get_file_domain",
          "_are_contents_identical",
          "_are_contents_similar",
          "_calculate_similarity",
          "_generate_consolidation_plan",
          "_choose_target_file",
          "generate_report"
        ],
        "docstring": "Advanced duplication detection and analysis system.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 35
  },
  "tools\\data_log_manager.py": {
    "language": ".py",
    "functions": [
      "main",
      "__init__",
      "optimize_data_structure",
      "_organize_data_directory",
      "_optimize_logs",
      "_rotate_log_file",
      "_optimize_databases",
      "_cleanup_temp_files",
      "generate_optimization_report",
      "print_optimization_summary"
    ],
    "classes": {
      "DataLogManager": {
        "methods": [
          "__init__",
          "optimize_data_structure",
          "_organize_data_directory",
          "_optimize_logs",
          "_rotate_log_file",
          "_optimize_databases",
          "_cleanup_temp_files",
          "generate_optimization_report",
          "print_optimization_summary"
        ],
        "docstring": "Manages data and log optimization.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 19
  },
  "tools\\functionality_verification.py": {
    "language": ".py",
    "functions": [
      "main"
    ],
    "classes": {},
    "routes": [],
    "complexity": 1
  },
  "tools\\double_check_protocols.py": {
    "language": ".py",
    "functions": [],
    "classes": {},
    "routes": [],
    "complexity": 0
  },
  "tools\\messaging_performance_cli.py": {
    "language": ".py",
    "functions": [
      "get_messaging_performance_monitor",
      "main",
      "start_monitoring",
      "stop_monitoring",
      "get_current_metrics",
      "__init__",
      "start_monitoring",
      "_run_monitoring",
      "stop_monitoring",
      "show_current_metrics",
      "show_performance_summary",
      "show_bottleneck_analysis",
      "generate_optimization_report",
      "start_dashboard",
      "stop_dashboard",
      "update_thresholds",
      "record_test_metrics"
    ],
    "classes": {
      "MockPerformanceMonitor": {
        "methods": [
          "start_monitoring",
          "stop_monitoring",
          "get_current_metrics"
        ],
        "docstring": null,
        "base_classes": [],
        "maturity": "Prototype",
        "agent_type": "Utility"
      },
      "MessagingPerformanceCLI": {
        "methods": [
          "__init__",
          "start_monitoring",
          "_run_monitoring",
          "stop_monitoring",
          "show_current_metrics",
          "show_performance_summary",
          "show_bottleneck_analysis",
          "generate_optimization_report",
          "start_dashboard",
          "stop_dashboard",
          "update_thresholds",
          "record_test_metrics"
        ],
        "docstring": "Command-line interface for messaging performance monitoring.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 32
  },
  "tools\\audit_cleanup.py": {
    "language": ".py",
    "functions": [
      "main"
    ],
    "classes": {},
    "routes": [],
    "complexity": 1
  },
  "tools\\run_project_scan.py": {
    "language": ".py",
    "functions": [
      "run"
    ],
    "classes": {},
    "routes": [],
    "complexity": 1
  },
  "tools\\analysis_cli.py": {
    "language": ".py",
    "functions": [
      "should_exclude_file",
      "count_lines",
      "analyze_file",
      "main",
      "print_violations_report",
      "print_summary_report",
      "run_ci_gate"
    ],
    "classes": {},
    "routes": [],
    "complexity": 7
  },
  "tools\\captain_snapshot.py": {
    "language": ".py",
    "functions": [
      "load_agents_index",
      "calculate_staleness",
      "calculate_staleness_fixed",
      "get_status_priority",
      "format_agent_row",
      "main"
    ],
    "classes": {},
    "routes": [],
    "complexity": 6
  },
  "tools\\config_backup_automation.py": {
    "language": ".py",
    "functions": [
      "main",
      "__init__",
      "create_backup",
      "_find_config_files",
      "_create_backup_manifest",
      "restore_backup",
      "list_backups"
    ],
    "classes": {
      "ConfigurationBackupManager": {
        "methods": [
          "__init__",
          "create_backup",
          "_find_config_files",
          "_create_backup_manifest",
          "restore_backup",
          "list_backups"
        ],
        "docstring": "Manages configuration file backups with timestamping and validation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 13
  },
  "tools\\config_validation_pipeline.py": {
    "language": ".py",
    "functions": [
      "main",
      "__init__",
      "validate_all_configs",
      "_find_config_files",
      "_validate_file",
      "_validate_yaml_file",
      "_validate_json_file",
      "_validate_config_structure",
      "_validate_unified_config",
      "_validate_coordinates_config",
      "_validate_messaging_config",
      "_validate_discord_config",
      "validate_against_schema",
      "generate_validation_report"
    ],
    "classes": {
      "ValidationResult": {
        "methods": [],
        "docstring": "Result of configuration validation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      },
      "ConfigurationValidator": {
        "methods": [
          "__init__",
          "validate_all_configs",
          "_find_config_files",
          "_validate_file",
          "_validate_yaml_file",
          "_validate_json_file",
          "_validate_config_structure",
          "_validate_unified_config",
          "_validate_coordinates_config",
          "_validate_messaging_config",
          "_validate_discord_config",
          "validate_against_schema",
          "generate_validation_report"
        ],
        "docstring": "Validates configuration files and schemas.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 27
  },
  "tools\\codemods\\replace_prints_with_logger.py": {
    "language": ".py",
    "functions": [
      "should_skip_file",
      "transform_file",
      "main",
      "visit_Call"
    ],
    "classes": {
      "PrintTransformer": {
        "methods": [
          "visit_Call"
        ],
        "docstring": null,
        "base_classes": [
          "ast.NodeTransformer"
        ],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 5
  },
  "tools\\loc_remediation\\loc_analyzer.py": {
    "language": ".py",
    "functions": [
      "main",
      "__init__",
      "analyze_project",
      "_generate_summary",
      "generate_reports",
      "print_summary"
    ],
    "classes": {
      "LOCAnalyzer": {
        "methods": [
          "__init__",
          "analyze_project",
          "_generate_summary",
          "generate_reports",
          "print_summary"
        ],
        "docstring": "Main coordinator for LOC analysis and remediation.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 11
  },
  "tools\\check_protocols\\protocol_reporter.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "generate_detailed_report",
      "_generate_execution_summary",
      "_analyze_layers",
      "_analyze_benchmark",
      "_generate_recommendations",
      "save_report",
      "print_detailed_summary"
    ],
    "classes": {
      "ProtocolReporter": {
        "methods": [
          "__init__",
          "generate_detailed_report",
          "_generate_execution_summary",
          "_analyze_layers",
          "_analyze_benchmark",
          "_generate_recommendations",
          "save_report",
          "print_detailed_summary"
        ],
        "docstring": "Generates reports for protocol execution results.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 16
  },
  "tools\\check_protocols\\protocol_validator.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "_calculate_overall_score",
      "_compare_to_benchmark"
    ],
    "classes": {
      "ProtocolValidator": {
        "methods": [
          "__init__",
          "_calculate_overall_score",
          "_compare_to_benchmark"
        ],
        "docstring": "Validates web interface consolidation protocols.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 6
  },
  "tools\\verification\\verification_reporter.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "generate_verification_report",
      "_generate_verification_summary",
      "_analyze_changes",
      "_analyze_preservation",
      "_get_preservation_grade",
      "_get_preservation_status",
      "_get_risk_level",
      "save_report",
      "print_verification_summary"
    ],
    "classes": {
      "VerificationReporter": {
        "methods": [
          "__init__",
          "generate_verification_report",
          "_generate_verification_summary",
          "_analyze_changes",
          "_analyze_preservation",
          "_get_preservation_grade",
          "_get_preservation_status",
          "_get_risk_level",
          "save_report",
          "print_verification_summary"
        ],
        "docstring": "Generates reports for functionality verification.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 20
  },
  "tools\\check_protocols\\protocol_coordinator.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "save_results",
      "print_summary"
    ],
    "classes": {
      "ProtocolCoordinator": {
        "methods": [
          "__init__",
          "save_results",
          "print_summary"
        ],
        "docstring": "Coordinates execution of check protocols.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 6
  },
  "tools\\audit\\audit_reporter.py": {
    "language": ".py",
    "functions": [
      "__init__",
      "generate_audit_report",
      "_generate_scan_summary",
      "_generate_analysis_summary",
      "save_json_report",
      "save_markdown_report",
      "_generate_markdown_content",
      "_format_size",
      "print_audit_summary"
    ],
    "classes": {
      "AuditReporter": {
        "methods": [
          "__init__",
          "generate_audit_report",
          "_generate_scan_summary",
          "_generate_analysis_summary",
          "save_json_report",
          "save_markdown_report",
          "_generate_markdown_content",
          "_format_size",
          "print_audit_summary"
        ],
        "docstring": "Generates reports for audit results.",
        "base_classes": [],
        "maturity": "Core Asset",
        "agent_type": "Utility"
      }
    },
    "routes": [],
    "complexity": 18
  }
}