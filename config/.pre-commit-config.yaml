# ðŸ§ª PRE-COMMIT CONFIGURATION - AGENT_CELLPHONE_V2
# Foundation & Testing Specialist - TDD Integration Project
# Version: 1.0
# Status: ACTIVE

# Pre-commit configuration for enforcing V2 coding standards
# This ensures all code meets quality requirements before commits

repos:
  # Python code formatting and quality
  - repo: https://github.com/psf/black
    rev: 23.7.0
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=88, --target-version=py39]
        description: "Format Python code with Black"
  
  # Import sorting and organization
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88]
        description: "Sort and organize Python imports"
  
  # Code quality and style enforcement
  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        args: [
          --max-line-length=88,
          --extend-ignore=E203,W503,
          --max-complexity=10,
          --max-loc=300,
          --select=E,W,F,C90
        ]
        description: "Check Python code style and quality"
  
  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.5.0
    hooks:
      - id: mypy
        args: [--ignore-missing-imports, --no-strict-optional]
        additional_dependencies: [types-all]
        description: "Static type checking with MyPy"
  
  # Security vulnerability scanning
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, ., -f, json, -o, bandit-report.json]
        description: "Security vulnerability scanning"
  
  # Dependency vulnerability checking
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, ., -f, json, -o, bandit-report.json]
        description: "Security vulnerability scanning"
  
  # V2 Standards Compliance Checks
  - repo: local
    hooks:
      # Line count validation
      - id: v2-loc-check
        name: V2 LOC Compliance Check
        entry: python tests/v2_standards_checker.py --loc-check
        language: python
        types: [python]
        description: "Check V2 LOC compliance (â‰¤300 standard, â‰¤500 GUI)"
        pass_filenames: false
        
      # OOP design validation
      - id: v2-oop-check
        name: V2 OOP Design Check
        entry: python tests/v2_standards_checker.py --oop-check
        language: python
        types: [python]
        description: "Check V2 OOP design compliance"
        pass_filenames: false
        
      # CLI interface validation
      - id: v2-cli-check
        name: V2 CLI Interface Check
        entry: python tests/v2_standards_checker.py --cli-check
        language: python
        types: [python]
        description: "Check V2 CLI interface compliance"
        pass_filenames: false
        
      # Single responsibility validation
      - id: v2-srp-check
        name: V2 Single Responsibility Check
        entry: python tests/v2_standards_checker.py --srp-check
        language: python
        types: [python]
        description: "Check V2 single responsibility principle"
        pass_filenames: false
  
  # Test execution
  - repo: local
    hooks:
      # Run smoke tests before commit
      - id: smoke-tests
        name: Smoke Tests
        entry: python tests/run_tests.py --categories smoke --no-coverage
        language: python
        types: [python]
        description: "Run smoke tests to ensure basic functionality"
        pass_filenames: false
        always_run: true
        
      # Run V2 standards audit
      - id: v2-audit
        name: V2 Standards Audit
        entry: python tests/run_tests.py --audit-only
        language: python
        types: [python]
        description: "Run V2 coding standards audit"
        pass_filenames: false
        always_run: true
  
  # Documentation and metadata
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      # Check for merge conflicts
      - id: check-merge-conflict
        description: "Check for merge conflict markers"
      
      # Check for large files
      - id: check-added-large-files
        args: [--maxkb=1000]
        description: "Check for large files (>1MB)"
      
      # Check for debug statements
      - id: debug-statements
        description: "Check for debug statements (pdb, ipdb, etc.)"
      
      # Check for private key files
      - id: detect-private-key
        description: "Detect private key files"
      
      # Check for executable files
      - id: check-executables-have-shebangs
        description: "Check executable files have shebangs"
      
      # Check for trailing whitespace
      - id: trailing-whitespace
        description: "Remove trailing whitespace"
      
      # Check for end of file newline
      - id: end-of-file-fixer
        description: "Ensure files end with newline"
      
      # Check for YAML syntax
      - id: check-yaml
        description: "Check YAML syntax"
      
      # Check for JSON syntax
      - id: check-json
        description: "Check JSON syntax"
      
      # Check for XML syntax
      - id: check-xml
        description: "Check XML syntax"
      
      # Check for case conflicts
      - id: check-case-conflict
        description: "Check for case conflicts in filenames"
      
      # Check for symlinks
      - id: check-symlinks
        description: "Check for broken symlinks"
      
      # Check for merge conflict markers
      - id: check-merge-conflict
        description: "Check for merge conflict markers"
      
      # Check for TODO/FIXME comments
      - id: check-todo
        description: "Check for TODO/FIXME comments"
      
      # Check for no-commit markers
      - id: no-commit-to-branch
        args: [--branch, main, --branch, master]
        description: "Prevent commits to main/master branches"
  
  # Git hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      # Check commit message format
      - id: commit-msg
        description: "Check commit message format"
      
      # Check for suspicious patterns
      - id: check-ast
        description: "Check Python syntax"
      
      # Check for docstring first line
      - id: check-docstring-first
        description: "Check docstring first line"
      
      # Check for line endings
      - id: mixed-line-ending
        args: [--fix=lf]
        description: "Fix line endings to LF"
      
      # Check for file permissions
      - id: check-file-permissions
        description: "Check file permissions"
      
      # Check for byte order mark
      - id: check-byte-order-mark
        description: "Check for byte order mark"
      
      # Check for non-ASCII characters
      - id: check-merge-conflict
        description: "Check for merge conflict markers"
      
      # Check for case conflicts
      - id: check-case-conflict
        description: "Check for case conflicts in filenames"
      
      # Check for symlinks
      - id: check-symlinks
        description: "Check for broken symlinks"
      
      # Check for merge conflict markers
      - id: check-merge-conflict
        description: "Check for merge conflict markers"
      
      # Check for TODO/FIXME comments
      - id: check-todo
        description: "Check for TODO/FIXME comments"
      
      # Check for no-commit markers
      - id: no-commit-to-branch
        args: [--branch, main, --branch, master]
        description: "Prevent commits to main/master branches"

# Global configuration
default_language_version:
  python: python3

# Hook execution order
repos:
  - repo: local
    hooks:
      # First: Format and organize code
      - id: black
        stages: [commit]
        description: "Format Python code"
        
      - id: isort
        stages: [commit]
        description: "Sort imports"
      
      # Second: Quality checks
      - id: flake8
        stages: [commit]
        description: "Code quality"
        
      - id: mypy
        stages: [commit]
        description: "Type checking"
        
      - id: bandit
        stages: [commit]
        description: "Security scanning"
      
      # Third: V2 standards compliance
      - id: v2-loc-check
        stages: [commit]
        description: "LOC compliance"
        
      - id: v2-oop-check
        stages: [commit]
        description: "OOP design"
        
      - id: v2-cli-check
        stages: [commit]
        description: "CLI interface"
        
      - id: v2-srp-check
        stages: [commit]
        description: "Single responsibility"
      
      # Fourth: Testing and validation
      - id: smoke-tests
        stages: [commit]
        description: "Smoke tests"
        
      - id: v2-audit
        stages: [commit]
        description: "V2 standards audit"
      
      # Finally: Documentation and metadata
      - id: check-merge-conflict
        stages: [commit]
        description: "Merge conflicts"
        
      - id: check-added-large-files
        stages: [commit]
        description: "Large files"
        
      - id: debug-statements
        stages: [commit]
        description: "Debug statements"
        
      - id: detect-private-key
        stages: [commit]
        description: "Private keys"
        
      - id: check-executables-have-shebangs
        stages: [commit]
        description: "Executable shebangs"
        
      - id: trailing-whitespace
        stages: [commit]
        description: "Trailing whitespace"
        
      - id: end-of-file-fixer
        stages: [commit]
        description: "End of file"
        
      - id: check-yaml
        stages: [commit]
        description: "YAML syntax"
        
      - id: check-json
        stages: [commit]
        description: "JSON syntax"
        
      - id: check-xml
        stages: [commit]
        description: "XML syntax"
        
      - id: check-case-conflict
        stages: [commit]
        description: "Case conflicts"
        
      - id: check-symlinks
        stages: [commit]
        description: "Symlinks"
        
      - id: check-todo
        stages: [commit]
        description: "TODO comments"
        
      - id: no-commit-to-branch
        stages: [commit]
        description: "Branch protection"

# Hook failure handling
fail_fast: false
require_serial: false

# Hook timeout configuration
timeout: 300  # 5 minutes per hook

# Hook environment variables
env:
  PYTHONPATH: "src:tests"
  PYTHONUNBUFFERED: "1"
  PYTHONDONTWRITEBYTECODE: "1"
