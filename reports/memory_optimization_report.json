{
  "timestamp": "2025-10-03 00:26:04.697188",
  "project_root": ".",
  "total_fixes": 35,
  "fixes_by_type": {
    "thread_daemon": 25,
    "file_context_manager": 1,
    "sqlite_context_manager": 7,
    "deque_with_limit": 2
  },
  "detailed_fixes": [
    {
      "file": "src\\services\\vector_database\\complete_infrastructure_integration.py",
      "line": 120,
      "type": "thread_daemon",
      "description": "Add daemon=True to threads for automatic cleanup",
      "original": "threading.Thread(target=self._integration_loop, daemon=True, daemon=True, daemon=True, daemon=True, daemon=True)",
      "fixed": "threading.Thread(target=self._integration_loop, daemon=True, daemon=True, daemon=True, daemon=True, daemon=True, daemon=True)"
    },
    {
      "file": "src\\observability\\memory\\integrations\\messaging_checks.py",
      "line": 42,
      "type": "file_context_manager",
      "description": "Convert file operations to context managers",
      "original": "file_handle = open(self.file_path, self.mode, encoding=self.encoding)",
      "fixed": "with open(self.file_path, self.mode, encoding=self.encoding) as file_handle:"
    },
    {
      "file": "tools\\memory_optimizer.py",
      "line": 59,
      "type": "thread_daemon",
      "description": "Add daemon=True to threads for automatic cleanup",
      "original": "threading.Thread(\\1, daemon=True)",
      "fixed": "threading.Thread(\\1, daemon=True, daemon=True)"
    },
    {
      "file": "src\\services\\dashboard\\dashboard_web_core.py",
      "line": 185,
      "type": "thread_daemon",
      "description": "Add daemon=True to threads for automatic cleanup",
      "original": "threading.Thread(target=self.server.serve_forever, daemon=True, daemon=True)",
      "fixed": "threading.Thread(target=self.server.serve_forever, daemon=True, daemon=True, daemon=True)"
    },
    {
      "file": "src\\core\\memory_leak_remediation_system.py",
      "line": 51,
      "type": "sqlite_context_manager",
      "description": "Convert SQLite connections to context managers",
      "original": "conn = sqlite3.connect(db_path, timeout=5.0)",
      "fixed": "with sqlite3.connect(db_path, timeout=5.0) as conn:"
    },
    {
      "file": "src\\core\\memory_leak_remediation_system.py",
      "line": 97,
      "type": "thread_daemon",
      "description": "Add daemon=True to threads for automatic cleanup",
      "original": "threading.Thread(target=target, daemon=daemon, **kwargs)",
      "fixed": "threading.Thread(target=target, daemon=daemon, **kwargs, daemon=True)"
    },
    {
      "file": "src\\services\\vector_database\\vector_database_models.py",
      "line": 191,
      "type": "sqlite_context_manager",
      "description": "Convert SQLite connections to context managers",
      "original": "_connection = sqlite3.connect(str(self.db_path)",
      "fixed": "with sqlite3.connect(str(self.db_path) as _connection:"
    },
    {
      "file": "src\\services\\vector_database\\architecture_integration.py",
      "line": 61,
      "type": "thread_daemon",
      "description": "Add daemon=True to threads for automatic cleanup",
      "original": "threading.Thread(target=self._sync_loop, daemon=True, daemon=True, daemon=True)",
      "fixed": "threading.Thread(target=self._sync_loop, daemon=True, daemon=True, daemon=True, daemon=True)"
    },
    {
      "file": "src\\services\\vector_database\\complete_infrastructure_integration.py",
      "line": 120,
      "type": "thread_daemon",
      "description": "Add daemon=True to threads for automatic cleanup",
      "original": "threading.Thread(target=self._integration_loop, daemon=True, daemon=True, daemon=True, daemon=True, daemon=True, daemon=True)",
      "fixed": "threading.Thread(target=self._integration_loop, daemon=True, daemon=True, daemon=True, daemon=True, daemon=True, daemon=True, daemon=True)"
    },
    {
      "file": "src\\services\\multichat_session_persistence.py",
      "line": 105,
      "type": "sqlite_context_manager",
      "description": "Convert SQLite connections to context managers",
      "original": "conn = sqlite3.connect(str(self.db_file)",
      "fixed": "with sqlite3.connect(str(self.db_file) as conn:"
    },
    {
      "file": "src\\core\\resource_management\\thread_manager.py",
      "line": 37,
      "type": "thread_daemon",
      "description": "Add daemon=True to threads for automatic cleanup",
      "original": "threading.Thread(\n            target=target,\n            name=name,\n            daemon=daemon,\n            **kwargs\n        )",
      "fixed": "threading.Thread(\n            target=target,\n            name=name,\n            daemon=daemon,\n            **kwargs\n        , daemon=True)"
    },
    {
      "file": "src\\services\\consolidated_messaging_service_utils.py",
      "line": 307,
      "type": "thread_daemon",
      "description": "Add daemon=True to threads for automatic cleanup",
      "original": "threading.Thread(target=remove_from_recent, daemon=True)",
      "fixed": "threading.Thread(target=remove_from_recent, daemon=True, daemon=True)"
    },
    {
      "file": "src\\services\\vector_database\\record_time_migration.py",
      "line": 74,
      "type": "thread_daemon",
      "description": "Add daemon=True to threads for automatic cleanup",
      "original": "threading.Thread(target=self._migration_loop, daemon=True, daemon=True, daemon=True)",
      "fixed": "threading.Thread(target=self._migration_loop, daemon=True, daemon=True, daemon=True, daemon=True)"
    },
    {
      "file": "src\\services\\coordination_workflows\\task_assignment_workflow_engine.py",
      "line": 92,
      "type": "thread_daemon",
      "description": "Add daemon=True to threads for automatic cleanup",
      "original": "threading.Thread(\n                target=self._workflow_engine_loop,\n                daemon=True\n            )",
      "fixed": "threading.Thread(\n                target=self._workflow_engine_loop,\n                daemon=True\n            , daemon=True)"
    },
    {
      "file": "agent_workspaces\\database_specialist\\migration_core.py",
      "line": 41,
      "type": "sqlite_context_manager",
      "description": "Convert SQLite connections to context managers",
      "original": "connection = sqlite3.connect(str(self.db_path)",
      "fixed": "with sqlite3.connect(str(self.db_path) as connection:"
    },
    {
      "file": "src\\core\\resource_management\\sqlite_manager.py",
      "line": 48,
      "type": "sqlite_context_manager",
      "description": "Convert SQLite connections to context managers",
      "original": "conn = sqlite3.connect(\n                db_path,\n                timeout=timeout,\n                check_same_thread=check_same_thread\n            )",
      "fixed": "with sqlite3.connect(\n                db_path,\n                timeout=timeout,\n                check_same_thread=check_same_thread\n            ) as conn:"
    },
    {
      "file": "src\\services\\vector_database\\contracts\\contract_execution_core.py",
      "line": 54,
      "type": "thread_daemon",
      "description": "Add daemon=True to threads for automatic cleanup",
      "original": "threading.Thread(target=self._execution_loop, daemon=True, daemon=True, daemon=True)",
      "fixed": "threading.Thread(target=self._execution_loop, daemon=True, daemon=True, daemon=True, daemon=True)"
    },
    {
      "file": "swarm_brain\\db.py",
      "line": 34,
      "type": "sqlite_context_manager",
      "description": "Convert SQLite connections to context managers",
      "original": "conn = sqlite3.connect(self.path)",
      "fixed": "with sqlite3.connect(self.path) as conn:"
    },
    {
      "file": "src\\core\\task\\priority_scheduler.py",
      "line": 93,
      "type": "thread_daemon",
      "description": "Add daemon=True to threads for automatic cleanup",
      "original": "threading.Thread(\n                target=self._worker_loop, name=f\"PriorityWorker-{i}\", daemon=True\n            , daemon=True, daemon=True)",
      "fixed": "threading.Thread(\n                target=self._worker_loop, name=f\"PriorityWorker-{i}\", daemon=True\n            , daemon=True, daemon=True, daemon=True)"
    },
    {
      "file": "tools\\critical_memory_fixer.py",
      "line": 210,
      "type": "thread_daemon",
      "description": "Add daemon=True to threads for automatic cleanup",
      "original": "threading.Thread(\\1, daemon=True)",
      "fixed": "threading.Thread(\\1, daemon=True, daemon=True)"
    },
    {
      "file": "tools\\critical_memory_fixer.py",
      "line": 207,
      "type": "thread_daemon",
      "description": "Add daemon=True to threads for automatic cleanup",
      "original": "threading.Thread(\" in content and \"daemon=True\" not in content:\n                content = re.sub(\n                    r\"threading\\.Thread\\(([^)",
      "fixed": "threading.Thread(\" in content and \"daemon=True\" not in content:\n                content = re.sub(\n                    r\"threading\\.Thread\\(([^, daemon=True)"
    },
    {
      "file": "tools\\critical_memory_fixer.py",
      "line": 66,
      "type": "thread_daemon",
      "description": "Add daemon=True to threads for automatic cleanup",
      "original": "threading.Thread(\\1, daemon=True)",
      "fixed": "threading.Thread(\\1, daemon=True, daemon=True)"
    },
    {
      "file": "tools\\critical_memory_fixer.py",
      "line": 58,
      "type": "thread_daemon",
      "description": "Add daemon=True to threads for automatic cleanup",
      "original": "threading.Thread(\" in content and \"daemon=True\" not in content:\n                content = content.replace(\n                    \"threading.Thread(\",\n                    \"threading.Thread(\"\n                )",
      "fixed": "threading.Thread(\" in content and \"daemon=True\" not in content:\n                content = content.replace(\n                    \"threading.Thread(\",\n                    \"threading.Thread(\"\n                , daemon=True)"
    },
    {
      "file": "tools\\critical_memory_fixer.py",
      "line": 120,
      "type": "deque_with_limit",
      "description": "Add size limit to deques",
      "original": "collections.deque()",
      "fixed": "collections.deque(maxlen=1000)"
    },
    {
      "file": "tools\\critical_memory_fixer.py",
      "line": 118,
      "type": "deque_with_limit",
      "description": "Add size limit to deques",
      "original": "collections.deque()",
      "fixed": "collections.deque(maxlen=1000)"
    },
    {
      "file": "src\\services\\discord_commander\\performance_monitor.py",
      "line": 66,
      "type": "thread_daemon",
      "description": "Add daemon=True to threads for automatic cleanup",
      "original": "threading.Thread(target=monitor_loop, daemon=True, daemon=True, daemon=True)",
      "fixed": "threading.Thread(target=monitor_loop, daemon=True, daemon=True, daemon=True, daemon=True)"
    },
    {
      "file": "src\\services\\real_initiatives\\system_health_monitor.py",
      "line": 74,
      "type": "thread_daemon",
      "description": "Add daemon=True to threads for automatic cleanup",
      "original": "threading.Thread(\n            target=self._monitoring_loop,\n            args=(interval,)",
      "fixed": "threading.Thread(\n            target=self._monitoring_loop,\n            args=(interval,, daemon=True)"
    },
    {
      "file": "src\\services\\agent_devlog\\devlog_poster.py",
      "line": 119,
      "type": "thread_daemon",
      "description": "Add daemon=True to threads for automatic cleanup",
      "original": "threading.Thread(target=run_async)",
      "fixed": "threading.Thread(target=run_async, daemon=True)"
    },
    {
      "file": "src\\services\\discord_commander\\web_controller_v2.py",
      "line": 195,
      "type": "thread_daemon",
      "description": "Add daemon=True to threads for automatic cleanup",
      "original": "threading.Thread(target=self._run_server, daemon=True, daemon=True, daemon=True)",
      "fixed": "threading.Thread(target=self._run_server, daemon=True, daemon=True, daemon=True, daemon=True)"
    },
    {
      "file": "src\\observability\\memory\\watchdog.py",
      "line": 68,
      "type": "thread_daemon",
      "description": "Add daemon=True to threads for automatic cleanup",
      "original": "threading.Thread(\n                target=self._monitor_loop,\n                daemon=True\n            )",
      "fixed": "threading.Thread(\n                target=self._monitor_loop,\n                daemon=True\n            , daemon=True)"
    },
    {
      "file": "src\\services\\autonomous_style\\swarm_coordination_system.py",
      "line": 74,
      "type": "thread_daemon",
      "description": "Add daemon=True to threads for automatic cleanup",
      "original": "threading.Thread(\n            target=self._coordination_loop,\n            daemon=True\n        )",
      "fixed": "threading.Thread(\n            target=self._coordination_loop,\n            daemon=True\n        , daemon=True)"
    },
    {
      "file": "src\\core\\tracing\\performance_monitor.py",
      "line": 75,
      "type": "thread_daemon",
      "description": "Add daemon=True to threads for automatic cleanup",
      "original": "threading.Thread(target=self._monitor_loop, daemon=True, daemon=True, daemon=True)",
      "fixed": "threading.Thread(target=self._monitor_loop, daemon=True, daemon=True, daemon=True, daemon=True)"
    },
    {
      "file": "agent_workspaces\\database_specialist\\query_optimization_system.py",
      "line": 46,
      "type": "sqlite_context_manager",
      "description": "Convert SQLite connections to context managers",
      "original": "connection = sqlite3.connect(str(self.db_path)",
      "fixed": "with sqlite3.connect(str(self.db_path) as connection:"
    },
    {
      "file": "src\\services\\messaging\\memory_leak_fixes.py",
      "line": 215,
      "type": "thread_daemon",
      "description": "Add daemon=True to threads for automatic cleanup",
      "original": "threading.Thread(target=self._cleanup_loop, daemon=True)",
      "fixed": "threading.Thread(target=self._cleanup_loop, daemon=True, daemon=True)"
    },
    {
      "file": "src\\services\\system_efficiency\\system_efficiency_monitor.py",
      "line": 80,
      "type": "thread_daemon",
      "description": "Add daemon=True to threads for automatic cleanup",
      "original": "threading.Thread(\n            target=self._monitoring_loop,\n            daemon=True\n        )",
      "fixed": "threading.Thread(\n            target=self._monitoring_loop,\n            daemon=True\n        , daemon=True)"
    }
  ]
}
