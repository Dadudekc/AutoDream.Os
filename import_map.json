{
  "import_map": {
    "discord_commander": {
      "classes": [
        "DiscordCommander"
      ],
      "functions": [
        "setup_environment",
        "__init__",
        "get_status"
      ],
      "constants": []
    },
    "": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "enhanced_agent_onboarding": {
      "classes": [
        "ProjectContextLoader",
        "OnboardingContextBuilder",
        "EnhancedOnboardingService"
      ],
      "functions": [
        "main",
        "__init__",
        "get_system_health",
        "get_quality_status",
        "get_agent_statuses",
        "get_current_initiatives",
        "get_critical_files",
        "__init__",
        "build_onboarding_context",
        "create_context_summary",
        "save_context_package",
        "__init__",
        "onboard_agent",
        "_create_enhanced_onboarding_message",
        "_save_to_inbox"
      ],
      "constants": []
    },
    "V3_VALIDATION_TESTING_FRAMEWORK": {
      "classes": [
        "V3ValidationTestingFramework"
      ],
      "functions": [
        "main",
        "__init__",
        "run_full_validation"
      ],
      "constants": []
    },
    "add_sample_devlogs": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "check_agent5_inbox": {
      "classes": [
        "Agent5InboxChecker"
      ],
      "functions": [
        "main",
        "__init__",
        "check_inbox"
      ],
      "constants": []
    },
    "check_v2_compliance": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "final_demo": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "query_all_devlogs": {
      "classes": [],
      "functions": [
        "query_all_devlogs",
        "export_all_devlogs"
      ],
      "constants": []
    },
    "setup_discord_commander": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "comprehensive_devlog_upload": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "demo_captain_knowledge_queries": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "create_combined_export": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "delete_static_documentation": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "demonstrate_database_queries": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "demo_current_mission_status": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "demo_cycle_based_operations": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "demo_onboarding_knowledge": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "devlog_inventory": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "demonstrate_vector_integration": {
      "classes": [],
      "functions": [
        "demonstrate_intelligent_messaging",
        "demonstrate_intelligent_coordination",
        "demonstrate_vector_database_queries",
        "demonstrate_integration_benefits",
        "main"
      ],
      "constants": []
    },
    "discord_bot_config": {
      "classes": [
        "DiscordBotConfig"
      ],
      "functions": [
        "main",
        "__init__",
        "get_bot_token",
        "get_channel_id",
        "get_agent_channel_id",
        "is_configured",
        "get_config_status",
        "print_config_status"
      ],
      "constants": []
    },
    "github_agent_client_standalone": {
      "classes": [
        "GitHubAgentClient"
      ],
      "functions": [
        "main",
        "__init__",
        "test_connection",
        "get_repositories",
        "get_repository_info",
        "get_repository_contents",
        "get_file_content",
        "search_repositories",
        "get_user_info",
        "get_rate_limit"
      ],
      "constants": []
    },
    "discord_commander_fixed": {
      "classes": [
        "DiscordCommanderBot"
      ],
      "functions": [
        "__init__",
        "get_status"
      ],
      "constants": []
    },
    "get_real_tesla_price": {
      "classes": [],
      "functions": [
        "get_tesla_price_yahoo",
        "get_tesla_price_alpha_vantage",
        "get_tesla_price_finnhub",
        "get_real_tesla_price",
        "main"
      ],
      "constants": []
    },
    "ingest_all_onboarding_docs": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "discord_commander_modular": {
      "classes": [],
      "functions": [
        "setup_logging",
        "print_banner",
        "check_requirements",
        "main"
      ],
      "constants": []
    },
    "ingest_captain_docs": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "ingest_existing_documentation": {
      "classes": [],
      "functions": [
        "ingest_devlog_files",
        "ingest_protocol_documentation",
        "ingest_compliance_documentation",
        "ingest_security_documentation",
        "ingest_agent_guidelines",
        "demonstrate_database_queries",
        "main"
      ],
      "constants": []
    },
    "quality_gates": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "reduce_md_files": {
      "classes": [],
      "functions": [
        "create_backup",
        "phase1_frontend_cleanup",
        "phase2_agent_workspace_cleanup",
        "phase3_archive_cleanup",
        "phase4_test_cleanup",
        "phase5_tool_cleanup",
        "phase6_keep_essential",
        "verify_results",
        "main"
      ],
      "constants": []
    },
    "real_agent_coordination": {
      "classes": [
        "RealAgentCoordinator"
      ],
      "functions": [
        "main",
        "__init__",
        "send_real_message_to_agent",
        "coordinate_with_real_agents"
      ],
      "constants": []
    },
    "run_devlog_analytics_system": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "run_discord_commander": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "swarm_orchestrator": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "switch_agent_mode": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "temp_message_sender": {
      "classes": [],
      "functions": [
        "send_message_to_agent",
        "main"
      ],
      "constants": []
    },
    "V3_DIRECTIVES_DEPLOYMENT_SYSTEM": {
      "classes": [
        "V3DirectivesDeploymentSystem"
      ],
      "functions": [
        "main",
        "__init__",
        "_get_v3_directives",
        "_get_quality_guidelines",
        "deploy_to_agent",
        "deploy_to_team_alpha",
        "_create_deployment_summary",
        "validate_deployment"
      ],
      "constants": []
    },
    "V3_SECURITY_CLEANUP_FIXED": {
      "classes": [
        "V3SecurityCleanup"
      ],
      "functions": [
        "main",
        "__init__",
        "create_security_guidelines",
        "run_security_audit"
      ],
      "constants": []
    },
    "cleanup_stale_database_records": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "swarm_brain_integration_example": {
      "classes": [],
      "functions": [
        "example_project_scanner_integration",
        "example_discord_integration",
        "example_devlog_integration",
        "example_performance_integration",
        "example_decorator_usage",
        "example_query_usage",
        "example_cli_usage",
        "main",
        "fix_v2_compliance"
      ],
      "constants": []
    },
    "thea_selector_debugger": {
      "classes": [],
      "functions": [
        "debug_selectors"
      ],
      "constants": []
    },
    "simple_thea_debugger": {
      "classes": [],
      "functions": [
        "debug_selectors"
      ],
      "constants": []
    },
    "thea_manual_login": {
      "classes": [],
      "functions": [
        "manual_login_helper"
      ],
      "constants": []
    },
    "response_detector": {
      "classes": [
        "ResponseWaitResult",
        "ResponseDetector"
      ],
      "functions": [
        "create_response_detector",
        "wait_for_response",
        "extract_response",
        "__init__",
        "wait_until_complete",
        "extract_response_text",
        "_find_response_element",
        "_has_continue_button",
        "_click_continue_button",
        "_fallback_wait",
        "_fallback_extract"
      ],
      "constants": [
        "SELENIUM_AVAILABLE",
        "COMPLETE",
        "TIMEOUT",
        "CONTINUE_REQUIRED",
        "NO_TURN",
        "SELENIUM_AVAILABLE"
      ]
    },
    "quality_gates_core": {
      "classes": [
        "QualityLevel",
        "QualityMetrics",
        "QualityGateChecker"
      ],
      "functions": [
        "__init__",
        "check_file",
        "_analyze_file",
        "_is_enum",
        "_calculate_max_inheritance_depth",
        "_get_inheritance_depth",
        "_calculate_max_function_complexity",
        "_calculate_cyclomatic_complexity",
        "_calculate_max_parameter_count",
        "_count_abstract_classes",
        "_count_async_functions",
        "_check_violations",
        "_calculate_quality_score",
        "_determine_quality_level",
        "_create_error_metrics",
        "save_results",
        "print_results"
      ],
      "constants": [
        "EXCELLENT",
        "GOOD",
        "ACCEPTABLE",
        "POOR",
        "CRITICAL"
      ]
    },
    "captain_docs_core": {
      "classes": [
        "CaptainDocumentationCore"
      ],
      "functions": [
        "__init__",
        "ingest_captain_log",
        "_parse_log_sections",
        "ingest_captain_handbook",
        "ingest_captain_cheatsheet",
        "search_captain_docs",
        "get_captain_expertise"
      ],
      "constants": []
    },
    "captain_cycle_core": {
      "classes": [
        "CaptainCycleBasedCore"
      ],
      "functions": [
        "__init__",
        "create_cycle_based_handbook",
        "create_cycle_based_cheatsheet",
        "ingest_updated_documentation"
      ],
      "constants": []
    },
    "complete_onboarding_core": {
      "classes": [
        "CompleteOnboardingCore"
      ],
      "functions": [
        "__init__",
        "ingest_agent_definitions",
        "_create_agent_definitions",
        "ingest_onboarding_managers",
        "ingest_workflow_guides",
        "ingest_agent_protocols",
        "search_onboarding_docs",
        "get_onboarding_expertise"
      ],
      "constants": []
    },
    "discord_commander_fixed_backup": {
      "classes": [
        "DiscordCommanderBot"
      ],
      "functions": [
        "__init__",
        "setup_events",
        "setup_commands"
      ],
      "constants": [
        "DISCORD_AVAILABLE",
        "DISCORD_AVAILABLE"
      ]
    },
    "discord_commander_core": {
      "classes": [
        "DiscordCommanderCore"
      ],
      "functions": [
        "__init__",
        "create_discord_bot",
        "setup_additional_slash_commands",
        "get_bot_status"
      ],
      "constants": []
    },
    "discord_commander_setup_core": {
      "classes": [
        "DiscordCommanderSetupCore"
      ],
      "functions": [
        "__init__",
        "welcome_message",
        "get_user_input",
        "create_env_file",
        "validate_setup",
        "run_setup"
      ],
      "constants": []
    },
    "comprehensive_devlog_core": {
      "classes": [
        "ComprehensiveDevlogCore"
      ],
      "functions": [
        "__init__",
        "export_database_devlogs",
        "export_file_devlogs",
        "create_combined_export",
        "upload_to_external_service",
        "run_comprehensive_export"
      ],
      "constants": []
    },
    "analyze_large_files": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "cleanup_stale_database_core": {
      "classes": [
        "StaleDatabaseCleanupCore"
      ],
      "functions": [
        "__init__",
        "identify_stale_records",
        "clean_stale_records",
        "update_current_task_assignments",
        "validate_cleanup_results",
        "run_comprehensive_cleanup"
      ],
      "constants": []
    },
    "discord_commander_config": {
      "classes": [
        "DiscordCommanderConfig"
      ],
      "functions": [
        "__init__",
        "check_configuration",
        "get_bot_token",
        "get_channel_id",
        "is_configured",
        "get_config_status"
      ],
      "constants": []
    },
    "agent5_inbox_checker_core": {
      "classes": [
        "Agent5InboxCheckerCore"
      ],
      "functions": [
        "__init__",
        "check_inbox",
        "_process_team_chat_result"
      ],
      "constants": []
    },
    "captain_knowledge_demo_core": {
      "classes": [
        "CaptainKnowledgeCore"
      ],
      "functions": [
        "__init__",
        "demo_captain_queries",
        "demo_agent_coordination_patterns",
        "demo_captain_specific_knowledge",
        "demo_knowledge_integration",
        "demo_vector_database_stats",
        "_display_results",
        "_display_patterns"
      ],
      "constants": []
    },
    "v2_compliance_checker_core": {
      "classes": [
        "V2ComplianceChecker"
      ],
      "functions": [
        "__init__",
        "check_v2_compliance",
        "print_violations",
        "get_total_violations"
      ],
      "constants": []
    },
    "combined_export_core": {
      "classes": [
        "CombinedExportCore"
      ],
      "functions": [
        "__init__",
        "create_combined_export",
        "_get_database_devlogs",
        "_get_file_devlogs",
        "_update_summary",
        "_save_export",
        "_print_summary"
      ],
      "constants": []
    },
    "static_documentation_deleter_core": {
      "classes": [
        "StaticDocumentationDeleter"
      ],
      "functions": [
        "__init__",
        "create_backup",
        "delete_devlog_files",
        "delete_protocol_files",
        "delete_compliance_files",
        "delete_security_files",
        "delete_agent_guideline_files",
        "delete_coordination_files",
        "create_query_replacement_guide",
        "write_backup_file",
        "run_deletion_process"
      ],
      "constants": []
    },
    "database_query_demonstrator_core": {
      "classes": [
        "DatabaseQueryDemonstrator"
      ],
      "functions": [
        "__init__",
        "demonstrate_devlog_queries",
        "demonstrate_protocol_queries",
        "demonstrate_compliance_queries",
        "demonstrate_security_queries",
        "demonstrate_agent_expertise",
        "demonstrate_project_patterns",
        "demonstrate_semantic_search",
        "demonstrate_how_do_agents_do",
        "run_all_demonstrations"
      ],
      "constants": []
    },
    "mission_status_demonstrator_core": {
      "classes": [
        "MissionStatusDemonstrator"
      ],
      "functions": [
        "__init__",
        "demonstrate_current_mission_status",
        "_display_results",
        "_print_summary"
      ],
      "constants": []
    },
    "cycle_based_operations_demonstrator_core": {
      "classes": [
        "CycleBasedOperationsDemonstrator"
      ],
      "functions": [
        "__init__",
        "demonstrate_cycle_based_operations",
        "_display_results",
        "_print_summary"
      ],
      "constants": []
    },
    "onboarding_knowledge_demo_core": {
      "classes": [
        "OnboardingKnowledgeDemo"
      ],
      "functions": [
        "__init__",
        "query_agent_roles",
        "query_captain_onboarding",
        "query_workflow_system",
        "query_discord_commander",
        "query_agent_messaging",
        "run_demo"
      ],
      "constants": []
    },
    "devlog_inventory_core": {
      "classes": [
        "DevlogInventory"
      ],
      "functions": [
        "__init__",
        "show_database_devlogs",
        "show_file_devlogs",
        "show_exported_files",
        "show_available_actions",
        "run_inventory"
      ],
      "constants": []
    },
    "devlog_analytics_system_core": {
      "classes": [
        "Colors",
        "DevlogAnalyticsSystem"
      ],
      "functions": [
        "__init__",
        "print_header",
        "run_service",
        "check_requirements",
        "check_node_modules",
        "start_services",
        "print_system_info",
        "run",
        "_run"
      ],
      "constants": [
        "GREEN",
        "YELLOW",
        "RED",
        "BLUE",
        "ENDC",
        "BOLD"
      ]
    },
    "discord_commander_launcher_core": {
      "classes": [
        "DiscordCommanderLauncher"
      ],
      "functions": [
        "__init__",
        "validate_environment",
        "create_default_templates",
        "start_controller",
        "show_status",
        "run",
        "stop",
        "run_controller",
        "run_bot"
      ],
      "constants": [
        "BOT_AVAILABLE",
        "BOT_AVAILABLE"
      ]
    },
    "swarm_orchestrator_core": {
      "classes": [
        "SwarmOrchestrator"
      ],
      "functions": [
        "__init__",
        "show_help",
        "create_v2_robot",
        "execute_v2_robot",
        "list_workflows",
        "get_status",
        "show_detailed_help",
        "run_command"
      ],
      "constants": []
    },
    "agent_mode_switcher_core": {
      "classes": [
        "AgentModeSwitcher"
      ],
      "functions": [
        "__init__",
        "load_config",
        "save_config",
        "switch_mode",
        "show_status",
        "show_help"
      ],
      "constants": []
    },
    "discord_bot_config_core": {
      "classes": [
        "DiscordBotConfigCore"
      ],
      "functions": [
        "__init__",
        "_load_config",
        "get_bot_token",
        "get_channel_id",
        "get_agent_channel_id",
        "is_configured",
        "get_config_status",
        "print_config_status"
      ],
      "constants": []
    },
    "github_agent_client_core": {
      "classes": [
        "GitHubConfig",
        "GitHubRepository",
        "GitHubAgentClientCore"
      ],
      "functions": [
        "__init__",
        "_load_config",
        "test_connection",
        "get_repositories",
        "get_repository_info",
        "get_repository_contents",
        "get_file_content",
        "search_repositories",
        "get_user_info",
        "get_rate_limit"
      ],
      "constants": []
    },
    "real_agent_coordination_core": {
      "classes": [
        "RealAgentCoordinatorCore"
      ],
      "functions": [
        "__init__",
        "send_real_message_to_agent",
        "coordinate_with_real_agents"
      ],
      "constants": []
    },
    "temp_message_sender_core": {
      "classes": [],
      "functions": [
        "send_message_to_agent_core"
      ],
      "constants": []
    },
    "update_captain_cycle_core": {
      "classes": [
        "CaptainCycleCore"
      ],
      "functions": [
        "__init__",
        "create_handbook_content",
        "create_cheatsheet_content",
        "ingest_documentation"
      ],
      "constants": []
    },
    "quality_coordination_response": {
      "classes": [
        "QualityCoordinationProtocol"
      ],
      "functions": [
        "main",
        "__init__",
        "create_coordination_response",
        "create_quality_coordination_templates",
        "establish_quality_validation_procedures",
        "create_quality_metrics_tracking"
      ],
      "constants": []
    },
    "watchdog": {
      "classes": [
        "AgentStatus",
        "SystemHealth",
        "AgentHealthMonitor",
        "SystemHealthChecker",
        "WatchdogService"
      ],
      "functions": [
        "main",
        "__init__",
        "check_agent_status",
        "_calculate_health_score",
        "check_all_agents",
        "__init__",
        "check_system_health",
        "_generate_alerts",
        "__init__",
        "load_config",
        "_create_default_config",
        "run_health_check",
        "get_agent_report",
        "save_health_report"
      ],
      "constants": []
    },
    "report": {
      "classes": [
        "ReportConfig",
        "ReportGenerator",
        "ReportService"
      ],
      "functions": [
        "main",
        "__init__",
        "generate_json_report",
        "generate_markdown_report",
        "generate_html_report",
        "generate_report",
        "save_report",
        "__init__",
        "create_health_report",
        "create_agent_report",
        "create_full_report"
      ],
      "constants": []
    },
    "agent_workspaces.database_specialist.migration_executor": {
      "classes": [
        "MigrationExecutor"
      ],
      "functions": [
        "__init__",
        "execute_all_migrations",
        "_generate_execution_summary",
        "validate_migration_results"
      ],
      "constants": []
    },
    "agent_workspaces.database_specialist.scalability_strategies": {
      "classes": [
        "ScalabilityStrategies"
      ],
      "functions": [
        "__init__",
        "design_scaling_strategies",
        "implement_partitioning_strategies"
      ],
      "constants": []
    },
    "agent_workspaces.database_specialist.automated_migration_scripts": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "agent_workspaces.database_specialist.caching_strategy_system": {
      "classes": [],
      "functions": [
        "load_config",
        "main"
      ],
      "constants": []
    },
    "agent_workspaces.database_specialist.migration_core": {
      "classes": [
        "MigrationCore"
      ],
      "functions": [
        "__init__",
        "create_database_connection",
        "close_database_connection",
        "create_backup",
        "validate_database_integrity",
        "execute_migration_script",
        "get_migration_results"
      ],
      "constants": []
    },
    "agent_workspaces.database_specialist.migration_scripts": {
      "classes": [
        "MigrationScripts"
      ],
      "functions": [
        "__init__",
        "_define_migration_scripts",
        "get_migration_script",
        "get_all_migration_scripts",
        "create_performance_indexes_script",
        "create_useful_views_script",
        "get_migration_script_names"
      ],
      "constants": []
    },
    "agent_workspaces.database_specialist.query_optimization_system": {
      "classes": [
        "QueryOptimizationSystem"
      ],
      "functions": [
        "main",
        "__init__",
        "run_comprehensive_optimization",
        "_analyze_existing_queries",
        "_analyze_index_usage",
        "_identify_slow_queries",
        "_generate_optimization_recommendations",
        "_apply_optimizations",
        "_validate_performance_improvements",
        "_calculate_query_complexity",
        "_simulate_index_usage",
        "_suggest_query_rewrite",
        "_generate_optimization_summary"
      ],
      "constants": []
    },
    "agent_workspaces.database_specialist.scalability_core": {
      "classes": [
        "ScalingType",
        "PartitionStrategy",
        "ScalabilityMetrics",
        "ScalabilityCore"
      ],
      "functions": [
        "__init__",
        "analyze_current_capacity",
        "identify_scalability_bottlenecks",
        "_simulate_database_size",
        "generate_scalability_summary"
      ],
      "constants": [
        "HORIZONTAL",
        "VERTICAL",
        "HYBRID",
        "RANGE",
        "HASH",
        "LIST",
        "COMPOSITE"
      ]
    },
    "agent_workspaces.database_specialist.scalability_validation": {
      "classes": [
        "ScalabilityValidation"
      ],
      "functions": [
        "__init__",
        "design_load_balancing_mechanisms",
        "create_performance_distribution_plan",
        "validate_scalability_improvements"
      ],
      "constants": []
    },
    "agent_workspaces.database_specialist.v2_compliance_improvement_plan": {
      "classes": [
        "V2ComplianceImprovementPlan"
      ],
      "functions": [
        "main",
        "__init__",
        "_identify_compliance_issues",
        "_create_improvement_strategy",
        "generate_improvement_report"
      ],
      "constants": []
    },
    "agent_workspaces.database_specialist": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "agent_workspaces.database_specialist.caching": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "agent_workspaces.database_specialist.caching.core": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "agent_workspaces.database_specialist.caching.core.caching_system": {
      "classes": [
        "CachingStrategySystem"
      ],
      "functions": [
        "__init__",
        "_get_default_config",
        "_check_redis_availability",
        "implement_comprehensive_caching",
        "_initialize_cache_systems",
        "_validate_caching_effectiveness",
        "get_from_cache",
        "set_in_cache",
        "_evict_entries"
      ],
      "constants": []
    },
    "agent_workspaces.database_specialist.caching.models": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "agent_workspaces.database_specialist.caching.models.cache_models": {
      "classes": [
        "CacheStrategy",
        "CacheEntry"
      ],
      "functions": [],
      "constants": [
        "LRU",
        "LFU",
        "TTL",
        "WRITE_THROUGH",
        "WRITE_BACK"
      ]
    },
    "agent_workspaces.database_specialist.caching.monitoring": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "agent_workspaces.database_specialist.caching.monitoring.cache_monitor": {
      "classes": [
        "CacheMonitor"
      ],
      "functions": [
        "__init__",
        "implement_performance_monitoring",
        "_setup_metrics_collection",
        "_setup_performance_tracking",
        "_setup_health_checks",
        "_setup_alerting",
        "_setup_reporting",
        "get_cache_stats",
        "check_cache_health",
        "optimize_cache"
      ],
      "constants": []
    },
    "agent_workspaces.database_specialist.caching.strategies": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "agent_workspaces.database_specialist.caching.strategies.cache_strategies": {
      "classes": [
        "CacheStrategyManager"
      ],
      "functions": [
        "__init__",
        "implement_cache_patterns",
        "_implement_write_through",
        "_implement_write_back",
        "_implement_cache_aside",
        "_implement_read_through",
        "_implement_refresh_ahead",
        "setup_cache_invalidation",
        "_setup_time_based_invalidation",
        "_setup_event_based_invalidation",
        "_setup_dependency_based_invalidation",
        "_setup_manual_invalidation"
      ],
      "constants": []
    },
    "agent_workspaces.database_specialist.caching.tools": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "agent_workspaces.database_specialist.caching.tools.cache_tools": {
      "classes": [
        "CacheTools"
      ],
      "functions": [
        "__init__",
        "create_cache_management_tools",
        "_create_cache_analyzer",
        "_create_cache_optimizer",
        "_create_cache_backup",
        "_create_cache_restore",
        "_create_cache_cleaner",
        "backup_cache",
        "restore_cache",
        "_validate_backup_data",
        "clear_cache"
      ],
      "constants": []
    },
    "agent_workspaces.Agent-3.caching_strategy_system": {
      "classes": [],
      "functions": [
        "load_config",
        "main"
      ],
      "constants": []
    },
    "agent_workspaces.Agent-3": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "agent_workspaces.Agent-3.migration_core": {
      "classes": [
        "MigrationCore"
      ],
      "functions": [
        "__init__",
        "create_database_connection",
        "close_database_connection",
        "create_backup",
        "validate_database_integrity",
        "execute_migration_script",
        "get_migration_results"
      ],
      "constants": []
    },
    "agent_workspaces.Agent-3.migration_executor": {
      "classes": [
        "MigrationExecutor"
      ],
      "functions": [
        "__init__",
        "execute_all_migrations",
        "_generate_execution_summary",
        "validate_migration_results"
      ],
      "constants": []
    },
    "agent_workspaces.Agent-3.migration_scripts": {
      "classes": [
        "MigrationScripts"
      ],
      "functions": [
        "__init__",
        "_define_migration_scripts",
        "get_migration_script",
        "get_all_migration_scripts",
        "create_performance_indexes_script",
        "create_useful_views_script",
        "get_migration_script_names"
      ],
      "constants": []
    },
    "agent_workspaces.Agent-3.query_optimization_system": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "agent_workspaces.Agent-3.scalability_core": {
      "classes": [
        "ScalingType",
        "PartitionStrategy",
        "ScalabilityMetrics",
        "ScalabilityCore"
      ],
      "functions": [
        "__init__",
        "analyze_current_capacity",
        "identify_scalability_bottlenecks",
        "_simulate_database_size",
        "generate_scalability_summary"
      ],
      "constants": [
        "HORIZONTAL",
        "VERTICAL",
        "HYBRID",
        "RANGE",
        "HASH",
        "LIST",
        "COMPOSITE"
      ]
    },
    "agent_workspaces.Agent-3.scalability_strategies": {
      "classes": [
        "ScalabilityStrategies"
      ],
      "functions": [
        "__init__",
        "design_scaling_strategies",
        "implement_partitioning_strategies"
      ],
      "constants": []
    },
    "agent_workspaces.Agent-3.scalability_validation": {
      "classes": [
        "ScalabilityValidation"
      ],
      "functions": [
        "__init__",
        "design_load_balancing_mechanisms",
        "create_performance_distribution_plan",
        "validate_scalability_improvements"
      ],
      "constants": []
    },
    "agent_workspaces.Agent-3.v2_compliance_improvement_plan": {
      "classes": [
        "V2ComplianceImprovementPlan"
      ],
      "functions": [
        "main",
        "__init__",
        "_identify_compliance_issues",
        "_create_improvement_strategy",
        "generate_improvement_report"
      ],
      "constants": []
    },
    "agent_workspaces.Agent-3.automated_migration_scripts": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "agent_workspaces.Agent-3.query_optimization_core": {
      "classes": [
        "QueryOptimizationCore"
      ],
      "functions": [
        "__init__",
        "run_comprehensive_optimization",
        "_analyze_existing_queries",
        "_identify_slow_queries",
        "_generate_optimization_recommendations",
        "_apply_optimizations",
        "_validate_improvements"
      ],
      "constants": []
    },
    "agent_workspaces.Agent-3.caching": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "agent_workspaces.Agent-3.caching.core": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "agent_workspaces.Agent-3.caching.core.caching_system": {
      "classes": [
        "CachingStrategySystem"
      ],
      "functions": [
        "__init__",
        "_get_default_config",
        "_check_redis_availability",
        "implement_comprehensive_caching",
        "_initialize_cache_systems",
        "_validate_caching_effectiveness",
        "get_from_cache",
        "set_in_cache",
        "_evict_entries"
      ],
      "constants": []
    },
    "agent_workspaces.Agent-3.caching.models": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "agent_workspaces.Agent-3.caching.models.cache_models": {
      "classes": [
        "CacheStrategy",
        "CacheEntry"
      ],
      "functions": [],
      "constants": [
        "LRU",
        "LFU",
        "TTL",
        "WRITE_THROUGH",
        "WRITE_BACK"
      ]
    },
    "agent_workspaces.Agent-3.caching.monitoring": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "agent_workspaces.Agent-3.caching.monitoring.cache_monitor": {
      "classes": [
        "CacheMonitor"
      ],
      "functions": [
        "__init__",
        "implement_performance_monitoring",
        "_setup_metrics_collection",
        "_setup_performance_tracking",
        "_setup_health_checks",
        "_setup_alerting",
        "_setup_reporting",
        "get_cache_stats",
        "check_cache_health",
        "optimize_cache"
      ],
      "constants": []
    },
    "agent_workspaces.Agent-3.caching.strategies": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "agent_workspaces.Agent-3.caching.strategies.cache_strategies": {
      "classes": [
        "CacheStrategyManager"
      ],
      "functions": [
        "__init__",
        "implement_cache_patterns",
        "_implement_write_through",
        "_implement_write_back",
        "_implement_cache_aside",
        "_implement_read_through",
        "_implement_refresh_ahead",
        "setup_cache_invalidation",
        "_setup_time_based_invalidation",
        "_setup_event_based_invalidation",
        "_setup_dependency_based_invalidation",
        "_setup_manual_invalidation"
      ],
      "constants": []
    },
    "agent_workspaces.Agent-3.caching.tools": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "agent_workspaces.Agent-3.caching.tools.cache_tools": {
      "classes": [
        "CacheTools"
      ],
      "functions": [
        "__init__",
        "create_cache_management_tools",
        "_create_cache_analyzer",
        "_create_cache_optimizer",
        "_create_cache_backup",
        "_create_cache_restore",
        "_create_cache_cleaner",
        "backup_cache",
        "restore_cache",
        "_validate_backup_data",
        "clear_cache"
      ],
      "constants": []
    },
    "tools.agent_get_started": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "tools.agent_task_manager": {
      "classes": [
        "AgentTaskManager"
      ],
      "functions": [
        "main",
        "__init__",
        "list_tasks",
        "create_task",
        "assign_task",
        "complete_task",
        "get_task_status",
        "generate_report"
      ],
      "constants": []
    },
    "tools.analysis_cli": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "tools.post_major_update": {
      "classes": [
        "MajorUpdatePoster"
      ],
      "functions": [
        "__init__"
      ],
      "constants": []
    },
    "tools.projectscanner": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "tools.agent_autonomous_cycle": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "tools.agent_workflow_cli": {
      "classes": [],
      "functions": [
        "quick_fix_imports",
        "quick_test_and_report",
        "quick_create_component",
        "quick_deploy_feature",
        "main"
      ],
      "constants": []
    },
    "tools.captain_autonomous_interface": {
      "classes": [
        "CaptainAutonomousInterface"
      ],
      "functions": [
        "main",
        "__init__",
        "create_parser",
        "handle_detect_bottlenecks",
        "handle_detect_flaws",
        "handle_check_stopping",
        "handle_generate_priorities",
        "handle_agent_guidance",
        "handle_analyze",
        "run"
      ],
      "constants": []
    },
    "tools.directive_handlers": {
      "classes": [
        "CaptainDirectiveManager"
      ],
      "functions": [
        "setup_argument_parser",
        "main",
        "__init__",
        "get_directive_status",
        "get_initiative_status",
        "create_directive",
        "create_initiative",
        "update_directive_progress",
        "update_initiative_progress",
        "assign_agents_to_directive",
        "assign_agents_to_initiative"
      ],
      "constants": []
    },
    "tools.directive_models": {
      "classes": [
        "DirectiveType",
        "DirectiveStatus",
        "InitiativeStatus",
        "Directive",
        "Initiative"
      ],
      "functions": [
        "__init__",
        "__init__"
      ],
      "constants": [
        "STRATEGIC",
        "TACTICAL",
        "OPERATIONAL",
        "EMERGENCY",
        "PLANNING",
        "ACTIVE",
        "ON_HOLD",
        "COMPLETED",
        "CANCELLED",
        "CONCEPTION",
        "PLANNING",
        "EXECUTION",
        "MONITORING",
        "COMPLETED",
        "CANCELLED"
      ]
    },
    "tools.run_project_scan": {
      "classes": [],
      "functions": [
        "run"
      ],
      "constants": [
        "REPO_ROOT"
      ]
    },
    "tools.simple_workflow_automation": {
      "classes": [
        "SimpleWorkflowAutomation"
      ],
      "functions": [
        "main",
        "__init__",
        "assign_task",
        "forward_message",
        "request_status_check",
        "coordinate_project",
        "get_workflow_summary",
        "_create_task_notification",
        "_create_project_notification",
        "_log_workflow",
        "_count_workflow_types"
      ],
      "constants": []
    },
    "tools.workflow_cli": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "tools.performance_detective_cli": {
      "classes": [
        "PerformanceDetectiveCLI"
      ],
      "functions": [
        "main",
        "__init__",
        "setup_logging",
        "investigate_performance",
        "analyze_bottlenecks",
        "optimize_performance",
        "show_tools"
      ],
      "constants": []
    },
    "tools.security_inspector_cli": {
      "classes": [
        "SecurityInspectorCLI"
      ],
      "functions": [
        "main",
        "__init__",
        "setup_logging",
        "conduct_security_audit",
        "scan_vulnerabilities",
        "check_compliance",
        "show_tools"
      ],
      "constants": []
    },
    "tools.documentation_architect_cli": {
      "classes": [
        "DocumentationArchitectCLI"
      ],
      "functions": [
        "main",
        "__init__",
        "setup_logging",
        "generate_documentation",
        "build_knowledge_graph",
        "synchronize_docs",
        "show_tools"
      ],
      "constants": []
    },
    "tools.integration_explorer_cli": {
      "classes": [
        "IntegrationExplorerCLI"
      ],
      "functions": [
        "main",
        "__init__",
        "setup_logging",
        "explore_integrations",
        "map_dependencies",
        "discover_services",
        "show_tools"
      ],
      "constants": []
    },
    "tools.financial_analyst_cli": {
      "classes": [
        "FinancialAnalystCLI"
      ],
      "functions": [
        "main",
        "__init__",
        "setup_logging",
        "analyze_market",
        "generate_signals",
        "assess_volatility",
        "show_tools"
      ],
      "constants": []
    },
    "tools.trading_strategist_cli": {
      "classes": [
        "TradingStrategistCLI"
      ],
      "functions": [
        "main",
        "__init__",
        "setup_logging",
        "develop_strategy",
        "backtest_strategy",
        "optimize_strategy",
        "show_tools"
      ],
      "constants": []
    },
    "tools.risk_manager_cli": {
      "classes": [
        "RiskManagerCLI"
      ],
      "functions": [
        "main",
        "__init__",
        "setup_logging",
        "assess_portfolio_risk",
        "stress_test",
        "monitor_limits",
        "show_tools"
      ],
      "constants": []
    },
    "tools.market_researcher_cli": {
      "classes": [
        "MarketResearcherCLI"
      ],
      "functions": [
        "main",
        "__init__",
        "setup_logging",
        "research_market",
        "analyze_sentiment",
        "detect_regime",
        "show_tools"
      ],
      "constants": []
    },
    "tools.portfolio_optimizer_cli": {
      "classes": [
        "PortfolioOptimizerCLI"
      ],
      "functions": [
        "main",
        "__init__",
        "setup_logging",
        "optimize_portfolio",
        "rebalance_portfolio",
        "analyze_performance",
        "show_tools"
      ],
      "constants": []
    },
    "tools.compliance_auditor_cli": {
      "classes": [
        "ComplianceAuditorCLI"
      ],
      "functions": [
        "main",
        "__init__",
        "setup_logging",
        "audit_compliance",
        "monitor_transactions",
        "check_regulatory",
        "show_tools"
      ],
      "constants": []
    },
    "tools": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "tools.agent_swarm_scaffolder": {
      "classes": [],
      "functions": [
        "create_folder_structure",
        "create_files",
        "init_git_repo",
        "create_folder_structure",
        "create_files",
        "init_git_repo",
        "main"
      ],
      "constants": [
        "PROJECT_NAME",
        "AUTHOR",
        "INITIAL_COMMIT_MSG",
        "FOLDERS",
        "FILES"
      ]
    },
    "tools.agent_vector_search": {
      "classes": [],
      "functions": [
        "search_similar_messages",
        "search_agent_experience",
        "get_agent_knowledge_summary",
        "get_swarm_knowledge_summary",
        "print_search_results",
        "print_experience_results",
        "main"
      ],
      "constants": [
        "VECTOR_DB_AVAILABLE",
        "VECTOR_DB_AVAILABLE"
      ]
    },
    "tools.agent_workflow_automation": {
      "classes": [
        "AgentWorkflowAutomation"
      ],
      "functions": [
        "main",
        "__init__",
        "fix_missing_imports",
        "_create_init_file",
        "test_imports",
        "run_tests",
        "send_status_update",
        "create_devlog",
        "update_working_tasks",
        "check_v2_compliance",
        "create_project_structure",
        "run_workflow",
        "_workflow_fix_imports",
        "_workflow_test_and_report",
        "_workflow_create_component",
        "_workflow_deploy_feature"
      ],
      "constants": []
    },
    "tools.agent_workflow_manager": {
      "classes": [
        "WorkflowStep",
        "AgentWorkflowManager"
      ],
      "functions": [
        "main",
        "__init__",
        "to_dict",
        "from_dict",
        "__init__",
        "_load_workflow",
        "_initialize_steps",
        "_save_workflow",
        "get_ready_steps",
        "execute_step",
        "check_timeouts",
        "mark_step_completed",
        "mark_step_failed",
        "run_workflow",
        "get_status",
        "create_sample_workflow"
      ],
      "constants": []
    },
    "tools.api_gateway_cli": {
      "classes": [
        "APIGatewayCLI"
      ],
      "functions": [
        "main",
        "__init__",
        "start_server",
        "test_endpoint",
        "generate_docs",
        "show_health",
        "configure_rate_limiting",
        "configure_authentication",
        "_register_default_endpoints",
        "health_handler",
        "status_handler",
        "docs_handler"
      ],
      "constants": []
    },
    "tools.captain_autonomous_core": {
      "classes": [
        "CaptainAutonomousCore"
      ],
      "functions": [
        "__init__",
        "detect_bottlenecks",
        "detect_flaws",
        "check_stopping_conditions",
        "generate_autonomous_priorities",
        "provide_agent_guidance",
        "_check_resource_bottlenecks",
        "_check_dependency_bottlenecks",
        "_check_quality_bottlenecks",
        "_check_coordination_bottlenecks",
        "_check_critical_flaws",
        "_check_quality_flaws",
        "_check_performance_flaws",
        "_check_all_directives_complete",
        "_check_quality_threshold_breach",
        "_check_resource_exhaustion",
        "_check_critical_flaw_detected",
        "_check_agent_inactivity",
        "_check_system_failure",
        "_check_system_health",
        "_check_agent_utilization",
        "_get_agent_status",
        "_find_next_task_for_agent",
        "_get_agent_bottlenecks",
        "_get_agent_quality_issues"
      ],
      "constants": []
    },
    "tools.captain_autonomous_manager": {
      "classes": [
        "CaptainAutonomousManager"
      ],
      "functions": [
        "main",
        "__init__",
        "detect_bottlenecks",
        "detect_flaws",
        "check_stopping_conditions",
        "generate_autonomous_priorities",
        "provide_agent_guidance",
        "run_quality_gates",
        "check_system_resources",
        "check_v2_compliance"
      ],
      "constants": []
    },
    "tools.captain_autonomous_models": {
      "classes": [
        "BottleneckType",
        "FlawSeverity",
        "StoppingCondition",
        "Bottleneck",
        "Flaw"
      ],
      "functions": [
        "__init__",
        "__init__"
      ],
      "constants": [
        "RESOURCE",
        "DEPENDENCY",
        "QUALITY",
        "COORDINATION",
        "TECHNICAL",
        "CRITICAL",
        "HIGH",
        "MEDIUM",
        "LOW",
        "ALL_DIRECTIVES_COMPLETE",
        "QUALITY_THRESHOLD_BREACH",
        "RESOURCE_EXHAUSTION",
        "CRITICAL_FLAW_DETECTED",
        "AGENT_INACTIVITY",
        "SYSTEM_FAILURE"
      ]
    },
    "tools.captain_autonomous_storage": {
      "classes": [
        "CaptainAutonomousStorage"
      ],
      "functions": [
        "__init__",
        "load_bottlenecks",
        "load_flaws",
        "load_stopping_conditions",
        "save_bottlenecks",
        "save_flaws",
        "save_stopping_conditions"
      ],
      "constants": []
    },
    "tools.captain_autonomous_utility": {
      "classes": [
        "CaptainAutonomousUtility"
      ],
      "functions": [
        "validate_json_file",
        "backup_file",
        "get_file_size_mb",
        "check_file_age_hours",
        "run_quality_gates",
        "check_system_resources",
        "format_timestamp",
        "calculate_time_delta",
        "sanitize_filename",
        "create_directory_if_not_exists",
        "get_project_file_count",
        "check_v2_compliance",
        "check_resource_bottlenecks",
        "check_dependency_bottlenecks",
        "check_quality_bottlenecks",
        "check_coordination_bottlenecks",
        "check_critical_flaws",
        "check_quality_flaws",
        "check_performance_flaws",
        "check_all_directives_complete",
        "check_quality_threshold_breach",
        "check_resource_exhaustion",
        "check_critical_flaw_detected",
        "check_agent_inactivity",
        "check_system_failure",
        "check_system_health",
        "check_agent_utilization",
        "get_agent_status",
        "find_next_task_for_agent",
        "get_agent_bottlenecks",
        "get_agent_quality_issues"
      ],
      "constants": []
    },
    "tools.captain_cli": {
      "classes": [],
      "functions": [
        "show_agent_status",
        "show_inactive_agents",
        "send_high_priority_message",
        "onboard_agent",
        "generate_report",
        "main"
      ],
      "constants": []
    },
    "tools.captain_directive_manager": {
      "classes": [
        "DirectiveType",
        "DirectiveStatus",
        "InitiativeStatus",
        "Directive",
        "Initiative",
        "CaptainDirectiveManager"
      ],
      "functions": [
        "main",
        "__init__",
        "__init__",
        "__init__",
        "_load_directives",
        "_load_initiatives",
        "_save_directives",
        "_save_initiatives",
        "create_directive",
        "create_initiative",
        "update_directive_progress",
        "update_initiative_progress",
        "assign_agents_to_directive",
        "assign_agents_to_initiative",
        "get_directive_status",
        "get_initiative_status"
      ],
      "constants": [
        "STRATEGIC",
        "TACTICAL",
        "OPERATIONAL",
        "EMERGENCY",
        "PLANNING",
        "ACTIVE",
        "ON_HOLD",
        "COMPLETED",
        "CANCELLED",
        "CONCEPTION",
        "PLANNING",
        "EXECUTION",
        "MONITORING",
        "COMPLETED",
        "CANCELLED"
      ]
    },
    "tools.code_archaeologist_cli": {
      "classes": [
        "CodeArchaeologistCLI"
      ],
      "functions": [
        "main",
        "__init__",
        "setup_logging",
        "conduct_dig",
        "analyze_evolution",
        "discover_patterns",
        "map_technical_debt",
        "detect_dead_code",
        "show_tools"
      ],
      "constants": []
    },
    "tools.content_hash_system": {
      "classes": [
        "ContentHashSystem"
      ],
      "functions": [
        "main",
        "__init__",
        "load_existing_hashes",
        "save_hashes",
        "generate_content_hash",
        "check_duplicate",
        "add_content_hash",
        "hash_all_existing_content",
        "get_duplicate_report",
        "print_hash_report"
      ],
      "constants": []
    },
    "tools.coordinate_mapper": {
      "classes": [
        "CoordinateMapper"
      ],
      "functions": [
        "main",
        "__init__",
        "_load_coordinates",
        "_get_default_structure",
        "_save_coordinates",
        "_validate_coordinates",
        "_get_mouse_position",
        "show_current_coordinates",
        "map_all_agents",
        "map_single_agent",
        "test_coordinates",
        "validate_all_coordinates",
        "interactive_menu"
      ],
      "constants": []
    },
    "tools.database_cleanup": {
      "classes": [
        "DatabaseCleanupTool"
      ],
      "functions": [
        "main",
        "__init__",
        "analyze_duplicates",
        "remove_duplicates",
        "vectorize_all_documents",
        "sync_databases",
        "implement_content_hashing",
        "generate_cleanup_report",
        "run_full_cleanup"
      ],
      "constants": []
    },
    "tools.db_diagnostic": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "tools.devlog_consolidator": {
      "classes": [
        "DevlogConsolidator"
      ],
      "functions": [
        "main",
        "__init__",
        "get_logs_by_date_agent",
        "read_log_content",
        "categorize_logs",
        "consolidate_logs",
        "consolidate_and_cleanup"
      ],
      "constants": []
    },
    "tools.devlog_storyteller_cli": {
      "classes": [
        "DevlogStorytellerCLI"
      ],
      "functions": [
        "main",
        "__init__",
        "setup_logging",
        "create_story",
        "auto_process",
        "validate_chapters",
        "update_characters",
        "update_world",
        "show_tools"
      ],
      "constants": []
    },
    "tools.directive_services": {
      "classes": [
        "DirectiveService",
        "InitiativeService"
      ],
      "functions": [
        "__init__",
        "_load_directives",
        "_save_directives",
        "create_directive",
        "update_directive_progress",
        "assign_agents_to_directive",
        "get_directive_status",
        "__init__",
        "_load_initiatives",
        "_save_initiatives",
        "create_initiative",
        "update_initiative_progress",
        "assign_agents_to_initiative",
        "get_initiative_status"
      ],
      "constants": []
    },
    "tools.duplication_audit": {
      "classes": [
        "CodeDuplicationAnalyzer",
        "IntegrationHealthChecker"
      ],
      "functions": [
        "main",
        "__init__",
        "analyze_v3_duplication",
        "_analyze_single_file",
        "_find_v2_equivalent",
        "_has_unique_value",
        "_check_integration_issues",
        "__init__",
        "_load_systems",
        "check_system_health",
        "_check_single_system",
        "_find_v3_duplicates"
      ],
      "constants": []
    },
    "tools.emit_event": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "tools.feature_registry_check": {
      "classes": [
        "FeatureRegistry"
      ],
      "functions": [
        "main",
        "__init__",
        "_load_registry",
        "_create_default_registry",
        "save_registry",
        "check_feature_duplication",
        "register_new_feature"
      ],
      "constants": []
    },
    "tools.github_agent_cli": {
      "classes": [
        "GitHubAgentCLI"
      ],
      "functions": [
        "main",
        "__init__",
        "create_repository",
        "create_issue",
        "create_pull_request",
        "create_file",
        "create_branch",
        "grant_permission",
        "list_operations",
        "show_audit_logs",
        "export_data",
        "run"
      ],
      "constants": []
    },
    "tools.github_agent_client": {
      "classes": [
        "GitHubConfig",
        "GitHubRepository",
        "GitHubAgentClient"
      ],
      "functions": [
        "main",
        "__init__",
        "_load_config",
        "test_connection",
        "get_repositories",
        "get_repository_info",
        "get_repository_contents",
        "get_file_content",
        "search_repositories",
        "get_user_info",
        "get_rate_limit"
      ],
      "constants": []
    },
    "tools.github_agent_controller": {
      "classes": [
        "GitHubRepository",
        "GitHubIssue",
        "GitHubPullRequest",
        "GitHubAgentController"
      ],
      "functions": [
        "create_github_controller",
        "__init__",
        "_create_session",
        "_validate_token",
        "_make_request",
        "_create_repository_from_data",
        "create_repository",
        "get_repository",
        "list_repositories",
        "_create_issue_from_data",
        "create_issue",
        "get_issue",
        "list_issues",
        "create_pull_request",
        "merge_pull_request",
        "_file_operation",
        "create_file",
        "update_file",
        "delete_file",
        "create_branch",
        "delete_branch",
        "get_user_info",
        "search_repositories"
      ],
      "constants": []
    },
    "tools.intelligent_alerting_cli": {
      "classes": [],
      "functions": [
        "create_sample_alert",
        "display_alerts",
        "display_analytics",
        "main"
      ],
      "constants": []
    },
    "tools.knowledge_base_search": {
      "classes": [
        "KnowledgeBaseSearch"
      ],
      "functions": [
        "print_search_results",
        "print_quick_solutions",
        "main",
        "__init__",
        "_load_knowledge_base",
        "_parse_sections",
        "search",
        "_matches_query",
        "_calculate_relevance",
        "get_categories",
        "get_quick_solutions"
      ],
      "constants": []
    },
    "tools.overengineering_detector": {
      "classes": [
        "OverengineeringType",
        "OverengineeringSeverity",
        "OverengineeringIssue",
        "OverengineeringDetector"
      ],
      "functions": [
        "main",
        "__init__",
        "__init__",
        "detect_overengineering",
        "_analyze_ast",
        "_check_red_flags",
        "_check_complexity",
        "generate_report",
        "get_simplification_recommendations"
      ],
      "constants": [
        "PREMATURE_OPTIMIZATION",
        "COMPLEX_ABSTRACTION",
        "UNNECESSARY_PATTERN",
        "FEATURE_CREEP",
        "OVER_ARCHITECTURE",
        "CRITICAL",
        "HIGH",
        "MEDIUM",
        "LOW"
      ]
    },
    "tools.predictive_analytics_cli": {
      "classes": [],
      "functions": [
        "create_sample_metrics",
        "analyze_current_performance",
        "display_analysis",
        "simulate_time_series",
        "main"
      ],
      "constants": []
    },
    "tools.protocol_reference_enforcer": {
      "classes": [
        "ComplianceStatus",
        "ProtocolReference",
        "ComplianceReport",
        "ProtocolReferenceEnforcer"
      ],
      "functions": [
        "main",
        "__init__",
        "check_protocol_reference",
        "generate_compliance_template",
        "validate_messaging_usage",
        "validate_timeline_usage",
        "generate_violation_report",
        "save_compliance_report"
      ],
      "constants": [
        "COMPLIANT",
        "NON_COMPLIANT",
        "PARTIAL",
        "UNKNOWN"
      ]
    },
    "tools.quick_fix": {
      "classes": [],
      "functions": [
        "fix_imports",
        "create_init_file",
        "test_imports",
        "send_status_update",
        "main"
      ],
      "constants": []
    },
    "tools.simple_project_scanner": {
      "classes": [
        "SimpleProjectScanner"
      ],
      "functions": [
        "main",
        "__init__",
        "scan_project",
        "_analyze_project_structure",
        "_analyze_python_files",
        "_analyze_dependencies",
        "save_report"
      ],
      "constants": []
    },
    "tools.simple_vector_cleanup": {
      "classes": [
        "SimpleVectorCleanup"
      ],
      "functions": [
        "main",
        "__init__",
        "vectorize_swarm_brain_docs",
        "save_updated_databases",
        "generate_report",
        "run_cleanup"
      ],
      "constants": []
    },
    "tools.simple_vector_search": {
      "classes": [],
      "functions": [
        "search_message_history",
        "search_devlogs",
        "get_agent_status_summary",
        "print_search_results",
        "main"
      ],
      "constants": []
    },
    "tools.swarm_coordination_tool": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "tools.swarm_dashboard_cli": {
      "classes": [],
      "functions": [
        "main",
        "start_web_interface",
        "show_status",
        "show_agents",
        "show_tasks",
        "show_alerts",
        "add_alert",
        "update_agent"
      ],
      "constants": []
    },
    "tools.team_collaboration_tool": {
      "classes": [
        "TeamCollaborationTool"
      ],
      "functions": [
        "main",
        "__init__",
        "send_collaboration_message",
        "broadcast_collaboration_request",
        "create_discussion_topic",
        "suggest_tool_priorities",
        "create_tool_roadmap",
        "generate_collaboration_summary"
      ],
      "constants": []
    },
    "tools.team_dashboard": {
      "classes": [
        "TeamDashboard"
      ],
      "functions": [
        "main",
        "__init__",
        "get_agent_status",
        "get_all_agents_status",
        "get_task_queue_summary",
        "get_communication_logs",
        "_extract_agent_from_filename",
        "get_system_health",
        "generate_dashboard_data",
        "display_dashboard",
        "save_dashboard_snapshot"
      ],
      "constants": []
    },
    "tools.unified_database_search": {
      "classes": [
        "UnifiedDatabaseSearch"
      ],
      "functions": [
        "main",
        "__init__",
        "_load_vector_db",
        "_load_devlog_db",
        "_load_project_analysis",
        "search_all",
        "search_by_agent",
        "get_database_stats",
        "print_search_results",
        "print_database_stats"
      ],
      "constants": []
    },
    "tools.v2_refactoring_assistant": {
      "classes": [
        "V2RefactoringAssistant"
      ],
      "functions": [
        "main",
        "__init__",
        "analyze_violations",
        "_analyze_ast_metrics",
        "_is_enum_class",
        "_calculate_complexity",
        "_calculate_severity",
        "_generate_suggestions",
        "generate_refactoring_plan",
        "_calculate_severity_breakdown",
        "_create_refactoring_phases",
        "_create_agent_assignments",
        "_create_timeline",
        "generate_refactoring_report",
        "print_summary"
      ],
      "constants": []
    },
    "tools.v3_autonomous_cycle": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "tools.webhook_provisioner_cli": {
      "classes": [
        "WebhookProvisionerCLI"
      ],
      "functions": [
        "__init__"
      ],
      "constants": []
    },
    "tools.agent_cycle_devlog": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "tools.enhanced_onboarding_cli": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "tools.soft_onboarding_cli": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "tools.unified_onboarding_cli": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "tools.find_coordinates": {
      "classes": [],
      "functions": [
        "find_coordinates",
        "update_agent_coordinates",
        "main"
      ],
      "constants": []
    },
    "tools.ml_training_infrastructure_tool": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "tools.ml_training_infrastructure_tool_core": {
      "classes": [
        "TrainingStatus",
        "ResourceType",
        "FrameworkType",
        "TrainingResource",
        "TrainingEnvironment",
        "TrainingJob",
        "TrainingJobStatus",
        "TrainingInfrastructureConfig",
        "TrainingInfrastructureCore"
      ],
      "functions": [
        "__post_init__",
        "__post_init__",
        "__post_init__",
        "__post_init__",
        "__init__",
        "_initialize_resource_pool",
        "get_available_resources",
        "get_resource_utilization",
        "get_job_statistics"
      ],
      "constants": [
        "QUEUED",
        "PROVISIONING",
        "RUNNING",
        "COMPLETED",
        "FAILED",
        "CANCELLED",
        "CPU",
        "GPU",
        "MEMORY",
        "STORAGE",
        "TENSORFLOW",
        "PYTORCH",
        "SCIKIT_LEARN",
        "XGBOOST",
        "CUSTOM"
      ]
    },
    "tools.ml_training_infrastructure_tool_main": {
      "classes": [
        "MLTrainingInfrastructureTool"
      ],
      "functions": [
        "main",
        "__init__",
        "create_training_environment",
        "submit_training_job",
        "start_training_job",
        "monitor_training_job",
        "cancel_training_job",
        "get_resource_status",
        "get_training_summary",
        "process_job_queue"
      ],
      "constants": []
    },
    "tools.ml_training_infrastructure_tool_utils": {
      "classes": [
        "TrainingSimulator",
        "ResourceManager",
        "JobQueueManager",
        "FileManager"
      ],
      "functions": [
        "simulate_environment_creation",
        "simulate_provisioning",
        "simulate_training_progress",
        "__init__",
        "allocate_resources",
        "release_resources",
        "get_resource_status",
        "__init__",
        "add_job_to_queue",
        "remove_job_from_queue",
        "get_queue_length",
        "get_next_job",
        "__init__",
        "save_environment",
        "load_environment",
        "save_job",
        "load_job",
        "save_job_status",
        "load_job_status"
      ],
      "constants": []
    },
    "tools.protocol_compliance_checker_core": {
      "classes": [
        "ComplianceLevel",
        "ProtocolCategory",
        "ComplianceIssue",
        "ComplianceReport"
      ],
      "functions": [],
      "constants": [
        "COMPLIANT",
        "WARNING",
        "VIOLATION",
        "CRITICAL",
        "GIT_WORKFLOW",
        "CODE_QUALITY",
        "TESTING",
        "DOCUMENTATION",
        "AGENT_COORDINATION",
        "BRANCH_STRATEGY"
      ]
    },
    "tools.protocol_compliance_checker_utils": {
      "classes": [],
      "functions": [
        "check_branch_exists",
        "get_current_branch",
        "is_valid_branch_name",
        "has_uncommitted_changes",
        "is_python_file",
        "check_file_size_compliance",
        "check_class_count_compliance",
        "check_function_count_compliance",
        "generate_recommendations",
        "print_compliance_report",
        "format_compliance_report",
        "main"
      ],
      "constants": []
    },
    "tools.protocol_compliance_checker_main": {
      "classes": [
        "ProtocolComplianceChecker"
      ],
      "functions": [
        "__init__",
        "check_git_workflow_compliance",
        "check_code_quality_compliance",
        "check_documentation_compliance",
        "check_agent_coordination_compliance",
        "check_testing_compliance",
        "generate_compliance_report",
        "run_full_compliance_check"
      ],
      "constants": []
    },
    "tools.protocol_compliance_checker": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "tools.operational_dashboard_tool_core": {
      "classes": [
        "MetricType",
        "AlertLevel",
        "QualityGateResult",
        "AgentPerformance",
        "ProjectProgress",
        "OperationalAlert"
      ],
      "functions": [],
      "constants": [
        "QUALITY_GATE",
        "AGENT_PERFORMANCE",
        "PROJECT_PROGRESS",
        "RESOURCE_ALLOCATION",
        "TEAM_COORDINATION",
        "INFO",
        "WARNING",
        "ERROR",
        "CRITICAL"
      ]
    },
    "tools.operational_dashboard_tool_utils": {
      "classes": [],
      "functions": [
        "calculate_quality_score",
        "extract_metric",
        "count_completed_tasks",
        "count_total_tasks",
        "generate_recommendations",
        "load_v3_coordination_data",
        "load_quality_gate_data",
        "load_agent_performance_data",
        "load_project_progress_data"
      ],
      "constants": []
    },
    "tools.operational_dashboard_tool_main": {
      "classes": [
        "OperationalDashboard"
      ],
      "functions": [
        "main",
        "__init__",
        "generate_operational_report",
        "create_operational_alert",
        "generate_dashboard_html"
      ],
      "constants": []
    },
    "tools.operational_dashboard_tool": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "tools.memory_leak_detector": {
      "classes": [
        "MemoryIssue",
        "MemoryLeakDetector",
        "MemoryVisitor"
      ],
      "functions": [
        "main",
        "__init__",
        "analyze_file",
        "_analyze_ast",
        "analyze_project",
        "_count_by_severity",
        "_count_by_type",
        "_get_top_files_with_issues",
        "_generate_recommendations",
        "generate_report",
        "__init__",
        "visit_ClassDef",
        "visit_FunctionDef",
        "visit_Assign"
      ],
      "constants": []
    },
    "tools.memory_optimizer": {
      "classes": [
        "MemoryFix",
        "MemoryOptimizer"
      ],
      "functions": [
        "main",
        "__init__",
        "fix_file",
        "fix_high_priority_files",
        "_count_fixes_by_type",
        "create_memory_monitoring_tool",
        "generate_optimization_report"
      ],
      "constants": []
    },
    "tools.memory_monitor": {
      "classes": [
        "MemorySnapshot",
        "MemoryMonitor"
      ],
      "functions": [
        "main",
        "__init__",
        "take_snapshot",
        "check_for_leaks",
        "force_cleanup",
        "start_monitoring",
        "stop_monitoring"
      ],
      "constants": []
    },
    "tools.memory_manager": {
      "classes": [
        "MemoryStats",
        "MemoryManager"
      ],
      "functions": [
        "main",
        "__init__",
        "get_current_stats",
        "record_stats",
        "_check_memory_alerts",
        "force_cleanup",
        "start_monitoring",
        "stop_monitoring",
        "_monitoring_loop",
        "get_memory_summary",
        "export_memory_report",
        "_generate_recommendations"
      ],
      "constants": []
    },
    "tools.critical_memory_fixer": {
      "classes": [
        "CriticalMemoryFixer"
      ],
      "functions": [
        "main",
        "__init__",
        "fix_performance_monitor",
        "fix_memory_aware_responses",
        "fix_integration_assessment_engine",
        "fix_vector_database_integration",
        "fix_thea_conversation_manager",
        "apply_all_critical_fixes",
        "generate_fix_report"
      ],
      "constants": []
    },
    "tools.ci_memory_gate": {
      "classes": [],
      "functions": [
        "run_memory_gate",
        "main"
      ],
      "constants": []
    },
    "tools.generate_memory_leak_report": {
      "classes": [
        "JSONReportFormatter",
        "TextReportFormatter",
        "HTMLReportFormatter",
        "MemoryLeakReportGenerator"
      ],
      "functions": [
        "main",
        "format",
        "format",
        "format",
        "__init__",
        "generate_report",
        "_collect_report_data"
      ],
      "constants": []
    },
    "tools.import_mapper": {
      "classes": [
        "ImportMapper"
      ],
      "functions": [
        "main",
        "__init__",
        "scan_file",
        "_get_module_path",
        "scan_project",
        "find_import",
        "check_file_imports",
        "save_import_map",
        "generate_reference_guide"
      ],
      "constants": []
    },
    "tools.projectscanner.analyzers": {
      "classes": [
        "LanguageAnalyzer"
      ],
      "functions": [
        "__init__",
        "_init_tree_sitter_language",
        "analyze_python_file",
        "analyze_rust_file",
        "analyze_javascript_file",
        "analyze_other_file"
      ],
      "constants": []
    },
    "tools.projectscanner.reporters": {
      "classes": [
        "ReportGenerator",
        "ModularReportGenerator"
      ],
      "functions": [
        "__init__",
        "save_report",
        "_generate_report_data",
        "export_test_analysis",
        "_generate_test_analysis_data",
        "__init__",
        "generate_modular_reports",
        "_generate_agent_analysis",
        "_generate_module_analysis",
        "_generate_file_type_analysis",
        "_generate_complexity_analysis",
        "_generate_dependency_analysis",
        "_generate_architecture_overview",
        "_save_report"
      ],
      "constants": []
    },
    "tools.projectscanner.workers": {
      "classes": [
        "BotWorker",
        "MultibotManager",
        "FileProcessor"
      ],
      "functions": [
        "__init__",
        "run",
        "_process_work_item",
        "stop",
        "__init__",
        "initialize",
        "add_work",
        "get_results",
        "wait_for_completion",
        "cleanup",
        "__init__",
        "process_file",
        "get_stats"
      ],
      "constants": []
    },
    "tools.projectscanner.core": {
      "classes": [
        "ProjectScanner",
        "ReportGenerator",
        "ModularReportGenerator"
      ],
      "functions": [
        "__init__",
        "report_generator",
        "modular_reporter",
        "scan_project",
        "_analyze_project_structure",
        "_analyze_python_files",
        "_analyze_dependencies",
        "_analyze_test_coverage",
        "generate_init_files",
        "categorize_agents",
        "export_chatgpt_context",
        "__init__",
        "save_report",
        "__init__",
        "generate_modular_reports"
      ],
      "constants": []
    },
    "tools.projectscanner.cli": {
      "classes": [],
      "functions": [
        "setup_logging",
        "scan_project",
        "main"
      ],
      "constants": []
    },
    "tools.projectscanner.enhanced_analyzer_v2": {
      "classes": [
        "EnhancedProjectScannerV2"
      ],
      "functions": [
        "main",
        "__init__",
        "run_full_analysis",
        "get_cache_stats",
        "clear_cache",
        "invalidate_file",
        "run_quick_analysis",
        "analyze_single_file"
      ],
      "constants": []
    },
    "tools.projectscanner.enhanced_scanner.file_discovery": {
      "classes": [
        "FileDiscoveryHandler"
      ],
      "functions": [
        "__init__",
        "discover_files",
        "_should_include_file",
        "_should_exclude_directory",
        "_should_exclude_file"
      ],
      "constants": []
    },
    "tools.projectscanner.enhanced_scanner.core_analyzer": {
      "classes": [
        "EnhancedCoreAnalyzer"
      ],
      "functions": [
        "__init__",
        "discover_files",
        "analyze_file_basic",
        "run_basic_analysis",
        "filter_analysis_files",
        "calculate_project_metrics",
        "save_basic_analysis"
      ],
      "constants": []
    },
    "tools.projectscanner.enhanced_scanner.caching_system": {
      "classes": [
        "EnhancedCachingSystem"
      ],
      "functions": [
        "__init__",
        "load_cache",
        "save_cache",
        "get_file_hash",
        "is_file_cached",
        "update_file_cache",
        "get_cached_analysis",
        "detect_moved_files",
        "cleanup_missing_files",
        "get_cache_stats",
        "clear_cache",
        "invalidate_file",
        "batch_update_cache"
      ],
      "constants": []
    },
    "tools.projectscanner.enhanced_scanner.report_generator": {
      "classes": [
        "EnhancedReportGenerator"
      ],
      "functions": [
        "__init__",
        "generate_enhanced_reports",
        "save_project_analysis",
        "save_test_analysis",
        "save_agent_analysis",
        "save_architecture_overview",
        "export_chatgpt_context",
        "generate_init_files",
        "_load_existing_report",
        "_calculate_agent_distribution",
        "_calculate_maturity_distribution"
      ],
      "constants": []
    },
    "tools.projectscanner.enhanced_scanner.language_analyzer": {
      "classes": [
        "EnhancedLanguageAnalyzer"
      ],
      "functions": [
        "__init__",
        "analyze_file",
        "_analyze_rust_fallback",
        "_analyze_javascript_fallback",
        "_extract_route_from_line"
      ],
      "constants": []
    },
    "tools.projectscanner.enhanced_scanner.python_analyzer": {
      "classes": [
        "PythonAnalyzer"
      ],
      "functions": [
        "analyze_python_file",
        "_get_decorator_name",
        "_extract_route_info",
        "_extract_import_info",
        "_calculate_complexity",
        "_assess_class_maturity",
        "_categorize_agent_type",
        "_assess_file_maturity",
        "_categorize_file_type"
      ],
      "constants": []
    },
    "tools.projectscanner.enhanced_scanner": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "tools.projectscanner.enhanced_scanner.agent_categorization": {
      "classes": [
        "AgentCategorizationHandler"
      ],
      "functions": [
        "__init__",
        "categorize_agents",
        "_extract_keywords",
        "_find_best_agent_match",
        "_calculate_confidence"
      ],
      "constants": []
    },
    "tools.projectscanner.enhanced_scanner.file_analysis": {
      "classes": [
        "FileAnalysisHandler"
      ],
      "functions": [
        "__init__",
        "analyze_file_enhanced",
        "handle_moved_files",
        "detect_moved_files"
      ],
      "constants": []
    },
    "tools.projectscanner.enhanced_scanner.report_generation": {
      "classes": [
        "ReportGenerationHandler"
      ],
      "functions": [
        "__init__",
        "generate_enhanced_reports",
        "export_chatgpt_context",
        "generate_init_files"
      ],
      "constants": []
    },
    "tools.projectscanner.enhanced_scanner.core": {
      "classes": [
        "EnhancedProjectScannerCore"
      ],
      "functions": [
        "__init__",
        "scan_project",
        "get_analysis_summary",
        "_calculate_v2_compliance",
        "add_ignore_directory",
        "remove_ignore_directory",
        "clear_cache",
        "get_cache_stats"
      ],
      "constants": []
    },
    "tools.projectscanner.enhanced_analyzer": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "tools.projectscanner.enhanced_analyzer.core": {
      "classes": [
        "EnhancedAnalyzerCore"
      ],
      "functions": [
        "__init__",
        "analyze_file",
        "detect_moved_files",
        "cleanup_missing_files",
        "generate_reports",
        "export_chatgpt_context",
        "get_analysis_summary",
        "save_cache",
        "load_cache"
      ],
      "constants": []
    },
    "tools.analysis.core": {
      "classes": [
        "AnalysisCore"
      ],
      "functions": [
        "should_exclude_file",
        "count_lines",
        "__init__",
        "analyze_python_file",
        "_analyze_ast_node"
      ],
      "constants": [
        "MAX_FILE_LOC",
        "MAX_CLASS_LOC",
        "MAX_FUNCTION_LOC",
        "MAX_LINE_LENGTH",
        "EXCLUDE_PATTERNS"
      ]
    },
    "tools.analysis.refactor": {
      "classes": [
        "RefactorPlanner"
      ],
      "functions": [
        "generate_refactor_suggestions",
        "format_refactor_report",
        "__init__",
        "generate_refactor_suggestions",
        "_analyze_file_violations",
        "_generate_violation_suggestion",
        "_generate_priority_actions"
      ],
      "constants": []
    },
    "tools.analysis.violations": {
      "classes": [
        "ViolationDetector"
      ],
      "functions": [
        "format_violations_text",
        "__init__",
        "analyze_project",
        "_generate_summary",
        "ci_gate_check"
      ],
      "constants": []
    },
    "tools.analysis": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "tools.analysis.cli": {
      "classes": [],
      "functions": [
        "setup_logging",
        "main"
      ],
      "constants": []
    },
    "tools.fsm": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "tools.fsm.fsm_scan": {
      "classes": [],
      "functions": [
        "scan_agent_states",
        "scan_swarm_state",
        "scan_all_states",
        "print_scan_results",
        "main"
      ],
      "constants": [
        "ROOTS",
        "VALID_AGENT_STATES",
        "VALID_SWARM_STATES"
      ]
    },
    "tools.coverage.changed_file_report": {
      "classes": [],
      "functions": [
        "changed_files",
        "load_cov",
        "main"
      ],
      "constants": []
    },
    "tools.coverage.gap_analyzer": {
      "classes": [
        "FileStats",
        "CoverageGapAnalyzer"
      ],
      "functions": [
        "main",
        "__init__",
        "load_coverage_data",
        "get_git_churn",
        "estimate_complexity",
        "calculate_risk_score",
        "analyze_gaps",
        "print_report",
        "suggest_test_behaviors"
      ],
      "constants": []
    },
    "tools.coverage.mutation_gate": {
      "classes": [
        "MutationGate"
      ],
      "functions": [
        "main",
        "__init__",
        "run_mutation_tests",
        "get_mutation_results",
        "calculate_mutation_score",
        "check_threshold",
        "print_detailed_report"
      ],
      "constants": []
    },
    "tools.coverage.run_coverage_analysis": {
      "classes": [
        "CoveragePipeline"
      ],
      "functions": [
        "main",
        "__init__",
        "run_command",
        "discover_gaps",
        "analyze_gaps",
        "run_mutation_tests",
        "verify_thresholds",
        "generate_report",
        "print_summary"
      ],
      "constants": []
    },
    "tools.coverage": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "tools.workflow": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "tools.workflow.automation": {
      "classes": [
        "ModuleFixer",
        "TestRunner",
        "ProjectManager",
        "WorkflowAutomation"
      ],
      "functions": [
        "__init__",
        "fix_missing_imports",
        "validate_module_structure",
        "__init__",
        "run_pytest",
        "run_syntax_check",
        "__init__",
        "get_project_status",
        "cleanup_temp_files",
        "__init__",
        "execute_workflow_step",
        "_execute_task",
        "_extract_module_path",
        "_extract_test_path",
        "_extract_file_path"
      ],
      "constants": []
    },
    "tools.workflow.core": {
      "classes": [
        "WorkflowStep",
        "WorkflowDefinition",
        "WorkflowValidator",
        "WorkflowScheduler",
        "WorkflowStatusTracker"
      ],
      "functions": [
        "__post_init__",
        "to_dict",
        "from_dict",
        "__post_init__",
        "to_dict",
        "from_dict",
        "validate_workflow",
        "_has_circular_dependencies",
        "get_execution_order",
        "__init__",
        "start_workflow",
        "complete_workflow",
        "get_workflow_status",
        "get_all_workflows",
        "has_cycle"
      ],
      "constants": []
    },
    "tools.workflow.manager": {
      "classes": [
        "WorkflowManager"
      ],
      "functions": [
        "main",
        "__init__",
        "_load_config",
        "create_workflow",
        "save_workflow",
        "load_workflow",
        "execute_workflow",
        "_check_dependencies",
        "get_workflow_status",
        "list_workflows",
        "cancel_workflow"
      ],
      "constants": []
    },
    "tools.workflow.optimization": {
      "classes": [
        "PerformanceMetrics",
        "PerformanceMonitor",
        "WorkflowCache",
        "ParallelExecutor",
        "WorkflowOptimizer"
      ],
      "functions": [
        "to_dict",
        "__init__",
        "start_monitoring",
        "stop_monitoring",
        "record_step_completion",
        "record_parallel_execution",
        "record_cache_hit",
        "record_cache_miss",
        "get_average_metrics",
        "__init__",
        "get",
        "set",
        "_evict_oldest",
        "clear",
        "get_stats",
        "__init__",
        "get_active_task_count",
        "shutdown",
        "__init__",
        "optimize_workflow_execution",
        "_group_parallel_steps",
        "_execute_group_parallel",
        "_execute_group_sequential",
        "_execute_sequential",
        "get_optimization_stats",
        "enable_optimization",
        "disable_optimization",
        "clear_cache",
        "shutdown"
      ],
      "constants": []
    },
    "tools.workflow.simple_manager": {
      "classes": [
        "SimpleWorkflowStep",
        "SimpleWorkflow",
        "SimpleWorkflowManager"
      ],
      "functions": [
        "main",
        "__init__",
        "to_dict",
        "from_dict",
        "__init__",
        "to_dict",
        "from_dict",
        "__init__",
        "_load_workflows",
        "create_workflow",
        "save_workflow",
        "load_workflow",
        "list_workflows",
        "execute_workflow",
        "_execute_step",
        "get_workflow_status",
        "delete_workflow"
      ],
      "constants": []
    },
    "tools.trading_cli": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "tools.trading_cli.market_analyzer": {
      "classes": [
        "MarketAnalyzer"
      ],
      "functions": [
        "main",
        "__init__",
        "_load_api_keys",
        "get_comprehensive_data",
        "_get_stock_data",
        "_get_technical_indicators",
        "_calculate_rsi",
        "_calculate_macd",
        "_get_market_sentiment",
        "_analyze_volume",
        "_analyze_volatility",
        "_analyze_trend",
        "generate_enhanced_predictions",
        "display_analysis"
      ],
      "constants": []
    },
    "tools.trading_cli.master_cli": {
      "classes": [
        "MasterCLI"
      ],
      "functions": [
        "main",
        "__init__",
        "run_tool",
        "run_comprehensive_analysis",
        "run_quick_analysis",
        "show_help",
        "interactive_mode"
      ],
      "constants": []
    },
    "tools.trading_cli.news_analyzer": {
      "classes": [
        "NewsSentimentAnalyzer"
      ],
      "functions": [
        "main",
        "__init__",
        "_load_api_keys",
        "_load_sentiment_keywords",
        "get_news_data",
        "_get_news_api_data",
        "_get_alpha_vantage_news",
        "_get_mock_news_data",
        "analyze_sentiment",
        "analyze_news_sentiment",
        "display_sentiment_analysis",
        "get_sentiment_trading_signal"
      ],
      "constants": []
    },
    "tools.trading_cli.agent_coordinator": {
      "classes": [
        "AgentCoordinator"
      ],
      "functions": [
        "main",
        "__init__",
        "_load_agent_weights",
        "run_market_analysis",
        "run_news_analysis",
        "run_technical_analysis",
        "generate_agent_predictions",
        "_create_enhanced_analysis",
        "calculate_weighted_consensus",
        "run_comprehensive_analysis",
        "display_comprehensive_results"
      ],
      "constants": []
    },
    "tools.trading_cli.technical_analyzer_core": {
      "classes": [
        "TechnicalAnalyzer"
      ],
      "functions": [
        "__init__",
        "_load_api_keys",
        "get_historical_data",
        "_get_alpha_vantage_historical",
        "_get_mock_historical_data",
        "analyze_technical",
        "display_technical_analysis",
        "_generate_analysis_summary"
      ],
      "constants": []
    },
    "tools.trading_cli.technical_analyzer_utils": {
      "classes": [],
      "functions": [
        "calculate_technical_indicators",
        "calculate_sma",
        "calculate_ema",
        "calculate_rsi",
        "calculate_macd",
        "calculate_bollinger_bands",
        "calculate_stochastic",
        "generate_technical_signals"
      ],
      "constants": []
    },
    "tools.trading_cli.technical_analyzer_main": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "tools.trading_cli.technical_analyzer": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "tools.trading_cli.prediction_tracker": {
      "classes": [
        "PredictionTracker"
      ],
      "functions": [
        "main",
        "__init__",
        "_init_database",
        "record_prediction",
        "update_actual_price",
        "_calculate_accuracy_score",
        "_update_accuracy_summary",
        "get_agent_accuracy",
        "get_recent_predictions",
        "display_accuracy_report",
        "export_data"
      ],
      "constants": []
    },
    "tools.refactoring_templates": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "tools.refactoring_templates.critical_file_refactoring": {
      "classes": [
        "RefactoringTemplates",
        "RefactoringExamples",
        "RefactoringChecklist"
      ],
      "functions": [
        "main",
        "trading_robot_refactoring",
        "captain_autonomous_manager_refactoring",
        "knowledge_base_refactoring",
        "dashboard_web_interface_refactoring",
        "ml_training_infrastructure_refactoring",
        "extract_class_example",
        "extract_method_example",
        "extract_module_example",
        "get_pre_refactoring_checklist",
        "get_during_refactoring_checklist",
        "get_post_refactoring_checklist"
      ],
      "constants": []
    },
    "tools.static_analysis": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "tools.static_analysis.analysis_dashboard": {
      "classes": [
        "AnalysisDashboard"
      ],
      "functions": [
        "main",
        "__init__",
        "display_security_summary",
        "display_quality_summary",
        "display_dependency_summary",
        "_get_score_status",
        "_display_violation_summary",
        "_print_security_summary",
        "_print_quality_summary",
        "_print_dependency_summary",
        "load_and_display_reports",
        "generate_html_report"
      ],
      "constants": [
        "RICH_AVAILABLE",
        "RICH_AVAILABLE"
      ]
    },
    "tools.static_analysis.code_quality_analyzer": {
      "classes": [
        "CodeQualityAnalyzer"
      ],
      "functions": [
        "main",
        "__init__",
        "run_comprehensive_analysis",
        "_run_ruff_analysis",
        "_run_pylint_analysis",
        "_run_mypy_analysis",
        "_run_flake8_analysis",
        "_run_complexity_analysis",
        "_calculate_quality_metrics",
        "_generate_violation_summary",
        "_generate_recommendations",
        "generate_report"
      ],
      "constants": []
    },
    "tools.static_analysis.demo_analysis": {
      "classes": [
        "DemoAnalysis"
      ],
      "functions": [
        "main",
        "__init__",
        "run_demo",
        "_show_summary",
        "run_individual_demos",
        "show_tool_capabilities",
        "show_configuration_options",
        "show_ci_integration"
      ],
      "constants": []
    },
    "tools.static_analysis.dependency_scanner": {
      "classes": [
        "DependencyScanner"
      ],
      "functions": [
        "main",
        "__init__",
        "run_comprehensive_scan",
        "_run_safety_scan",
        "_run_pip_audit_scan",
        "_run_osv_scanner",
        "_run_manual_dependency_check",
        "_check_file_vulnerabilities",
        "_generate_dependency_summary",
        "generate_remediation_report",
        "generate_report"
      ],
      "constants": []
    },
    "tools.static_analysis.security_scanner": {
      "classes": [
        "SecurityScanner"
      ],
      "functions": [
        "main",
        "__init__",
        "run_comprehensive_scan",
        "_run_bandit_scan",
        "_run_safety_scan",
        "_run_semgrep_scan",
        "_run_dependency_check",
        "_check_vulnerable_packages",
        "_generate_security_summary",
        "generate_report"
      ],
      "constants": []
    },
    "browser_service": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "browser_service.adapters": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "browser_service.adapters.chrome_adapter": {
      "classes": [
        "BrowserAdapter",
        "ChromeBrowserAdapter"
      ],
      "functions": [
        "start",
        "stop",
        "navigate",
        "get_current_url",
        "get_title",
        "find_element",
        "find_elements",
        "execute_script",
        "is_running",
        "__init__",
        "start",
        "stop",
        "navigate",
        "get_current_url",
        "get_title",
        "find_element",
        "find_elements",
        "execute_script",
        "is_running",
        "get_cookies",
        "add_cookies"
      ],
      "constants": []
    },
    "browser_service.config": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "browser_service.config.browser_config": {
      "classes": [
        "BrowserConfig",
        "TheaConfig",
        "SessionInfo",
        "RateLimitStatus"
      ],
      "functions": [],
      "constants": []
    },
    "browser_service.core": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "browser_service.core.unified_browser_service": {
      "classes": [
        "UnifiedBrowserService"
      ],
      "functions": [
        "create_browser_service",
        "__init__",
        "start_browser",
        "stop_browser",
        "create_session",
        "navigate_to_conversation",
        "send_message",
        "wait_for_response",
        "save_cookies",
        "load_cookies",
        "can_make_request",
        "record_request",
        "get_session_info",
        "get_rate_limit_status",
        "get_page_status",
        "is_browser_running",
        "has_valid_session",
        "get_browser_info"
      ],
      "constants": []
    },
    "browser_service.managers": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "browser_service.managers.session_manager": {
      "classes": [
        "SessionManager"
      ],
      "functions": [
        "__init__",
        "create_session",
        "can_make_request",
        "record_request",
        "wait_for_rate_limit_reset",
        "get_session_info",
        "get_rate_limit_status"
      ],
      "constants": []
    },
    "browser_service.operations": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "browser_service.operations.browser_operations": {
      "classes": [
        "BrowserOperations"
      ],
      "functions": [
        "__init__",
        "navigate_to_conversation",
        "send_message",
        "wait_for_response_ready",
        "_is_input_available",
        "_verify_page_loaded",
        "get_page_status"
      ],
      "constants": []
    },
    "infrastructure": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "infrastructure.validate_deployment": {
      "classes": [
        "DeploymentValidator"
      ],
      "functions": [
        "__init__",
        "_generate_validation_report"
      ],
      "constants": []
    },
    "infrastructure.validate_ml_pipeline": {
      "classes": [],
      "functions": [
        "run_command",
        "validate_kubernetes_ml_resources",
        "validate_ml_components",
        "validate_ml_integration",
        "validate_ml_functionality",
        "validate_ml_quality_gates",
        "main"
      ],
      "constants": []
    },
    "infrastructure.validate_tracing": {
      "classes": [
        "TracingValidator"
      ],
      "functions": [
        "__init__",
        "_generate_validation_report",
        "test_function"
      ],
      "constants": []
    },
    "scripts": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "scripts.continuous_optimization_monitor": {
      "classes": [
        "ContinuousOptimizationMonitor"
      ],
      "functions": [
        "__init__",
        "register_components",
        "get_optimization_summary",
        "save_optimization_report"
      ],
      "constants": []
    },
    "scripts.deploy_modular_components": {
      "classes": [
        "ModularDeployment"
      ],
      "functions": [
        "main",
        "__init__",
        "create_backup",
        "deploy_workflow_components",
        "deploy_discord_commander_components",
        "_create_workflow_cli",
        "create_deployment_manifest",
        "validate_deployment",
        "deploy"
      ],
      "constants": []
    },
    "scripts.deployment_dashboard": {
      "classes": [
        "DeploymentDashboard"
      ],
      "functions": [
        "__init__",
        "initialize_components",
        "test_component_functionality",
        "get_deployment_status",
        "display_dashboard",
        "save_deployment_report"
      ],
      "constants": []
    },
    "scripts.lightweight_deployment_dashboard": {
      "classes": [
        "LightweightDashboard"
      ],
      "functions": [
        "__init__",
        "initialize_components",
        "test_component_functionality",
        "get_deployment_status",
        "display_dashboard",
        "save_lightweight_report"
      ],
      "constants": []
    },
    "scripts.remove_duplicate_discord_files": {
      "classes": [
        "DuplicateFileRemover"
      ],
      "functions": [
        "main",
        "__init__",
        "get_files_to_remove",
        "create_backup",
        "validate_removal_safety",
        "remove_files",
        "clean_empty_directories",
        "run_cleanup"
      ],
      "constants": []
    },
    "scripts.security_integration": {
      "classes": [
        "SecurityIntegration"
      ],
      "functions": [
        "main",
        "__init__",
        "run_static_analysis",
        "run_dependency_scan",
        "run_input_validation_tests",
        "run_password_security_tests",
        "run_comprehensive_audit",
        "_calculate_overall_score",
        "_generate_recommendations",
        "check_security_gates"
      ],
      "constants": []
    },
    "analytics": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "analytics.agent_metrics": {
      "classes": [
        "AgentSnapshot",
        "Weights"
      ],
      "functions": [
        "clamp",
        "safe_div",
        "parse_cobertura_coverage",
        "efficiency_score"
      ],
      "constants": [
        "DEFAULT_WEIGHTS"
      ]
    },
    "analytics.predictive_engine": {
      "classes": [
        "PredictiveEngine"
      ],
      "functions": [
        "__init__",
        "add_performance_metrics",
        "predict_cpu_usage",
        "predict_memory_usage",
        "predict_response_time",
        "detect_anomalies",
        "forecast_capacity",
        "assess_system_health",
        "get_resource_utilization",
        "create_performance_metrics",
        "get_prediction_summary",
        "get_capacity_forecasts",
        "get_resource_utilizations",
        "export_metrics",
        "import_metrics",
        "get_engine_status",
        "configure_anomaly_threshold",
        "clear_metrics_history",
        "get_metrics_statistics"
      ],
      "constants": []
    },
    "analytics.score_window": {
      "classes": [],
      "functions": [
        "score_window",
        "main"
      ],
      "constants": []
    },
    "analytics.window_loader": {
      "classes": [],
      "functions": [
        "load_snapshots_from_window"
      ],
      "constants": []
    },
    "analytics.predictive_models": {
      "classes": [
        "PerformanceMetrics",
        "PredictionResult",
        "CapacityForecast",
        "AnomalyDetection",
        "PredictiveModel",
        "ForecastPeriod",
        "SystemHealth",
        "ResourceUtilization"
      ],
      "functions": [],
      "constants": []
    },
    "analytics.predictive_core": {
      "classes": [
        "PredictiveEngineCore"
      ],
      "functions": [
        "__init__",
        "add_performance_metrics",
        "predict_cpu_usage",
        "predict_memory_usage",
        "predict_response_time",
        "detect_anomalies",
        "forecast_capacity",
        "assess_system_health",
        "get_resource_utilization",
        "_get_recent_metrics",
        "_calculate_trend_prediction",
        "_calculate_slope",
        "_calculate_confidence",
        "_determine_trend",
        "_calculate_anomaly_score",
        "_check_metric_anomaly",
        "_create_default_prediction",
        "_create_default_capacity_forecast",
        "_calculate_time_to_limit",
        "_generate_scaling_recommendation",
        "_calculate_health_score",
        "_identify_health_issues",
        "_generate_health_recommendations",
        "_calculate_efficiency_score",
        "_generate_cpu_recommendations",
        "_generate_memory_recommendations",
        "_generate_response_time_recommendations",
        "_generate_anomaly_action"
      ],
      "constants": []
    },
    "analytics.signals": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "analytics.signals.collect_ci_signals": {
      "classes": [],
      "functions": [
        "parse_pytest_summary",
        "collect"
      ],
      "constants": []
    },
    "swarm_brain": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "swarm_brain.canon": {
      "classes": [],
      "functions": [
        "canonical_action",
        "canonical_protocol",
        "canonical_workflow",
        "canonical_performance",
        "canonical_conversation",
        "canonical_coordination",
        "canonical_tool"
      ],
      "constants": []
    },
    "swarm_brain.cli": {
      "classes": [],
      "functions": [
        "setup_logging",
        "cmd_ingest",
        "cmd_query",
        "cmd_stats",
        "cmd_cleanup",
        "main"
      ],
      "constants": []
    },
    "swarm_brain.config": {
      "classes": [
        "BrainConfig"
      ],
      "functions": [
        "get_config",
        "update_config"
      ],
      "constants": [
        "CONFIG",
        "CONFIG"
      ]
    },
    "swarm_brain.db": {
      "classes": [
        "SwarmBrain"
      ],
      "functions": [
        "__init__",
        "upsert_document",
        "insert_lens",
        "mark_embedded",
        "fetch_canonical_batch",
        "get",
        "search_by_metadata",
        "get_agent_stats",
        "get_project_stats",
        "cleanup_old_documents",
        "close",
        "__enter__",
        "__exit__"
      ],
      "constants": [
        "SCHEMA_SQL"
      ]
    },
    "swarm_brain.decorators": {
      "classes": [],
      "functions": [
        "vectorized_action",
        "vectorized_protocol",
        "vectorized_workflow",
        "vectorized_performance",
        "vectorized_conversation",
        "vectorized_coordination",
        "vectorized_tool",
        "decorator",
        "record_protocol",
        "record_workflow",
        "record_performance",
        "record_conversation",
        "record_coordination",
        "record_tool",
        "wrapper"
      ],
      "constants": []
    },
    "swarm_brain.ingest": {
      "classes": [
        "Ingestor"
      ],
      "functions": [
        "_get_backend",
        "__init__",
        "_embed_and_mark",
        "action",
        "protocol",
        "workflow",
        "performance",
        "conversation",
        "coordination",
        "tool"
      ],
      "constants": []
    },
    "swarm_brain.paths": {
      "classes": [],
      "functions": [
        "ensure_directories",
        "get_brain_root",
        "get_sqlite_path",
        "get_index_path",
        "cleanup_old_files"
      ],
      "constants": []
    },
    "swarm_brain.retriever": {
      "classes": [
        "Retriever"
      ],
      "functions": [
        "__init__",
        "search",
        "how_do_agents_do",
        "find_similar_problems",
        "get_agent_expertise",
        "get_project_patterns",
        "suggest_improvements",
        "score_document"
      ],
      "constants": []
    },
    "swarm_brain.embeddings": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "swarm_brain.embeddings.base": {
      "classes": [
        "EmbeddingsBackend"
      ],
      "functions": [
        "embed_texts",
        "add",
        "search",
        "persist",
        "get_stats"
      ],
      "constants": []
    },
    "swarm_brain.embeddings.numpy_backend": {
      "classes": [
        "NumpyBackend"
      ],
      "functions": [
        "__init__",
        "_hash_embed",
        "embed_texts",
        "add",
        "search",
        "persist",
        "get_stats"
      ],
      "constants": []
    },
    "swarm_brain.connectors": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "swarm_brain.connectors.devlogs": {
      "classes": [],
      "functions": [
        "ingest_devlog",
        "ingest_devlog_batch"
      ],
      "constants": []
    },
    "swarm_brain.connectors.discord": {
      "classes": [],
      "functions": [
        "ingest_discord",
        "ingest_discord_command",
        "ingest_discord_coordination"
      ],
      "constants": []
    },
    "swarm_brain.connectors.performance": {
      "classes": [],
      "functions": [
        "ingest_performance",
        "ingest_optimization",
        "ingest_system_health"
      ],
      "constants": []
    },
    "swarm_brain.connectors.project_scanner": {
      "classes": [],
      "functions": [
        "ingest_scan",
        "ingest_compliance_fix"
      ],
      "constants": []
    },
    "tsla_forecast_app": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "tsla_forecast_app.V2_STANDALONE_DEMO": {
      "classes": [
        "MockDataProvider",
        "TradingDashboard",
        "V2StandaloneDemo"
      ],
      "functions": [
        "main",
        "__init__",
        "run",
        "stop",
        "__init__",
        "init_ui",
        "create_trading_info_section",
        "create_performance_section",
        "create_quick_actions_section",
        "setup_dark_theme",
        "update_trading_data",
        "__init__",
        "init_ui",
        "setup_connections",
        "setup_timers",
        "update_display",
        "show_trading_action",
        "run"
      ],
      "constants": []
    },
    "tsla_forecast_app.V2_TRADING_ROBOT_DEMO": {
      "classes": [
        "MockDataProvider",
        "V2TradingRobotDemo"
      ],
      "functions": [
        "main",
        "__init__",
        "run",
        "generate_chart_data",
        "stop",
        "__init__",
        "setup_connections",
        "handle_trading_action",
        "show_message",
        "run"
      ],
      "constants": []
    },
    "tsla_forecast_app.run_app": {
      "classes": [],
      "functions": [
        "install_requirements",
        "run_app",
        "main"
      ],
      "constants": []
    },
    "tsla_forecast_app.run_trading_robot": {
      "classes": [],
      "functions": [
        "install_requirements",
        "run_trading_robot",
        "main"
      ],
      "constants": []
    },
    "tsla_forecast_app.tesla_stock_app": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "tsla_forecast_app.trading_robot_core": {
      "classes": [
        "TradingRobot"
      ],
      "functions": [
        "__init__",
        "add_strategy",
        "update_market_data",
        "generate_signals",
        "execute_trade",
        "get_portfolio_summary",
        "get_performance_metrics"
      ],
      "constants": []
    },
    "tsla_forecast_app.trading_robot_interface": {
      "classes": [
        "TradingRobotCLI",
        "TradingRobotAPI"
      ],
      "functions": [
        "create_cli_parser",
        "main",
        "__init__",
        "setup_strategies",
        "run",
        "start_trading",
        "stop_trading",
        "show_status",
        "manage_strategies",
        "list_strategies",
        "enable_strategy",
        "disable_strategy",
        "show_strategy_performance",
        "show_portfolio",
        "run_backtest",
        "__init__",
        "start_trading",
        "stop_trading",
        "get_status",
        "get_strategy_performance",
        "configure_strategies_from_config"
      ],
      "constants": []
    },
    "tsla_forecast_app.trading_robot_strategies": {
      "classes": [
        "TradingStrategy",
        "MovingAverageStrategy",
        "RSIMeanReversionStrategy",
        "BollingerBandsStrategy",
        "MomentumStrategy",
        "StrategyManager"
      ],
      "functions": [
        "__init__",
        "analyze",
        "execute_trade",
        "get_performance_summary",
        "__init__",
        "analyze",
        "__init__",
        "calculate_rsi",
        "analyze",
        "__init__",
        "calculate_bollinger_bands",
        "analyze",
        "__init__",
        "analyze",
        "__init__",
        "add_strategy",
        "remove_strategy",
        "get_strategy",
        "get_all_strategies",
        "get_enabled_strategies",
        "analyze_market",
        "get_strategy_performance",
        "reset_all_performance"
      ],
      "constants": []
    },
    "tsla_forecast_app.trading_models": {
      "classes": [
        "TradingSignal",
        "OrderType",
        "OrderStatus",
        "MarketData",
        "Order",
        "Position",
        "TradingMetrics"
      ],
      "functions": [],
      "constants": [
        "BUY",
        "SELL",
        "HOLD",
        "MARKET",
        "LIMIT",
        "STOP",
        "PENDING",
        "FILLED",
        "CANCELLED",
        "REJECTED"
      ]
    },
    "tsla_forecast_app.trading_strategies": {
      "classes": [
        "TradingStrategy",
        "MovingAverageStrategy",
        "RSITradingStrategy"
      ],
      "functions": [
        "__init__",
        "calculate_signal",
        "update_parameters",
        "__init__",
        "calculate_signal",
        "__init__",
        "calculate_signal",
        "_calculate_rsi"
      ],
      "constants": []
    },
    "tsla_forecast_app.trading_robot": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "tsla_forecast_app.modules": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "tsla_forecast_app.modules.data_worker": {
      "classes": [
        "StockDataWorker"
      ],
      "functions": [
        "__init__",
        "_load_api_keys",
        "run",
        "get_real_stock_data",
        "_get_alpha_vantage_data",
        "_get_polygon_data",
        "_get_finnhub_data",
        "_parse_alpha_vantage_data",
        "_parse_polygon_data",
        "_parse_finnhub_data",
        "get_mock_stock_data",
        "stop"
      ],
      "constants": []
    },
    "tsla_forecast_app.modules.flag_display": {
      "classes": [
        "TradingFlagsDisplay"
      ],
      "functions": [
        "__init__",
        "init_ui",
        "setup_timers",
        "generate_flags",
        "update_flags_display",
        "_set_flag_type_color",
        "_set_strength_color",
        "_set_confidence_color",
        "show_consensus",
        "refresh_flags",
        "save_flags",
        "filter_flags",
        "auto_refresh",
        "update_stock_data"
      ],
      "constants": []
    },
    "tsla_forecast_app.modules.main_app": {
      "classes": [
        "TeslaStockApp"
      ],
      "functions": [
        "create_app",
        "main",
        "__init__",
        "init_ui",
        "init_data_worker",
        "setup_timers",
        "update_stock_data",
        "refresh_data",
        "generate_forecast",
        "auto_refresh",
        "update_status",
        "log_message",
        "change_theme",
        "update_refresh_interval",
        "closeEvent"
      ],
      "constants": []
    },
    "tsla_forecast_app.modules.trading_flags": {
      "classes": [
        "FlagType",
        "FlagStrength",
        "AgentFlag",
        "TradingFlag",
        "MarketAnalysis",
        "TradingFlagEngine"
      ],
      "functions": [
        "__init__",
        "_initialize_agent_preferences",
        "analyze_market_data",
        "_calculate_rsi",
        "_calculate_macd",
        "_calculate_moving_average",
        "generate_agent_flag",
        "_determine_flag_type",
        "_determine_flag_strength",
        "_calculate_confidence",
        "_calculate_price_target",
        "_generate_reasoning",
        "generate_all_agent_flags",
        "get_consensus_flag",
        "get_active_flags",
        "get_agent_flags",
        "expire_old_flags",
        "save_flags_to_file"
      ],
      "constants": [
        "BUY",
        "SELL",
        "HOLD",
        "STRONG_BUY",
        "STRONG_SELL",
        "WEAK",
        "MODERATE",
        "STRONG",
        "VERY_STRONG",
        "AGENT_1",
        "AGENT_2",
        "AGENT_3",
        "AGENT_4",
        "AGENT_5",
        "AGENT_6",
        "AGENT_7",
        "AGENT_8"
      ]
    },
    "tsla_forecast_app.modules.ui_components": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "tsla_forecast_app.modules.v2_trading_interface": {
      "classes": [
        "V2TradingInterface"
      ],
      "functions": [
        "__init__",
        "init_ui",
        "setup_dark_theme",
        "create_menu_bar",
        "create_central_widget",
        "create_mobile_view",
        "create_status_bar",
        "setup_connections",
        "setup_timers",
        "update_trading_data",
        "update_chart_data",
        "update_status_bar",
        "update_interface",
        "new_session",
        "save_data",
        "show_dashboard",
        "show_charts",
        "show_preferences",
        "set_screen_size"
      ],
      "constants": []
    },
    "tsla_forecast_app.modules.ui_components.chart_display": {
      "classes": [
        "RealTimeChart",
        "ChartDisplayWidget"
      ],
      "functions": [
        "__init__",
        "init_ui",
        "paintEvent",
        "add_data_point",
        "set_chart_type",
        "set_show_volume",
        "set_show_indicators",
        "__init__",
        "init_ui",
        "toggle_chart",
        "start_chart",
        "stop_chart",
        "update_chart_data",
        "on_chart_type_changed",
        "on_interval_changed"
      ],
      "constants": []
    },
    "tsla_forecast_app.modules.ui_components.forecast_display": {
      "classes": [
        "ForecastDisplayWidget"
      ],
      "functions": [
        "__init__",
        "init_ui",
        "update_forecast",
        "update_agent_predictions",
        "update_analysis_status"
      ],
      "constants": []
    },
    "tsla_forecast_app.modules.ui_components.log_display": {
      "classes": [
        "LogDisplayWidget"
      ],
      "functions": [
        "__init__",
        "init_ui",
        "add_log_entry",
        "update_log_display",
        "filter_logs",
        "clear_log",
        "export_log",
        "log_info",
        "log_warning",
        "log_error",
        "log_debug"
      ],
      "constants": []
    },
    "tsla_forecast_app.modules.ui_components.professional_theme": {
      "classes": [
        "ProfessionalTheme"
      ],
      "functions": [
        "__init__",
        "get_dark_theme",
        "get_light_theme",
        "get_professional_theme",
        "apply_theme",
        "get_professional_stylesheet",
        "get_dark_stylesheet",
        "get_light_stylesheet"
      ],
      "constants": []
    },
    "tsla_forecast_app.modules.ui_components.responsive_layout": {
      "classes": [
        "ResponsiveLayout",
        "ResponsiveWidget"
      ],
      "functions": [
        "__init__",
        "init_ui",
        "create_mobile_layout",
        "create_tablet_layout",
        "create_desktop_layout",
        "resizeEvent",
        "update_layout",
        "get_layout_type",
        "switch_layout",
        "add_component",
        "get_current_layout",
        "set_breakpoints",
        "__init__",
        "create_mobile_view",
        "create_tablet_view",
        "create_desktop_view",
        "switch_to_layout",
        "resizeEvent"
      ],
      "constants": []
    },
    "tsla_forecast_app.modules.ui_components.settings_display": {
      "classes": [
        "SettingsDisplayWidget"
      ],
      "functions": [
        "__init__",
        "init_ui",
        "save_settings",
        "reset_settings",
        "on_theme_changed",
        "on_refresh_interval_changed",
        "get_settings"
      ],
      "constants": []
    },
    "tsla_forecast_app.modules.ui_components.stock_display": {
      "classes": [
        "StockDisplayWidget"
      ],
      "functions": [
        "__init__",
        "init_ui",
        "update_stock_data",
        "update_status",
        "set_refresh_callback"
      ],
      "constants": []
    },
    "tsla_forecast_app.modules.ui": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "tsla_forecast_app.modules.ui.chart_widget": {
      "classes": [
        "ChartWidget"
      ],
      "functions": [
        "__init__",
        "init_ui",
        "create_chart_controls",
        "create_chart_display",
        "create_chart_info",
        "setup_timers",
        "paintEvent",
        "draw_no_data_message",
        "draw_line_chart",
        "draw_candlestick_chart",
        "draw_volume_chart",
        "draw_macd_chart",
        "update_chart_data",
        "update_chart_info",
        "on_chart_type_changed",
        "on_timeframe_changed",
        "on_auto_update_toggled",
        "refresh_chart",
        "update_chart"
      ],
      "constants": []
    },
    "tsla_forecast_app.modules.ui.mobile_responsive": {
      "classes": [
        "ResponsiveLayout",
        "MobileResponsiveWidget",
        "MobileTradingCard",
        "ResponsiveScrollArea"
      ],
      "functions": [
        "__init__",
        "setup_responsive_styles",
        "update_screen_size",
        "__init__",
        "init_responsive_ui",
        "setup_responsive_styles",
        "add_responsive_element",
        "update_screen_size",
        "get_responsive_font_size",
        "get_responsive_spacing",
        "__init__",
        "init_ui",
        "update_data",
        "__init__",
        "setup_responsive_scroll",
        "add_responsive_widget"
      ],
      "constants": []
    },
    "tsla_forecast_app.modules.ui.trading_dashboard": {
      "classes": [
        "TradingDashboard"
      ],
      "functions": [
        "__init__",
        "init_ui",
        "create_trading_info_section",
        "create_performance_section",
        "create_quick_actions_section",
        "setup_dark_theme",
        "setup_timers",
        "update_trading_data",
        "update_performance",
        "update_display",
        "connect_signals"
      ],
      "constants": []
    },
    "migration_system": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "migration_system.backup": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "migration_system.backup.backup_manager": {
      "classes": [
        "BackupManager"
      ],
      "functions": [
        "__init__",
        "create_migration_backup",
        "restore_from_backup",
        "list_backups",
        "_calculate_checksum"
      ],
      "constants": []
    },
    "migration_system.core": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "migration_system.core.migration_controller": {
      "classes": [
        "MigrationController"
      ],
      "functions": [
        "__init__",
        "run_complete_migration",
        "get_migration_status"
      ],
      "constants": []
    },
    "migration_system.data": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "migration_system.data.data_migrator": {
      "classes": [
        "DataMigrator"
      ],
      "functions": [
        "__init__",
        "migrate_data",
        "_migrate_agent_workspaces",
        "_migrate_configuration",
        "_migrate_project_analysis"
      ],
      "constants": []
    },
    "migration_system.schema": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "migration_system.schema.schema_manager": {
      "classes": [
        "SchemaManager"
      ],
      "functions": [
        "__init__",
        "create_database_schema",
        "_create_agent_workspaces_table",
        "_create_agent_messages_table",
        "_create_discord_commands_table",
        "_create_core_systems_status_table",
        "_create_v2_compliance_audit_table",
        "_create_integration_tests_table",
        "_create_performance_indexes",
        "_create_useful_views"
      ],
      "constants": []
    },
    "migration_system.validation": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "migration_system.validation.data_validator": {
      "classes": [
        "DataValidator"
      ],
      "functions": [
        "__init__",
        "validate_existing_data",
        "validate_migration",
        "validate_data_integrity"
      ],
      "constants": []
    },
    "thea_auth.cookie_manager": {
      "classes": [
        "TheaCookieManager"
      ],
      "functions": [
        "__init__",
        "save_cookies",
        "load_cookies",
        "has_valid_cookies",
        "clear_cookies"
      ],
      "constants": [
        "SELENIUM_AVAILABLE",
        "SELENIUM_AVAILABLE"
      ]
    },
    "thea_auth.login_handler": {
      "classes": [
        "TheaLoginHandler"
      ],
      "functions": [
        "create_thea_login_handler",
        "check_thea_login_status",
        "__init__",
        "ensure_login",
        "_is_logged_in",
        "_automated_login",
        "_manual_login",
        "_is_on_thea_page",
        "_navigate_to_thea",
        "force_logout"
      ],
      "constants": [
        "SELENIUM_AVAILABLE",
        "SELENIUM_AVAILABLE"
      ]
    },
    "thea_auth": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "thea_auth.factory": {
      "classes": [],
      "functions": [
        "create_thea_login_handler",
        "check_thea_login_status"
      ],
      "constants": []
    },
    "thea_communication": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "thea_communication.automation": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "thea_communication.automation.selenium_handler": {
      "classes": [
        "SeleniumHandler"
      ],
      "functions": [
        "__init__",
        "initialize_driver",
        "ensure_authenticated",
        "_is_authenticated",
        "send_message",
        "wait_for_response",
        "cleanup"
      ],
      "constants": [
        "UNDETECTED_AVAILABLE",
        "UNDETECTED_AVAILABLE"
      ]
    },
    "thea_communication.automation.simple_manual": {
      "classes": [
        "SimpleManualHandler"
      ],
      "functions": [
        "__init__",
        "ensure_authenticated",
        "send_message",
        "wait_for_response"
      ],
      "constants": []
    },
    "thea_communication.core": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "thea_communication.core.communication_service": {
      "classes": [
        "TheaCommunicationService"
      ],
      "functions": [
        "__init__",
        "initialize_driver",
        "ensure_authenticated",
        "send_message_to_thea",
        "wait_for_thea_response",
        "capture_thea_response",
        "cleanup",
        "run_communication_cycle"
      ],
      "constants": []
    },
    "thea_communication.response": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "thea_communication.response.response_analyzer": {
      "classes": [
        "ResponseAnalyzer"
      ],
      "functions": [
        "create_analysis"
      ],
      "constants": []
    },
    "thea_communication.response.response_capturer": {
      "classes": [
        "ResponseCapturer"
      ],
      "functions": [
        "capture_response"
      ],
      "constants": []
    },
    "thea_communication.response.response_handler": {
      "classes": [
        "ResponseHandler"
      ],
      "functions": [
        "__init__",
        "capture_response",
        "_capture_selenium_response",
        "_capture_manual_response",
        "_extract_response_text",
        "_create_analysis"
      ],
      "constants": []
    },
    "web_dashboard": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "web_dashboard.api": {
      "classes": [],
      "functions": [
        "get_agents",
        "get_v3_contracts",
        "get_system_health",
        "get_configuration"
      ],
      "constants": []
    },
    "web_dashboard.websocket": {
      "classes": [
        "DashboardWebSocketServer"
      ],
      "functions": [
        "__init__",
        "_get_uptime"
      ],
      "constants": []
    },
    "src.commandresult": {
      "classes": [
        "CommandResult"
      ],
      "functions": [],
      "constants": []
    },
    "src.coordinate_agent_registry": {
      "classes": [],
      "functions": [
        "_load_coordinates"
      ],
      "constants": []
    },
    "src.agent_registry": {
      "classes": [],
      "functions": [
        "_load_coordinates"
      ],
      "constants": []
    },
    "src": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.core.base_classes": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.core.shared_imports": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.core": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.core.coherent_collaboration_cli": {
      "classes": [],
      "functions": [
        "main"
      ],
      "constants": []
    },
    "src.core.coordinate_loader": {
      "classes": [
        "CoordinateLoader"
      ],
      "functions": [
        "__init__",
        "load",
        "_load_coordinates",
        "_get_default_coordinates",
        "get_agent_coordinates",
        "get_all_coordinates",
        "get_agent_ids",
        "get_coords",
        "validate_all",
        "get_all_agents",
        "is_agent_active",
        "get_chat_coordinates"
      ],
      "constants": []
    },
    "src.core.cross_platform_database": {
      "classes": [
        "CrossPlatformDatabase",
        "CrossPlatformFileManager"
      ],
      "functions": [
        "get_platform_info",
        "is_windows",
        "is_linux",
        "is_macos",
        "__init__",
        "get_connection_string",
        "get_connection",
        "cleanup_database",
        "create_temp_database",
        "copy_database",
        "get_platform_info",
        "__init__",
        "safe_remove",
        "safe_remove_dir",
        "get_line_separator",
        "normalize_path"
      ],
      "constants": []
    },
    "src.core.cross_platform_env": {
      "classes": [],
      "functions": [
        "get_env_var",
        "set_env_var",
        "load_env_file"
      ],
      "constants": []
    },
    "src.core.cross_platform_paths": {
      "classes": [
        "CrossPlatformPaths"
      ],
      "functions": [
        "normalize_path",
        "join_paths",
        "get_config_dir",
        "get_data_dir",
        "get_log_dir",
        "get_cache_dir",
        "ensure_dir",
        "safe_remove",
        "is_windows",
        "is_linux",
        "is_macos",
        "__init__",
        "normalize_path",
        "join_paths",
        "get_home_dir",
        "get_temp_dir",
        "get_config_dir",
        "get_data_dir",
        "get_log_dir",
        "get_cache_dir",
        "ensure_dir",
        "safe_remove",
        "get_relative_path",
        "is_same_path",
        "get_file_size",
        "get_directory_size",
        "list_files",
        "get_platform_info"
      ],
      "constants": []
    },
    "src.core.design_authority": {
      "classes": [
        "DecisionSeverity",
        "DesignReview",
        "DesignAuthority"
      ],
      "functions": [
        "review_component_plan",
        "review_code_complexity",
        "__post_init__",
        "__init__",
        "review_component_plan",
        "review_code_complexity",
        "_analyze_plan",
        "_generate_recommendations",
        "_analyze_code_complexity",
        "_generate_feedback",
        "_generate_complexity_feedback",
        "_suggest_simplifications",
        "get_review_history",
        "get_knowledge_summary"
      ],
      "constants": [
        "ERROR",
        "WARNING",
        "INFO"
      ]
    },
    "src.core.knowledge_base": {
      "classes": [
        "SharedKnowledgeBase"
      ],
      "functions": [
        "get_knowledge_base",
        "get_principle",
        "get_required_principles",
        "validate_code",
        "suggest_simplification",
        "__init__",
        "design_principles",
        "code_patterns",
        "anti_patterns",
        "project_guidelines",
        "get_principle",
        "get_principles_by_category",
        "get_required_principles",
        "get_code_pattern",
        "get_simple_patterns",
        "get_anti_pattern",
        "get_critical_anti_patterns",
        "validate_code_against_principles",
        "get_guideline",
        "get_all_guidelines",
        "suggest_simplification"
      ],
      "constants": []
    },
    "src.core.knowledge_base_core": {
      "classes": [
        "PrincipleCategory",
        "DesignPrinciple",
        "CodePattern",
        "AntiPattern",
        "KnowledgeBaseCore"
      ],
      "functions": [
        "__post_init__",
        "__init__",
        "_load_design_principles",
        "_create_kiss_principle",
        "_create_yagni_principle",
        "_create_sr_principle",
        "_create_error_handling_principle",
        "_create_fail_fast_principle",
        "_create_composition_principle",
        "_load_code_patterns",
        "_create_simple_function_pattern",
        "_create_data_class_pattern",
        "_create_repository_pattern",
        "_create_service_layer_pattern",
        "_load_anti_patterns",
        "_create_god_class_anti_pattern",
        "_create_premature_optimization_anti_pattern",
        "_create_bare_except_anti_pattern",
        "_create_stringly_typed_anti_pattern",
        "_create_copy_paste_anti_pattern",
        "_load_project_guidelines",
        "get_principle",
        "get_principles_by_category",
        "get_required_principles",
        "get_code_pattern",
        "get_simple_patterns",
        "get_anti_pattern",
        "get_critical_anti_patterns",
        "validate_code_against_principles",
        "get_guideline",
        "get_all_guidelines",
        "suggest_simplification"
      ],
      "constants": [
        "SIMPLICITY",
        "MAINTAINABILITY",
        "PERFORMANCE",
        "SECURITY",
        "TESTING",
        "DOCUMENTATION"
      ]
    },
    "src.core.knowledge_base_manager": {
      "classes": [
        "KnowledgeBaseManager"
      ],
      "functions": [
        "__init__",
        "bulk_add_principles",
        "bulk_add_patterns",
        "search_knowledge",
        "filter_by_category",
        "filter_by_complexity",
        "filter_by_severity",
        "get_statistics",
        "export_knowledge",
        "import_knowledge",
        "validate_knowledge_consistency"
      ],
      "constants": []
    },
    "src.core.knowledge_base_retriever": {
      "classes": [
        "KnowledgeBaseRetriever"
      ],
      "functions": [
        "__init__",
        "search",
        "_perform_search",
        "_calculate_relevance_score",
        "_get_matched_fields",
        "_rank_results",
        "cache_result",
        "get_cached",
        "clear_cache",
        "get_search_history",
        "get_cache_stats",
        "_get_timestamp",
        "suggest_related_searches",
        "get_popular_searches"
      ],
      "constants": []
    },
    "src.core.project_registry": {
      "classes": [
        "Component",
        "DesignPattern",
        "ProjectRegistry",
        "ProjectRegistryManager"
      ],
      "functions": [
        "get_registry",
        "register_component",
        "check_component_exists",
        "validate_design_decision",
        "__post_init__",
        "__post_init__",
        "__init__",
        "load_registry",
        "save_registry",
        "_create_default_registry",
        "register_component",
        "get_component",
        "check_component_exists",
        "update_component",
        "get_approved_patterns",
        "validate_design_decision",
        "get_agent_components",
        "transfer_component_ownership",
        "get_registry_summary"
      ],
      "constants": []
    },
    "src.core.shared_error_handling": {
      "classes": [
        "SharedErrorHandler"
      ],
      "functions": [
        "error_handler",
        "safe_execute",
        "handle_async_error",
        "create_error_response",
        "log_and_continue",
        "log_and_raise",
        "handle_discord_interaction_error",
        "handle_database_error",
        "handle_network_error",
        "handle_file_operation_error",
        "handle_validation_error",
        "decorator",
        "wrapper"
      ],
      "constants": []
    },
    "src.core.shared_logging": {
      "classes": [
        "SharedLogger"
      ],
      "functions": [
        "get_module_logger",
        "log_function_entry",
        "log_function_exit",
        "log_error",
        "log_performance",
        "configure_logging",
        "get_logger",
        "log_function_call",
        "log_error_with_context",
        "log_performance"
      ],
      "constants": []
    },
    "src.core.shared_validation": {
      "classes": [
        "ValidationError",
        "SharedValidator"
      ],
      "functions": [
        "validate_required_fields",
        "validate_agent_message",
        "validate_coordinates",
        "validate_discord_config",
        "validate_v2_compliance",
        "validate_with_custom_validator",
        "validate_not_none",
        "validate_not_empty",
        "validate_string_length",
        "validate_email",
        "validate_agent_id",
        "validate_file_path",
        "validate_directory_path",
        "validate_config_dict",
        "validate_positive_number",
        "validate_range",
        "validate_enum_value"
      ],
      "constants": []
    },
    "src.core.swarm_action_protocol": {
      "classes": [
        "ActionType",
        "SwarmActionProtocol"
      ],
      "functions": [
        "break_acknowledgement_loop",
        "__init__",
        "check_acknowledgement_loop",
        "force_action",
        "_get_required_deliverables",
        "validate_action_taken"
      ],
      "constants": [
        "SWARM_ACTION_PROTOCOL",
        "IMPLEMENT",
        "DEPLOY",
        "CREATE",
        "FIX",
        "OPTIMIZE",
        "INTEGRATE",
        "TEST",
        "DOCUMENT"
      ]
    },
    "src.core.unified_coordinate_loader": {
      "classes": [
        "CoordinateSource",
        "AgentStatus",
        "AgentCoordinates",
        "CoordinateConfig",
        "UnifiedCoordinateLoader"
      ],
      "functions": [
        "create_unified_coordinate_loader",
        "__init__",
        "load_coordinates",
        "_load_primary_config",
        "_load_backup_config",
        "_load_environment_config",
        "_create_default_config",
        "get_agent_coordinates",
        "get_all_agents",
        "get_active_agents",
        "update_agent_coordinates",
        "_save_config",
        "validate_coordinates",
        "export_coordinate_report"
      ],
      "constants": [
        "PRIMARY",
        "BACKUP",
        "ENVIRONMENT",
        "ACTIVE",
        "INACTIVE",
        "ONBOARDING",
        "MAINTENANCE"
      ]
    },
    "src.core.unified_ml_pipeline": {
      "classes": [
        "ModelConfig",
        "TrainingData",
        "ModelMetrics",
        "DeploymentConfig",
        "PipelineStatus",
        "ModelType",
        "ModelConfig",
        "TrainingData",
        "PipelineMetrics",
        "UnifiedMLPipeline"
      ],
      "functions": [
        "create_unified_ml_pipeline",
        "__post_init__",
        "__post_init__",
        "to_dict",
        "__post_init__",
        "__init__",
        "_ensure_storage_path",
        "create_model",
        "prepare_training_data",
        "train_model",
        "make_prediction",
        "save_model",
        "load_model",
        "get_model_info",
        "get_pipeline_metrics",
        "validate_model_config",
        "export_model_config",
        "reset_pipeline"
      ],
      "constants": [
        "IDLE",
        "TRAINING",
        "INFERENCE",
        "ERROR",
        "COMPLETED",
        "CLASSIFICATION",
        "REGRESSION",
        "CLUSTERING",
        "RECOMMENDATION"
      ]
    },
    "src.core.pr_review_models": {
      "classes": [
        "ReviewStatus",
        "ReviewPriority",
        "CodeChange",
        "PullRequest",
        "ReviewResult"
      ],
      "functions": [
        "__post_init__"
      ],
      "constants": [
        "PENDING",
        "IN_REVIEW",
        "APPROVED",
        "REJECTED",
        "NEEDS_CHANGES",
        "LOW",
        "NORMAL",
        "HIGH",
        "URGENT"
      ]
    },
    "src.core.pr_review_protocol": {
      "classes": [],
      "functions": [
        "create_pull_request",
        "review_pull_request",
        "get_pending_reviews",
        "get_agent_prs",
        "get_review_stats",
        "start_review"
      ],
      "constants": []
    },
    "src.core.vibe_check_models": {
      "classes": [
        "VibeCheckResult",
        "VibeViolation",
        "VibeCheckReport"
      ],
      "functions": [],
      "constants": [
        "PASS",
        "FAIL",
        "WARNING"
      ]
    },
    "src.core.vibe_check_patterns": {
      "classes": [
        "VibePatternDetector"
      ],
      "functions": [
        "check_duplication",
        "check_anti_patterns"
      ],
      "constants": []
    },
    "src.core.pr_review_protocol_refactored": {
      "classes": [],
      "functions": [
        "create_pull_request",
        "review_pull_request",
        "get_pending_reviews",
        "get_agent_prs",
        "get_review_stats",
        "start_review"
      ],
      "constants": []
    },
    "src.core.pr_review_storage": {
      "classes": [
        "PRStorageManager"
      ],
      "functions": [
        "__init__",
        "load_existing_prs",
        "save_prs"
      ],
      "constants": []
    },
    "src.core.vibe_check_analyzers": {
      "classes": [
        "VibeAnalyzer"
      ],
      "functions": [
        "__init__",
        "check_complexity",
        "check_function_length",
        "check_nesting_depth",
        "check_parameter_count",
        "check_file_length",
        "_calculate_complexity",
        "_calculate_nesting_depth"
      ],
      "constants": []
    },
    "src.core.vibe_check_core": {
      "classes": [
        "VibeChecker"
      ],
      "functions": [
        "__init__",
        "check_file",
        "check_directory",
        "run_pre_commit_check",
        "_generate_summary",
        "_get_timestamp"
      ],
      "constants": []
    },
    "src.core.pr_review_core": {
      "classes": [
        "PRReviewProtocol"
      ],
      "functions": [
        "__init__",
        "_load_existing_prs",
        "_save_prs",
        "create_pull_request",
        "_assign_reviewer",
        "start_review",
        "review_pull_request",
        "_create_rejection_result",
        "_generate_suggestions",
        "_generate_review_feedback",
        "get_pending_reviews",
        "get_agent_prs",
        "get_review_stats",
        "_calculate_avg_review_time",
        "_get_common_violations"
      ],
      "constants": []
    },
    "src.core.pr_review_validators": {
      "classes": [
        "PRValidator"
      ],
      "functions": [
        "check_duplication",
        "run_vibe_check",
        "check_design_compliance",
        "check_error_handling",
        "check_documentation"
      ],
      "constants": []
    },
    "src.core.vibe_check": {
      "classes": [],
      "functions": [
        "vibe_check_file",
        "vibe_check_directory",
        "vibe_check_strict",
        "main"
      ],
      "constants": []
    },
    "src.core.vibe_check_refactored": {
      "classes": [],
      "functions": [
        "vibe_check_file",
        "vibe_check_directory",
        "vibe_check_strict",
        "main"
      ],
      "constants": []
    },
    "src.core.ssot_manager": {
      "classes": [
        "SSOTConfig",
        "SSOTManager"
      ],
      "functions": [
        "get_ssot_manager",
        "initialize_ssot",
        "__init__",
        "_load_config",
        "save_config",
        "get_agent_config",
        "set_agent_config",
        "get_system_config",
        "set_system_config",
        "get_messaging_config",
        "set_messaging_config",
        "get_quality_gates_config",
        "set_quality_gates_config",
        "get_protocol_config",
        "set_protocol_config",
        "get_database_config",
        "set_database_config",
        "get_monitoring_config",
        "set_monitoring_config",
        "validate_config",
        "get_all_config",
        "reset_config",
        "export_config",
        "import_config"
      ],
      "constants": []
    },
    "src.core.coherent_collaboration_cli_handlers": {
      "classes": [],
      "functions": [
        "handle_registry_command",
        "handle_design_command",
        "handle_vibe_command",
        "handle_pr_command",
        "handle_knowledge_command",
        "print_vibe_report"
      ],
      "constants": []
    },
    "src.core.design_authority_knowledge": {
      "classes": [],
      "functions": [
        "get_design_knowledge_base"
      ],
      "constants": []
    },
    "src.core.knowledge_base_data": {
      "classes": [],
      "functions": [
        "create_kiss_principle",
        "create_yagni_principle",
        "create_sr_principle",
        "create_error_handling_principle",
        "create_fail_fast_principle",
        "create_composition_principle",
        "create_simple_function_pattern",
        "create_data_class_pattern",
        "create_repository_pattern",
        "create_service_layer_pattern",
        "create_god_class_anti_pattern",
        "create_premature_optimization_anti_pattern",
        "create_bare_except_anti_pattern",
        "create_stringly_typed_anti_pattern",
        "create_copy_paste_anti_pattern",
        "get_project_guidelines"
      ],
      "constants": []
    },
    "src.core.cross_platform_env_core": {
      "classes": [
        "CrossPlatformEnvironment"
      ],
      "functions": [
        "__init__",
        "get_env_var",
        "set_env_var",
        "get_path_env",
        "add_to_path",
        "get_python_path",
        "get_python_version"
      ],
      "constants": []
    },
    "src.core.cross_platform_env_advanced": {
      "classes": [
        "EnvironmentConfig"
      ],
      "functions": [
        "__init__",
        "get_platform_info",
        "load_env_file",
        "get_agent_config",
        "validate_required_env_vars",
        "get_development_config"
      ],
      "constants": []
    },
    "src.core.cross_platform_env_utils": {
      "classes": [],
      "functions": [
        "get_platform_info",
        "get_agent_config",
        "get_development_config",
        "is_windows",
        "is_linux",
        "is_macos"
      ],
      "constants": []
    },
    "src.core.database": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.core.database.backup_recovery_system": {
      "classes": [
        "BackupType",
        "BackupStatus",
        "RecoveryStatus",
        "BackupConfig",
        "RecoveryConfig",
        "BackupInfo",
        "RecoveryInfo",
        "BackupRecoverySystem"
      ],
      "functions": [
        "__init__"
      ],
      "constants": [
        "FULL",
        "INCREMENTAL",
        "DIFFERENTIAL",
        "PENDING",
        "IN_PROGRESS",
        "COMPLETED",
        "FAILED",
        "VERIFIED",
        "PENDING",
        "IN_PROGRESS",
        "COMPLETED",
        "FAILED",
        "VERIFIED"
      ]
    },
    "src.core.database.data_replication_system": {
      "classes": [
        "ReplicationStatus",
        "ConflictResolutionStrategy",
        "ReplicationConfig",
        "ReplicationNode",
        "ReplicationEvent",
        "DataReplicationSystem"
      ],
      "functions": [
        "__init__",
        "_get_recent_events",
        "_calculate_checksum"
      ],
      "constants": [
        "ACTIVE",
        "PAUSED",
        "FAILED",
        "SYNCING",
        "CONFLICT",
        "LAST_WRITE_WINS",
        "FIRST_WRITE_WINS",
        "MANUAL_RESOLUTION",
        "MERGE_STRATEGY"
      ]
    },
    "src.core.database.database_monitoring_system": {
      "classes": [
        "DatabaseMonitoringSystem"
      ],
      "functions": [
        "__init__",
        "_get_overall_health_status",
        "_get_recent_metrics",
        "_get_health_summary",
        "_get_performance_summary"
      ],
      "constants": []
    },
    "src.core.database.database_monitoring_system_v2": {
      "classes": [
        "DatabaseMonitoringSystem"
      ],
      "functions": [
        "__init__",
        "_get_overall_health_status",
        "_get_recent_metrics",
        "_get_health_summary",
        "_get_performance_summary"
      ],
      "constants": []
    },
    "src.core.database.distributed_db_manager": {
      "classes": [
        "DatabaseType",
        "DatabaseConfig",
        "QueryResult",
        "DistributedDatabaseManager"
      ],
      "functions": [
        "__init__",
        "_initialize_configurations",
        "get_config",
        "add_config"
      ],
      "constants": [
        "POSTGRESQL",
        "REDIS",
        "MONGODB"
      ]
    },
    "src.core.database.monitoring": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.core.database.monitoring.alert_manager": {
      "classes": [
        "AlertLevel",
        "Alert",
        "MetricThreshold",
        "AlertManager"
      ],
      "functions": [
        "__init__",
        "_initialize_default_thresholds",
        "add_threshold",
        "remove_threshold",
        "get_thresholds",
        "update_threshold"
      ],
      "constants": [
        "INFO",
        "WARNING",
        "CRITICAL",
        "EMERGENCY"
      ]
    },
    "src.core.database.monitoring.health_checker": {
      "classes": [
        "HealthStatus",
        "HealthCheck",
        "HealthChecker"
      ],
      "functions": [
        "__init__"
      ],
      "constants": [
        "HEALTHY",
        "DEGRADED",
        "UNHEALTHY",
        "UNKNOWN"
      ]
    },
    "src.core.database.monitoring.metrics_collector": {
      "classes": [
        "MetricType",
        "DatabaseMetric",
        "MetricThreshold",
        "MetricsCollector"
      ],
      "functions": [
        "__init__",
        "_initialize_default_thresholds",
        "get_thresholds"
      ],
      "constants": [
        "COUNTER",
        "GAUGE",
        "HISTOGRAM",
        "SUMMARY"
      ]
    },
    "src.core.security": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.core.security.jwt_manager": {
      "classes": [
        "TokenPayload",
        "JWTManager"
      ],
      "functions": [
        "__post_init__",
        "__init__",
        "_generate_secret",
        "create_access_token",
        "create_refresh_token",
        "verify_token",
        "refresh_access_token",
        "get_token_info",
        "is_token_expired",
        "extract_user_id",
        "extract_agent_id",
        "extract_roles",
        "extract_permissions",
        "has_role",
        "has_permission",
        "create_agent_token",
        "validate_agent_token"
      ],
      "constants": []
    },
    "src.core.security.oauth2_provider": {
      "classes": [
        "OAuth2Client",
        "AccessToken",
        "OAuth2Provider"
      ],
      "functions": [
        "__post_init__",
        "__init__",
        "_initialize_default_client",
        "create_client",
        "validate_client",
        "generate_authorization_code",
        "exchange_code_for_token",
        "_generate_access_token",
        "validate_token",
        "revoke_token",
        "get_client_info",
        "list_clients",
        "deactivate_client"
      ],
      "constants": []
    },
    "src.core.security.security_cli": {
      "classes": [],
      "functions": [
        "security",
        "validate",
        "input",
        "analyze",
        "static",
        "password",
        "hash",
        "verify",
        "session",
        "create",
        "validate",
        "revoke",
        "audit",
        "_generate_recommendations"
      ],
      "constants": []
    },
    "src.core.security.security_manager": {
      "classes": [
        "SecurityLevel",
        "SecurityPolicy",
        "SecurityManager"
      ],
      "functions": [
        "__post_init__",
        "__init__",
        "_initialize_default_policies",
        "hash_password",
        "verify_password",
        "check_account_lockout",
        "record_failed_attempt",
        "reset_failed_attempts",
        "_get_user_policy",
        "create_session",
        "validate_session",
        "revoke_session",
        "create_oauth2_client",
        "oauth2_authorize",
        "oauth2_token_exchange",
        "validate_oauth2_token",
        "get_security_policy",
        "update_security_policy",
        "get_active_sessions",
        "cleanup_expired_sessions"
      ],
      "constants": [
        "LOW",
        "MEDIUM",
        "HIGH",
        "CRITICAL"
      ]
    },
    "src.core.tracing": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.core.tracing.error_tracker": {
      "classes": [
        "ErrorSeverity",
        "ErrorCategory",
        "ErrorInfo",
        "ErrorStats",
        "ErrorTracker",
        "ErrorHandler"
      ],
      "functions": [
        "__init__",
        "track_error",
        "track_custom_error",
        "resolve_error",
        "get_error",
        "get_errors_by_severity",
        "get_errors_by_category",
        "get_errors_by_user",
        "get_errors_by_agent",
        "get_recent_errors",
        "get_error_statistics",
        "get_error_trends",
        "export_errors",
        "clear_resolved_errors",
        "__init__",
        "handle_exception",
        "handle_database_error",
        "handle_network_error",
        "handle_auth_error"
      ],
      "constants": [
        "LOW",
        "MEDIUM",
        "HIGH",
        "CRITICAL",
        "SYSTEM",
        "DATABASE",
        "NETWORK",
        "AUTHENTICATION",
        "VALIDATION",
        "BUSINESS_LOGIC",
        "EXTERNAL_API",
        "UNKNOWN"
      ]
    },
    "src.core.tracing.jaeger_tracer": {
      "classes": [
        "TraceConfig",
        "JaegerTracer",
        "TraceManager"
      ],
      "functions": [
        "__init__",
        "_setup_tracer",
        "_instrument_libraries",
        "trace_span",
        "trace_function",
        "trace_async_function",
        "add_span_tags",
        "record_event",
        "set_span_status",
        "get_trace_id",
        "get_span_id",
        "create_child_span",
        "shutdown",
        "__init__",
        "_initialize_default_tracer",
        "get_tracer",
        "create_service_tracer",
        "shutdown_all",
        "decorator",
        "decorator",
        "wrapper"
      ],
      "constants": []
    },
    "src.core.tracing.performance_monitor": {
      "classes": [
        "MetricType",
        "Metric",
        "PerformanceStats",
        "PerformanceMonitor",
        "PerformanceDecorator"
      ],
      "functions": [
        "__init__",
        "start_monitoring",
        "stop_monitoring",
        "_monitor_loop",
        "_collect_system_metrics",
        "_create_metric",
        "record_custom_metric",
        "record_timing",
        "record_counter",
        "get_current_metrics",
        "get_metrics_by_name",
        "get_performance_stats",
        "get_average_metrics",
        "get_performance_summary",
        "export_metrics",
        "clear_old_metrics",
        "__init__",
        "__call__",
        "decorator",
        "wrapper"
      ],
      "constants": [
        "COUNTER",
        "GAUGE",
        "HISTOGRAM",
        "TIMER"
      ]
    },
    "src.core.tracing.request_tracker": {
      "classes": [
        "RequestStatus",
        "RequestInfo",
        "RequestTracker"
      ],
      "functions": [
        "__init__",
        "start_request",
        "update_request_status",
        "complete_request",
        "get_request_info",
        "get_active_requests",
        "get_completed_requests",
        "get_requests_by_user",
        "get_requests_by_agent",
        "get_request_statistics",
        "cleanup_old_requests",
        "export_request_data"
      ],
      "constants": [
        "PENDING",
        "PROCESSING",
        "COMPLETED",
        "FAILED",
        "TIMEOUT"
      ]
    },
    "src.core.config": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.core.config.unified_config_manager": {
      "classes": [
        "ConfigValidationError",
        "UnifiedConfigManager"
      ],
      "functions": [
        "get_config",
        "set_config",
        "reload_config",
        "save_config",
        "__init__",
        "_load_config",
        "_apply_env_overrides",
        "_convert_env_value",
        "_get_expected_type",
        "_set_nested_value",
        "_validate_config",
        "_validate_section",
        "_get_default_config",
        "get",
        "set",
        "reload",
        "save",
        "get_all",
        "is_modified"
      ],
      "constants": [
        "CONFIG_SCHEMA"
      ]
    },
    "src.core.task": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.core.task.priority_scheduler": {
      "classes": [
        "TaskPriority",
        "TaskStatus",
        "Task",
        "PriorityScheduler"
      ],
      "functions": [
        "submit_task",
        "cancel_task",
        "get_task_status",
        "get_task_stats",
        "__init__",
        "_start_workers",
        "_worker_loop",
        "_get_next_task",
        "_is_task_ready",
        "_execute_task",
        "_get_task_handler",
        "submit_task",
        "cancel_task",
        "get_task_status",
        "get_task_stats",
        "shutdown"
      ],
      "constants": [
        "CRITICAL",
        "HIGH",
        "MEDIUM",
        "LOW",
        "BACKGROUND",
        "PENDING",
        "RUNNING",
        "COMPLETED",
        "FAILED",
        "RETRYING",
        "CANCELLED",
        "BLOCKED"
      ]
    },
    "src.core.prompts": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.core.prompts.aletheia_manager": {
      "classes": [
        "AletheiaPromptManager"
      ],
      "functions": [
        "generate_prompt",
        "create_template",
        "update_template",
        "delete_template",
        "list_templates",
        "get_template_content",
        "update_memory",
        "get_memory",
        "clear_memory",
        "get_prompt_stats",
        "__init__",
        "_load_memory_cache",
        "_save_memory_cache",
        "_get_template",
        "generate_prompt",
        "create_template",
        "update_template",
        "delete_template",
        "list_templates",
        "get_template_content",
        "update_memory",
        "get_memory",
        "clear_memory",
        "get_stats"
      ],
      "constants": []
    },
    "src.core.memory": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.core.memory.persistent_memory": {
      "classes": [
        "PersistentMemoryManager"
      ],
      "functions": [
        "set_memory",
        "get_memory",
        "delete_memory",
        "memory_exists",
        "list_memory_keys",
        "get_memory_stats",
        "cleanup_memory",
        "clear_memory",
        "__init__",
        "_init_database",
        "_compress_data",
        "_decompress_data",
        "set",
        "get",
        "delete",
        "exists",
        "list_keys",
        "get_stats",
        "cleanup",
        "clear"
      ],
      "constants": []
    },
    "src.core.resource_management": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.core.resource_management.resource_registry": {
      "classes": [
        "ResourceRegistry"
      ],
      "functions": [
        "get_registry",
        "__init__",
        "register",
        "cleanup_all",
        "get_stats"
      ],
      "constants": []
    },
    "src.core.resource_management.thread_manager": {
      "classes": [
        "ThreadManager"
      ],
      "functions": [
        "get_thread_manager",
        "__init__",
        "start_thread",
        "submit_task",
        "stop_all",
        "get_stats"
      ],
      "constants": []
    },
    "src.core.resource_management.sqlite_manager": {
      "classes": [
        "SQLiteConnectionManager"
      ],
      "functions": [
        "get_sqlite_manager",
        "__init__",
        "connection",
        "close_all",
        "get_stats"
      ],
      "constants": []
    },
    "src.services.discord_devlog_service": {
      "classes": [
        "DiscordDevlogService"
      ],
      "functions": [
        "create_devlog_sync",
        "__init__",
        "_load_agent_channels",
        "get_agent_channel_id",
        "create_devlog",
        "_format_devlog_content"
      ],
      "constants": []
    },
    "src.services.event_format": {
      "classes": [],
      "functions": [
        "iso_now",
        "cycle_done",
        "blocker",
        "ssot_validation",
        "integration_scan"
      ],
      "constants": []
    },
    "src.services": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.agent_devlog_automation": {
      "classes": [
        "AgentDevlogAutomation"
      ],
      "functions": [
        "__init__"
      ],
      "constants": [
        "DISCORD_AVAILABLE",
        "DISCORD_AVAILABLE"
      ]
    },
    "src.services.discord_bot_integrated": {
      "classes": [
        "IntegratedDiscordBotService"
      ],
      "functions": [
        "__init__",
        "_load_configuration",
        "get_status"
      ],
      "constants": []
    },
    "src.services.agent_devlog_posting": {
      "classes": [
        "AgentDevlogPoster"
      ],
      "functions": [
        "__init__"
      ],
      "constants": []
    },
    "src.services.aletheia_prompt_manager": {
      "classes": [
        "PromptStatus",
        "PromptType",
        "PromptMetadata",
        "PromptOptimization",
        "PromptStorage",
        "PromptOptimizer",
        "PromptVersionControl",
        "PromptAnalytics",
        "PromptSecurity",
        "AletheiaPromptManager"
      ],
      "functions": [
        "main",
        "__init__",
        "_load_prompts",
        "store_prompt",
        "get_prompt",
        "list_prompts",
        "__init__",
        "optimize_prompt",
        "_apply_optimizations",
        "_calculate_improvement",
        "__init__",
        "create_version",
        "get_version",
        "get_current_version",
        "__init__",
        "track_usage",
        "record_performance",
        "get_analytics",
        "__init__",
        "_generate_key",
        "set_access",
        "check_access",
        "encrypt_content",
        "decrypt_content",
        "__init__",
        "store_prompt",
        "get_prompt",
        "optimize_prompt",
        "get_analytics",
        "list_prompts"
      ],
      "constants": [
        "DRAFT",
        "ACTIVE",
        "ARCHIVED",
        "DEPRECATED",
        "SYSTEM",
        "USER",
        "ASSISTANT",
        "TEMPLATE"
      ]
    },
    "src.services.coordinate_manager": {
      "classes": [
        "CoordinateOperation",
        "CoordinateFilter",
        "CoordinateRange",
        "CoordinateBatch",
        "CoordinateCalculator",
        "CoordinateFilter",
        "CoordinateBatchProcessor"
      ],
      "functions": [
        "main",
        "__init__",
        "calculate_distance",
        "calculate_angle",
        "normalize_coordinate",
        "interpolate_coordinates",
        "__init__",
        "add_filter",
        "apply_filters",
        "_is_in_range",
        "__init__",
        "add_batch",
        "process_batch",
        "_add_coordinates",
        "_subtract_coordinates",
        "_multiply_coordinates",
        "_divide_coordinates",
        "_calculate_distance",
        "_normalize_coordinate",
        "get_processing_stats"
      ],
      "constants": [
        "ADD",
        "SUBTRACT",
        "MULTIPLY",
        "DIVIDE",
        "DISTANCE",
        "NORMALIZE",
        "BY_TYPE",
        "BY_SYSTEM",
        "BY_RANGE",
        "BY_TIMESTAMP"
      ]
    },
    "src.services.devlog_analytics_api": {
      "classes": [
        "DevlogAnalyticsAPI"
      ],
      "functions": [
        "__init__",
        "_setup_routes",
        "_generate_analytics",
        "_get_export_data",
        "_get_agents_data",
        "_get_trends_data",
        "_get_top_agents",
        "_get_agent_role",
        "_export_json",
        "_export_csv",
        "_export_excel",
        "run",
        "get_devlogs",
        "get_devlog_analytics",
        "export_devlogs",
        "get_agents",
        "get_trends"
      ],
      "constants": []
    },
    "src.services.devlog_storytelling_service": {
      "classes": [
        "StoryChapter",
        "DevlogEntry",
        "DevlogStorytellingService"
      ],
      "functions": [
        "main",
        "__init__",
        "_load_style_parameters",
        "_create_default_style_config",
        "_ensure_directories",
        "process_devlog_batch",
        "_load_recent_devlogs",
        "_analyze_devlog_batch",
        "_create_story_chapter",
        "_generate_chapter_title",
        "_write_story_content",
        "_create_opening_hook",
        "_convert_devlog_to_narrative",
        "_create_resolution",
        "_create_next_chapter_setup",
        "_analyze_character_progressions",
        "_analyze_world_developments",
        "_save_story_chapter",
        "_update_character_registry",
        "_update_world_rulebook"
      ],
      "constants": []
    },
    "src.services.discord_line_emitter": {
      "classes": [
        "DiscordLineEmitter"
      ],
      "functions": [
        "__init__",
        "_get_webhook"
      ],
      "constants": []
    },
    "src.services.github_protocol_models": {
      "classes": [
        "GitHubOperationType",
        "GitHubPermissionLevel",
        "GitHubOperationStatus",
        "GitHubAgentPermission",
        "GitHubOperation",
        "GitHubAuditLog",
        "GitHubRepositoryConfig",
        "GitHubWorkflowTemplate",
        "GitHubProtocolDatabase"
      ],
      "functions": [
        "create_github_protocol_db",
        "__post_init__",
        "__init__",
        "grant_permission",
        "revoke_permission",
        "check_permission",
        "create_operation",
        "update_operation_status",
        "get_agent_operations",
        "get_repository_config",
        "set_repository_config",
        "create_workflow_template",
        "get_workflow_template",
        "increment_template_usage",
        "_log_audit",
        "get_audit_logs",
        "export_data",
        "import_data"
      ],
      "constants": [
        "CREATE_REPOSITORY",
        "DELETE_REPOSITORY",
        "CREATE_ISSUE",
        "UPDATE_ISSUE",
        "CLOSE_ISSUE",
        "CREATE_PULL_REQUEST",
        "MERGE_PULL_REQUEST",
        "CREATE_BRANCH",
        "DELETE_BRANCH",
        "CREATE_FILE",
        "UPDATE_FILE",
        "DELETE_FILE",
        "SEARCH_REPOSITORIES",
        "LIST_ISSUES",
        "LIST_PULL_REQUESTS",
        "READ",
        "WRITE",
        "ADMIN",
        "OWNER",
        "PENDING",
        "IN_PROGRESS",
        "COMPLETED",
        "FAILED",
        "CANCELLED"
      ]
    },
    "src.services.github_protocol_service": {
      "classes": [
        "GitHubProtocolService"
      ],
      "functions": [
        "create_github_protocol_service",
        "__init__",
        "_initialize_default_configs",
        "grant_agent_permission",
        "check_agent_permission",
        "create_repository",
        "create_issue",
        "create_pull_request",
        "create_file",
        "create_branch",
        "get_agent_operations",
        "get_audit_logs",
        "create_workflow_template",
        "get_workflow_template",
        "set_repository_config",
        "get_repository_config",
        "export_protocol_data",
        "import_protocol_data"
      ],
      "constants": []
    },
    "src.services.multichat_session_demo": {
      "classes": [
        "MultichatSessionDemo"
      ],
      "functions": [
        "main",
        "__init__",
        "create_demo_session",
        "simulate_chat_messages",
        "add_message",
        "demonstrate_persistence",
        "demonstrate_storage_options",
        "demonstrate_cleanup",
        "run_demo"
      ],
      "constants": []
    },
    "src.services.multichat_session_persistence": {
      "classes": [
        "ChatMessage",
        "ChatSession",
        "SessionPersistence"
      ],
      "functions": [
        "__init__",
        "init_storage",
        "init_json_storage",
        "init_sqlite_storage",
        "init_memory_storage",
        "create_session",
        "save_session",
        "save_session_json",
        "save_session_sqlite",
        "save_session_memory",
        "get_session",
        "get_session_json",
        "get_session_sqlite",
        "get_session_memory",
        "add_message",
        "save_message_json",
        "save_message_sqlite",
        "save_message_memory",
        "get_messages",
        "get_messages_json",
        "get_messages_sqlite",
        "get_messages_memory",
        "cleanup_old_sessions",
        "cleanup_json_sessions",
        "cleanup_sqlite_sessions",
        "cleanup_memory_sessions",
        "load_json_data",
        "save_json_data",
        "close"
      ],
      "constants": []
    },
    "src.services.persistent_memory": {
      "classes": [
        "PersistentMemory"
      ],
      "functions": [
        "main",
        "__init__",
        "store_memory",
        "retrieve_memory",
        "search_memories",
        "get_memories_by_category",
        "list_memories"
      ],
      "constants": []
    },
    "src.services.secret_store": {
      "classes": [
        "SecretStore"
      ],
      "functions": [
        "_load",
        "_save",
        "set_webhook",
        "get_webhook",
        "delete_webhook",
        "list_webhooks",
        "get_webhook_url"
      ],
      "constants": [
        "DEFAULT_DIR",
        "SECRET_FILE"
      ]
    },
    "src.services.service_manager": {
      "classes": [
        "ServiceManager"
      ],
      "functions": [
        "get_service_manager",
        "get_service_status",
        "signal_handler",
        "__init__",
        "_store_health_report",
        "_log_service_status",
        "get_service_status"
      ],
      "constants": []
    },
    "src.services.social_media_integration": {
      "classes": [
        "SocialMediaIntegrationService"
      ],
      "functions": [
        "get_social_media_status",
        "__init__",
        "get_status"
      ],
      "constants": []
    },
    "src.services.swarm_intelligence_coordination": {
      "classes": [
        "DecisionType",
        "AgentRole",
        "SwarmDecision",
        "SwarmAgent",
        "SwarmMessage",
        "SwarmIntelligenceCoordination"
      ],
      "functions": [
        "__init__"
      ],
      "constants": [
        "TASK_ASSIGNMENT",
        "CONFLICT_RESOLUTION",
        "ARCHITECTURE_CHANGE",
        "EMERGENCY_RESPONSE",
        "PERFORMANCE_OPTIMIZATION",
        "CAPTAIN",
        "SPECIALIST",
        "COORDINATOR",
        "ANALYST",
        "EXECUTOR"
      ]
    },
    "src.services.v3_autonomous_workflow_system": {
      "classes": [
        "V3Task",
        "V3Agent",
        "V3AutonomousWorkflowSystem"
      ],
      "functions": [
        "__post_init__",
        "__post_init__",
        "__init__"
      ],
      "constants": []
    },
    "src.services.enhanced_onboarding": {
      "classes": [
        "EnhancedOnboardingService"
      ],
      "functions": [
        "main",
        "__init__",
        "_load_coordinates",
        "get_agent_coordinates",
        "create_onboarding_message",
        "execute_enhanced_onboarding",
        "onboard_all_active_agents"
      ],
      "constants": []
    },
    "src.services.soft_onboarding": {
      "classes": [
        "SoftOnboardingService"
      ],
      "functions": [
        "main",
        "__init__",
        "_load_coordinates",
        "get_agent_coordinates",
        "create_soft_onboarding_message",
        "execute_soft_onboarding",
        "soft_onboard_all_active_agents"
      ],
      "constants": []
    },
    "src.services.messaging_models": {
      "classes": [
        "MessagePriority",
        "MessageStatus",
        "MessageType",
        "Message",
        "AgentStatus",
        "MessagingMetrics"
      ],
      "functions": [],
      "constants": [
        "LOW",
        "NORMAL",
        "HIGH",
        "URGENT",
        "PENDING",
        "SENT",
        "DELIVERED",
        "FAILED",
        "ACKNOWLEDGED",
        "TEXT",
        "COMMAND",
        "STATUS",
        "COORDINATION",
        "ONBOARDING"
      ]
    },
    "src.services.consolidated_messaging_service_core": {
      "classes": [
        "CoordinationRequest",
        "MessageProtocolChecker",
        "AgentCoordinatesLoader",
        "AgentStatusChecker",
        "ConsolidatedMessagingServiceCore"
      ],
      "functions": [
        "__init__",
        "to_dict",
        "__init__",
        "check_violations",
        "__init__",
        "load",
        "__init__",
        "is_active",
        "__init__",
        "track_coordination_request",
        "check_response_protocol",
        "is_agent_active",
        "get_agent_coordinates",
        "get_service_status",
        "cleanup_memory",
        "get_memory_status"
      ],
      "constants": [
        "ENHANCED_VALIDATION_AVAILABLE",
        "MEMORY_MANAGEMENT_AVAILABLE",
        "ENHANCED_VALIDATION_AVAILABLE",
        "MEMORY_MANAGEMENT_AVAILABLE"
      ]
    },
    "src.services.consolidated_messaging_core": {
      "classes": [
        "ConsolidatedMessagingService"
      ],
      "functions": [
        "__init__",
        "send_message",
        "_send_via_pyautogui",
        "get_agent_status",
        "update_agent_status",
        "get_messaging_metrics",
        "stall_agent",
        "unstall_agent"
      ],
      "constants": [
        "PYAUTOGUI_AVAILABLE",
        "PYAUTOGUI_AVAILABLE"
      ]
    },
    "src.services.consolidated_messaging_service_utils": {
      "classes": [
        "MessageFormatter",
        "MessageValidator",
        "MessageSender",
        "AgentOnboarder"
      ],
      "functions": [
        "create_message_formatter",
        "create_message_validator",
        "create_message_sender",
        "create_agent_onboarder",
        "format_a2a_message",
        "get_quality_guidelines",
        "__init__",
        "validate_before_paste",
        "__init__",
        "paste_to_coords",
        "__init__",
        "get_agent_default_role",
        "create_onboarding_message"
      ],
      "constants": []
    },
    "src.services.consolidated_messaging_service": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.consolidated_messaging_service_main": {
      "classes": [
        "ConsolidatedMessagingService"
      ],
      "functions": [
        "build_parser",
        "main",
        "__init__",
        "get_agent_coordinates",
        "send_message",
        "broadcast_message",
        "_create_devlog_entry",
        "stall_agent",
        "unstall_agent",
        "hard_onboard_agent",
        "hard_onboard_all_agents"
      ],
      "constants": []
    },
    "src.services.persistent_memory_core": {
      "classes": [
        "MemoryType",
        "MemoryPriority",
        "MemoryMetadata",
        "MemoryRelationship",
        "MemoryStorage",
        "MemoryCompression",
        "MemorySecurity"
      ],
      "functions": [
        "__init__",
        "_load_memories",
        "store_memory",
        "get_memory",
        "list_memories",
        "__init__",
        "compress_memory",
        "decompress_memory",
        "__init__",
        "_generate_key",
        "set_access",
        "check_access",
        "encrypt_content",
        "decrypt_content"
      ],
      "constants": [
        "FACTUAL",
        "PROCEDURAL",
        "EPISODIC",
        "SEMANTIC",
        "LOW",
        "NORMAL",
        "HIGH",
        "CRITICAL"
      ]
    },
    "src.services.persistent_memory_advanced": {
      "classes": [
        "MemoryRetrieval",
        "MemoryOrganization"
      ],
      "functions": [
        "__init__",
        "search_memories",
        "_calculate_relevance_score",
        "__init__",
        "organize_memory",
        "get_memories_by_category",
        "get_memories_by_hierarchy"
      ],
      "constants": []
    },
    "src.services.messaging.broadcast": {
      "classes": [],
      "functions": [
        "broadcast"
      ],
      "constants": []
    },
    "src.services.messaging.coordinates": {
      "classes": [
        "Mock"
      ],
      "functions": [
        "get_coordinate_loader",
        "list_agents",
        "get_agent_coordinates",
        "load_all_active_coords",
        "get_all_agents",
        "is_agent_active",
        "get_chat_coordinates"
      ],
      "constants": []
    },
    "src.services.messaging.history": {
      "classes": [],
      "functions": [
        "show"
      ],
      "constants": []
    },
    "src.services.messaging.onboarding_bridge": {
      "classes": [],
      "functions": [
        "hard_onboarding"
      ],
      "constants": []
    },
    "src.services.messaging.task_handlers": {
      "classes": [],
      "functions": [
        "claim_task",
        "handle_claim",
        "handle_complete"
      ],
      "constants": []
    },
    "src.services.messaging.thea_handlers": {
      "classes": [],
      "functions": [
        "send_to_thea"
      ],
      "constants": []
    },
    "src.services.messaging.agent_context": {
      "classes": [
        "AgentContextDetector"
      ],
      "functions": [
        "get_current_agent",
        "set_agent_context",
        "clear_agent_context",
        "__init__",
        "get_current_agent",
        "_detect_agent_context",
        "_detect_from_environment",
        "_detect_from_workspace",
        "_detect_from_config",
        "_detect_from_process",
        "_is_valid_agent_id",
        "_extract_agent_from_path",
        "_read_agent_from_config",
        "_extract_agent_from_string",
        "set_agent_context",
        "clear_context"
      ],
      "constants": []
    },
    "src.services.messaging.intelligent_coordinator": {
      "classes": [
        "IntelligentAgentCoordinator"
      ],
      "functions": [
        "__init__",
        "coordinate_task",
        "optimize_coordination",
        "get_agent_profile",
        "route_task",
        "get_performance_metrics",
        "analyze_coordination_patterns",
        "recommend_coordination_strategy",
        "update_agent_capabilities",
        "get_coordination_status"
      ],
      "constants": []
    },
    "src.services.messaging.intelligent_messaging": {
      "classes": [
        "IntelligentMessagingService"
      ],
      "functions": [
        "__init__",
        "send_message",
        "broadcast_message",
        "_learn_from_message",
        "_learn_from_broadcast",
        "_get_message_suggestions",
        "_get_broadcast_insights",
        "_suggest_optimal_timing",
        "_suggest_message_optimization",
        "_calculate_success_probability",
        "_get_communication_history",
        "_suggest_message_format",
        "_get_response_patterns",
        "_analyze_response_types",
        "get_agent_communication_intelligence",
        "_calculate_communication_effectiveness",
        "_get_optimal_strategies"
      ],
      "constants": []
    },
    "src.services.messaging.models_optimized": {
      "classes": [
        "MessageType",
        "MessagePriority",
        "MessageTag",
        "Message",
        "MessageConfig",
        "MessageResult",
        "MessageUtils"
      ],
      "functions": [
        "map_priority",
        "map_tag",
        "__init__",
        "__init__",
        "__init__",
        "create_message",
        "format_message",
        "validate_message"
      ],
      "constants": [
        "PRIORITY_MAP",
        "TAG_MAP",
        "TEXT",
        "BROADCAST",
        "ONBOARDING",
        "AGENT_TO_AGENT",
        "LOW",
        "NORMAL",
        "HIGH",
        "URGENT",
        "GENERAL",
        "COORDINATION",
        "TASK",
        "STATUS"
      ]
    },
    "src.services.messaging.multichat_response": {
      "classes": [
        "MultichatResponseSystem"
      ],
      "functions": [
        "multichat_respond",
        "multichat_start",
        "multichat_broadcast",
        "multichat_end",
        "multichat_join",
        "__init__",
        "respond_to_message",
        "start_multichat_session",
        "join_multichat_session",
        "broadcast_to_multichat",
        "end_multichat_session",
        "get_chat_history",
        "get_active_chats",
        "_format_response_with_context",
        "_create_invitation_message",
        "_track_response",
        "_learn_from_response"
      ],
      "constants": []
    },
    "src.services.messaging.project_update_cli": {
      "classes": [],
      "functions": [
        "build_parser",
        "parse_agents",
        "parse_metadata",
        "main"
      ],
      "constants": []
    },
    "src.services.messaging.project_update_system": {
      "classes": [
        "ProjectUpdateSystem"
      ],
      "functions": [
        "__init__",
        "send_project_update",
        "send_milestone_notification",
        "send_system_status_update",
        "send_v2_compliance_update",
        "send_documentation_cleanup_update",
        "send_feature_announcement",
        "_format_update_message",
        "_record_update",
        "get_update_history",
        "get_update_statistics"
      ],
      "constants": []
    },
    "src.services.messaging.workflow_integration": {
      "classes": [
        "MessagingWorkflowIntegration"
      ],
      "functions": [
        "workflow_send_message",
        "workflow_coordinate_task",
        "workflow_request_help",
        "workflow_status_update",
        "workflow_task_completion",
        "__init__",
        "workflow_send_message",
        "workflow_coordinate_task",
        "workflow_request_help",
        "workflow_status_update",
        "workflow_task_completion"
      ],
      "constants": []
    },
    "src.services.messaging.message_validator": {
      "classes": [
        "MessageValidator"
      ],
      "functions": [
        "__init__",
        "validate_agent_id",
        "validate_message_content",
        "validate_priority",
        "validate_from_agent",
        "validate_coordinates",
        "validate_send_message_params",
        "validate_broadcast_params",
        "validate_onboarding_params",
        "sanitize_message",
        "get_validation_summary"
      ],
      "constants": []
    },
    "src.services.messaging.messaging_core": {
      "classes": [
        "MessagingCore"
      ],
      "functions": [
        "__init__",
        "_load_coordinates",
        "get_agent_coordinates",
        "get_agent_info",
        "list_agents",
        "validate_agent_id",
        "get_agent_status",
        "create_message_metadata",
        "format_message",
        "log_message_delivery",
        "get_service_status"
      ],
      "constants": []
    },
    "src.services.messaging.coordination_tracker": {
      "classes": [
        "CoordinationTracker"
      ],
      "functions": [
        "__init__",
        "track_coordination_request",
        "acknowledge_request",
        "mark_request_responded",
        "mark_request_completed",
        "check_response_protocol",
        "get_active_requests",
        "get_request_status",
        "cleanup_completed_requests",
        "get_coordination_stats"
      ],
      "constants": []
    },
    "src.services.messaging.pyautogui_handler": {
      "classes": [
        "PyAutoGUIHandler"
      ],
      "functions": [
        "__init__",
        "is_available",
        "focus_agent_window",
        "clear_input_area",
        "create_new_tab",
        "send_message_content",
        "send_message_to_agent",
        "send_bulk_messages",
        "get_screen_info"
      ],
      "constants": [
        "PYAUTOGUI_AVAILABLE",
        "PYAUTOGUI_AVAILABLE"
      ]
    },
    "src.services.messaging": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.messaging.enhanced_message_validator": {
      "classes": [
        "EnhancedMessageValidator",
        "EnhancedPyAutoGUIHandler"
      ],
      "functions": [
        "enhance_pyautogui_handler_with_validation",
        "__init__",
        "validate_message_for_paste",
        "test_clipboard_functionality",
        "validate_and_prepare_for_paste",
        "get_paste_alternative_strategy",
        "validate_coordinates",
        "get_validation_summary",
        "__init__",
        "send_message_content_with_validation"
      ],
      "constants": [
        "PYPERCLIP_AVAILABLE",
        "PYPERCLIP_AVAILABLE"
      ]
    },
    "src.services.messaging.enhanced_pyautogui_handler": {
      "classes": [
        "EnhancedPyAutoGUIHandler"
      ],
      "functions": [
        "__init__",
        "is_available",
        "validate_coordinates",
        "focus_agent_window",
        "clear_input_area",
        "create_new_tab",
        "send_message_content_with_validation",
        "_try_direct_paste",
        "_try_clear_and_paste",
        "_try_select_all_and_paste",
        "_send_message_by_typing",
        "_type_with_line_breaks",
        "send_message_to_agent_with_validation",
        "send_bulk_messages_with_validation",
        "get_screen_info",
        "test_messaging_functionality"
      ],
      "constants": [
        "PYAUTOGUI_AVAILABLE",
        "PYAUTOGUI_AVAILABLE"
      ]
    },
    "src.services.messaging.memory_leak_analyzer": {
      "classes": [
        "MemoryLeakDetector",
        "ResourceManager",
        "FileHandleManager",
        "MessagingSystemMemoryAnalyzer"
      ],
      "functions": [
        "__init__",
        "take_snapshot",
        "detect_leaks",
        "_get_memory_usage",
        "__init__",
        "register_resource",
        "unregister_resource",
        "cleanup_expired_resources",
        "get_resource_stats",
        "__init__",
        "managed_file",
        "cleanup_stale_handles",
        "get_handle_stats",
        "__init__",
        "analyze_messaging_system",
        "_analyze_messaging_components",
        "_analyze_pyautogui_handler",
        "_analyze_message_validator",
        "_analyze_coordination_tracker",
        "_analyze_enhanced_validator",
        "_generate_recommendations",
        "cleanup_system"
      ],
      "constants": []
    },
    "src.services.messaging.memory_leak_fixes": {
      "classes": [
        "CoordinationRequestManager",
        "PyAutoGUIResourceManager",
        "FileResourceManager",
        "MemoryLeakFixer"
      ],
      "functions": [
        "initialize_memory_management",
        "cleanup_memory_resources",
        "get_memory_status",
        "__init__",
        "add_request",
        "get_request",
        "_cleanup_old_requests",
        "periodic_cleanup",
        "__init__",
        "managed_session",
        "_create_session",
        "_cleanup_session",
        "cleanup_stale_sessions",
        "__init__",
        "managed_file",
        "cleanup_stale_files",
        "__init__",
        "start_cleanup_service",
        "stop_cleanup_service",
        "_cleanup_loop",
        "get_memory_stats",
        "force_cleanup"
      ],
      "constants": []
    },
    "src.services.messaging.memory_leak_analysis_report": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.messaging.intelligent_coordinator_models": {
      "classes": [
        "CoordinationTask",
        "AgentProfile",
        "CoordinationPlan",
        "CoordinationResult",
        "SwarmIntelligence",
        "TaskRouting",
        "PerformanceMetrics"
      ],
      "functions": [],
      "constants": []
    },
    "src.services.messaging.intelligent_coordinator_core": {
      "classes": [
        "IntelligentCoordinatorCore"
      ],
      "functions": [
        "__init__",
        "find_expert_agents",
        "get_coordination_patterns",
        "create_coordination_plan",
        "execute_coordination",
        "optimize_coordination",
        "_has_required_skills",
        "_select_best_agents",
        "_determine_strategy",
        "_estimate_duration",
        "_calculate_success_probability",
        "_send_coordination_message",
        "_monitor_coordination",
        "_calculate_metrics",
        "_calculate_pattern_success_rate",
        "_generate_recommendations",
        "_get_current_time"
      ],
      "constants": []
    },
    "src.services.messaging.core": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.messaging.core.messaging_service": {
      "classes": [
        "MessagingService"
      ],
      "functions": [
        "__init__",
        "send_message",
        "broadcast_message",
        "get_available_agents",
        "_get_quality_guidelines",
        "_format_a2a_message",
        "_paste_to_coords",
        "_is_agent_active"
      ],
      "constants": []
    },
    "src.services.messaging.core.coordinate_loader": {
      "classes": [
        "CoordinateLoader"
      ],
      "functions": [
        "__init__",
        "load",
        "_load_coordinates",
        "_get_default_coordinates",
        "get_agent_coordinates",
        "get_all_coordinates",
        "get_agent_ids",
        "get_coords",
        "validate_all"
      ],
      "constants": []
    },
    "src.services.messaging.broadcast_service": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.messaging.cli": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.messaging.cli.messaging_cli_clean": {
      "classes": [
        "MessagingCLI"
      ],
      "functions": [
        "__init__",
        "create_parser",
        "send_message",
        "broadcast_message",
        "show_history",
        "run_cli"
      ],
      "constants": []
    },
    "src.services.messaging.cli.perf_cli": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.messaging.delivery": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.messaging.delivery.inbox_delivery": {
      "classes": [],
      "functions": [
        "send_message_inbox"
      ],
      "constants": []
    },
    "src.services.messaging.delivery.fallback": {
      "classes": [],
      "functions": [
        "send_with_fallback",
        "broadcast"
      ],
      "constants": []
    },
    "src.services.messaging.delivery.pyautogui_delivery": {
      "classes": [],
      "functions": [
        "_lazy_import",
        "_focus_and_clear",
        "_paste_or_type",
        "deliver_message_pyautogui"
      ],
      "constants": []
    },
    "src.services.messaging.history_service": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.messaging.interfaces": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.messaging.interfaces.messaging_interfaces": {
      "classes": [
        "MessageDeliveryProvider",
        "PyAutoGUIDeliveryProvider",
        "InboxDeliveryProvider",
        "MessageHistoryProvider",
        "FileBasedMessageHistoryProvider"
      ],
      "functions": [
        "send_message",
        "is_available",
        "send_message",
        "is_available",
        "send_message",
        "is_available",
        "get_inbox_messages",
        "save_message",
        "get_message_history",
        "get_inbox_messages",
        "save_message",
        "get_message_history"
      ],
      "constants": []
    },
    "src.services.messaging.models.messaging_models": {
      "classes": [
        "UnifiedMessage",
        "AgentCoordinates",
        "MessageHistory",
        "MessagingMetrics"
      ],
      "functions": [
        "to_dict",
        "from_dict",
        "from_tuple",
        "to_tuple",
        "to_dict",
        "to_dict",
        "update_delivery"
      ],
      "constants": []
    },
    "src.services.messaging.models.messaging_enums": {
      "classes": [
        "DeliveryMethod",
        "UnifiedMessageType",
        "UnifiedMessagePriority",
        "MessageStatus",
        "UnifiedMessageTag",
        "RecipientType"
      ],
      "functions": [],
      "constants": [
        "INBOX",
        "PYAUTOGUI",
        "BROADCAST",
        "TEXT",
        "DIRECT",
        "BROADCAST",
        "SYSTEM",
        "STATUS",
        "ONBOARDING",
        "AGENT_TO_AGENT",
        "CAPTAIN_TO_AGENT",
        "SYSTEM_TO_AGENT",
        "HUMAN_TO_AGENT",
        "REGULAR",
        "URGENT",
        "LOW",
        "NORMAL",
        "HIGH",
        "PENDING",
        "SENT",
        "DELIVERED",
        "FAILED",
        "READ",
        "CAPTAIN",
        "ONBOARDING",
        "WRAPUP",
        "COORDINATION",
        "SYSTEM",
        "GENERAL",
        "TASK",
        "STATUS",
        "PROJECT_UPDATE",
        "AGENT",
        "SWARM",
        "SYSTEM",
        "BROADCAST"
      ]
    },
    "src.services.messaging.models": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.messaging.providers": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.messaging.providers.discord_provider": {
      "classes": [
        "DiscordMessagingProvider",
        "DiscordCommandHandler"
      ],
      "functions": [
        "create_discord_messaging_integration",
        "__init__",
        "__init__",
        "setup_slash_commands"
      ],
      "constants": []
    },
    "src.services.messaging.providers.fallback_provider": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.messaging.onboarding": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.messaging.onboarding.onboarding_service": {
      "classes": [
        "OnboardingService"
      ],
      "functions": [
        "__init__",
        "onboard_agent",
        "get_agent_status",
        "list_onboarded_agents",
        "_validate_agent_data",
        "_perform_onboarding",
        "_setup_agent_workspace",
        "_configure_agent_permissions",
        "_setup_agent_communication"
      ],
      "constants": []
    },
    "src.services.messaging.status": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.messaging.status.status_monitor": {
      "classes": [
        "StatusMonitor"
      ],
      "functions": [
        "__init__",
        "get_comprehensive_status",
        "_get_project_scanner_status",
        "_get_fsm_status",
        "_get_agent_task_statuses",
        "_get_system_health"
      ],
      "constants": []
    },
    "src.services.thea.thea_login_detector": {
      "classes": [
        "TheaLoginDetector"
      ],
      "functions": [
        "create_login_detector",
        "check_login_status",
        "__init__",
        "is_logged_in",
        "is_on_thea_page"
      ],
      "constants": [
        "SELENIUM_AVAILABLE",
        "SELENIUM_AVAILABLE"
      ]
    },
    "src.services.thea.thea_login_handler_refactored": {
      "classes": [
        "TheaLoginHandler"
      ],
      "functions": [
        "check_thea_login_status",
        "create_thea_login_handler",
        "__init__",
        "ensure_login",
        "_automated_login",
        "_manual_login",
        "_navigate_to_thea",
        "force_logout"
      ],
      "constants": [
        "SELENIUM_AVAILABLE",
        "SELENIUM_AVAILABLE"
      ]
    },
    "src.services.thea.thea_autonomous_cli": {
      "classes": [],
      "functions": [
        "send_message_command",
        "status_command",
        "test_command",
        "interactive_command",
        "main",
        "conversation_command",
        "analytics_command"
      ],
      "constants": []
    },
    "src.services.thea.thea_cookie_manager": {
      "classes": [
        "TheaCookieManager"
      ],
      "functions": [
        "create_cookie_manager",
        "__init__",
        "save_cookies",
        "load_cookies",
        "has_valid_cookies",
        "clear_cookies"
      ],
      "constants": [
        "SELENIUM_AVAILABLE",
        "SELENIUM_AVAILABLE"
      ]
    },
    "src.services.thea": {
      "classes": [],
      "functions": [
        "create_cookie_manager",
        "create_login_detector",
        "create_browser_manager"
      ],
      "constants": []
    },
    "src.services.thea.thea_analytics_reporter": {
      "classes": [
        "ProjectAnalytics",
        "TheaAnalyticsReporter"
      ],
      "functions": [
        "send_analytics_report",
        "send_violation_alert",
        "__init__",
        "load_project_analytics",
        "generate_strategic_report",
        "send_analytics_report",
        "send_violation_alert",
        "get_report_status"
      ],
      "constants": []
    },
    "src.services.thea.thea_browser_manager": {
      "classes": [
        "TheaBrowserManager"
      ],
      "functions": [
        "create_browser_manager",
        "__init__",
        "initialize_driver",
        "_configure_chrome_options",
        "cleanup_driver",
        "is_selenium_available"
      ],
      "constants": [
        "SELENIUM_AVAILABLE",
        "SELENIUM_AVAILABLE"
      ]
    },
    "src.services.thea.thea_communication_core": {
      "classes": [
        "TheaCommunicationCore"
      ],
      "functions": [
        "__init__",
        "prepare_message",
        "send_message_selenium",
        "wait_for_response",
        "_wait_for_response_manual",
        "extract_response_text",
        "capture_screenshot",
        "save_metadata",
        "create_conversation_log",
        "create_analysis_template"
      ],
      "constants": []
    },
    "src.services.thea.thea_communication_interface": {
      "classes": [
        "TheaCommunicationInterface"
      ],
      "functions": [
        "main",
        "__init__",
        "ensure_authenticated",
        "_manual_authentication",
        "send_message_to_thea",
        "_send_message_selenium",
        "_send_message_manual",
        "wait_for_thea_response",
        "capture_thea_response",
        "cleanup",
        "run_communication_cycle"
      ],
      "constants": []
    },
    "src.services.thea.thea_error_recovery": {
      "classes": [
        "ErrorType",
        "RecoveryStrategy",
        "TheaErrorRecovery"
      ],
      "functions": [
        "create_error_recovery",
        "__init__",
        "_setup_logging",
        "classify_error",
        "handle_error",
        "_log_error",
        "_execute_recovery_strategy",
        "_restart_browser",
        "_refresh_cookies",
        "_retry_with_backoff",
        "_clear_session",
        "_wait_and_retry",
        "_fallback_mode",
        "get_error_statistics",
        "reset_statistics"
      ],
      "constants": [
        "BROWSER_INIT_FAILED",
        "COOKIE_INVALID",
        "NETWORK_ERROR",
        "ELEMENT_NOT_FOUND",
        "TIMEOUT_ERROR",
        "RATE_LIMITED",
        "SESSION_EXPIRED",
        "UNKNOWN_ERROR",
        "RESTART_BROWSER",
        "REFRESH_COOKIES",
        "RETRY_WITH_BACKOFF",
        "CLEAR_SESSION",
        "WAIT_AND_RETRY",
        "FALLBACK_MODE"
      ]
    },
    "src.services.thea.thea_monitoring_system": {
      "classes": [
        "PerformanceMetrics",
        "SystemHealth",
        "TheaMonitoringSystem"
      ],
      "functions": [
        "create_monitoring_system",
        "__init__",
        "_setup_logging",
        "start_monitoring",
        "stop_monitoring",
        "_monitoring_loop",
        "_collect_system_health",
        "_check_network_connectivity",
        "_check_browser_status",
        "_check_cookie_status",
        "_check_alerts",
        "_cleanup_old_data",
        "log_operation",
        "get_performance_summary",
        "get_system_health_summary",
        "export_data"
      ],
      "constants": []
    },
    "src.services.thea.context_templates": {
      "classes": [
        "ProjectStatus",
        "ProjectContextManager"
      ],
      "functions": [
        "create_quick_consultation",
        "__post_init__",
        "__init__",
        "create_essential_context",
        "create_standard_context",
        "create_detailed_context",
        "create_project_scan_context",
        "create_multi_turn_context",
        "create_emergency_consultation",
        "create_status_report",
        "get_context_stats",
        "optimize_for_limits"
      ],
      "constants": [
        "STRATEGIC_TEMPLATES"
      ]
    },
    "src.services.thea.strategic_consultation_cli": {
      "classes": [],
      "functions": [
        "consult_command",
        "status_report_command",
        "emergency_command",
        "paste_message_command",
        "test_limits_command",
        "main"
      ],
      "constants": []
    },
    "src.services.thea.thea_autonomous_system": {
      "classes": [
        "TheaAutonomousSystem"
      ],
      "functions": [
        "create_autonomous_thea",
        "send_thea_message_autonomous",
        "__init__",
        "_setup_logging",
        "initialize",
        "send_message_autonomous",
        "_recover_session",
        "get_system_status",
        "cleanup",
        "__enter__",
        "__exit__"
      ],
      "constants": []
    },
    "src.services.thea.thea_conversation_manager": {
      "classes": [
        "ConversationMetadata",
        "TheaConversationManager"
      ],
      "functions": [
        "get_active_conversation_link",
        "create_conversation_manager",
        "__init__",
        "_load_conversations",
        "_save_conversations",
        "extract_conversation_link",
        "create_new_conversation",
        "get_active_conversation_link",
        "load_conversation",
        "update_conversation_activity",
        "get_conversation_history",
        "archive_conversation",
        "get_status"
      ],
      "constants": []
    },
    "src.services.vector_database": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.vector_database.architecture_integration": {
      "classes": [
        "ArchitectureIntegration"
      ],
      "functions": [
        "__init__",
        "start_integration",
        "stop_integration",
        "_sync_loop",
        "_sync_architecture_data",
        "_get_architecture_data",
        "_integrate_architecture_component",
        "_create_architecture_vector",
        "get_architecture_analytics",
        "_get_architecture_vectors",
        "get_integration_health",
        "_calculate_integration_health_score",
        "close"
      ],
      "constants": []
    },
    "src.services.vector_database.complete_infrastructure_integration": {
      "classes": [
        "InfrastructureComponent",
        "InfrastructureStatus",
        "CompleteInfrastructureIntegration"
      ],
      "functions": [
        "to_dict",
        "__init__",
        "start_integration",
        "stop_integration",
        "add_integration_callback",
        "_integration_loop",
        "_monitor_infrastructure_components",
        "_synchronize_components",
        "_optimize_integration",
        "_calculate_infrastructure_health",
        "_apply_health_optimizations",
        "_apply_performance_optimizations",
        "_apply_maintenance_optimizations",
        "_update_infrastructure_health",
        "_notify_integration_update",
        "get_complete_infrastructure_status",
        "close"
      ],
      "constants": [
        "ARCHITECTURE_FOUNDATION",
        "INTEGRATION_TESTING",
        "PERFORMANCE_MONITORING",
        "AGENT_COORDINATION",
        "SYSTEM_OPTIMIZATION"
      ]
    },
    "src.services.vector_database.core_integration": {
      "classes": [
        "VectorDatabaseCoreIntegration"
      ],
      "functions": [
        "__init__",
        "integrate_message_data",
        "integrate_task_data",
        "search_similar_status",
        "get_agent_analytics",
        "close"
      ],
      "constants": []
    },
    "src.services.vector_database.data_processor": {
      "classes": [
        "VectorDataProcessor"
      ],
      "functions": [
        "__init__",
        "create_status_vector",
        "create_message_vector",
        "create_task_vector",
        "create_conversation_vector",
        "normalize_vector",
        "calculate_similarity",
        "extract_features_from_text"
      ],
      "constants": []
    },
    "src.services.vector_database.enhanced_collaboration": {
      "classes": [
        "CollaborationStatus",
        "CollaborationType",
        "CollaborationEvent",
        "CollaborationSession",
        "CollaborationManager",
        "CoordinationEngine",
        "IntegrationCoordinator",
        "EnhancedCollaborationSystem"
      ],
      "functions": [
        "get_enhanced_collaboration_system",
        "start_collaboration",
        "__init__",
        "create_session",
        "end_session",
        "get_session",
        "get_active_sessions",
        "add_event",
        "get_events",
        "get_session_count",
        "get_event_count",
        "__init__",
        "add_coordination_rule",
        "start_coordination",
        "end_coordination",
        "get_active_coordinations",
        "get_coordination_participants",
        "__init__",
        "add_integration_task",
        "start_integration",
        "complete_integration",
        "get_integration_status",
        "get_pending_integrations",
        "get_in_progress_integrations",
        "__init__",
        "enable",
        "disable",
        "is_enabled",
        "get_collaboration_manager",
        "get_coordination_engine",
        "get_integration_coordinator",
        "start_collaboration",
        "end_collaboration",
        "get_collaboration_summary"
      ],
      "constants": [
        "ACTIVE",
        "COORDINATING",
        "OPTIMIZING",
        "COMPLETED",
        "COORDINATION",
        "INTEGRATION",
        "OPTIMIZATION",
        "SUPPORT"
      ]
    },
    "src.services.vector_database.kiss_principle_enforcement_system": {
      "classes": [
        "ComplexityLevel",
        "ComplexityMetric",
        "SimplicityRule",
        "ComplexityAnalyzer",
        "SimplicityEnforcer",
        "KISSManager"
      ],
      "functions": [
        "get_kiss_manager",
        "enforce_simplicity",
        "__init__",
        "add_rule",
        "analyze_component",
        "get_metric",
        "get_all_metrics",
        "get_overcomplex_components",
        "check_compliance",
        "get_violations",
        "clear_violations",
        "__init__",
        "enable",
        "disable",
        "is_enabled",
        "get_analyzer",
        "enforce_simplicity",
        "get_simplicity_report",
        "__init__",
        "get_enforcer",
        "add_recommendation",
        "get_recommendations",
        "clear_recommendations",
        "generate_simplicity_recommendations"
      ],
      "constants": [
        "SIMPLE",
        "MODERATE",
        "COMPLEX",
        "OVERCOMPLEX"
      ]
    },
    "src.services.vector_database.performance_optimization_framework": {
      "classes": [
        "OptimizationLevel",
        "OptimizationMetric",
        "OptimizationResult",
        "PerformanceOptimizer",
        "ResourceOptimizer",
        "BottleneckAnalyzer",
        "OptimizationEngine"
      ],
      "functions": [
        "get_optimization_engine",
        "run_optimization",
        "__init__",
        "add_metric",
        "update_metric",
        "get_metric",
        "get_all_metrics",
        "optimize_metric",
        "get_optimization_results",
        "get_metrics_needing_optimization",
        "__init__",
        "set_resource_limit",
        "update_resource_usage",
        "get_resource_usage",
        "get_resource_limit",
        "is_resource_over_limit",
        "get_over_limit_resources",
        "optimize_resource_usage",
        "__init__",
        "identify_bottleneck",
        "get_bottlenecks",
        "clear_bottlenecks",
        "get_high_severity_bottlenecks",
        "__init__",
        "enable",
        "disable",
        "is_enabled",
        "get_performance_optimizer",
        "get_resource_optimizer",
        "get_bottleneck_analyzer",
        "run_optimization_cycle"
      ],
      "constants": [
        "BASIC",
        "ENHANCED",
        "ADVANCED"
      ]
    },
    "src.services.vector_database.project_completion_system": {
      "classes": [
        "ProjectPhase",
        "ProjectStatus",
        "ProjectCompletionStatus",
        "ProjectMilestone",
        "ProjectTracker",
        "ProjectCompletionManager",
        "ProjectQualityAssessor"
      ],
      "functions": [
        "get_project_completion_manager",
        "get_project_quality_assessor",
        "initialize_project",
        "get_project_summary",
        "__init__",
        "add_milestone",
        "complete_milestone",
        "get_milestone",
        "get_milestones_by_phase",
        "get_completed_milestones",
        "get_pending_milestones",
        "update_phase_status",
        "get_phase_status",
        "get_overall_completion",
        "get_overall_quality_score",
        "__init__",
        "enable",
        "disable",
        "is_enabled",
        "get_tracker",
        "initialize_project_phases",
        "complete_phase",
        "get_project_summary",
        "is_project_complete",
        "get_next_phase",
        "__init__",
        "set_quality_threshold",
        "assess_quality",
        "get_quality_score",
        "get_overall_quality_score",
        "get_quality_report"
      ],
      "constants": [
        "FOUNDATION",
        "INTEGRATION",
        "OPTIMIZATION",
        "COMPLETION",
        "PLANNING",
        "IN_PROGRESS",
        "COMPLETED",
        "FAILED"
      ]
    },
    "src.services.vector_database.quality_assurance_framework": {
      "classes": [
        "QualityGate",
        "QualityLevel",
        "QualityMetric",
        "QualityResult",
        "QualityChecker",
        "QualityManager",
        "ComplianceChecker"
      ],
      "functions": [
        "get_quality_manager",
        "get_compliance_checker",
        "run_quality_check",
        "__init__",
        "add_metric",
        "update_metric",
        "get_metric",
        "get_metrics_by_gate",
        "check_quality_gate",
        "get_quality_results",
        "get_failed_gates",
        "__init__",
        "enable",
        "disable",
        "is_enabled",
        "get_checker",
        "run_quality_check",
        "get_quality_summary",
        "__init__",
        "add_compliance_rule",
        "check_compliance",
        "get_violations",
        "clear_violations"
      ],
      "constants": [
        "ARCHITECTURE",
        "TESTING",
        "PERFORMANCE",
        "COMPLIANCE",
        "LOW",
        "MEDIUM",
        "HIGH",
        "EXCELLENT"
      ]
    },
    "src.services.vector_database.record_time_migration": {
      "classes": [
        "RecordTimeMigration"
      ],
      "functions": [
        "__init__",
        "start_migration",
        "stop_migration",
        "add_migration_callback",
        "_migration_loop",
        "_migrate_new_vectors",
        "_get_recent_vectors_from_source",
        "_migrate_vector_batch",
        "_migrate_single_vector",
        "_notify_migration_progress",
        "get_migration_status",
        "_estimate_completion_time",
        "force_full_migration",
        "close"
      ],
      "constants": []
    },
    "src.services.vector_database.status_indexer": {
      "classes": [
        "StatusIndexer"
      ],
      "functions": [
        "__init__",
        "create_index",
        "get_status",
        "get_statistics",
        "cleanup_stale_entries",
        "get_queue_status",
        "start_indexing"
      ],
      "constants": []
    },
    "src.services.vector_database.v3_contract_execution_system": {
      "classes": [
        "V3ContractExecutionSystem"
      ],
      "functions": [
        "__init__",
        "start_execution",
        "stop_execution",
        "add_execution_callback",
        "_execution_callback",
        "get_v3_execution_status",
        "close"
      ],
      "constants": []
    },
    "src.services.vector_database.vector_database_integration": {
      "classes": [
        "VectorDatabaseIntegration"
      ],
      "functions": [
        "__init__",
        "integrate_message_data",
        "integrate_task_data",
        "search_similar_status",
        "get_agent_analytics",
        "query",
        "get_system_health",
        "search_by_agent",
        "get_performance_metrics",
        "get_index_statistics",
        "create_status_vector",
        "create_message_vector",
        "create_task_vector",
        "calculate_similarity",
        "close"
      ],
      "constants": []
    },
    "src.services.vector_database.vector_database_models": {
      "classes": [
        "VectorStatus",
        "VectorType",
        "VectorMetadata",
        "VectorRecord",
        "VectorQuery",
        "VectorIndex",
        "VectorDatabaseError",
        "VectorDatabaseConnection",
        "VectorDatabaseMetrics"
      ],
      "functions": [
        "to_dict",
        "from_dict",
        "to_dict",
        "from_dict",
        "to_dict",
        "to_dict",
        "__init__",
        "_initialize_database",
        "_create_tables",
        "get_connection",
        "close",
        "__enter__",
        "__exit__",
        "__init__",
        "record_operation",
        "get_performance_summary"
      ],
      "constants": [
        "ACTIVE",
        "INACTIVE",
        "PENDING",
        "ERROR",
        "MAINTENANCE",
        "EMBEDDING",
        "STATUS",
        "MESSAGE",
        "TASK",
        "COORDINATION",
        "ANALYTICS"
      ]
    },
    "src.services.vector_database.vector_database_monitoring": {
      "classes": [
        "AlertLevel",
        "Alert",
        "PerformanceMetric",
        "MetricPoint",
        "HealthStatus",
        "MetricsCollector",
        "VectorDatabaseMonitoring"
      ],
      "functions": [
        "to_dict",
        "to_dict",
        "__init__",
        "add_metric",
        "get_metrics",
        "__init__",
        "record_operation_metric",
        "record_connection_metric",
        "record_query_metric",
        "add_health_check",
        "get_metrics_summary",
        "get_health_status",
        "get_detailed_metrics"
      ],
      "constants": [
        "INFO",
        "WARNING",
        "ERROR",
        "CRITICAL"
      ]
    },
    "src.services.vector_database.vector_database_orchestrator": {
      "classes": [
        "DatabaseConfig",
        "VectorDatabaseOrchestrator"
      ],
      "functions": [
        "__init__",
        "connect_sync",
        "search_vectors_sync",
        "get_status"
      ],
      "constants": []
    },
    "src.services.vector_database.query_analytics": {
      "classes": [
        "VectorDatabaseQueryAnalytics"
      ],
      "functions": [
        "__init__",
        "query",
        "get_system_health",
        "search_by_agent",
        "search_by_type",
        "get_performance_metrics",
        "get_index_statistics",
        "_calculate_health_score"
      ],
      "constants": []
    },
    "src.services.vector_database.security_validator_core": {
      "classes": [
        "VectorDatabaseSecurityCore"
      ],
      "functions": [
        "__init__",
        "validate_security",
        "_validate_data_security",
        "_validate_access_control",
        "_validate_error_handling",
        "_validate_input_security",
        "_validate_configuration_security",
        "_calculate_security_score",
        "_generate_security_recommendations"
      ],
      "constants": []
    },
    "src.services.vector_database.security_validator_checks": {
      "classes": [
        "SecurityChecks"
      ],
      "functions": [
        "__init__",
        "check_sql_injection_vulnerabilities",
        "check_data_sanitization",
        "check_encryption_requirements",
        "check_data_validation",
        "check_authentication_mechanisms",
        "check_authorization_controls",
        "check_permission_validation",
        "check_session_management",
        "check_error_message_security",
        "check_exception_handling",
        "check_logging_security",
        "check_information_disclosure",
        "check_input_validation",
        "check_input_sanitization",
        "check_buffer_overflow_protection",
        "check_injection_prevention",
        "check_environment_variables",
        "check_configuration_files",
        "check_default_settings",
        "check_secrets_management"
      ],
      "constants": []
    },
    "src.services.vector_database.security_validator_main": {
      "classes": [
        "VectorDatabaseSecurityValidator"
      ],
      "functions": [
        "validate_vector_database_security",
        "generate_security_report",
        "__init__",
        "validate_security",
        "get_security_score",
        "get_vulnerabilities",
        "get_security_tests",
        "add_vulnerability",
        "clear_vulnerabilities",
        "generate_security_report",
        "_generate_next_steps",
        "export_security_report",
        "_format_text_report"
      ],
      "constants": []
    },
    "src.services.vector_database.security_validator": {
      "classes": [],
      "functions": [
        "get_default_validator",
        "validate_security",
        "get_security_score",
        "get_vulnerabilities"
      ],
      "constants": []
    },
    "src.services.vector_database.orchestration": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.vector_database.orchestration.core": {
      "classes": [
        "OrchestrationConfig",
        "OrchestrationCore"
      ],
      "functions": [
        "__init__",
        "acquire_connection",
        "release_connection",
        "get_status"
      ],
      "constants": []
    },
    "src.services.vector_database.contracts": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.vector_database.contracts.contract_execution_core": {
      "classes": [
        "ContractExecutionCore"
      ],
      "functions": [
        "__init__",
        "start_execution",
        "stop_execution",
        "add_execution_callback",
        "_execution_loop",
        "_process_available_contracts",
        "_evaluate_contract",
        "_should_claim_contract",
        "_claim_contract",
        "_execute_claimed_contracts",
        "_execute_contract",
        "_notify_execution_update",
        "set_contracts",
        "get_contracts",
        "close"
      ],
      "constants": []
    },
    "src.services.vector_database.contracts.contract_models": {
      "classes": [
        "ContractPriority",
        "ContractStatus",
        "V3Contract"
      ],
      "functions": [
        "create_default_contracts",
        "to_dict"
      ],
      "constants": [
        "HIGH",
        "MEDIUM",
        "LOW",
        "AVAILABLE",
        "CLAIMED",
        "IN_PROGRESS",
        "COMPLETED",
        "FAILED"
      ]
    },
    "src.services.vector_database.contracts.contract_performance_monitor": {
      "classes": [
        "ContractPerformanceMonitor"
      ],
      "functions": [
        "__init__",
        "update_execution_stats",
        "get_performance_metrics",
        "get_performance_trend",
        "reset_stats"
      ],
      "constants": []
    },
    "src.services.vector_database.contracts.contract_quality_validator": {
      "classes": [
        "ContractQualityValidator"
      ],
      "functions": [
        "__init__",
        "validate_contract_quality",
        "_validate_individual_contract",
        "get_quality_metrics"
      ],
      "constants": []
    },
    "src.services.vector_database.contracts.contract_utils": {
      "classes": [],
      "functions": [
        "filter_contracts_by_status",
        "filter_contracts_by_priority",
        "get_contract_by_id",
        "update_contract_status",
        "calculate_contract_metrics",
        "validate_contract_structure"
      ],
      "constants": []
    },
    "src.services.vector_database.indexing": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.vector_database.indexing.manager": {
      "classes": [
        "IndexManager"
      ],
      "functions": [
        "__init__",
        "load_entries",
        "save_entries",
        "create_entry",
        "update_entry_status",
        "get_entry",
        "get_stats",
        "cleanup_stale_entries"
      ],
      "constants": []
    },
    "src.services.vector_database.indexing.processor": {
      "classes": [
        "IndexProcessor"
      ],
      "functions": [
        "__init__",
        "queue_operation",
        "_process_queue",
        "_process_entry",
        "_perform_indexing",
        "get_queue_status",
        "start_processing"
      ],
      "constants": []
    },
    "src.services.vector_database.indexing.types": {
      "classes": [
        "IndexStatus",
        "IndexType",
        "IndexEntry",
        "IndexStats"
      ],
      "functions": [
        "to_dict",
        "from_dict",
        "is_stale",
        "success_rate",
        "to_dict"
      ],
      "constants": [
        "PENDING",
        "INDEXING",
        "COMPLETED",
        "FAILED",
        "STALE",
        "FULL",
        "INCREMENTAL",
        "REBUILD",
        "OPTIMIZATION"
      ]
    },
    "src.services.autonomous": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.autonomous.cycle_completion_logger": {
      "classes": [
        "CycleCompletionLogger"
      ],
      "functions": [
        "log_cycle_completion",
        "__init__",
        "log_completion",
        "_read_status",
        "_write_status",
        "_update_summary_metrics",
        "get_completion_summary"
      ],
      "constants": []
    },
    "src.services.autonomous.blockers": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.autonomous.blockers.blocker_resolver": {
      "classes": [
        "BlockerResolver"
      ],
      "functions": [
        "__init__"
      ],
      "constants": []
    },
    "src.services.autonomous.core": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.autonomous.core.autonomous_workflow": {
      "classes": [
        "AgentAutonomousWorkflow"
      ],
      "functions": [
        "__init__"
      ],
      "constants": [
        "MESSAGING_AVAILABLE",
        "MESSAGING_AVAILABLE"
      ]
    },
    "src.services.autonomous.mailbox": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.autonomous.mailbox.mailbox_manager": {
      "classes": [
        "MailboxManager"
      ],
      "functions": [
        "__init__",
        "deliver_message"
      ],
      "constants": []
    },
    "src.services.autonomous.operations": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.autonomous.operations.autonomous_operations": {
      "classes": [
        "AutonomousOperations"
      ],
      "functions": [
        "__init__"
      ],
      "constants": []
    },
    "src.services.autonomous.operations.modular": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.autonomous.operations.modular.core": {
      "classes": [
        "AutonomousOperationsCore"
      ],
      "functions": [
        "__init__",
        "get_operations_summary",
        "clear_operations"
      ],
      "constants": []
    },
    "src.services.autonomous.operations.modular.operation_executor": {
      "classes": [
        "OperationExecutor"
      ],
      "functions": [
        "__init__",
        "get_executor_status"
      ],
      "constants": []
    },
    "src.services.autonomous.operations.modular.operations_loader": {
      "classes": [
        "OperationsLoader"
      ],
      "functions": [
        "__init__",
        "_is_operation_ready"
      ],
      "constants": []
    },
    "src.services.autonomous.operations.modular.operations_manager": {
      "classes": [
        "OperationsManager"
      ],
      "functions": [
        "__init__",
        "get_operations_statistics",
        "enable_operation",
        "disable_operation"
      ],
      "constants": []
    },
    "src.services.autonomous.operations.modular.executors": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.autonomous.operations.modular.executors.code_review_executor": {
      "classes": [
        "CodeReviewExecutor"
      ],
      "functions": [
        "__init__",
        "get_status"
      ],
      "constants": []
    },
    "src.services.autonomous.operations.modular.executors.documentation_update_executor": {
      "classes": [
        "DocumentationUpdateExecutor"
      ],
      "functions": [
        "__init__",
        "get_status"
      ],
      "constants": []
    },
    "src.services.autonomous.operations.modular.executors.performance_analysis_executor": {
      "classes": [
        "PerformanceAnalysisExecutor"
      ],
      "functions": [
        "__init__",
        "get_status"
      ],
      "constants": []
    },
    "src.services.autonomous.operations.modular.executors.security_scan_executor": {
      "classes": [
        "SecurityScanExecutor"
      ],
      "functions": [
        "__init__",
        "get_status"
      ],
      "constants": []
    },
    "src.services.autonomous.operations.modular.executors.ssot_validation_executor": {
      "classes": [
        "SSOTValidationExecutor"
      ],
      "functions": [
        "__init__",
        "get_status"
      ],
      "constants": []
    },
    "src.services.autonomous.operations.modular.executors.swarm_coordination_analysis_executor": {
      "classes": [
        "SwarmCoordinationAnalysisExecutor"
      ],
      "functions": [
        "__init__",
        "get_status"
      ],
      "constants": []
    },
    "src.services.autonomous.operations.modular.executors.system_integration_scan_executor": {
      "classes": [
        "SystemIntegrationScanExecutor"
      ],
      "functions": [
        "__init__",
        "get_status"
      ],
      "constants": []
    },
    "src.services.autonomous.tasks": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.autonomous.tasks.task_manager": {
      "classes": [
        "TaskManager"
      ],
      "functions": [
        "__init__",
        "_select_task_to_claim",
        "_are_dependencies_satisfied",
        "_get_priority_score"
      ],
      "constants": []
    },
    "src.services.discord_bot": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.discord_bot.commands": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.discord_bot.commands.agent_coordination": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.discord_bot.commands.basic_commands": {
      "classes": [
        "BasicCommandHandler"
      ],
      "functions": [
        "setup_basic_commands",
        "__init__",
        "get_command_list",
        "get_command_help"
      ],
      "constants": []
    },
    "src.services.discord_bot.commands.basic_commands_modular": {
      "classes": [],
      "functions": [
        "setup"
      ],
      "constants": []
    },
    "src.services.discord_bot.commands.button_handlers": {
      "classes": [],
      "functions": [
        "create_main_interface_view"
      ],
      "constants": []
    },
    "src.services.discord_bot.commands.help_command": {
      "classes": [],
      "functions": [
        "setup_help_command"
      ],
      "constants": []
    },
    "src.services.discord_bot.commands.main_interface": {
      "classes": [
        "MainInterface",
        "RestartModal",
        "ShutdownModal"
      ],
      "functions": [
        "__init__",
        "set_agent_coordination",
        "_is_admin"
      ],
      "constants": []
    },
    "src.services.discord_bot.commands.modal_handlers": {
      "classes": [
        "RestartModal",
        "ShutdownModal"
      ],
      "functions": [
        "__init__",
        "__init__"
      ],
      "constants": []
    },
    "src.services.discord_bot.commands.ping_command": {
      "classes": [],
      "functions": [
        "setup_ping_command"
      ],
      "constants": []
    },
    "src.services.discord_bot.commands.response_utils": {
      "classes": [],
      "functions": [
        "is_admin"
      ],
      "constants": []
    },
    "src.services.discord_bot.commands.safe_response_utils": {
      "classes": [],
      "functions": [
        "safe_log_info"
      ],
      "constants": []
    },
    "src.services.discord_bot.commands.social_media_commands": {
      "classes": [
        "SocialMediaCommands"
      ],
      "functions": [
        "__init__",
        "_get_sentiment_color"
      ],
      "constants": []
    },
    "src.services.discord_bot.commands.webhook_setup_commands": {
      "classes": [],
      "functions": [
        "setup_webhook_setup_commands",
        "is_admin"
      ],
      "constants": [
        "ADMIN_ROLE"
      ]
    },
    "src.services.discord_bot.commands.agent_coordination.core": {
      "classes": [
        "AgentCoordinationCore"
      ],
      "functions": [
        "__init__",
        "set_main_interface_callback",
        "get_team_description",
        "_is_admin"
      ],
      "constants": []
    },
    "src.services.discord_bot.commands.agent_coordination.messaging": {
      "classes": [
        "AgentMessagingHandler",
        "MessagePriorityView",
        "MessageInputModal",
        "AgentMessagingHandler"
      ],
      "functions": [
        "__init__",
        "__init__",
        "__init__"
      ],
      "constants": []
    },
    "src.services.discord_bot.commands.agent_coordination.onboarding": {
      "classes": [
        "AgentOnboardingHandler"
      ],
      "functions": [
        "__init__"
      ],
      "constants": []
    },
    "src.services.discord_bot.commands.agent_coordination.status": {
      "classes": [
        "AgentStatusHandler"
      ],
      "functions": [
        "__init__",
        "get_agent_status",
        "get_status_color"
      ],
      "constants": []
    },
    "src.services.discord_bot.core": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.discord_bot.core.discord_bot_models": {
      "classes": [
        "BotStatus",
        "CommandType",
        "BotConfiguration",
        "CommandContext",
        "BotMetrics"
      ],
      "functions": [],
      "constants": [
        "OFFLINE",
        "ONLINE",
        "IDLE",
        "DND",
        "SLASH",
        "TEXT",
        "HYBRID"
      ]
    },
    "src.services.discord_bot.core.discord_bot_core": {
      "classes": [
        "DiscordBotCore"
      ],
      "functions": [
        "__init__",
        "_setup_event_handlers",
        "get_status",
        "get_metrics",
        "increment_command_count",
        "create_command_context"
      ],
      "constants": []
    },
    "src.services.discord_bot.core.discord_bot": {
      "classes": [
        "EnhancedDiscordAgentBot"
      ],
      "functions": [
        "create_discord_bot",
        "__init__"
      ],
      "constants": []
    },
    "src.services.discord_bot.core.discord_agent_interface": {
      "classes": [
        "DiscordAgentInterface",
        "DiscordSwarmCoordinator"
      ],
      "functions": [
        "__init__",
        "get_agent_status",
        "_get_single_agent_status",
        "_get_all_agent_statuses",
        "send_message_to_agent",
        "activate_agent",
        "__init__",
        "get_swarm_status",
        "broadcast_message"
      ],
      "constants": []
    },
    "src.services.discord_bot.core.commands": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.discord_bot.core.commands.social_media_commands": {
      "classes": [
        "SocialMediaCommands"
      ],
      "functions": [
        "__init__"
      ],
      "constants": []
    },
    "src.services.discord_bot.ui": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.discord_bot.ui.discord_ui": {
      "classes": [
        "DiscordUI",
        "AgentControlView",
        "SystemControlView",
        "SocialMediaView",
        "MessageAgentModal",
        "BroadcastModal",
        "SocialMediaPostModal"
      ],
      "functions": [
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__"
      ],
      "constants": []
    },
    "src.services.discord_bot.tools": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.discord_bot.tools.webhook_provisioner": {
      "classes": [
        "DiscordWebhookProvisioner"
      ],
      "functions": [
        "channel_from_id",
        "__init__"
      ],
      "constants": []
    },
    "src.services.alerting": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.alerting.intelligent_alerting_system": {
      "classes": [
        "AlertSeverity",
        "AlertStatus",
        "NotificationChannel",
        "Alert",
        "AlertRule",
        "NotificationConfig",
        "EscalationPolicy",
        "IntelligentAlertingSystem"
      ],
      "functions": [
        "__init__",
        "_load_config",
        "_load_default_config",
        "_parse_config",
        "_init_notification_handlers",
        "create_alert",
        "_process_alert",
        "_evaluate_rule",
        "_send_notifications",
        "_send_email_notification",
        "_send_discord_notification",
        "_send_slack_notification",
        "_send_webhook_notification",
        "_send_sms_notification",
        "_check_escalation",
        "_escalate_alert",
        "acknowledge_alert",
        "resolve_alert",
        "get_alerts",
        "get_alert_analytics",
        "add_rule",
        "remove_rule",
        "save_config",
        "export_alerts"
      ],
      "constants": [
        "LOW",
        "MEDIUM",
        "HIGH",
        "CRITICAL",
        "ACTIVE",
        "ACKNOWLEDGED",
        "RESOLVED",
        "SUPPRESSED",
        "EMAIL",
        "SLACK",
        "DISCORD",
        "WEBHOOK",
        "SMS"
      ]
    },
    "src.services.dashboard": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.dashboard.dashboard_web_core": {
      "classes": [
        "DashboardWebHandler",
        "DashboardWebServer"
      ],
      "functions": [
        "__init__",
        "do_GET",
        "do_POST",
        "_serve_dashboard",
        "_serve_api_status",
        "_serve_api_agents",
        "_serve_api_tasks",
        "_serve_api_messages",
        "_serve_api_alerts",
        "_handle_acknowledge_alert",
        "_handle_update_agent",
        "_serve_404",
        "_send_response",
        "_send_json_response",
        "log_message",
        "__init__",
        "start",
        "stop",
        "handler"
      ],
      "constants": []
    },
    "src.services.dashboard.dashboard_web_html": {
      "classes": [],
      "functions": [
        "generate_dashboard_html"
      ],
      "constants": []
    },
    "src.services.dashboard.dashboard_web_interface": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.dashboard.dashboard_web_utils": {
      "classes": [],
      "functions": [
        "format_agent_data",
        "format_task_data",
        "format_alert_data",
        "validate_request_data",
        "sanitize_string",
        "parse_json_request",
        "format_json_response",
        "get_current_timestamp",
        "calculate_performance_score",
        "format_summary_stats",
        "validate_agent_status",
        "validate_task_status",
        "validate_alert_type",
        "truncate_text"
      ],
      "constants": []
    },
    "src.services.dashboard.swarm_coordination_dashboard": {
      "classes": [
        "AgentStatus",
        "TaskStatus",
        "AgentInfo",
        "TaskInfo",
        "SwarmCoordinationDashboard"
      ],
      "functions": [
        "__init__",
        "initialize",
        "_load_agent_coordinates",
        "_load_task_data",
        "_load_message_history",
        "get_agent_status",
        "get_all_agent_status",
        "get_task_status",
        "get_all_task_status",
        "get_recent_messages",
        "get_alerts",
        "add_alert",
        "acknowledge_alert",
        "update_agent_status",
        "update_task_progress",
        "get_dashboard_data",
        "_get_summary_stats",
        "refresh",
        "export_data"
      ],
      "constants": [
        "ACTIVE",
        "IDLE",
        "WORKING",
        "STALLED",
        "ERROR",
        "OFFLINE",
        "PENDING",
        "IN_PROGRESS",
        "COMPLETED",
        "CANCELLED",
        "BLOCKED"
      ]
    },
    "src.services.discord_commander": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.discord_commander.commands": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.discord_commander.core": {
      "classes": [
        "DiscordConfig",
        "DiscordConnectionManager",
        "DiscordCommandRegistry",
        "DiscordEventManager",
        "DiscordStatusMonitor"
      ],
      "functions": [
        "__init__",
        "_get_intents",
        "validate",
        "__init__",
        "__init__",
        "register_command",
        "get_command",
        "list_commands",
        "unregister_command",
        "__init__",
        "register_event_handler",
        "get_event_handlers",
        "__init__",
        "record_heartbeat",
        "record_message",
        "record_command",
        "record_error",
        "get_status",
        "is_healthy"
      ],
      "constants": [
        "DISCORD_AVAILABLE",
        "DISCORD_AVAILABLE"
      ]
    },
    "src.services.discord_commander.optimization": {
      "classes": [
        "DiscordPerformanceMetrics",
        "DiscordPerformanceMonitor",
        "DiscordCommandCache",
        "DiscordRateLimiter",
        "DiscordAsyncPool",
        "DiscordOptimizer"
      ],
      "functions": [
        "to_dict",
        "__init__",
        "record_message_processing",
        "record_command_execution",
        "record_event_handling",
        "record_error",
        "get_current_metrics",
        "__init__",
        "get_command_result",
        "cache_command_result",
        "_evict_expired",
        "_evict_oldest",
        "clear",
        "get_stats",
        "__init__",
        "can_execute_command",
        "get_wait_time",
        "__init__",
        "get_active_task_count",
        "get_task_names",
        "__init__",
        "_generate_cache_key",
        "get_optimization_stats",
        "enable_optimization",
        "disable_optimization",
        "clear_cache",
        "reset_rate_limiter"
      ],
      "constants": []
    },
    "src.services.discord_commander.web_controller_core": {
      "classes": [
        "WebControllerCore"
      ],
      "functions": [
        "__init__",
        "set_bot",
        "get_status",
        "start",
        "stop",
        "get_agent_status",
        "send_message",
        "get_system_health",
        "_get_timestamp"
      ],
      "constants": []
    },
    "src.services.discord_commander.bot_commands": {
      "classes": [
        "CommandManager"
      ],
      "functions": [
        "__init__",
        "register_commands",
        "_log_command_execution",
        "get_command_history",
        "get_command_stats"
      ],
      "constants": [
        "DISCORD_AVAILABLE",
        "DISCORD_AVAILABLE"
      ]
    },
    "src.services.discord_commander.bot_core": {
      "classes": [
        "DiscordCommanderBot"
      ],
      "functions": [
        "__init__",
        "get_status"
      ],
      "constants": [
        "DISCORD_AVAILABLE",
        "DISCORD_AVAILABLE"
      ]
    },
    "src.services.discord_commander.bot_events": {
      "classes": [
        "DiscordBotEvents"
      ],
      "functions": [
        "__init__",
        "_register_default_events",
        "register_event",
        "unregister_event",
        "get_event_stats",
        "list_registered_events",
        "get_event_handlers",
        "create_custom_event",
        "remove_custom_event",
        "get_event_summary",
        "validate_event_system"
      ],
      "constants": []
    },
    "src.services.discord_commander.bot_v2": {
      "classes": [
        "DiscordCommanderBotV2"
      ],
      "functions": [
        "__init__",
        "get_bot_status",
        "get_quality_metrics",
        "validate_bot_integrity",
        "get_integration_status"
      ],
      "constants": [
        "AGENT_COMMANDS_AVAILABLE",
        "AGENT_COMMANDS_AVAILABLE"
      ]
    },
    "src.services.discord_commander.optimization_utils": {
      "classes": [
        "PerformanceOptimizer",
        "RateLimiter",
        "MessageCache",
        "BatchProcessor",
        "ResourceManager"
      ],
      "functions": [
        "__init__",
        "enable_optimizations",
        "disable_optimizations",
        "measure_execution_time",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "wrapper"
      ],
      "constants": []
    },
    "src.services.discord_commander.performance_metrics": {
      "classes": [
        "DiscordPerformanceMetrics",
        "PerformanceThresholds",
        "PerformanceAlert",
        "PerformanceMetricsCalculator"
      ],
      "functions": [
        "to_dict",
        "from_dict",
        "is_healthy",
        "get_performance_score",
        "check_metrics",
        "to_dict",
        "__init__",
        "calculate_metrics",
        "check_for_alerts"
      ],
      "constants": []
    },
    "src.services.discord_commander.performance_monitor": {
      "classes": [
        "DiscordPerformanceMonitor"
      ],
      "functions": [
        "__init__",
        "start_monitoring",
        "record_message_processed",
        "record_command_executed",
        "record_error",
        "add_alert_callback",
        "get_current_metrics",
        "_collect_metrics",
        "_trigger_alert",
        "_get_memory_usage",
        "get_metrics_history",
        "get_performance_summary",
        "reset_metrics",
        "update_thresholds",
        "monitor_loop"
      ],
      "constants": []
    },
    "src.services.discord_commander.social_media_poster": {
      "classes": [
        "SocialMediaPoster"
      ],
      "functions": [
        "__init__",
        "get_supported_platforms"
      ],
      "constants": []
    },
    "src.services.discord_commander.socket_events": {
      "classes": [
        "SocketEventHandler"
      ],
      "functions": [
        "__init__",
        "register_events",
        "broadcast_agent_update",
        "broadcast_system_message",
        "get_connection_count",
        "get_message_count",
        "handle_connect",
        "handle_disconnect",
        "handle_join_room",
        "handle_leave_room",
        "handle_send_message",
        "handle_get_message_history",
        "handle_agent_status_request"
      ],
      "constants": [
        "SOCKETIO_AVAILABLE",
        "SOCKETIO_AVAILABLE"
      ]
    },
    "src.services.discord_commander.web_controller_refactored": {
      "classes": [
        "DiscordCommanderController"
      ],
      "functions": [
        "__init__",
        "_register_additional_routes",
        "set_bot",
        "run",
        "stop",
        "get_status",
        "broadcast_agent_update",
        "broadcast_system_message",
        "api_post_social",
        "api_platforms"
      ],
      "constants": []
    },
    "src.services.discord_commander.web_handlers": {
      "classes": [
        "WebHandlers"
      ],
      "functions": [
        "__init__",
        "handle_get_agents",
        "handle_send_message",
        "handle_swarm_coordinate",
        "handle_get_system_status",
        "handle_get_social_media_status",
        "handle_post_to_social_media",
        "handle_get_quality_metrics",
        "handle_health_check"
      ],
      "constants": []
    },
    "src.services.discord_commander.web_models": {
      "classes": [
        "AgentStatus",
        "SystemStatus",
        "SocialMediaStatus",
        "MessageRequest",
        "SwarmCoordinateRequest",
        "WebControllerConfig",
        "AgentWorkspaceInfo",
        "QualityMetrics",
        "CoordinationRequest",
        "WebSocketEvent",
        "TemplateData"
      ],
      "functions": [],
      "constants": []
    },
    "src.services.discord_commander.web_utils": {
      "classes": [],
      "functions": [
        "load_agent_status",
        "load_all_agents",
        "calculate_system_status",
        "load_social_media_status",
        "load_quality_metrics",
        "get_agent_workspace_info",
        "create_template_data",
        "validate_message_request",
        "format_agent_response"
      ],
      "constants": []
    },
    "src.services.discord_commander.web_controller_v2": {
      "classes": [
        "DiscordCommanderControllerV2"
      ],
      "functions": [
        "create_web_controller",
        "__init__",
        "_setup_flask_app",
        "_create_default_templates",
        "set_bot",
        "start",
        "_run_server",
        "stop",
        "broadcast_update",
        "get_status"
      ],
      "constants": [
        "FLASK_AVAILABLE",
        "FLASK_AVAILABLE"
      ]
    },
    "src.services.discord_commander.web_controller_main": {
      "classes": [
        "DiscordCommanderController"
      ],
      "functions": [
        "__init__",
        "_setup_app",
        "_register_socket_events",
        "run",
        "get_app",
        "get_socketio",
        "handle_connect",
        "handle_disconnect",
        "handle_agent_status_request"
      ],
      "constants": []
    },
    "src.services.discord_commander.web_controller_models": {
      "classes": [
        "AgentStatus",
        "MessageData",
        "SystemHealth",
        "WebControllerConfig"
      ],
      "functions": [],
      "constants": []
    },
    "src.services.discord_commander.web_routes": {
      "classes": [
        "WebRoutes"
      ],
      "functions": [
        "__init__",
        "_register_routes",
        "index",
        "get_agents",
        "get_agent",
        "send_message",
        "get_health",
        "get_status"
      ],
      "constants": []
    },
    "src.services.discord_commander.web_controller": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.discord_commander.bot_config": {
      "classes": [
        "BotConfig"
      ],
      "functions": [
        "__init__",
        "_load_env",
        "get_token",
        "get_prefix",
        "get_guild_id",
        "get_log_level",
        "is_debug_mode"
      ],
      "constants": []
    },
    "src.services.discord_commander.bot_main": {
      "classes": [
        "DiscordCommanderBot",
        "BotManager"
      ],
      "functions": [
        "create_discord_bot",
        "create_bot_configuration",
        "__init__",
        "_register_event_handlers",
        "get_bot_info",
        "get_uptime",
        "is_online",
        "__init__",
        "create_bot",
        "get_bot",
        "set_active_bot",
        "get_active_bot",
        "list_bots"
      ],
      "constants": [
        "DISCORD_AVAILABLE",
        "DISCORD_AVAILABLE"
      ]
    },
    "src.services.discord_commander.bot": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.discord_commander.bot_models": {
      "classes": [
        "BotConfiguration",
        "CommandContext",
        "BotCore",
        "EmbedBuilder"
      ],
      "functions": [
        "__init__",
        "start_bot",
        "stop_bot",
        "record_error",
        "get_status",
        "__init__",
        "create_embed",
        "add_field",
        "build"
      ],
      "constants": []
    },
    "src.services.discord_commander.commands.agent_control": {
      "classes": [
        "AgentControlCommands"
      ],
      "functions": [
        "__init__",
        "register_commands"
      ],
      "constants": [
        "DISCORD_AVAILABLE",
        "DISCORD_AVAILABLE"
      ]
    },
    "src.services.agent_devlog": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.agent_devlog.agent_validation": {
      "classes": [
        "AgentValidator"
      ],
      "functions": [
        "__init__",
        "_initialize_agent_roles",
        "_initialize_agent_capabilities",
        "validate_agent_flag",
        "get_agent_info",
        "get_agent_role",
        "get_agent_capabilities",
        "is_captain_agent",
        "get_all_agents",
        "get_agent_by_role",
        "validate_action",
        "validate_status",
        "validate_details",
        "suggest_devlog_type",
        "get_agent_statistics"
      ],
      "constants": []
    },
    "src.services.agent_devlog.cli": {
      "classes": [
        "AgentDevlogCLI"
      ],
      "functions": [
        "__init__",
        "create_parser",
        "show_help"
      ],
      "constants": []
    },
    "src.services.agent_devlog.devlog_poster": {
      "classes": [
        "AgentDevlogPoster"
      ],
      "functions": [
        "__init__",
        "create_devlog_content",
        "post_devlog",
        "search_devlogs",
        "get_devlog_stats",
        "cleanup_old_devlogs",
        "get_agent_info",
        "get_all_agents"
      ],
      "constants": []
    },
    "src.services.agent_devlog.models": {
      "classes": [
        "DevlogStatus",
        "DevlogType",
        "DevlogEntry",
        "AgentInfo",
        "DevlogStats",
        "SearchResult",
        "DevlogConfig"
      ],
      "functions": [],
      "constants": [
        "COMPLETED",
        "IN_PROGRESS",
        "FAILED",
        "PENDING",
        "ACTION",
        "STATUS_UPDATE",
        "ERROR_REPORT",
        "COORDINATION",
        "TESTING"
      ]
    },
    "src.services.agent_devlog.storage": {
      "classes": [
        "DevlogStorage"
      ],
      "functions": [
        "__init__",
        "_get_current_file",
        "save_devlog",
        "_load_devlogs",
        "_save_devlogs",
        "search_devlogs",
        "get_devlog_stats",
        "cleanup_old_files",
        "compress_file",
        "get_file_info"
      ],
      "constants": []
    },
    "src.services.role_assignment": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.services.role_assignment.contract_integration": {
      "classes": [
        "GeneralCycle",
        "RoleContract",
        "ContractIntegration"
      ],
      "functions": [
        "main",
        "__init__",
        "_define_general_cycle",
        "_load_role_contracts",
        "_adapt_general_cycle_for_role",
        "get_general_cycle",
        "get_role_contract",
        "get_role_cycle_adaptations",
        "validate_role_contract",
        "get_contract_summary"
      ],
      "constants": []
    },
    "src.services.role_assignment.role_assignment_service": {
      "classes": [
        "RoleAssignment",
        "RoleCapability",
        "RoleAssignmentService"
      ],
      "functions": [
        "main",
        "__post_init__",
        "__init__",
        "_load_role_definitions",
        "_load_agent_capabilities",
        "_create_default_roles",
        "_create_default_agent_capabilities",
        "assign_role",
        "_can_agent_perform_role",
        "_create_role_assignment_message",
        "list_available_roles",
        "list_agent_capabilities",
        "get_active_assignment",
        "complete_assignment",
        "reassign_role"
      ],
      "constants": []
    },
    "src.services.devlog_storytelling": {
      "classes": [
        "DevlogStorytellingService"
      ],
      "functions": [
        "create_story_from_devlogs",
        "get_storytelling_tools",
        "__init__",
        "process_devlog_batch"
      ],
      "constants": []
    },
    "src.services.devlog_storytelling.integration.role_integration": {
      "classes": [
        "RoleIntegration"
      ],
      "functions": [
        "__init__",
        "register_storytelling_tools",
        "get_available_tools_for_role",
        "create_role_tool_guide",
        "update_agent_tool_registry"
      ],
      "constants": []
    },
    "src.services.code_archaeology": {
      "classes": [
        "CodeArchaeologyService"
      ],
      "functions": [
        "conduct_code_archaeology",
        "get_archaeology_tools",
        "__init__",
        "conduct_archaeological_dig"
      ],
      "constants": []
    },
    "src.architecture": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.architecture.application_layer": {
      "classes": [
        "UseCaseResult",
        "UseCase",
        "SendMessageUseCase",
        "GetAgentStatusUseCase",
        "CreateTaskUseCase",
        "GetSystemStatusUseCase",
        "ApplicationService",
        "ApplicationFacade"
      ],
      "functions": [
        "__init__",
        "to_dict",
        "execute",
        "__init__",
        "execute",
        "__init__",
        "execute",
        "__init__",
        "execute",
        "__init__",
        "execute",
        "__init__",
        "_initialize_use_cases",
        "execute_use_case",
        "send_message",
        "get_agent_status",
        "create_task",
        "get_system_status",
        "list_use_cases",
        "__init__",
        "initialize",
        "shutdown",
        "get_health_status"
      ],
      "constants": []
    },
    "src.architecture.design_patterns": {
      "classes": [
        "PatternType",
        "PatternConfig",
        "Singleton",
        "Factory",
        "Observer",
        "Strategy",
        "Command",
        "PatternRegistry",
        "PatternManager"
      ],
      "functions": [
        "register_pattern",
        "get_pattern",
        "create_pattern_instance",
        "__new__",
        "__init__",
        "register_creator",
        "create",
        "get_available_types",
        "__init__",
        "attach",
        "detach",
        "notify",
        "get_observer_count",
        "__init__",
        "add_strategy",
        "set_strategy",
        "execute_strategy",
        "get_available_strategies",
        "__init__",
        "execute",
        "undo",
        "can_undo",
        "__init__",
        "register_pattern",
        "get_pattern",
        "get_all_patterns",
        "create_pattern_instance",
        "get_pattern_instance",
        "clear_instances",
        "__init__",
        "register_pattern",
        "get_pattern",
        "get_all_patterns",
        "create_pattern_instance",
        "get_pattern_instance",
        "cleanup_all",
        "patterns"
      ],
      "constants": [
        "SINGLETON",
        "FACTORY",
        "OBSERVER",
        "STRATEGY",
        "COMMAND",
        "SECURITY",
        "UI",
        "COMMUNICATION"
      ]
    },
    "src.architecture.design_patterns_v2": {
      "classes": [
        "PatternType",
        "SingletonMeta",
        "SingletonBase",
        "ServiceFactory",
        "Event",
        "Observer",
        "Subject",
        "ValidationStrategy",
        "MessageValidationStrategy",
        "AgentValidationStrategy",
        "ValidationContext",
        "Command",
        "MessageCommand",
        "CommandInvoker",
        "Repository",
        "InMemoryRepository",
        "ServiceLocator",
        "PatternRegistry"
      ],
      "functions": [
        "service_context",
        "__call__",
        "create_service",
        "_create_instance",
        "update",
        "__init__",
        "attach",
        "detach",
        "notify",
        "validate",
        "validate",
        "validate",
        "__init__",
        "set_strategy",
        "validate",
        "execute",
        "undo",
        "execute",
        "undo",
        "__init__",
        "execute_command",
        "undo_last",
        "save",
        "find_by_id",
        "find_all",
        "delete",
        "__init__",
        "save",
        "find_by_id",
        "find_all",
        "delete",
        "register",
        "get",
        "is_registered",
        "register_pattern",
        "get_pattern",
        "list_patterns"
      ],
      "constants": [
        "T",
        "SINGLETON",
        "FACTORY",
        "OBSERVER",
        "STRATEGY",
        "COMMAND",
        "REPOSITORY",
        "SERVICE_LOCATOR"
      ]
    },
    "src.architecture.repository_layer": {
      "classes": [
        "Entity",
        "AgentEntity",
        "MessageEntity",
        "TaskEntity",
        "FileRepository",
        "AgentRepository",
        "MessageRepository",
        "TaskRepository",
        "RepositoryManager"
      ],
      "functions": [
        "__post_init__",
        "__post_init__",
        "__post_init__",
        "__init__",
        "_load_from_file",
        "_save_to_file",
        "_entity_to_dict",
        "_dict_to_entity",
        "save",
        "find_by_id",
        "find_all",
        "delete",
        "find_by_field",
        "count",
        "__init__",
        "find_by_name",
        "find_active_agents",
        "update_last_seen",
        "__init__",
        "find_by_agent",
        "find_by_priority",
        "find_recent_messages",
        "__init__",
        "find_by_agent",
        "find_by_status",
        "find_overdue_tasks",
        "__init__",
        "register_repository",
        "get_repository",
        "get_agent_repository",
        "get_message_repository",
        "get_task_repository",
        "get_all_repositories"
      ],
      "constants": [
        "T"
      ]
    },
    "src.architecture.service_layer": {
      "classes": [
        "ServiceStatus",
        "ServiceConfig",
        "ServiceBase",
        "MessagingService",
        "DiscordService",
        "TheaService",
        "ServiceManager"
      ],
      "functions": [
        "__post_init__",
        "__init__",
        "initialize",
        "start",
        "stop",
        "health_check",
        "get_status",
        "_resolve_dependencies",
        "__init__",
        "initialize",
        "start",
        "stop",
        "health_check",
        "send_message",
        "__init__",
        "initialize",
        "start",
        "stop",
        "health_check",
        "__init__",
        "initialize",
        "start",
        "stop",
        "health_check",
        "__init__",
        "register_service",
        "start_service",
        "stop_service",
        "start_all_services",
        "stop_all_services",
        "get_service_status",
        "get_all_status",
        "health_check_all"
      ],
      "constants": [
        "INITIALIZING",
        "RUNNING",
        "STOPPED",
        "ERROR"
      ]
    },
    "src.architecture.system_integration": {
      "classes": [
        "IntegrationType",
        "IntegrationStatus",
        "IntegrationConfig",
        "IntegrationMetrics",
        "ServiceRegistry",
        "EventBus",
        "IntegrationManager"
      ],
      "functions": [
        "register_service",
        "get_service",
        "publish_event",
        "subscribe_to_event",
        "__init__",
        "register_service",
        "unregister_service",
        "get_service",
        "get_all_services",
        "get_services_by_type",
        "is_service_registered",
        "__init__",
        "subscribe",
        "unsubscribe",
        "publish",
        "get_subscriber_count",
        "__init__",
        "add_integration",
        "remove_integration",
        "get_integration",
        "get_integration_status",
        "set_integration_status",
        "get_integration_metrics",
        "update_metrics",
        "get_all_integrations",
        "get_integrations_by_type",
        "get_connected_integrations",
        "get_error_integrations"
      ],
      "constants": [
        "API",
        "DATABASE",
        "MESSAGING",
        "FILE_SYSTEM",
        "EXTERNAL_SERVICE",
        "DISCONNECTED",
        "CONNECTING",
        "CONNECTED",
        "ERROR"
      ]
    },
    "src.architecture.unified_architecture_core": {
      "classes": [
        "ComponentType",
        "ComponentStatus",
        "ComponentConfig",
        "ComponentMetrics",
        "ComponentLifecycle",
        "DependencyInjection",
        "UnifiedArchitecture"
      ],
      "functions": [
        "initialize_architecture",
        "shutdown_architecture",
        "get_architecture",
        "__init__",
        "register_component",
        "unregister_component",
        "initialize_component",
        "shutdown_component",
        "get_component",
        "get_component_instance",
        "get_component_status",
        "get_component_metrics",
        "get_active_components",
        "get_error_components",
        "__init__",
        "register_service",
        "register_factory",
        "get_service",
        "has_service",
        "remove_service",
        "__init__",
        "initialize",
        "shutdown",
        "get_lifecycle_manager",
        "get_di_container",
        "is_initialized",
        "cleanup"
      ],
      "constants": [
        "CORE",
        "SERVICE",
        "INTEGRATION",
        "PATTERN",
        "UTILITY",
        "INACTIVE",
        "ACTIVE",
        "ERROR",
        "MAINTENANCE"
      ]
    },
    "src.architecture.patterns.singleton_factory": {
      "classes": [
        "SingletonMeta",
        "SingletonBase",
        "ServiceFactory",
        "ServiceLocator"
      ],
      "functions": [
        "__call__",
        "create_service",
        "_create_instance",
        "register_service_type",
        "clear_cache",
        "register",
        "get",
        "is_registered",
        "unregister",
        "list_services",
        "clear_all"
      ],
      "constants": [
        "T"
      ]
    },
    "src.architecture.patterns": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.architecture.patterns.command_repository": {
      "classes": [
        "Command",
        "MessageCommand",
        "CommandInvoker",
        "Repository",
        "Entity",
        "InMemoryRepository",
        "FileRepository"
      ],
      "functions": [
        "execute",
        "undo",
        "execute",
        "undo",
        "__init__",
        "execute_command",
        "undo_last",
        "get_history_size",
        "clear_history",
        "save",
        "find_by_id",
        "find_all",
        "delete",
        "__post_init__",
        "__init__",
        "save",
        "find_by_id",
        "find_all",
        "delete",
        "count",
        "clear",
        "__init__",
        "_load_from_file",
        "_save_to_file",
        "_entity_to_dict",
        "_dict_to_entity",
        "save",
        "find_by_id",
        "find_all",
        "delete",
        "count"
      ],
      "constants": [
        "T"
      ]
    },
    "src.architecture.patterns.observer_strategy": {
      "classes": [
        "Event",
        "Observer",
        "Subject",
        "ValidationStrategy",
        "MessageValidationStrategy",
        "AgentValidationStrategy",
        "EmailValidationStrategy",
        "ValidationContext",
        "EventBus",
        "StrategyFactory"
      ],
      "functions": [
        "update",
        "__init__",
        "attach",
        "detach",
        "notify",
        "get_observer_count",
        "validate",
        "validate",
        "validate",
        "validate",
        "__init__",
        "set_strategy",
        "validate",
        "get_strategy_type",
        "__init__",
        "subscribe",
        "unsubscribe",
        "publish",
        "get_subscriber_count",
        "list_event_types",
        "create_strategy",
        "register_strategy",
        "list_strategies"
      ],
      "constants": []
    },
    "src.domain": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.domain.domain_events": {
      "classes": [
        "EventType",
        "EventPriority",
        "DomainEvent",
        "SystemEvent",
        "AgentEvent",
        "TaskEvent",
        "UserEvent",
        "EventHandler",
        "EventBus",
        "EventStore"
      ],
      "functions": [
        "publish_event",
        "create_system_event",
        "create_agent_event",
        "create_task_event",
        "create_user_event",
        "__post_init__",
        "__post_init__",
        "__post_init__",
        "__post_init__",
        "__post_init__",
        "__init__",
        "register_handler",
        "unregister_handler",
        "publish_event",
        "get_event_history",
        "clear_history",
        "__init__",
        "subscribe",
        "unsubscribe",
        "publish",
        "get_subscriber_count",
        "__init__",
        "append_event",
        "get_events",
        "get_events_by_type",
        "get_events_by_source",
        "clear_events"
      ],
      "constants": [
        "SYSTEM",
        "AGENT",
        "TASK",
        "USER",
        "LOW",
        "NORMAL",
        "HIGH",
        "CRITICAL"
      ]
    },
    "src.domain.entities": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.domain.entities.agent": {
      "classes": [
        "AgentStatus",
        "AgentType",
        "AgentCapability",
        "AgentMetrics",
        "AgentConfiguration",
        "Agent",
        "AgentManager"
      ],
      "functions": [
        "__init__",
        "id",
        "name",
        "agent_type",
        "status",
        "capabilities",
        "configuration",
        "metrics",
        "created_at",
        "updated_at",
        "current_tasks",
        "tags",
        "activate",
        "deactivate",
        "set_busy",
        "set_available",
        "set_error",
        "go_offline",
        "assign_task",
        "complete_task",
        "get_task_count",
        "is_available",
        "has_capability",
        "add_capability",
        "remove_capability",
        "add_tag",
        "remove_tag",
        "get_uptime",
        "get_last_active_time",
        "is_healthy",
        "to_dict",
        "from_dict",
        "__str__",
        "__repr__",
        "__init__",
        "register_agent",
        "unregister_agent",
        "get_agent",
        "get_all_agents",
        "get_agents_by_type",
        "get_agents_by_capability",
        "get_available_agents",
        "cleanup_all",
        "agents"
      ],
      "constants": [
        "INACTIVE",
        "ACTIVE",
        "BUSY",
        "ERROR",
        "OFFLINE",
        "CORE",
        "SERVICE",
        "INTEGRATION",
        "UTILITY",
        "MESSAGING",
        "COMMAND_EXECUTION",
        "DATA_PROCESSING",
        "COORDINATION",
        "USER_INTERFACE",
        "SECURITY",
        "SYSTEM_INTEGRATION"
      ]
    },
    "src.domain.entities.task_enums": {
      "classes": [
        "TaskStatus",
        "TaskPriority",
        "TaskType"
      ],
      "functions": [],
      "constants": [
        "PENDING",
        "IN_PROGRESS",
        "COMPLETED",
        "FAILED",
        "CANCELLED",
        "LOW",
        "NORMAL",
        "HIGH",
        "CRITICAL",
        "DEVELOPMENT",
        "TESTING",
        "DOCUMENTATION",
        "DEPLOYMENT",
        "MAINTENANCE",
        "SYSTEM"
      ]
    },
    "src.domain.entities.task_core": {
      "classes": [
        "TaskCore"
      ],
      "functions": [
        "update_status",
        "update_progress",
        "assign_to",
        "add_tag",
        "remove_tag",
        "set_metadata",
        "get_metadata",
        "is_overdue",
        "time_remaining",
        "to_dict",
        "from_dict"
      ],
      "constants": []
    },
    "src.domain.entities.task": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.monitoring": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.monitoring.memory_optimized_monitor": {
      "classes": [
        "LightweightSnapshot",
        "MemoryOptimizedMonitor"
      ],
      "functions": [
        "get_lightweight_monitor",
        "to_dict",
        "__init__",
        "register_component",
        "record_request",
        "get_current_status",
        "get_memory_usage",
        "clear_old_data",
        "save_lightweight_report"
      ],
      "constants": []
    },
    "src.monitoring.performance_monitor": {
      "classes": [
        "PerformanceSnapshot",
        "ComponentMetrics",
        "RealTimePerformanceMonitor"
      ],
      "functions": [
        "to_dict",
        "to_dict",
        "__init__",
        "register_component",
        "record_request",
        "get_performance_summary",
        "save_performance_report"
      ],
      "constants": []
    },
    "src.monitoring.performance_monitor_utils": {
      "classes": [],
      "functions": [
        "save_snapshot_to_file",
        "load_snapshots_from_dir",
        "calculate_average_metrics",
        "format_metrics_report"
      ],
      "constants": []
    },
    "src.fsm": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.fsm.activity_monitor": {
      "classes": [
        "ActivityMonitor"
      ],
      "functions": [
        "get_activity_monitor",
        "__init__",
        "_load_activity_data",
        "_save_activity_data",
        "record_agent_activity",
        "record_messaging_activity",
        "record_task_activity",
        "record_status_update",
        "check_agent_inactivity",
        "check_messaging_inactivity",
        "update_agent_state_for_inactivity",
        "get_agent_activity_summary",
        "get_inactive_agents",
        "get_messaging_inactive_agents"
      ],
      "constants": [
        "ACTIVITY_TIMEOUT_MINUTES",
        "MESSAGING_TIMEOUT_MINUTES"
      ]
    },
    "src.fsm.captain_dashboard": {
      "classes": [
        "CaptainDashboard"
      ],
      "functions": [
        "get_captain_dashboard",
        "__init__",
        "get_agent_status_report",
        "get_inactive_agents",
        "get_swarm_health_summary",
        "generate_captain_report",
        "save_report",
        "get_high_priority_message_template"
      ],
      "constants": []
    },
    "src.fsm.fsm_messaging_integration": {
      "classes": [
        "FSMTransition",
        "FSMMessagingIntegration"
      ],
      "functions": [
        "create_fsm_enhanced_message",
        "__init__",
        "get_agent_fsm_state",
        "validate_state_transition",
        "record_state_transition",
        "get_agent_status_summary",
        "_get_last_transition",
        "_get_state_history",
        "generate_fsm_status_message"
      ],
      "constants": []
    },
    "src.fsm.fsm_registry": {
      "classes": [
        "AgentState",
        "SwarmState",
        "StatePointer"
      ],
      "functions": [
        "load_json",
        "read_agent_state",
        "read_swarm_state",
        "get_all_agent_states",
        "validate_agent_state",
        "validate_swarm_state",
        "get_valid_agent_states",
        "get_valid_swarm_states",
        "update_agent_state",
        "update_swarm_state",
        "get_state_summary"
      ],
      "constants": [
        "SPEC_PATH",
        "STATUS_POINTERS",
        "ONBOARDING",
        "ACTIVE",
        "CONTRACT_EXECUTION_ACTIVE",
        "SURVEY_MISSION_COMPLETED",
        "PAUSED",
        "ERROR",
        "RESET",
        "SHUTDOWN",
        "IDLE",
        "COORDINATING",
        "BROADCAST",
        "DEGRADED",
        "HALT"
      ]
    },
    "src.ml.v3_007_infrastructure": {
      "classes": [
        "MLInfrastructureSetup"
      ],
      "functions": [
        "__init__",
        "setup_infrastructure"
      ],
      "constants": []
    },
    "src.ml.v3_007_data_management": {
      "classes": [
        "MLDataManagement"
      ],
      "functions": [
        "__init__",
        "create_datasets"
      ],
      "constants": []
    },
    "src.ml.v3_007_model_management": {
      "classes": [
        "MLModelManagement"
      ],
      "functions": [
        "__init__",
        "create_model_architectures",
        "setup_training_pipeline",
        "implement_versioning",
        "create_evaluation_system"
      ],
      "constants": []
    },
    "src.ml.v3_007_deployment": {
      "classes": [
        "MLDeploymentSystem"
      ],
      "functions": [
        "__init__",
        "setup_deployment_pipeline"
      ],
      "constants": []
    },
    "src.ml": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.ml.ml_monitoring": {
      "classes": [
        "MLMonitoring"
      ],
      "functions": [
        "__init__",
        "create_alert_rule",
        "resolve_alert",
        "get_active_alerts",
        "add_alert_callback",
        "get_monitoring_dashboard_data",
        "record_metric",
        "record_prediction_metrics",
        "record_training_metrics",
        "record_data_drift_metrics",
        "get_metric_history",
        "get_metric_statistics"
      ],
      "constants": []
    },
    "src.ml.ml_monitoring_core": {
      "classes": [
        "MLMonitoringCore"
      ],
      "functions": [
        "__init__",
        "record_metric",
        "record_prediction_metrics",
        "record_training_metrics",
        "record_data_drift_metrics",
        "get_metric_history",
        "get_metric_statistics",
        "_check_alerts",
        "_trigger_alert",
        "add_alert_callback"
      ],
      "constants": []
    },
    "src.ml.ml_monitoring_models": {
      "classes": [
        "MetricType",
        "AlertSeverity",
        "MetricData",
        "Alert"
      ],
      "functions": [],
      "constants": [
        "COUNTER",
        "GAUGE",
        "HISTOGRAM",
        "SUMMARY",
        "LOW",
        "MEDIUM",
        "HIGH",
        "CRITICAL"
      ]
    },
    "src.ml.ml_monitoring_storage": {
      "classes": [
        "MLMonitoringStorage"
      ],
      "functions": [
        "__init__",
        "_load_metrics",
        "_save_metrics",
        "_load_alerts",
        "_save_alerts",
        "add_metric",
        "add_alert",
        "get_metrics",
        "get_alerts",
        "resolve_alert"
      ],
      "constants": []
    },
    "src.ml.ml_pipeline_core": {
      "classes": [
        "MLPipelineCore"
      ],
      "functions": [
        "__init__",
        "create_training_data",
        "train_model",
        "evaluate_model",
        "predict",
        "_calculate_accuracy",
        "get_model_status"
      ],
      "constants": []
    },
    "src.ml.ml_pipeline_core_fixed": {
      "classes": [
        "ModelConfig",
        "TrainingData",
        "FallbackMLModel",
        "MLPipelineCore"
      ],
      "functions": [
        "__init__",
        "train",
        "predict",
        "save",
        "load",
        "__init__",
        "create_training_data",
        "create_model",
        "train_model",
        "evaluate_model",
        "deploy_model",
        "get_system_status",
        "export_system_data",
        "_create_tensorflow_model",
        "_create_pytorch_model"
      ],
      "constants": [
        "TENSORFLOW_AVAILABLE",
        "PYTORCH_AVAILABLE",
        "TENSORFLOW_AVAILABLE",
        "PYTORCH_AVAILABLE"
      ]
    },
    "src.ml.ml_pipeline_core_refactored": {
      "classes": [
        "MLPipelineCore",
        "PyTorchModel"
      ],
      "functions": [
        "__init__",
        "create_training_data",
        "create_model",
        "_create_neural_network_model",
        "_create_tensorflow_model",
        "_create_pytorch_model",
        "train_model",
        "evaluate_model",
        "get_model_info",
        "list_models",
        "get_status",
        "__init__",
        "forward"
      ],
      "constants": []
    },
    "src.ml.ml_pipeline_core_v2_compliant": {
      "classes": [
        "MLPipelineCore",
        "PyTorchModel"
      ],
      "functions": [
        "__init__",
        "create_training_data",
        "_split_training_data",
        "create_model",
        "_create_neural_network_model",
        "_create_tensorflow_model",
        "_create_pytorch_model",
        "train_model",
        "_train_model_by_type",
        "_train_tensorflow_model",
        "_get_validation_data",
        "_create_tensorflow_training_results",
        "evaluate_model",
        "_calculate_model_metrics",
        "_calculate_classification_metrics",
        "_calculate_regression_metrics",
        "__init__",
        "forward"
      ],
      "constants": []
    },
    "src.ml.ml_pipeline_core_v2_final": {
      "classes": [
        "MLPipelineCore",
        "PyTorchModel"
      ],
      "functions": [
        "__init__",
        "create_training_data",
        "_split_data",
        "create_model",
        "_create_nn_model",
        "_create_tf_model",
        "_create_torch_model",
        "train_model",
        "_train_tf_model",
        "_get_val_data",
        "_get_accuracy",
        "evaluate_model",
        "_calculate_metrics",
        "_calc_classification_metrics",
        "_calc_regression_metrics",
        "__init__",
        "forward"
      ],
      "constants": []
    },
    "src.ml.ml_pipeline_core_v2_optimal": {
      "classes": [
        "MLPipelineCore",
        "PyTorchModel"
      ],
      "functions": [
        "__init__",
        "create_training_data",
        "create_model",
        "_create_nn_model",
        "_create_tf_model",
        "_create_torch_model",
        "train_model",
        "evaluate_model",
        "__init__",
        "forward"
      ],
      "constants": []
    },
    "src.ml.ml_pipeline_core_v2_perfect": {
      "classes": [
        "MLPipelineCore",
        "PyTorchModel"
      ],
      "functions": [
        "__init__",
        "create_training_data",
        "create_model",
        "_create_nn_model",
        "_create_tf_model",
        "_create_torch_model",
        "train_model",
        "_get_validation_data",
        "evaluate_model",
        "__init__",
        "forward"
      ],
      "constants": []
    },
    "src.ml.ml_pipeline_fallback": {
      "classes": [
        "FallbackMLModel"
      ],
      "functions": [
        "__init__",
        "train",
        "predict",
        "save",
        "load"
      ],
      "constants": []
    },
    "src.ml.ml_pipeline_manager": {
      "classes": [
        "MLPipelineManager"
      ],
      "functions": [
        "__init__",
        "run_complete_pipeline",
        "_create_training_data",
        "batch_train_models",
        "compare_models",
        "get_pipeline_status",
        "reset_pipeline",
        "export_results"
      ],
      "constants": []
    },
    "src.ml.ml_pipeline_models": {
      "classes": [
        "ModelConfig",
        "TrainingData",
        "ModelMetrics",
        "ModelResult"
      ],
      "functions": [],
      "constants": []
    },
    "src.ml.ml_pipeline_system": {
      "classes": [
        "MLPipelineSystem"
      ],
      "functions": [
        "create_ml_pipeline",
        "__init__",
        "deploy_model",
        "get_system_status",
        "export_system_data",
        "create_training_data",
        "create_model",
        "train_model",
        "evaluate_model"
      ],
      "constants": []
    },
    "src.ml.ml_pipeline_system_v2": {
      "classes": [
        "TensorFlowModel",
        "PyTorchModel",
        "MLPipelineSystem",
        "NeuralNetwork"
      ],
      "functions": [
        "create_ml_pipeline",
        "__init__",
        "_create_model",
        "train",
        "predict",
        "__init__",
        "_create_model",
        "train",
        "predict",
        "__init__",
        "create_model",
        "_get_timestamp",
        "create_training_data",
        "train_model",
        "predict",
        "save_model",
        "load_model",
        "get_model_info",
        "list_models",
        "get_system_status",
        "__init__",
        "forward"
      ],
      "constants": [
        "TENSORFLOW_AVAILABLE",
        "PYTORCH_AVAILABLE",
        "TENSORFLOW_AVAILABLE",
        "PYTORCH_AVAILABLE",
        "X",
        "X"
      ]
    },
    "src.ml.ml_pipeline_utils": {
      "classes": [
        "DataProcessor",
        "ModelValidator"
      ],
      "functions": [
        "calculate_model_complexity",
        "format_metrics",
        "validate_config",
        "get_system_info",
        "__init__",
        "normalize_data",
        "split_data",
        "__init__",
        "validate_results",
        "_validate_training_results",
        "_validate_evaluation_results"
      ],
      "constants": []
    },
    "src.ml.model_deployment": {
      "classes": [
        "ModelDeployment"
      ],
      "functions": [
        "__init__",
        "deploy_model",
        "predict",
        "get_deployment_status",
        "list_deployments",
        "undeploy_model",
        "get_model_versions",
        "health_check"
      ],
      "constants": []
    },
    "src.ml.model_versioning": {
      "classes": [
        "ModelVersioning"
      ],
      "functions": [
        "__init__",
        "create_version",
        "get_version",
        "list_versions",
        "update_version_status",
        "delete_version",
        "promote_version",
        "compare_versions",
        "get_latest_version",
        "get_production_versions",
        "archive_old_versions",
        "validate_model_integrity"
      ],
      "constants": []
    },
    "src.ml.pipeline": {
      "classes": [
        "V3_007_MLPipeline"
      ],
      "functions": [
        "main",
        "__init__",
        "execute_implementation",
        "get_implementation_summary",
        "send_completion_notification"
      ],
      "constants": []
    },
    "src.ml.pipeline_v2": {
      "classes": [
        "V3_007_MLPipeline"
      ],
      "functions": [
        "main",
        "__init__",
        "execute_implementation",
        "get_implementation_summary",
        "send_completion_notification"
      ],
      "constants": []
    },
    "src.ml.pytorch_infrastructure": {
      "classes": [
        "PyTorchInfrastructure",
        "SampleNet"
      ],
      "functions": [
        "__init__",
        "_configure_pytorch",
        "create_sample_model",
        "save_model",
        "load_model",
        "predict",
        "train_model",
        "get_model_info",
        "__init__",
        "forward"
      ],
      "constants": []
    },
    "src.ml.tensorflow_infrastructure": {
      "classes": [
        "TensorFlowInfrastructure"
      ],
      "functions": [
        "__init__",
        "_configure_tensorflow",
        "create_sample_model",
        "save_model",
        "load_model",
        "predict",
        "train_model",
        "get_model_info"
      ],
      "constants": []
    },
    "src.ml.training_pipeline": {
      "classes": [
        "PipelineStatus",
        "TrainingJob",
        "TrainingPipeline"
      ],
      "functions": [
        "__init__",
        "create_training_job",
        "get_job_status",
        "list_jobs",
        "cancel_job",
        "_load_dataset",
        "get_pipeline_status"
      ],
      "constants": [
        "PENDING",
        "RUNNING",
        "COMPLETED",
        "FAILED",
        "CANCELLED"
      ]
    },
    "src.ml.v3_007_automation": {
      "classes": [
        "MLAutomationSystem"
      ],
      "functions": [
        "__init__",
        "create_automated_retraining"
      ],
      "constants": []
    },
    "src.ml.v3_007_core": {
      "classes": [
        "V3_007_MLPipelineCore"
      ],
      "functions": [
        "__init__",
        "execute_implementation",
        "setup_ml_infrastructure",
        "create_training_datasets",
        "implement_model_architectures",
        "setup_training_pipeline",
        "implement_model_versioning",
        "create_evaluation_system",
        "setup_deployment_pipeline",
        "implement_monitoring_system",
        "create_automated_retraining",
        "validate_ml_system",
        "get_implementation_summary",
        "send_completion_notification"
      ],
      "constants": []
    },
    "src.ml.v3_007_monitoring": {
      "classes": [
        "MLMonitoringSystem"
      ],
      "functions": [
        "__init__",
        "implement_monitoring_system"
      ],
      "constants": []
    },
    "src.ml.validation_framework": {
      "classes": [
        "ValidationFramework"
      ],
      "functions": [
        "__init__",
        "run_test",
        "run_test_suite",
        "save_results",
        "load_results",
        "get_test_summary"
      ],
      "constants": []
    },
    "src.ml.model_versioning_core": {
      "classes": [
        "VersionStatus",
        "ModelVersion",
        "ModelVersioningCore"
      ],
      "functions": [
        "__init__",
        "calculate_file_hash",
        "get_file_size",
        "create_version",
        "get_version",
        "list_versions",
        "update_version_status",
        "delete_version",
        "_save_version_to_registry"
      ],
      "constants": [
        "DRAFT",
        "STAGING",
        "PRODUCTION",
        "DEPRECATED",
        "ARCHIVED"
      ]
    },
    "src.ml.model_versioning_advanced": {
      "classes": [
        "ModelVersioningAdvanced"
      ],
      "functions": [
        "__init__",
        "promote_version",
        "compare_versions",
        "get_latest_version",
        "get_production_versions",
        "archive_old_versions",
        "validate_model_integrity",
        "_is_valid_promotion"
      ],
      "constants": []
    },
    "src.ml.validation_framework_core": {
      "classes": [
        "ValidationStatus",
        "TestType",
        "ValidationResult",
        "TestSuite",
        "ValidationFrameworkCore"
      ],
      "functions": [
        "__init__",
        "run_test",
        "run_test_suite",
        "save_results",
        "load_results",
        "get_test_summary"
      ],
      "constants": [
        "PASSED",
        "FAILED",
        "WARNING",
        "SKIPPED",
        "UNIT",
        "INTEGRATION",
        "PERFORMANCE",
        "ACCURACY",
        "DATA_QUALITY"
      ]
    },
    "src.ml.data_ingestion_system": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.ml.data_ingestion_system.data_ingestion.IngestManager": {
      "classes": [
        "IngestManager"
      ],
      "functions": [
        "__init__",
        "ingest",
        "_load_files",
        "_process_files",
        "start_watcher",
        "on_created",
        "_get_handler",
        "_read_txt",
        "_read_md",
        "_read_pdf",
        "_read_json",
        "_clean_text"
      ],
      "constants": [
        "SUPPORTED_FORMATS",
        "SUPPORTED_EXTENSIONS"
      ]
    },
    "src.ml.data_ingestion_system.data_ingestion.LocalEmbeddingsGeneratorAgent": {
      "classes": [
        "LocalEmbeddingsGeneratorAgent"
      ],
      "functions": [
        "__init__",
        "generate_embeddings",
        "_generate_embedding_from_ollama"
      ],
      "constants": []
    },
    "src.ml.data_ingestion_system.data_ingestion.OrchestratorAgent": {
      "classes": [
        "OrchestratorAgent"
      ],
      "functions": [
        "__init__",
        "run_batch_pipeline",
        "run_realtime_pipeline",
        "_archive_file",
        "_save_cleaned_file"
      ],
      "constants": []
    },
    "src.ml.data_ingestion_system.data_ingestion.PreprocessorAgent": {
      "classes": [
        "PreprocessorAgent"
      ],
      "functions": [
        "__init__",
        "preprocess_documents",
        "clean_text",
        "chunk_text"
      ],
      "constants": []
    },
    "src.ml.data_ingestion_system.data_ingestion.VectorStoreAgent": {
      "classes": [
        "VectorStoreAgent"
      ],
      "functions": [
        "__init__",
        "_get_or_create_collection",
        "add_embeddings",
        "query_similar",
        "delete_embedding",
        "persist"
      ],
      "constants": []
    },
    "src.ml.data_ingestion_system.data_ingestion": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.infrastructure.cloud": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.tracing": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.tracing.agent_tracing": {
      "classes": [
        "AgentTracingIntegration"
      ],
      "functions": [
        "__init__",
        "integrate_agent_tracing",
        "get_status"
      ],
      "constants": []
    },
    "src.tracing.core": {
      "classes": [
        "V3_004_DistributedTracingCore"
      ],
      "functions": [
        "__init__",
        "execute_implementation",
        "_validate_tracing_system",
        "get_implementation_summary"
      ],
      "constants": []
    },
    "src.tracing.distributed_tracing": {
      "classes": [
        "V3_004_DistributedTracing"
      ],
      "functions": [
        "main",
        "__init__",
        "execute_implementation",
        "get_implementation_summary"
      ],
      "constants": []
    },
    "src.tracing.distributed_tracing_core": {
      "classes": [
        "V3_004_DistributedTracingCore"
      ],
      "functions": [
        "__init__",
        "execute_implementation",
        "setup_tracing_infrastructure",
        "configure_jaeger_backend",
        "integrate_agent_tracing",
        "implement_fsm_tracing",
        "setup_messaging_observability",
        "create_performance_monitoring",
        "implement_error_correlation",
        "validate_tracing_system",
        "deploy_tracing_components",
        "test_end_to_end_tracing",
        "get_implementation_summary"
      ],
      "constants": []
    },
    "src.tracing.distributed_tracing_system": {
      "classes": [
        "TraceConfig",
        "DistributedTracingSystem"
      ],
      "functions": [
        "create_tracing_system",
        "trace_agent_operation",
        "__init__",
        "_initialize_tracing",
        "start_span",
        "add_span_attribute",
        "add_span_event",
        "set_span_status",
        "trace_agent_operation",
        "trace_messaging_operation",
        "trace_fsm_transition",
        "trace_v3_contract",
        "get_trace_summary",
        "export_traces",
        "cleanup"
      ],
      "constants": [
        "OPENTELEMETRY_AVAILABLE",
        "OPENTELEMETRY_AVAILABLE"
      ]
    },
    "src.tracing.fsm_tracing": {
      "classes": [
        "FSMTracingIntegration"
      ],
      "functions": [
        "__init__",
        "implement_fsm_tracing",
        "get_status"
      ],
      "constants": []
    },
    "src.tracing.infrastructure_setup": {
      "classes": [
        "TracingInfrastructureSetup"
      ],
      "functions": [
        "__init__",
        "setup_tracing_infrastructure",
        "get_status"
      ],
      "constants": []
    },
    "src.tracing.jaeger_backend": {
      "classes": [
        "JaegerBackendConfig"
      ],
      "functions": [
        "__init__",
        "configure_jaeger_backend",
        "get_status"
      ],
      "constants": []
    },
    "src.tracing.messaging_observability": {
      "classes": [
        "MessagingObservabilitySetup"
      ],
      "functions": [
        "__init__",
        "setup_messaging_observability",
        "get_status"
      ],
      "constants": []
    },
    "src.tracing.performance_monitoring": {
      "classes": [
        "PerformanceMonitoringSetup"
      ],
      "functions": [
        "__init__",
        "create_performance_monitoring",
        "get_status"
      ],
      "constants": []
    },
    "src.validation": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.validation.contract_system_validator": {
      "classes": [
        "ContractSystemValidator"
      ],
      "functions": [
        "__init__",
        "validate",
        "_get_agent_contracts",
        "_validate_contract_aspects",
        "_validate_contract_dependencies",
        "_validate_cycle_timelines",
        "_validate_contract_priorities"
      ],
      "constants": []
    },
    "src.validation.documentation_validator": {
      "classes": [
        "DocumentationValidator"
      ],
      "functions": [
        "validate"
      ],
      "constants": []
    },
    "src.validation.enhanced_security_validator": {
      "classes": [
        "SecurityFinding",
        "EnhancedSecurityValidator"
      ],
      "functions": [
        "__init__",
        "_load_false_positive_patterns",
        "_load_security_patterns",
        "_load_input_validation_rules",
        "validate_input",
        "validate",
        "_scan_file",
        "_is_false_positive",
        "_categorize_false_positives"
      ],
      "constants": []
    },
    "src.validation.integration_validator": {
      "classes": [
        "IntegrationValidator"
      ],
      "functions": [
        "validate"
      ],
      "constants": []
    },
    "src.validation.performance_validator": {
      "classes": [
        "PerformanceValidator"
      ],
      "functions": [
        "validate"
      ],
      "constants": []
    },
    "src.validation.quality_gates_validator": {
      "classes": [
        "QualityGatesValidator"
      ],
      "functions": [
        "validate",
        "_check_configuration_files"
      ],
      "constants": []
    },
    "src.validation.security_validator": {
      "classes": [
        "SecurityValidator"
      ],
      "functions": [
        "validate",
        "_check_security_files",
        "_scan_for_sensitive_info"
      ],
      "constants": []
    },
    "src.validation.v3_directives_validator": {
      "classes": [
        "V3DirectivesValidator"
      ],
      "functions": [
        "__init__",
        "validate",
        "_check_required_files",
        "_validate_v3_contracts",
        "_validate_contract_structure"
      ],
      "constants": []
    },
    "src.validation.validation_framework_core": {
      "classes": [
        "V3ValidationFrameworkCore"
      ],
      "functions": [
        "__init__",
        "run_full_validation",
        "_save_validation_results",
        "get_validation_summary"
      ],
      "constants": []
    },
    "src.validation.validation_utils": {
      "classes": [],
      "functions": [
        "load_json_file",
        "save_json_file",
        "check_file_exists",
        "validate_required_fields",
        "get_team_alpha_agents",
        "format_validation_summary"
      ],
      "constants": []
    },
    "src.discord": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.discord.memory_aware_responses": {
      "classes": [
        "ResponseType",
        "ConversationContext",
        "MemoryContextManager",
        "ResponseGenerator",
        "ConversationTracker",
        "ContextInjector"
      ],
      "functions": [
        "__init__",
        "get_or_create_context",
        "update_context",
        "_load_user_preferences",
        "_load_system_context",
        "__init__",
        "generate_response",
        "_analyze_message_context",
        "_detect_urgency",
        "_detect_sentiment",
        "_extract_keywords",
        "_detect_question_type",
        "_detect_coordination_need",
        "_generate_typed_response",
        "_enhance_with_context",
        "_apply_response_rules",
        "_load_response_templates",
        "_load_response_rules",
        "__init__",
        "track_conversation",
        "get_conversation_history",
        "get_conversation_stats",
        "__init__",
        "inject_context",
        "_extract_recent_topics"
      ],
      "constants": [
        "STATUS_UPDATE",
        "COORDINATION_REQUEST",
        "TASK_COMPLETION",
        "SYSTEM_ALERT",
        "SWARM_COORDINATION",
        "USER_QUERY",
        "ERROR_RESPONSE"
      ]
    },
    "src.discord.template_messaging": {
      "classes": [
        "TemplateEngine",
        "MessageRenderer",
        "TemplateRegistry"
      ],
      "functions": [
        "__init__",
        "_register_filters",
        "_load_default_templates",
        "render_template",
        "get_available_templates",
        "__init__",
        "render_agent_status",
        "render_system_alert",
        "render_coordination_request",
        "render_task_completion",
        "render_swarm_coordination",
        "validate_message_length",
        "__init__",
        "register_template",
        "get_template_info",
        "list_templates",
        "format_timestamp",
        "format_priority",
        "truncate_text"
      ],
      "constants": []
    },
    "src.discord.enhanced_bot_engine": {
      "classes": [
        "EnhancedDiscordBot",
        "MessageTemplateManager",
        "ResponseGenerator",
        "CoordinationManager"
      ],
      "functions": [
        "__init__",
        "_determine_response_type",
        "__init__",
        "create_agent_status_message",
        "create_system_alert_message",
        "create_coordination_message",
        "__init__",
        "generate_memory_aware_response",
        "__init__",
        "broadcast_swarm_status",
        "send_coordination_request"
      ],
      "constants": []
    },
    "src.discord.realtime_coordination_core": {
      "classes": [
        "EventType",
        "EventPriority",
        "CoordinationEvent",
        "EventQueue",
        "RealTimeCoordinationCore"
      ],
      "functions": [
        "__init__",
        "put",
        "get",
        "size",
        "__init__",
        "register_agent",
        "unregister_agent",
        "emit_event",
        "register_handler",
        "process_events",
        "get_active_agents",
        "get_queue_size",
        "_emit_event"
      ],
      "constants": [
        "TASK_ASSIGNMENT",
        "STATUS_UPDATE",
        "COORDINATION_REQUEST",
        "SYSTEM_ALERT",
        "SWARM_SYNC",
        "EMERGENCY_BROADCAST",
        "AGENT_JOIN",
        "AGENT_LEAVE",
        "LOW",
        "NORMAL",
        "HIGH",
        "URGENT",
        "CRITICAL"
      ]
    },
    "src.discord.realtime_coordination": {
      "classes": [
        "RealTimeCoordination"
      ],
      "functions": [
        "__init__",
        "register_agent",
        "unregister_agent",
        "emit_event",
        "register_handler",
        "process_events",
        "get_active_agents",
        "get_queue_size",
        "start_coordination_service",
        "stop_coordination_service",
        "get_coordination_summary",
        "sync_swarm_state",
        "broadcast_to_swarm",
        "request_coordination"
      ],
      "constants": []
    },
    "src.discord.realtime_coordination_advanced": {
      "classes": [
        "SwarmManager",
        "EventProcessor",
        "RealTimeCoordinationAdvanced"
      ],
      "functions": [
        "__init__",
        "sync_swarm_state",
        "get_swarm_status",
        "broadcast_to_swarm",
        "request_coordination",
        "__init__",
        "add_processing_rule",
        "process_event_with_rules",
        "get_event_statistics",
        "_default_event_processing",
        "__init__",
        "start_coordination_service",
        "stop_coordination_service",
        "get_coordination_summary"
      ],
      "constants": []
    },
    "src.discord.memory_aware_responses_core": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.discord.response_types": {
      "classes": [
        "ResponseType",
        "ConversationContext",
        "MemoryContext",
        "ResponseContext"
      ],
      "functions": [],
      "constants": [
        "STATUS_UPDATE",
        "COORDINATION_REQUEST",
        "TASK_COMPLETION",
        "SYSTEM_ALERT",
        "SWARM_COORDINATION",
        "USER_QUERY",
        "ERROR_RESPONSE"
      ]
    },
    "src.team_beta": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.team_beta.clone_automation": {
      "classes": [
        "CloneTask",
        "CloneResult",
        "CloneAutomation"
      ],
      "functions": [
        "main",
        "__init__",
        "_initialize_clone_tasks",
        "check_dependencies",
        "_check_command",
        "clone_repository",
        "_count_files",
        "run_all_clones",
        "get_task_by_name",
        "get_tasks_by_status",
        "get_failed_tasks",
        "create_progress_report",
        "export_progress_report"
      ],
      "constants": []
    },
    "src.team_beta.consolidation_analyzer": {
      "classes": [
        "DuplicationSeverity",
        "ConsolidationStatus",
        "DuplicationInstance",
        "ConsolidationReport",
        "SystemConsolidationAnalyzer"
      ],
      "functions": [
        "create_consolidation_analyzer",
        "__init__",
        "_initialize_known_duplications",
        "analyze_duplications",
        "_assess_consolidation_risks",
        "create_consolidation_plan",
        "update_duplication_status",
        "get_consolidation_progress",
        "export_consolidation_analysis"
      ],
      "constants": [
        "CRITICAL",
        "HIGH",
        "MEDIUM",
        "LOW",
        "IDENTIFIED",
        "ANALYZED",
        "PLANNED",
        "IN_PROGRESS",
        "COMPLETED",
        "CANCELLED"
      ]
    },
    "src.team_beta.repository_analyzer": {
      "classes": [
        "RepositoryType",
        "CloneStatus",
        "RepositoryInfo",
        "CloneResult",
        "RepositoryAnalyzer"
      ],
      "functions": [
        "create_repository_analyzer",
        "__init__",
        "_initialize_target_repositories",
        "analyze_repository_dependencies",
        "_check_nodejs",
        "_check_python",
        "_check_npm",
        "_check_pip",
        "clone_repository",
        "_count_cloned_files",
        "get_repositories_by_type",
        "get_repositories_by_status",
        "get_failed_clones",
        "create_analysis_report",
        "_generate_recommendations"
      ],
      "constants": [
        "MAIN_PROJECT",
        "VSCODE_FORK",
        "DEPENDENCY",
        "DOCUMENTATION",
        "TESTING",
        "NOT_CLONED",
        "CLONING",
        "CLONED",
        "ERROR",
        "UPDATED"
      ]
    },
    "src.team_beta.repository_manager": {
      "classes": [
        "RepositoryStatus",
        "ErrorType",
        "Repository",
        "CloneOperation",
        "ErrorResolution",
        "RepositoryManagerInterface"
      ],
      "functions": [
        "create_sample_repository_manager",
        "__init__",
        "_initialize_error_resolutions",
        "add_repository",
        "get_repository_by_name",
        "get_repositories_by_status",
        "get_repositories_with_errors",
        "start_clone_operation",
        "update_clone_progress",
        "add_error_to_repository",
        "get_error_resolution",
        "get_high_priority_errors",
        "create_repository_dashboard_data",
        "export_dashboard_data",
        "validate_repository_setup"
      ],
      "constants": [
        "READY",
        "CLONING",
        "CLONED",
        "ERROR",
        "UPDATING",
        "CLONE_FAILED",
        "DEPENDENCY_MISSING",
        "PERMISSION_DENIED",
        "NETWORK_ERROR",
        "CONFIG_ERROR"
      ]
    },
    "src.team_beta.vscode_customization": {
      "classes": [
        "ThemeType",
        "LayoutType",
        "ThemeConfig",
        "ExtensionConfig",
        "LayoutConfig",
        "VSCodeCustomizationInterface"
      ],
      "functions": [
        "create_agent_optimized_config",
        "__init__",
        "_initialize_themes",
        "_initialize_extensions",
        "_initialize_layouts",
        "get_available_themes",
        "get_agent_optimized_themes",
        "get_extension_by_category",
        "get_agent_specific_extensions",
        "get_repository_management_extensions",
        "get_layout_by_type",
        "create_customization_config",
        "export_configuration",
        "validate_configuration"
      ],
      "constants": [
        "DARK",
        "LIGHT",
        "AGENT_FRIENDLY",
        "HIGH_CONTRAST",
        "STANDARD",
        "AGENT_FOCUSED",
        "REPOSITORY_MANAGEMENT",
        "DEVELOPMENT"
      ]
    },
    "src.team_beta.vscode_customization_core": {
      "classes": [
        "ThemeType",
        "LayoutType",
        "ThemeConfig",
        "ExtensionConfig",
        "LayoutConfig",
        "VSCodeCustomizationCore"
      ],
      "functions": [
        "main",
        "__init__",
        "_initialize_themes",
        "_initialize_extensions",
        "_initialize_layouts",
        "get_agent_optimized_config",
        "_create_config",
        "export_configuration",
        "validate_configuration"
      ],
      "constants": [
        "DARK",
        "LIGHT",
        "AGENT_FRIENDLY",
        "STANDARD",
        "AGENT_FOCUSED",
        "REPOSITORY_MANAGEMENT"
      ]
    },
    "src.team_beta.vscode_integration": {
      "classes": [
        "IntegrationStatus",
        "VSCodeComponent",
        "VSCodeForkTask",
        "IntegrationResult",
        "VSCodeIntegrationInterface"
      ],
      "functions": [
        "create_vscode_integration",
        "__init__",
        "_initialize_fork_tasks",
        "integrate_with_repository_manager",
        "create_vscode_fork_workflow",
        "get_integration_status",
        "create_team_coordination_interface",
        "export_integration_report"
      ],
      "constants": [
        "PENDING",
        "IN_PROGRESS",
        "COMPLETED",
        "FAILED",
        "TESTING",
        "CORE",
        "EXTENSIONS",
        "THEMES",
        "LANGUAGES",
        "DEBUGGERS"
      ]
    },
    "src.team_beta.vscode_quality_gates": {
      "classes": [
        "VSCodeQualityResult",
        "VSCodeQualityGates"
      ],
      "functions": [
        "main",
        "__init__",
        "check_file",
        "_is_enum_class",
        "_check_v2_violations",
        "_check_vscode_issues",
        "_calculate_complexity",
        "_generate_recommendations",
        "_calculate_score",
        "_get_quality_level",
        "check_directory",
        "generate_report"
      ],
      "constants": []
    },
    "src.integration": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.integration.comprehensive_integration_assessment_v2": {
      "classes": [
        "ComprehensiveIntegrationAssessmentV2"
      ],
      "functions": [
        "__init__",
        "register_component",
        "assess_all_components",
        "assess_component_area",
        "get_assessment_report",
        "get_component_status",
        "_generate_integration_report",
        "_generate_report_summary",
        "_get_assessment_summary",
        "_get_top_recommendations",
        "_get_health_status",
        "validate_system_integrity"
      ],
      "constants": []
    },
    "src.integration.integration_assessment_engine": {
      "classes": [
        "IntegrationAssessmentEngine"
      ],
      "functions": [
        "__init__",
        "_detect_platform",
        "register_component",
        "assess_component",
        "_assess_cross_platform",
        "_assess_performance",
        "_assess_repository_automation",
        "_assess_integration_testing",
        "_assess_generic_area",
        "_create_failed_assessment",
        "get_assessment_summary"
      ],
      "constants": []
    },
    "src.integration.integration_models": {
      "classes": [
        "AssessmentArea",
        "Priority",
        "AssessmentStatus",
        "PlatformType",
        "IntegrationAssessment",
        "PlatformCompatibility",
        "PerformanceMetrics",
        "IntegrationReport",
        "ComponentInfo",
        "AssessmentConfiguration"
      ],
      "functions": [
        "to_dict",
        "is_critical",
        "get_health_score",
        "is_compatible",
        "get_compatibility_level",
        "get_performance_score",
        "get_completion_percentage",
        "get_overall_health",
        "get_critical_issues_count",
        "is_multi_platform",
        "get_dependency_count",
        "is_valid"
      ],
      "constants": [
        "CROSS_PLATFORM",
        "PERFORMANCE",
        "REPOSITORY_AUTOMATION",
        "INTEGRATION_TESTING",
        "SECURITY",
        "SCALABILITY",
        "MAINTAINABILITY",
        "RELIABILITY",
        "CRITICAL",
        "HIGH",
        "MEDIUM",
        "LOW",
        "PENDING",
        "IN_PROGRESS",
        "COMPLETED",
        "FAILED",
        "BLOCKED",
        "WINDOWS",
        "LINUX",
        "MACOS",
        "UNKNOWN"
      ]
    },
    "src.integration.comprehensive_integration_assessment_core": {
      "classes": [
        "AssessmentArea",
        "Priority",
        "AssessmentStatus",
        "IntegrationAssessment",
        "AssessmentMetrics",
        "AssessmentConfiguration",
        "AssessmentCore"
      ],
      "functions": [
        "__init__",
        "create_assessment",
        "update_assessment",
        "get_assessment_by_area",
        "get_assessment_by_component",
        "calculate_metrics"
      ],
      "constants": [
        "CROSS_PLATFORM",
        "PERFORMANCE",
        "REPOSITORY_AUTOMATION",
        "INTEGRATION_TESTING",
        "CRITICAL",
        "HIGH",
        "MEDIUM",
        "LOW",
        "PENDING",
        "IN_PROGRESS",
        "COMPLETED",
        "FAILED"
      ]
    },
    "src.integration.comprehensive_integration_assessment_utils": {
      "classes": [
        "AssessmentValidator",
        "AssessmentAnalyzer",
        "AssessmentReporter",
        "PlatformDetector"
      ],
      "functions": [
        "create_assessment_configuration",
        "format_assessment_score",
        "validate_assessment",
        "validate_configuration",
        "analyze_performance",
        "_calculate_grade",
        "identify_issues",
        "generate_summary_report",
        "generate_detailed_report",
        "detect_platform",
        "get_platform_info"
      ],
      "constants": []
    },
    "src.integration.comprehensive_integration_assessment_main": {
      "classes": [
        "ComprehensiveIntegrationAssessment",
        "AssessmentManager"
      ],
      "functions": [
        "create_integration_assessment",
        "run_comprehensive_integration_assessment",
        "__init__",
        "initialize_assessment",
        "assess_cross_platform_compatibility",
        "assess_performance",
        "assess_repository_automation",
        "assess_integration_testing",
        "_evaluate_cross_platform",
        "_evaluate_performance",
        "_evaluate_repository_automation",
        "_evaluate_integration_testing",
        "run_comprehensive_assessment",
        "generate_final_report",
        "get_assessment_status",
        "__init__",
        "create_assessment",
        "get_assessment",
        "list_assessments",
        "run_all_assessments"
      ],
      "constants": []
    },
    "src.integration.comprehensive_integration_assessment": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.integration.qa_coordination": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.integration.qa_coordination.core_coordination": {
      "classes": [
        "Agent6Agent8EnhancedQACoordination"
      ],
      "functions": [
        "create_agent6_agent8_enhanced_qa_coordination",
        "__init__",
        "_initialize_phase3_status",
        "_define_agent_expertise",
        "create_qa_enhancement",
        "create_coordination_plan",
        "_initialize_qa_enhancements",
        "_define_coordination_phases",
        "generate_enhanced_qa_report",
        "get_coordination_status"
      ],
      "constants": []
    },
    "src.integration.qa_coordination.models": {
      "classes": [
        "QAEnhancementArea",
        "QAStatus",
        "EnhancementPriority",
        "QAEnhancement",
        "Phase3ConsolidationStatus",
        "ValidationResult",
        "PerformanceMetrics",
        "QualityGate"
      ],
      "functions": [],
      "constants": [
        "VECTOR_DATABASE_INTEGRATION",
        "QUALITY_GATES_ENHANCEMENT",
        "VALIDATION_PROTOCOLS",
        "TESTING_FRAMEWORK",
        "PERFORMANCE_VALIDATION",
        "EXCELLENT",
        "GOOD",
        "ACCEPTABLE",
        "NEEDS_IMPROVEMENT",
        "CRITICAL",
        "CRITICAL",
        "HIGH",
        "MEDIUM",
        "LOW"
      ]
    },
    "src.integration.qa_coordination.performance_validation": {
      "classes": [
        "PerformanceValidationEnhancement"
      ],
      "functions": [
        "create_performance_validation_enhancement",
        "__init__",
        "create_performance_test",
        "create_load_test",
        "run_performance_validation",
        "_test_qa_coordination_performance",
        "_test_vector_database_performance",
        "_test_quality_gates_performance",
        "_test_validation_protocols_performance",
        "measure_system_performance",
        "_measure_cpu_usage",
        "_measure_memory_usage",
        "_measure_disk_usage",
        "_measure_response_times",
        "generate_performance_report"
      ],
      "constants": []
    },
    "src.integration.qa_coordination.validation_protocols": {
      "classes": [
        "AdvancedValidationProtocols"
      ],
      "functions": [
        "create_advanced_validation_protocols",
        "__init__",
        "_load_agent6_expertise",
        "create_validation_protocol",
        "run_v2_compliance_validation",
        "run_enhanced_quality_gates",
        "validate_architecture_compliance",
        "_check_single_source_of_truth",
        "_check_modular_design",
        "_check_dependency_injection",
        "_check_error_handling",
        "generate_validation_report"
      ],
      "constants": []
    },
    "src.integration.qa_coordination.vector_database_integration": {
      "classes": [
        "VectorDatabaseQAIntegration"
      ],
      "functions": [
        "integrate_vector_database_with_qa",
        "__init__",
        "integrate_vector_search_with_qa",
        "_test_vector_search_capabilities",
        "enhance_qa_with_vector_search",
        "_analyze_qa_search_results",
        "create_qa_search_index",
        "get_integration_status"
      ],
      "constants": []
    },
    "src.v3": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.v3.v3_004_distributed_tracing": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.v3.cloud_infrastructure_data": {
      "classes": [
        "CloudInfrastructureData"
      ],
      "functions": [
        "__init__",
        "create_rds_config",
        "create_redis_config"
      ],
      "constants": []
    },
    "src.v3.cloud_infrastructure_models": {
      "classes": [
        "InfrastructureComponent",
        "InfrastructureConfig"
      ],
      "functions": [
        "__post_init__"
      ],
      "constants": [
        "VPC",
        "EKS",
        "RDS",
        "REDIS",
        "SECURITY",
        "KUBERNETES",
        "MONITORING",
        "LOGGING"
      ]
    },
    "src.v3.cloud_infrastructure_networking": {
      "classes": [
        "CloudInfrastructureNetworking"
      ],
      "functions": [
        "__init__",
        "create_vpc_config",
        "create_eks_config"
      ],
      "constants": []
    },
    "src.v3.cloud_infrastructure_security": {
      "classes": [
        "CloudInfrastructureSecurity"
      ],
      "functions": [
        "__init__",
        "create_security_config"
      ],
      "constants": []
    },
    "src.v3.ml_pipeline_core": {
      "classes": [
        "MLPipelineCore"
      ],
      "functions": [
        "__init__",
        "setup_ml_infrastructure",
        "create_training_datasets",
        "implement_model_architectures",
        "setup_training_pipeline",
        "get_status"
      ],
      "constants": []
    },
    "src.v3.ml_pipeline_operations": {
      "classes": [
        "MLPipelineOperations"
      ],
      "functions": [
        "__init__",
        "implement_model_versioning",
        "create_evaluation_system",
        "setup_deployment_pipeline",
        "implement_monitoring_system",
        "create_automated_retraining",
        "validate_ml_system"
      ],
      "constants": []
    },
    "src.v3.tracing_infrastructure": {
      "classes": [
        "TracingInfrastructure"
      ],
      "functions": [
        "__init__",
        "setup_tracing_infrastructure",
        "configure_jaeger_backend",
        "integrate_agent_tracing",
        "implement_fsm_tracing",
        "get_status"
      ],
      "constants": []
    },
    "src.v3.tracing_observability": {
      "classes": [
        "TracingObservability"
      ],
      "functions": [
        "__init__",
        "setup_messaging_observability",
        "create_performance_monitoring",
        "implement_error_correlation",
        "validate_tracing_system",
        "deploy_tracing_components",
        "test_end_to_end_tracing"
      ],
      "constants": []
    },
    "src.v3.v3_009_command_understanding": {
      "classes": [
        "CommandType",
        "CommandPriority",
        "CommandContext",
        "ParsedCommand",
        "CommandParser",
        "CommandExecutor",
        "CommandUnderstandingSystem"
      ],
      "functions": [
        "process_command",
        "get_command_system_status",
        "__post_init__",
        "__init__",
        "_initialize_command_patterns",
        "_initialize_parameter_extractors",
        "_initialize_priority_indicators",
        "parse_command",
        "_clean_text",
        "_extract_parameters",
        "_classify_command_type",
        "_calculate_pattern_confidence",
        "_extract_action",
        "_determine_priority",
        "__init__",
        "_initialize_execution_handlers",
        "execute_command",
        "_handle_assign_task",
        "_handle_get_status",
        "_handle_coordinate",
        "_handle_emergency",
        "_handle_provide_information",
        "_handle_execute_action",
        "_handle_unknown_command",
        "__init__",
        "process_command",
        "get_system_status"
      ],
      "constants": [
        "TASK_ASSIGNMENT",
        "STATUS_REQUEST",
        "COORDINATION",
        "EMERGENCY",
        "INFORMATION",
        "ACTION_REQUEST",
        "CRITICAL",
        "HIGH",
        "MEDIUM",
        "LOW"
      ]
    },
    "src.v3.v3_009_intent_recognition": {
      "classes": [
        "IntentCategory",
        "IntentConfidence",
        "IntentResult",
        "IntentClassifier",
        "IntentRecognitionSystem"
      ],
      "functions": [
        "recognize_intent",
        "get_intent_statistics",
        "get_intent_system_status",
        "__init__",
        "_initialize_intent_patterns",
        "_initialize_keyword_weights",
        "_initialize_context_indicators",
        "_initialize_entity_patterns",
        "recognize_intent",
        "_clean_text",
        "_extract_keywords",
        "_extract_entities",
        "_extract_context_clues",
        "_classify_intent",
        "_calculate_intent_confidence",
        "_determine_confidence_level",
        "__init__",
        "process_intent",
        "get_intent_statistics",
        "get_system_status"
      ],
      "constants": [
        "TASK_MANAGEMENT",
        "SYSTEM_OPERATIONS",
        "COMMUNICATION",
        "EMERGENCY",
        "INFORMATION",
        "COORDINATION",
        "HIGH",
        "MEDIUM",
        "LOW",
        "VERY_LOW"
      ]
    },
    "src.v3.v3_009_nlp_pipeline": {
      "classes": [
        "IntentType",
        "ResponseType",
        "Intent",
        "Response",
        "NLPPipeline",
        "CommandProcessor",
        "NLPSystem"
      ],
      "functions": [
        "process_nlp_input",
        "get_nlp_system_status",
        "__init__",
        "_initialize_intent_patterns",
        "_initialize_entity_patterns",
        "_initialize_response_templates",
        "process_text",
        "_clean_text",
        "_extract_entities",
        "_classify_intent",
        "_calculate_pattern_confidence",
        "generate_response",
        "_customize_response",
        "_determine_response_type",
        "__init__",
        "_initialize_command_handlers",
        "process_command",
        "_execute_command",
        "_check_status",
        "_provide_help",
        "_investigate_error",
        "_analyze_question",
        "_notify_agent",
        "_process_task",
        "_escalate_priority",
        "__init__",
        "process_input",
        "get_system_status"
      ],
      "constants": [
        "GREETING",
        "QUESTION",
        "COMMAND",
        "STATUS_REQUEST",
        "HELP_REQUEST",
        "ERROR_REPORT",
        "UNKNOWN",
        "TEXT",
        "ACTION",
        "STATUS",
        "HELP",
        "ERROR"
      ]
    },
    "src.v3.v3_011_api_gateway_advanced": {
      "classes": [
        "LoadBalancingStrategy",
        "BackendServer",
        "RequestMetrics",
        "LoadBalancer",
        "MetricsCollector",
        "APIMonitor"
      ],
      "functions": [
        "main",
        "__init__",
        "add_server",
        "get_next_server",
        "health_check_all",
        "__init__",
        "record_request",
        "get_endpoint_stats",
        "get_overall_stats",
        "__init__",
        "record_request",
        "_check_alerts",
        "_create_alert",
        "get_alerts",
        "get_health_dashboard"
      ],
      "constants": [
        "ROUND_ROBIN",
        "LEAST_CONNECTIONS",
        "WEIGHTED"
      ]
    },
    "src.v3.v3_011_api_gateway_core": {
      "classes": [
        "AuthMethod",
        "RateLimitType",
        "EndpointConfig",
        "RequestContext",
        "Response",
        "RateLimiter",
        "Authenticator",
        "APIGateway"
      ],
      "functions": [
        "main",
        "__init__",
        "is_allowed",
        "__init__",
        "authenticate",
        "_validate_jwt",
        "__init__",
        "register_endpoint",
        "handle_request",
        "_generate_request_id",
        "_create_error_response",
        "get_health_status",
        "generate_api_documentation",
        "sample_handler"
      ],
      "constants": [
        "JWT",
        "API_KEY",
        "BASIC",
        "NONE",
        "PER_MINUTE",
        "PER_HOUR",
        "PER_DAY"
      ]
    },
    "src.v3.v3_012_mobile_app_framework": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.v3.v3_012_ui_components": {
      "classes": [
        "ComponentState",
        "ComponentType",
        "UIComponent",
        "ComponentFactory",
        "ComponentRenderer",
        "ComponentValidator"
      ],
      "functions": [
        "main",
        "create_button",
        "create_input",
        "create_text",
        "create_card",
        "create_list",
        "__init__",
        "render_component",
        "render_screen",
        "get_component",
        "update_component_state",
        "validate_component",
        "validate_screen"
      ],
      "constants": [
        "LOADING",
        "SUCCESS",
        "ERROR",
        "EMPTY",
        "DISABLED",
        "BUTTON",
        "INPUT",
        "TEXT",
        "IMAGE",
        "LIST",
        "CARD",
        "MODAL",
        "NAVIGATION"
      ]
    },
    "src.v3.v3_012_ui_screens": {
      "classes": [
        "ScreenType",
        "Screen",
        "ScreenFactory",
        "ScreenManager",
        "NavigationController"
      ],
      "functions": [
        "main",
        "__init__",
        "create_login_screen",
        "create_dashboard_screen",
        "create_settings_screen",
        "create_profile_screen",
        "__init__",
        "register_screen",
        "navigate_to",
        "go_back",
        "get_current_screen",
        "render_current_screen",
        "get_screen_list",
        "__init__",
        "initialize_app_screens",
        "execute_navigation_flow",
        "get_navigation_status"
      ],
      "constants": [
        "LOGIN",
        "DASHBOARD",
        "SETTINGS",
        "PROFILE",
        "DETAILS",
        "LIST"
      ]
    },
    "src.v3.web_dashboard_api": {
      "classes": [
        "WebDashboardAPI"
      ],
      "functions": [
        "__init__",
        "get_agents",
        "get_v3_contracts",
        "get_system_health",
        "get_configuration",
        "create_websocket_integration"
      ],
      "constants": []
    },
    "src.v3.web_dashboard_components": {
      "classes": [
        "WebDashboardComponents"
      ],
      "functions": [
        "__init__",
        "create_agent_status_component",
        "create_v3_pipeline_component",
        "create_system_health_component",
        "create_real_time_component",
        "create_configuration_component"
      ],
      "constants": []
    },
    "src.v3.web_dashboard_models": {
      "classes": [
        "DashboardComponent",
        "DashboardConfig"
      ],
      "functions": [
        "__post_init__"
      ],
      "constants": [
        "AGENT_STATUS",
        "V3_PIPELINE",
        "SYSTEM_HEALTH",
        "REAL_TIME",
        "CONFIGURATION",
        "MONITORING",
        "ALERTS"
      ]
    },
    "src.v3.v3_009_response_generation_core": {
      "classes": [
        "ResponseTone",
        "ResponseFormat",
        "ResponseTemplate",
        "ResponseContext",
        "ResponseRequest",
        "GeneratedResponse",
        "ResponseGeneratorCore"
      ],
      "functions": [
        "__post_init__",
        "__post_init__",
        "__post_init__",
        "__init__",
        "_initialize_default_templates",
        "generate_response",
        "_get_template",
        "_process_template",
        "add_template",
        "get_template",
        "list_templates"
      ],
      "constants": [
        "PROFESSIONAL",
        "FRIENDLY",
        "URGENT",
        "TECHNICAL",
        "CASUAL",
        "TEXT",
        "STRUCTURED",
        "BULLET_POINTS",
        "TABLE",
        "JSON"
      ]
    },
    "src.v3.v3_009_response_generation": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.v3.v3_009_response_generation_main": {
      "classes": [
        "AdvancedResponseGenerator",
        "ResponseGenerationService"
      ],
      "functions": [
        "create_response_generation_service",
        "generate_agent_response",
        "__init__",
        "generate_response",
        "generate_task_assignment_response",
        "generate_status_update_response",
        "generate_coordination_response",
        "add_custom_template",
        "get_response_statistics",
        "_generate_cache_key",
        "_create_cached_response",
        "_calculate_cache_hit_rate",
        "__init__",
        "process_message_request",
        "_get_template_for_message_type"
      ],
      "constants": []
    },
    "src.v3.v3_009_response_generation_utils": {
      "classes": [
        "ResponseFormatter",
        "ResponseValidator",
        "ResponseAnalyzer",
        "ResponseCache"
      ],
      "functions": [
        "create_response_request",
        "format_response_content",
        "format_as_text",
        "format_as_structured",
        "format_as_bullet_points",
        "format_as_table",
        "format_as_json",
        "validate_template",
        "validate_request",
        "analyze_complexity",
        "extract_keywords",
        "__init__",
        "get",
        "set",
        "_evict_oldest",
        "clear"
      ],
      "constants": []
    },
    "src.v3.v3_012_mobile_app_framework_core": {
      "classes": [
        "Platform",
        "ComponentType",
        "MobileComponent",
        "MobileAppFrameworkCore"
      ],
      "functions": [
        "__init__",
        "_initialize_platform_configs",
        "create_component",
        "_generate_component_methods",
        "get_platform_config",
        "list_components",
        "export_project_structure"
      ],
      "constants": [
        "ANDROID",
        "IOS",
        "WEB",
        "CROSS_PLATFORM",
        "SCREEN",
        "WIDGET",
        "SERVICE",
        "UTILITY",
        "STORAGE"
      ]
    },
    "src.v3.v3_012_mobile_app_framework_main": {
      "classes": [
        "MobileAppFramework",
        "MobileAppBuilder"
      ],
      "functions": [
        "create_mobile_component",
        "generate_component_code",
        "create_dream_os_app",
        "__init__",
        "create_component",
        "generate_component_code",
        "get_platform_config",
        "list_components",
        "export_project_structure",
        "__init__",
        "_initialize_build_configs",
        "create_dream_os_app",
        "generate_build_config"
      ],
      "constants": []
    },
    "src.v3.v3_012_mobile_app_framework_templates": {
      "classes": [
        "ComponentTemplateManager"
      ],
      "functions": [
        "__init__",
        "_initialize_component_templates",
        "generate_component_code",
        "_generate_props_interface",
        "_generate_props_destructure",
        "_generate_component_content",
        "_generate_service_methods",
        "_generate_utility_methods",
        "_generate_storage_methods"
      ],
      "constants": []
    },
    "src.aletheia": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.aletheia.aletheia_prompt_manager": {
      "classes": [
        "PromptType",
        "OptimizationLevel",
        "PromptConfig",
        "AletheiaPromptManager"
      ],
      "functions": [
        "__init__",
        "generate_prompt",
        "get_cache_hit_rate",
        "clear_cache",
        "_create_cache_key",
        "_build_prompt",
        "_optimize_prompt",
        "_cache_prompt",
        "_get_from_cache",
        "_evict_oldest_cache_entry"
      ],
      "constants": [
        "SYSTEM",
        "USER",
        "ASSISTANT",
        "BASIC",
        "STANDARD",
        "ADVANCED"
      ]
    },
    "src.memory": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.memory.persistent_memory": {
      "classes": [
        "MemoryStatus",
        "StorageType",
        "MemoryConfig",
        "PersistentMemory"
      ],
      "functions": [
        "__init__",
        "store_memory",
        "retrieve_memory",
        "delete_memory",
        "get_memory_info",
        "_validate_key",
        "_data_operations",
        "_cache_operations",
        "_disk_operations",
        "_get_file_path"
      ],
      "constants": [
        "ACTIVE",
        "INACTIVE",
        "ERROR",
        "JSON",
        "BINARY",
        "COMPRESSED"
      ]
    },
    "src.tools": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.tools.swarm_workflow_orchestrator_core": {
      "classes": [
        "SwarmWorkflowOrchestratorCore"
      ],
      "functions": [
        "__init__",
        "create_workflow",
        "execute_workflow",
        "_execute_phase",
        "_execute_task",
        "_extract_agents_from_phases",
        "_calculate_duration",
        "list_workflows",
        "get_workflow_status"
      ],
      "constants": []
    },
    "src.tools.swarm_workflow_orchestrator_utils": {
      "classes": [
        "SwarmWorkflowUtils"
      ],
      "functions": [
        "__init__",
        "send_agent_message",
        "create_task_file",
        "create_devlog",
        "wait_for_agent_completion"
      ],
      "constants": []
    },
    "src.tools.swarm_workflow_orchestrator": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.tools.swarm_workflow_orchestrator_main": {
      "classes": [
        "SwarmWorkflowOrchestrator"
      ],
      "functions": [
        "create_v2_trading_robot_workflow",
        "main",
        "__init__",
        "create_workflow",
        "execute_workflow",
        "list_workflows",
        "get_workflow_status",
        "_send_agent_message",
        "_create_task_file",
        "_create_devlog",
        "_wait_for_agent_completion"
      ],
      "constants": []
    },
    "src.observability": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.observability.memory.policies": {
      "classes": [
        "MemoryBudget",
        "MemorySnapshot",
        "MemoryPolicyLoader",
        "TracemallocIntegration",
        "MemoryPolicyEnforcer",
        "MemoryPolicyManager"
      ],
      "functions": [
        "warning_mb",
        "critical_mb",
        "__init__",
        "load",
        "_get_default_config",
        "get_budget",
        "__init__",
        "start",
        "stop",
        "take_snapshot",
        "__init__",
        "check_budget",
        "enforce_limits",
        "__init__",
        "initialize",
        "get_snapshot",
        "check_service",
        "shutdown"
      ],
      "constants": []
    },
    "src.observability.memory.detectors": {
      "classes": [
        "LeakDetectionResult",
        "MemoryTrend",
        "MemoryLeakDetector",
        "ObjectLeakDetector",
        "AutoCleanupManager",
        "ComprehensiveLeakDetector"
      ],
      "functions": [
        "__init__",
        "add_snapshot",
        "detect_leak",
        "_calculate_severity",
        "analyze_trend",
        "__init__",
        "take_object_snapshot",
        "detect_object_leaks",
        "__init__",
        "should_trigger_cleanup",
        "execute_cleanup",
        "__init__",
        "add_snapshot",
        "run_full_detection"
      ],
      "constants": []
    },
    "src.observability.memory.cli": {
      "classes": [
        "MemoryMonitorCLI"
      ],
      "functions": [
        "main",
        "__init__",
        "report_command",
        "watch_command",
        "cleanup_command",
        "status_command",
        "_write_report",
        "_print_report"
      ],
      "constants": []
    },
    "src.observability.memory.ledger": {
      "classes": [
        "LedgerEntry",
        "MemoryLedger",
        "LedgerAnalyzer",
        "PersistentLedgerManager"
      ],
      "functions": [
        "to_dict",
        "__init__",
        "_ensure_storage_directory",
        "add_entry",
        "record",
        "save",
        "load",
        "get_entries_for_service",
        "get_recent_entries",
        "cleanup_old_entries",
        "__init__",
        "get_service_summary",
        "detect_memory_growth",
        "get_global_summary",
        "__init__",
        "record_snapshot",
        "save_ledger",
        "get_service_analysis"
      ],
      "constants": []
    },
    "src.observability.memory": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.observability.memory.watchdog": {
      "classes": [
        "EnforcementMode",
        "WatchdogAlert",
        "MemoryWatchdog",
        "IntegratedWatchdog",
        "WatchdogManager"
      ],
      "functions": [
        "__init__",
        "start",
        "stop",
        "_monitor_loop",
        "_check_all_services",
        "_handle_warning",
        "_handle_critical",
        "_execute_enforcement",
        "_quarantine_service",
        "_kill_service",
        "get_recent_alerts",
        "clear_alerts",
        "__init__",
        "start_monitoring",
        "stop_monitoring",
        "run_full_check",
        "get_status",
        "__init__",
        "create_watchdog",
        "start_all",
        "stop_all",
        "get_watchdog",
        "get_all_status"
      ],
      "constants": [
        "OBSERVE",
        "QUARANTINE",
        "KILL"
      ]
    },
    "src.observability.memory.report": {
      "classes": [
        "MemoryReport",
        "ReportGenerator",
        "ReportFormatter",
        "PerformanceReporter"
      ],
      "functions": [
        "__init__",
        "generate_summary_report",
        "_generate_recommendations",
        "save_report",
        "format_text",
        "format_markdown",
        "format_html",
        "__init__",
        "generate_service_report",
        "_assess_health"
      ],
      "constants": []
    },
    "src.observability.memory.integrations.messaging_checks": {
      "classes": [
        "FileResourceGuard",
        "MessageSizeValidator",
        "MessagingInstrumentation",
        "CoordinationRequestPurger",
        "MessagingMemoryIntegration"
      ],
      "functions": [
        "__init__",
        "__enter__",
        "__exit__",
        "__init__",
        "validate",
        "__init__",
        "instrument_operation",
        "__init__",
        "purge_old_requests",
        "__init__"
      ],
      "constants": []
    },
    "src.observability.memory.integrations": {
      "classes": [],
      "functions": [],
      "constants": []
    },
    "src.observability.memory.integrations.messaging_service_patches": {
      "classes": [
        "MessagingServiceMemoryPatch"
      ],
      "functions": [
        "patch_messaging_service",
        "create_enhanced_messaging_service",
        "__init__",
        "validate_message_before_send",
        "instrument_send_operation",
        "purge_coordination_requests",
        "get_patch_status"
      ],
      "constants": []
    }
  },
  "class_map": {
    "DiscordCommander": "discord_commander",
    "ProjectContextLoader": "enhanced_agent_onboarding",
    "OnboardingContextBuilder": "enhanced_agent_onboarding",
    "EnhancedOnboardingService": "src.services.enhanced_onboarding",
    "V3ValidationTestingFramework": "V3_VALIDATION_TESTING_FRAMEWORK",
    "Agent5InboxChecker": "check_agent5_inbox",
    "DiscordBotConfig": "discord_bot_config",
    "GitHubAgentClient": "tools.github_agent_client",
    "DiscordCommanderBot": "src.services.discord_commander.bot_main",
    "RealAgentCoordinator": "real_agent_coordination",
    "V3DirectivesDeploymentSystem": "V3_DIRECTIVES_DEPLOYMENT_SYSTEM",
    "V3SecurityCleanup": "V3_SECURITY_CLEANUP_FIXED",
    "ResponseWaitResult": "response_detector",
    "ResponseDetector": "response_detector",
    "QualityLevel": "src.services.vector_database.quality_assurance_framework",
    "QualityMetrics": "src.services.discord_commander.web_models",
    "QualityGateChecker": "quality_gates_core",
    "CaptainDocumentationCore": "captain_docs_core",
    "CaptainCycleBasedCore": "captain_cycle_core",
    "CompleteOnboardingCore": "complete_onboarding_core",
    "DiscordCommanderCore": "discord_commander_core",
    "DiscordCommanderSetupCore": "discord_commander_setup_core",
    "ComprehensiveDevlogCore": "comprehensive_devlog_core",
    "StaleDatabaseCleanupCore": "cleanup_stale_database_core",
    "DiscordCommanderConfig": "discord_commander_config",
    "Agent5InboxCheckerCore": "agent5_inbox_checker_core",
    "CaptainKnowledgeCore": "captain_knowledge_demo_core",
    "V2ComplianceChecker": "v2_compliance_checker_core",
    "CombinedExportCore": "combined_export_core",
    "StaticDocumentationDeleter": "static_documentation_deleter_core",
    "DatabaseQueryDemonstrator": "database_query_demonstrator_core",
    "MissionStatusDemonstrator": "mission_status_demonstrator_core",
    "CycleBasedOperationsDemonstrator": "cycle_based_operations_demonstrator_core",
    "OnboardingKnowledgeDemo": "onboarding_knowledge_demo_core",
    "DevlogInventory": "devlog_inventory_core",
    "Colors": "devlog_analytics_system_core",
    "DevlogAnalyticsSystem": "devlog_analytics_system_core",
    "DiscordCommanderLauncher": "discord_commander_launcher_core",
    "SwarmOrchestrator": "swarm_orchestrator_core",
    "AgentModeSwitcher": "agent_mode_switcher_core",
    "DiscordBotConfigCore": "discord_bot_config_core",
    "GitHubConfig": "tools.github_agent_client",
    "GitHubRepository": "tools.github_agent_controller",
    "GitHubAgentClientCore": "github_agent_client_core",
    "RealAgentCoordinatorCore": "real_agent_coordination_core",
    "CaptainCycleCore": "update_captain_cycle_core",
    "QualityCoordinationProtocol": "quality_coordination_response",
    "AgentStatus": "src.domain.entities.agent",
    "SystemHealth": "src.services.discord_commander.web_controller_models",
    "AgentHealthMonitor": "watchdog",
    "SystemHealthChecker": "watchdog",
    "WatchdogService": "watchdog",
    "ReportConfig": "report",
    "ReportGenerator": "src.observability.memory.report",
    "ReportService": "report",
    "MigrationExecutor": "agent_workspaces.Agent-3.migration_executor",
    "ScalabilityStrategies": "agent_workspaces.Agent-3.scalability_strategies",
    "MigrationCore": "agent_workspaces.Agent-3.migration_core",
    "MigrationScripts": "agent_workspaces.Agent-3.migration_scripts",
    "QueryOptimizationSystem": "agent_workspaces.database_specialist.query_optimization_system",
    "ScalingType": "agent_workspaces.Agent-3.scalability_core",
    "PartitionStrategy": "agent_workspaces.Agent-3.scalability_core",
    "ScalabilityMetrics": "agent_workspaces.Agent-3.scalability_core",
    "ScalabilityCore": "agent_workspaces.Agent-3.scalability_core",
    "ScalabilityValidation": "agent_workspaces.Agent-3.scalability_validation",
    "V2ComplianceImprovementPlan": "agent_workspaces.Agent-3.v2_compliance_improvement_plan",
    "CachingStrategySystem": "agent_workspaces.Agent-3.caching.core.caching_system",
    "CacheStrategy": "agent_workspaces.Agent-3.caching.models.cache_models",
    "CacheEntry": "agent_workspaces.Agent-3.caching.models.cache_models",
    "CacheMonitor": "agent_workspaces.Agent-3.caching.monitoring.cache_monitor",
    "CacheStrategyManager": "agent_workspaces.Agent-3.caching.strategies.cache_strategies",
    "CacheTools": "agent_workspaces.Agent-3.caching.tools.cache_tools",
    "QueryOptimizationCore": "agent_workspaces.Agent-3.query_optimization_core",
    "AgentTaskManager": "tools.agent_task_manager",
    "MajorUpdatePoster": "tools.post_major_update",
    "CaptainAutonomousInterface": "tools.captain_autonomous_interface",
    "CaptainDirectiveManager": "tools.captain_directive_manager",
    "DirectiveType": "tools.captain_directive_manager",
    "DirectiveStatus": "tools.captain_directive_manager",
    "InitiativeStatus": "tools.captain_directive_manager",
    "Directive": "tools.captain_directive_manager",
    "Initiative": "tools.captain_directive_manager",
    "SimpleWorkflowAutomation": "tools.simple_workflow_automation",
    "PerformanceDetectiveCLI": "tools.performance_detective_cli",
    "SecurityInspectorCLI": "tools.security_inspector_cli",
    "DocumentationArchitectCLI": "tools.documentation_architect_cli",
    "IntegrationExplorerCLI": "tools.integration_explorer_cli",
    "FinancialAnalystCLI": "tools.financial_analyst_cli",
    "TradingStrategistCLI": "tools.trading_strategist_cli",
    "RiskManagerCLI": "tools.risk_manager_cli",
    "MarketResearcherCLI": "tools.market_researcher_cli",
    "PortfolioOptimizerCLI": "tools.portfolio_optimizer_cli",
    "ComplianceAuditorCLI": "tools.compliance_auditor_cli",
    "AgentWorkflowAutomation": "tools.agent_workflow_automation",
    "WorkflowStep": "tools.workflow.core",
    "AgentWorkflowManager": "tools.agent_workflow_manager",
    "APIGatewayCLI": "tools.api_gateway_cli",
    "CaptainAutonomousCore": "tools.captain_autonomous_core",
    "CaptainAutonomousManager": "tools.captain_autonomous_manager",
    "BottleneckType": "tools.captain_autonomous_models",
    "FlawSeverity": "tools.captain_autonomous_models",
    "StoppingCondition": "tools.captain_autonomous_models",
    "Bottleneck": "tools.captain_autonomous_models",
    "Flaw": "tools.captain_autonomous_models",
    "CaptainAutonomousStorage": "tools.captain_autonomous_storage",
    "CaptainAutonomousUtility": "tools.captain_autonomous_utility",
    "CodeArchaeologistCLI": "tools.code_archaeologist_cli",
    "ContentHashSystem": "tools.content_hash_system",
    "CoordinateMapper": "tools.coordinate_mapper",
    "DatabaseCleanupTool": "tools.database_cleanup",
    "DevlogConsolidator": "tools.devlog_consolidator",
    "DevlogStorytellerCLI": "tools.devlog_storyteller_cli",
    "DirectiveService": "tools.directive_services",
    "InitiativeService": "tools.directive_services",
    "CodeDuplicationAnalyzer": "tools.duplication_audit",
    "IntegrationHealthChecker": "tools.duplication_audit",
    "FeatureRegistry": "tools.feature_registry_check",
    "GitHubAgentCLI": "tools.github_agent_cli",
    "GitHubIssue": "tools.github_agent_controller",
    "GitHubPullRequest": "tools.github_agent_controller",
    "GitHubAgentController": "tools.github_agent_controller",
    "KnowledgeBaseSearch": "tools.knowledge_base_search",
    "OverengineeringType": "tools.overengineering_detector",
    "OverengineeringSeverity": "tools.overengineering_detector",
    "OverengineeringIssue": "tools.overengineering_detector",
    "OverengineeringDetector": "tools.overengineering_detector",
    "ComplianceStatus": "tools.protocol_reference_enforcer",
    "ProtocolReference": "tools.protocol_reference_enforcer",
    "ComplianceReport": "tools.protocol_compliance_checker_core",
    "ProtocolReferenceEnforcer": "tools.protocol_reference_enforcer",
    "SimpleProjectScanner": "tools.simple_project_scanner",
    "SimpleVectorCleanup": "tools.simple_vector_cleanup",
    "TeamCollaborationTool": "tools.team_collaboration_tool",
    "TeamDashboard": "tools.team_dashboard",
    "UnifiedDatabaseSearch": "tools.unified_database_search",
    "V2RefactoringAssistant": "tools.v2_refactoring_assistant",
    "WebhookProvisionerCLI": "tools.webhook_provisioner_cli",
    "TrainingStatus": "tools.ml_training_infrastructure_tool_core",
    "ResourceType": "tools.ml_training_infrastructure_tool_core",
    "FrameworkType": "tools.ml_training_infrastructure_tool_core",
    "TrainingResource": "tools.ml_training_infrastructure_tool_core",
    "TrainingEnvironment": "tools.ml_training_infrastructure_tool_core",
    "TrainingJob": "src.ml.training_pipeline",
    "TrainingJobStatus": "tools.ml_training_infrastructure_tool_core",
    "TrainingInfrastructureConfig": "tools.ml_training_infrastructure_tool_core",
    "TrainingInfrastructureCore": "tools.ml_training_infrastructure_tool_core",
    "MLTrainingInfrastructureTool": "tools.ml_training_infrastructure_tool_main",
    "TrainingSimulator": "tools.ml_training_infrastructure_tool_utils",
    "ResourceManager": "src.services.discord_commander.optimization_utils",
    "JobQueueManager": "tools.ml_training_infrastructure_tool_utils",
    "FileManager": "tools.ml_training_infrastructure_tool_utils",
    "ComplianceLevel": "tools.protocol_compliance_checker_core",
    "ProtocolCategory": "tools.protocol_compliance_checker_core",
    "ComplianceIssue": "tools.protocol_compliance_checker_core",
    "ProtocolComplianceChecker": "tools.protocol_compliance_checker_main",
    "MetricType": "src.ml.ml_monitoring_models",
    "AlertLevel": "src.services.vector_database.vector_database_monitoring",
    "QualityGateResult": "tools.operational_dashboard_tool_core",
    "AgentPerformance": "tools.operational_dashboard_tool_core",
    "ProjectProgress": "tools.operational_dashboard_tool_core",
    "OperationalAlert": "tools.operational_dashboard_tool_core",
    "OperationalDashboard": "tools.operational_dashboard_tool_main",
    "MemoryIssue": "tools.memory_leak_detector",
    "MemoryLeakDetector": "src.observability.memory.detectors",
    "MemoryVisitor": "tools.memory_leak_detector",
    "MemoryFix": "tools.memory_optimizer",
    "MemoryOptimizer": "tools.memory_optimizer",
    "MemorySnapshot": "src.observability.memory.policies",
    "MemoryMonitor": "tools.memory_monitor",
    "MemoryStats": "tools.memory_manager",
    "MemoryManager": "tools.memory_manager",
    "CriticalMemoryFixer": "tools.critical_memory_fixer",
    "JSONReportFormatter": "tools.generate_memory_leak_report",
    "TextReportFormatter": "tools.generate_memory_leak_report",
    "HTMLReportFormatter": "tools.generate_memory_leak_report",
    "MemoryLeakReportGenerator": "tools.generate_memory_leak_report",
    "ImportMapper": "tools.import_mapper",
    "LanguageAnalyzer": "tools.projectscanner.analyzers",
    "ModularReportGenerator": "tools.projectscanner.core",
    "BotWorker": "tools.projectscanner.workers",
    "MultibotManager": "tools.projectscanner.workers",
    "FileProcessor": "tools.projectscanner.workers",
    "ProjectScanner": "tools.projectscanner.core",
    "EnhancedProjectScannerV2": "tools.projectscanner.enhanced_analyzer_v2",
    "FileDiscoveryHandler": "tools.projectscanner.enhanced_scanner.file_discovery",
    "EnhancedCoreAnalyzer": "tools.projectscanner.enhanced_scanner.core_analyzer",
    "EnhancedCachingSystem": "tools.projectscanner.enhanced_scanner.caching_system",
    "EnhancedReportGenerator": "tools.projectscanner.enhanced_scanner.report_generator",
    "EnhancedLanguageAnalyzer": "tools.projectscanner.enhanced_scanner.language_analyzer",
    "PythonAnalyzer": "tools.projectscanner.enhanced_scanner.python_analyzer",
    "AgentCategorizationHandler": "tools.projectscanner.enhanced_scanner.agent_categorization",
    "FileAnalysisHandler": "tools.projectscanner.enhanced_scanner.file_analysis",
    "ReportGenerationHandler": "tools.projectscanner.enhanced_scanner.report_generation",
    "EnhancedProjectScannerCore": "tools.projectscanner.enhanced_scanner.core",
    "EnhancedAnalyzerCore": "tools.projectscanner.enhanced_analyzer.core",
    "AnalysisCore": "tools.analysis.core",
    "RefactorPlanner": "tools.analysis.refactor",
    "ViolationDetector": "tools.analysis.violations",
    "FileStats": "tools.coverage.gap_analyzer",
    "CoverageGapAnalyzer": "tools.coverage.gap_analyzer",
    "MutationGate": "tools.coverage.mutation_gate",
    "CoveragePipeline": "tools.coverage.run_coverage_analysis",
    "ModuleFixer": "tools.workflow.automation",
    "TestRunner": "tools.workflow.automation",
    "ProjectManager": "tools.workflow.automation",
    "WorkflowAutomation": "tools.workflow.automation",
    "WorkflowDefinition": "tools.workflow.core",
    "WorkflowValidator": "tools.workflow.core",
    "WorkflowScheduler": "tools.workflow.core",
    "WorkflowStatusTracker": "tools.workflow.core",
    "WorkflowManager": "tools.workflow.manager",
    "PerformanceMetrics": "src.integration.qa_coordination.models",
    "PerformanceMonitor": "src.core.tracing.performance_monitor",
    "WorkflowCache": "tools.workflow.optimization",
    "ParallelExecutor": "tools.workflow.optimization",
    "WorkflowOptimizer": "tools.workflow.optimization",
    "SimpleWorkflowStep": "tools.workflow.simple_manager",
    "SimpleWorkflow": "tools.workflow.simple_manager",
    "SimpleWorkflowManager": "tools.workflow.simple_manager",
    "MarketAnalyzer": "tools.trading_cli.market_analyzer",
    "MasterCLI": "tools.trading_cli.master_cli",
    "NewsSentimentAnalyzer": "tools.trading_cli.news_analyzer",
    "AgentCoordinator": "tools.trading_cli.agent_coordinator",
    "TechnicalAnalyzer": "tools.trading_cli.technical_analyzer_core",
    "PredictionTracker": "tools.trading_cli.prediction_tracker",
    "RefactoringTemplates": "tools.refactoring_templates.critical_file_refactoring",
    "RefactoringExamples": "tools.refactoring_templates.critical_file_refactoring",
    "RefactoringChecklist": "tools.refactoring_templates.critical_file_refactoring",
    "AnalysisDashboard": "tools.static_analysis.analysis_dashboard",
    "CodeQualityAnalyzer": "tools.static_analysis.code_quality_analyzer",
    "DemoAnalysis": "tools.static_analysis.demo_analysis",
    "DependencyScanner": "tools.static_analysis.dependency_scanner",
    "SecurityScanner": "tools.static_analysis.security_scanner",
    "BrowserAdapter": "browser_service.adapters.chrome_adapter",
    "ChromeBrowserAdapter": "browser_service.adapters.chrome_adapter",
    "BrowserConfig": "browser_service.config.browser_config",
    "TheaConfig": "browser_service.config.browser_config",
    "SessionInfo": "browser_service.config.browser_config",
    "RateLimitStatus": "browser_service.config.browser_config",
    "UnifiedBrowserService": "browser_service.core.unified_browser_service",
    "SessionManager": "browser_service.managers.session_manager",
    "BrowserOperations": "browser_service.operations.browser_operations",
    "DeploymentValidator": "infrastructure.validate_deployment",
    "TracingValidator": "infrastructure.validate_tracing",
    "ContinuousOptimizationMonitor": "scripts.continuous_optimization_monitor",
    "ModularDeployment": "scripts.deploy_modular_components",
    "DeploymentDashboard": "scripts.deployment_dashboard",
    "LightweightDashboard": "scripts.lightweight_deployment_dashboard",
    "DuplicateFileRemover": "scripts.remove_duplicate_discord_files",
    "SecurityIntegration": "scripts.security_integration",
    "AgentSnapshot": "analytics.agent_metrics",
    "Weights": "analytics.agent_metrics",
    "PredictiveEngine": "analytics.predictive_engine",
    "PredictionResult": "analytics.predictive_models",
    "CapacityForecast": "analytics.predictive_models",
    "AnomalyDetection": "analytics.predictive_models",
    "PredictiveModel": "analytics.predictive_models",
    "ForecastPeriod": "analytics.predictive_models",
    "ResourceUtilization": "analytics.predictive_models",
    "PredictiveEngineCore": "analytics.predictive_core",
    "BrainConfig": "swarm_brain.config",
    "SwarmBrain": "swarm_brain.db",
    "Ingestor": "swarm_brain.ingest",
    "Retriever": "swarm_brain.retriever",
    "EmbeddingsBackend": "swarm_brain.embeddings.base",
    "NumpyBackend": "swarm_brain.embeddings.numpy_backend",
    "MockDataProvider": "tsla_forecast_app.V2_TRADING_ROBOT_DEMO",
    "TradingDashboard": "tsla_forecast_app.modules.ui.trading_dashboard",
    "V2StandaloneDemo": "tsla_forecast_app.V2_STANDALONE_DEMO",
    "V2TradingRobotDemo": "tsla_forecast_app.V2_TRADING_ROBOT_DEMO",
    "TradingRobot": "tsla_forecast_app.trading_robot_core",
    "TradingRobotCLI": "tsla_forecast_app.trading_robot_interface",
    "TradingRobotAPI": "tsla_forecast_app.trading_robot_interface",
    "TradingStrategy": "tsla_forecast_app.trading_strategies",
    "MovingAverageStrategy": "tsla_forecast_app.trading_strategies",
    "RSIMeanReversionStrategy": "tsla_forecast_app.trading_robot_strategies",
    "BollingerBandsStrategy": "tsla_forecast_app.trading_robot_strategies",
    "MomentumStrategy": "tsla_forecast_app.trading_robot_strategies",
    "StrategyManager": "tsla_forecast_app.trading_robot_strategies",
    "TradingSignal": "tsla_forecast_app.trading_models",
    "OrderType": "tsla_forecast_app.trading_models",
    "OrderStatus": "tsla_forecast_app.trading_models",
    "MarketData": "tsla_forecast_app.trading_models",
    "Order": "tsla_forecast_app.trading_models",
    "Position": "tsla_forecast_app.trading_models",
    "TradingMetrics": "tsla_forecast_app.trading_models",
    "RSITradingStrategy": "tsla_forecast_app.trading_strategies",
    "StockDataWorker": "tsla_forecast_app.modules.data_worker",
    "TradingFlagsDisplay": "tsla_forecast_app.modules.flag_display",
    "TeslaStockApp": "tsla_forecast_app.modules.main_app",
    "FlagType": "tsla_forecast_app.modules.trading_flags",
    "FlagStrength": "tsla_forecast_app.modules.trading_flags",
    "AgentFlag": "tsla_forecast_app.modules.trading_flags",
    "TradingFlag": "tsla_forecast_app.modules.trading_flags",
    "MarketAnalysis": "tsla_forecast_app.modules.trading_flags",
    "TradingFlagEngine": "tsla_forecast_app.modules.trading_flags",
    "StockDisplayWidget": "tsla_forecast_app.modules.ui_components.stock_display",
    "ForecastWidget": "tsla_forecast_app.modules.ui_components",
    "LogWidget": "tsla_forecast_app.modules.ui_components",
    "SettingsWidget": "tsla_forecast_app.modules.ui_components",
    "V2TradingInterface": "tsla_forecast_app.modules.v2_trading_interface",
    "RealTimeChart": "tsla_forecast_app.modules.ui_components.chart_display",
    "ChartDisplayWidget": "tsla_forecast_app.modules.ui_components.chart_display",
    "ForecastDisplayWidget": "tsla_forecast_app.modules.ui_components.forecast_display",
    "LogDisplayWidget": "tsla_forecast_app.modules.ui_components.log_display",
    "ProfessionalTheme": "tsla_forecast_app.modules.ui_components.professional_theme",
    "ResponsiveLayout": "tsla_forecast_app.modules.ui.mobile_responsive",
    "ResponsiveWidget": "tsla_forecast_app.modules.ui_components.responsive_layout",
    "SettingsDisplayWidget": "tsla_forecast_app.modules.ui_components.settings_display",
    "ChartWidget": "tsla_forecast_app.modules.ui.chart_widget",
    "MobileResponsiveWidget": "tsla_forecast_app.modules.ui.mobile_responsive",
    "MobileTradingCard": "tsla_forecast_app.modules.ui.mobile_responsive",
    "ResponsiveScrollArea": "tsla_forecast_app.modules.ui.mobile_responsive",
    "BackupManager": "migration_system.backup.backup_manager",
    "MigrationController": "migration_system.core.migration_controller",
    "DataMigrator": "migration_system.data.data_migrator",
    "SchemaManager": "migration_system.schema.schema_manager",
    "DataValidator": "migration_system.validation.data_validator",
    "TheaCookieManager": "src.services.thea.thea_cookie_manager",
    "TheaLoginHandler": "src.services.thea.thea_login_handler_refactored",
    "SeleniumHandler": "thea_communication.automation.selenium_handler",
    "SimpleManualHandler": "thea_communication.automation.simple_manual",
    "TheaCommunicationService": "thea_communication.core.communication_service",
    "ResponseAnalyzer": "src.v3.v3_009_response_generation_utils",
    "ResponseCapturer": "thea_communication.response.response_capturer",
    "ResponseHandler": "thea_communication.response.response_handler",
    "DashboardWebSocketServer": "web_dashboard.websocket",
    "CommandResult": "src.commandresult",
    "CoordinateLoader": "src.services.messaging.core.coordinate_loader",
    "CrossPlatformDatabase": "src.core.cross_platform_database",
    "CrossPlatformFileManager": "src.core.cross_platform_database",
    "CrossPlatformPaths": "src.core.cross_platform_paths",
    "DecisionSeverity": "src.core.design_authority",
    "DesignReview": "src.core.design_authority",
    "DesignAuthority": "src.core.design_authority",
    "SharedKnowledgeBase": "src.core.knowledge_base",
    "PrincipleCategory": "src.core.knowledge_base_core",
    "DesignPrinciple": "src.core.knowledge_base_core",
    "CodePattern": "src.core.knowledge_base_core",
    "AntiPattern": "src.core.knowledge_base_core",
    "KnowledgeBaseCore": "src.core.knowledge_base_core",
    "KnowledgeBaseManager": "src.core.knowledge_base_manager",
    "KnowledgeBaseRetriever": "src.core.knowledge_base_retriever",
    "Component": "src.core.project_registry",
    "DesignPattern": "src.core.project_registry",
    "ProjectRegistry": "src.core.project_registry",
    "ProjectRegistryManager": "src.core.project_registry",
    "SharedErrorHandler": "src.core.shared_error_handling",
    "SharedLogger": "src.core.shared_logging",
    "ValidationError": "src.core.shared_validation",
    "SharedValidator": "src.core.shared_validation",
    "ActionType": "src.core.swarm_action_protocol",
    "SwarmActionProtocol": "src.core.swarm_action_protocol",
    "CoordinateSource": "src.core.unified_coordinate_loader",
    "AgentCoordinates": "src.services.messaging.models.messaging_models",
    "CoordinateConfig": "src.core.unified_coordinate_loader",
    "UnifiedCoordinateLoader": "src.core.unified_coordinate_loader",
    "ModelConfig": "src.ml.ml_pipeline_models",
    "TrainingData": "src.ml.ml_pipeline_models",
    "ModelMetrics": "src.ml.ml_pipeline_models",
    "DeploymentConfig": "src.core.unified_ml_pipeline",
    "PipelineStatus": "src.ml.training_pipeline",
    "ModelType": "src.core.unified_ml_pipeline",
    "PipelineMetrics": "src.core.unified_ml_pipeline",
    "UnifiedMLPipeline": "src.core.unified_ml_pipeline",
    "ReviewStatus": "src.core.pr_review_models",
    "ReviewPriority": "src.core.pr_review_models",
    "CodeChange": "src.core.pr_review_models",
    "PullRequest": "src.core.pr_review_models",
    "ReviewResult": "src.core.pr_review_models",
    "VibeCheckResult": "src.core.vibe_check_models",
    "VibeViolation": "src.core.vibe_check_models",
    "VibeCheckReport": "src.core.vibe_check_models",
    "VibePatternDetector": "src.core.vibe_check_patterns",
    "PRStorageManager": "src.core.pr_review_storage",
    "VibeAnalyzer": "src.core.vibe_check_analyzers",
    "VibeChecker": "src.core.vibe_check_core",
    "PRReviewProtocol": "src.core.pr_review_core",
    "PRValidator": "src.core.pr_review_validators",
    "SSOTConfig": "src.core.ssot_manager",
    "SSOTManager": "src.core.ssot_manager",
    "CrossPlatformEnvironment": "src.core.cross_platform_env_core",
    "EnvironmentConfig": "src.core.cross_platform_env_advanced",
    "BackupType": "src.core.database.backup_recovery_system",
    "BackupStatus": "src.core.database.backup_recovery_system",
    "RecoveryStatus": "src.core.database.backup_recovery_system",
    "BackupConfig": "src.core.database.backup_recovery_system",
    "RecoveryConfig": "src.core.database.backup_recovery_system",
    "BackupInfo": "src.core.database.backup_recovery_system",
    "RecoveryInfo": "src.core.database.backup_recovery_system",
    "BackupRecoverySystem": "src.core.database.backup_recovery_system",
    "ReplicationStatus": "src.core.database.data_replication_system",
    "ConflictResolutionStrategy": "src.core.database.data_replication_system",
    "ReplicationConfig": "src.core.database.data_replication_system",
    "ReplicationNode": "src.core.database.data_replication_system",
    "ReplicationEvent": "src.core.database.data_replication_system",
    "DataReplicationSystem": "src.core.database.data_replication_system",
    "DatabaseMonitoringSystem": "src.core.database.database_monitoring_system_v2",
    "DatabaseType": "src.core.database.distributed_db_manager",
    "DatabaseConfig": "src.services.vector_database.vector_database_orchestrator",
    "QueryResult": "src.core.database.distributed_db_manager",
    "DistributedDatabaseManager": "src.core.database.distributed_db_manager",
    "Alert": "src.ml.ml_monitoring_models",
    "MetricThreshold": "src.core.database.monitoring.metrics_collector",
    "AlertManager": "src.core.database.monitoring.alert_manager",
    "HealthStatus": "src.services.vector_database.vector_database_monitoring",
    "HealthCheck": "src.core.database.monitoring.health_checker",
    "HealthChecker": "src.core.database.monitoring.health_checker",
    "DatabaseMetric": "src.core.database.monitoring.metrics_collector",
    "MetricsCollector": "src.v3.v3_011_api_gateway_advanced",
    "TokenPayload": "src.core.security.jwt_manager",
    "JWTManager": "src.core.security.jwt_manager",
    "OAuth2Client": "src.core.security.oauth2_provider",
    "AccessToken": "src.core.security.oauth2_provider",
    "OAuth2Provider": "src.core.security.oauth2_provider",
    "SecurityLevel": "src.core.security.security_manager",
    "SecurityPolicy": "src.core.security.security_manager",
    "SecurityManager": "src.core.security.security_manager",
    "ErrorSeverity": "src.core.tracing.error_tracker",
    "ErrorCategory": "src.core.tracing.error_tracker",
    "ErrorInfo": "src.core.tracing.error_tracker",
    "ErrorStats": "src.core.tracing.error_tracker",
    "ErrorTracker": "src.core.tracing.error_tracker",
    "ErrorHandler": "src.core.tracing.error_tracker",
    "TraceConfig": "src.tracing.distributed_tracing_system",
    "JaegerTracer": "src.core.tracing.jaeger_tracer",
    "TraceManager": "src.core.tracing.jaeger_tracer",
    "Metric": "src.core.tracing.performance_monitor",
    "PerformanceStats": "src.core.tracing.performance_monitor",
    "PerformanceDecorator": "src.core.tracing.performance_monitor",
    "RequestStatus": "src.core.tracing.request_tracker",
    "RequestInfo": "src.core.tracing.request_tracker",
    "RequestTracker": "src.core.tracing.request_tracker",
    "ConfigValidationError": "src.core.config.unified_config_manager",
    "UnifiedConfigManager": "src.core.config.unified_config_manager",
    "TaskPriority": "src.domain.entities.task_enums",
    "TaskStatus": "src.domain.entities.task_enums",
    "Task": "src.core.task.priority_scheduler",
    "PriorityScheduler": "src.core.task.priority_scheduler",
    "AletheiaPromptManager": "src.aletheia.aletheia_prompt_manager",
    "PersistentMemoryManager": "src.core.memory.persistent_memory",
    "ResourceRegistry": "src.core.resource_management.resource_registry",
    "ThreadManager": "src.core.resource_management.thread_manager",
    "SQLiteConnectionManager": "src.core.resource_management.sqlite_manager",
    "DiscordDevlogService": "src.services.discord_devlog_service",
    "AgentDevlogAutomation": "src.services.agent_devlog_automation",
    "IntegratedDiscordBotService": "src.services.discord_bot_integrated",
    "AgentDevlogPoster": "src.services.agent_devlog.devlog_poster",
    "PromptStatus": "src.services.aletheia_prompt_manager",
    "PromptType": "src.aletheia.aletheia_prompt_manager",
    "PromptMetadata": "src.services.aletheia_prompt_manager",
    "PromptOptimization": "src.services.aletheia_prompt_manager",
    "PromptStorage": "src.services.aletheia_prompt_manager",
    "PromptOptimizer": "src.services.aletheia_prompt_manager",
    "PromptVersionControl": "src.services.aletheia_prompt_manager",
    "PromptAnalytics": "src.services.aletheia_prompt_manager",
    "PromptSecurity": "src.services.aletheia_prompt_manager",
    "CoordinateOperation": "src.services.coordinate_manager",
    "CoordinateFilter": "src.services.coordinate_manager",
    "CoordinateRange": "src.services.coordinate_manager",
    "CoordinateBatch": "src.services.coordinate_manager",
    "CoordinateCalculator": "src.services.coordinate_manager",
    "CoordinateBatchProcessor": "src.services.coordinate_manager",
    "DevlogAnalyticsAPI": "src.services.devlog_analytics_api",
    "StoryChapter": "src.services.devlog_storytelling_service",
    "DevlogEntry": "src.services.agent_devlog.models",
    "DevlogStorytellingService": "src.services.devlog_storytelling",
    "DiscordLineEmitter": "src.services.discord_line_emitter",
    "GitHubOperationType": "src.services.github_protocol_models",
    "GitHubPermissionLevel": "src.services.github_protocol_models",
    "GitHubOperationStatus": "src.services.github_protocol_models",
    "GitHubAgentPermission": "src.services.github_protocol_models",
    "GitHubOperation": "src.services.github_protocol_models",
    "GitHubAuditLog": "src.services.github_protocol_models",
    "GitHubRepositoryConfig": "src.services.github_protocol_models",
    "GitHubWorkflowTemplate": "src.services.github_protocol_models",
    "GitHubProtocolDatabase": "src.services.github_protocol_models",
    "GitHubProtocolService": "src.services.github_protocol_service",
    "MultichatSessionDemo": "src.services.multichat_session_demo",
    "ChatMessage": "src.services.multichat_session_persistence",
    "ChatSession": "src.services.multichat_session_persistence",
    "SessionPersistence": "src.services.multichat_session_persistence",
    "PersistentMemory": "src.memory.persistent_memory",
    "SecretStore": "src.services.secret_store",
    "ServiceManager": "src.architecture.service_layer",
    "SocialMediaIntegrationService": "src.services.social_media_integration",
    "DecisionType": "src.services.swarm_intelligence_coordination",
    "AgentRole": "src.services.swarm_intelligence_coordination",
    "SwarmDecision": "src.services.swarm_intelligence_coordination",
    "SwarmAgent": "src.services.swarm_intelligence_coordination",
    "SwarmMessage": "src.services.swarm_intelligence_coordination",
    "SwarmIntelligenceCoordination": "src.services.swarm_intelligence_coordination",
    "V3Task": "src.services.v3_autonomous_workflow_system",
    "V3Agent": "src.services.v3_autonomous_workflow_system",
    "V3AutonomousWorkflowSystem": "src.services.v3_autonomous_workflow_system",
    "SoftOnboardingService": "src.services.soft_onboarding",
    "MessagePriority": "src.services.messaging.models_optimized",
    "MessageStatus": "src.services.messaging.models.messaging_enums",
    "MessageType": "src.services.messaging.models_optimized",
    "Message": "src.services.messaging.models_optimized",
    "MessagingMetrics": "src.services.messaging.models.messaging_models",
    "CoordinationRequest": "src.services.discord_commander.web_models",
    "MessageProtocolChecker": "src.services.consolidated_messaging_service_core",
    "AgentCoordinatesLoader": "src.services.consolidated_messaging_service_core",
    "AgentStatusChecker": "src.services.consolidated_messaging_service_core",
    "ConsolidatedMessagingServiceCore": "src.services.consolidated_messaging_service_core",
    "ConsolidatedMessagingService": "src.services.consolidated_messaging_service_main",
    "MessageFormatter": "src.services.consolidated_messaging_service_utils",
    "MessageValidator": "src.services.messaging.message_validator",
    "MessageSender": "src.services.consolidated_messaging_service_utils",
    "AgentOnboarder": "src.services.consolidated_messaging_service_utils",
    "MemoryType": "src.services.persistent_memory_core",
    "MemoryPriority": "src.services.persistent_memory_core",
    "MemoryMetadata": "src.services.persistent_memory_core",
    "MemoryRelationship": "src.services.persistent_memory_core",
    "MemoryStorage": "src.services.persistent_memory_core",
    "MemoryCompression": "src.services.persistent_memory_core",
    "MemorySecurity": "src.services.persistent_memory_core",
    "MemoryRetrieval": "src.services.persistent_memory_advanced",
    "MemoryOrganization": "src.services.persistent_memory_advanced",
    "Mock": "src.services.messaging.coordinates",
    "AgentContextDetector": "src.services.messaging.agent_context",
    "IntelligentAgentCoordinator": "src.services.messaging.intelligent_coordinator",
    "IntelligentMessagingService": "src.services.messaging.intelligent_messaging",
    "MessageTag": "src.services.messaging.models_optimized",
    "MessageConfig": "src.services.messaging.models_optimized",
    "MessageResult": "src.services.messaging.models_optimized",
    "MessageUtils": "src.services.messaging.models_optimized",
    "MultichatResponseSystem": "src.services.messaging.multichat_response",
    "ProjectUpdateSystem": "src.services.messaging.project_update_system",
    "MessagingWorkflowIntegration": "src.services.messaging.workflow_integration",
    "MessagingCore": "src.services.messaging.messaging_core",
    "CoordinationTracker": "src.services.messaging.coordination_tracker",
    "PyAutoGUIHandler": "src.services.messaging.pyautogui_handler",
    "EnhancedMessageValidator": "src.services.messaging.enhanced_message_validator",
    "EnhancedPyAutoGUIHandler": "src.services.messaging.enhanced_pyautogui_handler",
    "FileHandleManager": "src.services.messaging.memory_leak_analyzer",
    "MessagingSystemMemoryAnalyzer": "src.services.messaging.memory_leak_analyzer",
    "CoordinationRequestManager": "src.services.messaging.memory_leak_fixes",
    "PyAutoGUIResourceManager": "src.services.messaging.memory_leak_fixes",
    "FileResourceManager": "src.services.messaging.memory_leak_fixes",
    "MemoryLeakFixer": "src.services.messaging.memory_leak_fixes",
    "CoordinationTask": "src.services.messaging.intelligent_coordinator_models",
    "AgentProfile": "src.services.messaging.intelligent_coordinator_models",
    "CoordinationPlan": "src.services.messaging.intelligent_coordinator_models",
    "CoordinationResult": "src.services.messaging.intelligent_coordinator_models",
    "SwarmIntelligence": "src.services.messaging.intelligent_coordinator_models",
    "TaskRouting": "src.services.messaging.intelligent_coordinator_models",
    "IntelligentCoordinatorCore": "src.services.messaging.intelligent_coordinator_core",
    "MessagingService": "src.architecture.service_layer",
    "MessagingCLI": "src.services.messaging.cli.messaging_cli_clean",
    "MessageDeliveryProvider": "src.services.messaging.interfaces.messaging_interfaces",
    "PyAutoGUIDeliveryProvider": "src.services.messaging.interfaces.messaging_interfaces",
    "InboxDeliveryProvider": "src.services.messaging.interfaces.messaging_interfaces",
    "MessageHistoryProvider": "src.services.messaging.interfaces.messaging_interfaces",
    "FileBasedMessageHistoryProvider": "src.services.messaging.interfaces.messaging_interfaces",
    "UnifiedMessage": "src.services.messaging.models.messaging_models",
    "MessageHistory": "src.services.messaging.models.messaging_models",
    "DeliveryMethod": "src.services.messaging.models.messaging_enums",
    "UnifiedMessageType": "src.services.messaging.models.messaging_enums",
    "UnifiedMessagePriority": "src.services.messaging.models.messaging_enums",
    "UnifiedMessageTag": "src.services.messaging.models.messaging_enums",
    "RecipientType": "src.services.messaging.models.messaging_enums",
    "DiscordMessagingProvider": "src.services.messaging.providers.discord_provider",
    "DiscordCommandHandler": "src.services.messaging.providers.discord_provider",
    "OnboardingService": "src.services.messaging.onboarding.onboarding_service",
    "StatusMonitor": "src.services.messaging.status.status_monitor",
    "TheaLoginDetector": "src.services.thea.thea_login_detector",
    "ProjectAnalytics": "src.services.thea.thea_analytics_reporter",
    "TheaAnalyticsReporter": "src.services.thea.thea_analytics_reporter",
    "TheaBrowserManager": "src.services.thea.thea_browser_manager",
    "TheaCommunicationCore": "src.services.thea.thea_communication_core",
    "TheaCommunicationInterface": "src.services.thea.thea_communication_interface",
    "ErrorType": "src.team_beta.repository_manager",
    "RecoveryStrategy": "src.services.thea.thea_error_recovery",
    "TheaErrorRecovery": "src.services.thea.thea_error_recovery",
    "TheaMonitoringSystem": "src.services.thea.thea_monitoring_system",
    "ProjectStatus": "src.services.vector_database.project_completion_system",
    "ProjectContextManager": "src.services.thea.context_templates",
    "TheaAutonomousSystem": "src.services.thea.thea_autonomous_system",
    "ConversationMetadata": "src.services.thea.thea_conversation_manager",
    "TheaConversationManager": "src.services.thea.thea_conversation_manager",
    "ArchitectureIntegration": "src.services.vector_database.architecture_integration",
    "InfrastructureComponent": "src.v3.cloud_infrastructure_models",
    "InfrastructureStatus": "src.services.vector_database.complete_infrastructure_integration",
    "CompleteInfrastructureIntegration": "src.services.vector_database.complete_infrastructure_integration",
    "VectorDatabaseCoreIntegration": "src.services.vector_database.core_integration",
    "VectorDataProcessor": "src.services.vector_database.data_processor",
    "CollaborationStatus": "src.services.vector_database.enhanced_collaboration",
    "CollaborationType": "src.services.vector_database.enhanced_collaboration",
    "CollaborationEvent": "src.services.vector_database.enhanced_collaboration",
    "CollaborationSession": "src.services.vector_database.enhanced_collaboration",
    "CollaborationManager": "src.services.vector_database.enhanced_collaboration",
    "CoordinationEngine": "src.services.vector_database.enhanced_collaboration",
    "IntegrationCoordinator": "src.services.vector_database.enhanced_collaboration",
    "EnhancedCollaborationSystem": "src.services.vector_database.enhanced_collaboration",
    "ComplexityLevel": "src.services.vector_database.kiss_principle_enforcement_system",
    "ComplexityMetric": "src.services.vector_database.kiss_principle_enforcement_system",
    "SimplicityRule": "src.services.vector_database.kiss_principle_enforcement_system",
    "ComplexityAnalyzer": "src.services.vector_database.kiss_principle_enforcement_system",
    "SimplicityEnforcer": "src.services.vector_database.kiss_principle_enforcement_system",
    "KISSManager": "src.services.vector_database.kiss_principle_enforcement_system",
    "OptimizationLevel": "src.aletheia.aletheia_prompt_manager",
    "OptimizationMetric": "src.services.vector_database.performance_optimization_framework",
    "OptimizationResult": "src.services.vector_database.performance_optimization_framework",
    "PerformanceOptimizer": "src.services.discord_commander.optimization_utils",
    "ResourceOptimizer": "src.services.vector_database.performance_optimization_framework",
    "BottleneckAnalyzer": "src.services.vector_database.performance_optimization_framework",
    "OptimizationEngine": "src.services.vector_database.performance_optimization_framework",
    "ProjectPhase": "src.services.vector_database.project_completion_system",
    "ProjectCompletionStatus": "src.services.vector_database.project_completion_system",
    "ProjectMilestone": "src.services.vector_database.project_completion_system",
    "ProjectTracker": "src.services.vector_database.project_completion_system",
    "ProjectCompletionManager": "src.services.vector_database.project_completion_system",
    "ProjectQualityAssessor": "src.services.vector_database.project_completion_system",
    "QualityGate": "src.integration.qa_coordination.models",
    "QualityMetric": "src.services.vector_database.quality_assurance_framework",
    "QualityResult": "src.services.vector_database.quality_assurance_framework",
    "QualityChecker": "src.services.vector_database.quality_assurance_framework",
    "QualityManager": "src.services.vector_database.quality_assurance_framework",
    "ComplianceChecker": "src.services.vector_database.quality_assurance_framework",
    "RecordTimeMigration": "src.services.vector_database.record_time_migration",
    "StatusIndexer": "src.services.vector_database.status_indexer",
    "V3ContractExecutionSystem": "src.services.vector_database.v3_contract_execution_system",
    "VectorDatabaseIntegration": "src.services.vector_database.vector_database_integration",
    "VectorStatus": "src.services.vector_database.vector_database_models",
    "VectorType": "src.services.vector_database.vector_database_models",
    "VectorMetadata": "src.services.vector_database.vector_database_models",
    "VectorRecord": "src.services.vector_database.vector_database_models",
    "VectorQuery": "src.services.vector_database.vector_database_models",
    "VectorIndex": "src.services.vector_database.vector_database_models",
    "VectorDatabaseError": "src.services.vector_database.vector_database_models",
    "VectorDatabaseConnection": "src.services.vector_database.vector_database_models",
    "VectorDatabaseMetrics": "src.services.vector_database.vector_database_models",
    "PerformanceMetric": "src.services.vector_database.vector_database_monitoring",
    "MetricPoint": "src.services.vector_database.vector_database_monitoring",
    "VectorDatabaseMonitoring": "src.services.vector_database.vector_database_monitoring",
    "VectorDatabaseOrchestrator": "src.services.vector_database.vector_database_orchestrator",
    "VectorDatabaseQueryAnalytics": "src.services.vector_database.query_analytics",
    "VectorDatabaseSecurityCore": "src.services.vector_database.security_validator_core",
    "SecurityChecks": "src.services.vector_database.security_validator_checks",
    "VectorDatabaseSecurityValidator": "src.services.vector_database.security_validator_main",
    "OrchestrationConfig": "src.services.vector_database.orchestration.core",
    "OrchestrationCore": "src.services.vector_database.orchestration.core",
    "ContractExecutionCore": "src.services.vector_database.contracts.contract_execution_core",
    "ContractPriority": "src.services.vector_database.contracts.contract_models",
    "ContractStatus": "src.services.vector_database.contracts.contract_models",
    "V3Contract": "src.services.vector_database.contracts.contract_models",
    "ContractPerformanceMonitor": "src.services.vector_database.contracts.contract_performance_monitor",
    "ContractQualityValidator": "src.services.vector_database.contracts.contract_quality_validator",
    "IndexManager": "src.services.vector_database.indexing.manager",
    "IndexProcessor": "src.services.vector_database.indexing.processor",
    "IndexStatus": "src.services.vector_database.indexing.types",
    "IndexType": "src.services.vector_database.indexing.types",
    "IndexEntry": "src.services.vector_database.indexing.types",
    "IndexStats": "src.services.vector_database.indexing.types",
    "CycleCompletionLogger": "src.services.autonomous.cycle_completion_logger",
    "BlockerResolver": "src.services.autonomous.blockers.blocker_resolver",
    "AgentAutonomousWorkflow": "src.services.autonomous.core.autonomous_workflow",
    "MailboxManager": "src.services.autonomous.mailbox.mailbox_manager",
    "AutonomousOperations": "src.services.autonomous.operations.autonomous_operations",
    "AutonomousOperationsCore": "src.services.autonomous.operations.modular.core",
    "OperationExecutor": "src.services.autonomous.operations.modular.operation_executor",
    "OperationsLoader": "src.services.autonomous.operations.modular.operations_loader",
    "OperationsManager": "src.services.autonomous.operations.modular.operations_manager",
    "CodeReviewExecutor": "src.services.autonomous.operations.modular.executors.code_review_executor",
    "DocumentationUpdateExecutor": "src.services.autonomous.operations.modular.executors.documentation_update_executor",
    "PerformanceAnalysisExecutor": "src.services.autonomous.operations.modular.executors.performance_analysis_executor",
    "SecurityScanExecutor": "src.services.autonomous.operations.modular.executors.security_scan_executor",
    "SSOTValidationExecutor": "src.services.autonomous.operations.modular.executors.ssot_validation_executor",
    "SwarmCoordinationAnalysisExecutor": "src.services.autonomous.operations.modular.executors.swarm_coordination_analysis_executor",
    "SystemIntegrationScanExecutor": "src.services.autonomous.operations.modular.executors.system_integration_scan_executor",
    "TaskManager": "src.services.autonomous.tasks.task_manager",
    "BasicCommandHandler": "src.services.discord_bot.commands.basic_commands",
    "MainInterface": "src.services.discord_bot.commands.main_interface",
    "RestartModal": "src.services.discord_bot.commands.modal_handlers",
    "ShutdownModal": "src.services.discord_bot.commands.modal_handlers",
    "SocialMediaCommands": "src.services.discord_bot.core.commands.social_media_commands",
    "AgentCoordinationCore": "src.services.discord_bot.commands.agent_coordination.core",
    "AgentMessagingHandler": "src.services.discord_bot.commands.agent_coordination.messaging",
    "MessagePriorityView": "src.services.discord_bot.commands.agent_coordination.messaging",
    "MessageInputModal": "src.services.discord_bot.commands.agent_coordination.messaging",
    "AgentOnboardingHandler": "src.services.discord_bot.commands.agent_coordination.onboarding",
    "AgentStatusHandler": "src.services.discord_bot.commands.agent_coordination.status",
    "BotStatus": "src.services.discord_bot.core.discord_bot_models",
    "CommandType": "src.v3.v3_009_command_understanding",
    "BotConfiguration": "src.services.discord_commander.bot_models",
    "CommandContext": "src.v3.v3_009_command_understanding",
    "BotMetrics": "src.services.discord_bot.core.discord_bot_models",
    "DiscordBotCore": "src.services.discord_bot.core.discord_bot_core",
    "EnhancedDiscordAgentBot": "src.services.discord_bot.core.discord_bot",
    "DiscordAgentInterface": "src.services.discord_bot.core.discord_agent_interface",
    "DiscordSwarmCoordinator": "src.services.discord_bot.core.discord_agent_interface",
    "DiscordUI": "src.services.discord_bot.ui.discord_ui",
    "AgentControlView": "src.services.discord_bot.ui.discord_ui",
    "SystemControlView": "src.services.discord_bot.ui.discord_ui",
    "SocialMediaView": "src.services.discord_bot.ui.discord_ui",
    "MessageAgentModal": "src.services.discord_bot.ui.discord_ui",
    "BroadcastModal": "src.services.discord_bot.ui.discord_ui",
    "SocialMediaPostModal": "src.services.discord_bot.ui.discord_ui",
    "DiscordWebhookProvisioner": "src.services.discord_bot.tools.webhook_provisioner",
    "AlertSeverity": "src.ml.ml_monitoring_models",
    "AlertStatus": "src.services.alerting.intelligent_alerting_system",
    "NotificationChannel": "src.services.alerting.intelligent_alerting_system",
    "AlertRule": "src.services.alerting.intelligent_alerting_system",
    "NotificationConfig": "src.services.alerting.intelligent_alerting_system",
    "EscalationPolicy": "src.services.alerting.intelligent_alerting_system",
    "IntelligentAlertingSystem": "src.services.alerting.intelligent_alerting_system",
    "DashboardWebHandler": "src.services.dashboard.dashboard_web_core",
    "DashboardWebServer": "src.services.dashboard.dashboard_web_core",
    "AgentInfo": "src.services.agent_devlog.models",
    "TaskInfo": "src.services.dashboard.swarm_coordination_dashboard",
    "SwarmCoordinationDashboard": "src.services.dashboard.swarm_coordination_dashboard",
    "AgentCommands": "src.services.discord_commander.commands",
    "SystemCommands": "src.services.discord_commander.commands",
    "SwarmCommands": "src.services.discord_commander.commands",
    "CommandManager": "src.services.discord_commander.bot_commands",
    "DiscordConfig": "src.services.discord_commander.core",
    "DiscordConnectionManager": "src.services.discord_commander.core",
    "DiscordCommandRegistry": "src.services.discord_commander.core",
    "DiscordEventManager": "src.services.discord_commander.core",
    "DiscordStatusMonitor": "src.services.discord_commander.core",
    "DiscordPerformanceMetrics": "src.services.discord_commander.performance_metrics",
    "DiscordPerformanceMonitor": "src.services.discord_commander.performance_monitor",
    "DiscordCommandCache": "src.services.discord_commander.optimization",
    "DiscordRateLimiter": "src.services.discord_commander.optimization",
    "DiscordAsyncPool": "src.services.discord_commander.optimization",
    "DiscordOptimizer": "src.services.discord_commander.optimization",
    "WebControllerCore": "src.services.discord_commander.web_controller_core",
    "DiscordBotEvents": "src.services.discord_commander.bot_events",
    "DiscordCommanderBotV2": "src.services.discord_commander.bot_v2",
    "RateLimiter": "src.v3.v3_011_api_gateway_core",
    "MessageCache": "src.services.discord_commander.optimization_utils",
    "BatchProcessor": "src.services.discord_commander.optimization_utils",
    "PerformanceThresholds": "src.services.discord_commander.performance_metrics",
    "PerformanceAlert": "src.services.discord_commander.performance_metrics",
    "PerformanceMetricsCalculator": "src.services.discord_commander.performance_metrics",
    "SocialMediaPoster": "src.services.discord_commander.social_media_poster",
    "SocketEventHandler": "src.services.discord_commander.socket_events",
    "DiscordCommanderController": "src.services.discord_commander.web_controller_main",
    "WebHandlers": "src.services.discord_commander.web_handlers",
    "SystemStatus": "src.services.discord_commander.web_models",
    "SocialMediaStatus": "src.services.discord_commander.web_models",
    "MessageRequest": "src.services.discord_commander.web_models",
    "SwarmCoordinateRequest": "src.services.discord_commander.web_models",
    "WebControllerConfig": "src.services.discord_commander.web_controller_models",
    "AgentWorkspaceInfo": "src.services.discord_commander.web_models",
    "WebSocketEvent": "src.services.discord_commander.web_models",
    "TemplateData": "src.services.discord_commander.web_models",
    "DiscordCommanderControllerV2": "src.services.discord_commander.web_controller_v2",
    "MessageData": "src.services.discord_commander.web_controller_models",
    "WebRoutes": "src.services.discord_commander.web_routes",
    "BotConfig": "src.services.discord_commander.bot_config",
    "BotManager": "src.services.discord_commander.bot_main",
    "BotCore": "src.services.discord_commander.bot_models",
    "EmbedBuilder": "src.services.discord_commander.bot_models",
    "AgentControlCommands": "src.services.discord_commander.commands.agent_control",
    "AgentValidator": "src.services.agent_devlog.agent_validation",
    "AgentDevlogCLI": "src.services.agent_devlog.cli",
    "DevlogStatus": "src.services.agent_devlog.models",
    "DevlogType": "src.services.agent_devlog.models",
    "DevlogStats": "src.services.agent_devlog.models",
    "SearchResult": "src.services.agent_devlog.models",
    "DevlogConfig": "src.services.agent_devlog.models",
    "DevlogStorage": "src.services.agent_devlog.storage",
    "GeneralCycle": "src.services.role_assignment.contract_integration",
    "RoleContract": "src.services.role_assignment.contract_integration",
    "ContractIntegration": "src.services.role_assignment.contract_integration",
    "RoleAssignment": "src.services.role_assignment.role_assignment_service",
    "RoleCapability": "src.services.role_assignment.role_assignment_service",
    "RoleAssignmentService": "src.services.role_assignment.role_assignment_service",
    "RoleIntegration": "src.services.devlog_storytelling.integration.role_integration",
    "CodeArchaeologyService": "src.services.code_archaeology",
    "UseCaseResult": "src.architecture.application_layer",
    "UseCase": "src.architecture.application_layer",
    "SendMessageUseCase": "src.architecture.application_layer",
    "GetAgentStatusUseCase": "src.architecture.application_layer",
    "CreateTaskUseCase": "src.architecture.application_layer",
    "GetSystemStatusUseCase": "src.architecture.application_layer",
    "ApplicationService": "src.architecture.application_layer",
    "ApplicationFacade": "src.architecture.application_layer",
    "PatternType": "src.architecture.design_patterns_v2",
    "PatternConfig": "src.architecture.design_patterns",
    "Singleton": "src.architecture.design_patterns",
    "Factory": "src.architecture.design_patterns",
    "Observer": "src.architecture.patterns.observer_strategy",
    "Strategy": "src.architecture.design_patterns",
    "Command": "src.architecture.patterns.command_repository",
    "PatternRegistry": "src.architecture.design_patterns_v2",
    "PatternManager": "src.architecture.design_patterns",
    "SingletonMeta": "src.architecture.patterns.singleton_factory",
    "SingletonBase": "src.architecture.patterns.singleton_factory",
    "ServiceFactory": "src.architecture.patterns.singleton_factory",
    "Event": "src.architecture.patterns.observer_strategy",
    "Subject": "src.architecture.patterns.observer_strategy",
    "ValidationStrategy": "src.architecture.patterns.observer_strategy",
    "MessageValidationStrategy": "src.architecture.patterns.observer_strategy",
    "AgentValidationStrategy": "src.architecture.patterns.observer_strategy",
    "ValidationContext": "src.architecture.patterns.observer_strategy",
    "MessageCommand": "src.architecture.patterns.command_repository",
    "CommandInvoker": "src.architecture.patterns.command_repository",
    "Repository": "src.team_beta.repository_manager",
    "InMemoryRepository": "src.architecture.patterns.command_repository",
    "ServiceLocator": "src.architecture.patterns.singleton_factory",
    "Entity": "src.architecture.patterns.command_repository",
    "AgentEntity": "src.architecture.repository_layer",
    "MessageEntity": "src.architecture.repository_layer",
    "TaskEntity": "src.architecture.repository_layer",
    "FileRepository": "src.architecture.patterns.command_repository",
    "AgentRepository": "src.architecture.repository_layer",
    "MessageRepository": "src.architecture.repository_layer",
    "TaskRepository": "src.architecture.repository_layer",
    "RepositoryManager": "src.architecture.repository_layer",
    "ServiceStatus": "src.architecture.service_layer",
    "ServiceConfig": "src.architecture.service_layer",
    "ServiceBase": "src.architecture.service_layer",
    "DiscordService": "src.architecture.service_layer",
    "TheaService": "src.architecture.service_layer",
    "IntegrationType": "src.architecture.system_integration",
    "IntegrationStatus": "src.team_beta.vscode_integration",
    "IntegrationConfig": "src.architecture.system_integration",
    "IntegrationMetrics": "src.architecture.system_integration",
    "ServiceRegistry": "src.architecture.system_integration",
    "EventBus": "src.domain.domain_events",
    "IntegrationManager": "src.architecture.system_integration",
    "ComponentType": "src.v3.v3_012_mobile_app_framework_core",
    "ComponentStatus": "src.architecture.unified_architecture_core",
    "ComponentConfig": "src.architecture.unified_architecture_core",
    "ComponentMetrics": "src.monitoring.performance_monitor",
    "ComponentLifecycle": "src.architecture.unified_architecture_core",
    "DependencyInjection": "src.architecture.unified_architecture_core",
    "UnifiedArchitecture": "src.architecture.unified_architecture_core",
    "EmailValidationStrategy": "src.architecture.patterns.observer_strategy",
    "StrategyFactory": "src.architecture.patterns.observer_strategy",
    "EventType": "src.discord.realtime_coordination_core",
    "EventPriority": "src.discord.realtime_coordination_core",
    "DomainEvent": "src.domain.domain_events",
    "SystemEvent": "src.domain.domain_events",
    "AgentEvent": "src.domain.domain_events",
    "TaskEvent": "src.domain.domain_events",
    "UserEvent": "src.domain.domain_events",
    "EventHandler": "src.domain.domain_events",
    "EventStore": "src.domain.domain_events",
    "AgentType": "src.domain.entities.agent",
    "AgentCapability": "src.domain.entities.agent",
    "AgentMetrics": "src.domain.entities.agent",
    "AgentConfiguration": "src.domain.entities.agent",
    "Agent": "src.domain.entities.agent",
    "AgentManager": "src.domain.entities.agent",
    "TaskType": "src.domain.entities.task_enums",
    "TaskCore": "src.domain.entities.task_core",
    "LightweightSnapshot": "src.monitoring.memory_optimized_monitor",
    "MemoryOptimizedMonitor": "src.monitoring.memory_optimized_monitor",
    "PerformanceSnapshot": "src.monitoring.performance_monitor",
    "RealTimePerformanceMonitor": "src.monitoring.performance_monitor",
    "ActivityMonitor": "src.fsm.activity_monitor",
    "CaptainDashboard": "src.fsm.captain_dashboard",
    "FSMTransition": "src.fsm.fsm_messaging_integration",
    "FSMMessagingIntegration": "src.fsm.fsm_messaging_integration",
    "AgentState": "src.fsm.fsm_registry",
    "SwarmState": "src.fsm.fsm_registry",
    "StatePointer": "src.fsm.fsm_registry",
    "MLInfrastructureSetup": "src.ml.v3_007_infrastructure",
    "MLDataManagement": "src.ml.v3_007_data_management",
    "MLModelManagement": "src.ml.v3_007_model_management",
    "MLDeploymentSystem": "src.ml.v3_007_deployment",
    "MLMonitoring": "src.ml.ml_monitoring",
    "MLMonitoringCore": "src.ml.ml_monitoring_core",
    "MetricData": "src.ml.ml_monitoring_models",
    "MLMonitoringStorage": "src.ml.ml_monitoring_storage",
    "MLPipelineCore": "src.v3.ml_pipeline_core",
    "FallbackMLModel": "src.ml.ml_pipeline_fallback",
    "PyTorchModel": "src.ml.ml_pipeline_system_v2",
    "MLPipelineManager": "src.ml.ml_pipeline_manager",
    "ModelResult": "src.ml.ml_pipeline_models",
    "MLPipelineSystem": "src.ml.ml_pipeline_system_v2",
    "TensorFlowModel": "src.ml.ml_pipeline_system_v2",
    "NeuralNetwork": "src.ml.ml_pipeline_system_v2",
    "DataProcessor": "src.ml.ml_pipeline_utils",
    "ModelValidator": "src.ml.ml_pipeline_utils",
    "ModelDeployment": "src.ml.model_deployment",
    "ModelVersioning": "src.ml.model_versioning",
    "V3_007_MLPipeline": "src.ml.pipeline_v2",
    "PyTorchInfrastructure": "src.ml.pytorch_infrastructure",
    "SampleNet": "src.ml.pytorch_infrastructure",
    "TensorFlowInfrastructure": "src.ml.tensorflow_infrastructure",
    "TrainingPipeline": "src.ml.training_pipeline",
    "MLAutomationSystem": "src.ml.v3_007_automation",
    "V3_007_MLPipelineCore": "src.ml.v3_007_core",
    "MLMonitoringSystem": "src.ml.v3_007_monitoring",
    "ValidationFramework": "src.ml.validation_framework",
    "VersionStatus": "src.ml.model_versioning_core",
    "ModelVersion": "src.ml.model_versioning_core",
    "ModelVersioningCore": "src.ml.model_versioning_core",
    "ModelVersioningAdvanced": "src.ml.model_versioning_advanced",
    "ValidationStatus": "src.ml.validation_framework_core",
    "TestType": "src.ml.validation_framework_core",
    "ValidationResult": "src.integration.qa_coordination.models",
    "TestSuite": "src.ml.validation_framework_core",
    "ValidationFrameworkCore": "src.ml.validation_framework_core",
    "IngestManager": "src.ml.data_ingestion_system.data_ingestion.IngestManager",
    "LocalEmbeddingsGeneratorAgent": "src.ml.data_ingestion_system.data_ingestion.LocalEmbeddingsGeneratorAgent",
    "OrchestratorAgent": "src.ml.data_ingestion_system.data_ingestion.OrchestratorAgent",
    "PreprocessorAgent": "src.ml.data_ingestion_system.data_ingestion.PreprocessorAgent",
    "VectorStoreAgent": "src.ml.data_ingestion_system.data_ingestion.VectorStoreAgent",
    "AgentTracingIntegration": "src.tracing.agent_tracing",
    "V3_004_DistributedTracingCore": "src.tracing.distributed_tracing_core",
    "V3_004_DistributedTracing": "src.tracing.distributed_tracing",
    "DistributedTracingSystem": "src.tracing.distributed_tracing_system",
    "FSMTracingIntegration": "src.tracing.fsm_tracing",
    "TracingInfrastructureSetup": "src.tracing.infrastructure_setup",
    "JaegerBackendConfig": "src.tracing.jaeger_backend",
    "MessagingObservabilitySetup": "src.tracing.messaging_observability",
    "PerformanceMonitoringSetup": "src.tracing.performance_monitoring",
    "ContractSystemValidator": "src.validation.contract_system_validator",
    "DocumentationValidator": "src.validation.documentation_validator",
    "SecurityFinding": "src.validation.enhanced_security_validator",
    "EnhancedSecurityValidator": "src.validation.enhanced_security_validator",
    "IntegrationValidator": "src.validation.integration_validator",
    "PerformanceValidator": "src.validation.performance_validator",
    "QualityGatesValidator": "src.validation.quality_gates_validator",
    "SecurityValidator": "src.validation.security_validator",
    "V3DirectivesValidator": "src.validation.v3_directives_validator",
    "V3ValidationFrameworkCore": "src.validation.validation_framework_core",
    "ResponseType": "src.v3.v3_009_nlp_pipeline",
    "ConversationContext": "src.discord.response_types",
    "MemoryContextManager": "src.discord.memory_aware_responses",
    "ResponseGenerator": "src.discord.enhanced_bot_engine",
    "ConversationTracker": "src.discord.memory_aware_responses",
    "ContextInjector": "src.discord.memory_aware_responses",
    "TemplateEngine": "src.discord.template_messaging",
    "MessageRenderer": "src.discord.template_messaging",
    "TemplateRegistry": "src.discord.template_messaging",
    "EnhancedDiscordBot": "src.discord.enhanced_bot_engine",
    "MessageTemplateManager": "src.discord.enhanced_bot_engine",
    "CoordinationManager": "src.discord.enhanced_bot_engine",
    "CoordinationEvent": "src.discord.realtime_coordination_core",
    "EventQueue": "src.discord.realtime_coordination_core",
    "RealTimeCoordinationCore": "src.discord.realtime_coordination_core",
    "RealTimeCoordination": "src.discord.realtime_coordination",
    "SwarmManager": "src.discord.realtime_coordination_advanced",
    "EventProcessor": "src.discord.realtime_coordination_advanced",
    "RealTimeCoordinationAdvanced": "src.discord.realtime_coordination_advanced",
    "MemoryContext": "src.discord.response_types",
    "ResponseContext": "src.v3.v3_009_response_generation_core",
    "CloneTask": "src.team_beta.clone_automation",
    "CloneResult": "src.team_beta.repository_analyzer",
    "CloneAutomation": "src.team_beta.clone_automation",
    "DuplicationSeverity": "src.team_beta.consolidation_analyzer",
    "ConsolidationStatus": "src.team_beta.consolidation_analyzer",
    "DuplicationInstance": "src.team_beta.consolidation_analyzer",
    "ConsolidationReport": "src.team_beta.consolidation_analyzer",
    "SystemConsolidationAnalyzer": "src.team_beta.consolidation_analyzer",
    "RepositoryType": "src.team_beta.repository_analyzer",
    "CloneStatus": "src.team_beta.repository_analyzer",
    "RepositoryInfo": "src.team_beta.repository_analyzer",
    "RepositoryAnalyzer": "src.team_beta.repository_analyzer",
    "RepositoryStatus": "src.team_beta.repository_manager",
    "CloneOperation": "src.team_beta.repository_manager",
    "ErrorResolution": "src.team_beta.repository_manager",
    "RepositoryManagerInterface": "src.team_beta.repository_manager",
    "ThemeType": "src.team_beta.vscode_customization_core",
    "LayoutType": "src.team_beta.vscode_customization_core",
    "ThemeConfig": "src.team_beta.vscode_customization_core",
    "ExtensionConfig": "src.team_beta.vscode_customization_core",
    "LayoutConfig": "src.team_beta.vscode_customization_core",
    "VSCodeCustomizationInterface": "src.team_beta.vscode_customization",
    "VSCodeCustomizationCore": "src.team_beta.vscode_customization_core",
    "VSCodeComponent": "src.team_beta.vscode_integration",
    "VSCodeForkTask": "src.team_beta.vscode_integration",
    "IntegrationResult": "src.team_beta.vscode_integration",
    "VSCodeIntegrationInterface": "src.team_beta.vscode_integration",
    "VSCodeQualityResult": "src.team_beta.vscode_quality_gates",
    "VSCodeQualityGates": "src.team_beta.vscode_quality_gates",
    "ComprehensiveIntegrationAssessmentV2": "src.integration.comprehensive_integration_assessment_v2",
    "IntegrationAssessmentEngine": "src.integration.integration_assessment_engine",
    "AssessmentArea": "src.integration.comprehensive_integration_assessment_core",
    "Priority": "src.integration.comprehensive_integration_assessment_core",
    "AssessmentStatus": "src.integration.comprehensive_integration_assessment_core",
    "PlatformType": "src.integration.integration_models",
    "IntegrationAssessment": "src.integration.comprehensive_integration_assessment_core",
    "PlatformCompatibility": "src.integration.integration_models",
    "IntegrationReport": "src.integration.integration_models",
    "ComponentInfo": "src.integration.integration_models",
    "AssessmentConfiguration": "src.integration.comprehensive_integration_assessment_core",
    "AssessmentMetrics": "src.integration.comprehensive_integration_assessment_core",
    "AssessmentCore": "src.integration.comprehensive_integration_assessment_core",
    "AssessmentValidator": "src.integration.comprehensive_integration_assessment_utils",
    "AssessmentAnalyzer": "src.integration.comprehensive_integration_assessment_utils",
    "AssessmentReporter": "src.integration.comprehensive_integration_assessment_utils",
    "PlatformDetector": "src.integration.comprehensive_integration_assessment_utils",
    "ComprehensiveIntegrationAssessment": "src.integration.comprehensive_integration_assessment_main",
    "AssessmentManager": "src.integration.comprehensive_integration_assessment_main",
    "Agent6Agent8EnhancedQACoordination": "src.integration.qa_coordination.core_coordination",
    "QAEnhancementArea": "src.integration.qa_coordination.models",
    "QAStatus": "src.integration.qa_coordination.models",
    "EnhancementPriority": "src.integration.qa_coordination.models",
    "QAEnhancement": "src.integration.qa_coordination.models",
    "Phase3ConsolidationStatus": "src.integration.qa_coordination.models",
    "PerformanceValidationEnhancement": "src.integration.qa_coordination.performance_validation",
    "AdvancedValidationProtocols": "src.integration.qa_coordination.validation_protocols",
    "VectorDatabaseQAIntegration": "src.integration.qa_coordination.vector_database_integration",
    "CloudInfrastructureData": "src.v3.cloud_infrastructure_data",
    "InfrastructureConfig": "src.v3.cloud_infrastructure_models",
    "CloudInfrastructureNetworking": "src.v3.cloud_infrastructure_networking",
    "CloudInfrastructureSecurity": "src.v3.cloud_infrastructure_security",
    "MLPipelineOperations": "src.v3.ml_pipeline_operations",
    "TracingInfrastructure": "src.v3.tracing_infrastructure",
    "TracingObservability": "src.v3.tracing_observability",
    "CommandPriority": "src.v3.v3_009_command_understanding",
    "ParsedCommand": "src.v3.v3_009_command_understanding",
    "CommandParser": "src.v3.v3_009_command_understanding",
    "CommandExecutor": "src.v3.v3_009_command_understanding",
    "CommandUnderstandingSystem": "src.v3.v3_009_command_understanding",
    "IntentCategory": "src.v3.v3_009_intent_recognition",
    "IntentConfidence": "src.v3.v3_009_intent_recognition",
    "IntentResult": "src.v3.v3_009_intent_recognition",
    "IntentClassifier": "src.v3.v3_009_intent_recognition",
    "IntentRecognitionSystem": "src.v3.v3_009_intent_recognition",
    "IntentType": "src.v3.v3_009_nlp_pipeline",
    "Intent": "src.v3.v3_009_nlp_pipeline",
    "Response": "src.v3.v3_011_api_gateway_core",
    "NLPPipeline": "src.v3.v3_009_nlp_pipeline",
    "CommandProcessor": "src.v3.v3_009_nlp_pipeline",
    "NLPSystem": "src.v3.v3_009_nlp_pipeline",
    "LoadBalancingStrategy": "src.v3.v3_011_api_gateway_advanced",
    "BackendServer": "src.v3.v3_011_api_gateway_advanced",
    "RequestMetrics": "src.v3.v3_011_api_gateway_advanced",
    "LoadBalancer": "src.v3.v3_011_api_gateway_advanced",
    "APIMonitor": "src.v3.v3_011_api_gateway_advanced",
    "AuthMethod": "src.v3.v3_011_api_gateway_core",
    "RateLimitType": "src.v3.v3_011_api_gateway_core",
    "EndpointConfig": "src.v3.v3_011_api_gateway_core",
    "RequestContext": "src.v3.v3_011_api_gateway_core",
    "Authenticator": "src.v3.v3_011_api_gateway_core",
    "APIGateway": "src.v3.v3_011_api_gateway_core",
    "ComponentState": "src.v3.v3_012_ui_components",
    "UIComponent": "src.v3.v3_012_ui_components",
    "ComponentFactory": "src.v3.v3_012_ui_components",
    "ComponentRenderer": "src.v3.v3_012_ui_components",
    "ComponentValidator": "src.v3.v3_012_ui_components",
    "ScreenType": "src.v3.v3_012_ui_screens",
    "Screen": "src.v3.v3_012_ui_screens",
    "ScreenFactory": "src.v3.v3_012_ui_screens",
    "ScreenManager": "src.v3.v3_012_ui_screens",
    "NavigationController": "src.v3.v3_012_ui_screens",
    "WebDashboardAPI": "src.v3.web_dashboard_api",
    "WebDashboardComponents": "src.v3.web_dashboard_components",
    "DashboardComponent": "src.v3.web_dashboard_models",
    "DashboardConfig": "src.v3.web_dashboard_models",
    "ResponseTone": "src.v3.v3_009_response_generation_core",
    "ResponseFormat": "src.v3.v3_009_response_generation_core",
    "ResponseTemplate": "src.v3.v3_009_response_generation_core",
    "ResponseRequest": "src.v3.v3_009_response_generation_core",
    "GeneratedResponse": "src.v3.v3_009_response_generation_core",
    "ResponseGeneratorCore": "src.v3.v3_009_response_generation_core",
    "AdvancedResponseGenerator": "src.v3.v3_009_response_generation_main",
    "ResponseGenerationService": "src.v3.v3_009_response_generation_main",
    "ResponseFormatter": "src.v3.v3_009_response_generation_utils",
    "ResponseValidator": "src.v3.v3_009_response_generation_utils",
    "ResponseCache": "src.v3.v3_009_response_generation_utils",
    "Platform": "src.v3.v3_012_mobile_app_framework_core",
    "MobileComponent": "src.v3.v3_012_mobile_app_framework_core",
    "MobileAppFrameworkCore": "src.v3.v3_012_mobile_app_framework_core",
    "MobileAppFramework": "src.v3.v3_012_mobile_app_framework_main",
    "MobileAppBuilder": "src.v3.v3_012_mobile_app_framework_main",
    "ComponentTemplateManager": "src.v3.v3_012_mobile_app_framework_templates",
    "PromptConfig": "src.aletheia.aletheia_prompt_manager",
    "MemoryStatus": "src.memory.persistent_memory",
    "StorageType": "src.memory.persistent_memory",
    "MemoryConfig": "src.memory.persistent_memory",
    "SwarmWorkflowOrchestratorCore": "src.tools.swarm_workflow_orchestrator_core",
    "SwarmWorkflowUtils": "src.tools.swarm_workflow_orchestrator_utils",
    "SwarmWorkflowOrchestrator": "src.tools.swarm_workflow_orchestrator_main",
    "MemoryBudget": "src.observability.memory.policies",
    "MemoryPolicyLoader": "src.observability.memory.policies",
    "TracemallocIntegration": "src.observability.memory.policies",
    "MemoryPolicyEnforcer": "src.observability.memory.policies",
    "MemoryPolicyManager": "src.observability.memory.policies",
    "LeakDetectionResult": "src.observability.memory.detectors",
    "MemoryTrend": "src.observability.memory.detectors",
    "ObjectLeakDetector": "src.observability.memory.detectors",
    "AutoCleanupManager": "src.observability.memory.detectors",
    "ComprehensiveLeakDetector": "src.observability.memory.detectors",
    "MemoryMonitorCLI": "src.observability.memory.cli",
    "LedgerEntry": "src.observability.memory.ledger",
    "MemoryLedger": "src.observability.memory.ledger",
    "LedgerAnalyzer": "src.observability.memory.ledger",
    "PersistentLedgerManager": "src.observability.memory.ledger",
    "EnforcementMode": "src.observability.memory.watchdog",
    "WatchdogAlert": "src.observability.memory.watchdog",
    "MemoryWatchdog": "src.observability.memory.watchdog",
    "IntegratedWatchdog": "src.observability.memory.watchdog",
    "WatchdogManager": "src.observability.memory.watchdog",
    "MemoryReport": "src.observability.memory.report",
    "ReportFormatter": "src.observability.memory.report",
    "PerformanceReporter": "src.observability.memory.report",
    "FileResourceGuard": "src.observability.memory.integrations.messaging_checks",
    "MessageSizeValidator": "src.observability.memory.integrations.messaging_checks",
    "MessagingInstrumentation": "src.observability.memory.integrations.messaging_checks",
    "CoordinationRequestPurger": "src.observability.memory.integrations.messaging_checks",
    "MessagingMemoryIntegration": "src.observability.memory.integrations.messaging_checks",
    "MessagingServiceMemoryPatch": "src.observability.memory.integrations.messaging_service_patches"
  },
  "function_map": {
    "setup_environment": "discord_commander",
    "__init__": "src.observability.memory.integrations.messaging_service_patches",
    "get_status": "src.observability.memory.watchdog",
    "main": "src.observability.memory.cli",
    "get_system_health": "src.v3.web_dashboard_api",
    "get_quality_status": "enhanced_agent_onboarding",
    "get_agent_statuses": "enhanced_agent_onboarding",
    "get_current_initiatives": "enhanced_agent_onboarding",
    "get_critical_files": "enhanced_agent_onboarding",
    "build_onboarding_context": "enhanced_agent_onboarding",
    "create_context_summary": "enhanced_agent_onboarding",
    "save_context_package": "enhanced_agent_onboarding",
    "onboard_agent": "src.services.messaging.onboarding.onboarding_service",
    "_create_enhanced_onboarding_message": "enhanced_agent_onboarding",
    "_save_to_inbox": "enhanced_agent_onboarding",
    "run_full_validation": "src.validation.validation_framework_core",
    "check_inbox": "agent5_inbox_checker_core",
    "query_all_devlogs": "query_all_devlogs",
    "export_all_devlogs": "query_all_devlogs",
    "demonstrate_intelligent_messaging": "demonstrate_vector_integration",
    "demonstrate_intelligent_coordination": "demonstrate_vector_integration",
    "demonstrate_vector_database_queries": "demonstrate_vector_integration",
    "demonstrate_integration_benefits": "demonstrate_vector_integration",
    "get_bot_token": "discord_bot_config_core",
    "get_channel_id": "discord_bot_config_core",
    "get_agent_channel_id": "src.services.discord_devlog_service",
    "is_configured": "discord_bot_config_core",
    "get_config_status": "discord_bot_config_core",
    "print_config_status": "discord_bot_config_core",
    "test_connection": "tools.github_agent_client",
    "get_repositories": "tools.github_agent_client",
    "get_repository_info": "tools.github_agent_client",
    "get_repository_contents": "tools.github_agent_client",
    "get_file_content": "tools.github_agent_client",
    "search_repositories": "tools.github_agent_controller",
    "get_user_info": "tools.github_agent_controller",
    "get_rate_limit": "tools.github_agent_client",
    "get_tesla_price_yahoo": "get_real_tesla_price",
    "get_tesla_price_alpha_vantage": "get_real_tesla_price",
    "get_tesla_price_finnhub": "get_real_tesla_price",
    "get_real_tesla_price": "get_real_tesla_price",
    "setup_logging": "swarm_brain.cli",
    "print_banner": "discord_commander_modular",
    "check_requirements": "devlog_analytics_system_core",
    "ingest_devlog_files": "ingest_existing_documentation",
    "ingest_protocol_documentation": "ingest_existing_documentation",
    "ingest_compliance_documentation": "ingest_existing_documentation",
    "ingest_security_documentation": "ingest_existing_documentation",
    "ingest_agent_guidelines": "ingest_existing_documentation",
    "demonstrate_database_queries": "ingest_existing_documentation",
    "create_backup": "scripts.remove_duplicate_discord_files",
    "phase1_frontend_cleanup": "reduce_md_files",
    "phase2_agent_workspace_cleanup": "reduce_md_files",
    "phase3_archive_cleanup": "reduce_md_files",
    "phase4_test_cleanup": "reduce_md_files",
    "phase5_tool_cleanup": "reduce_md_files",
    "phase6_keep_essential": "reduce_md_files",
    "verify_results": "reduce_md_files",
    "send_real_message_to_agent": "real_agent_coordination_core",
    "coordinate_with_real_agents": "real_agent_coordination_core",
    "send_message_to_agent": "src.services.discord_bot.core.discord_agent_interface",
    "_get_v3_directives": "V3_DIRECTIVES_DEPLOYMENT_SYSTEM",
    "_get_quality_guidelines": "src.services.messaging.core.messaging_service",
    "deploy_to_agent": "V3_DIRECTIVES_DEPLOYMENT_SYSTEM",
    "deploy_to_team_alpha": "V3_DIRECTIVES_DEPLOYMENT_SYSTEM",
    "_create_deployment_summary": "V3_DIRECTIVES_DEPLOYMENT_SYSTEM",
    "validate_deployment": "scripts.deploy_modular_components",
    "create_security_guidelines": "V3_SECURITY_CLEANUP_FIXED",
    "run_security_audit": "V3_SECURITY_CLEANUP_FIXED",
    "example_project_scanner_integration": "swarm_brain_integration_example",
    "example_discord_integration": "swarm_brain_integration_example",
    "example_devlog_integration": "swarm_brain_integration_example",
    "example_performance_integration": "swarm_brain_integration_example",
    "example_decorator_usage": "swarm_brain_integration_example",
    "example_query_usage": "swarm_brain_integration_example",
    "example_cli_usage": "swarm_brain_integration_example",
    "fix_v2_compliance": "swarm_brain_integration_example",
    "debug_selectors": "simple_thea_debugger",
    "manual_login_helper": "thea_manual_login",
    "create_response_detector": "response_detector",
    "wait_for_response": "src.services.thea.thea_communication_core",
    "extract_response": "response_detector",
    "wait_until_complete": "response_detector",
    "extract_response_text": "src.services.thea.thea_communication_core",
    "_find_response_element": "response_detector",
    "_has_continue_button": "response_detector",
    "_click_continue_button": "response_detector",
    "_fallback_wait": "response_detector",
    "_fallback_extract": "response_detector",
    "check_file": "src.team_beta.vscode_quality_gates",
    "_analyze_file": "quality_gates_core",
    "_is_enum": "quality_gates_core",
    "_calculate_max_inheritance_depth": "quality_gates_core",
    "_get_inheritance_depth": "quality_gates_core",
    "_calculate_max_function_complexity": "quality_gates_core",
    "_calculate_cyclomatic_complexity": "quality_gates_core",
    "_calculate_max_parameter_count": "quality_gates_core",
    "_count_abstract_classes": "quality_gates_core",
    "_count_async_functions": "quality_gates_core",
    "_check_violations": "quality_gates_core",
    "_calculate_quality_score": "quality_gates_core",
    "_determine_quality_level": "quality_gates_core",
    "_create_error_metrics": "quality_gates_core",
    "save_results": "src.ml.validation_framework_core",
    "print_results": "quality_gates_core",
    "ingest_captain_log": "captain_docs_core",
    "_parse_log_sections": "captain_docs_core",
    "ingest_captain_handbook": "captain_docs_core",
    "ingest_captain_cheatsheet": "captain_docs_core",
    "search_captain_docs": "captain_docs_core",
    "get_captain_expertise": "captain_docs_core",
    "create_cycle_based_handbook": "captain_cycle_core",
    "create_cycle_based_cheatsheet": "captain_cycle_core",
    "ingest_updated_documentation": "captain_cycle_core",
    "ingest_agent_definitions": "complete_onboarding_core",
    "_create_agent_definitions": "complete_onboarding_core",
    "ingest_onboarding_managers": "complete_onboarding_core",
    "ingest_workflow_guides": "complete_onboarding_core",
    "ingest_agent_protocols": "complete_onboarding_core",
    "search_onboarding_docs": "complete_onboarding_core",
    "get_onboarding_expertise": "complete_onboarding_core",
    "setup_events": "discord_commander_fixed_backup",
    "setup_commands": "discord_commander_fixed_backup",
    "create_discord_bot": "src.services.discord_commander.bot_main",
    "setup_additional_slash_commands": "discord_commander_core",
    "get_bot_status": "src.services.discord_commander.bot_v2",
    "welcome_message": "discord_commander_setup_core",
    "get_user_input": "discord_commander_setup_core",
    "create_env_file": "discord_commander_setup_core",
    "validate_setup": "discord_commander_setup_core",
    "run_setup": "discord_commander_setup_core",
    "export_database_devlogs": "comprehensive_devlog_core",
    "export_file_devlogs": "comprehensive_devlog_core",
    "create_combined_export": "combined_export_core",
    "upload_to_external_service": "comprehensive_devlog_core",
    "run_comprehensive_export": "comprehensive_devlog_core",
    "identify_stale_records": "cleanup_stale_database_core",
    "clean_stale_records": "cleanup_stale_database_core",
    "update_current_task_assignments": "cleanup_stale_database_core",
    "validate_cleanup_results": "cleanup_stale_database_core",
    "run_comprehensive_cleanup": "cleanup_stale_database_core",
    "check_configuration": "discord_commander_config",
    "_process_team_chat_result": "agent5_inbox_checker_core",
    "demo_captain_queries": "captain_knowledge_demo_core",
    "demo_agent_coordination_patterns": "captain_knowledge_demo_core",
    "demo_captain_specific_knowledge": "captain_knowledge_demo_core",
    "demo_knowledge_integration": "captain_knowledge_demo_core",
    "demo_vector_database_stats": "captain_knowledge_demo_core",
    "_display_results": "cycle_based_operations_demonstrator_core",
    "_display_patterns": "captain_knowledge_demo_core",
    "check_v2_compliance": "tools.captain_autonomous_utility",
    "print_violations": "v2_compliance_checker_core",
    "get_total_violations": "v2_compliance_checker_core",
    "_get_database_devlogs": "combined_export_core",
    "_get_file_devlogs": "combined_export_core",
    "_update_summary": "combined_export_core",
    "_save_export": "combined_export_core",
    "_print_summary": "cycle_based_operations_demonstrator_core",
    "delete_devlog_files": "static_documentation_deleter_core",
    "delete_protocol_files": "static_documentation_deleter_core",
    "delete_compliance_files": "static_documentation_deleter_core",
    "delete_security_files": "static_documentation_deleter_core",
    "delete_agent_guideline_files": "static_documentation_deleter_core",
    "delete_coordination_files": "static_documentation_deleter_core",
    "create_query_replacement_guide": "static_documentation_deleter_core",
    "write_backup_file": "static_documentation_deleter_core",
    "run_deletion_process": "static_documentation_deleter_core",
    "demonstrate_devlog_queries": "database_query_demonstrator_core",
    "demonstrate_protocol_queries": "database_query_demonstrator_core",
    "demonstrate_compliance_queries": "database_query_demonstrator_core",
    "demonstrate_security_queries": "database_query_demonstrator_core",
    "demonstrate_agent_expertise": "database_query_demonstrator_core",
    "demonstrate_project_patterns": "database_query_demonstrator_core",
    "demonstrate_semantic_search": "database_query_demonstrator_core",
    "demonstrate_how_do_agents_do": "database_query_demonstrator_core",
    "run_all_demonstrations": "database_query_demonstrator_core",
    "demonstrate_current_mission_status": "mission_status_demonstrator_core",
    "demonstrate_cycle_based_operations": "cycle_based_operations_demonstrator_core",
    "query_agent_roles": "onboarding_knowledge_demo_core",
    "query_captain_onboarding": "onboarding_knowledge_demo_core",
    "query_workflow_system": "onboarding_knowledge_demo_core",
    "query_discord_commander": "onboarding_knowledge_demo_core",
    "query_agent_messaging": "onboarding_knowledge_demo_core",
    "run_demo": "src.services.multichat_session_demo",
    "show_database_devlogs": "devlog_inventory_core",
    "show_file_devlogs": "devlog_inventory_core",
    "show_exported_files": "devlog_inventory_core",
    "show_available_actions": "devlog_inventory_core",
    "run_inventory": "devlog_inventory_core",
    "print_header": "devlog_analytics_system_core",
    "run_service": "devlog_analytics_system_core",
    "check_node_modules": "devlog_analytics_system_core",
    "start_services": "devlog_analytics_system_core",
    "print_system_info": "devlog_analytics_system_core",
    "run": "src.services.discord_commander.web_controller_main",
    "_run": "devlog_analytics_system_core",
    "validate_environment": "discord_commander_launcher_core",
    "create_default_templates": "discord_commander_launcher_core",
    "start_controller": "discord_commander_launcher_core",
    "show_status": "tsla_forecast_app.trading_robot_interface",
    "stop": "src.observability.memory.watchdog",
    "run_controller": "discord_commander_launcher_core",
    "run_bot": "discord_commander_launcher_core",
    "show_help": "src.services.agent_devlog.cli",
    "create_v2_robot": "swarm_orchestrator_core",
    "execute_v2_robot": "swarm_orchestrator_core",
    "list_workflows": "src.tools.swarm_workflow_orchestrator_main",
    "show_detailed_help": "swarm_orchestrator_core",
    "run_command": "infrastructure.validate_ml_pipeline",
    "load_config": "agent_workspaces.Agent-3.caching_strategy_system",
    "save_config": "src.services.alerting.intelligent_alerting_system",
    "switch_mode": "agent_mode_switcher_core",
    "_load_config": "src.services.alerting.intelligent_alerting_system",
    "send_message_to_agent_core": "temp_message_sender_core",
    "create_handbook_content": "update_captain_cycle_core",
    "create_cheatsheet_content": "update_captain_cycle_core",
    "ingest_documentation": "update_captain_cycle_core",
    "create_coordination_response": "quality_coordination_response",
    "create_quality_coordination_templates": "quality_coordination_response",
    "establish_quality_validation_procedures": "quality_coordination_response",
    "create_quality_metrics_tracking": "quality_coordination_response",
    "check_agent_status": "watchdog",
    "_calculate_health_score": "src.services.vector_database.query_analytics",
    "check_all_agents": "watchdog",
    "check_system_health": "tools.duplication_audit",
    "_generate_alerts": "watchdog",
    "_create_default_config": "src.core.unified_coordinate_loader",
    "run_health_check": "watchdog",
    "get_agent_report": "watchdog",
    "save_health_report": "watchdog",
    "generate_json_report": "report",
    "generate_markdown_report": "report",
    "generate_html_report": "tools.static_analysis.analysis_dashboard",
    "generate_report": "src.team_beta.vscode_quality_gates",
    "save_report": "src.observability.memory.report",
    "create_health_report": "report",
    "create_agent_report": "report",
    "create_full_report": "report",
    "execute_all_migrations": "agent_workspaces.Agent-3.migration_executor",
    "_generate_execution_summary": "agent_workspaces.Agent-3.migration_executor",
    "validate_migration_results": "agent_workspaces.Agent-3.migration_executor",
    "design_scaling_strategies": "agent_workspaces.Agent-3.scalability_strategies",
    "implement_partitioning_strategies": "agent_workspaces.Agent-3.scalability_strategies",
    "create_database_connection": "agent_workspaces.Agent-3.migration_core",
    "close_database_connection": "agent_workspaces.Agent-3.migration_core",
    "validate_database_integrity": "agent_workspaces.Agent-3.migration_core",
    "execute_migration_script": "agent_workspaces.Agent-3.migration_core",
    "get_migration_results": "agent_workspaces.Agent-3.migration_core",
    "_define_migration_scripts": "agent_workspaces.Agent-3.migration_scripts",
    "get_migration_script": "agent_workspaces.Agent-3.migration_scripts",
    "get_all_migration_scripts": "agent_workspaces.Agent-3.migration_scripts",
    "create_performance_indexes_script": "agent_workspaces.Agent-3.migration_scripts",
    "create_useful_views_script": "agent_workspaces.Agent-3.migration_scripts",
    "get_migration_script_names": "agent_workspaces.Agent-3.migration_scripts",
    "run_comprehensive_optimization": "agent_workspaces.Agent-3.query_optimization_core",
    "_analyze_existing_queries": "agent_workspaces.Agent-3.query_optimization_core",
    "_analyze_index_usage": "agent_workspaces.database_specialist.query_optimization_system",
    "_identify_slow_queries": "agent_workspaces.Agent-3.query_optimization_core",
    "_generate_optimization_recommendations": "agent_workspaces.Agent-3.query_optimization_core",
    "_apply_optimizations": "src.services.aletheia_prompt_manager",
    "_validate_performance_improvements": "agent_workspaces.database_specialist.query_optimization_system",
    "_calculate_query_complexity": "agent_workspaces.database_specialist.query_optimization_system",
    "_simulate_index_usage": "agent_workspaces.database_specialist.query_optimization_system",
    "_suggest_query_rewrite": "agent_workspaces.database_specialist.query_optimization_system",
    "_generate_optimization_summary": "agent_workspaces.database_specialist.query_optimization_system",
    "analyze_current_capacity": "agent_workspaces.Agent-3.scalability_core",
    "identify_scalability_bottlenecks": "agent_workspaces.Agent-3.scalability_core",
    "_simulate_database_size": "agent_workspaces.Agent-3.scalability_core",
    "generate_scalability_summary": "agent_workspaces.Agent-3.scalability_core",
    "design_load_balancing_mechanisms": "agent_workspaces.Agent-3.scalability_validation",
    "create_performance_distribution_plan": "agent_workspaces.Agent-3.scalability_validation",
    "validate_scalability_improvements": "agent_workspaces.Agent-3.scalability_validation",
    "_identify_compliance_issues": "agent_workspaces.Agent-3.v2_compliance_improvement_plan",
    "_create_improvement_strategy": "agent_workspaces.Agent-3.v2_compliance_improvement_plan",
    "generate_improvement_report": "agent_workspaces.Agent-3.v2_compliance_improvement_plan",
    "_get_default_config": "src.observability.memory.policies",
    "_check_redis_availability": "agent_workspaces.Agent-3.caching.core.caching_system",
    "implement_comprehensive_caching": "agent_workspaces.Agent-3.caching.core.caching_system",
    "_initialize_cache_systems": "agent_workspaces.Agent-3.caching.core.caching_system",
    "_validate_caching_effectiveness": "agent_workspaces.Agent-3.caching.core.caching_system",
    "get_from_cache": "agent_workspaces.Agent-3.caching.core.caching_system",
    "set_in_cache": "agent_workspaces.Agent-3.caching.core.caching_system",
    "_evict_entries": "agent_workspaces.Agent-3.caching.core.caching_system",
    "implement_performance_monitoring": "agent_workspaces.Agent-3.caching.monitoring.cache_monitor",
    "_setup_metrics_collection": "agent_workspaces.Agent-3.caching.monitoring.cache_monitor",
    "_setup_performance_tracking": "agent_workspaces.Agent-3.caching.monitoring.cache_monitor",
    "_setup_health_checks": "agent_workspaces.Agent-3.caching.monitoring.cache_monitor",
    "_setup_alerting": "agent_workspaces.Agent-3.caching.monitoring.cache_monitor",
    "_setup_reporting": "agent_workspaces.Agent-3.caching.monitoring.cache_monitor",
    "get_cache_stats": "src.core.knowledge_base_retriever",
    "check_cache_health": "agent_workspaces.Agent-3.caching.monitoring.cache_monitor",
    "optimize_cache": "agent_workspaces.Agent-3.caching.monitoring.cache_monitor",
    "implement_cache_patterns": "agent_workspaces.Agent-3.caching.strategies.cache_strategies",
    "_implement_write_through": "agent_workspaces.Agent-3.caching.strategies.cache_strategies",
    "_implement_write_back": "agent_workspaces.Agent-3.caching.strategies.cache_strategies",
    "_implement_cache_aside": "agent_workspaces.Agent-3.caching.strategies.cache_strategies",
    "_implement_read_through": "agent_workspaces.Agent-3.caching.strategies.cache_strategies",
    "_implement_refresh_ahead": "agent_workspaces.Agent-3.caching.strategies.cache_strategies",
    "setup_cache_invalidation": "agent_workspaces.Agent-3.caching.strategies.cache_strategies",
    "_setup_time_based_invalidation": "agent_workspaces.Agent-3.caching.strategies.cache_strategies",
    "_setup_event_based_invalidation": "agent_workspaces.Agent-3.caching.strategies.cache_strategies",
    "_setup_dependency_based_invalidation": "agent_workspaces.Agent-3.caching.strategies.cache_strategies",
    "_setup_manual_invalidation": "agent_workspaces.Agent-3.caching.strategies.cache_strategies",
    "create_cache_management_tools": "agent_workspaces.Agent-3.caching.tools.cache_tools",
    "_create_cache_analyzer": "agent_workspaces.Agent-3.caching.tools.cache_tools",
    "_create_cache_optimizer": "agent_workspaces.Agent-3.caching.tools.cache_tools",
    "_create_cache_backup": "agent_workspaces.Agent-3.caching.tools.cache_tools",
    "_create_cache_restore": "agent_workspaces.Agent-3.caching.tools.cache_tools",
    "_create_cache_cleaner": "agent_workspaces.Agent-3.caching.tools.cache_tools",
    "backup_cache": "agent_workspaces.Agent-3.caching.tools.cache_tools",
    "restore_cache": "agent_workspaces.Agent-3.caching.tools.cache_tools",
    "_validate_backup_data": "agent_workspaces.Agent-3.caching.tools.cache_tools",
    "clear_cache": "src.aletheia.aletheia_prompt_manager",
    "_validate_improvements": "agent_workspaces.Agent-3.query_optimization_core",
    "list_tasks": "tools.agent_task_manager",
    "create_task": "src.architecture.application_layer",
    "assign_task": "src.domain.entities.agent",
    "complete_task": "src.domain.entities.agent",
    "get_task_status": "src.services.dashboard.swarm_coordination_dashboard",
    "quick_fix_imports": "tools.agent_workflow_cli",
    "quick_test_and_report": "tools.agent_workflow_cli",
    "quick_create_component": "tools.agent_workflow_cli",
    "quick_deploy_feature": "tools.agent_workflow_cli",
    "create_parser": "src.services.agent_devlog.cli",
    "handle_detect_bottlenecks": "tools.captain_autonomous_interface",
    "handle_detect_flaws": "tools.captain_autonomous_interface",
    "handle_check_stopping": "tools.captain_autonomous_interface",
    "handle_generate_priorities": "tools.captain_autonomous_interface",
    "handle_agent_guidance": "tools.captain_autonomous_interface",
    "handle_analyze": "tools.captain_autonomous_interface",
    "setup_argument_parser": "tools.directive_handlers",
    "get_directive_status": "tools.directive_services",
    "get_initiative_status": "tools.directive_services",
    "create_directive": "tools.directive_services",
    "create_initiative": "tools.directive_services",
    "update_directive_progress": "tools.directive_services",
    "update_initiative_progress": "tools.directive_services",
    "assign_agents_to_directive": "tools.directive_services",
    "assign_agents_to_initiative": "tools.directive_services",
    "forward_message": "tools.simple_workflow_automation",
    "request_status_check": "tools.simple_workflow_automation",
    "coordinate_project": "tools.simple_workflow_automation",
    "get_workflow_summary": "tools.simple_workflow_automation",
    "_create_task_notification": "tools.simple_workflow_automation",
    "_create_project_notification": "tools.simple_workflow_automation",
    "_log_workflow": "tools.simple_workflow_automation",
    "_count_workflow_types": "tools.simple_workflow_automation",
    "investigate_performance": "tools.performance_detective_cli",
    "analyze_bottlenecks": "tools.performance_detective_cli",
    "optimize_performance": "tools.performance_detective_cli",
    "show_tools": "tools.devlog_storyteller_cli",
    "conduct_security_audit": "tools.security_inspector_cli",
    "scan_vulnerabilities": "tools.security_inspector_cli",
    "check_compliance": "src.services.vector_database.quality_assurance_framework",
    "generate_documentation": "tools.documentation_architect_cli",
    "build_knowledge_graph": "tools.documentation_architect_cli",
    "synchronize_docs": "tools.documentation_architect_cli",
    "explore_integrations": "tools.integration_explorer_cli",
    "map_dependencies": "tools.integration_explorer_cli",
    "discover_services": "tools.integration_explorer_cli",
    "analyze_market": "tsla_forecast_app.trading_robot_strategies",
    "generate_signals": "tsla_forecast_app.trading_robot_core",
    "assess_volatility": "tools.financial_analyst_cli",
    "develop_strategy": "tools.trading_strategist_cli",
    "backtest_strategy": "tools.trading_strategist_cli",
    "optimize_strategy": "tools.trading_strategist_cli",
    "assess_portfolio_risk": "tools.risk_manager_cli",
    "stress_test": "tools.risk_manager_cli",
    "monitor_limits": "tools.risk_manager_cli",
    "research_market": "tools.market_researcher_cli",
    "analyze_sentiment": "tools.trading_cli.news_analyzer",
    "detect_regime": "tools.market_researcher_cli",
    "optimize_portfolio": "tools.portfolio_optimizer_cli",
    "rebalance_portfolio": "tools.portfolio_optimizer_cli",
    "analyze_performance": "src.integration.comprehensive_integration_assessment_utils",
    "audit_compliance": "tools.compliance_auditor_cli",
    "monitor_transactions": "tools.compliance_auditor_cli",
    "check_regulatory": "tools.compliance_auditor_cli",
    "create_folder_structure": "tools.agent_swarm_scaffolder",
    "create_files": "tools.agent_swarm_scaffolder",
    "init_git_repo": "tools.agent_swarm_scaffolder",
    "search_similar_messages": "tools.agent_vector_search",
    "search_agent_experience": "tools.agent_vector_search",
    "get_agent_knowledge_summary": "tools.agent_vector_search",
    "get_swarm_knowledge_summary": "tools.agent_vector_search",
    "print_search_results": "tools.unified_database_search",
    "print_experience_results": "tools.agent_vector_search",
    "fix_missing_imports": "tools.workflow.automation",
    "_create_init_file": "tools.agent_workflow_automation",
    "test_imports": "tools.quick_fix",
    "run_tests": "tools.agent_workflow_automation",
    "send_status_update": "tools.quick_fix",
    "create_devlog": "src.tools.swarm_workflow_orchestrator_utils",
    "update_working_tasks": "tools.agent_workflow_automation",
    "create_project_structure": "tools.agent_workflow_automation",
    "run_workflow": "tools.agent_workflow_manager",
    "_workflow_fix_imports": "tools.agent_workflow_automation",
    "_workflow_test_and_report": "tools.agent_workflow_automation",
    "_workflow_create_component": "tools.agent_workflow_automation",
    "_workflow_deploy_feature": "tools.agent_workflow_automation",
    "to_dict": "src.observability.memory.ledger",
    "from_dict": "src.domain.entities.task_core",
    "_load_workflow": "tools.agent_workflow_manager",
    "_initialize_steps": "tools.agent_workflow_manager",
    "_save_workflow": "tools.agent_workflow_manager",
    "get_ready_steps": "tools.agent_workflow_manager",
    "execute_step": "tools.agent_workflow_manager",
    "check_timeouts": "tools.agent_workflow_manager",
    "mark_step_completed": "tools.agent_workflow_manager",
    "mark_step_failed": "tools.agent_workflow_manager",
    "create_sample_workflow": "tools.agent_workflow_manager",
    "start_server": "tools.api_gateway_cli",
    "test_endpoint": "tools.api_gateway_cli",
    "generate_docs": "tools.api_gateway_cli",
    "show_health": "tools.api_gateway_cli",
    "configure_rate_limiting": "tools.api_gateway_cli",
    "configure_authentication": "tools.api_gateway_cli",
    "_register_default_endpoints": "tools.api_gateway_cli",
    "health_handler": "tools.api_gateway_cli",
    "status_handler": "tools.api_gateway_cli",
    "docs_handler": "tools.api_gateway_cli",
    "detect_bottlenecks": "tools.captain_autonomous_manager",
    "detect_flaws": "tools.captain_autonomous_manager",
    "check_stopping_conditions": "tools.captain_autonomous_manager",
    "generate_autonomous_priorities": "tools.captain_autonomous_manager",
    "provide_agent_guidance": "tools.captain_autonomous_manager",
    "_check_resource_bottlenecks": "tools.captain_autonomous_core",
    "_check_dependency_bottlenecks": "tools.captain_autonomous_core",
    "_check_quality_bottlenecks": "tools.captain_autonomous_core",
    "_check_coordination_bottlenecks": "tools.captain_autonomous_core",
    "_check_critical_flaws": "tools.captain_autonomous_core",
    "_check_quality_flaws": "tools.captain_autonomous_core",
    "_check_performance_flaws": "tools.captain_autonomous_core",
    "_check_all_directives_complete": "tools.captain_autonomous_core",
    "_check_quality_threshold_breach": "tools.captain_autonomous_core",
    "_check_resource_exhaustion": "tools.captain_autonomous_core",
    "_check_critical_flaw_detected": "tools.captain_autonomous_core",
    "_check_agent_inactivity": "tools.captain_autonomous_core",
    "_check_system_failure": "tools.captain_autonomous_core",
    "_check_system_health": "tools.captain_autonomous_core",
    "_check_agent_utilization": "tools.captain_autonomous_core",
    "_get_agent_status": "tools.captain_autonomous_core",
    "_find_next_task_for_agent": "tools.captain_autonomous_core",
    "_get_agent_bottlenecks": "tools.captain_autonomous_core",
    "_get_agent_quality_issues": "tools.captain_autonomous_core",
    "run_quality_gates": "tools.captain_autonomous_utility",
    "check_system_resources": "tools.captain_autonomous_utility",
    "load_bottlenecks": "tools.captain_autonomous_storage",
    "load_flaws": "tools.captain_autonomous_storage",
    "load_stopping_conditions": "tools.captain_autonomous_storage",
    "save_bottlenecks": "tools.captain_autonomous_storage",
    "save_flaws": "tools.captain_autonomous_storage",
    "save_stopping_conditions": "tools.captain_autonomous_storage",
    "validate_json_file": "tools.captain_autonomous_utility",
    "backup_file": "tools.captain_autonomous_utility",
    "get_file_size_mb": "tools.captain_autonomous_utility",
    "check_file_age_hours": "tools.captain_autonomous_utility",
    "format_timestamp": "src.discord.template_messaging",
    "calculate_time_delta": "tools.captain_autonomous_utility",
    "sanitize_filename": "tools.captain_autonomous_utility",
    "create_directory_if_not_exists": "tools.captain_autonomous_utility",
    "get_project_file_count": "tools.captain_autonomous_utility",
    "check_resource_bottlenecks": "tools.captain_autonomous_utility",
    "check_dependency_bottlenecks": "tools.captain_autonomous_utility",
    "check_quality_bottlenecks": "tools.captain_autonomous_utility",
    "check_coordination_bottlenecks": "tools.captain_autonomous_utility",
    "check_critical_flaws": "tools.captain_autonomous_utility",
    "check_quality_flaws": "tools.captain_autonomous_utility",
    "check_performance_flaws": "tools.captain_autonomous_utility",
    "check_all_directives_complete": "tools.captain_autonomous_utility",
    "check_quality_threshold_breach": "tools.captain_autonomous_utility",
    "check_resource_exhaustion": "tools.captain_autonomous_utility",
    "check_critical_flaw_detected": "tools.captain_autonomous_utility",
    "check_agent_inactivity": "src.fsm.activity_monitor",
    "check_system_failure": "tools.captain_autonomous_utility",
    "check_agent_utilization": "tools.captain_autonomous_utility",
    "get_agent_status": "src.architecture.application_layer",
    "find_next_task_for_agent": "tools.captain_autonomous_utility",
    "get_agent_bottlenecks": "tools.captain_autonomous_utility",
    "get_agent_quality_issues": "tools.captain_autonomous_utility",
    "show_agent_status": "tools.captain_cli",
    "show_inactive_agents": "tools.captain_cli",
    "send_high_priority_message": "tools.captain_cli",
    "_load_directives": "tools.directive_services",
    "_load_initiatives": "tools.directive_services",
    "_save_directives": "tools.directive_services",
    "_save_initiatives": "tools.directive_services",
    "conduct_dig": "tools.code_archaeologist_cli",
    "analyze_evolution": "tools.code_archaeologist_cli",
    "discover_patterns": "tools.code_archaeologist_cli",
    "map_technical_debt": "tools.code_archaeologist_cli",
    "detect_dead_code": "tools.code_archaeologist_cli",
    "load_existing_hashes": "tools.content_hash_system",
    "save_hashes": "tools.content_hash_system",
    "generate_content_hash": "tools.content_hash_system",
    "check_duplicate": "tools.content_hash_system",
    "add_content_hash": "tools.content_hash_system",
    "hash_all_existing_content": "tools.content_hash_system",
    "get_duplicate_report": "tools.content_hash_system",
    "print_hash_report": "tools.content_hash_system",
    "_load_coordinates": "src.services.messaging.core.coordinate_loader",
    "_get_default_structure": "tools.coordinate_mapper",
    "_save_coordinates": "tools.coordinate_mapper",
    "_validate_coordinates": "tools.coordinate_mapper",
    "_get_mouse_position": "tools.coordinate_mapper",
    "show_current_coordinates": "tools.coordinate_mapper",
    "map_all_agents": "tools.coordinate_mapper",
    "map_single_agent": "tools.coordinate_mapper",
    "test_coordinates": "tools.coordinate_mapper",
    "validate_all_coordinates": "tools.coordinate_mapper",
    "interactive_menu": "tools.coordinate_mapper",
    "analyze_duplicates": "tools.database_cleanup",
    "remove_duplicates": "tools.database_cleanup",
    "vectorize_all_documents": "tools.database_cleanup",
    "sync_databases": "tools.database_cleanup",
    "implement_content_hashing": "tools.database_cleanup",
    "generate_cleanup_report": "tools.database_cleanup",
    "run_full_cleanup": "tools.database_cleanup",
    "get_logs_by_date_agent": "tools.devlog_consolidator",
    "read_log_content": "tools.devlog_consolidator",
    "categorize_logs": "tools.devlog_consolidator",
    "consolidate_logs": "tools.devlog_consolidator",
    "consolidate_and_cleanup": "tools.devlog_consolidator",
    "create_story": "tools.devlog_storyteller_cli",
    "auto_process": "tools.devlog_storyteller_cli",
    "validate_chapters": "tools.devlog_storyteller_cli",
    "update_characters": "tools.devlog_storyteller_cli",
    "update_world": "tools.devlog_storyteller_cli",
    "analyze_v3_duplication": "tools.duplication_audit",
    "_analyze_single_file": "tools.duplication_audit",
    "_find_v2_equivalent": "tools.duplication_audit",
    "_has_unique_value": "tools.duplication_audit",
    "_check_integration_issues": "tools.duplication_audit",
    "_load_systems": "tools.duplication_audit",
    "_check_single_system": "tools.duplication_audit",
    "_find_v3_duplicates": "tools.duplication_audit",
    "_load_registry": "tools.feature_registry_check",
    "_create_default_registry": "src.core.project_registry",
    "save_registry": "src.core.project_registry",
    "check_feature_duplication": "tools.feature_registry_check",
    "register_new_feature": "tools.feature_registry_check",
    "create_repository": "src.services.github_protocol_service",
    "create_issue": "src.services.github_protocol_service",
    "create_pull_request": "src.services.github_protocol_service",
    "create_file": "src.services.github_protocol_service",
    "create_branch": "src.services.github_protocol_service",
    "grant_permission": "src.services.github_protocol_models",
    "list_operations": "tools.github_agent_cli",
    "show_audit_logs": "tools.github_agent_cli",
    "export_data": "src.services.dashboard.swarm_coordination_dashboard",
    "create_github_controller": "tools.github_agent_controller",
    "_create_session": "src.services.messaging.memory_leak_fixes",
    "_validate_token": "tools.github_agent_controller",
    "_make_request": "tools.github_agent_controller",
    "_create_repository_from_data": "tools.github_agent_controller",
    "get_repository": "src.architecture.repository_layer",
    "list_repositories": "tools.github_agent_controller",
    "_create_issue_from_data": "tools.github_agent_controller",
    "get_issue": "tools.github_agent_controller",
    "list_issues": "tools.github_agent_controller",
    "merge_pull_request": "tools.github_agent_controller",
    "_file_operation": "tools.github_agent_controller",
    "update_file": "tools.github_agent_controller",
    "delete_file": "tools.github_agent_controller",
    "delete_branch": "tools.github_agent_controller",
    "create_sample_alert": "tools.intelligent_alerting_cli",
    "display_alerts": "tools.intelligent_alerting_cli",
    "display_analytics": "tools.intelligent_alerting_cli",
    "print_quick_solutions": "tools.knowledge_base_search",
    "_load_knowledge_base": "tools.knowledge_base_search",
    "_parse_sections": "tools.knowledge_base_search",
    "search": "src.core.knowledge_base_retriever",
    "_matches_query": "tools.knowledge_base_search",
    "_calculate_relevance": "tools.knowledge_base_search",
    "get_categories": "tools.knowledge_base_search",
    "get_quick_solutions": "tools.knowledge_base_search",
    "detect_overengineering": "tools.overengineering_detector",
    "_analyze_ast": "tools.memory_leak_detector",
    "_check_red_flags": "tools.overengineering_detector",
    "_check_complexity": "tools.overengineering_detector",
    "get_simplification_recommendations": "tools.overengineering_detector",
    "create_sample_metrics": "tools.predictive_analytics_cli",
    "analyze_current_performance": "tools.predictive_analytics_cli",
    "display_analysis": "tools.trading_cli.market_analyzer",
    "simulate_time_series": "tools.predictive_analytics_cli",
    "check_protocol_reference": "tools.protocol_reference_enforcer",
    "generate_compliance_template": "tools.protocol_reference_enforcer",
    "validate_messaging_usage": "tools.protocol_reference_enforcer",
    "validate_timeline_usage": "tools.protocol_reference_enforcer",
    "generate_violation_report": "tools.protocol_reference_enforcer",
    "save_compliance_report": "tools.protocol_reference_enforcer",
    "fix_imports": "tools.quick_fix",
    "create_init_file": "tools.quick_fix",
    "scan_project": "tools.projectscanner.enhanced_scanner.core",
    "_analyze_project_structure": "tools.projectscanner.core",
    "_analyze_python_files": "tools.projectscanner.core",
    "_analyze_dependencies": "tools.projectscanner.core",
    "vectorize_swarm_brain_docs": "tools.simple_vector_cleanup",
    "save_updated_databases": "tools.simple_vector_cleanup",
    "run_cleanup": "scripts.remove_duplicate_discord_files",
    "search_message_history": "tools.simple_vector_search",
    "search_devlogs": "src.services.agent_devlog.storage",
    "get_agent_status_summary": "src.fsm.fsm_messaging_integration",
    "start_web_interface": "tools.swarm_dashboard_cli",
    "show_agents": "tools.swarm_dashboard_cli",
    "show_tasks": "tools.swarm_dashboard_cli",
    "show_alerts": "tools.swarm_dashboard_cli",
    "add_alert": "src.ml.ml_monitoring_storage",
    "update_agent": "tools.swarm_dashboard_cli",
    "send_collaboration_message": "tools.team_collaboration_tool",
    "broadcast_collaboration_request": "tools.team_collaboration_tool",
    "create_discussion_topic": "tools.team_collaboration_tool",
    "suggest_tool_priorities": "tools.team_collaboration_tool",
    "create_tool_roadmap": "tools.team_collaboration_tool",
    "generate_collaboration_summary": "tools.team_collaboration_tool",
    "get_all_agents_status": "tools.team_dashboard",
    "get_task_queue_summary": "tools.team_dashboard",
    "get_communication_logs": "tools.team_dashboard",
    "_extract_agent_from_filename": "tools.team_dashboard",
    "generate_dashboard_data": "tools.team_dashboard",
    "display_dashboard": "scripts.lightweight_deployment_dashboard",
    "save_dashboard_snapshot": "tools.team_dashboard",
    "_load_vector_db": "tools.unified_database_search",
    "_load_devlog_db": "tools.unified_database_search",
    "_load_project_analysis": "tools.unified_database_search",
    "search_all": "tools.unified_database_search",
    "search_by_agent": "src.services.vector_database.query_analytics",
    "get_database_stats": "tools.unified_database_search",
    "print_database_stats": "tools.unified_database_search",
    "analyze_violations": "tools.v2_refactoring_assistant",
    "_analyze_ast_metrics": "tools.v2_refactoring_assistant",
    "_is_enum_class": "src.team_beta.vscode_quality_gates",
    "_calculate_complexity": "src.team_beta.vscode_quality_gates",
    "_calculate_severity": "src.observability.memory.detectors",
    "_generate_suggestions": "src.core.pr_review_core",
    "generate_refactoring_plan": "tools.v2_refactoring_assistant",
    "_calculate_severity_breakdown": "tools.v2_refactoring_assistant",
    "_create_refactoring_phases": "tools.v2_refactoring_assistant",
    "_create_agent_assignments": "tools.v2_refactoring_assistant",
    "_create_timeline": "tools.v2_refactoring_assistant",
    "generate_refactoring_report": "tools.v2_refactoring_assistant",
    "print_summary": "tools.coverage.run_coverage_analysis",
    "find_coordinates": "tools.find_coordinates",
    "update_agent_coordinates": "src.core.unified_coordinate_loader",
    "__post_init__": "src.v3.v3_009_response_generation_core",
    "_initialize_resource_pool": "tools.ml_training_infrastructure_tool_core",
    "get_available_resources": "tools.ml_training_infrastructure_tool_core",
    "get_resource_utilization": "analytics.predictive_core",
    "get_job_statistics": "tools.ml_training_infrastructure_tool_core",
    "create_training_environment": "tools.ml_training_infrastructure_tool_main",
    "submit_training_job": "tools.ml_training_infrastructure_tool_main",
    "start_training_job": "tools.ml_training_infrastructure_tool_main",
    "monitor_training_job": "tools.ml_training_infrastructure_tool_main",
    "cancel_training_job": "tools.ml_training_infrastructure_tool_main",
    "get_resource_status": "tools.ml_training_infrastructure_tool_utils",
    "get_training_summary": "tools.ml_training_infrastructure_tool_main",
    "process_job_queue": "tools.ml_training_infrastructure_tool_main",
    "simulate_environment_creation": "tools.ml_training_infrastructure_tool_utils",
    "simulate_provisioning": "tools.ml_training_infrastructure_tool_utils",
    "simulate_training_progress": "tools.ml_training_infrastructure_tool_utils",
    "allocate_resources": "tools.ml_training_infrastructure_tool_utils",
    "release_resources": "tools.ml_training_infrastructure_tool_utils",
    "add_job_to_queue": "tools.ml_training_infrastructure_tool_utils",
    "remove_job_from_queue": "tools.ml_training_infrastructure_tool_utils",
    "get_queue_length": "tools.ml_training_infrastructure_tool_utils",
    "get_next_job": "tools.ml_training_infrastructure_tool_utils",
    "save_environment": "tools.ml_training_infrastructure_tool_utils",
    "load_environment": "tools.ml_training_infrastructure_tool_utils",
    "save_job": "tools.ml_training_infrastructure_tool_utils",
    "load_job": "tools.ml_training_infrastructure_tool_utils",
    "save_job_status": "tools.ml_training_infrastructure_tool_utils",
    "load_job_status": "tools.ml_training_infrastructure_tool_utils",
    "check_branch_exists": "tools.protocol_compliance_checker_utils",
    "get_current_branch": "tools.protocol_compliance_checker_utils",
    "is_valid_branch_name": "tools.protocol_compliance_checker_utils",
    "has_uncommitted_changes": "tools.protocol_compliance_checker_utils",
    "is_python_file": "tools.protocol_compliance_checker_utils",
    "check_file_size_compliance": "tools.protocol_compliance_checker_utils",
    "check_class_count_compliance": "tools.protocol_compliance_checker_utils",
    "check_function_count_compliance": "tools.protocol_compliance_checker_utils",
    "generate_recommendations": "tools.operational_dashboard_tool_utils",
    "print_compliance_report": "tools.protocol_compliance_checker_utils",
    "format_compliance_report": "tools.protocol_compliance_checker_utils",
    "check_git_workflow_compliance": "tools.protocol_compliance_checker_main",
    "check_code_quality_compliance": "tools.protocol_compliance_checker_main",
    "check_documentation_compliance": "tools.protocol_compliance_checker_main",
    "check_agent_coordination_compliance": "tools.protocol_compliance_checker_main",
    "check_testing_compliance": "tools.protocol_compliance_checker_main",
    "generate_compliance_report": "tools.protocol_compliance_checker_main",
    "run_full_compliance_check": "tools.protocol_compliance_checker_main",
    "calculate_quality_score": "tools.operational_dashboard_tool_utils",
    "extract_metric": "tools.operational_dashboard_tool_utils",
    "count_completed_tasks": "tools.operational_dashboard_tool_utils",
    "count_total_tasks": "tools.operational_dashboard_tool_utils",
    "load_v3_coordination_data": "tools.operational_dashboard_tool_utils",
    "load_quality_gate_data": "tools.operational_dashboard_tool_utils",
    "load_agent_performance_data": "tools.operational_dashboard_tool_utils",
    "load_project_progress_data": "tools.operational_dashboard_tool_utils",
    "generate_operational_report": "tools.operational_dashboard_tool_main",
    "create_operational_alert": "tools.operational_dashboard_tool_main",
    "generate_dashboard_html": "src.services.dashboard.dashboard_web_html",
    "analyze_file": "tools.projectscanner.enhanced_analyzer.core",
    "analyze_project": "tools.analysis.violations",
    "_count_by_severity": "tools.memory_leak_detector",
    "_count_by_type": "tools.memory_leak_detector",
    "_get_top_files_with_issues": "tools.memory_leak_detector",
    "_generate_recommendations": "src.observability.memory.report",
    "visit_ClassDef": "tools.memory_leak_detector",
    "visit_FunctionDef": "tools.memory_leak_detector",
    "visit_Assign": "tools.memory_leak_detector",
    "fix_file": "tools.memory_optimizer",
    "fix_high_priority_files": "tools.memory_optimizer",
    "_count_fixes_by_type": "tools.memory_optimizer",
    "create_memory_monitoring_tool": "tools.memory_optimizer",
    "generate_optimization_report": "tools.memory_optimizer",
    "take_snapshot": "src.observability.memory.policies",
    "check_for_leaks": "tools.memory_monitor",
    "force_cleanup": "src.services.messaging.memory_leak_fixes",
    "start_monitoring": "src.observability.memory.watchdog",
    "stop_monitoring": "src.observability.memory.watchdog",
    "get_current_stats": "tools.memory_manager",
    "record_stats": "tools.memory_manager",
    "_check_memory_alerts": "tools.memory_manager",
    "_monitoring_loop": "src.services.thea.thea_monitoring_system",
    "get_memory_summary": "tools.memory_manager",
    "export_memory_report": "tools.memory_manager",
    "fix_performance_monitor": "tools.critical_memory_fixer",
    "fix_memory_aware_responses": "tools.critical_memory_fixer",
    "fix_integration_assessment_engine": "tools.critical_memory_fixer",
    "fix_vector_database_integration": "tools.critical_memory_fixer",
    "fix_thea_conversation_manager": "tools.critical_memory_fixer",
    "apply_all_critical_fixes": "tools.critical_memory_fixer",
    "generate_fix_report": "tools.critical_memory_fixer",
    "run_memory_gate": "tools.ci_memory_gate",
    "format": "tools.generate_memory_leak_report",
    "_collect_report_data": "tools.generate_memory_leak_report",
    "scan_file": "tools.import_mapper",
    "_get_module_path": "tools.import_mapper",
    "find_import": "tools.import_mapper",
    "check_file_imports": "tools.import_mapper",
    "save_import_map": "tools.import_mapper",
    "generate_reference_guide": "tools.import_mapper",
    "_init_tree_sitter_language": "tools.projectscanner.analyzers",
    "analyze_python_file": "tools.analysis.core",
    "analyze_rust_file": "tools.projectscanner.analyzers",
    "analyze_javascript_file": "tools.projectscanner.analyzers",
    "analyze_other_file": "tools.projectscanner.analyzers",
    "_generate_report_data": "tools.projectscanner.reporters",
    "export_test_analysis": "tools.projectscanner.reporters",
    "_generate_test_analysis_data": "tools.projectscanner.reporters",
    "generate_modular_reports": "tools.projectscanner.core",
    "_generate_agent_analysis": "tools.projectscanner.reporters",
    "_generate_module_analysis": "tools.projectscanner.reporters",
    "_generate_file_type_analysis": "tools.projectscanner.reporters",
    "_generate_complexity_analysis": "tools.projectscanner.reporters",
    "_generate_dependency_analysis": "tools.projectscanner.reporters",
    "_generate_architecture_overview": "tools.projectscanner.reporters",
    "_save_report": "tools.projectscanner.reporters",
    "_process_work_item": "tools.projectscanner.workers",
    "initialize": "src.observability.memory.policies",
    "add_work": "tools.projectscanner.workers",
    "get_results": "tools.projectscanner.workers",
    "wait_for_completion": "tools.projectscanner.workers",
    "cleanup": "src.tracing.distributed_tracing_system",
    "process_file": "tools.projectscanner.workers",
    "get_stats": "src.services.discord_commander.optimization",
    "report_generator": "tools.projectscanner.core",
    "modular_reporter": "tools.projectscanner.core",
    "_analyze_test_coverage": "tools.projectscanner.core",
    "generate_init_files": "tools.projectscanner.enhanced_scanner.report_generation",
    "categorize_agents": "tools.projectscanner.enhanced_scanner.agent_categorization",
    "export_chatgpt_context": "tools.projectscanner.enhanced_analyzer.core",
    "run_full_analysis": "tools.projectscanner.enhanced_analyzer_v2",
    "invalidate_file": "tools.projectscanner.enhanced_scanner.caching_system",
    "run_quick_analysis": "tools.trading_cli.master_cli",
    "analyze_single_file": "tools.projectscanner.enhanced_analyzer_v2",
    "discover_files": "tools.projectscanner.enhanced_scanner.core_analyzer",
    "_should_include_file": "tools.projectscanner.enhanced_scanner.file_discovery",
    "_should_exclude_directory": "tools.projectscanner.enhanced_scanner.file_discovery",
    "_should_exclude_file": "tools.projectscanner.enhanced_scanner.file_discovery",
    "analyze_file_basic": "tools.projectscanner.enhanced_scanner.core_analyzer",
    "run_basic_analysis": "tools.projectscanner.enhanced_scanner.core_analyzer",
    "filter_analysis_files": "tools.projectscanner.enhanced_scanner.core_analyzer",
    "calculate_project_metrics": "tools.projectscanner.enhanced_scanner.core_analyzer",
    "save_basic_analysis": "tools.projectscanner.enhanced_scanner.core_analyzer",
    "load_cache": "tools.projectscanner.enhanced_analyzer.core",
    "save_cache": "tools.projectscanner.enhanced_analyzer.core",
    "get_file_hash": "tools.projectscanner.enhanced_scanner.caching_system",
    "is_file_cached": "tools.projectscanner.enhanced_scanner.caching_system",
    "update_file_cache": "tools.projectscanner.enhanced_scanner.caching_system",
    "get_cached_analysis": "tools.projectscanner.enhanced_scanner.caching_system",
    "detect_moved_files": "tools.projectscanner.enhanced_analyzer.core",
    "cleanup_missing_files": "tools.projectscanner.enhanced_analyzer.core",
    "batch_update_cache": "tools.projectscanner.enhanced_scanner.caching_system",
    "generate_enhanced_reports": "tools.projectscanner.enhanced_scanner.report_generation",
    "save_project_analysis": "tools.projectscanner.enhanced_scanner.report_generator",
    "save_test_analysis": "tools.projectscanner.enhanced_scanner.report_generator",
    "save_agent_analysis": "tools.projectscanner.enhanced_scanner.report_generator",
    "save_architecture_overview": "tools.projectscanner.enhanced_scanner.report_generator",
    "_load_existing_report": "tools.projectscanner.enhanced_scanner.report_generator",
    "_calculate_agent_distribution": "tools.projectscanner.enhanced_scanner.report_generator",
    "_calculate_maturity_distribution": "tools.projectscanner.enhanced_scanner.report_generator",
    "_analyze_rust_fallback": "tools.projectscanner.enhanced_scanner.language_analyzer",
    "_analyze_javascript_fallback": "tools.projectscanner.enhanced_scanner.language_analyzer",
    "_extract_route_from_line": "tools.projectscanner.enhanced_scanner.language_analyzer",
    "_get_decorator_name": "tools.projectscanner.enhanced_scanner.python_analyzer",
    "_extract_route_info": "tools.projectscanner.enhanced_scanner.python_analyzer",
    "_extract_import_info": "tools.projectscanner.enhanced_scanner.python_analyzer",
    "_assess_class_maturity": "tools.projectscanner.enhanced_scanner.python_analyzer",
    "_categorize_agent_type": "tools.projectscanner.enhanced_scanner.python_analyzer",
    "_assess_file_maturity": "tools.projectscanner.enhanced_scanner.python_analyzer",
    "_categorize_file_type": "tools.projectscanner.enhanced_scanner.python_analyzer",
    "_extract_keywords": "src.v3.v3_009_intent_recognition",
    "_find_best_agent_match": "tools.projectscanner.enhanced_scanner.agent_categorization",
    "_calculate_confidence": "tsla_forecast_app.modules.trading_flags",
    "analyze_file_enhanced": "tools.projectscanner.enhanced_scanner.file_analysis",
    "handle_moved_files": "tools.projectscanner.enhanced_scanner.file_analysis",
    "get_analysis_summary": "tools.projectscanner.enhanced_analyzer.core",
    "_calculate_v2_compliance": "tools.projectscanner.enhanced_scanner.core",
    "add_ignore_directory": "tools.projectscanner.enhanced_scanner.core",
    "remove_ignore_directory": "tools.projectscanner.enhanced_scanner.core",
    "generate_reports": "tools.projectscanner.enhanced_analyzer.core",
    "should_exclude_file": "tools.analysis.core",
    "count_lines": "tools.analysis.core",
    "_analyze_ast_node": "tools.analysis.core",
    "generate_refactor_suggestions": "tools.analysis.refactor",
    "format_refactor_report": "tools.analysis.refactor",
    "_analyze_file_violations": "tools.analysis.refactor",
    "_generate_violation_suggestion": "tools.analysis.refactor",
    "_generate_priority_actions": "tools.analysis.refactor",
    "format_violations_text": "tools.analysis.violations",
    "_generate_summary": "src.core.vibe_check_core",
    "ci_gate_check": "tools.analysis.violations",
    "scan_agent_states": "tools.fsm.fsm_scan",
    "scan_swarm_state": "tools.fsm.fsm_scan",
    "scan_all_states": "tools.fsm.fsm_scan",
    "print_scan_results": "tools.fsm.fsm_scan",
    "changed_files": "tools.coverage.changed_file_report",
    "load_cov": "tools.coverage.changed_file_report",
    "load_coverage_data": "tools.coverage.gap_analyzer",
    "get_git_churn": "tools.coverage.gap_analyzer",
    "estimate_complexity": "tools.coverage.gap_analyzer",
    "calculate_risk_score": "tools.coverage.gap_analyzer",
    "analyze_gaps": "tools.coverage.run_coverage_analysis",
    "print_report": "tools.coverage.gap_analyzer",
    "suggest_test_behaviors": "tools.coverage.gap_analyzer",
    "run_mutation_tests": "tools.coverage.run_coverage_analysis",
    "get_mutation_results": "tools.coverage.mutation_gate",
    "calculate_mutation_score": "tools.coverage.mutation_gate",
    "check_threshold": "tools.coverage.mutation_gate",
    "print_detailed_report": "tools.coverage.mutation_gate",
    "discover_gaps": "tools.coverage.run_coverage_analysis",
    "verify_thresholds": "tools.coverage.run_coverage_analysis",
    "validate_module_structure": "tools.workflow.automation",
    "run_pytest": "tools.workflow.automation",
    "run_syntax_check": "tools.workflow.automation",
    "get_project_status": "tools.workflow.automation",
    "cleanup_temp_files": "tools.workflow.automation",
    "execute_workflow_step": "tools.workflow.automation",
    "_execute_task": "src.tools.swarm_workflow_orchestrator_core",
    "_extract_module_path": "tools.workflow.automation",
    "_extract_test_path": "tools.workflow.automation",
    "_extract_file_path": "tools.workflow.automation",
    "validate_workflow": "tools.workflow.core",
    "_has_circular_dependencies": "tools.workflow.core",
    "get_execution_order": "tools.workflow.core",
    "start_workflow": "tools.workflow.core",
    "complete_workflow": "tools.workflow.core",
    "get_workflow_status": "src.tools.swarm_workflow_orchestrator_main",
    "get_all_workflows": "tools.workflow.core",
    "has_cycle": "tools.workflow.core",
    "create_workflow": "src.tools.swarm_workflow_orchestrator_main",
    "save_workflow": "tools.workflow.simple_manager",
    "load_workflow": "tools.workflow.simple_manager",
    "execute_workflow": "src.tools.swarm_workflow_orchestrator_main",
    "_check_dependencies": "tools.workflow.manager",
    "cancel_workflow": "tools.workflow.manager",
    "record_step_completion": "tools.workflow.optimization",
    "record_parallel_execution": "tools.workflow.optimization",
    "record_cache_hit": "tools.workflow.optimization",
    "record_cache_miss": "tools.workflow.optimization",
    "get_average_metrics": "src.core.tracing.performance_monitor",
    "get": "src.v3.v3_009_response_generation_utils",
    "set": "src.v3.v3_009_response_generation_utils",
    "_evict_oldest": "src.v3.v3_009_response_generation_utils",
    "clear": "src.v3.v3_009_response_generation_utils",
    "get_active_task_count": "src.services.discord_commander.optimization",
    "shutdown": "src.observability.memory.policies",
    "optimize_workflow_execution": "tools.workflow.optimization",
    "_group_parallel_steps": "tools.workflow.optimization",
    "_execute_group_parallel": "tools.workflow.optimization",
    "_execute_group_sequential": "tools.workflow.optimization",
    "_execute_sequential": "tools.workflow.optimization",
    "get_optimization_stats": "src.services.discord_commander.optimization",
    "enable_optimization": "src.services.discord_commander.optimization",
    "disable_optimization": "src.services.discord_commander.optimization",
    "_load_workflows": "tools.workflow.simple_manager",
    "_execute_step": "tools.workflow.simple_manager",
    "delete_workflow": "tools.workflow.simple_manager",
    "_load_api_keys": "tsla_forecast_app.modules.data_worker",
    "get_comprehensive_data": "tools.trading_cli.market_analyzer",
    "_get_stock_data": "tools.trading_cli.market_analyzer",
    "_get_technical_indicators": "tools.trading_cli.market_analyzer",
    "_calculate_rsi": "tsla_forecast_app.modules.trading_flags",
    "_calculate_macd": "tsla_forecast_app.modules.trading_flags",
    "_get_market_sentiment": "tools.trading_cli.market_analyzer",
    "_analyze_volume": "tools.trading_cli.market_analyzer",
    "_analyze_volatility": "tools.trading_cli.market_analyzer",
    "_analyze_trend": "tools.trading_cli.market_analyzer",
    "generate_enhanced_predictions": "tools.trading_cli.market_analyzer",
    "run_tool": "tools.trading_cli.master_cli",
    "run_comprehensive_analysis": "tools.static_analysis.code_quality_analyzer",
    "interactive_mode": "tools.trading_cli.master_cli",
    "_load_sentiment_keywords": "tools.trading_cli.news_analyzer",
    "get_news_data": "tools.trading_cli.news_analyzer",
    "_get_news_api_data": "tools.trading_cli.news_analyzer",
    "_get_alpha_vantage_news": "tools.trading_cli.news_analyzer",
    "_get_mock_news_data": "tools.trading_cli.news_analyzer",
    "analyze_news_sentiment": "tools.trading_cli.news_analyzer",
    "display_sentiment_analysis": "tools.trading_cli.news_analyzer",
    "get_sentiment_trading_signal": "tools.trading_cli.news_analyzer",
    "_load_agent_weights": "tools.trading_cli.agent_coordinator",
    "run_market_analysis": "tools.trading_cli.agent_coordinator",
    "run_news_analysis": "tools.trading_cli.agent_coordinator",
    "run_technical_analysis": "tools.trading_cli.agent_coordinator",
    "generate_agent_predictions": "tools.trading_cli.agent_coordinator",
    "_create_enhanced_analysis": "tools.trading_cli.agent_coordinator",
    "calculate_weighted_consensus": "tools.trading_cli.agent_coordinator",
    "display_comprehensive_results": "tools.trading_cli.agent_coordinator",
    "get_historical_data": "tools.trading_cli.technical_analyzer_core",
    "_get_alpha_vantage_historical": "tools.trading_cli.technical_analyzer_core",
    "_get_mock_historical_data": "tools.trading_cli.technical_analyzer_core",
    "analyze_technical": "tools.trading_cli.technical_analyzer_core",
    "display_technical_analysis": "tools.trading_cli.technical_analyzer_core",
    "_generate_analysis_summary": "tools.trading_cli.technical_analyzer_core",
    "calculate_technical_indicators": "tools.trading_cli.technical_analyzer_utils",
    "calculate_sma": "tools.trading_cli.technical_analyzer_utils",
    "calculate_ema": "tools.trading_cli.technical_analyzer_utils",
    "calculate_rsi": "tsla_forecast_app.trading_robot_strategies",
    "calculate_macd": "tools.trading_cli.technical_analyzer_utils",
    "calculate_bollinger_bands": "tsla_forecast_app.trading_robot_strategies",
    "calculate_stochastic": "tools.trading_cli.technical_analyzer_utils",
    "generate_technical_signals": "tools.trading_cli.technical_analyzer_utils",
    "_init_database": "src.core.memory.persistent_memory",
    "record_prediction": "tools.trading_cli.prediction_tracker",
    "update_actual_price": "tools.trading_cli.prediction_tracker",
    "_calculate_accuracy_score": "tools.trading_cli.prediction_tracker",
    "_update_accuracy_summary": "tools.trading_cli.prediction_tracker",
    "get_agent_accuracy": "tools.trading_cli.prediction_tracker",
    "get_recent_predictions": "tools.trading_cli.prediction_tracker",
    "display_accuracy_report": "tools.trading_cli.prediction_tracker",
    "trading_robot_refactoring": "tools.refactoring_templates.critical_file_refactoring",
    "captain_autonomous_manager_refactoring": "tools.refactoring_templates.critical_file_refactoring",
    "knowledge_base_refactoring": "tools.refactoring_templates.critical_file_refactoring",
    "dashboard_web_interface_refactoring": "tools.refactoring_templates.critical_file_refactoring",
    "ml_training_infrastructure_refactoring": "tools.refactoring_templates.critical_file_refactoring",
    "extract_class_example": "tools.refactoring_templates.critical_file_refactoring",
    "extract_method_example": "tools.refactoring_templates.critical_file_refactoring",
    "extract_module_example": "tools.refactoring_templates.critical_file_refactoring",
    "get_pre_refactoring_checklist": "tools.refactoring_templates.critical_file_refactoring",
    "get_during_refactoring_checklist": "tools.refactoring_templates.critical_file_refactoring",
    "get_post_refactoring_checklist": "tools.refactoring_templates.critical_file_refactoring",
    "display_security_summary": "tools.static_analysis.analysis_dashboard",
    "display_quality_summary": "tools.static_analysis.analysis_dashboard",
    "display_dependency_summary": "tools.static_analysis.analysis_dashboard",
    "_get_score_status": "tools.static_analysis.analysis_dashboard",
    "_display_violation_summary": "tools.static_analysis.analysis_dashboard",
    "_print_security_summary": "tools.static_analysis.analysis_dashboard",
    "_print_quality_summary": "tools.static_analysis.analysis_dashboard",
    "_print_dependency_summary": "tools.static_analysis.analysis_dashboard",
    "load_and_display_reports": "tools.static_analysis.analysis_dashboard",
    "_run_ruff_analysis": "tools.static_analysis.code_quality_analyzer",
    "_run_pylint_analysis": "tools.static_analysis.code_quality_analyzer",
    "_run_mypy_analysis": "tools.static_analysis.code_quality_analyzer",
    "_run_flake8_analysis": "tools.static_analysis.code_quality_analyzer",
    "_run_complexity_analysis": "tools.static_analysis.code_quality_analyzer",
    "_calculate_quality_metrics": "tools.static_analysis.code_quality_analyzer",
    "_generate_violation_summary": "tools.static_analysis.code_quality_analyzer",
    "_show_summary": "tools.static_analysis.demo_analysis",
    "run_individual_demos": "tools.static_analysis.demo_analysis",
    "show_tool_capabilities": "tools.static_analysis.demo_analysis",
    "show_configuration_options": "tools.static_analysis.demo_analysis",
    "show_ci_integration": "tools.static_analysis.demo_analysis",
    "run_comprehensive_scan": "tools.static_analysis.security_scanner",
    "_run_safety_scan": "tools.static_analysis.security_scanner",
    "_run_pip_audit_scan": "tools.static_analysis.dependency_scanner",
    "_run_osv_scanner": "tools.static_analysis.dependency_scanner",
    "_run_manual_dependency_check": "tools.static_analysis.dependency_scanner",
    "_check_file_vulnerabilities": "tools.static_analysis.dependency_scanner",
    "_generate_dependency_summary": "tools.static_analysis.dependency_scanner",
    "generate_remediation_report": "tools.static_analysis.dependency_scanner",
    "_run_bandit_scan": "tools.static_analysis.security_scanner",
    "_run_semgrep_scan": "tools.static_analysis.security_scanner",
    "_run_dependency_check": "tools.static_analysis.security_scanner",
    "_check_vulnerable_packages": "tools.static_analysis.security_scanner",
    "_generate_security_summary": "tools.static_analysis.security_scanner",
    "start": "src.observability.memory.watchdog",
    "navigate": "browser_service.adapters.chrome_adapter",
    "get_current_url": "browser_service.adapters.chrome_adapter",
    "get_title": "browser_service.adapters.chrome_adapter",
    "find_element": "browser_service.adapters.chrome_adapter",
    "find_elements": "browser_service.adapters.chrome_adapter",
    "execute_script": "browser_service.adapters.chrome_adapter",
    "is_running": "browser_service.adapters.chrome_adapter",
    "get_cookies": "browser_service.adapters.chrome_adapter",
    "add_cookies": "browser_service.adapters.chrome_adapter",
    "create_browser_service": "browser_service.core.unified_browser_service",
    "start_browser": "browser_service.core.unified_browser_service",
    "stop_browser": "browser_service.core.unified_browser_service",
    "create_session": "src.services.vector_database.enhanced_collaboration",
    "navigate_to_conversation": "browser_service.operations.browser_operations",
    "send_message": "src.architecture.service_layer",
    "save_cookies": "src.services.thea.thea_cookie_manager",
    "load_cookies": "src.services.thea.thea_cookie_manager",
    "can_make_request": "browser_service.managers.session_manager",
    "record_request": "src.v3.v3_011_api_gateway_advanced",
    "get_session_info": "browser_service.managers.session_manager",
    "get_rate_limit_status": "browser_service.managers.session_manager",
    "get_page_status": "browser_service.operations.browser_operations",
    "is_browser_running": "browser_service.core.unified_browser_service",
    "has_valid_session": "browser_service.core.unified_browser_service",
    "get_browser_info": "browser_service.core.unified_browser_service",
    "wait_for_rate_limit_reset": "browser_service.managers.session_manager",
    "wait_for_response_ready": "browser_service.operations.browser_operations",
    "_is_input_available": "browser_service.operations.browser_operations",
    "_verify_page_loaded": "browser_service.operations.browser_operations",
    "_generate_validation_report": "infrastructure.validate_tracing",
    "validate_kubernetes_ml_resources": "infrastructure.validate_ml_pipeline",
    "validate_ml_components": "infrastructure.validate_ml_pipeline",
    "validate_ml_integration": "infrastructure.validate_ml_pipeline",
    "validate_ml_functionality": "infrastructure.validate_ml_pipeline",
    "validate_ml_quality_gates": "infrastructure.validate_ml_pipeline",
    "test_function": "infrastructure.validate_tracing",
    "register_components": "scripts.continuous_optimization_monitor",
    "get_optimization_summary": "scripts.continuous_optimization_monitor",
    "save_optimization_report": "scripts.continuous_optimization_monitor",
    "deploy_workflow_components": "scripts.deploy_modular_components",
    "deploy_discord_commander_components": "scripts.deploy_modular_components",
    "_create_workflow_cli": "scripts.deploy_modular_components",
    "create_deployment_manifest": "scripts.deploy_modular_components",
    "deploy": "scripts.deploy_modular_components",
    "initialize_components": "scripts.lightweight_deployment_dashboard",
    "test_component_functionality": "scripts.lightweight_deployment_dashboard",
    "get_deployment_status": "src.ml.model_deployment",
    "save_deployment_report": "scripts.deployment_dashboard",
    "save_lightweight_report": "src.monitoring.memory_optimized_monitor",
    "get_files_to_remove": "scripts.remove_duplicate_discord_files",
    "validate_removal_safety": "scripts.remove_duplicate_discord_files",
    "remove_files": "scripts.remove_duplicate_discord_files",
    "clean_empty_directories": "scripts.remove_duplicate_discord_files",
    "run_static_analysis": "scripts.security_integration",
    "run_dependency_scan": "scripts.security_integration",
    "run_input_validation_tests": "scripts.security_integration",
    "run_password_security_tests": "scripts.security_integration",
    "run_comprehensive_audit": "scripts.security_integration",
    "_calculate_overall_score": "scripts.security_integration",
    "check_security_gates": "scripts.security_integration",
    "clamp": "analytics.agent_metrics",
    "safe_div": "analytics.agent_metrics",
    "parse_cobertura_coverage": "analytics.agent_metrics",
    "efficiency_score": "analytics.agent_metrics",
    "add_performance_metrics": "analytics.predictive_core",
    "predict_cpu_usage": "analytics.predictive_core",
    "predict_memory_usage": "analytics.predictive_core",
    "predict_response_time": "analytics.predictive_core",
    "detect_anomalies": "analytics.predictive_core",
    "forecast_capacity": "analytics.predictive_core",
    "assess_system_health": "analytics.predictive_core",
    "create_performance_metrics": "analytics.predictive_engine",
    "get_prediction_summary": "analytics.predictive_engine",
    "get_capacity_forecasts": "analytics.predictive_engine",
    "get_resource_utilizations": "analytics.predictive_engine",
    "export_metrics": "src.core.tracing.performance_monitor",
    "import_metrics": "analytics.predictive_engine",
    "get_engine_status": "analytics.predictive_engine",
    "configure_anomaly_threshold": "analytics.predictive_engine",
    "clear_metrics_history": "analytics.predictive_engine",
    "get_metrics_statistics": "analytics.predictive_engine",
    "score_window": "analytics.score_window",
    "load_snapshots_from_window": "analytics.window_loader",
    "_get_recent_metrics": "src.core.database.database_monitoring_system_v2",
    "_calculate_trend_prediction": "analytics.predictive_core",
    "_calculate_slope": "analytics.predictive_core",
    "_determine_trend": "analytics.predictive_core",
    "_calculate_anomaly_score": "analytics.predictive_core",
    "_check_metric_anomaly": "analytics.predictive_core",
    "_create_default_prediction": "analytics.predictive_core",
    "_create_default_capacity_forecast": "analytics.predictive_core",
    "_calculate_time_to_limit": "analytics.predictive_core",
    "_generate_scaling_recommendation": "analytics.predictive_core",
    "_identify_health_issues": "analytics.predictive_core",
    "_generate_health_recommendations": "analytics.predictive_core",
    "_calculate_efficiency_score": "analytics.predictive_core",
    "_generate_cpu_recommendations": "analytics.predictive_core",
    "_generate_memory_recommendations": "analytics.predictive_core",
    "_generate_response_time_recommendations": "analytics.predictive_core",
    "_generate_anomaly_action": "analytics.predictive_core",
    "parse_pytest_summary": "analytics.signals.collect_ci_signals",
    "collect": "analytics.signals.collect_ci_signals",
    "canonical_action": "swarm_brain.canon",
    "canonical_protocol": "swarm_brain.canon",
    "canonical_workflow": "swarm_brain.canon",
    "canonical_performance": "swarm_brain.canon",
    "canonical_conversation": "swarm_brain.canon",
    "canonical_coordination": "swarm_brain.canon",
    "canonical_tool": "swarm_brain.canon",
    "cmd_ingest": "swarm_brain.cli",
    "cmd_query": "swarm_brain.cli",
    "cmd_stats": "swarm_brain.cli",
    "cmd_cleanup": "swarm_brain.cli",
    "get_config": "src.core.config.unified_config_manager",
    "update_config": "swarm_brain.config",
    "upsert_document": "swarm_brain.db",
    "insert_lens": "swarm_brain.db",
    "mark_embedded": "swarm_brain.db",
    "fetch_canonical_batch": "swarm_brain.db",
    "search_by_metadata": "swarm_brain.db",
    "get_agent_stats": "swarm_brain.db",
    "get_project_stats": "swarm_brain.db",
    "cleanup_old_documents": "swarm_brain.db",
    "close": "src.services.vector_database.contracts.contract_execution_core",
    "__enter__": "src.observability.memory.integrations.messaging_checks",
    "__exit__": "src.observability.memory.integrations.messaging_checks",
    "vectorized_action": "swarm_brain.decorators",
    "vectorized_protocol": "swarm_brain.decorators",
    "vectorized_workflow": "swarm_brain.decorators",
    "vectorized_performance": "swarm_brain.decorators",
    "vectorized_conversation": "swarm_brain.decorators",
    "vectorized_coordination": "swarm_brain.decorators",
    "vectorized_tool": "swarm_brain.decorators",
    "decorator": "src.core.tracing.performance_monitor",
    "record_protocol": "swarm_brain.decorators",
    "record_workflow": "swarm_brain.decorators",
    "record_performance": "src.services.aletheia_prompt_manager",
    "record_conversation": "swarm_brain.decorators",
    "record_coordination": "swarm_brain.decorators",
    "record_tool": "swarm_brain.decorators",
    "wrapper": "src.services.discord_commander.optimization_utils",
    "_get_backend": "swarm_brain.ingest",
    "_embed_and_mark": "swarm_brain.ingest",
    "action": "swarm_brain.ingest",
    "protocol": "swarm_brain.ingest",
    "workflow": "swarm_brain.ingest",
    "performance": "swarm_brain.ingest",
    "conversation": "swarm_brain.ingest",
    "coordination": "swarm_brain.ingest",
    "tool": "swarm_brain.ingest",
    "ensure_directories": "swarm_brain.paths",
    "get_brain_root": "swarm_brain.paths",
    "get_sqlite_path": "swarm_brain.paths",
    "get_index_path": "swarm_brain.paths",
    "cleanup_old_files": "src.services.agent_devlog.storage",
    "how_do_agents_do": "swarm_brain.retriever",
    "find_similar_problems": "swarm_brain.retriever",
    "get_agent_expertise": "swarm_brain.retriever",
    "get_project_patterns": "swarm_brain.retriever",
    "suggest_improvements": "swarm_brain.retriever",
    "score_document": "swarm_brain.retriever",
    "embed_texts": "swarm_brain.embeddings.numpy_backend",
    "add": "swarm_brain.embeddings.numpy_backend",
    "persist": "src.ml.data_ingestion_system.data_ingestion.VectorStoreAgent",
    "_hash_embed": "swarm_brain.embeddings.numpy_backend",
    "ingest_devlog": "swarm_brain.connectors.devlogs",
    "ingest_devlog_batch": "swarm_brain.connectors.devlogs",
    "ingest_discord": "swarm_brain.connectors.discord",
    "ingest_discord_command": "swarm_brain.connectors.discord",
    "ingest_discord_coordination": "swarm_brain.connectors.discord",
    "ingest_performance": "swarm_brain.connectors.performance",
    "ingest_optimization": "swarm_brain.connectors.performance",
    "ingest_system_health": "swarm_brain.connectors.performance",
    "ingest_scan": "swarm_brain.connectors.project_scanner",
    "ingest_compliance_fix": "swarm_brain.connectors.project_scanner",
    "init_ui": "tsla_forecast_app.modules.ui.trading_dashboard",
    "create_trading_info_section": "tsla_forecast_app.modules.ui.trading_dashboard",
    "create_performance_section": "tsla_forecast_app.modules.ui.trading_dashboard",
    "create_quick_actions_section": "tsla_forecast_app.modules.ui.trading_dashboard",
    "setup_dark_theme": "tsla_forecast_app.modules.ui.trading_dashboard",
    "update_trading_data": "tsla_forecast_app.modules.ui.trading_dashboard",
    "setup_connections": "tsla_forecast_app.modules.v2_trading_interface",
    "setup_timers": "tsla_forecast_app.modules.ui.trading_dashboard",
    "update_display": "tsla_forecast_app.modules.ui.trading_dashboard",
    "show_trading_action": "tsla_forecast_app.V2_STANDALONE_DEMO",
    "generate_chart_data": "tsla_forecast_app.V2_TRADING_ROBOT_DEMO",
    "handle_trading_action": "tsla_forecast_app.V2_TRADING_ROBOT_DEMO",
    "show_message": "tsla_forecast_app.V2_TRADING_ROBOT_DEMO",
    "install_requirements": "tsla_forecast_app.run_trading_robot",
    "run_app": "tsla_forecast_app.run_app",
    "run_trading_robot": "tsla_forecast_app.run_trading_robot",
    "add_strategy": "src.architecture.design_patterns",
    "update_market_data": "tsla_forecast_app.trading_robot_core",
    "execute_trade": "tsla_forecast_app.trading_robot_strategies",
    "get_portfolio_summary": "tsla_forecast_app.trading_robot_core",
    "get_performance_metrics": "src.services.vector_database.contracts.contract_performance_monitor",
    "create_cli_parser": "tsla_forecast_app.trading_robot_interface",
    "setup_strategies": "tsla_forecast_app.trading_robot_interface",
    "start_trading": "tsla_forecast_app.trading_robot_interface",
    "stop_trading": "tsla_forecast_app.trading_robot_interface",
    "manage_strategies": "tsla_forecast_app.trading_robot_interface",
    "list_strategies": "src.architecture.patterns.observer_strategy",
    "enable_strategy": "tsla_forecast_app.trading_robot_interface",
    "disable_strategy": "tsla_forecast_app.trading_robot_interface",
    "show_strategy_performance": "tsla_forecast_app.trading_robot_interface",
    "show_portfolio": "tsla_forecast_app.trading_robot_interface",
    "run_backtest": "tsla_forecast_app.trading_robot_interface",
    "get_strategy_performance": "tsla_forecast_app.trading_robot_strategies",
    "configure_strategies_from_config": "tsla_forecast_app.trading_robot_interface",
    "analyze": "src.core.security.security_cli",
    "get_performance_summary": "src.monitoring.performance_monitor",
    "remove_strategy": "tsla_forecast_app.trading_robot_strategies",
    "get_strategy": "tsla_forecast_app.trading_robot_strategies",
    "get_all_strategies": "tsla_forecast_app.trading_robot_strategies",
    "get_enabled_strategies": "tsla_forecast_app.trading_robot_strategies",
    "reset_all_performance": "tsla_forecast_app.trading_robot_strategies",
    "calculate_signal": "tsla_forecast_app.trading_strategies",
    "update_parameters": "tsla_forecast_app.trading_strategies",
    "get_real_stock_data": "tsla_forecast_app.modules.data_worker",
    "_get_alpha_vantage_data": "tsla_forecast_app.modules.data_worker",
    "_get_polygon_data": "tsla_forecast_app.modules.data_worker",
    "_get_finnhub_data": "tsla_forecast_app.modules.data_worker",
    "_parse_alpha_vantage_data": "tsla_forecast_app.modules.data_worker",
    "_parse_polygon_data": "tsla_forecast_app.modules.data_worker",
    "_parse_finnhub_data": "tsla_forecast_app.modules.data_worker",
    "get_mock_stock_data": "tsla_forecast_app.modules.data_worker",
    "generate_flags": "tsla_forecast_app.modules.flag_display",
    "update_flags_display": "tsla_forecast_app.modules.flag_display",
    "_set_flag_type_color": "tsla_forecast_app.modules.flag_display",
    "_set_strength_color": "tsla_forecast_app.modules.flag_display",
    "_set_confidence_color": "tsla_forecast_app.modules.flag_display",
    "show_consensus": "tsla_forecast_app.modules.flag_display",
    "refresh_flags": "tsla_forecast_app.modules.flag_display",
    "save_flags": "tsla_forecast_app.modules.flag_display",
    "filter_flags": "tsla_forecast_app.modules.flag_display",
    "auto_refresh": "tsla_forecast_app.modules.main_app",
    "update_stock_data": "tsla_forecast_app.modules.ui_components.stock_display",
    "create_app": "tsla_forecast_app.modules.main_app",
    "init_data_worker": "tsla_forecast_app.modules.main_app",
    "refresh_data": "tsla_forecast_app.modules.main_app",
    "generate_forecast": "tsla_forecast_app.modules.ui_components",
    "update_status": "src.domain.entities.task_core",
    "log_message": "src.services.dashboard.dashboard_web_core",
    "change_theme": "tsla_forecast_app.modules.main_app",
    "update_refresh_interval": "tsla_forecast_app.modules.main_app",
    "closeEvent": "tsla_forecast_app.modules.main_app",
    "_initialize_agent_preferences": "tsla_forecast_app.modules.trading_flags",
    "analyze_market_data": "tsla_forecast_app.modules.trading_flags",
    "_calculate_moving_average": "tsla_forecast_app.modules.trading_flags",
    "generate_agent_flag": "tsla_forecast_app.modules.trading_flags",
    "_determine_flag_type": "tsla_forecast_app.modules.trading_flags",
    "_determine_flag_strength": "tsla_forecast_app.modules.trading_flags",
    "_calculate_price_target": "tsla_forecast_app.modules.trading_flags",
    "_generate_reasoning": "tsla_forecast_app.modules.trading_flags",
    "generate_all_agent_flags": "tsla_forecast_app.modules.trading_flags",
    "get_consensus_flag": "tsla_forecast_app.modules.trading_flags",
    "get_active_flags": "tsla_forecast_app.modules.trading_flags",
    "get_agent_flags": "tsla_forecast_app.modules.trading_flags",
    "expire_old_flags": "tsla_forecast_app.modules.trading_flags",
    "save_flags_to_file": "tsla_forecast_app.modules.trading_flags",
    "on_refresh_clicked": "tsla_forecast_app.modules.ui_components",
    "on_forecast_clicked": "tsla_forecast_app.modules.ui_components",
    "hide_progress": "tsla_forecast_app.modules.ui_components",
    "clear_forecast": "tsla_forecast_app.modules.ui_components",
    "add_log_message": "tsla_forecast_app.modules.ui_components",
    "clear_log": "tsla_forecast_app.modules.ui_components.log_display",
    "save_log": "tsla_forecast_app.modules.ui_components",
    "update_api_status": "tsla_forecast_app.modules.ui_components",
    "create_menu_bar": "tsla_forecast_app.modules.v2_trading_interface",
    "create_central_widget": "tsla_forecast_app.modules.v2_trading_interface",
    "create_mobile_view": "tsla_forecast_app.modules.ui_components.responsive_layout",
    "create_status_bar": "tsla_forecast_app.modules.v2_trading_interface",
    "update_chart_data": "tsla_forecast_app.modules.ui.chart_widget",
    "update_status_bar": "tsla_forecast_app.modules.v2_trading_interface",
    "update_interface": "tsla_forecast_app.modules.v2_trading_interface",
    "new_session": "tsla_forecast_app.modules.v2_trading_interface",
    "save_data": "tsla_forecast_app.modules.v2_trading_interface",
    "show_dashboard": "tsla_forecast_app.modules.v2_trading_interface",
    "show_charts": "tsla_forecast_app.modules.v2_trading_interface",
    "show_preferences": "tsla_forecast_app.modules.v2_trading_interface",
    "set_screen_size": "tsla_forecast_app.modules.v2_trading_interface",
    "paintEvent": "tsla_forecast_app.modules.ui.chart_widget",
    "add_data_point": "tsla_forecast_app.modules.ui_components.chart_display",
    "set_chart_type": "tsla_forecast_app.modules.ui_components.chart_display",
    "set_show_volume": "tsla_forecast_app.modules.ui_components.chart_display",
    "set_show_indicators": "tsla_forecast_app.modules.ui_components.chart_display",
    "toggle_chart": "tsla_forecast_app.modules.ui_components.chart_display",
    "start_chart": "tsla_forecast_app.modules.ui_components.chart_display",
    "stop_chart": "tsla_forecast_app.modules.ui_components.chart_display",
    "on_chart_type_changed": "tsla_forecast_app.modules.ui.chart_widget",
    "on_interval_changed": "tsla_forecast_app.modules.ui_components.chart_display",
    "update_forecast": "tsla_forecast_app.modules.ui_components.forecast_display",
    "update_agent_predictions": "tsla_forecast_app.modules.ui_components.forecast_display",
    "update_analysis_status": "tsla_forecast_app.modules.ui_components.forecast_display",
    "add_log_entry": "tsla_forecast_app.modules.ui_components.log_display",
    "update_log_display": "tsla_forecast_app.modules.ui_components.log_display",
    "filter_logs": "tsla_forecast_app.modules.ui_components.log_display",
    "export_log": "tsla_forecast_app.modules.ui_components.log_display",
    "log_info": "tsla_forecast_app.modules.ui_components.log_display",
    "log_warning": "tsla_forecast_app.modules.ui_components.log_display",
    "log_error": "src.core.shared_logging",
    "log_debug": "tsla_forecast_app.modules.ui_components.log_display",
    "get_dark_theme": "tsla_forecast_app.modules.ui_components.professional_theme",
    "get_light_theme": "tsla_forecast_app.modules.ui_components.professional_theme",
    "get_professional_theme": "tsla_forecast_app.modules.ui_components.professional_theme",
    "apply_theme": "tsla_forecast_app.modules.ui_components.professional_theme",
    "get_professional_stylesheet": "tsla_forecast_app.modules.ui_components.professional_theme",
    "get_dark_stylesheet": "tsla_forecast_app.modules.ui_components.professional_theme",
    "get_light_stylesheet": "tsla_forecast_app.modules.ui_components.professional_theme",
    "create_mobile_layout": "tsla_forecast_app.modules.ui_components.responsive_layout",
    "create_tablet_layout": "tsla_forecast_app.modules.ui_components.responsive_layout",
    "create_desktop_layout": "tsla_forecast_app.modules.ui_components.responsive_layout",
    "resizeEvent": "tsla_forecast_app.modules.ui_components.responsive_layout",
    "update_layout": "tsla_forecast_app.modules.ui_components.responsive_layout",
    "get_layout_type": "tsla_forecast_app.modules.ui_components.responsive_layout",
    "switch_layout": "tsla_forecast_app.modules.ui_components.responsive_layout",
    "add_component": "tsla_forecast_app.modules.ui_components.responsive_layout",
    "get_current_layout": "tsla_forecast_app.modules.ui_components.responsive_layout",
    "set_breakpoints": "tsla_forecast_app.modules.ui_components.responsive_layout",
    "create_tablet_view": "tsla_forecast_app.modules.ui_components.responsive_layout",
    "create_desktop_view": "tsla_forecast_app.modules.ui_components.responsive_layout",
    "switch_to_layout": "tsla_forecast_app.modules.ui_components.responsive_layout",
    "save_settings": "tsla_forecast_app.modules.ui_components.settings_display",
    "reset_settings": "tsla_forecast_app.modules.ui_components.settings_display",
    "on_theme_changed": "tsla_forecast_app.modules.ui_components.settings_display",
    "on_refresh_interval_changed": "tsla_forecast_app.modules.ui_components.settings_display",
    "get_settings": "tsla_forecast_app.modules.ui_components.settings_display",
    "set_refresh_callback": "tsla_forecast_app.modules.ui_components.stock_display",
    "create_chart_controls": "tsla_forecast_app.modules.ui.chart_widget",
    "create_chart_display": "tsla_forecast_app.modules.ui.chart_widget",
    "create_chart_info": "tsla_forecast_app.modules.ui.chart_widget",
    "draw_no_data_message": "tsla_forecast_app.modules.ui.chart_widget",
    "draw_line_chart": "tsla_forecast_app.modules.ui.chart_widget",
    "draw_candlestick_chart": "tsla_forecast_app.modules.ui.chart_widget",
    "draw_volume_chart": "tsla_forecast_app.modules.ui.chart_widget",
    "draw_macd_chart": "tsla_forecast_app.modules.ui.chart_widget",
    "update_chart_info": "tsla_forecast_app.modules.ui.chart_widget",
    "on_timeframe_changed": "tsla_forecast_app.modules.ui.chart_widget",
    "on_auto_update_toggled": "tsla_forecast_app.modules.ui.chart_widget",
    "refresh_chart": "tsla_forecast_app.modules.ui.chart_widget",
    "update_chart": "tsla_forecast_app.modules.ui.chart_widget",
    "setup_responsive_styles": "tsla_forecast_app.modules.ui.mobile_responsive",
    "update_screen_size": "tsla_forecast_app.modules.ui.mobile_responsive",
    "init_responsive_ui": "tsla_forecast_app.modules.ui.mobile_responsive",
    "add_responsive_element": "tsla_forecast_app.modules.ui.mobile_responsive",
    "get_responsive_font_size": "tsla_forecast_app.modules.ui.mobile_responsive",
    "get_responsive_spacing": "tsla_forecast_app.modules.ui.mobile_responsive",
    "update_data": "tsla_forecast_app.modules.ui.mobile_responsive",
    "setup_responsive_scroll": "tsla_forecast_app.modules.ui.mobile_responsive",
    "add_responsive_widget": "tsla_forecast_app.modules.ui.mobile_responsive",
    "update_performance": "tsla_forecast_app.modules.ui.trading_dashboard",
    "connect_signals": "tsla_forecast_app.modules.ui.trading_dashboard",
    "create_migration_backup": "migration_system.backup.backup_manager",
    "restore_from_backup": "migration_system.backup.backup_manager",
    "list_backups": "migration_system.backup.backup_manager",
    "_calculate_checksum": "src.core.database.data_replication_system",
    "run_complete_migration": "migration_system.core.migration_controller",
    "get_migration_status": "src.services.vector_database.record_time_migration",
    "migrate_data": "migration_system.data.data_migrator",
    "_migrate_agent_workspaces": "migration_system.data.data_migrator",
    "_migrate_configuration": "migration_system.data.data_migrator",
    "_migrate_project_analysis": "migration_system.data.data_migrator",
    "create_database_schema": "migration_system.schema.schema_manager",
    "_create_agent_workspaces_table": "migration_system.schema.schema_manager",
    "_create_agent_messages_table": "migration_system.schema.schema_manager",
    "_create_discord_commands_table": "migration_system.schema.schema_manager",
    "_create_core_systems_status_table": "migration_system.schema.schema_manager",
    "_create_v2_compliance_audit_table": "migration_system.schema.schema_manager",
    "_create_integration_tests_table": "migration_system.schema.schema_manager",
    "_create_performance_indexes": "migration_system.schema.schema_manager",
    "_create_useful_views": "migration_system.schema.schema_manager",
    "validate_existing_data": "migration_system.validation.data_validator",
    "validate_migration": "migration_system.validation.data_validator",
    "validate_data_integrity": "migration_system.validation.data_validator",
    "has_valid_cookies": "src.services.thea.thea_cookie_manager",
    "clear_cookies": "src.services.thea.thea_cookie_manager",
    "create_thea_login_handler": "src.services.thea.thea_login_handler_refactored",
    "check_thea_login_status": "src.services.thea.thea_login_handler_refactored",
    "ensure_login": "src.services.thea.thea_login_handler_refactored",
    "_is_logged_in": "thea_auth.login_handler",
    "_automated_login": "src.services.thea.thea_login_handler_refactored",
    "_manual_login": "src.services.thea.thea_login_handler_refactored",
    "_is_on_thea_page": "thea_auth.login_handler",
    "_navigate_to_thea": "src.services.thea.thea_login_handler_refactored",
    "force_logout": "src.services.thea.thea_login_handler_refactored",
    "initialize_driver": "src.services.thea.thea_browser_manager",
    "ensure_authenticated": "src.services.thea.thea_communication_interface",
    "_is_authenticated": "thea_communication.automation.selenium_handler",
    "send_message_to_thea": "src.services.thea.thea_communication_interface",
    "wait_for_thea_response": "src.services.thea.thea_communication_interface",
    "capture_thea_response": "src.services.thea.thea_communication_interface",
    "run_communication_cycle": "src.services.thea.thea_communication_interface",
    "create_analysis": "thea_communication.response.response_analyzer",
    "capture_response": "thea_communication.response.response_handler",
    "_capture_selenium_response": "thea_communication.response.response_handler",
    "_capture_manual_response": "thea_communication.response.response_handler",
    "_extract_response_text": "thea_communication.response.response_handler",
    "_create_analysis": "thea_communication.response.response_handler",
    "get_agents": "src.v3.web_dashboard_api",
    "get_v3_contracts": "src.v3.web_dashboard_api",
    "get_configuration": "src.v3.web_dashboard_api",
    "_get_uptime": "web_dashboard.websocket",
    "load": "src.observability.memory.ledger",
    "_get_default_coordinates": "src.services.messaging.core.coordinate_loader",
    "get_agent_coordinates": "src.services.messaging.core.coordinate_loader",
    "get_all_coordinates": "src.services.messaging.core.coordinate_loader",
    "get_agent_ids": "src.services.messaging.core.coordinate_loader",
    "get_coords": "src.services.messaging.core.coordinate_loader",
    "validate_all": "src.services.messaging.core.coordinate_loader",
    "get_all_agents": "src.domain.entities.agent",
    "is_agent_active": "src.services.messaging.coordinates",
    "get_chat_coordinates": "src.services.messaging.coordinates",
    "get_platform_info": "src.integration.comprehensive_integration_assessment_utils",
    "is_windows": "src.core.cross_platform_env_utils",
    "is_linux": "src.core.cross_platform_env_utils",
    "is_macos": "src.core.cross_platform_env_utils",
    "get_connection_string": "src.core.cross_platform_database",
    "get_connection": "src.services.vector_database.vector_database_models",
    "cleanup_database": "src.core.cross_platform_database",
    "create_temp_database": "src.core.cross_platform_database",
    "copy_database": "src.core.cross_platform_database",
    "safe_remove": "src.core.cross_platform_paths",
    "safe_remove_dir": "src.core.cross_platform_database",
    "get_line_separator": "src.core.cross_platform_database",
    "normalize_path": "src.core.cross_platform_paths",
    "get_env_var": "src.core.cross_platform_env_core",
    "set_env_var": "src.core.cross_platform_env_core",
    "load_env_file": "src.core.cross_platform_env_advanced",
    "join_paths": "src.core.cross_platform_paths",
    "get_config_dir": "src.core.cross_platform_paths",
    "get_data_dir": "src.core.cross_platform_paths",
    "get_log_dir": "src.core.cross_platform_paths",
    "get_cache_dir": "src.core.cross_platform_paths",
    "ensure_dir": "src.core.cross_platform_paths",
    "get_home_dir": "src.core.cross_platform_paths",
    "get_temp_dir": "src.core.cross_platform_paths",
    "get_relative_path": "src.core.cross_platform_paths",
    "is_same_path": "src.core.cross_platform_paths",
    "get_file_size": "src.ml.model_versioning_core",
    "get_directory_size": "src.core.cross_platform_paths",
    "list_files": "src.core.cross_platform_paths",
    "review_component_plan": "src.core.design_authority",
    "review_code_complexity": "src.core.design_authority",
    "_analyze_plan": "src.core.design_authority",
    "_analyze_code_complexity": "src.core.design_authority",
    "_generate_feedback": "src.core.design_authority",
    "_generate_complexity_feedback": "src.core.design_authority",
    "_suggest_simplifications": "src.core.design_authority",
    "get_review_history": "src.core.design_authority",
    "get_knowledge_summary": "src.core.design_authority",
    "get_knowledge_base": "src.core.knowledge_base",
    "get_principle": "src.core.knowledge_base_core",
    "get_required_principles": "src.core.knowledge_base_core",
    "validate_code": "src.core.knowledge_base",
    "suggest_simplification": "src.core.knowledge_base_core",
    "design_principles": "src.core.knowledge_base",
    "code_patterns": "src.core.knowledge_base",
    "anti_patterns": "src.core.knowledge_base",
    "project_guidelines": "src.core.knowledge_base",
    "get_principles_by_category": "src.core.knowledge_base_core",
    "get_code_pattern": "src.core.knowledge_base_core",
    "get_simple_patterns": "src.core.knowledge_base_core",
    "get_anti_pattern": "src.core.knowledge_base_core",
    "get_critical_anti_patterns": "src.core.knowledge_base_core",
    "validate_code_against_principles": "src.core.knowledge_base_core",
    "get_guideline": "src.core.knowledge_base_core",
    "get_all_guidelines": "src.core.knowledge_base_core",
    "_load_design_principles": "src.core.knowledge_base_core",
    "_create_kiss_principle": "src.core.knowledge_base_core",
    "_create_yagni_principle": "src.core.knowledge_base_core",
    "_create_sr_principle": "src.core.knowledge_base_core",
    "_create_error_handling_principle": "src.core.knowledge_base_core",
    "_create_fail_fast_principle": "src.core.knowledge_base_core",
    "_create_composition_principle": "src.core.knowledge_base_core",
    "_load_code_patterns": "src.core.knowledge_base_core",
    "_create_simple_function_pattern": "src.core.knowledge_base_core",
    "_create_data_class_pattern": "src.core.knowledge_base_core",
    "_create_repository_pattern": "src.core.knowledge_base_core",
    "_create_service_layer_pattern": "src.core.knowledge_base_core",
    "_load_anti_patterns": "src.core.knowledge_base_core",
    "_create_god_class_anti_pattern": "src.core.knowledge_base_core",
    "_create_premature_optimization_anti_pattern": "src.core.knowledge_base_core",
    "_create_bare_except_anti_pattern": "src.core.knowledge_base_core",
    "_create_stringly_typed_anti_pattern": "src.core.knowledge_base_core",
    "_create_copy_paste_anti_pattern": "src.core.knowledge_base_core",
    "_load_project_guidelines": "src.core.knowledge_base_core",
    "bulk_add_principles": "src.core.knowledge_base_manager",
    "bulk_add_patterns": "src.core.knowledge_base_manager",
    "search_knowledge": "src.core.knowledge_base_manager",
    "filter_by_category": "src.core.knowledge_base_manager",
    "filter_by_complexity": "src.core.knowledge_base_manager",
    "filter_by_severity": "src.core.knowledge_base_manager",
    "get_statistics": "src.services.vector_database.status_indexer",
    "export_knowledge": "src.core.knowledge_base_manager",
    "import_knowledge": "src.core.knowledge_base_manager",
    "validate_knowledge_consistency": "src.core.knowledge_base_manager",
    "_perform_search": "src.core.knowledge_base_retriever",
    "_calculate_relevance_score": "src.services.persistent_memory_advanced",
    "_get_matched_fields": "src.core.knowledge_base_retriever",
    "_rank_results": "src.core.knowledge_base_retriever",
    "cache_result": "src.core.knowledge_base_retriever",
    "get_cached": "src.core.knowledge_base_retriever",
    "get_search_history": "src.core.knowledge_base_retriever",
    "_get_timestamp": "src.ml.ml_pipeline_system_v2",
    "suggest_related_searches": "src.core.knowledge_base_retriever",
    "get_popular_searches": "src.core.knowledge_base_retriever",
    "get_registry": "src.core.resource_management.resource_registry",
    "register_component": "src.integration.integration_assessment_engine",
    "check_component_exists": "src.core.project_registry",
    "validate_design_decision": "src.core.project_registry",
    "load_registry": "src.core.project_registry",
    "get_component": "src.v3.v3_012_ui_components",
    "update_component": "src.core.project_registry",
    "get_approved_patterns": "src.core.project_registry",
    "get_agent_components": "src.core.project_registry",
    "transfer_component_ownership": "src.core.project_registry",
    "get_registry_summary": "src.core.project_registry",
    "error_handler": "src.core.shared_error_handling",
    "safe_execute": "src.core.shared_error_handling",
    "handle_async_error": "src.core.shared_error_handling",
    "create_error_response": "src.core.shared_error_handling",
    "log_and_continue": "src.core.shared_error_handling",
    "log_and_raise": "src.core.shared_error_handling",
    "handle_discord_interaction_error": "src.core.shared_error_handling",
    "handle_database_error": "src.core.tracing.error_tracker",
    "handle_network_error": "src.core.tracing.error_tracker",
    "handle_file_operation_error": "src.core.shared_error_handling",
    "handle_validation_error": "src.core.shared_error_handling",
    "get_module_logger": "src.core.shared_logging",
    "log_function_entry": "src.core.shared_logging",
    "log_function_exit": "src.core.shared_logging",
    "log_performance": "src.core.shared_logging",
    "configure_logging": "src.core.shared_logging",
    "get_logger": "src.core.shared_logging",
    "log_function_call": "src.core.shared_logging",
    "log_error_with_context": "src.core.shared_logging",
    "validate_required_fields": "src.validation.validation_utils",
    "validate_agent_message": "src.core.shared_validation",
    "validate_coordinates": "src.services.messaging.enhanced_pyautogui_handler",
    "validate_discord_config": "src.core.shared_validation",
    "validate_v2_compliance": "src.core.shared_validation",
    "validate_with_custom_validator": "src.core.shared_validation",
    "validate_not_none": "src.core.shared_validation",
    "validate_not_empty": "src.core.shared_validation",
    "validate_string_length": "src.core.shared_validation",
    "validate_email": "src.core.shared_validation",
    "validate_agent_id": "src.services.messaging.messaging_core",
    "validate_file_path": "src.core.shared_validation",
    "validate_directory_path": "src.core.shared_validation",
    "validate_config_dict": "src.core.shared_validation",
    "validate_positive_number": "src.core.shared_validation",
    "validate_range": "src.core.shared_validation",
    "validate_enum_value": "src.core.shared_validation",
    "break_acknowledgement_loop": "src.core.swarm_action_protocol",
    "check_acknowledgement_loop": "src.core.swarm_action_protocol",
    "force_action": "src.core.swarm_action_protocol",
    "_get_required_deliverables": "src.core.swarm_action_protocol",
    "validate_action_taken": "src.core.swarm_action_protocol",
    "create_unified_coordinate_loader": "src.core.unified_coordinate_loader",
    "load_coordinates": "src.core.unified_coordinate_loader",
    "_load_primary_config": "src.core.unified_coordinate_loader",
    "_load_backup_config": "src.core.unified_coordinate_loader",
    "_load_environment_config": "src.core.unified_coordinate_loader",
    "get_active_agents": "src.discord.realtime_coordination",
    "_save_config": "src.core.unified_coordinate_loader",
    "export_coordinate_report": "src.core.unified_coordinate_loader",
    "create_unified_ml_pipeline": "src.core.unified_ml_pipeline",
    "_ensure_storage_path": "src.core.unified_ml_pipeline",
    "create_model": "src.ml.ml_pipeline_system_v2",
    "prepare_training_data": "src.core.unified_ml_pipeline",
    "train_model": "src.ml.tensorflow_infrastructure",
    "make_prediction": "src.core.unified_ml_pipeline",
    "save_model": "src.ml.tensorflow_infrastructure",
    "load_model": "src.ml.tensorflow_infrastructure",
    "get_model_info": "src.ml.tensorflow_infrastructure",
    "get_pipeline_metrics": "src.core.unified_ml_pipeline",
    "validate_model_config": "src.core.unified_ml_pipeline",
    "export_model_config": "src.core.unified_ml_pipeline",
    "reset_pipeline": "src.ml.ml_pipeline_manager",
    "review_pull_request": "src.core.pr_review_core",
    "get_pending_reviews": "src.core.pr_review_core",
    "get_agent_prs": "src.core.pr_review_core",
    "get_review_stats": "src.core.pr_review_core",
    "start_review": "src.core.pr_review_core",
    "check_duplication": "src.core.pr_review_validators",
    "check_anti_patterns": "src.core.vibe_check_patterns",
    "load_existing_prs": "src.core.pr_review_storage",
    "save_prs": "src.core.pr_review_storage",
    "check_complexity": "src.core.vibe_check_analyzers",
    "check_function_length": "src.core.vibe_check_analyzers",
    "check_nesting_depth": "src.core.vibe_check_analyzers",
    "check_parameter_count": "src.core.vibe_check_analyzers",
    "check_file_length": "src.core.vibe_check_analyzers",
    "_calculate_nesting_depth": "src.core.vibe_check_analyzers",
    "check_directory": "src.team_beta.vscode_quality_gates",
    "run_pre_commit_check": "src.core.vibe_check_core",
    "_load_existing_prs": "src.core.pr_review_core",
    "_save_prs": "src.core.pr_review_core",
    "_assign_reviewer": "src.core.pr_review_core",
    "_create_rejection_result": "src.core.pr_review_core",
    "_generate_review_feedback": "src.core.pr_review_core",
    "_calculate_avg_review_time": "src.core.pr_review_core",
    "_get_common_violations": "src.core.pr_review_core",
    "run_vibe_check": "src.core.pr_review_validators",
    "check_design_compliance": "src.core.pr_review_validators",
    "check_error_handling": "src.core.pr_review_validators",
    "check_documentation": "src.core.pr_review_validators",
    "vibe_check_file": "src.core.vibe_check_refactored",
    "vibe_check_directory": "src.core.vibe_check_refactored",
    "vibe_check_strict": "src.core.vibe_check_refactored",
    "get_ssot_manager": "src.core.ssot_manager",
    "initialize_ssot": "src.core.ssot_manager",
    "get_agent_config": "src.core.cross_platform_env_utils",
    "set_agent_config": "src.core.ssot_manager",
    "get_system_config": "src.core.ssot_manager",
    "set_system_config": "src.core.ssot_manager",
    "get_messaging_config": "src.core.ssot_manager",
    "set_messaging_config": "src.core.ssot_manager",
    "get_quality_gates_config": "src.core.ssot_manager",
    "set_quality_gates_config": "src.core.ssot_manager",
    "get_protocol_config": "src.core.ssot_manager",
    "set_protocol_config": "src.core.ssot_manager",
    "get_database_config": "src.core.ssot_manager",
    "set_database_config": "src.core.ssot_manager",
    "get_monitoring_config": "src.core.ssot_manager",
    "set_monitoring_config": "src.core.ssot_manager",
    "validate_config": "src.ml.ml_pipeline_utils",
    "get_all_config": "src.core.ssot_manager",
    "reset_config": "src.core.ssot_manager",
    "export_config": "src.core.ssot_manager",
    "import_config": "src.core.ssot_manager",
    "handle_registry_command": "src.core.coherent_collaboration_cli_handlers",
    "handle_design_command": "src.core.coherent_collaboration_cli_handlers",
    "handle_vibe_command": "src.core.coherent_collaboration_cli_handlers",
    "handle_pr_command": "src.core.coherent_collaboration_cli_handlers",
    "handle_knowledge_command": "src.core.coherent_collaboration_cli_handlers",
    "print_vibe_report": "src.core.coherent_collaboration_cli_handlers",
    "get_design_knowledge_base": "src.core.design_authority_knowledge",
    "create_kiss_principle": "src.core.knowledge_base_data",
    "create_yagni_principle": "src.core.knowledge_base_data",
    "create_sr_principle": "src.core.knowledge_base_data",
    "create_error_handling_principle": "src.core.knowledge_base_data",
    "create_fail_fast_principle": "src.core.knowledge_base_data",
    "create_composition_principle": "src.core.knowledge_base_data",
    "create_simple_function_pattern": "src.core.knowledge_base_data",
    "create_data_class_pattern": "src.core.knowledge_base_data",
    "create_repository_pattern": "src.core.knowledge_base_data",
    "create_service_layer_pattern": "src.core.knowledge_base_data",
    "create_god_class_anti_pattern": "src.core.knowledge_base_data",
    "create_premature_optimization_anti_pattern": "src.core.knowledge_base_data",
    "create_bare_except_anti_pattern": "src.core.knowledge_base_data",
    "create_stringly_typed_anti_pattern": "src.core.knowledge_base_data",
    "create_copy_paste_anti_pattern": "src.core.knowledge_base_data",
    "get_project_guidelines": "src.core.knowledge_base_data",
    "get_path_env": "src.core.cross_platform_env_core",
    "add_to_path": "src.core.cross_platform_env_core",
    "get_python_path": "src.core.cross_platform_env_core",
    "get_python_version": "src.core.cross_platform_env_core",
    "validate_required_env_vars": "src.core.cross_platform_env_advanced",
    "get_development_config": "src.core.cross_platform_env_utils",
    "_get_recent_events": "src.core.database.data_replication_system",
    "_get_overall_health_status": "src.core.database.database_monitoring_system_v2",
    "_get_health_summary": "src.core.database.database_monitoring_system_v2",
    "_get_performance_summary": "src.core.database.database_monitoring_system_v2",
    "_initialize_configurations": "src.core.database.distributed_db_manager",
    "add_config": "src.core.database.distributed_db_manager",
    "_initialize_default_thresholds": "src.core.database.monitoring.metrics_collector",
    "add_threshold": "src.core.database.monitoring.alert_manager",
    "remove_threshold": "src.core.database.monitoring.alert_manager",
    "get_thresholds": "src.core.database.monitoring.metrics_collector",
    "update_threshold": "src.core.database.monitoring.alert_manager",
    "_generate_secret": "src.core.security.jwt_manager",
    "create_access_token": "src.core.security.jwt_manager",
    "create_refresh_token": "src.core.security.jwt_manager",
    "verify_token": "src.core.security.jwt_manager",
    "refresh_access_token": "src.core.security.jwt_manager",
    "get_token_info": "src.core.security.jwt_manager",
    "is_token_expired": "src.core.security.jwt_manager",
    "extract_user_id": "src.core.security.jwt_manager",
    "extract_agent_id": "src.core.security.jwt_manager",
    "extract_roles": "src.core.security.jwt_manager",
    "extract_permissions": "src.core.security.jwt_manager",
    "has_role": "src.core.security.jwt_manager",
    "has_permission": "src.core.security.jwt_manager",
    "create_agent_token": "src.core.security.jwt_manager",
    "validate_agent_token": "src.core.security.jwt_manager",
    "_initialize_default_client": "src.core.security.oauth2_provider",
    "create_client": "src.core.security.oauth2_provider",
    "validate_client": "src.core.security.oauth2_provider",
    "generate_authorization_code": "src.core.security.oauth2_provider",
    "exchange_code_for_token": "src.core.security.oauth2_provider",
    "_generate_access_token": "src.core.security.oauth2_provider",
    "validate_token": "src.core.security.oauth2_provider",
    "revoke_token": "src.core.security.oauth2_provider",
    "get_client_info": "src.core.security.oauth2_provider",
    "list_clients": "src.core.security.oauth2_provider",
    "deactivate_client": "src.core.security.oauth2_provider",
    "security": "src.core.security.security_cli",
    "validate": "src.observability.memory.integrations.messaging_checks",
    "input": "src.core.security.security_cli",
    "static": "src.core.security.security_cli",
    "password": "src.core.security.security_cli",
    "hash": "src.core.security.security_cli",
    "verify": "src.core.security.security_cli",
    "session": "src.core.security.security_cli",
    "create": "src.architecture.design_patterns",
    "revoke": "src.core.security.security_cli",
    "audit": "src.core.security.security_cli",
    "_initialize_default_policies": "src.core.security.security_manager",
    "hash_password": "src.core.security.security_manager",
    "verify_password": "src.core.security.security_manager",
    "check_account_lockout": "src.core.security.security_manager",
    "record_failed_attempt": "src.core.security.security_manager",
    "reset_failed_attempts": "src.core.security.security_manager",
    "_get_user_policy": "src.core.security.security_manager",
    "validate_session": "src.core.security.security_manager",
    "revoke_session": "src.core.security.security_manager",
    "create_oauth2_client": "src.core.security.security_manager",
    "oauth2_authorize": "src.core.security.security_manager",
    "oauth2_token_exchange": "src.core.security.security_manager",
    "validate_oauth2_token": "src.core.security.security_manager",
    "get_security_policy": "src.core.security.security_manager",
    "update_security_policy": "src.core.security.security_manager",
    "get_active_sessions": "src.services.vector_database.enhanced_collaboration",
    "cleanup_expired_sessions": "src.core.security.security_manager",
    "track_error": "src.core.tracing.error_tracker",
    "track_custom_error": "src.core.tracing.error_tracker",
    "resolve_error": "src.core.tracing.error_tracker",
    "get_error": "src.core.tracing.error_tracker",
    "get_errors_by_severity": "src.core.tracing.error_tracker",
    "get_errors_by_category": "src.core.tracing.error_tracker",
    "get_errors_by_user": "src.core.tracing.error_tracker",
    "get_errors_by_agent": "src.core.tracing.error_tracker",
    "get_recent_errors": "src.core.tracing.error_tracker",
    "get_error_statistics": "src.services.thea.thea_error_recovery",
    "get_error_trends": "src.core.tracing.error_tracker",
    "export_errors": "src.core.tracing.error_tracker",
    "clear_resolved_errors": "src.core.tracing.error_tracker",
    "handle_exception": "src.core.tracing.error_tracker",
    "handle_auth_error": "src.core.tracing.error_tracker",
    "_setup_tracer": "src.core.tracing.jaeger_tracer",
    "_instrument_libraries": "src.core.tracing.jaeger_tracer",
    "trace_span": "src.core.tracing.jaeger_tracer",
    "trace_function": "src.core.tracing.jaeger_tracer",
    "trace_async_function": "src.core.tracing.jaeger_tracer",
    "add_span_tags": "src.core.tracing.jaeger_tracer",
    "record_event": "src.core.tracing.jaeger_tracer",
    "set_span_status": "src.tracing.distributed_tracing_system",
    "get_trace_id": "src.core.tracing.jaeger_tracer",
    "get_span_id": "src.core.tracing.jaeger_tracer",
    "create_child_span": "src.core.tracing.jaeger_tracer",
    "_initialize_default_tracer": "src.core.tracing.jaeger_tracer",
    "get_tracer": "src.core.tracing.jaeger_tracer",
    "create_service_tracer": "src.core.tracing.jaeger_tracer",
    "shutdown_all": "src.core.tracing.jaeger_tracer",
    "_monitor_loop": "src.observability.memory.watchdog",
    "_collect_system_metrics": "src.core.tracing.performance_monitor",
    "_create_metric": "src.core.tracing.performance_monitor",
    "record_custom_metric": "src.core.tracing.performance_monitor",
    "record_timing": "src.core.tracing.performance_monitor",
    "record_counter": "src.core.tracing.performance_monitor",
    "get_current_metrics": "src.services.discord_commander.performance_monitor",
    "get_metrics_by_name": "src.core.tracing.performance_monitor",
    "get_performance_stats": "src.core.tracing.performance_monitor",
    "clear_old_metrics": "src.core.tracing.performance_monitor",
    "__call__": "src.architecture.patterns.singleton_factory",
    "start_request": "src.core.tracing.request_tracker",
    "update_request_status": "src.core.tracing.request_tracker",
    "complete_request": "src.core.tracing.request_tracker",
    "get_request_info": "src.core.tracing.request_tracker",
    "get_active_requests": "src.services.messaging.coordination_tracker",
    "get_completed_requests": "src.core.tracing.request_tracker",
    "get_requests_by_user": "src.core.tracing.request_tracker",
    "get_requests_by_agent": "src.core.tracing.request_tracker",
    "get_request_statistics": "src.core.tracing.request_tracker",
    "cleanup_old_requests": "src.core.tracing.request_tracker",
    "export_request_data": "src.core.tracing.request_tracker",
    "set_config": "src.core.config.unified_config_manager",
    "reload_config": "src.core.config.unified_config_manager",
    "_apply_env_overrides": "src.core.config.unified_config_manager",
    "_convert_env_value": "src.core.config.unified_config_manager",
    "_get_expected_type": "src.core.config.unified_config_manager",
    "_set_nested_value": "src.core.config.unified_config_manager",
    "_validate_config": "src.core.config.unified_config_manager",
    "_validate_section": "src.core.config.unified_config_manager",
    "reload": "src.core.config.unified_config_manager",
    "save": "src.observability.memory.ledger",
    "get_all": "src.core.config.unified_config_manager",
    "is_modified": "src.core.config.unified_config_manager",
    "submit_task": "src.core.resource_management.thread_manager",
    "cancel_task": "src.core.task.priority_scheduler",
    "get_task_stats": "src.core.task.priority_scheduler",
    "_start_workers": "src.core.task.priority_scheduler",
    "_worker_loop": "src.core.task.priority_scheduler",
    "_get_next_task": "src.core.task.priority_scheduler",
    "_is_task_ready": "src.core.task.priority_scheduler",
    "_get_task_handler": "src.core.task.priority_scheduler",
    "generate_prompt": "src.aletheia.aletheia_prompt_manager",
    "create_template": "src.core.prompts.aletheia_manager",
    "update_template": "src.core.prompts.aletheia_manager",
    "delete_template": "src.core.prompts.aletheia_manager",
    "list_templates": "src.v3.v3_009_response_generation_core",
    "get_template_content": "src.core.prompts.aletheia_manager",
    "update_memory": "src.core.prompts.aletheia_manager",
    "get_memory": "src.services.persistent_memory_core",
    "clear_memory": "src.core.memory.persistent_memory",
    "get_prompt_stats": "src.core.prompts.aletheia_manager",
    "_load_memory_cache": "src.core.prompts.aletheia_manager",
    "_save_memory_cache": "src.core.prompts.aletheia_manager",
    "_get_template": "src.v3.v3_009_response_generation_core",
    "set_memory": "src.core.memory.persistent_memory",
    "delete_memory": "src.memory.persistent_memory",
    "memory_exists": "src.core.memory.persistent_memory",
    "list_memory_keys": "src.core.memory.persistent_memory",
    "get_memory_stats": "src.services.messaging.memory_leak_fixes",
    "cleanup_memory": "src.services.consolidated_messaging_service_core",
    "_compress_data": "src.core.memory.persistent_memory",
    "_decompress_data": "src.core.memory.persistent_memory",
    "delete": "src.architecture.patterns.command_repository",
    "exists": "src.core.memory.persistent_memory",
    "list_keys": "src.core.memory.persistent_memory",
    "register": "src.architecture.patterns.singleton_factory",
    "cleanup_all": "src.domain.entities.agent",
    "get_thread_manager": "src.core.resource_management.thread_manager",
    "start_thread": "src.core.resource_management.thread_manager",
    "stop_all": "src.observability.memory.watchdog",
    "get_sqlite_manager": "src.core.resource_management.sqlite_manager",
    "connection": "src.core.resource_management.sqlite_manager",
    "close_all": "src.core.resource_management.sqlite_manager",
    "create_devlog_sync": "src.services.discord_devlog_service",
    "_load_agent_channels": "src.services.discord_devlog_service",
    "_format_devlog_content": "src.services.discord_devlog_service",
    "iso_now": "src.services.event_format",
    "cycle_done": "src.services.event_format",
    "blocker": "src.services.event_format",
    "ssot_validation": "src.services.event_format",
    "integration_scan": "src.services.event_format",
    "_load_configuration": "src.services.discord_bot_integrated",
    "_load_prompts": "src.services.aletheia_prompt_manager",
    "store_prompt": "src.services.aletheia_prompt_manager",
    "get_prompt": "src.services.aletheia_prompt_manager",
    "list_prompts": "src.services.aletheia_prompt_manager",
    "optimize_prompt": "src.services.aletheia_prompt_manager",
    "_calculate_improvement": "src.services.aletheia_prompt_manager",
    "create_version": "src.ml.model_versioning_core",
    "get_version": "src.ml.model_versioning_core",
    "get_current_version": "src.services.aletheia_prompt_manager",
    "track_usage": "src.services.aletheia_prompt_manager",
    "get_analytics": "src.services.aletheia_prompt_manager",
    "_generate_key": "src.services.persistent_memory_core",
    "set_access": "src.services.persistent_memory_core",
    "check_access": "src.services.persistent_memory_core",
    "encrypt_content": "src.services.persistent_memory_core",
    "decrypt_content": "src.services.persistent_memory_core",
    "calculate_distance": "src.services.coordinate_manager",
    "calculate_angle": "src.services.coordinate_manager",
    "normalize_coordinate": "src.services.coordinate_manager",
    "interpolate_coordinates": "src.services.coordinate_manager",
    "add_filter": "src.services.coordinate_manager",
    "apply_filters": "src.services.coordinate_manager",
    "_is_in_range": "src.services.coordinate_manager",
    "add_batch": "src.services.coordinate_manager",
    "process_batch": "src.services.coordinate_manager",
    "_add_coordinates": "src.services.coordinate_manager",
    "_subtract_coordinates": "src.services.coordinate_manager",
    "_multiply_coordinates": "src.services.coordinate_manager",
    "_divide_coordinates": "src.services.coordinate_manager",
    "_calculate_distance": "src.services.coordinate_manager",
    "_normalize_coordinate": "src.services.coordinate_manager",
    "get_processing_stats": "src.services.coordinate_manager",
    "_setup_routes": "src.services.devlog_analytics_api",
    "_generate_analytics": "src.services.devlog_analytics_api",
    "_get_export_data": "src.services.devlog_analytics_api",
    "_get_agents_data": "src.services.devlog_analytics_api",
    "_get_trends_data": "src.services.devlog_analytics_api",
    "_get_top_agents": "src.services.devlog_analytics_api",
    "_get_agent_role": "src.services.devlog_analytics_api",
    "_export_json": "src.services.devlog_analytics_api",
    "_export_csv": "src.services.devlog_analytics_api",
    "_export_excel": "src.services.devlog_analytics_api",
    "get_devlogs": "src.services.devlog_analytics_api",
    "get_devlog_analytics": "src.services.devlog_analytics_api",
    "export_devlogs": "src.services.devlog_analytics_api",
    "get_trends": "src.services.devlog_analytics_api",
    "_load_style_parameters": "src.services.devlog_storytelling_service",
    "_create_default_style_config": "src.services.devlog_storytelling_service",
    "_ensure_directories": "src.services.devlog_storytelling_service",
    "process_devlog_batch": "src.services.devlog_storytelling",
    "_load_recent_devlogs": "src.services.devlog_storytelling_service",
    "_analyze_devlog_batch": "src.services.devlog_storytelling_service",
    "_create_story_chapter": "src.services.devlog_storytelling_service",
    "_generate_chapter_title": "src.services.devlog_storytelling_service",
    "_write_story_content": "src.services.devlog_storytelling_service",
    "_create_opening_hook": "src.services.devlog_storytelling_service",
    "_convert_devlog_to_narrative": "src.services.devlog_storytelling_service",
    "_create_resolution": "src.services.devlog_storytelling_service",
    "_create_next_chapter_setup": "src.services.devlog_storytelling_service",
    "_analyze_character_progressions": "src.services.devlog_storytelling_service",
    "_analyze_world_developments": "src.services.devlog_storytelling_service",
    "_save_story_chapter": "src.services.devlog_storytelling_service",
    "_update_character_registry": "src.services.devlog_storytelling_service",
    "_update_world_rulebook": "src.services.devlog_storytelling_service",
    "_get_webhook": "src.services.discord_line_emitter",
    "create_github_protocol_db": "src.services.github_protocol_models",
    "revoke_permission": "src.services.github_protocol_models",
    "check_permission": "src.services.github_protocol_models",
    "create_operation": "src.services.github_protocol_models",
    "update_operation_status": "src.services.github_protocol_models",
    "get_agent_operations": "src.services.github_protocol_service",
    "get_repository_config": "src.services.github_protocol_service",
    "set_repository_config": "src.services.github_protocol_service",
    "create_workflow_template": "src.services.github_protocol_service",
    "get_workflow_template": "src.services.github_protocol_service",
    "increment_template_usage": "src.services.github_protocol_models",
    "_log_audit": "src.services.github_protocol_models",
    "get_audit_logs": "src.services.github_protocol_service",
    "import_data": "src.services.github_protocol_models",
    "create_github_protocol_service": "src.services.github_protocol_service",
    "_initialize_default_configs": "src.services.github_protocol_service",
    "grant_agent_permission": "src.services.github_protocol_service",
    "check_agent_permission": "src.services.github_protocol_service",
    "export_protocol_data": "src.services.github_protocol_service",
    "import_protocol_data": "src.services.github_protocol_service",
    "create_demo_session": "src.services.multichat_session_demo",
    "simulate_chat_messages": "src.services.multichat_session_demo",
    "add_message": "src.services.multichat_session_persistence",
    "demonstrate_persistence": "src.services.multichat_session_demo",
    "demonstrate_storage_options": "src.services.multichat_session_demo",
    "demonstrate_cleanup": "src.services.multichat_session_demo",
    "init_storage": "src.services.multichat_session_persistence",
    "init_json_storage": "src.services.multichat_session_persistence",
    "init_sqlite_storage": "src.services.multichat_session_persistence",
    "init_memory_storage": "src.services.multichat_session_persistence",
    "save_session": "src.services.multichat_session_persistence",
    "save_session_json": "src.services.multichat_session_persistence",
    "save_session_sqlite": "src.services.multichat_session_persistence",
    "save_session_memory": "src.services.multichat_session_persistence",
    "get_session": "src.services.vector_database.enhanced_collaboration",
    "get_session_json": "src.services.multichat_session_persistence",
    "get_session_sqlite": "src.services.multichat_session_persistence",
    "get_session_memory": "src.services.multichat_session_persistence",
    "save_message_json": "src.services.multichat_session_persistence",
    "save_message_sqlite": "src.services.multichat_session_persistence",
    "save_message_memory": "src.services.multichat_session_persistence",
    "get_messages": "src.services.multichat_session_persistence",
    "get_messages_json": "src.services.multichat_session_persistence",
    "get_messages_sqlite": "src.services.multichat_session_persistence",
    "get_messages_memory": "src.services.multichat_session_persistence",
    "cleanup_old_sessions": "src.services.multichat_session_persistence",
    "cleanup_json_sessions": "src.services.multichat_session_persistence",
    "cleanup_sqlite_sessions": "src.services.multichat_session_persistence",
    "cleanup_memory_sessions": "src.services.multichat_session_persistence",
    "load_json_data": "src.services.multichat_session_persistence",
    "save_json_data": "src.services.multichat_session_persistence",
    "store_memory": "src.memory.persistent_memory",
    "retrieve_memory": "src.memory.persistent_memory",
    "search_memories": "src.services.persistent_memory_advanced",
    "get_memories_by_category": "src.services.persistent_memory_advanced",
    "list_memories": "src.services.persistent_memory_core",
    "_load": "src.services.secret_store",
    "_save": "src.services.secret_store",
    "set_webhook": "src.services.secret_store",
    "get_webhook": "src.services.secret_store",
    "delete_webhook": "src.services.secret_store",
    "list_webhooks": "src.services.secret_store",
    "get_webhook_url": "src.services.secret_store",
    "get_service_manager": "src.services.service_manager",
    "get_service_status": "src.architecture.service_layer",
    "signal_handler": "src.services.service_manager",
    "_store_health_report": "src.services.service_manager",
    "_log_service_status": "src.services.service_manager",
    "get_social_media_status": "src.services.social_media_integration",
    "create_onboarding_message": "src.services.consolidated_messaging_service_utils",
    "execute_enhanced_onboarding": "src.services.enhanced_onboarding",
    "onboard_all_active_agents": "src.services.enhanced_onboarding",
    "create_soft_onboarding_message": "src.services.soft_onboarding",
    "execute_soft_onboarding": "src.services.soft_onboarding",
    "soft_onboard_all_active_agents": "src.services.soft_onboarding",
    "check_violations": "src.services.consolidated_messaging_service_core",
    "is_active": "src.services.consolidated_messaging_service_core",
    "track_coordination_request": "src.services.messaging.coordination_tracker",
    "check_response_protocol": "src.services.messaging.coordination_tracker",
    "get_memory_status": "src.services.messaging.memory_leak_fixes",
    "_send_via_pyautogui": "src.services.consolidated_messaging_core",
    "update_agent_status": "src.services.dashboard.swarm_coordination_dashboard",
    "get_messaging_metrics": "src.services.consolidated_messaging_core",
    "stall_agent": "src.services.consolidated_messaging_service_main",
    "unstall_agent": "src.services.consolidated_messaging_service_main",
    "create_message_formatter": "src.services.consolidated_messaging_service_utils",
    "create_message_validator": "src.services.consolidated_messaging_service_utils",
    "create_message_sender": "src.services.consolidated_messaging_service_utils",
    "create_agent_onboarder": "src.services.consolidated_messaging_service_utils",
    "format_a2a_message": "src.services.consolidated_messaging_service_utils",
    "get_quality_guidelines": "src.services.consolidated_messaging_service_utils",
    "validate_before_paste": "src.services.consolidated_messaging_service_utils",
    "paste_to_coords": "src.services.consolidated_messaging_service_utils",
    "get_agent_default_role": "src.services.consolidated_messaging_service_utils",
    "build_parser": "src.services.messaging.project_update_cli",
    "broadcast_message": "src.services.discord_bot.core.discord_agent_interface",
    "_create_devlog_entry": "src.services.consolidated_messaging_service_main",
    "hard_onboard_agent": "src.services.consolidated_messaging_service_main",
    "hard_onboard_all_agents": "src.services.consolidated_messaging_service_main",
    "_load_memories": "src.services.persistent_memory_core",
    "compress_memory": "src.services.persistent_memory_core",
    "decompress_memory": "src.services.persistent_memory_core",
    "organize_memory": "src.services.persistent_memory_advanced",
    "get_memories_by_hierarchy": "src.services.persistent_memory_advanced",
    "broadcast": "src.services.messaging.delivery.fallback",
    "get_coordinate_loader": "src.services.messaging.coordinates",
    "list_agents": "src.services.messaging.messaging_core",
    "load_all_active_coords": "src.services.messaging.coordinates",
    "show": "src.services.messaging.history",
    "hard_onboarding": "src.services.messaging.onboarding_bridge",
    "claim_task": "src.services.messaging.task_handlers",
    "handle_claim": "src.services.messaging.task_handlers",
    "handle_complete": "src.services.messaging.task_handlers",
    "send_to_thea": "src.services.messaging.thea_handlers",
    "get_current_agent": "src.services.messaging.agent_context",
    "set_agent_context": "src.services.messaging.agent_context",
    "clear_agent_context": "src.services.messaging.agent_context",
    "_detect_agent_context": "src.services.messaging.agent_context",
    "_detect_from_environment": "src.services.messaging.agent_context",
    "_detect_from_workspace": "src.services.messaging.agent_context",
    "_detect_from_config": "src.services.messaging.agent_context",
    "_detect_from_process": "src.services.messaging.agent_context",
    "_is_valid_agent_id": "src.services.messaging.agent_context",
    "_extract_agent_from_path": "src.services.messaging.agent_context",
    "_read_agent_from_config": "src.services.messaging.agent_context",
    "_extract_agent_from_string": "src.services.messaging.agent_context",
    "clear_context": "src.services.messaging.agent_context",
    "coordinate_task": "src.services.messaging.intelligent_coordinator",
    "optimize_coordination": "src.services.messaging.intelligent_coordinator_core",
    "get_agent_profile": "src.services.messaging.intelligent_coordinator",
    "route_task": "src.services.messaging.intelligent_coordinator",
    "analyze_coordination_patterns": "src.services.messaging.intelligent_coordinator",
    "recommend_coordination_strategy": "src.services.messaging.intelligent_coordinator",
    "update_agent_capabilities": "src.services.messaging.intelligent_coordinator",
    "get_coordination_status": "src.integration.qa_coordination.core_coordination",
    "_learn_from_message": "src.services.messaging.intelligent_messaging",
    "_learn_from_broadcast": "src.services.messaging.intelligent_messaging",
    "_get_message_suggestions": "src.services.messaging.intelligent_messaging",
    "_get_broadcast_insights": "src.services.messaging.intelligent_messaging",
    "_suggest_optimal_timing": "src.services.messaging.intelligent_messaging",
    "_suggest_message_optimization": "src.services.messaging.intelligent_messaging",
    "_calculate_success_probability": "src.services.messaging.intelligent_coordinator_core",
    "_get_communication_history": "src.services.messaging.intelligent_messaging",
    "_suggest_message_format": "src.services.messaging.intelligent_messaging",
    "_get_response_patterns": "src.services.messaging.intelligent_messaging",
    "_analyze_response_types": "src.services.messaging.intelligent_messaging",
    "get_agent_communication_intelligence": "src.services.messaging.intelligent_messaging",
    "_calculate_communication_effectiveness": "src.services.messaging.intelligent_messaging",
    "_get_optimal_strategies": "src.services.messaging.intelligent_messaging",
    "map_priority": "src.services.messaging.models_optimized",
    "map_tag": "src.services.messaging.models_optimized",
    "create_message": "src.services.messaging.models_optimized",
    "format_message": "src.services.messaging.messaging_core",
    "validate_message": "src.services.messaging.models_optimized",
    "multichat_respond": "src.services.messaging.multichat_response",
    "multichat_start": "src.services.messaging.multichat_response",
    "multichat_broadcast": "src.services.messaging.multichat_response",
    "multichat_end": "src.services.messaging.multichat_response",
    "multichat_join": "src.services.messaging.multichat_response",
    "respond_to_message": "src.services.messaging.multichat_response",
    "start_multichat_session": "src.services.messaging.multichat_response",
    "join_multichat_session": "src.services.messaging.multichat_response",
    "broadcast_to_multichat": "src.services.messaging.multichat_response",
    "end_multichat_session": "src.services.messaging.multichat_response",
    "get_chat_history": "src.services.messaging.multichat_response",
    "get_active_chats": "src.services.messaging.multichat_response",
    "_format_response_with_context": "src.services.messaging.multichat_response",
    "_create_invitation_message": "src.services.messaging.multichat_response",
    "_track_response": "src.services.messaging.multichat_response",
    "_learn_from_response": "src.services.messaging.multichat_response",
    "parse_agents": "src.services.messaging.project_update_cli",
    "parse_metadata": "src.services.messaging.project_update_cli",
    "send_project_update": "src.services.messaging.project_update_system",
    "send_milestone_notification": "src.services.messaging.project_update_system",
    "send_system_status_update": "src.services.messaging.project_update_system",
    "send_v2_compliance_update": "src.services.messaging.project_update_system",
    "send_documentation_cleanup_update": "src.services.messaging.project_update_system",
    "send_feature_announcement": "src.services.messaging.project_update_system",
    "_format_update_message": "src.services.messaging.project_update_system",
    "_record_update": "src.services.messaging.project_update_system",
    "get_update_history": "src.services.messaging.project_update_system",
    "get_update_statistics": "src.services.messaging.project_update_system",
    "workflow_send_message": "src.services.messaging.workflow_integration",
    "workflow_coordinate_task": "src.services.messaging.workflow_integration",
    "workflow_request_help": "src.services.messaging.workflow_integration",
    "workflow_status_update": "src.services.messaging.workflow_integration",
    "workflow_task_completion": "src.services.messaging.workflow_integration",
    "validate_message_content": "src.services.messaging.message_validator",
    "validate_priority": "src.services.messaging.message_validator",
    "validate_from_agent": "src.services.messaging.message_validator",
    "validate_send_message_params": "src.services.messaging.message_validator",
    "validate_broadcast_params": "src.services.messaging.message_validator",
    "validate_onboarding_params": "src.services.messaging.message_validator",
    "sanitize_message": "src.services.messaging.message_validator",
    "get_validation_summary": "src.validation.validation_framework_core",
    "get_agent_info": "src.services.agent_devlog.devlog_poster",
    "create_message_metadata": "src.services.messaging.messaging_core",
    "log_message_delivery": "src.services.messaging.messaging_core",
    "acknowledge_request": "src.services.messaging.coordination_tracker",
    "mark_request_responded": "src.services.messaging.coordination_tracker",
    "mark_request_completed": "src.services.messaging.coordination_tracker",
    "get_request_status": "src.services.messaging.coordination_tracker",
    "cleanup_completed_requests": "src.services.messaging.coordination_tracker",
    "get_coordination_stats": "src.services.messaging.coordination_tracker",
    "is_available": "src.domain.entities.agent",
    "focus_agent_window": "src.services.messaging.enhanced_pyautogui_handler",
    "clear_input_area": "src.services.messaging.enhanced_pyautogui_handler",
    "create_new_tab": "src.services.messaging.enhanced_pyautogui_handler",
    "send_message_content": "src.services.messaging.pyautogui_handler",
    "send_bulk_messages": "src.services.messaging.pyautogui_handler",
    "get_screen_info": "src.services.messaging.enhanced_pyautogui_handler",
    "enhance_pyautogui_handler_with_validation": "src.services.messaging.enhanced_message_validator",
    "validate_message_for_paste": "src.services.messaging.enhanced_message_validator",
    "test_clipboard_functionality": "src.services.messaging.enhanced_message_validator",
    "validate_and_prepare_for_paste": "src.services.messaging.enhanced_message_validator",
    "get_paste_alternative_strategy": "src.services.messaging.enhanced_message_validator",
    "send_message_content_with_validation": "src.services.messaging.enhanced_pyautogui_handler",
    "_try_direct_paste": "src.services.messaging.enhanced_pyautogui_handler",
    "_try_clear_and_paste": "src.services.messaging.enhanced_pyautogui_handler",
    "_try_select_all_and_paste": "src.services.messaging.enhanced_pyautogui_handler",
    "_send_message_by_typing": "src.services.messaging.enhanced_pyautogui_handler",
    "_type_with_line_breaks": "src.services.messaging.enhanced_pyautogui_handler",
    "send_message_to_agent_with_validation": "src.services.messaging.enhanced_pyautogui_handler",
    "send_bulk_messages_with_validation": "src.services.messaging.enhanced_pyautogui_handler",
    "test_messaging_functionality": "src.services.messaging.enhanced_pyautogui_handler",
    "detect_leaks": "src.services.messaging.memory_leak_analyzer",
    "_get_memory_usage": "src.services.discord_commander.performance_monitor",
    "register_resource": "src.services.messaging.memory_leak_analyzer",
    "unregister_resource": "src.services.messaging.memory_leak_analyzer",
    "cleanup_expired_resources": "src.services.messaging.memory_leak_analyzer",
    "get_resource_stats": "src.services.messaging.memory_leak_analyzer",
    "managed_file": "src.services.messaging.memory_leak_fixes",
    "cleanup_stale_handles": "src.services.messaging.memory_leak_analyzer",
    "get_handle_stats": "src.services.messaging.memory_leak_analyzer",
    "analyze_messaging_system": "src.services.messaging.memory_leak_analyzer",
    "_analyze_messaging_components": "src.services.messaging.memory_leak_analyzer",
    "_analyze_pyautogui_handler": "src.services.messaging.memory_leak_analyzer",
    "_analyze_message_validator": "src.services.messaging.memory_leak_analyzer",
    "_analyze_coordination_tracker": "src.services.messaging.memory_leak_analyzer",
    "_analyze_enhanced_validator": "src.services.messaging.memory_leak_analyzer",
    "cleanup_system": "src.services.messaging.memory_leak_analyzer",
    "initialize_memory_management": "src.services.messaging.memory_leak_fixes",
    "cleanup_memory_resources": "src.services.messaging.memory_leak_fixes",
    "add_request": "src.services.messaging.memory_leak_fixes",
    "get_request": "src.services.messaging.memory_leak_fixes",
    "_cleanup_old_requests": "src.services.messaging.memory_leak_fixes",
    "periodic_cleanup": "src.services.messaging.memory_leak_fixes",
    "managed_session": "src.services.messaging.memory_leak_fixes",
    "_cleanup_session": "src.services.messaging.memory_leak_fixes",
    "cleanup_stale_sessions": "src.services.messaging.memory_leak_fixes",
    "cleanup_stale_files": "src.services.messaging.memory_leak_fixes",
    "start_cleanup_service": "src.services.messaging.memory_leak_fixes",
    "stop_cleanup_service": "src.services.messaging.memory_leak_fixes",
    "_cleanup_loop": "src.services.messaging.memory_leak_fixes",
    "find_expert_agents": "src.services.messaging.intelligent_coordinator_core",
    "get_coordination_patterns": "src.services.messaging.intelligent_coordinator_core",
    "create_coordination_plan": "src.integration.qa_coordination.core_coordination",
    "execute_coordination": "src.services.messaging.intelligent_coordinator_core",
    "_has_required_skills": "src.services.messaging.intelligent_coordinator_core",
    "_select_best_agents": "src.services.messaging.intelligent_coordinator_core",
    "_determine_strategy": "src.services.messaging.intelligent_coordinator_core",
    "_estimate_duration": "src.services.messaging.intelligent_coordinator_core",
    "_send_coordination_message": "src.services.messaging.intelligent_coordinator_core",
    "_monitor_coordination": "src.services.messaging.intelligent_coordinator_core",
    "_calculate_metrics": "src.ml.ml_pipeline_core_v2_final",
    "_calculate_pattern_success_rate": "src.services.messaging.intelligent_coordinator_core",
    "_get_current_time": "src.services.messaging.intelligent_coordinator_core",
    "get_available_agents": "src.domain.entities.agent",
    "_format_a2a_message": "src.services.messaging.core.messaging_service",
    "_paste_to_coords": "src.services.messaging.core.messaging_service",
    "_is_agent_active": "src.services.messaging.core.messaging_service",
    "show_history": "src.services.messaging.cli.messaging_cli_clean",
    "run_cli": "src.services.messaging.cli.messaging_cli_clean",
    "send_message_inbox": "src.services.messaging.delivery.inbox_delivery",
    "send_with_fallback": "src.services.messaging.delivery.fallback",
    "_lazy_import": "src.services.messaging.delivery.pyautogui_delivery",
    "_focus_and_clear": "src.services.messaging.delivery.pyautogui_delivery",
    "_paste_or_type": "src.services.messaging.delivery.pyautogui_delivery",
    "deliver_message_pyautogui": "src.services.messaging.delivery.pyautogui_delivery",
    "get_inbox_messages": "src.services.messaging.interfaces.messaging_interfaces",
    "save_message": "src.services.messaging.interfaces.messaging_interfaces",
    "get_message_history": "src.services.messaging.interfaces.messaging_interfaces",
    "from_tuple": "src.services.messaging.models.messaging_models",
    "to_tuple": "src.services.messaging.models.messaging_models",
    "update_delivery": "src.services.messaging.models.messaging_models",
    "create_discord_messaging_integration": "src.services.messaging.providers.discord_provider",
    "setup_slash_commands": "src.services.messaging.providers.discord_provider",
    "list_onboarded_agents": "src.services.messaging.onboarding.onboarding_service",
    "_validate_agent_data": "src.services.messaging.onboarding.onboarding_service",
    "_perform_onboarding": "src.services.messaging.onboarding.onboarding_service",
    "_setup_agent_workspace": "src.services.messaging.onboarding.onboarding_service",
    "_configure_agent_permissions": "src.services.messaging.onboarding.onboarding_service",
    "_setup_agent_communication": "src.services.messaging.onboarding.onboarding_service",
    "get_comprehensive_status": "src.services.messaging.status.status_monitor",
    "_get_project_scanner_status": "src.services.messaging.status.status_monitor",
    "_get_fsm_status": "src.services.messaging.status.status_monitor",
    "_get_agent_task_statuses": "src.services.messaging.status.status_monitor",
    "_get_system_health": "src.services.messaging.status.status_monitor",
    "create_login_detector": "src.services.thea",
    "check_login_status": "src.services.thea.thea_login_detector",
    "is_logged_in": "src.services.thea.thea_login_detector",
    "is_on_thea_page": "src.services.thea.thea_login_detector",
    "send_message_command": "src.services.thea.thea_autonomous_cli",
    "status_command": "src.observability.memory.cli",
    "test_command": "src.services.thea.thea_autonomous_cli",
    "interactive_command": "src.services.thea.thea_autonomous_cli",
    "conversation_command": "src.services.thea.thea_autonomous_cli",
    "analytics_command": "src.services.thea.thea_autonomous_cli",
    "create_cookie_manager": "src.services.thea",
    "create_browser_manager": "src.services.thea.thea_browser_manager",
    "send_analytics_report": "src.services.thea.thea_analytics_reporter",
    "send_violation_alert": "src.services.thea.thea_analytics_reporter",
    "load_project_analytics": "src.services.thea.thea_analytics_reporter",
    "generate_strategic_report": "src.services.thea.thea_analytics_reporter",
    "get_report_status": "src.services.thea.thea_analytics_reporter",
    "_configure_chrome_options": "src.services.thea.thea_browser_manager",
    "cleanup_driver": "src.services.thea.thea_browser_manager",
    "is_selenium_available": "src.services.thea.thea_browser_manager",
    "prepare_message": "src.services.thea.thea_communication_core",
    "send_message_selenium": "src.services.thea.thea_communication_core",
    "_wait_for_response_manual": "src.services.thea.thea_communication_core",
    "capture_screenshot": "src.services.thea.thea_communication_core",
    "save_metadata": "src.services.thea.thea_communication_core",
    "create_conversation_log": "src.services.thea.thea_communication_core",
    "create_analysis_template": "src.services.thea.thea_communication_core",
    "_manual_authentication": "src.services.thea.thea_communication_interface",
    "_send_message_selenium": "src.services.thea.thea_communication_interface",
    "_send_message_manual": "src.services.thea.thea_communication_interface",
    "create_error_recovery": "src.services.thea.thea_error_recovery",
    "_setup_logging": "src.services.thea.thea_autonomous_system",
    "classify_error": "src.services.thea.thea_error_recovery",
    "handle_error": "src.services.thea.thea_error_recovery",
    "_log_error": "src.services.thea.thea_error_recovery",
    "_execute_recovery_strategy": "src.services.thea.thea_error_recovery",
    "_restart_browser": "src.services.thea.thea_error_recovery",
    "_refresh_cookies": "src.services.thea.thea_error_recovery",
    "_retry_with_backoff": "src.services.thea.thea_error_recovery",
    "_clear_session": "src.services.thea.thea_error_recovery",
    "_wait_and_retry": "src.services.thea.thea_error_recovery",
    "_fallback_mode": "src.services.thea.thea_error_recovery",
    "reset_statistics": "src.services.thea.thea_error_recovery",
    "create_monitoring_system": "src.services.thea.thea_monitoring_system",
    "_collect_system_health": "src.services.thea.thea_monitoring_system",
    "_check_network_connectivity": "src.services.thea.thea_monitoring_system",
    "_check_browser_status": "src.services.thea.thea_monitoring_system",
    "_check_cookie_status": "src.services.thea.thea_monitoring_system",
    "_check_alerts": "src.v3.v3_011_api_gateway_advanced",
    "_cleanup_old_data": "src.services.thea.thea_monitoring_system",
    "log_operation": "src.services.thea.thea_monitoring_system",
    "get_system_health_summary": "src.services.thea.thea_monitoring_system",
    "create_quick_consultation": "src.services.thea.context_templates",
    "create_essential_context": "src.services.thea.context_templates",
    "create_standard_context": "src.services.thea.context_templates",
    "create_detailed_context": "src.services.thea.context_templates",
    "create_project_scan_context": "src.services.thea.context_templates",
    "create_multi_turn_context": "src.services.thea.context_templates",
    "create_emergency_consultation": "src.services.thea.context_templates",
    "create_status_report": "src.services.thea.context_templates",
    "get_context_stats": "src.services.thea.context_templates",
    "optimize_for_limits": "src.services.thea.context_templates",
    "consult_command": "src.services.thea.strategic_consultation_cli",
    "status_report_command": "src.services.thea.strategic_consultation_cli",
    "emergency_command": "src.services.thea.strategic_consultation_cli",
    "paste_message_command": "src.services.thea.strategic_consultation_cli",
    "test_limits_command": "src.services.thea.strategic_consultation_cli",
    "create_autonomous_thea": "src.services.thea.thea_autonomous_system",
    "send_thea_message_autonomous": "src.services.thea.thea_autonomous_system",
    "send_message_autonomous": "src.services.thea.thea_autonomous_system",
    "_recover_session": "src.services.thea.thea_autonomous_system",
    "get_system_status": "src.v3.v3_009_nlp_pipeline",
    "get_active_conversation_link": "src.services.thea.thea_conversation_manager",
    "create_conversation_manager": "src.services.thea.thea_conversation_manager",
    "_load_conversations": "src.services.thea.thea_conversation_manager",
    "_save_conversations": "src.services.thea.thea_conversation_manager",
    "extract_conversation_link": "src.services.thea.thea_conversation_manager",
    "create_new_conversation": "src.services.thea.thea_conversation_manager",
    "load_conversation": "src.services.thea.thea_conversation_manager",
    "update_conversation_activity": "src.services.thea.thea_conversation_manager",
    "get_conversation_history": "src.discord.memory_aware_responses",
    "archive_conversation": "src.services.thea.thea_conversation_manager",
    "start_integration": "src.services.vector_database.enhanced_collaboration",
    "stop_integration": "src.services.vector_database.complete_infrastructure_integration",
    "_sync_loop": "src.services.vector_database.architecture_integration",
    "_sync_architecture_data": "src.services.vector_database.architecture_integration",
    "_get_architecture_data": "src.services.vector_database.architecture_integration",
    "_integrate_architecture_component": "src.services.vector_database.architecture_integration",
    "_create_architecture_vector": "src.services.vector_database.architecture_integration",
    "get_architecture_analytics": "src.services.vector_database.architecture_integration",
    "_get_architecture_vectors": "src.services.vector_database.architecture_integration",
    "get_integration_health": "src.services.vector_database.architecture_integration",
    "_calculate_integration_health_score": "src.services.vector_database.architecture_integration",
    "add_integration_callback": "src.services.vector_database.complete_infrastructure_integration",
    "_integration_loop": "src.services.vector_database.complete_infrastructure_integration",
    "_monitor_infrastructure_components": "src.services.vector_database.complete_infrastructure_integration",
    "_synchronize_components": "src.services.vector_database.complete_infrastructure_integration",
    "_optimize_integration": "src.services.vector_database.complete_infrastructure_integration",
    "_calculate_infrastructure_health": "src.services.vector_database.complete_infrastructure_integration",
    "_apply_health_optimizations": "src.services.vector_database.complete_infrastructure_integration",
    "_apply_performance_optimizations": "src.services.vector_database.complete_infrastructure_integration",
    "_apply_maintenance_optimizations": "src.services.vector_database.complete_infrastructure_integration",
    "_update_infrastructure_health": "src.services.vector_database.complete_infrastructure_integration",
    "_notify_integration_update": "src.services.vector_database.complete_infrastructure_integration",
    "get_complete_infrastructure_status": "src.services.vector_database.complete_infrastructure_integration",
    "integrate_message_data": "src.services.vector_database.vector_database_integration",
    "integrate_task_data": "src.services.vector_database.vector_database_integration",
    "search_similar_status": "src.services.vector_database.vector_database_integration",
    "get_agent_analytics": "src.services.vector_database.vector_database_integration",
    "create_status_vector": "src.services.vector_database.vector_database_integration",
    "create_message_vector": "src.services.vector_database.vector_database_integration",
    "create_task_vector": "src.services.vector_database.vector_database_integration",
    "create_conversation_vector": "src.services.vector_database.data_processor",
    "normalize_vector": "src.services.vector_database.data_processor",
    "calculate_similarity": "src.services.vector_database.vector_database_integration",
    "extract_features_from_text": "src.services.vector_database.data_processor",
    "get_enhanced_collaboration_system": "src.services.vector_database.enhanced_collaboration",
    "start_collaboration": "src.services.vector_database.enhanced_collaboration",
    "end_session": "src.services.vector_database.enhanced_collaboration",
    "add_event": "src.services.vector_database.enhanced_collaboration",
    "get_events": "src.domain.domain_events",
    "get_session_count": "src.services.vector_database.enhanced_collaboration",
    "get_event_count": "src.services.vector_database.enhanced_collaboration",
    "add_coordination_rule": "src.services.vector_database.enhanced_collaboration",
    "start_coordination": "src.services.vector_database.enhanced_collaboration",
    "end_coordination": "src.services.vector_database.enhanced_collaboration",
    "get_active_coordinations": "src.services.vector_database.enhanced_collaboration",
    "get_coordination_participants": "src.services.vector_database.enhanced_collaboration",
    "add_integration_task": "src.services.vector_database.enhanced_collaboration",
    "complete_integration": "src.services.vector_database.enhanced_collaboration",
    "get_integration_status": "src.integration.qa_coordination.vector_database_integration",
    "get_pending_integrations": "src.services.vector_database.enhanced_collaboration",
    "get_in_progress_integrations": "src.services.vector_database.enhanced_collaboration",
    "enable": "src.services.vector_database.quality_assurance_framework",
    "disable": "src.services.vector_database.quality_assurance_framework",
    "is_enabled": "src.services.vector_database.quality_assurance_framework",
    "get_collaboration_manager": "src.services.vector_database.enhanced_collaboration",
    "get_coordination_engine": "src.services.vector_database.enhanced_collaboration",
    "get_integration_coordinator": "src.services.vector_database.enhanced_collaboration",
    "end_collaboration": "src.services.vector_database.enhanced_collaboration",
    "get_collaboration_summary": "src.services.vector_database.enhanced_collaboration",
    "get_kiss_manager": "src.services.vector_database.kiss_principle_enforcement_system",
    "enforce_simplicity": "src.services.vector_database.kiss_principle_enforcement_system",
    "add_rule": "src.services.alerting.intelligent_alerting_system",
    "analyze_component": "src.services.vector_database.kiss_principle_enforcement_system",
    "get_metric": "src.services.vector_database.quality_assurance_framework",
    "get_all_metrics": "src.services.vector_database.performance_optimization_framework",
    "get_overcomplex_components": "src.services.vector_database.kiss_principle_enforcement_system",
    "get_violations": "src.services.vector_database.quality_assurance_framework",
    "clear_violations": "src.services.vector_database.quality_assurance_framework",
    "get_analyzer": "src.services.vector_database.kiss_principle_enforcement_system",
    "get_simplicity_report": "src.services.vector_database.kiss_principle_enforcement_system",
    "get_enforcer": "src.services.vector_database.kiss_principle_enforcement_system",
    "add_recommendation": "src.services.vector_database.kiss_principle_enforcement_system",
    "get_recommendations": "src.services.vector_database.kiss_principle_enforcement_system",
    "clear_recommendations": "src.services.vector_database.kiss_principle_enforcement_system",
    "generate_simplicity_recommendations": "src.services.vector_database.kiss_principle_enforcement_system",
    "get_optimization_engine": "src.services.vector_database.performance_optimization_framework",
    "run_optimization": "src.services.vector_database.performance_optimization_framework",
    "add_metric": "src.ml.ml_monitoring_storage",
    "update_metric": "src.services.vector_database.quality_assurance_framework",
    "optimize_metric": "src.services.vector_database.performance_optimization_framework",
    "get_optimization_results": "src.services.vector_database.performance_optimization_framework",
    "get_metrics_needing_optimization": "src.services.vector_database.performance_optimization_framework",
    "set_resource_limit": "src.services.vector_database.performance_optimization_framework",
    "update_resource_usage": "src.services.vector_database.performance_optimization_framework",
    "get_resource_usage": "src.services.vector_database.performance_optimization_framework",
    "get_resource_limit": "src.services.vector_database.performance_optimization_framework",
    "is_resource_over_limit": "src.services.vector_database.performance_optimization_framework",
    "get_over_limit_resources": "src.services.vector_database.performance_optimization_framework",
    "optimize_resource_usage": "src.services.vector_database.performance_optimization_framework",
    "identify_bottleneck": "src.services.vector_database.performance_optimization_framework",
    "get_bottlenecks": "src.services.vector_database.performance_optimization_framework",
    "clear_bottlenecks": "src.services.vector_database.performance_optimization_framework",
    "get_high_severity_bottlenecks": "src.services.vector_database.performance_optimization_framework",
    "get_performance_optimizer": "src.services.vector_database.performance_optimization_framework",
    "get_resource_optimizer": "src.services.vector_database.performance_optimization_framework",
    "get_bottleneck_analyzer": "src.services.vector_database.performance_optimization_framework",
    "run_optimization_cycle": "src.services.vector_database.performance_optimization_framework",
    "get_project_completion_manager": "src.services.vector_database.project_completion_system",
    "get_project_quality_assessor": "src.services.vector_database.project_completion_system",
    "initialize_project": "src.services.vector_database.project_completion_system",
    "get_project_summary": "src.services.vector_database.project_completion_system",
    "add_milestone": "src.services.vector_database.project_completion_system",
    "complete_milestone": "src.services.vector_database.project_completion_system",
    "get_milestone": "src.services.vector_database.project_completion_system",
    "get_milestones_by_phase": "src.services.vector_database.project_completion_system",
    "get_completed_milestones": "src.services.vector_database.project_completion_system",
    "get_pending_milestones": "src.services.vector_database.project_completion_system",
    "update_phase_status": "src.services.vector_database.project_completion_system",
    "get_phase_status": "src.services.vector_database.project_completion_system",
    "get_overall_completion": "src.services.vector_database.project_completion_system",
    "get_overall_quality_score": "src.services.vector_database.project_completion_system",
    "get_tracker": "src.services.vector_database.project_completion_system",
    "initialize_project_phases": "src.services.vector_database.project_completion_system",
    "complete_phase": "src.services.vector_database.project_completion_system",
    "is_project_complete": "src.services.vector_database.project_completion_system",
    "get_next_phase": "src.services.vector_database.project_completion_system",
    "set_quality_threshold": "src.services.vector_database.project_completion_system",
    "assess_quality": "src.services.vector_database.project_completion_system",
    "get_quality_score": "src.services.vector_database.project_completion_system",
    "get_quality_report": "src.services.vector_database.project_completion_system",
    "get_quality_manager": "src.services.vector_database.quality_assurance_framework",
    "get_compliance_checker": "src.services.vector_database.quality_assurance_framework",
    "run_quality_check": "src.services.vector_database.quality_assurance_framework",
    "get_metrics_by_gate": "src.services.vector_database.quality_assurance_framework",
    "check_quality_gate": "src.services.vector_database.quality_assurance_framework",
    "get_quality_results": "src.services.vector_database.quality_assurance_framework",
    "get_failed_gates": "src.services.vector_database.quality_assurance_framework",
    "get_checker": "src.services.vector_database.quality_assurance_framework",
    "get_quality_summary": "src.services.vector_database.quality_assurance_framework",
    "add_compliance_rule": "src.services.vector_database.quality_assurance_framework",
    "start_migration": "src.services.vector_database.record_time_migration",
    "stop_migration": "src.services.vector_database.record_time_migration",
    "add_migration_callback": "src.services.vector_database.record_time_migration",
    "_migration_loop": "src.services.vector_database.record_time_migration",
    "_migrate_new_vectors": "src.services.vector_database.record_time_migration",
    "_get_recent_vectors_from_source": "src.services.vector_database.record_time_migration",
    "_migrate_vector_batch": "src.services.vector_database.record_time_migration",
    "_migrate_single_vector": "src.services.vector_database.record_time_migration",
    "_notify_migration_progress": "src.services.vector_database.record_time_migration",
    "_estimate_completion_time": "src.services.vector_database.record_time_migration",
    "force_full_migration": "src.services.vector_database.record_time_migration",
    "create_index": "src.services.vector_database.status_indexer",
    "cleanup_stale_entries": "src.services.vector_database.indexing.manager",
    "get_queue_status": "src.services.vector_database.indexing.processor",
    "start_indexing": "src.services.vector_database.status_indexer",
    "start_execution": "src.services.vector_database.contracts.contract_execution_core",
    "stop_execution": "src.services.vector_database.contracts.contract_execution_core",
    "add_execution_callback": "src.services.vector_database.contracts.contract_execution_core",
    "_execution_callback": "src.services.vector_database.v3_contract_execution_system",
    "get_v3_execution_status": "src.services.vector_database.v3_contract_execution_system",
    "query": "src.services.vector_database.query_analytics",
    "get_index_statistics": "src.services.vector_database.query_analytics",
    "_initialize_database": "src.services.vector_database.vector_database_models",
    "_create_tables": "src.services.vector_database.vector_database_models",
    "record_operation": "src.services.vector_database.vector_database_models",
    "get_metrics": "src.ml.ml_monitoring_storage",
    "record_operation_metric": "src.services.vector_database.vector_database_monitoring",
    "record_connection_metric": "src.services.vector_database.vector_database_monitoring",
    "record_query_metric": "src.services.vector_database.vector_database_monitoring",
    "add_health_check": "src.services.vector_database.vector_database_monitoring",
    "get_metrics_summary": "src.services.vector_database.vector_database_monitoring",
    "get_health_status": "src.v3.v3_011_api_gateway_core",
    "get_detailed_metrics": "src.services.vector_database.vector_database_monitoring",
    "connect_sync": "src.services.vector_database.vector_database_orchestrator",
    "search_vectors_sync": "src.services.vector_database.vector_database_orchestrator",
    "search_by_type": "src.services.vector_database.query_analytics",
    "validate_security": "src.services.vector_database.security_validator",
    "_validate_data_security": "src.services.vector_database.security_validator_core",
    "_validate_access_control": "src.services.vector_database.security_validator_core",
    "_validate_error_handling": "src.services.vector_database.security_validator_core",
    "_validate_input_security": "src.services.vector_database.security_validator_core",
    "_validate_configuration_security": "src.services.vector_database.security_validator_core",
    "_calculate_security_score": "src.services.vector_database.security_validator_core",
    "_generate_security_recommendations": "src.services.vector_database.security_validator_core",
    "check_sql_injection_vulnerabilities": "src.services.vector_database.security_validator_checks",
    "check_data_sanitization": "src.services.vector_database.security_validator_checks",
    "check_encryption_requirements": "src.services.vector_database.security_validator_checks",
    "check_data_validation": "src.services.vector_database.security_validator_checks",
    "check_authentication_mechanisms": "src.services.vector_database.security_validator_checks",
    "check_authorization_controls": "src.services.vector_database.security_validator_checks",
    "check_permission_validation": "src.services.vector_database.security_validator_checks",
    "check_session_management": "src.services.vector_database.security_validator_checks",
    "check_error_message_security": "src.services.vector_database.security_validator_checks",
    "check_exception_handling": "src.services.vector_database.security_validator_checks",
    "check_logging_security": "src.services.vector_database.security_validator_checks",
    "check_information_disclosure": "src.services.vector_database.security_validator_checks",
    "check_input_validation": "src.services.vector_database.security_validator_checks",
    "check_input_sanitization": "src.services.vector_database.security_validator_checks",
    "check_buffer_overflow_protection": "src.services.vector_database.security_validator_checks",
    "check_injection_prevention": "src.services.vector_database.security_validator_checks",
    "check_environment_variables": "src.services.vector_database.security_validator_checks",
    "check_configuration_files": "src.services.vector_database.security_validator_checks",
    "check_default_settings": "src.services.vector_database.security_validator_checks",
    "check_secrets_management": "src.services.vector_database.security_validator_checks",
    "validate_vector_database_security": "src.services.vector_database.security_validator_main",
    "generate_security_report": "src.services.vector_database.security_validator_main",
    "get_security_score": "src.services.vector_database.security_validator",
    "get_vulnerabilities": "src.services.vector_database.security_validator",
    "get_security_tests": "src.services.vector_database.security_validator_main",
    "add_vulnerability": "src.services.vector_database.security_validator_main",
    "clear_vulnerabilities": "src.services.vector_database.security_validator_main",
    "_generate_next_steps": "src.services.vector_database.security_validator_main",
    "export_security_report": "src.services.vector_database.security_validator_main",
    "_format_text_report": "src.services.vector_database.security_validator_main",
    "get_default_validator": "src.services.vector_database.security_validator",
    "acquire_connection": "src.services.vector_database.orchestration.core",
    "release_connection": "src.services.vector_database.orchestration.core",
    "_execution_loop": "src.services.vector_database.contracts.contract_execution_core",
    "_process_available_contracts": "src.services.vector_database.contracts.contract_execution_core",
    "_evaluate_contract": "src.services.vector_database.contracts.contract_execution_core",
    "_should_claim_contract": "src.services.vector_database.contracts.contract_execution_core",
    "_claim_contract": "src.services.vector_database.contracts.contract_execution_core",
    "_execute_claimed_contracts": "src.services.vector_database.contracts.contract_execution_core",
    "_execute_contract": "src.services.vector_database.contracts.contract_execution_core",
    "_notify_execution_update": "src.services.vector_database.contracts.contract_execution_core",
    "set_contracts": "src.services.vector_database.contracts.contract_execution_core",
    "get_contracts": "src.services.vector_database.contracts.contract_execution_core",
    "create_default_contracts": "src.services.vector_database.contracts.contract_models",
    "update_execution_stats": "src.services.vector_database.contracts.contract_performance_monitor",
    "get_performance_trend": "src.services.vector_database.contracts.contract_performance_monitor",
    "reset_stats": "src.services.vector_database.contracts.contract_performance_monitor",
    "validate_contract_quality": "src.services.vector_database.contracts.contract_quality_validator",
    "_validate_individual_contract": "src.services.vector_database.contracts.contract_quality_validator",
    "get_quality_metrics": "src.services.discord_commander.bot_v2",
    "filter_contracts_by_status": "src.services.vector_database.contracts.contract_utils",
    "filter_contracts_by_priority": "src.services.vector_database.contracts.contract_utils",
    "get_contract_by_id": "src.services.vector_database.contracts.contract_utils",
    "update_contract_status": "src.services.vector_database.contracts.contract_utils",
    "calculate_contract_metrics": "src.services.vector_database.contracts.contract_utils",
    "validate_contract_structure": "src.services.vector_database.contracts.contract_utils",
    "load_entries": "src.services.vector_database.indexing.manager",
    "save_entries": "src.services.vector_database.indexing.manager",
    "create_entry": "src.services.vector_database.indexing.manager",
    "update_entry_status": "src.services.vector_database.indexing.manager",
    "get_entry": "src.services.vector_database.indexing.manager",
    "queue_operation": "src.services.vector_database.indexing.processor",
    "_process_queue": "src.services.vector_database.indexing.processor",
    "_process_entry": "src.services.vector_database.indexing.processor",
    "_perform_indexing": "src.services.vector_database.indexing.processor",
    "start_processing": "src.services.vector_database.indexing.processor",
    "is_stale": "src.services.vector_database.indexing.types",
    "success_rate": "src.services.vector_database.indexing.types",
    "log_cycle_completion": "src.services.autonomous.cycle_completion_logger",
    "log_completion": "src.services.autonomous.cycle_completion_logger",
    "_read_status": "src.services.autonomous.cycle_completion_logger",
    "_write_status": "src.services.autonomous.cycle_completion_logger",
    "_update_summary_metrics": "src.services.autonomous.cycle_completion_logger",
    "get_completion_summary": "src.services.autonomous.cycle_completion_logger",
    "deliver_message": "src.services.autonomous.mailbox.mailbox_manager",
    "get_operations_summary": "src.services.autonomous.operations.modular.core",
    "clear_operations": "src.services.autonomous.operations.modular.core",
    "get_executor_status": "src.services.autonomous.operations.modular.operation_executor",
    "_is_operation_ready": "src.services.autonomous.operations.modular.operations_loader",
    "get_operations_statistics": "src.services.autonomous.operations.modular.operations_manager",
    "enable_operation": "src.services.autonomous.operations.modular.operations_manager",
    "disable_operation": "src.services.autonomous.operations.modular.operations_manager",
    "_select_task_to_claim": "src.services.autonomous.tasks.task_manager",
    "_are_dependencies_satisfied": "src.services.autonomous.tasks.task_manager",
    "_get_priority_score": "src.services.autonomous.tasks.task_manager",
    "setup_basic_commands": "src.services.discord_bot.commands.basic_commands",
    "get_command_list": "src.services.discord_bot.commands.basic_commands",
    "get_command_help": "src.services.discord_bot.commands.basic_commands",
    "setup": "src.services.discord_bot.commands.basic_commands_modular",
    "create_main_interface_view": "src.services.discord_bot.commands.button_handlers",
    "setup_help_command": "src.services.discord_bot.commands.help_command",
    "set_agent_coordination": "src.services.discord_bot.commands.main_interface",
    "_is_admin": "src.services.discord_bot.commands.agent_coordination.core",
    "setup_ping_command": "src.services.discord_bot.commands.ping_command",
    "is_admin": "src.services.discord_bot.commands.webhook_setup_commands",
    "safe_log_info": "src.services.discord_bot.commands.safe_response_utils",
    "_get_sentiment_color": "src.services.discord_bot.commands.social_media_commands",
    "setup_webhook_setup_commands": "src.services.discord_bot.commands.webhook_setup_commands",
    "set_main_interface_callback": "src.services.discord_bot.commands.agent_coordination.core",
    "get_team_description": "src.services.discord_bot.commands.agent_coordination.core",
    "get_status_color": "src.services.discord_bot.commands.agent_coordination.status",
    "_setup_event_handlers": "src.services.discord_bot.core.discord_bot_core",
    "increment_command_count": "src.services.discord_bot.core.discord_bot_core",
    "create_command_context": "src.services.discord_bot.core.discord_bot_core",
    "_get_single_agent_status": "src.services.discord_bot.core.discord_agent_interface",
    "_get_all_agent_statuses": "src.services.discord_bot.core.discord_agent_interface",
    "activate_agent": "src.services.discord_bot.core.discord_agent_interface",
    "get_swarm_status": "src.discord.realtime_coordination_advanced",
    "channel_from_id": "src.services.discord_bot.tools.webhook_provisioner",
    "_load_default_config": "src.services.alerting.intelligent_alerting_system",
    "_parse_config": "src.services.alerting.intelligent_alerting_system",
    "_init_notification_handlers": "src.services.alerting.intelligent_alerting_system",
    "create_alert": "src.services.alerting.intelligent_alerting_system",
    "_process_alert": "src.services.alerting.intelligent_alerting_system",
    "_evaluate_rule": "src.services.alerting.intelligent_alerting_system",
    "_send_notifications": "src.services.alerting.intelligent_alerting_system",
    "_send_email_notification": "src.services.alerting.intelligent_alerting_system",
    "_send_discord_notification": "src.services.alerting.intelligent_alerting_system",
    "_send_slack_notification": "src.services.alerting.intelligent_alerting_system",
    "_send_webhook_notification": "src.services.alerting.intelligent_alerting_system",
    "_send_sms_notification": "src.services.alerting.intelligent_alerting_system",
    "_check_escalation": "src.services.alerting.intelligent_alerting_system",
    "_escalate_alert": "src.services.alerting.intelligent_alerting_system",
    "acknowledge_alert": "src.services.dashboard.swarm_coordination_dashboard",
    "resolve_alert": "src.ml.ml_monitoring_storage",
    "get_alerts": "src.v3.v3_011_api_gateway_advanced",
    "get_alert_analytics": "src.services.alerting.intelligent_alerting_system",
    "remove_rule": "src.services.alerting.intelligent_alerting_system",
    "export_alerts": "src.services.alerting.intelligent_alerting_system",
    "do_GET": "src.services.dashboard.dashboard_web_core",
    "do_POST": "src.services.dashboard.dashboard_web_core",
    "_serve_dashboard": "src.services.dashboard.dashboard_web_core",
    "_serve_api_status": "src.services.dashboard.dashboard_web_core",
    "_serve_api_agents": "src.services.dashboard.dashboard_web_core",
    "_serve_api_tasks": "src.services.dashboard.dashboard_web_core",
    "_serve_api_messages": "src.services.dashboard.dashboard_web_core",
    "_serve_api_alerts": "src.services.dashboard.dashboard_web_core",
    "_handle_acknowledge_alert": "src.services.dashboard.dashboard_web_core",
    "_handle_update_agent": "src.services.dashboard.dashboard_web_core",
    "_serve_404": "src.services.dashboard.dashboard_web_core",
    "_send_response": "src.services.dashboard.dashboard_web_core",
    "_send_json_response": "src.services.dashboard.dashboard_web_core",
    "handler": "src.services.dashboard.dashboard_web_core",
    "format_agent_data": "src.services.dashboard.dashboard_web_utils",
    "format_task_data": "src.services.dashboard.dashboard_web_utils",
    "format_alert_data": "src.services.dashboard.dashboard_web_utils",
    "validate_request_data": "src.services.dashboard.dashboard_web_utils",
    "sanitize_string": "src.services.dashboard.dashboard_web_utils",
    "parse_json_request": "src.services.dashboard.dashboard_web_utils",
    "format_json_response": "src.services.dashboard.dashboard_web_utils",
    "get_current_timestamp": "src.services.dashboard.dashboard_web_utils",
    "calculate_performance_score": "src.services.dashboard.dashboard_web_utils",
    "format_summary_stats": "src.services.dashboard.dashboard_web_utils",
    "validate_agent_status": "src.services.dashboard.dashboard_web_utils",
    "validate_task_status": "src.services.dashboard.dashboard_web_utils",
    "validate_alert_type": "src.services.dashboard.dashboard_web_utils",
    "truncate_text": "src.discord.template_messaging",
    "_load_agent_coordinates": "src.services.dashboard.swarm_coordination_dashboard",
    "_load_task_data": "src.services.dashboard.swarm_coordination_dashboard",
    "_load_message_history": "src.services.dashboard.swarm_coordination_dashboard",
    "get_all_agent_status": "src.services.dashboard.swarm_coordination_dashboard",
    "get_all_task_status": "src.services.dashboard.swarm_coordination_dashboard",
    "get_recent_messages": "src.services.dashboard.swarm_coordination_dashboard",
    "update_task_progress": "src.services.dashboard.swarm_coordination_dashboard",
    "get_dashboard_data": "src.services.dashboard.swarm_coordination_dashboard",
    "_get_summary_stats": "src.services.dashboard.swarm_coordination_dashboard",
    "refresh": "src.services.dashboard.swarm_coordination_dashboard",
    "_count_agent_workspaces": "src.services.discord_commander.commands",
    "_count_project_files": "src.services.discord_commander.commands",
    "_count_python_files": "src.services.discord_commander.commands",
    "_register_commands": "src.services.discord_commander.commands",
    "get_command_handler": "src.services.discord_commander.commands",
    "list_commands": "src.services.discord_commander.core",
    "_get_intents": "src.services.discord_commander.core",
    "register_command": "src.services.discord_commander.core",
    "get_command": "src.services.discord_commander.core",
    "unregister_command": "src.services.discord_commander.core",
    "register_event_handler": "src.services.discord_commander.core",
    "get_event_handlers": "src.services.discord_commander.bot_events",
    "record_heartbeat": "src.services.discord_commander.core",
    "record_message": "src.services.discord_commander.core",
    "record_command": "src.services.discord_commander.core",
    "record_error": "src.services.discord_commander.bot_models",
    "is_healthy": "src.domain.entities.agent",
    "record_message_processing": "src.services.discord_commander.optimization",
    "record_command_execution": "src.services.discord_commander.optimization",
    "record_event_handling": "src.services.discord_commander.optimization",
    "get_command_result": "src.services.discord_commander.optimization",
    "cache_command_result": "src.services.discord_commander.optimization",
    "_evict_expired": "src.services.discord_commander.optimization",
    "can_execute_command": "src.services.discord_commander.optimization",
    "get_wait_time": "src.services.discord_commander.optimization",
    "get_task_names": "src.services.discord_commander.optimization",
    "_generate_cache_key": "src.v3.v3_009_response_generation_main",
    "reset_rate_limiter": "src.services.discord_commander.optimization",
    "set_bot": "src.services.discord_commander.web_controller_v2",
    "register_commands": "src.services.discord_commander.commands.agent_control",
    "_log_command_execution": "src.services.discord_commander.bot_commands",
    "get_command_history": "src.services.discord_commander.bot_commands",
    "get_command_stats": "src.services.discord_commander.bot_commands",
    "_register_default_events": "src.services.discord_commander.bot_events",
    "register_event": "src.services.discord_commander.bot_events",
    "unregister_event": "src.services.discord_commander.bot_events",
    "get_event_stats": "src.services.discord_commander.bot_events",
    "list_registered_events": "src.services.discord_commander.bot_events",
    "create_custom_event": "src.services.discord_commander.bot_events",
    "remove_custom_event": "src.services.discord_commander.bot_events",
    "get_event_summary": "src.services.discord_commander.bot_events",
    "validate_event_system": "src.services.discord_commander.bot_events",
    "validate_bot_integrity": "src.services.discord_commander.bot_v2",
    "enable_optimizations": "src.services.discord_commander.optimization_utils",
    "disable_optimizations": "src.services.discord_commander.optimization_utils",
    "measure_execution_time": "src.services.discord_commander.optimization_utils",
    "get_performance_score": "src.integration.integration_models",
    "check_metrics": "src.services.discord_commander.performance_metrics",
    "calculate_metrics": "src.integration.comprehensive_integration_assessment_core",
    "check_for_alerts": "src.services.discord_commander.performance_metrics",
    "record_message_processed": "src.services.discord_commander.performance_monitor",
    "record_command_executed": "src.services.discord_commander.performance_monitor",
    "add_alert_callback": "src.ml.ml_monitoring_core",
    "_collect_metrics": "src.services.discord_commander.performance_monitor",
    "_trigger_alert": "src.ml.ml_monitoring_core",
    "get_metrics_history": "src.services.discord_commander.performance_monitor",
    "reset_metrics": "src.services.discord_commander.performance_monitor",
    "update_thresholds": "src.services.discord_commander.performance_monitor",
    "monitor_loop": "src.services.discord_commander.performance_monitor",
    "get_supported_platforms": "src.services.discord_commander.social_media_poster",
    "register_events": "src.services.discord_commander.socket_events",
    "broadcast_agent_update": "src.services.discord_commander.web_controller_refactored",
    "broadcast_system_message": "src.services.discord_commander.web_controller_refactored",
    "get_connection_count": "src.services.discord_commander.socket_events",
    "get_message_count": "src.services.discord_commander.socket_events",
    "handle_connect": "src.services.discord_commander.web_controller_main",
    "handle_disconnect": "src.services.discord_commander.web_controller_main",
    "handle_join_room": "src.services.discord_commander.socket_events",
    "handle_leave_room": "src.services.discord_commander.socket_events",
    "handle_send_message": "src.services.discord_commander.web_handlers",
    "handle_get_message_history": "src.services.discord_commander.socket_events",
    "handle_agent_status_request": "src.services.discord_commander.web_controller_main",
    "_register_additional_routes": "src.services.discord_commander.web_controller_refactored",
    "api_post_social": "src.services.discord_commander.web_controller_refactored",
    "api_platforms": "src.services.discord_commander.web_controller_refactored",
    "handle_get_agents": "src.services.discord_commander.web_handlers",
    "handle_swarm_coordinate": "src.services.discord_commander.web_handlers",
    "handle_get_system_status": "src.services.discord_commander.web_handlers",
    "handle_get_social_media_status": "src.services.discord_commander.web_handlers",
    "handle_post_to_social_media": "src.services.discord_commander.web_handlers",
    "handle_get_quality_metrics": "src.services.discord_commander.web_handlers",
    "handle_health_check": "src.services.discord_commander.web_handlers",
    "load_agent_status": "src.services.discord_commander.web_utils",
    "load_all_agents": "src.services.discord_commander.web_utils",
    "calculate_system_status": "src.services.discord_commander.web_utils",
    "load_social_media_status": "src.services.discord_commander.web_utils",
    "load_quality_metrics": "src.services.discord_commander.web_utils",
    "get_agent_workspace_info": "src.services.discord_commander.web_utils",
    "create_template_data": "src.services.discord_commander.web_utils",
    "validate_message_request": "src.services.discord_commander.web_utils",
    "format_agent_response": "src.services.discord_commander.web_utils",
    "create_web_controller": "src.services.discord_commander.web_controller_v2",
    "_setup_flask_app": "src.services.discord_commander.web_controller_v2",
    "_create_default_templates": "src.services.discord_commander.web_controller_v2",
    "_run_server": "src.services.discord_commander.web_controller_v2",
    "broadcast_update": "src.services.discord_commander.web_controller_v2",
    "_setup_app": "src.services.discord_commander.web_controller_main",
    "_register_socket_events": "src.services.discord_commander.web_controller_main",
    "get_app": "src.services.discord_commander.web_controller_main",
    "get_socketio": "src.services.discord_commander.web_controller_main",
    "_register_routes": "src.services.discord_commander.web_routes",
    "index": "src.services.discord_commander.web_routes",
    "get_agent": "src.domain.entities.agent",
    "get_health": "src.services.discord_commander.web_routes",
    "_load_env": "src.services.discord_commander.bot_config",
    "get_token": "src.services.discord_commander.bot_config",
    "get_prefix": "src.services.discord_commander.bot_config",
    "get_guild_id": "src.services.discord_commander.bot_config",
    "get_log_level": "src.services.discord_commander.bot_config",
    "is_debug_mode": "src.services.discord_commander.bot_config",
    "create_bot_configuration": "src.services.discord_commander.bot_main",
    "_register_event_handlers": "src.services.discord_commander.bot_main",
    "get_bot_info": "src.services.discord_commander.bot_main",
    "get_uptime": "src.domain.entities.agent",
    "is_online": "src.services.discord_commander.bot_main",
    "create_bot": "src.services.discord_commander.bot_main",
    "get_bot": "src.services.discord_commander.bot_main",
    "set_active_bot": "src.services.discord_commander.bot_main",
    "get_active_bot": "src.services.discord_commander.bot_main",
    "list_bots": "src.services.discord_commander.bot_main",
    "start_bot": "src.services.discord_commander.bot_models",
    "stop_bot": "src.services.discord_commander.bot_models",
    "create_embed": "src.services.discord_commander.bot_models",
    "add_field": "src.services.discord_commander.bot_models",
    "build": "src.services.discord_commander.bot_models",
    "_initialize_agent_roles": "src.services.agent_devlog.agent_validation",
    "_initialize_agent_capabilities": "src.services.agent_devlog.agent_validation",
    "validate_agent_flag": "src.services.agent_devlog.agent_validation",
    "get_agent_role": "src.services.agent_devlog.agent_validation",
    "get_agent_capabilities": "src.services.agent_devlog.agent_validation",
    "is_captain_agent": "src.services.agent_devlog.agent_validation",
    "get_agent_by_role": "src.services.agent_devlog.agent_validation",
    "validate_action": "src.services.agent_devlog.agent_validation",
    "validate_status": "src.services.agent_devlog.agent_validation",
    "validate_details": "src.services.agent_devlog.agent_validation",
    "suggest_devlog_type": "src.services.agent_devlog.agent_validation",
    "get_agent_statistics": "src.services.agent_devlog.agent_validation",
    "create_devlog_content": "src.services.agent_devlog.devlog_poster",
    "post_devlog": "src.services.agent_devlog.devlog_poster",
    "get_devlog_stats": "src.services.agent_devlog.storage",
    "cleanup_old_devlogs": "src.services.agent_devlog.devlog_poster",
    "_get_current_file": "src.services.agent_devlog.storage",
    "save_devlog": "src.services.agent_devlog.storage",
    "_load_devlogs": "src.services.agent_devlog.storage",
    "_save_devlogs": "src.services.agent_devlog.storage",
    "compress_file": "src.services.agent_devlog.storage",
    "get_file_info": "src.services.agent_devlog.storage",
    "_define_general_cycle": "src.services.role_assignment.contract_integration",
    "_load_role_contracts": "src.services.role_assignment.contract_integration",
    "_adapt_general_cycle_for_role": "src.services.role_assignment.contract_integration",
    "get_general_cycle": "src.services.role_assignment.contract_integration",
    "get_role_contract": "src.services.role_assignment.contract_integration",
    "get_role_cycle_adaptations": "src.services.role_assignment.contract_integration",
    "validate_role_contract": "src.services.role_assignment.contract_integration",
    "get_contract_summary": "src.services.role_assignment.contract_integration",
    "_load_role_definitions": "src.services.role_assignment.role_assignment_service",
    "_load_agent_capabilities": "src.services.role_assignment.role_assignment_service",
    "_create_default_roles": "src.services.role_assignment.role_assignment_service",
    "_create_default_agent_capabilities": "src.services.role_assignment.role_assignment_service",
    "assign_role": "src.services.role_assignment.role_assignment_service",
    "_can_agent_perform_role": "src.services.role_assignment.role_assignment_service",
    "_create_role_assignment_message": "src.services.role_assignment.role_assignment_service",
    "list_available_roles": "src.services.role_assignment.role_assignment_service",
    "list_agent_capabilities": "src.services.role_assignment.role_assignment_service",
    "get_active_assignment": "src.services.role_assignment.role_assignment_service",
    "complete_assignment": "src.services.role_assignment.role_assignment_service",
    "reassign_role": "src.services.role_assignment.role_assignment_service",
    "create_story_from_devlogs": "src.services.devlog_storytelling",
    "get_storytelling_tools": "src.services.devlog_storytelling",
    "register_storytelling_tools": "src.services.devlog_storytelling.integration.role_integration",
    "get_available_tools_for_role": "src.services.devlog_storytelling.integration.role_integration",
    "create_role_tool_guide": "src.services.devlog_storytelling.integration.role_integration",
    "update_agent_tool_registry": "src.services.devlog_storytelling.integration.role_integration",
    "conduct_code_archaeology": "src.services.code_archaeology",
    "get_archaeology_tools": "src.services.code_archaeology",
    "conduct_archaeological_dig": "src.services.code_archaeology",
    "execute": "src.architecture.patterns.command_repository",
    "_initialize_use_cases": "src.architecture.application_layer",
    "execute_use_case": "src.architecture.application_layer",
    "list_use_cases": "src.architecture.application_layer",
    "register_pattern": "src.architecture.design_patterns_v2",
    "get_pattern": "src.architecture.design_patterns_v2",
    "create_pattern_instance": "src.architecture.design_patterns",
    "__new__": "src.architecture.design_patterns",
    "register_creator": "src.architecture.design_patterns",
    "get_available_types": "src.architecture.design_patterns",
    "attach": "src.architecture.patterns.observer_strategy",
    "detach": "src.architecture.patterns.observer_strategy",
    "notify": "src.architecture.patterns.observer_strategy",
    "get_observer_count": "src.architecture.patterns.observer_strategy",
    "set_strategy": "src.architecture.patterns.observer_strategy",
    "execute_strategy": "src.architecture.design_patterns",
    "get_available_strategies": "src.architecture.design_patterns",
    "undo": "src.architecture.patterns.command_repository",
    "can_undo": "src.architecture.design_patterns",
    "get_all_patterns": "src.architecture.design_patterns",
    "get_pattern_instance": "src.architecture.design_patterns",
    "clear_instances": "src.architecture.design_patterns",
    "patterns": "src.architecture.design_patterns",
    "service_context": "src.architecture.design_patterns_v2",
    "create_service": "src.architecture.patterns.singleton_factory",
    "_create_instance": "src.architecture.patterns.singleton_factory",
    "update": "src.architecture.patterns.observer_strategy",
    "execute_command": "src.v3.v3_009_command_understanding",
    "undo_last": "src.architecture.patterns.command_repository",
    "find_by_id": "src.architecture.patterns.command_repository",
    "find_all": "src.architecture.patterns.command_repository",
    "is_registered": "src.architecture.patterns.singleton_factory",
    "list_patterns": "src.architecture.design_patterns_v2",
    "_load_from_file": "src.architecture.patterns.command_repository",
    "_save_to_file": "src.architecture.patterns.command_repository",
    "_entity_to_dict": "src.architecture.patterns.command_repository",
    "_dict_to_entity": "src.architecture.patterns.command_repository",
    "find_by_field": "src.architecture.repository_layer",
    "count": "src.architecture.patterns.command_repository",
    "find_by_name": "src.architecture.repository_layer",
    "find_active_agents": "src.architecture.repository_layer",
    "update_last_seen": "src.architecture.repository_layer",
    "find_by_agent": "src.architecture.repository_layer",
    "find_by_priority": "src.architecture.repository_layer",
    "find_recent_messages": "src.architecture.repository_layer",
    "find_by_status": "src.architecture.repository_layer",
    "find_overdue_tasks": "src.architecture.repository_layer",
    "register_repository": "src.architecture.repository_layer",
    "get_agent_repository": "src.architecture.repository_layer",
    "get_message_repository": "src.architecture.repository_layer",
    "get_task_repository": "src.architecture.repository_layer",
    "get_all_repositories": "src.architecture.repository_layer",
    "health_check": "src.ml.model_deployment",
    "_resolve_dependencies": "src.architecture.service_layer",
    "register_service": "src.architecture.unified_architecture_core",
    "start_service": "src.architecture.service_layer",
    "stop_service": "src.architecture.service_layer",
    "start_all_services": "src.architecture.service_layer",
    "stop_all_services": "src.architecture.service_layer",
    "get_all_status": "src.observability.memory.watchdog",
    "health_check_all": "src.v3.v3_011_api_gateway_advanced",
    "get_service": "src.architecture.unified_architecture_core",
    "publish_event": "src.domain.domain_events",
    "subscribe_to_event": "src.architecture.system_integration",
    "unregister_service": "src.architecture.system_integration",
    "get_all_services": "src.architecture.system_integration",
    "get_services_by_type": "src.architecture.system_integration",
    "is_service_registered": "src.architecture.system_integration",
    "subscribe": "src.domain.domain_events",
    "unsubscribe": "src.domain.domain_events",
    "publish": "src.domain.domain_events",
    "get_subscriber_count": "src.domain.domain_events",
    "add_integration": "src.architecture.system_integration",
    "remove_integration": "src.architecture.system_integration",
    "get_integration": "src.architecture.system_integration",
    "set_integration_status": "src.architecture.system_integration",
    "get_integration_metrics": "src.architecture.system_integration",
    "update_metrics": "src.architecture.system_integration",
    "get_all_integrations": "src.architecture.system_integration",
    "get_integrations_by_type": "src.architecture.system_integration",
    "get_connected_integrations": "src.architecture.system_integration",
    "get_error_integrations": "src.architecture.system_integration",
    "initialize_architecture": "src.architecture.unified_architecture_core",
    "shutdown_architecture": "src.architecture.unified_architecture_core",
    "get_architecture": "src.architecture.unified_architecture_core",
    "unregister_component": "src.architecture.unified_architecture_core",
    "initialize_component": "src.architecture.unified_architecture_core",
    "shutdown_component": "src.architecture.unified_architecture_core",
    "get_component_instance": "src.architecture.unified_architecture_core",
    "get_component_status": "src.integration.comprehensive_integration_assessment_v2",
    "get_component_metrics": "src.architecture.unified_architecture_core",
    "get_active_components": "src.architecture.unified_architecture_core",
    "get_error_components": "src.architecture.unified_architecture_core",
    "register_factory": "src.architecture.unified_architecture_core",
    "has_service": "src.architecture.unified_architecture_core",
    "remove_service": "src.architecture.unified_architecture_core",
    "get_lifecycle_manager": "src.architecture.unified_architecture_core",
    "get_di_container": "src.architecture.unified_architecture_core",
    "is_initialized": "src.architecture.unified_architecture_core",
    "register_service_type": "src.architecture.patterns.singleton_factory",
    "unregister": "src.architecture.patterns.singleton_factory",
    "list_services": "src.architecture.patterns.singleton_factory",
    "clear_all": "src.architecture.patterns.singleton_factory",
    "get_history_size": "src.architecture.patterns.command_repository",
    "clear_history": "src.domain.domain_events",
    "get_strategy_type": "src.architecture.patterns.observer_strategy",
    "list_event_types": "src.architecture.patterns.observer_strategy",
    "create_strategy": "src.architecture.patterns.observer_strategy",
    "register_strategy": "src.architecture.patterns.observer_strategy",
    "create_system_event": "src.domain.domain_events",
    "create_agent_event": "src.domain.domain_events",
    "create_task_event": "src.domain.domain_events",
    "create_user_event": "src.domain.domain_events",
    "register_handler": "src.discord.realtime_coordination",
    "unregister_handler": "src.domain.domain_events",
    "get_event_history": "src.domain.domain_events",
    "append_event": "src.domain.domain_events",
    "get_events_by_type": "src.domain.domain_events",
    "get_events_by_source": "src.domain.domain_events",
    "clear_events": "src.domain.domain_events",
    "id": "src.domain.entities.agent",
    "name": "src.domain.entities.agent",
    "agent_type": "src.domain.entities.agent",
    "status": "src.domain.entities.agent",
    "capabilities": "src.domain.entities.agent",
    "configuration": "src.domain.entities.agent",
    "metrics": "src.domain.entities.agent",
    "created_at": "src.domain.entities.agent",
    "updated_at": "src.domain.entities.agent",
    "current_tasks": "src.domain.entities.agent",
    "tags": "src.domain.entities.agent",
    "activate": "src.domain.entities.agent",
    "deactivate": "src.domain.entities.agent",
    "set_busy": "src.domain.entities.agent",
    "set_available": "src.domain.entities.agent",
    "set_error": "src.domain.entities.agent",
    "go_offline": "src.domain.entities.agent",
    "get_task_count": "src.domain.entities.agent",
    "has_capability": "src.domain.entities.agent",
    "add_capability": "src.domain.entities.agent",
    "remove_capability": "src.domain.entities.agent",
    "add_tag": "src.domain.entities.task_core",
    "remove_tag": "src.domain.entities.task_core",
    "get_last_active_time": "src.domain.entities.agent",
    "__str__": "src.domain.entities.agent",
    "__repr__": "src.domain.entities.agent",
    "register_agent": "src.discord.realtime_coordination",
    "unregister_agent": "src.discord.realtime_coordination",
    "get_agents_by_type": "src.domain.entities.agent",
    "get_agents_by_capability": "src.domain.entities.agent",
    "agents": "src.domain.entities.agent",
    "update_progress": "src.domain.entities.task_core",
    "assign_to": "src.domain.entities.task_core",
    "set_metadata": "src.domain.entities.task_core",
    "get_metadata": "src.domain.entities.task_core",
    "is_overdue": "src.domain.entities.task_core",
    "time_remaining": "src.domain.entities.task_core",
    "get_lightweight_monitor": "src.monitoring.memory_optimized_monitor",
    "get_current_status": "src.monitoring.memory_optimized_monitor",
    "get_memory_usage": "src.monitoring.memory_optimized_monitor",
    "clear_old_data": "src.monitoring.memory_optimized_monitor",
    "save_performance_report": "src.monitoring.performance_monitor",
    "save_snapshot_to_file": "src.monitoring.performance_monitor_utils",
    "load_snapshots_from_dir": "src.monitoring.performance_monitor_utils",
    "calculate_average_metrics": "src.monitoring.performance_monitor_utils",
    "format_metrics_report": "src.monitoring.performance_monitor_utils",
    "get_activity_monitor": "src.fsm.activity_monitor",
    "_load_activity_data": "src.fsm.activity_monitor",
    "_save_activity_data": "src.fsm.activity_monitor",
    "record_agent_activity": "src.fsm.activity_monitor",
    "record_messaging_activity": "src.fsm.activity_monitor",
    "record_task_activity": "src.fsm.activity_monitor",
    "record_status_update": "src.fsm.activity_monitor",
    "check_messaging_inactivity": "src.fsm.activity_monitor",
    "update_agent_state_for_inactivity": "src.fsm.activity_monitor",
    "get_agent_activity_summary": "src.fsm.activity_monitor",
    "get_inactive_agents": "src.fsm.captain_dashboard",
    "get_messaging_inactive_agents": "src.fsm.activity_monitor",
    "get_captain_dashboard": "src.fsm.captain_dashboard",
    "get_agent_status_report": "src.fsm.captain_dashboard",
    "get_swarm_health_summary": "src.fsm.captain_dashboard",
    "generate_captain_report": "src.fsm.captain_dashboard",
    "get_high_priority_message_template": "src.fsm.captain_dashboard",
    "create_fsm_enhanced_message": "src.fsm.fsm_messaging_integration",
    "get_agent_fsm_state": "src.fsm.fsm_messaging_integration",
    "validate_state_transition": "src.fsm.fsm_messaging_integration",
    "record_state_transition": "src.fsm.fsm_messaging_integration",
    "_get_last_transition": "src.fsm.fsm_messaging_integration",
    "_get_state_history": "src.fsm.fsm_messaging_integration",
    "generate_fsm_status_message": "src.fsm.fsm_messaging_integration",
    "load_json": "src.fsm.fsm_registry",
    "read_agent_state": "src.fsm.fsm_registry",
    "read_swarm_state": "src.fsm.fsm_registry",
    "get_all_agent_states": "src.fsm.fsm_registry",
    "validate_agent_state": "src.fsm.fsm_registry",
    "validate_swarm_state": "src.fsm.fsm_registry",
    "get_valid_agent_states": "src.fsm.fsm_registry",
    "get_valid_swarm_states": "src.fsm.fsm_registry",
    "update_agent_state": "src.fsm.fsm_registry",
    "update_swarm_state": "src.fsm.fsm_registry",
    "get_state_summary": "src.fsm.fsm_registry",
    "setup_infrastructure": "src.ml.v3_007_infrastructure",
    "create_datasets": "src.ml.v3_007_data_management",
    "create_model_architectures": "src.ml.v3_007_model_management",
    "setup_training_pipeline": "src.v3.ml_pipeline_core",
    "implement_versioning": "src.ml.v3_007_model_management",
    "create_evaluation_system": "src.v3.ml_pipeline_operations",
    "setup_deployment_pipeline": "src.v3.ml_pipeline_operations",
    "create_alert_rule": "src.ml.ml_monitoring",
    "get_active_alerts": "src.ml.ml_monitoring",
    "get_monitoring_dashboard_data": "src.ml.ml_monitoring",
    "record_metric": "src.ml.ml_monitoring_core",
    "record_prediction_metrics": "src.ml.ml_monitoring_core",
    "record_training_metrics": "src.ml.ml_monitoring_core",
    "record_data_drift_metrics": "src.ml.ml_monitoring_core",
    "get_metric_history": "src.ml.ml_monitoring_core",
    "get_metric_statistics": "src.ml.ml_monitoring_core",
    "_load_metrics": "src.ml.ml_monitoring_storage",
    "_save_metrics": "src.ml.ml_monitoring_storage",
    "_load_alerts": "src.ml.ml_monitoring_storage",
    "_save_alerts": "src.ml.ml_monitoring_storage",
    "create_training_data": "src.ml.ml_pipeline_system_v2",
    "evaluate_model": "src.ml.ml_pipeline_system",
    "predict": "src.ml.tensorflow_infrastructure",
    "_calculate_accuracy": "src.ml.ml_pipeline_core",
    "get_model_status": "src.ml.ml_pipeline_core",
    "train": "src.ml.ml_pipeline_system_v2",
    "deploy_model": "src.ml.model_deployment",
    "export_system_data": "src.ml.ml_pipeline_system",
    "_create_tensorflow_model": "src.ml.ml_pipeline_core_v2_compliant",
    "_create_pytorch_model": "src.ml.ml_pipeline_core_v2_compliant",
    "_create_neural_network_model": "src.ml.ml_pipeline_core_v2_compliant",
    "list_models": "src.ml.ml_pipeline_system_v2",
    "forward": "src.ml.pytorch_infrastructure",
    "_split_training_data": "src.ml.ml_pipeline_core_v2_compliant",
    "_train_model_by_type": "src.ml.ml_pipeline_core_v2_compliant",
    "_train_tensorflow_model": "src.ml.ml_pipeline_core_v2_compliant",
    "_get_validation_data": "src.ml.ml_pipeline_core_v2_perfect",
    "_create_tensorflow_training_results": "src.ml.ml_pipeline_core_v2_compliant",
    "_calculate_model_metrics": "src.ml.ml_pipeline_core_v2_compliant",
    "_calculate_classification_metrics": "src.ml.ml_pipeline_core_v2_compliant",
    "_calculate_regression_metrics": "src.ml.ml_pipeline_core_v2_compliant",
    "_split_data": "src.ml.ml_pipeline_core_v2_final",
    "_create_nn_model": "src.ml.ml_pipeline_core_v2_perfect",
    "_create_tf_model": "src.ml.ml_pipeline_core_v2_perfect",
    "_create_torch_model": "src.ml.ml_pipeline_core_v2_perfect",
    "_train_tf_model": "src.ml.ml_pipeline_core_v2_final",
    "_get_val_data": "src.ml.ml_pipeline_core_v2_final",
    "_get_accuracy": "src.ml.ml_pipeline_core_v2_final",
    "_calc_classification_metrics": "src.ml.ml_pipeline_core_v2_final",
    "_calc_regression_metrics": "src.ml.ml_pipeline_core_v2_final",
    "run_complete_pipeline": "src.ml.ml_pipeline_manager",
    "_create_training_data": "src.ml.ml_pipeline_manager",
    "batch_train_models": "src.ml.ml_pipeline_manager",
    "compare_models": "src.ml.ml_pipeline_manager",
    "get_pipeline_status": "src.ml.training_pipeline",
    "export_results": "src.ml.ml_pipeline_manager",
    "create_ml_pipeline": "src.ml.ml_pipeline_system_v2",
    "_create_model": "src.ml.ml_pipeline_system_v2",
    "calculate_model_complexity": "src.ml.ml_pipeline_utils",
    "format_metrics": "src.ml.ml_pipeline_utils",
    "get_system_info": "src.ml.ml_pipeline_utils",
    "normalize_data": "src.ml.ml_pipeline_utils",
    "split_data": "src.ml.ml_pipeline_utils",
    "validate_results": "src.ml.ml_pipeline_utils",
    "_validate_training_results": "src.ml.ml_pipeline_utils",
    "_validate_evaluation_results": "src.ml.ml_pipeline_utils",
    "list_deployments": "src.ml.model_deployment",
    "undeploy_model": "src.ml.model_deployment",
    "get_model_versions": "src.ml.model_deployment",
    "list_versions": "src.ml.model_versioning_core",
    "update_version_status": "src.ml.model_versioning_core",
    "delete_version": "src.ml.model_versioning_core",
    "promote_version": "src.ml.model_versioning_advanced",
    "compare_versions": "src.ml.model_versioning_advanced",
    "get_latest_version": "src.ml.model_versioning_advanced",
    "get_production_versions": "src.ml.model_versioning_advanced",
    "archive_old_versions": "src.ml.model_versioning_advanced",
    "validate_model_integrity": "src.ml.model_versioning_advanced",
    "execute_implementation": "src.tracing.distributed_tracing_core",
    "get_implementation_summary": "src.tracing.distributed_tracing_core",
    "send_completion_notification": "src.ml.v3_007_core",
    "_configure_pytorch": "src.ml.pytorch_infrastructure",
    "create_sample_model": "src.ml.tensorflow_infrastructure",
    "_configure_tensorflow": "src.ml.tensorflow_infrastructure",
    "create_training_job": "src.ml.training_pipeline",
    "get_job_status": "src.ml.training_pipeline",
    "list_jobs": "src.ml.training_pipeline",
    "cancel_job": "src.ml.training_pipeline",
    "_load_dataset": "src.ml.training_pipeline",
    "create_automated_retraining": "src.v3.ml_pipeline_operations",
    "setup_ml_infrastructure": "src.v3.ml_pipeline_core",
    "create_training_datasets": "src.v3.ml_pipeline_core",
    "implement_model_architectures": "src.v3.ml_pipeline_core",
    "implement_model_versioning": "src.v3.ml_pipeline_operations",
    "implement_monitoring_system": "src.v3.ml_pipeline_operations",
    "validate_ml_system": "src.v3.ml_pipeline_operations",
    "run_test": "src.ml.validation_framework_core",
    "run_test_suite": "src.ml.validation_framework_core",
    "load_results": "src.ml.validation_framework_core",
    "get_test_summary": "src.ml.validation_framework_core",
    "calculate_file_hash": "src.ml.model_versioning_core",
    "_save_version_to_registry": "src.ml.model_versioning_core",
    "_is_valid_promotion": "src.ml.model_versioning_advanced",
    "ingest": "src.ml.data_ingestion_system.data_ingestion.IngestManager",
    "_load_files": "src.ml.data_ingestion_system.data_ingestion.IngestManager",
    "_process_files": "src.ml.data_ingestion_system.data_ingestion.IngestManager",
    "start_watcher": "src.ml.data_ingestion_system.data_ingestion.IngestManager",
    "on_created": "src.ml.data_ingestion_system.data_ingestion.IngestManager",
    "_get_handler": "src.ml.data_ingestion_system.data_ingestion.IngestManager",
    "_read_txt": "src.ml.data_ingestion_system.data_ingestion.IngestManager",
    "_read_md": "src.ml.data_ingestion_system.data_ingestion.IngestManager",
    "_read_pdf": "src.ml.data_ingestion_system.data_ingestion.IngestManager",
    "_read_json": "src.ml.data_ingestion_system.data_ingestion.IngestManager",
    "_clean_text": "src.v3.v3_009_nlp_pipeline",
    "generate_embeddings": "src.ml.data_ingestion_system.data_ingestion.LocalEmbeddingsGeneratorAgent",
    "_generate_embedding_from_ollama": "src.ml.data_ingestion_system.data_ingestion.LocalEmbeddingsGeneratorAgent",
    "run_batch_pipeline": "src.ml.data_ingestion_system.data_ingestion.OrchestratorAgent",
    "run_realtime_pipeline": "src.ml.data_ingestion_system.data_ingestion.OrchestratorAgent",
    "_archive_file": "src.ml.data_ingestion_system.data_ingestion.OrchestratorAgent",
    "_save_cleaned_file": "src.ml.data_ingestion_system.data_ingestion.OrchestratorAgent",
    "preprocess_documents": "src.ml.data_ingestion_system.data_ingestion.PreprocessorAgent",
    "clean_text": "src.ml.data_ingestion_system.data_ingestion.PreprocessorAgent",
    "chunk_text": "src.ml.data_ingestion_system.data_ingestion.PreprocessorAgent",
    "_get_or_create_collection": "src.ml.data_ingestion_system.data_ingestion.VectorStoreAgent",
    "add_embeddings": "src.ml.data_ingestion_system.data_ingestion.VectorStoreAgent",
    "query_similar": "src.ml.data_ingestion_system.data_ingestion.VectorStoreAgent",
    "delete_embedding": "src.ml.data_ingestion_system.data_ingestion.VectorStoreAgent",
    "integrate_agent_tracing": "src.v3.tracing_infrastructure",
    "_validate_tracing_system": "src.tracing.core",
    "setup_tracing_infrastructure": "src.v3.tracing_infrastructure",
    "configure_jaeger_backend": "src.v3.tracing_infrastructure",
    "implement_fsm_tracing": "src.v3.tracing_infrastructure",
    "setup_messaging_observability": "src.v3.tracing_observability",
    "create_performance_monitoring": "src.v3.tracing_observability",
    "implement_error_correlation": "src.v3.tracing_observability",
    "validate_tracing_system": "src.v3.tracing_observability",
    "deploy_tracing_components": "src.v3.tracing_observability",
    "test_end_to_end_tracing": "src.v3.tracing_observability",
    "create_tracing_system": "src.tracing.distributed_tracing_system",
    "trace_agent_operation": "src.tracing.distributed_tracing_system",
    "_initialize_tracing": "src.tracing.distributed_tracing_system",
    "start_span": "src.tracing.distributed_tracing_system",
    "add_span_attribute": "src.tracing.distributed_tracing_system",
    "add_span_event": "src.tracing.distributed_tracing_system",
    "trace_messaging_operation": "src.tracing.distributed_tracing_system",
    "trace_fsm_transition": "src.tracing.distributed_tracing_system",
    "trace_v3_contract": "src.tracing.distributed_tracing_system",
    "get_trace_summary": "src.tracing.distributed_tracing_system",
    "export_traces": "src.tracing.distributed_tracing_system",
    "_get_agent_contracts": "src.validation.contract_system_validator",
    "_validate_contract_aspects": "src.validation.contract_system_validator",
    "_validate_contract_dependencies": "src.validation.contract_system_validator",
    "_validate_cycle_timelines": "src.validation.contract_system_validator",
    "_validate_contract_priorities": "src.validation.contract_system_validator",
    "_load_false_positive_patterns": "src.validation.enhanced_security_validator",
    "_load_security_patterns": "src.validation.enhanced_security_validator",
    "_load_input_validation_rules": "src.validation.enhanced_security_validator",
    "validate_input": "src.validation.enhanced_security_validator",
    "_scan_file": "src.validation.enhanced_security_validator",
    "_is_false_positive": "src.validation.enhanced_security_validator",
    "_categorize_false_positives": "src.validation.enhanced_security_validator",
    "_check_configuration_files": "src.validation.quality_gates_validator",
    "_check_security_files": "src.validation.security_validator",
    "_scan_for_sensitive_info": "src.validation.security_validator",
    "_check_required_files": "src.validation.v3_directives_validator",
    "_validate_v3_contracts": "src.validation.v3_directives_validator",
    "_validate_contract_structure": "src.validation.v3_directives_validator",
    "_save_validation_results": "src.validation.validation_framework_core",
    "load_json_file": "src.validation.validation_utils",
    "save_json_file": "src.validation.validation_utils",
    "check_file_exists": "src.validation.validation_utils",
    "get_team_alpha_agents": "src.validation.validation_utils",
    "format_validation_summary": "src.validation.validation_utils",
    "get_or_create_context": "src.discord.memory_aware_responses",
    "update_context": "src.discord.memory_aware_responses",
    "_load_user_preferences": "src.discord.memory_aware_responses",
    "_load_system_context": "src.discord.memory_aware_responses",
    "generate_response": "src.v3.v3_009_response_generation_main",
    "_analyze_message_context": "src.discord.memory_aware_responses",
    "_detect_urgency": "src.discord.memory_aware_responses",
    "_detect_sentiment": "src.discord.memory_aware_responses",
    "_detect_question_type": "src.discord.memory_aware_responses",
    "_detect_coordination_need": "src.discord.memory_aware_responses",
    "_generate_typed_response": "src.discord.memory_aware_responses",
    "_enhance_with_context": "src.discord.memory_aware_responses",
    "_apply_response_rules": "src.discord.memory_aware_responses",
    "_load_response_templates": "src.discord.memory_aware_responses",
    "_load_response_rules": "src.discord.memory_aware_responses",
    "track_conversation": "src.discord.memory_aware_responses",
    "get_conversation_stats": "src.discord.memory_aware_responses",
    "inject_context": "src.discord.memory_aware_responses",
    "_extract_recent_topics": "src.discord.memory_aware_responses",
    "_register_filters": "src.discord.template_messaging",
    "_load_default_templates": "src.discord.template_messaging",
    "render_template": "src.discord.template_messaging",
    "get_available_templates": "src.discord.template_messaging",
    "render_agent_status": "src.discord.template_messaging",
    "render_system_alert": "src.discord.template_messaging",
    "render_coordination_request": "src.discord.template_messaging",
    "render_task_completion": "src.discord.template_messaging",
    "render_swarm_coordination": "src.discord.template_messaging",
    "validate_message_length": "src.discord.template_messaging",
    "register_template": "src.discord.template_messaging",
    "get_template_info": "src.discord.template_messaging",
    "format_priority": "src.discord.template_messaging",
    "_determine_response_type": "src.v3.v3_009_nlp_pipeline",
    "create_agent_status_message": "src.discord.enhanced_bot_engine",
    "create_system_alert_message": "src.discord.enhanced_bot_engine",
    "create_coordination_message": "src.discord.enhanced_bot_engine",
    "generate_memory_aware_response": "src.discord.enhanced_bot_engine",
    "broadcast_swarm_status": "src.discord.enhanced_bot_engine",
    "send_coordination_request": "src.discord.enhanced_bot_engine",
    "put": "src.discord.realtime_coordination_core",
    "size": "src.discord.realtime_coordination_core",
    "emit_event": "src.discord.realtime_coordination",
    "process_events": "src.discord.realtime_coordination",
    "get_queue_size": "src.discord.realtime_coordination",
    "_emit_event": "src.discord.realtime_coordination_core",
    "start_coordination_service": "src.discord.realtime_coordination_advanced",
    "stop_coordination_service": "src.discord.realtime_coordination_advanced",
    "get_coordination_summary": "src.discord.realtime_coordination_advanced",
    "sync_swarm_state": "src.discord.realtime_coordination_advanced",
    "broadcast_to_swarm": "src.discord.realtime_coordination_advanced",
    "request_coordination": "src.discord.realtime_coordination_advanced",
    "add_processing_rule": "src.discord.realtime_coordination_advanced",
    "process_event_with_rules": "src.discord.realtime_coordination_advanced",
    "get_event_statistics": "src.discord.realtime_coordination_advanced",
    "_default_event_processing": "src.discord.realtime_coordination_advanced",
    "_initialize_clone_tasks": "src.team_beta.clone_automation",
    "check_dependencies": "src.team_beta.clone_automation",
    "_check_command": "src.team_beta.clone_automation",
    "clone_repository": "src.team_beta.repository_analyzer",
    "_count_files": "src.team_beta.clone_automation",
    "run_all_clones": "src.team_beta.clone_automation",
    "get_task_by_name": "src.team_beta.clone_automation",
    "get_tasks_by_status": "src.team_beta.clone_automation",
    "get_failed_tasks": "src.team_beta.clone_automation",
    "create_progress_report": "src.team_beta.clone_automation",
    "export_progress_report": "src.team_beta.clone_automation",
    "create_consolidation_analyzer": "src.team_beta.consolidation_analyzer",
    "_initialize_known_duplications": "src.team_beta.consolidation_analyzer",
    "analyze_duplications": "src.team_beta.consolidation_analyzer",
    "_assess_consolidation_risks": "src.team_beta.consolidation_analyzer",
    "create_consolidation_plan": "src.team_beta.consolidation_analyzer",
    "update_duplication_status": "src.team_beta.consolidation_analyzer",
    "get_consolidation_progress": "src.team_beta.consolidation_analyzer",
    "export_consolidation_analysis": "src.team_beta.consolidation_analyzer",
    "create_repository_analyzer": "src.team_beta.repository_analyzer",
    "_initialize_target_repositories": "src.team_beta.repository_analyzer",
    "analyze_repository_dependencies": "src.team_beta.repository_analyzer",
    "_check_nodejs": "src.team_beta.repository_analyzer",
    "_check_python": "src.team_beta.repository_analyzer",
    "_check_npm": "src.team_beta.repository_analyzer",
    "_check_pip": "src.team_beta.repository_analyzer",
    "_count_cloned_files": "src.team_beta.repository_analyzer",
    "get_repositories_by_type": "src.team_beta.repository_analyzer",
    "get_repositories_by_status": "src.team_beta.repository_manager",
    "get_failed_clones": "src.team_beta.repository_analyzer",
    "create_analysis_report": "src.team_beta.repository_analyzer",
    "create_sample_repository_manager": "src.team_beta.repository_manager",
    "_initialize_error_resolutions": "src.team_beta.repository_manager",
    "add_repository": "src.team_beta.repository_manager",
    "get_repository_by_name": "src.team_beta.repository_manager",
    "get_repositories_with_errors": "src.team_beta.repository_manager",
    "start_clone_operation": "src.team_beta.repository_manager",
    "update_clone_progress": "src.team_beta.repository_manager",
    "add_error_to_repository": "src.team_beta.repository_manager",
    "get_error_resolution": "src.team_beta.repository_manager",
    "get_high_priority_errors": "src.team_beta.repository_manager",
    "create_repository_dashboard_data": "src.team_beta.repository_manager",
    "export_dashboard_data": "src.team_beta.repository_manager",
    "validate_repository_setup": "src.team_beta.repository_manager",
    "create_agent_optimized_config": "src.team_beta.vscode_customization",
    "_initialize_themes": "src.team_beta.vscode_customization_core",
    "_initialize_extensions": "src.team_beta.vscode_customization_core",
    "_initialize_layouts": "src.team_beta.vscode_customization_core",
    "get_available_themes": "src.team_beta.vscode_customization",
    "get_agent_optimized_themes": "src.team_beta.vscode_customization",
    "get_extension_by_category": "src.team_beta.vscode_customization",
    "get_agent_specific_extensions": "src.team_beta.vscode_customization",
    "get_repository_management_extensions": "src.team_beta.vscode_customization",
    "get_layout_by_type": "src.team_beta.vscode_customization",
    "create_customization_config": "src.team_beta.vscode_customization",
    "export_configuration": "src.team_beta.vscode_customization_core",
    "validate_configuration": "src.integration.comprehensive_integration_assessment_utils",
    "get_agent_optimized_config": "src.team_beta.vscode_customization_core",
    "_create_config": "src.team_beta.vscode_customization_core",
    "create_vscode_integration": "src.team_beta.vscode_integration",
    "_initialize_fork_tasks": "src.team_beta.vscode_integration",
    "integrate_with_repository_manager": "src.team_beta.vscode_integration",
    "create_vscode_fork_workflow": "src.team_beta.vscode_integration",
    "create_team_coordination_interface": "src.team_beta.vscode_integration",
    "export_integration_report": "src.team_beta.vscode_integration",
    "_check_v2_violations": "src.team_beta.vscode_quality_gates",
    "_check_vscode_issues": "src.team_beta.vscode_quality_gates",
    "_calculate_score": "src.team_beta.vscode_quality_gates",
    "_get_quality_level": "src.team_beta.vscode_quality_gates",
    "assess_all_components": "src.integration.comprehensive_integration_assessment_v2",
    "assess_component_area": "src.integration.comprehensive_integration_assessment_v2",
    "get_assessment_report": "src.integration.comprehensive_integration_assessment_v2",
    "_generate_integration_report": "src.integration.comprehensive_integration_assessment_v2",
    "_generate_report_summary": "src.integration.comprehensive_integration_assessment_v2",
    "_get_assessment_summary": "src.integration.comprehensive_integration_assessment_v2",
    "_get_top_recommendations": "src.integration.comprehensive_integration_assessment_v2",
    "_get_health_status": "src.integration.comprehensive_integration_assessment_v2",
    "validate_system_integrity": "src.integration.comprehensive_integration_assessment_v2",
    "_detect_platform": "src.integration.integration_assessment_engine",
    "assess_component": "src.integration.integration_assessment_engine",
    "_assess_cross_platform": "src.integration.integration_assessment_engine",
    "_assess_performance": "src.integration.integration_assessment_engine",
    "_assess_repository_automation": "src.integration.integration_assessment_engine",
    "_assess_integration_testing": "src.integration.integration_assessment_engine",
    "_assess_generic_area": "src.integration.integration_assessment_engine",
    "_create_failed_assessment": "src.integration.integration_assessment_engine",
    "get_assessment_summary": "src.integration.integration_assessment_engine",
    "is_critical": "src.integration.integration_models",
    "get_health_score": "src.integration.integration_models",
    "is_compatible": "src.integration.integration_models",
    "get_compatibility_level": "src.integration.integration_models",
    "get_completion_percentage": "src.integration.integration_models",
    "get_overall_health": "src.integration.integration_models",
    "get_critical_issues_count": "src.integration.integration_models",
    "is_multi_platform": "src.integration.integration_models",
    "get_dependency_count": "src.integration.integration_models",
    "is_valid": "src.integration.integration_models",
    "create_assessment": "src.integration.comprehensive_integration_assessment_main",
    "update_assessment": "src.integration.comprehensive_integration_assessment_core",
    "get_assessment_by_area": "src.integration.comprehensive_integration_assessment_core",
    "get_assessment_by_component": "src.integration.comprehensive_integration_assessment_core",
    "create_assessment_configuration": "src.integration.comprehensive_integration_assessment_utils",
    "format_assessment_score": "src.integration.comprehensive_integration_assessment_utils",
    "validate_assessment": "src.integration.comprehensive_integration_assessment_utils",
    "_calculate_grade": "src.integration.comprehensive_integration_assessment_utils",
    "identify_issues": "src.integration.comprehensive_integration_assessment_utils",
    "generate_summary_report": "src.observability.memory.report",
    "generate_detailed_report": "src.integration.comprehensive_integration_assessment_utils",
    "detect_platform": "src.integration.comprehensive_integration_assessment_utils",
    "create_integration_assessment": "src.integration.comprehensive_integration_assessment_main",
    "run_comprehensive_integration_assessment": "src.integration.comprehensive_integration_assessment_main",
    "initialize_assessment": "src.integration.comprehensive_integration_assessment_main",
    "assess_cross_platform_compatibility": "src.integration.comprehensive_integration_assessment_main",
    "assess_performance": "src.integration.comprehensive_integration_assessment_main",
    "assess_repository_automation": "src.integration.comprehensive_integration_assessment_main",
    "assess_integration_testing": "src.integration.comprehensive_integration_assessment_main",
    "_evaluate_cross_platform": "src.integration.comprehensive_integration_assessment_main",
    "_evaluate_performance": "src.integration.comprehensive_integration_assessment_main",
    "_evaluate_repository_automation": "src.integration.comprehensive_integration_assessment_main",
    "_evaluate_integration_testing": "src.integration.comprehensive_integration_assessment_main",
    "run_comprehensive_assessment": "src.integration.comprehensive_integration_assessment_main",
    "generate_final_report": "src.integration.comprehensive_integration_assessment_main",
    "get_assessment_status": "src.integration.comprehensive_integration_assessment_main",
    "get_assessment": "src.integration.comprehensive_integration_assessment_main",
    "list_assessments": "src.integration.comprehensive_integration_assessment_main",
    "run_all_assessments": "src.integration.comprehensive_integration_assessment_main",
    "create_agent6_agent8_enhanced_qa_coordination": "src.integration.qa_coordination.core_coordination",
    "_initialize_phase3_status": "src.integration.qa_coordination.core_coordination",
    "_define_agent_expertise": "src.integration.qa_coordination.core_coordination",
    "create_qa_enhancement": "src.integration.qa_coordination.core_coordination",
    "_initialize_qa_enhancements": "src.integration.qa_coordination.core_coordination",
    "_define_coordination_phases": "src.integration.qa_coordination.core_coordination",
    "generate_enhanced_qa_report": "src.integration.qa_coordination.core_coordination",
    "create_performance_validation_enhancement": "src.integration.qa_coordination.performance_validation",
    "create_performance_test": "src.integration.qa_coordination.performance_validation",
    "create_load_test": "src.integration.qa_coordination.performance_validation",
    "run_performance_validation": "src.integration.qa_coordination.performance_validation",
    "_test_qa_coordination_performance": "src.integration.qa_coordination.performance_validation",
    "_test_vector_database_performance": "src.integration.qa_coordination.performance_validation",
    "_test_quality_gates_performance": "src.integration.qa_coordination.performance_validation",
    "_test_validation_protocols_performance": "src.integration.qa_coordination.performance_validation",
    "measure_system_performance": "src.integration.qa_coordination.performance_validation",
    "_measure_cpu_usage": "src.integration.qa_coordination.performance_validation",
    "_measure_memory_usage": "src.integration.qa_coordination.performance_validation",
    "_measure_disk_usage": "src.integration.qa_coordination.performance_validation",
    "_measure_response_times": "src.integration.qa_coordination.performance_validation",
    "generate_performance_report": "src.integration.qa_coordination.performance_validation",
    "create_advanced_validation_protocols": "src.integration.qa_coordination.validation_protocols",
    "_load_agent6_expertise": "src.integration.qa_coordination.validation_protocols",
    "create_validation_protocol": "src.integration.qa_coordination.validation_protocols",
    "run_v2_compliance_validation": "src.integration.qa_coordination.validation_protocols",
    "run_enhanced_quality_gates": "src.integration.qa_coordination.validation_protocols",
    "validate_architecture_compliance": "src.integration.qa_coordination.validation_protocols",
    "_check_single_source_of_truth": "src.integration.qa_coordination.validation_protocols",
    "_check_modular_design": "src.integration.qa_coordination.validation_protocols",
    "_check_dependency_injection": "src.integration.qa_coordination.validation_protocols",
    "_check_error_handling": "src.integration.qa_coordination.validation_protocols",
    "generate_validation_report": "src.integration.qa_coordination.validation_protocols",
    "integrate_vector_database_with_qa": "src.integration.qa_coordination.vector_database_integration",
    "integrate_vector_search_with_qa": "src.integration.qa_coordination.vector_database_integration",
    "_test_vector_search_capabilities": "src.integration.qa_coordination.vector_database_integration",
    "enhance_qa_with_vector_search": "src.integration.qa_coordination.vector_database_integration",
    "_analyze_qa_search_results": "src.integration.qa_coordination.vector_database_integration",
    "create_qa_search_index": "src.integration.qa_coordination.vector_database_integration",
    "create_rds_config": "src.v3.cloud_infrastructure_data",
    "create_redis_config": "src.v3.cloud_infrastructure_data",
    "create_vpc_config": "src.v3.cloud_infrastructure_networking",
    "create_eks_config": "src.v3.cloud_infrastructure_networking",
    "create_security_config": "src.v3.cloud_infrastructure_security",
    "process_command": "src.v3.v3_009_nlp_pipeline",
    "get_command_system_status": "src.v3.v3_009_command_understanding",
    "_initialize_command_patterns": "src.v3.v3_009_command_understanding",
    "_initialize_parameter_extractors": "src.v3.v3_009_command_understanding",
    "_initialize_priority_indicators": "src.v3.v3_009_command_understanding",
    "parse_command": "src.v3.v3_009_command_understanding",
    "_extract_parameters": "src.v3.v3_009_command_understanding",
    "_classify_command_type": "src.v3.v3_009_command_understanding",
    "_calculate_pattern_confidence": "src.v3.v3_009_nlp_pipeline",
    "_extract_action": "src.v3.v3_009_command_understanding",
    "_determine_priority": "src.v3.v3_009_command_understanding",
    "_initialize_execution_handlers": "src.v3.v3_009_command_understanding",
    "_handle_assign_task": "src.v3.v3_009_command_understanding",
    "_handle_get_status": "src.v3.v3_009_command_understanding",
    "_handle_coordinate": "src.v3.v3_009_command_understanding",
    "_handle_emergency": "src.v3.v3_009_command_understanding",
    "_handle_provide_information": "src.v3.v3_009_command_understanding",
    "_handle_execute_action": "src.v3.v3_009_command_understanding",
    "_handle_unknown_command": "src.v3.v3_009_command_understanding",
    "recognize_intent": "src.v3.v3_009_intent_recognition",
    "get_intent_statistics": "src.v3.v3_009_intent_recognition",
    "get_intent_system_status": "src.v3.v3_009_intent_recognition",
    "_initialize_intent_patterns": "src.v3.v3_009_nlp_pipeline",
    "_initialize_keyword_weights": "src.v3.v3_009_intent_recognition",
    "_initialize_context_indicators": "src.v3.v3_009_intent_recognition",
    "_initialize_entity_patterns": "src.v3.v3_009_nlp_pipeline",
    "_extract_entities": "src.v3.v3_009_nlp_pipeline",
    "_extract_context_clues": "src.v3.v3_009_intent_recognition",
    "_classify_intent": "src.v3.v3_009_nlp_pipeline",
    "_calculate_intent_confidence": "src.v3.v3_009_intent_recognition",
    "_determine_confidence_level": "src.v3.v3_009_intent_recognition",
    "process_intent": "src.v3.v3_009_intent_recognition",
    "process_nlp_input": "src.v3.v3_009_nlp_pipeline",
    "get_nlp_system_status": "src.v3.v3_009_nlp_pipeline",
    "_initialize_response_templates": "src.v3.v3_009_nlp_pipeline",
    "process_text": "src.v3.v3_009_nlp_pipeline",
    "_customize_response": "src.v3.v3_009_nlp_pipeline",
    "_initialize_command_handlers": "src.v3.v3_009_nlp_pipeline",
    "_execute_command": "src.v3.v3_009_nlp_pipeline",
    "_check_status": "src.v3.v3_009_nlp_pipeline",
    "_provide_help": "src.v3.v3_009_nlp_pipeline",
    "_investigate_error": "src.v3.v3_009_nlp_pipeline",
    "_analyze_question": "src.v3.v3_009_nlp_pipeline",
    "_notify_agent": "src.v3.v3_009_nlp_pipeline",
    "_process_task": "src.v3.v3_009_nlp_pipeline",
    "_escalate_priority": "src.v3.v3_009_nlp_pipeline",
    "process_input": "src.v3.v3_009_nlp_pipeline",
    "add_server": "src.v3.v3_011_api_gateway_advanced",
    "get_next_server": "src.v3.v3_011_api_gateway_advanced",
    "get_endpoint_stats": "src.v3.v3_011_api_gateway_advanced",
    "get_overall_stats": "src.v3.v3_011_api_gateway_advanced",
    "_create_alert": "src.v3.v3_011_api_gateway_advanced",
    "get_health_dashboard": "src.v3.v3_011_api_gateway_advanced",
    "is_allowed": "src.v3.v3_011_api_gateway_core",
    "authenticate": "src.v3.v3_011_api_gateway_core",
    "_validate_jwt": "src.v3.v3_011_api_gateway_core",
    "register_endpoint": "src.v3.v3_011_api_gateway_core",
    "handle_request": "src.v3.v3_011_api_gateway_core",
    "_generate_request_id": "src.v3.v3_011_api_gateway_core",
    "_create_error_response": "src.v3.v3_011_api_gateway_core",
    "generate_api_documentation": "src.v3.v3_011_api_gateway_core",
    "sample_handler": "src.v3.v3_011_api_gateway_core",
    "create_button": "src.v3.v3_012_ui_components",
    "create_input": "src.v3.v3_012_ui_components",
    "create_text": "src.v3.v3_012_ui_components",
    "create_card": "src.v3.v3_012_ui_components",
    "create_list": "src.v3.v3_012_ui_components",
    "render_component": "src.v3.v3_012_ui_components",
    "render_screen": "src.v3.v3_012_ui_components",
    "update_component_state": "src.v3.v3_012_ui_components",
    "validate_component": "src.v3.v3_012_ui_components",
    "validate_screen": "src.v3.v3_012_ui_components",
    "create_login_screen": "src.v3.v3_012_ui_screens",
    "create_dashboard_screen": "src.v3.v3_012_ui_screens",
    "create_settings_screen": "src.v3.v3_012_ui_screens",
    "create_profile_screen": "src.v3.v3_012_ui_screens",
    "register_screen": "src.v3.v3_012_ui_screens",
    "navigate_to": "src.v3.v3_012_ui_screens",
    "go_back": "src.v3.v3_012_ui_screens",
    "get_current_screen": "src.v3.v3_012_ui_screens",
    "render_current_screen": "src.v3.v3_012_ui_screens",
    "get_screen_list": "src.v3.v3_012_ui_screens",
    "initialize_app_screens": "src.v3.v3_012_ui_screens",
    "execute_navigation_flow": "src.v3.v3_012_ui_screens",
    "get_navigation_status": "src.v3.v3_012_ui_screens",
    "create_websocket_integration": "src.v3.web_dashboard_api",
    "create_agent_status_component": "src.v3.web_dashboard_components",
    "create_v3_pipeline_component": "src.v3.web_dashboard_components",
    "create_system_health_component": "src.v3.web_dashboard_components",
    "create_real_time_component": "src.v3.web_dashboard_components",
    "create_configuration_component": "src.v3.web_dashboard_components",
    "_initialize_default_templates": "src.v3.v3_009_response_generation_core",
    "_process_template": "src.v3.v3_009_response_generation_core",
    "add_template": "src.v3.v3_009_response_generation_core",
    "get_template": "src.v3.v3_009_response_generation_core",
    "create_response_generation_service": "src.v3.v3_009_response_generation_main",
    "generate_agent_response": "src.v3.v3_009_response_generation_main",
    "generate_task_assignment_response": "src.v3.v3_009_response_generation_main",
    "generate_status_update_response": "src.v3.v3_009_response_generation_main",
    "generate_coordination_response": "src.v3.v3_009_response_generation_main",
    "add_custom_template": "src.v3.v3_009_response_generation_main",
    "get_response_statistics": "src.v3.v3_009_response_generation_main",
    "_create_cached_response": "src.v3.v3_009_response_generation_main",
    "_calculate_cache_hit_rate": "src.v3.v3_009_response_generation_main",
    "process_message_request": "src.v3.v3_009_response_generation_main",
    "_get_template_for_message_type": "src.v3.v3_009_response_generation_main",
    "create_response_request": "src.v3.v3_009_response_generation_utils",
    "format_response_content": "src.v3.v3_009_response_generation_utils",
    "format_as_text": "src.v3.v3_009_response_generation_utils",
    "format_as_structured": "src.v3.v3_009_response_generation_utils",
    "format_as_bullet_points": "src.v3.v3_009_response_generation_utils",
    "format_as_table": "src.v3.v3_009_response_generation_utils",
    "format_as_json": "src.v3.v3_009_response_generation_utils",
    "validate_template": "src.v3.v3_009_response_generation_utils",
    "validate_request": "src.v3.v3_009_response_generation_utils",
    "analyze_complexity": "src.v3.v3_009_response_generation_utils",
    "extract_keywords": "src.v3.v3_009_response_generation_utils",
    "_initialize_platform_configs": "src.v3.v3_012_mobile_app_framework_core",
    "create_component": "src.v3.v3_012_mobile_app_framework_main",
    "_generate_component_methods": "src.v3.v3_012_mobile_app_framework_core",
    "get_platform_config": "src.v3.v3_012_mobile_app_framework_main",
    "list_components": "src.v3.v3_012_mobile_app_framework_main",
    "export_project_structure": "src.v3.v3_012_mobile_app_framework_main",
    "create_mobile_component": "src.v3.v3_012_mobile_app_framework_main",
    "generate_component_code": "src.v3.v3_012_mobile_app_framework_templates",
    "create_dream_os_app": "src.v3.v3_012_mobile_app_framework_main",
    "_initialize_build_configs": "src.v3.v3_012_mobile_app_framework_main",
    "generate_build_config": "src.v3.v3_012_mobile_app_framework_main",
    "_initialize_component_templates": "src.v3.v3_012_mobile_app_framework_templates",
    "_generate_props_interface": "src.v3.v3_012_mobile_app_framework_templates",
    "_generate_props_destructure": "src.v3.v3_012_mobile_app_framework_templates",
    "_generate_component_content": "src.v3.v3_012_mobile_app_framework_templates",
    "_generate_service_methods": "src.v3.v3_012_mobile_app_framework_templates",
    "_generate_utility_methods": "src.v3.v3_012_mobile_app_framework_templates",
    "_generate_storage_methods": "src.v3.v3_012_mobile_app_framework_templates",
    "get_cache_hit_rate": "src.aletheia.aletheia_prompt_manager",
    "_create_cache_key": "src.aletheia.aletheia_prompt_manager",
    "_build_prompt": "src.aletheia.aletheia_prompt_manager",
    "_optimize_prompt": "src.aletheia.aletheia_prompt_manager",
    "_cache_prompt": "src.aletheia.aletheia_prompt_manager",
    "_get_from_cache": "src.aletheia.aletheia_prompt_manager",
    "_evict_oldest_cache_entry": "src.aletheia.aletheia_prompt_manager",
    "get_memory_info": "src.memory.persistent_memory",
    "_validate_key": "src.memory.persistent_memory",
    "_data_operations": "src.memory.persistent_memory",
    "_cache_operations": "src.memory.persistent_memory",
    "_disk_operations": "src.memory.persistent_memory",
    "_get_file_path": "src.memory.persistent_memory",
    "_execute_phase": "src.tools.swarm_workflow_orchestrator_core",
    "_extract_agents_from_phases": "src.tools.swarm_workflow_orchestrator_core",
    "_calculate_duration": "src.tools.swarm_workflow_orchestrator_core",
    "send_agent_message": "src.tools.swarm_workflow_orchestrator_utils",
    "create_task_file": "src.tools.swarm_workflow_orchestrator_utils",
    "wait_for_agent_completion": "src.tools.swarm_workflow_orchestrator_utils",
    "create_v2_trading_robot_workflow": "src.tools.swarm_workflow_orchestrator_main",
    "_send_agent_message": "src.tools.swarm_workflow_orchestrator_main",
    "_create_task_file": "src.tools.swarm_workflow_orchestrator_main",
    "_create_devlog": "src.tools.swarm_workflow_orchestrator_main",
    "_wait_for_agent_completion": "src.tools.swarm_workflow_orchestrator_main",
    "warning_mb": "src.observability.memory.policies",
    "critical_mb": "src.observability.memory.policies",
    "get_budget": "src.observability.memory.policies",
    "check_budget": "src.observability.memory.policies",
    "enforce_limits": "src.observability.memory.policies",
    "get_snapshot": "src.observability.memory.policies",
    "check_service": "src.observability.memory.policies",
    "add_snapshot": "src.observability.memory.detectors",
    "detect_leak": "src.observability.memory.detectors",
    "analyze_trend": "src.observability.memory.detectors",
    "take_object_snapshot": "src.observability.memory.detectors",
    "detect_object_leaks": "src.observability.memory.detectors",
    "should_trigger_cleanup": "src.observability.memory.detectors",
    "execute_cleanup": "src.observability.memory.detectors",
    "run_full_detection": "src.observability.memory.detectors",
    "report_command": "src.observability.memory.cli",
    "watch_command": "src.observability.memory.cli",
    "cleanup_command": "src.observability.memory.cli",
    "_write_report": "src.observability.memory.cli",
    "_print_report": "src.observability.memory.cli",
    "_ensure_storage_directory": "src.observability.memory.ledger",
    "add_entry": "src.observability.memory.ledger",
    "record": "src.observability.memory.ledger",
    "get_entries_for_service": "src.observability.memory.ledger",
    "get_recent_entries": "src.observability.memory.ledger",
    "cleanup_old_entries": "src.observability.memory.ledger",
    "get_service_summary": "src.observability.memory.ledger",
    "detect_memory_growth": "src.observability.memory.ledger",
    "get_global_summary": "src.observability.memory.ledger",
    "record_snapshot": "src.observability.memory.ledger",
    "save_ledger": "src.observability.memory.ledger",
    "get_service_analysis": "src.observability.memory.ledger",
    "_check_all_services": "src.observability.memory.watchdog",
    "_handle_warning": "src.observability.memory.watchdog",
    "_handle_critical": "src.observability.memory.watchdog",
    "_execute_enforcement": "src.observability.memory.watchdog",
    "_quarantine_service": "src.observability.memory.watchdog",
    "_kill_service": "src.observability.memory.watchdog",
    "get_recent_alerts": "src.observability.memory.watchdog",
    "clear_alerts": "src.observability.memory.watchdog",
    "run_full_check": "src.observability.memory.watchdog",
    "create_watchdog": "src.observability.memory.watchdog",
    "start_all": "src.observability.memory.watchdog",
    "get_watchdog": "src.observability.memory.watchdog",
    "format_text": "src.observability.memory.report",
    "format_markdown": "src.observability.memory.report",
    "format_html": "src.observability.memory.report",
    "generate_service_report": "src.observability.memory.report",
    "_assess_health": "src.observability.memory.report",
    "instrument_operation": "src.observability.memory.integrations.messaging_checks",
    "purge_old_requests": "src.observability.memory.integrations.messaging_checks",
    "patch_messaging_service": "src.observability.memory.integrations.messaging_service_patches",
    "create_enhanced_messaging_service": "src.observability.memory.integrations.messaging_service_patches",
    "validate_message_before_send": "src.observability.memory.integrations.messaging_service_patches",
    "instrument_send_operation": "src.observability.memory.integrations.messaging_service_patches",
    "purge_coordination_requests": "src.observability.memory.integrations.messaging_service_patches",
    "get_patch_status": "src.observability.memory.integrations.messaging_service_patches"
  }
}