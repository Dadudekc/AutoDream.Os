#!/usr/bin/env python3
"""
Devlog CLI Demo - Agent Cellphone V2
====================================

Demonstrates how agents can use the new devlog CLI system.
Shows creating, searching, and managing devlogs.

Author: V2 SWARM CAPTAIN
License: MIT
"""

import subprocess
import sys
from pathlib import Path

def run_command(command: str, description: str) -> bool:
    """Run a command and show the result"""
    print(f"\nüéØ {description}")
    print("="*60)
    print(f"Command: {command}")
    print("-" * 60)
    
    try:
        result = subprocess.run(command.split(), capture_output=True, text=True, timeout=30)
        
        if result.stdout:
            print("‚úÖ Output:")
            print(result.stdout)
        
        if result.stderr:
            print("‚ö†Ô∏è  Warnings:")
            print(result.stderr)
        
        if result.returncode == 0:
            print("‚úÖ Command executed successfully")
            return True
        else:
            print(f"‚ùå Command failed with return code: {result.returncode}")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå Command timed out")
        return False
    except Exception as e:
        print(f"‚ùå Error running command: {e}")
        return False

def main():
    """Main demo function"""
    print("üéñÔ∏è  DEVLOG CLI SYSTEM DEMO")
    print("="*60)
    print("This demo shows how agents can use the new devlog CLI system")
    print("to create, search, and manage project devlogs.")
    print()
    print("‚úÖ Features:")
    print("  ‚Ä¢ Create devlog entries via CLI")
    print("  ‚Ä¢ Store in knowledge database")
    print("  ‚Ä¢ Post to Discord automatically")
    print("  ‚Ä¢ Search and review project history")
    print("  ‚Ä¢ Uses existing architecture")
    print()
    
    # Demo 1: Show help
    run_command("python -m src.core.devlog_cli --help", "Demo 1: Show CLI Help")
    
    # Demo 2: Show system status
    run_command("python -m src.core.devlog_cli status", "Demo 2: Show System Status")
    
    # Demo 3: Create a demo devlog entry
    demo_content = """This is a demo devlog entry created by the demo script.
It shows how agents can easily create devlogs via CLI.

Key benefits:
- Simple command-line interface
- Automatic knowledge database storage
- Discord integration
- Searchable project history
- Metadata tracking

This system follows our V2 coding standards and uses existing architecture."""
    
    create_command = f'python -m src.core.devlog_cli create --title "Devlog CLI Demo Entry" --content "{demo_content}" --agent "demo-agent" --category "project_update" --tags "demo,cli,devlog,integration" --priority "normal"'
    
    run_command(create_command, "Demo 3: Create Demo Devlog Entry")
    
    # Demo 4: Search for the demo entry
    run_command("python -m src.core.devlog_cli search --query 'Devlog CLI Demo'", "Demo 4: Search for Demo Entry")
    
    # Demo 5: Show recent entries
    run_command("python -m src.core.devlog_cli recent --limit 3", "Demo 5: Show Recent Entries")
    
    print("\nüéâ DEVLOG CLI DEMO COMPLETED!")
    print("="*60)
    print("‚úÖ What we've demonstrated:")
    print("  ‚Ä¢ CLI help and status")
    print("  ‚Ä¢ Creating devlog entries")
    print("  ‚Ä¢ Searching devlogs")
    print("  ‚Ä¢ Viewing recent entries")
    print()
    print("üöÄ Agents can now use:")
    print("  ‚Ä¢ python -m src.core.devlog_cli create --title 'Title' --content 'Content'")
    print("  ‚Ä¢ python -m src.core.devlog_cli search --query 'search term'")
    print("  ‚Ä¢ python -m src.core.devlog_cli recent --limit 10")
    print("  ‚Ä¢ python -m src.core.devlog_cli status")
    print()
    print("üí° This system:")
    print("  ‚Ä¢ Uses existing KnowledgeDatabase")
    print("  ‚Ä¢ Integrates with Discord")
    print("  ‚Ä¢ Follows V2 coding standards")
    print("  ‚Ä¢ Provides knowledge base for project ideas")
    print("  ‚Ä¢ Enables agent collaboration via devlogs")

if __name__ == "__main__":
    main()
